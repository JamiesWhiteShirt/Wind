; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

	TITLE	C:\Users\Glenn\Documents\GitHub\Wind\Project\Wind\Wind\noise.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	_srand:PROC
EXTRN	_rand:PROC
PUBLIC	?interpolate@NoiseGenerator3D@Noise@@AAEMM@Z	; Noise::NoiseGenerator3D::interpolate
PUBLIC	?noiseAt@NoiseGenerator3D@Noise@@AAEEAAH00@Z	; Noise::NoiseGenerator3D::noiseAt
PUBLIC	?getNoise@NoiseGenerator2D@Noise@@QAEMMMM@Z	; Noise::NoiseGenerator2D::getNoise
PUBLIC	?interpolate@NoiseGenerator2D@Noise@@AAEMM@Z	; Noise::NoiseGenerator2D::interpolate
PUBLIC	?noiseAt@NoiseGenerator2D@Noise@@AAEEAAH0@Z	; Noise::NoiseGenerator2D::noiseAt
PUBLIC	?getNoise@NoiseGenerator2D@Noise@@QAEMMM@Z	; Noise::NoiseGenerator2D::getNoise
PUBLIC	??1NoiseGenerator2D@Noise@@QAE@XZ		; Noise::NoiseGenerator2D::~NoiseGenerator2D
PUBLIC	??0NoiseGenerator2D@Noise@@QAE@HHMI@Z		; Noise::NoiseGenerator2D::NoiseGenerator2D
PUBLIC	?getNoise@NoiseGenerator3D@Noise@@QAEMMMMM@Z	; Noise::NoiseGenerator3D::getNoise
PUBLIC	??1NoiseGenerator3D@Noise@@QAE@XZ		; Noise::NoiseGenerator3D::~NoiseGenerator3D
PUBLIC	??0NoiseGenerator3D@Noise@@QAE@HHMI@Z		; Noise::NoiseGenerator3D::NoiseGenerator3D
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
;	COMDAT ??0NoiseGenerator3D@Noise@@QAE@HHMI@Z
_TEXT	SEGMENT
_sizeExponent$dead$ = 8					; size = 4
_octaves$dead$ = 12					; size = 4
_seed$dead$ = 16					; size = 4
??0NoiseGenerator3D@Noise@@QAE@HHMI@Z PROC		; Noise::NoiseGenerator3D::NoiseGenerator3D, COMDAT
; _this$dead$ = ecx
; _smoothness$ = xmm3s

; 107  : {

  00000	56		 push	 esi
  00001	68 00 10 00 00	 push	 4096			; 00001000H
  00006	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A, 4
  00010	c7 05 04 00 00
	00 10 00 00 00	 mov	 DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+4, 16 ; 00000010H
  0001a	c7 05 08 00 00
	00 08 00 00 00	 mov	 DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+8, 8
  00024	f3 0f 11 1d 0c
	00 00 00	 movss	 DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+12, xmm3
  0002c	c7 05 10 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+16, 3
  00036	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 108  : 	srand(seed);

  0003b	6a 03		 push	 3
  0003d	a3 14 00 00 00	 mov	 DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+20, eax
  00042	e8 00 00 00 00	 call	 _srand

; 109  : 	for(int i = 0; i < size * size * size; i++)

  00047	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+4
  0004d	8b c1		 mov	 eax, ecx
  0004f	0f af c1	 imul	 eax, ecx
  00052	0f af c1	 imul	 eax, ecx
  00055	83 c4 08	 add	 esp, 8
  00058	33 f6		 xor	 esi, esi
  0005a	85 c0		 test	 eax, eax
  0005c	7e 25		 jle	 SHORT $LN9@NoiseGener
  0005e	8b ff		 npad	 2
$LL3@NoiseGener:

; 110  : 	{
; 111  : 		noiseMap[i] = rand() & 1;

  00060	e8 00 00 00 00	 call	 _rand
  00065	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+20
  0006b	24 01		 and	 al, 1
  0006d	88 04 31	 mov	 BYTE PTR [ecx+esi], al
  00070	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+4
  00076	8b c1		 mov	 eax, ecx
  00078	0f af c1	 imul	 eax, ecx
  0007b	0f af c1	 imul	 eax, ecx
  0007e	46		 inc	 esi
  0007f	3b f0		 cmp	 esi, eax
  00081	7c dd		 jl	 SHORT $LL3@NoiseGener
$LN9@NoiseGener:

; 112  : 	}
; 113  : }

  00083	b8 00 00 00 00	 mov	 eax, OFFSET ?noise@@3VNoiseGenerator3D@Noise@@A ; noise
  00088	5e		 pop	 esi
  00089	c2 0c 00	 ret	 12			; 0000000cH
??0NoiseGenerator3D@Noise@@QAE@HHMI@Z ENDP		; Noise::NoiseGenerator3D::NoiseGenerator3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
;	COMDAT ??1NoiseGenerator3D@Noise@@QAE@XZ
_TEXT	SEGMENT
??1NoiseGenerator3D@Noise@@QAE@XZ PROC			; Noise::NoiseGenerator3D::~NoiseGenerator3D, COMDAT
; _this$dead$ = ecx

; 117  : 	delete[] noiseMap;

  00000	ff 35 14 00 00
	00		 push	 DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+20
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 118  : }

  0000c	c3		 ret	 0
??1NoiseGenerator3D@Noise@@QAE@XZ ENDP			; Noise::NoiseGenerator3D::~NoiseGenerator3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
;	COMDAT ?getNoise@NoiseGenerator3D@Noise@@QAEMMMMM@Z
_TEXT	SEGMENT
tv930 = -92						; size = 8
tv933 = -84						; size = 8
tv924 = -84						; size = 8
tv939 = -76						; size = 8
tv948 = -68						; size = 8
_maxValue$1$ = -56					; size = 4
?noise@@3VNoiseGenerator3D@Noise@@A$1 = -52		; size = 4
_value$1$ = -48						; size = 4
_noise$1$ = -44						; size = 4
_x$1$ = -40						; size = 4
tv942 = -36						; size = 8
_ix1$1$ = -32						; size = 4
_z$1$ = -24						; size = 4
_y$1$ = -20						; size = 4
_ix$1$ = -16						; size = 4
tv852 = -12						; size = 4
_andField$1$ = -8					; size = 4
_smoothness$ = 8					; size = 4
?getNoise@NoiseGenerator3D@Noise@@QAEMMMMM@Z PROC	; Noise::NoiseGenerator3D::getNoise, COMDAT
; _this$dead$ = ecx
; _x$ = xmm1s
; _y$ = xmm2s
; _z$ = xmm3s

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H

; 127  : 	float noise = 0.0f;
; 128  : 	float value = 1.0f;
; 129  : 	float maxValue = 0.0f;
; 130  : 
; 131  : 	int ix;
; 132  : 	int ix1;
; 133  : 	int iy;
; 134  : 	int iy1;
; 135  : 	int iz;
; 136  : 	int iz1;
; 137  : 	float xMix;
; 138  : 	float xMixi;
; 139  : 	float yMix;
; 140  : 	float yMixi;
; 141  : 	float zMix;
; 142  : 	float zMixi;
; 143  : 
; 144  : 	for(int i = 0; i < octaves; i++)

  00006	a1 08 00 00 00	 mov	 eax, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+8
  0000b	53		 push	 ebx
  0000c	f3 0f 11 5d e8	 movss	 DWORD PTR _z$1$[ebp], xmm3
  00011	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00019	0f 57 c0	 xorps	 xmm0, xmm0
  0001c	56		 push	 esi
  0001d	f3 0f 11 55 ec	 movss	 DWORD PTR _y$1$[ebp], xmm2
  00022	0f 28 d1	 movaps	 xmm2, xmm1
  00025	f3 0f 11 4d d8	 movss	 DWORD PTR _x$1$[ebp], xmm1
  0002a	57		 push	 edi
  0002b	f3 0f 11 45 d4	 movss	 DWORD PTR _noise$1$[ebp], xmm0
  00030	f3 0f 11 5d d0	 movss	 DWORD PTR _value$1$[ebp], xmm3
  00035	0f 28 c8	 movaps	 xmm1, xmm0
  00038	89 45 cc	 mov	 DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A$1[ebp], eax
  0003b	85 c0		 test	 eax, eax
  0003d	0f 8e cc 03 00
	00		 jle	 $LN1@getNoise
  00043	a1 04 00 00 00	 mov	 eax, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+4
  00048	48		 dec	 eax
  00049	89 45 f8	 mov	 DWORD PTR _andField$1$[ebp], eax
  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A
  00051	03 c0		 add	 eax, eax
  00053	89 45 f4	 mov	 DWORD PTR tv852[ebp], eax
  00056	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL3@getNoise:
  00060	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 416  :         {return ((float)floor((double)_X)); }

  00063	f3 0f 5a c2	 cvtss2sd xmm0, xmm2
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp

; 146  : 		maxValue += value;

  00067	f3 0f 58 cb	 addss	 xmm1, xmm3
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 416  :         {return ((float)floor((double)_X)); }

  0006b	f2 0f 11 45 bc	 movsd	 QWORD PTR tv948[ebp], xmm0
  00070	83 ec 08	 sub	 esp, 8
  00073	dd 45 bc	 fld	 QWORD PTR tv948[ebp]
  00076	dd 1c 24	 fstp	 QWORD PTR [esp]
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp

; 146  : 		maxValue += value;

  00079	f3 0f 11 4d c8	 movss	 DWORD PTR _maxValue$1$[ebp], xmm1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 416  :         {return ((float)floor((double)_X)); }

  0007e	e8 00 00 00 00	 call	 _floor
  00083	dd 5d dc	 fstp	 QWORD PTR tv942[ebp]
  00086	f2 0f 10 45 dc	 movsd	 xmm0, QWORD PTR tv942[ebp]
  0008b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp

; 148  : 		ix = (int)floorf(x);

  0008f	f3 0f 2c c0	 cvttss2si eax, xmm0
  00093	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 416  :         {return ((float)floor((double)_X)); }

  00098	0f 5a c0	 cvtps2pd xmm0, xmm0
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp

; 148  : 		ix = (int)floorf(x);

  0009b	89 45 f0	 mov	 DWORD PTR _ix$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 416  :         {return ((float)floor((double)_X)); }

  0009e	f2 0f 11 45 b4	 movsd	 QWORD PTR tv939[ebp], xmm0
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp

; 149  : 		ix1 = ix + 1;

  000a3	40		 inc	 eax
  000a4	89 45 e0	 mov	 DWORD PTR _ix1$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 416  :         {return ((float)floor((double)_X)); }

  000a7	dd 45 b4	 fld	 QWORD PTR tv939[ebp]
  000aa	dd 1c 24	 fstp	 QWORD PTR [esp]
  000ad	e8 00 00 00 00	 call	 _floor
  000b2	dd 5d ac	 fstp	 QWORD PTR tv933[ebp]
  000b5	f2 0f 10 45 ac	 movsd	 xmm0, QWORD PTR tv933[ebp]
  000ba	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp

; 150  : 		iy = (int)floorf(y);

  000be	f3 0f 2c f8	 cvttss2si edi, xmm0
  000c2	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _z$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 416  :         {return ((float)floor((double)_X)); }

  000c7	0f 5a c0	 cvtps2pd xmm0, xmm0
  000ca	f2 0f 11 45 a4	 movsd	 QWORD PTR tv930[ebp], xmm0
  000cf	dd 45 a4	 fld	 QWORD PTR tv930[ebp]
  000d2	dd 1c 24	 fstp	 QWORD PTR [esp]
  000d5	e8 00 00 00 00	 call	 _floor
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp

; 154  : 		xMix = interpolate(x - ix);

  000da	f3 0f 10 55 d8	 movss	 xmm2, DWORD PTR _x$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 416  :         {return ((float)floor((double)_X)); }

  000df	dd 5d ac	 fstp	 QWORD PTR tv924[ebp]
  000e2	f2 0f 10 45 ac	 movsd	 xmm0, QWORD PTR tv924[ebp]
  000e7	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp

; 97   : 	return 1.0f - f * f * (3 - f * 2);

  000eb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40400000

; 151  : 		iy1 = iy + 1;
; 152  : 		iz = (int)floorf(z);

  000f3	f3 0f 2c f0	 cvttss2si esi, xmm0
  000f7	66 0f 6e 45 f0	 movd	 xmm0, DWORD PTR _ix$1$[ebp]

; 154  : 		xMix = interpolate(x - ix);

  000fc	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 97   : 	return 1.0f - f * f * (3 - f * 2);

  000ff	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f800000

; 154  : 		xMix = interpolate(x - ix);

  00107	f3 0f 5c d0	 subss	 xmm2, xmm0

; 97   : 	return 1.0f - f * f * (3 - f * 2);

  0010b	0f 28 f4	 movaps	 xmm6, xmm4

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  0010e	8b 45 f8	 mov	 eax, DWORD PTR _andField$1$[ebp]

; 97   : 	return 1.0f - f * f * (3 - f * 2);

  00111	0f 28 dc	 movaps	 xmm3, xmm4

; 155  : 		xMixi = 1.0f - xMix;

  00114	0f 28 fc	 movaps	 xmm7, xmm4

; 157  : 		yMixi = 1.0f - yMix;

  00117	0f 28 ec	 movaps	 xmm5, xmm4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 416  :         {return ((float)floor((double)_X)); }

  0011a	83 c4 08	 add	 esp, 8
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp

; 153  : 		iz1 = iz + 1;

  0011d	8d 5e 01	 lea	 ebx, DWORD PTR [esi+1]

; 97   : 	return 1.0f - f * f * (3 - f * 2);

  00120	0f 28 c2	 movaps	 xmm0, xmm2
  00123	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0012b	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0012f	f3 0f 5c c8	 subss	 xmm1, xmm0
  00133	66 0f 6e c7	 movd	 xmm0, edi

; 156  : 		yMix = interpolate(y - iy);

  00137	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 97   : 	return 1.0f - f * f * (3 - f * 2);

  0013a	f3 0f 59 ca	 mulss	 xmm1, xmm2

; 156  : 		yMix = interpolate(y - iy);

  0013e	f3 0f 10 55 ec	 movss	 xmm2, DWORD PTR _y$1$[ebp]
  00143	f3 0f 5c d0	 subss	 xmm2, xmm0

; 97   : 	return 1.0f - f * f * (3 - f * 2);

  00147	f3 0f 5c f1	 subss	 xmm6, xmm1
  0014b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40400000

; 155  : 		xMixi = 1.0f - xMix;

  00153	f3 0f 5c fe	 subss	 xmm7, xmm6

; 97   : 	return 1.0f - f * f * (3 - f * 2);

  00157	0f 28 c2	 movaps	 xmm0, xmm2
  0015a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00162	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00166	f3 0f 5c c8	 subss	 xmm1, xmm0
  0016a	66 0f 6e c6	 movd	 xmm0, esi

; 158  : 		zMix = interpolate(z - iz);

  0016e	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 97   : 	return 1.0f - f * f * (3 - f * 2);

  00171	f3 0f 59 ca	 mulss	 xmm1, xmm2

; 158  : 		zMix = interpolate(z - iz);

  00175	f3 0f 10 55 e8	 movss	 xmm2, DWORD PTR _z$1$[ebp]
  0017a	f3 0f 5c d0	 subss	 xmm2, xmm0

; 97   : 	return 1.0f - f * f * (3 - f * 2);

  0017e	f3 0f 5c d9	 subss	 xmm3, xmm1
  00182	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40400000

; 157  : 		yMixi = 1.0f - yMix;

  0018a	f3 0f 5c eb	 subss	 xmm5, xmm3

; 97   : 	return 1.0f - f * f * (3 - f * 2);

  0018e	0f 28 c2	 movaps	 xmm0, xmm2
  00191	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00199	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0019d	f3 0f 5c c8	 subss	 xmm1, xmm0
  001a1	f3 0f 59 ca	 mulss	 xmm1, xmm2
  001a5	0f 28 d4	 movaps	 xmm2, xmm4
  001a8	f3 0f 5c d1	 subss	 xmm2, xmm1

; 159  : 		zMixi = 1.0f - zMix;

  001ac	f3 0f 5c e2	 subss	 xmm4, xmm2

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  001b0	8b 4d f4	 mov	 ecx, DWORD PTR tv852[ebp]
  001b3	8b d0		 mov	 edx, eax
  001b5	23 c7		 and	 eax, edi
  001b7	23 d6		 and	 edx, esi
  001b9	d3 e2		 shl	 edx, cl
  001bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A
  001c1	d3 e0		 shl	 eax, cl
  001c3	8b 4d f4	 mov	 ecx, DWORD PTR tv852[ebp]
  001c6	0b d0		 or	 edx, eax
  001c8	8b 45 f8	 mov	 eax, DWORD PTR _andField$1$[ebp]
  001cb	23 45 f0	 and	 eax, DWORD PTR _ix$1$[ebp]
  001ce	0b d0		 or	 edx, eax

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  001d0	a1 14 00 00 00	 mov	 eax, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+20
  001d5	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  001d9	66 0f 6e c8	 movd	 xmm1, eax

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  001dd	8b 45 f8	 mov	 eax, DWORD PTR _andField$1$[ebp]
  001e0	8b d0		 mov	 edx, eax
  001e2	23 c7		 and	 eax, edi
  001e4	23 d6		 and	 edx, esi
  001e6	d3 e2		 shl	 edx, cl
  001e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A
  001ee	d3 e0		 shl	 eax, cl
  001f0	8b 4d f4	 mov	 ecx, DWORD PTR tv852[ebp]

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  001f3	0f 5b c9	 cvtdq2ps xmm1, xmm1

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  001f6	0b d0		 or	 edx, eax
  001f8	8b 45 f8	 mov	 eax, DWORD PTR _andField$1$[ebp]
  001fb	23 45 e0	 and	 eax, DWORD PTR _ix1$1$[ebp]

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  001fe	f3 0f 59 ce	 mulss	 xmm1, xmm6

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  00202	0b d0		 or	 edx, eax

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  00204	a1 14 00 00 00	 mov	 eax, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+20
  00209	f3 0f 59 cb	 mulss	 xmm1, xmm3
  0020d	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  00211	66 0f 6e c0	 movd	 xmm0, eax

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  00215	8b 45 f8	 mov	 eax, DWORD PTR _andField$1$[ebp]
  00218	8b d0		 mov	 edx, eax

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  0021a	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  0021d	23 d6		 and	 edx, esi
  0021f	d3 e2		 shl	 edx, cl

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  00221	f3 0f 59 c7	 mulss	 xmm0, xmm7

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  00225	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  00228	23 c1		 and	 eax, ecx
  0022a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A
  00230	d3 e0		 shl	 eax, cl
  00232	8b 4d f4	 mov	 ecx, DWORD PTR tv852[ebp]

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  00235	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  00239	0b d0		 or	 edx, eax
  0023b	8b 45 f8	 mov	 eax, DWORD PTR _andField$1$[ebp]
  0023e	23 45 f0	 and	 eax, DWORD PTR _ix$1$[ebp]

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  00241	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  00245	0b d0		 or	 edx, eax

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  00247	a1 14 00 00 00	 mov	 eax, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+20
  0024c	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00250	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  00254	f3 0f 58 c8	 addss	 xmm1, xmm0
  00258	66 0f 6e c0	 movd	 xmm0, eax

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  0025c	8b 45 f8	 mov	 eax, DWORD PTR _andField$1$[ebp]
  0025f	8b d0		 mov	 edx, eax

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  00261	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  00264	23 d6		 and	 edx, esi
  00266	d3 e2		 shl	 edx, cl
  00268	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A
  0026e	8d 77 01	 lea	 esi, DWORD PTR [edi+1]
  00271	23 c6		 and	 eax, esi
  00273	d3 e0		 shl	 eax, cl

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  00275	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  00279	0b d0		 or	 edx, eax
  0027b	8b 45 f8	 mov	 eax, DWORD PTR _andField$1$[ebp]
  0027e	23 45 e0	 and	 eax, DWORD PTR _ix1$1$[ebp]

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  00281	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  00285	0b d0		 or	 edx, eax

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  00287	a1 14 00 00 00	 mov	 eax, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+20
  0028c	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00290	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  00294	f3 0f 58 c8	 addss	 xmm1, xmm0
  00298	66 0f 6e c0	 movd	 xmm0, eax

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  0029c	8b 45 f8	 mov	 eax, DWORD PTR _andField$1$[ebp]

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  0029f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  002a2	f3 0f 59 c7	 mulss	 xmm0, xmm7
  002a6	f3 0f 59 c5	 mulss	 xmm0, xmm5
  002aa	f3 0f 59 c2	 mulss	 xmm0, xmm2
  002ae	f3 0f 58 c8	 addss	 xmm1, xmm0

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  002b2	8b 4d f4	 mov	 ecx, DWORD PTR tv852[ebp]
  002b5	8b d0		 mov	 edx, eax
  002b7	23 c7		 and	 eax, edi
  002b9	23 d3		 and	 edx, ebx
  002bb	d3 e2		 shl	 edx, cl
  002bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A
  002c3	d3 e0		 shl	 eax, cl
  002c5	8b 4d f4	 mov	 ecx, DWORD PTR tv852[ebp]
  002c8	0b d0		 or	 edx, eax
  002ca	8b 45 f8	 mov	 eax, DWORD PTR _andField$1$[ebp]
  002cd	23 45 f0	 and	 eax, DWORD PTR _ix$1$[ebp]
  002d0	0b d0		 or	 edx, eax

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  002d2	a1 14 00 00 00	 mov	 eax, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+20
  002d7	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  002db	66 0f 6e c0	 movd	 xmm0, eax

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  002df	8b 45 f8	 mov	 eax, DWORD PTR _andField$1$[ebp]
  002e2	8b d0		 mov	 edx, eax

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  002e4	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  002e7	23 c7		 and	 eax, edi
  002e9	23 d3		 and	 edx, ebx
  002eb	d3 e2		 shl	 edx, cl
  002ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A
  002f3	d3 e0		 shl	 eax, cl

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  002f5	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  002f9	8b 4d f4	 mov	 ecx, DWORD PTR tv852[ebp]
  002fc	0b d0		 or	 edx, eax
  002fe	8b 45 f8	 mov	 eax, DWORD PTR _andField$1$[ebp]
  00301	23 45 e0	 and	 eax, DWORD PTR _ix1$1$[ebp]

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  00304	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  00308	0b d0		 or	 edx, eax

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  0030a	a1 14 00 00 00	 mov	 eax, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+20
  0030f	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00313	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  00317	f3 0f 58 c8	 addss	 xmm1, xmm0
  0031b	66 0f 6e c0	 movd	 xmm0, eax

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  0031f	8b 45 f8	 mov	 eax, DWORD PTR _andField$1$[ebp]
  00322	8b d0		 mov	 edx, eax

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  00324	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  00327	23 c6		 and	 eax, esi
  00329	23 d3		 and	 edx, ebx
  0032b	d3 e2		 shl	 edx, cl
  0032d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A
  00333	d3 e0		 shl	 eax, cl
  00335	8b 4d f4	 mov	 ecx, DWORD PTR tv852[ebp]

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  00338	f3 0f 59 c7	 mulss	 xmm0, xmm7

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  0033c	0b d0		 or	 edx, eax
  0033e	8b 45 f8	 mov	 eax, DWORD PTR _andField$1$[ebp]
  00341	23 45 f0	 and	 eax, DWORD PTR _ix$1$[ebp]

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  00344	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  00348	0b d0		 or	 edx, eax

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  0034a	a1 14 00 00 00	 mov	 eax, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+20
  0034f	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00353	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  00357	f3 0f 58 c8	 addss	 xmm1, xmm0
  0035b	66 0f 6e c0	 movd	 xmm0, eax

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  0035f	8b 45 f8	 mov	 eax, DWORD PTR _andField$1$[ebp]
  00362	8b d0		 mov	 edx, eax

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  00364	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  00367	23 d3		 and	 edx, ebx
  00369	23 c6		 and	 eax, esi
  0036b	d3 e2		 shl	 edx, cl
  0036d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A
  00373	d3 e0		 shl	 eax, cl

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  00375	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00379	f3 0f 10 5d d0	 movss	 xmm3, DWORD PTR _value$1$[ebp]

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  0037e	0b d0		 or	 edx, eax
  00380	8b 45 f8	 mov	 eax, DWORD PTR _andField$1$[ebp]
  00383	23 45 e0	 and	 eax, DWORD PTR _ix1$1$[ebp]

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  00386	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  0038a	0b d0		 or	 edx, eax

; 160  : 
; 161  : 		noise += (noiseAt(ix, iy, iz) * xMix * yMix * zMix
; 162  : 			+ noiseAt(ix1, iy, iz) * xMixi * yMix * zMix
; 163  : 			+ noiseAt(ix, iy1, iz) * xMix * yMixi * zMix
; 164  : 			+ noiseAt(ix1, iy1, iz) * xMixi * yMixi * zMix
; 165  : 			+ noiseAt(ix, iy, iz1) * xMix * yMix * zMixi
; 166  : 			+ noiseAt(ix1, iy, iz1) * xMixi * yMix * zMixi
; 167  : 			+ noiseAt(ix, iy1, iz1) * xMix * yMixi * zMixi
; 168  : 			+ noiseAt(ix1, iy1, iz1) * xMixi * yMixi * zMixi)
; 169  : 			* value;

  0038c	a1 14 00 00 00	 mov	 eax, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+20
  00391	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00395	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  00399	f3 0f 58 c8	 addss	 xmm1, xmm0
  0039d	66 0f 6e c0	 movd	 xmm0, eax
  003a1	0f 5b c0	 cvtdq2ps xmm0, xmm0
  003a4	f3 0f 59 c7	 mulss	 xmm0, xmm7
  003a8	f3 0f 59 c5	 mulss	 xmm0, xmm5
  003ac	f3 0f 59 c4	 mulss	 xmm0, xmm4
  003b0	f3 0f 58 c8	 addss	 xmm1, xmm0
  003b4	f3 0f 59 cb	 mulss	 xmm1, xmm3
  003b8	ff 4d cc	 dec	 DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A$1[ebp]
  003bb	f3 0f 58 4d d4	 addss	 xmm1, DWORD PTR _noise$1$[ebp]

; 170  : 
; 171  : 		x *= 0.5f;

  003c0	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  003c8	f3 0f 10 55 d8	 movss	 xmm2, DWORD PTR _x$1$[ebp]

; 172  : 		y *= 0.5f;
; 173  : 		z *= 0.5f;
; 174  : 		value *= smoothness;

  003cd	f3 0f 59 5d 08	 mulss	 xmm3, DWORD PTR _smoothness$[ebp]
  003d2	f3 0f 11 4d d4	 movss	 DWORD PTR _noise$1$[ebp], xmm1
  003d7	f3 0f 59 d4	 mulss	 xmm2, xmm4
  003db	f3 0f 11 5d d0	 movss	 DWORD PTR _value$1$[ebp], xmm3
  003e0	f3 0f 11 55 d8	 movss	 DWORD PTR _x$1$[ebp], xmm2
  003e5	0f 28 c1	 movaps	 xmm0, xmm1
  003e8	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _y$1$[ebp]
  003ed	f3 0f 59 cc	 mulss	 xmm1, xmm4
  003f1	f3 0f 11 4d ec	 movss	 DWORD PTR _y$1$[ebp], xmm1
  003f6	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _z$1$[ebp]
  003fb	f3 0f 59 cc	 mulss	 xmm1, xmm4
  003ff	f3 0f 11 4d e8	 movss	 DWORD PTR _z$1$[ebp], xmm1
  00404	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _maxValue$1$[ebp]
  00409	0f 85 51 fc ff
	ff		 jne	 $LL3@getNoise
$LN1@getNoise:

; 175  : 	}
; 176  : 
; 177  : 	return noise / maxValue;
; 178  : }

  0040f	5f		 pop	 edi
  00410	5e		 pop	 esi
  00411	f3 0f 5e c1	 divss	 xmm0, xmm1
  00415	5b		 pop	 ebx
  00416	8b e5		 mov	 esp, ebp
  00418	5d		 pop	 ebp
  00419	c2 04 00	 ret	 4
?getNoise@NoiseGenerator3D@Noise@@QAEMMMMM@Z ENDP	; Noise::NoiseGenerator3D::getNoise
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
;	COMDAT ??0NoiseGenerator2D@Noise@@QAE@HHMI@Z
_TEXT	SEGMENT
_sizeExponent$dead$ = 8					; size = 4
_octaves$dead$ = 12					; size = 4
_seed$dead$ = 16					; size = 4
??0NoiseGenerator2D@Noise@@QAE@HHMI@Z PROC		; Noise::NoiseGenerator2D::NoiseGenerator2D, COMDAT
; _this$dead$ = ecx
; _smoothness$ = xmm3s

; 26   : {

  00000	56		 push	 esi
  00001	68 00 01 00 00	 push	 256			; 00000100H
  00006	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A, 4
  00010	c7 05 04 00 00
	00 10 00 00 00	 mov	 DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+4, 16 ; 00000010H
  0001a	c7 05 08 00 00
	00 08 00 00 00	 mov	 DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+8, 8
  00024	f3 0f 11 1d 0c
	00 00 00	 movss	 DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+12, xmm3
  0002c	c7 05 10 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+16, 2
  00036	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 27   : 	srand(seed);

  0003b	6a 02		 push	 2
  0003d	a3 14 00 00 00	 mov	 DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+20, eax
  00042	e8 00 00 00 00	 call	 _srand

; 28   : 	for(int i = 0; i < size * size; i++)

  00047	a1 04 00 00 00	 mov	 eax, DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+4
  0004c	0f af c0	 imul	 eax, eax
  0004f	83 c4 08	 add	 esp, 8
  00052	33 f6		 xor	 esi, esi
  00054	85 c0		 test	 eax, eax
  00056	7e 1d		 jle	 SHORT $LN9@NoiseGener
$LL3@NoiseGener:

; 29   : 	{
; 30   : 		noiseMap[i] = rand() & 1;

  00058	e8 00 00 00 00	 call	 _rand
  0005d	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+20
  00063	24 01		 and	 al, 1
  00065	88 04 31	 mov	 BYTE PTR [ecx+esi], al
  00068	a1 04 00 00 00	 mov	 eax, DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+4
  0006d	0f af c0	 imul	 eax, eax
  00070	46		 inc	 esi
  00071	3b f0		 cmp	 esi, eax
  00073	7c e3		 jl	 SHORT $LL3@NoiseGener
$LN9@NoiseGener:

; 31   : 	}
; 32   : }

  00075	b8 00 00 00 00	 mov	 eax, OFFSET ?noise2@@3VNoiseGenerator2D@Noise@@A ; noise2
  0007a	5e		 pop	 esi
  0007b	c2 0c 00	 ret	 12			; 0000000cH
??0NoiseGenerator2D@Noise@@QAE@HHMI@Z ENDP		; Noise::NoiseGenerator2D::NoiseGenerator2D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
;	COMDAT ??1NoiseGenerator2D@Noise@@QAE@XZ
_TEXT	SEGMENT
??1NoiseGenerator2D@Noise@@QAE@XZ PROC			; Noise::NoiseGenerator2D::~NoiseGenerator2D, COMDAT
; _this$dead$ = ecx

; 36   : 	delete[] noiseMap;

  00000	ff 35 14 00 00
	00		 push	 DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+20
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx

; 37   : }

  0000c	c3		 ret	 0
??1NoiseGenerator2D@Noise@@QAE@XZ ENDP			; Noise::NoiseGenerator2D::~NoiseGenerator2D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
;	COMDAT ?getNoise@NoiseGenerator2D@Noise@@QAEMMM@Z
_TEXT	SEGMENT
?getNoise@NoiseGenerator2D@Noise@@QAEMMM@Z PROC		; Noise::NoiseGenerator2D::getNoise, COMDAT
; _this$dead$ = ecx
; _x$ = xmm1s
; _y$ = xmm2s

; 40   : {

  00000	51		 push	 ecx

; 41   : 	return getNoise(x, y, smoothness);

  00001	f3 0f 10 1d 0c
	00 00 00	 movss	 xmm3, DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+12
  00009	e8 00 00 00 00	 call	 ?getNoise@NoiseGenerator2D@Noise@@QAEMMMM@Z ; Noise::NoiseGenerator2D::getNoise
  0000e	59		 pop	 ecx

; 42   : }

  0000f	c3		 ret	 0
?getNoise@NoiseGenerator2D@Noise@@QAEMMM@Z ENDP		; Noise::NoiseGenerator2D::getNoise
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
;	COMDAT ?noiseAt@NoiseGenerator2D@Noise@@AAEEAAH0@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?noiseAt@NoiseGenerator2D@Noise@@AAEEAAH0@Z PROC	; Noise::NoiseGenerator2D::noiseAt, COMDAT
; _this$dead$ = ecx

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 10   : 	int andField = size - 1;
; 11   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent)];

  00003	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00006	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+4
  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A
  00012	56		 push	 esi
  00013	8b 30		 mov	 esi, DWORD PTR [eax]
  00015	a1 14 00 00 00	 mov	 eax, DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+20
  0001a	4a		 dec	 edx
  0001b	23 f2		 and	 esi, edx
  0001d	d3 e6		 shl	 esi, cl
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	23 ca		 and	 ecx, edx
  00026	0b f1		 or	 esi, ecx
  00028	8a 04 06	 mov	 al, BYTE PTR [esi+eax]
  0002b	5e		 pop	 esi

; 12   : }

  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?noiseAt@NoiseGenerator2D@Noise@@AAEEAAH0@Z ENDP	; Noise::NoiseGenerator2D::noiseAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
;	COMDAT ?interpolate@NoiseGenerator2D@Noise@@AAEMM@Z
_TEXT	SEGMENT
?interpolate@NoiseGenerator2D@Noise@@AAEMM@Z PROC	; Noise::NoiseGenerator2D::interpolate, COMDAT
; _this$dead$ = ecx
; _f$ = xmm1s

; 15   : {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 16   : 	return (cos(f * M_PI) + 1.0f) * 0.5f;

  00003	f3 0f 5a c1	 cvtss2sd xmm0, xmm1
  00007	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb54442d18
  0000f	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  00014	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0001c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00024	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0

; 17   : }

  00028	c3		 ret	 0
?interpolate@NoiseGenerator2D@Noise@@AAEMM@Z ENDP	; Noise::NoiseGenerator2D::interpolate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
;	COMDAT ?getNoise@NoiseGenerator2D@Noise@@QAEMMMM@Z
_TEXT	SEGMENT
tv410 = -64						; size = 8
tv419 = -56						; size = 8
_smoothness$1$ = -44					; size = 4
tv413 = -40						; size = 8
tv404 = -40						; size = 8
_xMix$1$ = -36						; size = 4
_xMixi$1$ = -32						; size = 4
_maxValue$1$ = -28					; size = 4
?noise2@@3VNoiseGenerator2D@Noise@@A$1 = -24		; size = 4
_value$1$ = -20						; size = 4
_noise$1$ = -16						; size = 4
_x$1$ = -12						; size = 4
_andField$1$ = -8					; size = 4
_y$1$ = -4						; size = 4
?getNoise@NoiseGenerator2D@Noise@@QAEMMMM@Z PROC	; Noise::NoiseGenerator2D::getNoise, COMDAT
; _this$dead$ = ecx
; _x$ = xmm1s
; _y$ = xmm2s
; _smoothness$ = xmm3s

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H

; 46   : 	float noise = 0.0f;
; 47   : 	float value = 1.0f;
; 48   : 	float maxValue = 0.0f;
; 49   : 
; 50   : 	int ix;
; 51   : 	int ix1;
; 52   : 	int iy;
; 53   : 	int iy1;
; 54   : 	float xMix;
; 55   : 	float xMixi;
; 56   : 	float yMix;
; 57   : 	float yMixi;
; 58   : 
; 59   : 	for(int i = 0; i < octaves; i++)

  00006	a1 08 00 00 00	 mov	 eax, DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+8
  0000b	53		 push	 ebx
  0000c	f3 0f 11 5d d4	 movss	 DWORD PTR _smoothness$1$[ebp], xmm3
  00011	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00019	0f 57 c0	 xorps	 xmm0, xmm0
  0001c	56		 push	 esi
  0001d	f3 0f 11 55 fc	 movss	 DWORD PTR _y$1$[ebp], xmm2
  00022	0f 28 d1	 movaps	 xmm2, xmm1
  00025	f3 0f 11 4d f4	 movss	 DWORD PTR _x$1$[ebp], xmm1
  0002a	57		 push	 edi
  0002b	f3 0f 11 45 f0	 movss	 DWORD PTR _noise$1$[ebp], xmm0
  00030	f3 0f 11 5d ec	 movss	 DWORD PTR _value$1$[ebp], xmm3
  00035	0f 28 c8	 movaps	 xmm1, xmm0
  00038	89 45 e8	 mov	 DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A$1[ebp], eax
  0003b	85 c0		 test	 eax, eax
  0003d	0f 8e 04 02 00
	00		 jle	 $LN1@getNoise
  00043	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+4
  00049	4a		 dec	 edx
  0004a	89 55 f8	 mov	 DWORD PTR _andField$1$[ebp], edx
  0004d	8d 49 00	 npad	 3
$LL3@getNoise:
  00050	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 416  :         {return ((float)floor((double)_X)); }

  00053	f3 0f 5a c2	 cvtss2sd xmm0, xmm2
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp

; 61   : 		maxValue += value;

  00057	f3 0f 58 cb	 addss	 xmm1, xmm3
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 416  :         {return ((float)floor((double)_X)); }

  0005b	f2 0f 11 45 c8	 movsd	 QWORD PTR tv419[ebp], xmm0
  00060	83 ec 08	 sub	 esp, 8
  00063	dd 45 c8	 fld	 QWORD PTR tv419[ebp]
  00066	dd 1c 24	 fstp	 QWORD PTR [esp]
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp

; 61   : 		maxValue += value;

  00069	f3 0f 11 4d e4	 movss	 DWORD PTR _maxValue$1$[ebp], xmm1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 416  :         {return ((float)floor((double)_X)); }

  0006e	e8 00 00 00 00	 call	 _floor
  00073	dd 5d d8	 fstp	 QWORD PTR tv413[ebp]
  00076	f2 0f 10 45 d8	 movsd	 xmm0, QWORD PTR tv413[ebp]
  0007b	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp

; 63   : 		ix = (int)floorf(x);

  0007f	f3 0f 2c d8	 cvttss2si ebx, xmm0
  00083	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 416  :         {return ((float)floor((double)_X)); }

  00088	0f 5a c0	 cvtps2pd xmm0, xmm0
  0008b	f2 0f 11 45 c0	 movsd	 QWORD PTR tv410[ebp], xmm0
  00090	dd 45 c0	 fld	 QWORD PTR tv410[ebp]
  00093	dd 1c 24	 fstp	 QWORD PTR [esp]
  00096	e8 00 00 00 00	 call	 _floor
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp

; 67   : 		xMix = interpolate(x - ix);

  0009b	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _x$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h

; 416  :         {return ((float)floor((double)_X)); }

  000a0	dd 5d d8	 fstp	 QWORD PTR tv404[ebp]
  000a3	f2 0f 10 45 d8	 movsd	 xmm0, QWORD PTR tv404[ebp]
  000a8	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000ac	83 c4 08	 add	 esp, 8
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp

; 65   : 		iy = (int)floorf(y);

  000af	f3 0f 2c f0	 cvttss2si esi, xmm0
  000b3	66 0f 6e c3	 movd	 xmm0, ebx

; 67   : 		xMix = interpolate(x - ix);

  000b7	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000ba	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
  000bd	f3 0f 5c c8	 subss	 xmm1, xmm0

; 12   : }
; 13   : 
; 14   : float NoiseGenerator2D::interpolate(float f)
; 15   : {
; 16   : 	return (cos(f * M_PI) + 1.0f) * 0.5f;

  000c1	0f 5a c1	 cvtps2pd xmm0, xmm1
  000c4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb54442d18
  000cc	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  000d1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000

; 68   : 		xMixi = 1.0f - xMix;

  000d9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000

; 12   : }
; 13   : 
; 14   : float NoiseGenerator2D::interpolate(float f)
; 15   : {
; 16   : 	return (cos(f * M_PI) + 1.0f) * 0.5f;

  000e1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000e9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0

; 68   : 		xMixi = 1.0f - xMix;

  000ed	f3 0f 5c c8	 subss	 xmm1, xmm0

; 12   : }
; 13   : 
; 14   : float NoiseGenerator2D::interpolate(float f)
; 15   : {
; 16   : 	return (cos(f * M_PI) + 1.0f) * 0.5f;

  000f1	f3 0f 11 45 dc	 movss	 DWORD PTR _xMix$1$[ebp], xmm0
  000f6	66 0f 6e c6	 movd	 xmm0, esi

; 69   : 		yMix = interpolate(y - iy);

  000fa	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000fd	f3 0f 11 4d e0	 movss	 DWORD PTR _xMixi$1$[ebp], xmm1
  00102	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _y$1$[ebp]
  00107	f3 0f 5c c8	 subss	 xmm1, xmm0

; 12   : }
; 13   : 
; 14   : float NoiseGenerator2D::interpolate(float f)
; 15   : {
; 16   : 	return (cos(f * M_PI) + 1.0f) * 0.5f;

  0010b	0f 5a c1	 cvtps2pd xmm0, xmm1
  0010e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb54442d18
  00116	e8 00 00 00 00	 call	 __libm_sse2_cos_precise

; 11   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent)];

  0011b	8b 45 f8	 mov	 eax, DWORD PTR _andField$1$[ebp]
  0011e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A

; 12   : }
; 13   : 
; 14   : float NoiseGenerator2D::interpolate(float f)
; 15   : {
; 16   : 	return (cos(f * M_PI) + 1.0f) * 0.5f;

  00124	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000

; 11   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent)];

  0012c	8b d0		 mov	 edx, eax
  0012e	23 d6		 and	 edx, esi
  00130	d3 e2		 shl	 edx, cl
  00132	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]

; 12   : }
; 13   : 
; 14   : float NoiseGenerator2D::interpolate(float f)
; 15   : {
; 16   : 	return (cos(f * M_PI) + 1.0f) * 0.5f;

  00135	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000

; 11   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent)];

  0013d	23 c1		 and	 eax, ecx
  0013f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A
  00145	0b d0		 or	 edx, eax

; 70   : 		yMixi = 1.0f - yMix;
; 71   : 
; 72   : 		noise += (noiseAt(ix, iy) * xMix * yMix
; 73   : 			+ noiseAt(ix1, iy) * xMixi * yMix
; 74   : 			+ noiseAt(ix, iy1) * xMix * yMixi
; 75   : 			+ noiseAt(ix1, iy1) * xMixi * yMixi)
; 76   : 			* value;

  00147	a1 14 00 00 00	 mov	 eax, DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+20
  0014c	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00154	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]

; 11   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent)];

  00158	8b 55 f8	 mov	 edx, DWORD PTR _andField$1$[ebp]
  0015b	66 0f 6e d0	 movd	 xmm2, eax
  0015f	23 d6		 and	 edx, esi
  00161	8b 75 f8	 mov	 esi, DWORD PTR _andField$1$[ebp]
  00164	d3 e2		 shl	 edx, cl
  00166	8b c6		 mov	 eax, esi
  00168	23 c3		 and	 eax, ebx
  0016a	0f 57 c9	 xorps	 xmm1, xmm1
  0016d	0b d0		 or	 edx, eax

; 70   : 		yMixi = 1.0f - yMix;
; 71   : 
; 72   : 		noise += (noiseAt(ix, iy) * xMix * yMix
; 73   : 			+ noiseAt(ix1, iy) * xMixi * yMix
; 74   : 			+ noiseAt(ix, iy1) * xMix * yMixi
; 75   : 			+ noiseAt(ix1, iy1) * xMixi * yMixi)
; 76   : 			* value;

  0016f	a1 14 00 00 00	 mov	 eax, DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+20

; 12   : }
; 13   : 
; 14   : float NoiseGenerator2D::interpolate(float f)
; 15   : {
; 16   : 	return (cos(f * M_PI) + 1.0f) * 0.5f;

  00174	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0

; 70   : 		yMixi = 1.0f - yMix;
; 71   : 
; 72   : 		noise += (noiseAt(ix, iy) * xMix * yMix
; 73   : 			+ noiseAt(ix1, iy) * xMixi * yMix
; 74   : 			+ noiseAt(ix, iy1) * xMix * yMixi
; 75   : 			+ noiseAt(ix1, iy1) * xMixi * yMixi)
; 76   : 			* value;

  00178	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  0017c	0f 5b d2	 cvtdq2ps xmm2, xmm2
  0017f	66 0f 6e c0	 movd	 xmm0, eax
  00183	f3 0f 59 55 e0	 mulss	 xmm2, DWORD PTR _xMixi$1$[ebp]
  00188	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0018b	f3 0f 59 d1	 mulss	 xmm2, xmm1
  0018f	f3 0f 59 45 dc	 mulss	 xmm0, DWORD PTR _xMix$1$[ebp]
  00194	f3 0f 5c d9	 subss	 xmm3, xmm1
  00198	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0019c	f3 0f 58 d0	 addss	 xmm2, xmm0

; 11   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent)];

  001a0	8b d6		 mov	 edx, esi
  001a2	23 d7		 and	 edx, edi
  001a4	d3 e2		 shl	 edx, cl
  001a6	8b c6		 mov	 eax, esi
  001a8	23 c3		 and	 eax, ebx

; 77   : 
; 78   : 		x *= 0.5f;
; 79   : 		y *= 0.5f;

  001aa	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _y$1$[ebp]

; 11   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent)];

  001af	0b d0		 or	 edx, eax

; 70   : 		yMixi = 1.0f - yMix;
; 71   : 
; 72   : 		noise += (noiseAt(ix, iy) * xMix * yMix
; 73   : 			+ noiseAt(ix1, iy) * xMixi * yMix
; 74   : 			+ noiseAt(ix, iy1) * xMix * yMixi
; 75   : 			+ noiseAt(ix1, iy1) * xMixi * yMixi)
; 76   : 			* value;

  001b1	a1 14 00 00 00	 mov	 eax, DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+20

; 77   : 
; 78   : 		x *= 0.5f;
; 79   : 		y *= 0.5f;

  001b6	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  001be	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  001c2	66 0f 6e c0	 movd	 xmm0, eax
  001c6	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 11   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent)];

  001c9	8b d6		 mov	 edx, esi

; 70   : 		yMixi = 1.0f - yMix;
; 71   : 
; 72   : 		noise += (noiseAt(ix, iy) * xMix * yMix
; 73   : 			+ noiseAt(ix1, iy) * xMixi * yMix
; 74   : 			+ noiseAt(ix, iy1) * xMix * yMixi
; 75   : 			+ noiseAt(ix1, iy1) * xMixi * yMixi)
; 76   : 			* value;

  001cb	f3 0f 59 45 dc	 mulss	 xmm0, DWORD PTR _xMix$1$[ebp]

; 11   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent)];

  001d0	23 d7		 and	 edx, edi
  001d2	d3 e2		 shl	 edx, cl

; 70   : 		yMixi = 1.0f - yMix;
; 71   : 
; 72   : 		noise += (noiseAt(ix, iy) * xMix * yMix
; 73   : 			+ noiseAt(ix1, iy) * xMixi * yMix
; 74   : 			+ noiseAt(ix, iy1) * xMix * yMixi
; 75   : 			+ noiseAt(ix1, iy1) * xMixi * yMixi)
; 76   : 			* value;

  001d4	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 11   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent)];

  001d8	8b c6		 mov	 eax, esi
  001da	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  001dd	23 c1		 and	 eax, ecx

; 70   : 		yMixi = 1.0f - yMix;
; 71   : 
; 72   : 		noise += (noiseAt(ix, iy) * xMix * yMix
; 73   : 			+ noiseAt(ix1, iy) * xMixi * yMix
; 74   : 			+ noiseAt(ix, iy1) * xMix * yMixi
; 75   : 			+ noiseAt(ix1, iy1) * xMixi * yMixi)
; 76   : 			* value;

  001df	f3 0f 58 d0	 addss	 xmm2, xmm0

; 11   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent)];

  001e3	0b d0		 or	 edx, eax

; 46   : 	float noise = 0.0f;
; 47   : 	float value = 1.0f;
; 48   : 	float maxValue = 0.0f;
; 49   : 
; 50   : 	int ix;
; 51   : 	int ix1;
; 52   : 	int iy;
; 53   : 	int iy1;
; 54   : 	float xMix;
; 55   : 	float xMixi;
; 56   : 	float yMix;
; 57   : 	float yMixi;
; 58   : 
; 59   : 	for(int i = 0; i < octaves; i++)

  001e5	ff 4d e8	 dec	 DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A$1[ebp]

; 70   : 		yMixi = 1.0f - yMix;
; 71   : 
; 72   : 		noise += (noiseAt(ix, iy) * xMix * yMix
; 73   : 			+ noiseAt(ix1, iy) * xMixi * yMix
; 74   : 			+ noiseAt(ix, iy1) * xMix * yMixi
; 75   : 			+ noiseAt(ix1, iy1) * xMixi * yMixi)
; 76   : 			* value;

  001e8	a1 14 00 00 00	 mov	 eax, DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+20

; 77   : 
; 78   : 		x *= 0.5f;
; 79   : 		y *= 0.5f;

  001ed	f3 0f 11 4d fc	 movss	 DWORD PTR _y$1$[ebp], xmm1
  001f2	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  001f6	66 0f 6e c0	 movd	 xmm0, eax
  001fa	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001fd	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _maxValue$1$[ebp]
  00202	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _xMixi$1$[ebp]
  00207	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0020b	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR _value$1$[ebp]
  00210	f3 0f 58 d0	 addss	 xmm2, xmm0
  00214	f3 0f 59 d3	 mulss	 xmm2, xmm3

; 80   : 		value *= smoothness;

  00218	f3 0f 59 5d d4	 mulss	 xmm3, DWORD PTR _smoothness$1$[ebp]
  0021d	f3 0f 58 55 f0	 addss	 xmm2, DWORD PTR _noise$1$[ebp]
  00222	f3 0f 11 5d ec	 movss	 DWORD PTR _value$1$[ebp], xmm3
  00227	f3 0f 11 55 f0	 movss	 DWORD PTR _noise$1$[ebp], xmm2
  0022c	0f 28 c2	 movaps	 xmm0, xmm2
  0022f	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _x$1$[ebp]
  00234	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@3f000000
  0023c	f3 0f 11 55 f4	 movss	 DWORD PTR _x$1$[ebp], xmm2
  00241	0f 85 09 fe ff
	ff		 jne	 $LL3@getNoise
$LN1@getNoise:

; 81   : 	}
; 82   : 
; 83   : 	return noise / maxValue;
; 84   : }

  00247	5f		 pop	 edi
  00248	5e		 pop	 esi
  00249	f3 0f 5e c1	 divss	 xmm0, xmm1
  0024d	5b		 pop	 ebx
  0024e	8b e5		 mov	 esp, ebp
  00250	5d		 pop	 ebp
  00251	c3		 ret	 0
?getNoise@NoiseGenerator2D@Noise@@QAEMMMM@Z ENDP	; Noise::NoiseGenerator2D::getNoise
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
;	COMDAT ?noiseAt@NoiseGenerator3D@Noise@@AAEEAAH00@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?noiseAt@NoiseGenerator3D@Noise@@AAEEAAH00@Z PROC	; Noise::NoiseGenerator3D::noiseAt, COMDAT
; _this$dead$ = ecx

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   : 	int andField = size - 1;
; 89   : 	int pos = (x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2));
; 90   : 	unsigned char c = noiseMap[pos];
; 91   : 	return noiseMap[(x & andField) | ((y & andField) << sizeExponent) | ((z & andField) << (sizeExponent * 2))];

  00003	8b 45 10	 mov	 eax, DWORD PTR _z$[ebp]
  00006	53		 push	 ebx
  00007	8b 18		 mov	 ebx, DWORD PTR [eax]
  00009	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0000c	56		 push	 esi
  0000d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A
  00013	8b 10		 mov	 edx, DWORD PTR [eax]
  00015	a1 14 00 00 00	 mov	 eax, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+20
  0001a	57		 push	 edi
  0001b	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+4
  00021	4f		 dec	 edi
  00022	23 df		 and	 ebx, edi
  00024	8d 0c 36	 lea	 ecx, DWORD PTR [esi+esi]
  00027	d3 e3		 shl	 ebx, cl
  00029	23 d7		 and	 edx, edi
  0002b	8b ce		 mov	 ecx, esi
  0002d	d3 e2		 shl	 edx, cl
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00032	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00034	0b da		 or	 ebx, edx
  00036	23 cf		 and	 ecx, edi
  00038	0b d9		 or	 ebx, ecx
  0003a	5f		 pop	 edi
  0003b	8a 04 03	 mov	 al, BYTE PTR [ebx+eax]
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx

; 92   : }

  00040	5d		 pop	 ebp
  00041	c2 0c 00	 ret	 12			; 0000000cH
?noiseAt@NoiseGenerator3D@Noise@@AAEEAAH00@Z ENDP	; Noise::NoiseGenerator3D::noiseAt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
;	COMDAT ?interpolate@NoiseGenerator3D@Noise@@AAEMM@Z
_TEXT	SEGMENT
?interpolate@NoiseGenerator3D@Noise@@AAEMM@Z PROC	; Noise::NoiseGenerator3D::interpolate, COMDAT
; _this$dead$ = ecx
; _f$ = xmm1s

; 96   : 	//return (cos(f * M_PI) + 1.0f) * 0.5f;
; 97   : 	return 1.0f - f * f * (3 - f * 2);

  00000	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@40400000
  00008	0f 28 c1	 movaps	 xmm0, xmm1
  0000b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00013	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00017	f3 0f 5c d0	 subss	 xmm2, xmm0
  0001b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00023	f3 0f 59 d1	 mulss	 xmm2, xmm1
  00027	f3 0f 5c c2	 subss	 xmm0, xmm2

; 98   : }

  0002b	c3		 ret	 0
?interpolate@NoiseGenerator3D@Noise@@AAEMM@Z ENDP	; Noise::NoiseGenerator3D::interpolate
_TEXT	ENDS
END
