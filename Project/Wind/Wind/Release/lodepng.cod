; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

	TITLE	C:\Users\Glenn\Documents\GitHub\Wind\Project\Wind\Wind\lodepng.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R2LodePNGState@@8				; LodePNGState::`RTTI Base Class Array'
PUBLIC	??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R3LodePNGState@@8				; LodePNGState::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AULodePNGState@@@8			; LodePNGState `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@LodePNGState@@8			; LodePNGState::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7LodePNGState@@6B@				; LodePNGState::`vftable'
PUBLIC	??_R2State@lodepng@@8				; lodepng::State::`RTTI Base Class Array'
PUBLIC	??_R0?AVState@lodepng@@@8			; lodepng::State `RTTI Type Descriptor'
PUBLIC	??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R4State@lodepng@@6B@				; lodepng::State::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@State@lodepng@@8			; lodepng::State::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_7State@lodepng@@6B@				; lodepng::State::`vftable'
PUBLIC	??_R4LodePNGState@@6B@				; LodePNGState::`RTTI Complete Object Locator'
PUBLIC	??_R3State@lodepng@@8				; lodepng::State::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
EXTRN	_fseek:PROC
EXTRN	_realloc:PROC
EXTRN	_ftell:PROC
EXTRN	_fread:PROC
EXTRN	_fopen:PROC
EXTRN	_rewind:PROC
EXTRN	_malloc:PROC
EXTRN	?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z:PROC		; std::_Fiopen
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
;	COMDAT ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
	DD	FLAT:?_Add_vtordisp1@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEXXZ
CONST	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3State@lodepng@@8
rdata$r	SEGMENT
??_R3State@lodepng@@8 DD 00H				; lodepng::State::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2State@lodepng@@8
rdata$r	ENDS
;	COMDAT ??_R4LodePNGState@@6B@
rdata$r	SEGMENT
??_R4LodePNGState@@6B@ DD 00H				; LodePNGState::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AULodePNGState@@@8
	DD	FLAT:??_R3LodePNGState@@8
rdata$r	ENDS
;	COMDAT ??_7State@lodepng@@6B@
CONST	SEGMENT
??_7State@lodepng@@6B@ DD FLAT:??_R4State@lodepng@@6B@	; lodepng::State::`vftable'
	DD	FLAT:??_EState@lodepng@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
	DD	FLAT:?_Add_vtordisp1@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@State@lodepng@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@State@lodepng@@8 DD FLAT:??_R0?AVState@lodepng@@@8 ; lodepng::State::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3State@lodepng@@8
rdata$r	ENDS
;	COMDAT ??_R4State@lodepng@@6B@
rdata$r	SEGMENT
??_R4State@lodepng@@6B@ DD 00H				; lodepng::State::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVState@lodepng@@@8
	DD	FLAT:??_R3State@lodepng@@8
rdata$r	ENDS
;	COMDAT ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	08H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVState@lodepng@@@8
_DATA	SEGMENT
??_R0?AVState@lodepng@@@8 DD FLAT:??_7type_info@@6B@	; lodepng::State `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVState@lodepng@@', 00H
_DATA	ENDS
;	COMDAT ??_R2State@lodepng@@8
rdata$r	SEGMENT
??_R2State@lodepng@@8 DD FLAT:??_R1A@?0A@EA@State@lodepng@@8 ; lodepng::State::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@LodePNGState@@8
rdata$r	ENDS
;	COMDAT ??_7LodePNGState@@6B@
CONST	SEGMENT
??_7LodePNGState@@6B@ DD FLAT:??_R4LodePNGState@@6B@	; LodePNGState::`vftable'
	DD	FLAT:??_ELodePNGState@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	060H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@LodePNGState@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@LodePNGState@@8 DD FLAT:??_R0?AULodePNGState@@@8 ; LodePNGState::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3LodePNGState@@8
rdata$r	ENDS
;	COMDAT ??_R0?AULodePNGState@@@8
_DATA	SEGMENT
??_R0?AULodePNGState@@@8 DD FLAT:??_7type_info@@6B@	; LodePNGState `RTTI Type Descriptor'
	DD	00H
	DB	'.?AULodePNGState@@', 00H
_DATA	ENDS
;	COMDAT ??_R3LodePNGState@@8
rdata$r	SEGMENT
??_R3LodePNGState@@8 DD 00H				; LodePNGState::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2LodePNGState@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2LodePNGState@@8
rdata$r	SEGMENT
??_R2LodePNGState@@8 DD FLAT:??_R1A@?0A@EA@LodePNGState@@8 ; LodePNGState::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
	DD	060H
_lodepng_crc32_table DD 00H
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
	ORG $+2
$SG4294943844 DB 'rb', 00H
	ORG $+1
$SG4294943843 DB 'wb', 00H
	ORG $+1
$SG4294943842 DB 'IDAT', 00H
	ORG $+3
$SG4294943841 DB 'IEND', 00H
	ORG $+3
$SG4294943840 DB 'PLTE', 00H
	ORG $+3
$SG4294943839 DB 'tRNS', 00H
	ORG $+3
$SG4294943838 DB 'bKGD', 00H
	ORG $+3
$SG4294943837 DB 'tEXt', 00H
	ORG $+3
$SG4294943836 DB 'zTXt', 00H
	ORG $+3
$SG4294943835 DB 'iTXt', 00H
	ORG $+3
$SG4294943834 DB 'tIME', 00H
	ORG $+3
$SG4294943833 DB 'pHYs', 00H
	ORG $+3
$SG4294943832 DB 'IHDR', 00H
	ORG $+3
$SG4294943831 DB 'PLTE', 00H
	ORG $+3
$SG4294943830 DB 'tRNS', 00H
	ORG $+3
$SG4294943829 DB 'IDAT', 00H
	ORG $+3
$SG4294943828 DB 'IEND', 00H
	ORG $+3
$SG4294943827 DB 'tEXt', 00H
	ORG $+3
$SG4294943826 DB 'zTXt', 00H
	ORG $+3
$SG4294943825 DB 'iTXt', 00H
	ORG $+3
$SG4294943824 DB 'bKGD', 00H
	ORG $+3
$SG4294943823 DB 'tIME', 00H
	ORG $+3
$SG4294943822 DB 'pHYs', 00H
	ORG $+3
$SG4294943821 DB 'LodePNG', 00H
$SG4294943820 DB '20131115', 00H
	ORG $+3
$SG4294943819 DB 'LodePNG', 00H
$SG4294943818 DB 'no error, everything went ok', 00H
	ORG $+3
$SG4294943817 DB 'nothing done yet', 00H
	ORG $+3
$SG4294943816 DB 'end of input memory reached without huffman end code', 00H
	ORG $+3
$SG4294943815 DB 'error in code tree made it jump outside of huffman tree'
	DB	00H
$SG4294943814 DB 'problem while processing dynamic deflate block', 00H
	ORG $+1
$SG4294943813 DB 'problem while processing dynamic deflate block', 00H
	ORG $+1
$SG4294943812 DB 'problem while processing dynamic deflate block', 00H
	ORG $+1
$SG4294943811 DB 'unexisting code while processing dynamic deflate block', 00H
	ORG $+1
$SG4294943810 DB 'end of out buffer memory reached while inflating', 00H
	ORG $+3
$SG4294943809 DB 'invalid distance code while inflating', 00H
	ORG $+2
$SG4294943808 DB 'end of out buffer memory reached while inflating', 00H
	ORG $+3
$SG4294943807 DB 'invalid deflate block BTYPE encountered while decoding', 00H
	ORG $+1
$SG4294943806 DB 'NLEN is not ones complement of LEN in a deflate block', 00H
	ORG $+2
$SG4294943805 DB 'end of out buffer memory reached while inflating', 00H
	ORG $+3
$SG4294943804 DB 'end of in buffer memory reached while inflating', 00H
$SG4294943803 DB 'invalid FCHECK in zlib header', 00H
	ORG $+2
$SG4294943802 DB 'invalid compression method in zlib header', 00H
	ORG $+2
$SG4294943801 DB 'FDICT encountered in zlib header while it''s not used f'
	DB	'or PNG', 00H
	ORG $+3
$SG4294943800 DB 'PNG file is smaller than a PNG header', 00H
	ORG $+2
$SG4294943799 DB 'incorrect PNG signature, it''s no PNG or corrupted', 00H
	ORG $+2
$SG4294943798 DB 'first chunk is not the header chunk', 00H
$SG4294943797 DB 'chunk length too large, chunk broken off at end of file'
	DB	00H
$SG4294943796 DB 'illegal PNG color type or bpp', 00H
	ORG $+2
$SG4294943795 DB 'illegal PNG compression method', 00H
	ORG $+1
$SG4294943794 DB 'illegal PNG filter method', 00H
	ORG $+2
$SG4294943793 DB 'illegal PNG interlace method', 00H
	ORG $+3
$SG4294943792 DB 'chunk length of a chunk is too large or the chunk too s'
	DB	'mall', 00H
$SG4294943791 DB 'illegal PNG filter type encountered', 00H
$SG4294943790 DB 'illegal bit depth for this color type given', 00H
$SG4294943789 DB 'the palette is too big', 00H
	ORG $+1
$SG4294943786 DB 'tRNS chunk has wrong size for RGB image', 00H
$SG4294943784 DB 'bKGD chunk has wrong size for palette image', 00H
$SG4294943788 DB 'more palette alpha values given in tRNS chunk than ther'
	DB	'e are colors in the palette', 00H
	ORG $+1
$SG4294943787 DB 'tRNS chunk has wrong size for greyscale image', 00H
	ORG $+2
$SG4294943782 DB 'bKGD chunk has wrong size for RGB image', 00H
$SG4294943779 DB 'empty input or file doesn''t exist', 00H
	ORG $+2
$SG4294943785 DB 'tRNS chunk appeared while it was not allowed for this c'
	DB	'olor type', 00H
	ORG $+3
$SG4294943783 DB 'bKGD chunk has wrong size for greyscale image', 00H
	ORG $+2
$SG4294943778 DB 'jumped past memory while generating dynamic huffman tre'
	DB	'e', 00H
	ORG $+3
$SG4294943781 DB 'a value in indexed image is larger than the palette siz'
	DB	'e (bitdepth = 8)', 00H
$SG4294943780 DB 'a value in indexed image is larger than the palette siz'
	DB	'e (bitdepth < 8)', 00H
$SG4294943777 DB 'jumped past memory while generating dynamic huffman tre'
	DB	'e', 00H
	ORG $+3
$SG4294943776 DB 'jumped past memory while inflating huffman block', 00H
	ORG $+3
$SG4294943775 DB 'jumped past memory while inflating', 00H
	ORG $+1
$SG4294943774 DB 'size of zlib data too small', 00H
$SG4294943773 DB 'repeat symbol in tree while there was no value symbol y'
	DB	'et', 00H
	ORG $+2
$SG4294943772 DB 'jumped past tree while generating huffman tree', 00H
	ORG $+1
$SG4294943768 DB 'requested color conversion not supported', 00H
	ORG $+3
$SG4294943771 DB 'given output image colortype or bitdepth not supported '
	DB	'for color conversion', 00H
$SG4294943770 DB 'invalid CRC encountered (checking CRC can be disabled)', 00H
	ORG $+1
$SG4294943769 DB 'invalid ADLER32 encountered (checking ADLER32 can be di'
	DB	'sabled)', 00H
	ORG $+1
$SG4294943765 DB 'conversion from color to greyscale not supported', 00H
	ORG $+3
$SG4294943767 DB 'invalid window size given in the settings of the encode'
	DB	'r (must be 0-32768)', 00H
	ORG $+1
$SG4294943763 DB 'the length of the END symbol 256 in the Huffman tree is'
	DB	' 0', 00H
	ORG $+2
$SG4294943766 DB 'invalid BTYPE given in the settings of the encoder (onl'
	DB	'y 0, 1 and 2 are allowed)', 00H
	ORG $+3
$SG4294943758 DB 'unexisting interlace mode given to encoder (must be 0 o'
	DB	'r 1)', 00H
$SG4294943764 DB 'length of a chunk too long, max allowed for PNG is 2147'
	DB	'483647 bytes per chunk', 00H
	ORG $+2
$SG4294943762 DB 'the length of a text chunk keyword given to the encoder'
	DB	' is longer than the maximum of 79 bytes', 00H
	ORG $+1
$SG4294943761 DB 'the length of a text chunk keyword given to the encoder'
	DB	' is smaller than the minimum of 1 byte', 00H
	ORG $+2
$SG4294943760 DB 'tried to encode a PLTE chunk with a palette that has le'
	DB	'ss than 1 or more than 256 colors', 00H
	ORG $+3
$SG4294943756 DB 'invalid tIME chunk size', 00H
$SG4294943754 DB 'no null termination char found while decoding text chun'
	DB	'k', 00H
	ORG $+3
$SG4294943759 DB 'unknown chunk type with ''critical'' flag encountered b'
	DB	'y the decoder', 00H
	ORG $+1
$SG4294943755 DB 'invalid pHYs chunk size', 00H
$SG4294943749 DB 'tried creating a tree of 0 symbols', 00H
	ORG $+1
$SG4294943757 DB 'while decoding, unexisting compression method encounter'
	DB	'ing in zTXt or iTXt chunk (it must be 0)', 00H
$SG4294943753 DB 'iTXt chunk too short to contain required bytes', 00H
	ORG $+1
$SG4294943752 DB 'integer overflow in buffer size', 00H
$SG4294943751 DB 'failed to open file for reading', 00H
$SG4294943750 DB 'failed to open file for writing', 00H
$SG4294943748 DB 'lazy matching at pos 0 is impossible', 00H
	ORG $+3
$SG4294943747 DB 'color conversion to palette requested while a color isn'
	DB	'''t in palette', 00H
	ORG $+3
$SG4294943746 DB 'memory allocation failed', 00H
	ORG $+3
$SG4294943745 DB 'given image too small to contain all pixels to be encod'
	DB	'ed', 00H
	ORG $+2
$SG4294943744 DB 'internal color conversion bug', 00H
	ORG $+2
$SG4294943743 DB 'impossible offset in lz77 encoding (internal bug)', 00H
	ORG $+2
$SG4294943740 DB 'text chunk keyword too short or long: must have size 1-'
	DB	'79', 00H
	ORG $+2
$SG4294943742 DB 'must provide custom zlib function pointer if LODEPNG_CO'
	DB	'MPILE_ZLIB is not defined', 00H
	ORG $+3
$SG4294943739 DB 'unknown error code', 00H
	ORG $+1
$SG4294943741 DB 'invalid filter strategy given for LodePNGEncoderSetting'
	DB	's.filter_strategy', 00H
	ORG $+3
_ADAM7_DX DD	08H
	DD	08H
	DD	04H
	DD	04H
	DD	02H
	DD	02H
	DD	01H
_DISTANCEEXTRA DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
_ADAM7_DY DD	08H
	DD	08H
	DD	08H
	DD	04H
	DD	04H
	DD	02H
	DD	02H
_ADAM7_IY DD	00H
	DD	00H
	DD	04H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
_CLCL_ORDER DD	010H
	DD	011H
	DD	012H
	DD	00H
	DD	08H
	DD	07H
	DD	09H
	DD	06H
	DD	0aH
	DD	05H
	DD	0bH
	DD	04H
	DD	0cH
	DD	03H
	DD	0dH
	DD	02H
	DD	0eH
	DD	01H
	DD	0fH
_ADAM7_IX DD	00H
	DD	04H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	00H
_LENGTHEXTRA DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	ORG $+2
_LENGTHBASE DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	09H
	DD	0aH
	DD	0bH
	DD	0dH
	DD	0fH
	DD	011H
	DD	013H
	DD	017H
	DD	01bH
	DD	01fH
	DD	023H
	DD	02bH
	DD	033H
	DD	03bH
	DD	043H
	DD	053H
	DD	063H
	DD	073H
	DD	083H
	DD	0a3H
	DD	0c3H
	DD	0e3H
	DD	0102H
	ORG $+2
_DISTANCEBASE DD 01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	07H
	DD	09H
	DD	0dH
	DD	011H
	DD	019H
	DD	021H
	DD	031H
	DD	041H
	DD	061H
	DD	081H
	DD	0c1H
	DD	0101H
	DD	0181H
	DD	0201H
	DD	0301H
	DD	0401H
	DD	0601H
	DD	0801H
	DD	0c01H
	DD	01001H
	DD	01801H
	DD	02001H
	DD	03001H
	DD	04001H
	DD	06001H
PUBLIC	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
PUBLIC	?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
PUBLIC	??$_Move@AAE@std@@YA$$QAEAAE@Z			; std::_Move<unsigned char &>
PUBLIC	??$swap@E@std@@YAXAAE0@Z			; std::swap<unsigned char>
PUBLIC	??$iter_swap@PAEPAE@std@@YAXPAE0@Z		; std::iter_swap<unsigned char *,unsigned char *>
PUBLIC	??$_Advance@PAEH@std@@YAXAAPAEHUrandom_access_iterator_tag@0@@Z ; std::_Advance<unsigned char *,int>
PUBLIC	??$_Distance2@PAEH@std@@YAXPAE0AAHUrandom_access_iterator_tag@0@@Z ; std::_Distance2<unsigned char *,int>
PUBLIC	??$_Rotate@PAEHE@std@@YAXPAE00PAH0@Z		; std::_Rotate<unsigned char *,int,unsigned char>
PUBLIC	??$_Dist_type@PAE@std@@YAPAHPAE@Z		; std::_Dist_type<unsigned char *>
PUBLIC	??$_Uninit_copy@EE@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<unsigned char,unsigned char>
PUBLIC	??$advance@PAEH@std@@YAXAAPAEH@Z		; std::advance<unsigned char *,int>
PUBLIC	??$distance@PAE@std@@YAHPAE0@Z			; std::distance<unsigned char *>
PUBLIC	??$_Rotate@PAE@std@@YAXPAE00Urandom_access_iterator_tag@0@@Z ; std::_Rotate<unsigned char *>
PUBLIC	??$_Unchecked@PAE@std@@YAPAEPAE@Z		; std::_Unchecked<unsigned char *>
PUBLIC	??$_Uninitialized_copy@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z ; std::_Uninitialized_copy<unsigned char *,unsigned char *,std::_Wrap_alloc<std::allocator<unsigned char> > >
PUBLIC	??$_Distance2@PAEI@std@@YAXPAE0AAIUrandom_access_iterator_tag@0@@Z ; std::_Distance2<unsigned char *,unsigned int>
PUBLIC	??$_Uninit_move@EEE@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<unsigned char,unsigned char,unsigned char>
PUBLIC	??$rotate@PAE@std@@YAPAEPAE00@Z			; std::rotate<unsigned char *>
PUBLIC	??$_Ucopy@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Ucopy<unsigned char *>
PUBLIC	??$_Distance@PAEI@std@@YAXPAE0AAI@Z		; std::_Distance<unsigned char *,unsigned int>
PUBLIC	?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Orphan_range
PUBLIC	??$_Uninitialized_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z ; std::_Uninitialized_move<unsigned char *,unsigned char *,std::_Wrap_alloc<std::allocator<unsigned char> > >
PUBLIC	??$_Move@PAEPAE@std@@YAPAEPAE00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<unsigned char *,unsigned char *>
PUBLIC	??$_Uninit_def_fill_n@EIE@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<unsigned char,unsigned int,unsigned char>
PUBLIC	??$_Val_type@PAE@std@@YAPAEPAE@Z		; std::_Val_type<unsigned char *>
PUBLIC	??$_Insert@PAE@?$vector@EV?$allocator@E@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Insert<unsigned char *>
PUBLIC	??$_Iter_cat@PAE@std@@YA?AUrandom_access_iterator_tag@0@ABQAE@Z ; std::_Iter_cat<unsigned char *>
PUBLIC	??$_Allocate@E@std@@YAPAEIPAE@Z			; std::_Allocate<unsigned char>
PUBLIC	??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove<unsigned char *>
PUBLIC	??$_Move@PAEPAE@std@@YAPAEPAE00@Z		; std::_Move<unsigned char *,unsigned char *>
PUBLIC	??$_Uninitialized_default_fill_n@PAEIU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z ; std::_Uninitialized_default_fill_n<unsigned char *,unsigned int,std::_Wrap_alloc<std::allocator<unsigned char> > >
PUBLIC	??$insert@PAE@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::insert<unsigned char *>
PUBLIC	?max_size@?$allocator@E@std@@QBEIXZ		; std::allocator<unsigned char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@E@std@@@std@@SAIABV?$allocator@E@2@@Z ; std::allocator_traits<std::allocator<unsigned char> >::max_size
PUBLIC	?allocate@?$allocator@E@std@@QAEPAEI@Z		; std::allocator<unsigned char>::allocate
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Compat
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator+=
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<unsigned char> >::max_size
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEPAEI@Z ; std::_Wrap_alloc<std::allocator<unsigned char> >::allocate
PUBLIC	?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator!=
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator==
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator+=
PUBLIC	?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen
PUBLIC	?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reallocate
PUBLIC	?_Grow_to@?$vector@EV?$allocator@E@std@@@std@@IBEII@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Grow_to
PUBLIC	?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::clear
PUBLIC	?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
PUBLIC	?_Make_iter@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Make_iter
PUBLIC	?_Unused_capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Unused_capacity
PUBLIC	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_ostream@DU?$char_traits@D@std@@@std@@@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_ostream<char,std::char_traits<char> > >::*
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator+
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >
PUBLIC	?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reserve
PUBLIC	?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::erase
PUBLIC	?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::begin
PUBLIC	?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
PUBLIC	?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnpreinc
PUBLIC	?sgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sgetn
PUBLIC	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
PUBLIC	?pubseekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@_JHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pubseekoff
PUBLIC	??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z ; std::basic_istream<char,std::char_traits<char> >::_Ipfx
PUBLIC	??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
PUBLIC	??A?$vector@EV?$allocator@E@std@@@std@@QBEABEI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
PUBLIC	?empty@?$vector@EV?$allocator@E@std@@@std@@QBE_NXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::empty
PUBLIC	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
PUBLIC	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
PUBLIC	?end@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::end
PUBLIC	??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
PUBLIC	?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::snextc
PUBLIC	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_istream@DU?$char_traits@D@std@@@std@@@2@HXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_istream<char,std::char_traits<char> > >::*
PUBLIC	??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ ; std::basic_istream<char,std::char_traits<char> >::tellg
PUBLIC	?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z ; std::basic_istream<char,std::char_traits<char> >::seekg
PUBLIC	?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z ; std::basic_istream<char,std::char_traits<char> >::read
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
PUBLIC	?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
PUBLIC	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
PUBLIC	?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV23@W4LodePNGColorType@@I@Z ; lodepng::decode
PUBLIC	?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z ; lodepng::decode
PUBLIC	??1State@lodepng@@UAE@XZ			; lodepng::State::~State
PUBLIC	??_GState@lodepng@@UAEPAXI@Z			; lodepng::State::`scalar deleting destructor'
PUBLIC	??0State@lodepng@@QAE@XZ			; lodepng::State::State
PUBLIC	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	?load_file@lodepng@@YAXAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ; lodepng::load_file
PUBLIC	?lodepng_encoder_settings_init@@YAXPAULodePNGEncoderSettings@@@Z ; lodepng_encoder_settings_init
PUBLIC	?lodepng_state_cleanup@@YAXPAULodePNGState@@@Z	; lodepng_state_cleanup
PUBLIC	?lodepng_state_init@@YAXPAULodePNGState@@@Z	; lodepng_state_init
PUBLIC	?lodepng_decoder_settings_init@@YAXPAULodePNGDecoderSettings@@@Z ; lodepng_decoder_settings_init
PUBLIC	??0LodePNGState@@QAE@XZ				; LodePNGState::LodePNGState
PUBLIC	?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z ; lodepng_decode_memory
PUBLIC	?lodepng_decode@@YAIPAPAEPAI1PAULodePNGState@@PBEI@Z ; lodepng_decode
PUBLIC	?lodepng_inspect@@YAIPAI0PAULodePNGState@@PBEI@Z ; lodepng_inspect
PUBLIC	?lodepng_convert@@YAIPAEPBEPAULodePNGColorMode@@PBU1@III@Z ; lodepng_convert
PUBLIC	?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z	; lodepng_info_cleanup
PUBLIC	?lodepng_info_init@@YAXPAULodePNGInfo@@@Z	; lodepng_info_init
PUBLIC	?lodepng_add_itext@@YAIPAULodePNGInfo@@PBD111@Z	; lodepng_add_itext
PUBLIC	?lodepng_add_text@@YAIPAULodePNGInfo@@PBD1@Z	; lodepng_add_text
PUBLIC	?lodepng_get_raw_size@@YAIIIPBULodePNGColorMode@@@Z ; lodepng_get_raw_size
PUBLIC	?lodepng_get_bpp@@YAIPBULodePNGColorMode@@@Z	; lodepng_get_bpp
PUBLIC	?lodepng_palette_clear@@YAXPAULodePNGColorMode@@@Z ; lodepng_palette_clear
PUBLIC	?lodepng_color_mode_copy@@YAIPAULodePNGColorMode@@PBU1@@Z ; lodepng_color_mode_copy
PUBLIC	?lodepng_color_mode_cleanup@@YAXPAULodePNGColorMode@@@Z ; lodepng_color_mode_cleanup
PUBLIC	?lodepng_color_mode_init@@YAXPAULodePNGColorMode@@@Z ; lodepng_color_mode_init
PUBLIC	?lodepng_chunk_append@@YAIPAPAEPAIPBE@Z		; lodepng_chunk_append
PUBLIC	?lodepng_chunk_next_const@@YAPBEPBE@Z		; lodepng_chunk_next_const
PUBLIC	?lodepng_chunk_check_crc@@YAIPBE@Z		; lodepng_chunk_check_crc
PUBLIC	?lodepng_chunk_data_const@@YAPBEPBE@Z		; lodepng_chunk_data_const
PUBLIC	?lodepng_chunk_ancillary@@YAEPBE@Z		; lodepng_chunk_ancillary
PUBLIC	?lodepng_chunk_type_equals@@YAEPBEPBD@Z		; lodepng_chunk_type_equals
PUBLIC	?lodepng_chunk_length@@YAIPBE@Z			; lodepng_chunk_length
PUBLIC	?lodepng_crc32@@YAIPBEI@Z			; lodepng_crc32
PUBLIC	?lodepng_decompress_settings_init@@YAXPAULodePNGDecompressSettings@@@Z ; lodepng_decompress_settings_init
PUBLIC	?lodepng_compress_settings_init@@YAXPAULodePNGCompressSettings@@@Z ; lodepng_compress_settings_init
PUBLIC	?lodepng_zlib_decompress@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z ; lodepng_zlib_decompress
PUBLIC	?lodepng_inflate@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z ; lodepng_inflate
PUBLIC	?lodepng_read32bitInt@@YAIPBE@Z			; lodepng_read32bitInt
PUBLIC	??_GLodePNGState@@UAEPAXI@Z			; LodePNGState::`scalar deleting destructor'
PUBLIC	??1LodePNGState@@UAE@XZ				; LodePNGState::~LodePNGState
PUBLIC	??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	?flags@ios_base@std@@QBEHXZ			; std::ios_base::flags
PUBLIC	?fail@ios_base@std@@QBE_NXZ			; std::ios_base::fail
PUBLIC	?is@?$ctype@D@std@@QBE_NFD@Z			; std::ctype<char>::is
PUBLIC	?_Fill_n@std@@YAPAEPAEIE@Z			; std::_Fill_n
PUBLIC	?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z ; lodepng::decode
EXTRN	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_ELodePNGState@@UAEPAXI@Z:PROC		; LodePNGState::`vector deleting destructor'
EXTRN	??_EState@lodepng@@UAEPAXI@Z:PROC		; lodepng::State::`vector deleting destructor'
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?load_file@lodepng@@YAXAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?load_file@lodepng@@YAXAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?load_file@lodepng@@YAXAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?load_file@lodepng@@YAXAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z
	DD	01H
	DD	FLAT:__tryblocktable$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z$2
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__tryblocktable$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z$4
__catchsym$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z
_TEXT	SEGMENT
_buffer$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
_h$ = 8							; size = 4
_filename$ = 12						; size = 4
_colortype$dead$ = 16					; size = 4
_bitdepth$dead$ = 20					; size = 4
?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z PROC ; lodepng::decode, COMDAT
; _out$ = ecx
; _w$ = edx

; 6192 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f2		 mov	 esi, edx
  0002a	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 486  : 		_Myfirst = pointer();

  0002c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _buffer$[ebp], 0

; 487  : 		_Mylast = pointer();

  00033	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _buffer$[ebp+4], 0

; 488  : 		_Myend = pointer();

  0003a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _buffer$[ebp+8], 0
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6194 :   load_file(buffer, filename);

  00041	8b 55 0c	 mov	 edx, DWORD PTR _filename$[ebp]
  00044	8d 4d e8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004e	e8 00 00 00 00	 call	 ?load_file@lodepng@@YAXAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ; lodepng::load_file

; 6164 :   return decode(out, w, h, in.empty() ? 0 : &in[0], (unsigned)in.size(), colortype, bitdepth);

  00053	8b 5d e8	 mov	 ebx, DWORD PTR _buffer$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1097 : 		return (this->_Myfirst == this->_Mylast);

  00056	8b 45 ec	 mov	 eax, DWORD PTR _buffer$[ebp+4]
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6164 :   return decode(out, w, h, in.empty() ? 0 : &in[0], (unsigned)in.size(), colortype, bitdepth);

  00059	33 d2		 xor	 edx, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1097 : 		return (this->_Myfirst == this->_Mylast);

  0005b	3b d8		 cmp	 ebx, eax
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6164 :   return decode(out, w, h, in.empty() ? 0 : &in[0], (unsigned)in.size(), colortype, bitdepth);

  0005d	8b cb		 mov	 ecx, ebx
  0005f	0f 44 ca	 cmove	 ecx, edx
  00062	83 ec 08	 sub	 esp, 8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00065	2b c3		 sub	 eax, ebx
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6164 :   return decode(out, w, h, in.empty() ? 0 : &in[0], (unsigned)in.size(), colortype, bitdepth);

  00067	50		 push	 eax
  00068	51		 push	 ecx
  00069	ff 75 08	 push	 DWORD PTR _h$[ebp]
  0006c	8b d6		 mov	 edx, esi
  0006e	8b cf		 mov	 ecx, edi
  00070	e8 00 00 00 00	 call	 ?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z ; lodepng::decode
  00075	83 c4 14	 add	 esp, 20			; 00000014H

; 6195 :   return decode(out, w, h, buffer, colortype, bitdepth);

  00078	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1536 : 		if (this->_Myfirst != pointer())

  0007a	85 db		 test	 ebx, ebx
  0007c	74 0b		 je	 SHORT $LN24@decode
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0007e	53		 push	 ebx
  0007f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00084	83 c4 04	 add	 esp, 4
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6195 :   return decode(out, w, h, buffer, colortype, bitdepth);

  00087	8b c6		 mov	 eax, esi
$LN24@decode:

; 6196 : }

  00089	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00093	59		 pop	 ecx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
__ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z ENDP ; lodepng::decode
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Fill_n@std@@YAPAEPAEIE@Z
_TEXT	SEGMENT
__Val$dead$ = 8						; size = 1
?_Fill_n@std@@YAPAEPAEIE@Z PROC				; std::_Fill_n, COMDAT
; __Dest$ = ecx
; __Count$ = edx

; 2698 : 	{	// copy unsigned char _Val _Count times through [_Dest, ...)

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b fa		 mov	 edi, edx

; 2699 : 	_CSTD memset(_Dest, _Val, _Count);

  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx
  00007	6a 00		 push	 0
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _memset
  0000f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2700 : 	return (_Dest + _Count);

  00012	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi

; 2701 : 	}

  00017	c3		 ret	 0
?_Fill_n@std@@YAPAEPAEIE@Z ENDP				; std::_Fill_n
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?is@?$ctype@D@std@@QBE_NFD@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__Ch$ = 12						; size = 1
?is@?$ctype@D@std@@QBE_NFD@Z PROC			; std::ctype<char>::is, COMDAT
; _this$ = ecx

; 2348 : 		{	// test if element fits any mask classifications

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2349 : 		return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);

  00003	0f b6 55 0c	 movzx	 edx, BYTE PTR __Ch$[ebp]
  00007	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0000a	66 8b 45 08	 mov	 ax, WORD PTR __Maskval$[ebp]
  0000e	66 85 04 51	 test	 WORD PTR [ecx+edx*2], ax
  00012	b8 00 00 00 00	 mov	 eax, 0
  00017	0f 95 c0	 setne	 al

; 2350 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?is@?$ctype@D@std@@QBE_NFD@Z ENDP			; std::ctype<char>::is
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ?fail@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?fail@ios_base@std@@QBE_NXZ PROC			; std::ios_base::fail, COMDAT
; _this$ = ecx

; 359  : 		return (((int)rdstate()
; 360  : 			& ((int)badbit | (int)failbit)) != 0);

  00000	f6 41 0c 06	 test	 BYTE PTR [ecx+12], 6
  00004	b8 00 00 00 00	 mov	 eax, 0
  00009	0f 95 c0	 setne	 al

; 361  : 		}

  0000c	c3		 ret	 0
?fail@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::fail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = ecx

; 386  : 		return (_Fmtfl);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 387  : 		}

  00003	c3		 ret	 0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 95   : 			if (_Myistr.rdbuf() != 0)

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	8b 01		 mov	 eax, DWORD PTR [ecx]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00007	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 05		 je	 SHORT $LN3@sentry

; 96   : 				_Myistr.rdbuf()->_Unlock();

  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	ff 60 08	 jmp	 DWORD PTR [eax+8]
$LN3@sentry:
  00014	c3		 ret	 0
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 87   : 		{	// destroy the object

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8d 51 08	 lea	 edx, DWORD PTR [ecx+8]
  00005	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 532  : 		_Ios_base_dtor(this);

  00008	52		 push	 edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 87   : 		{	// destroy the object

  00009	c7 44 10 f8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00011	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  00014	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00017	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0001a	89 44 11 f4	 mov	 DWORD PTR [ecx+edx-12], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 531  : 		{	// destroy the object

  0001e	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ios_base@std@@6B@

; 532  : 		_Ios_base_dtor(this);

  00024	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00029	59		 pop	 ecx
  0002a	c3		 ret	 0
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.h
;	COMDAT ??1LodePNGState@@UAE@XZ
_TEXT	SEGMENT
??1LodePNGState@@UAE@XZ PROC				; LodePNGState::~LodePNGState, COMDAT
; _this$ = ecx

; 644  :   virtual ~LodePNGState(){}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7LodePNGState@@6B@
  00006	c3		 ret	 0
??1LodePNGState@@UAE@XZ ENDP				; LodePNGState::~LodePNGState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.h
;	COMDAT ??_GLodePNGState@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GLodePNGState@@UAEPAXI@Z PROC			; LodePNGState::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 644  :   virtual ~LodePNGState(){}

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7LodePNGState@@6B@
  00010	74 09		 je	 SHORT $LN6@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_GLodePNGState@@UAEPAXI@Z ENDP			; LodePNGState::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_malloc@@YAPAXI@Z
_TEXT	SEGMENT
?lodepng_malloc@@YAPAXI@Z PROC				; lodepng_malloc, COMDAT
; _size$ = ecx

; 63   :   return malloc(size);

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 _malloc
  00006	83 c4 04	 add	 esp, 4

; 64   : }

  00009	c3		 ret	 0
?lodepng_malloc@@YAPAXI@Z ENDP				; lodepng_malloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_realloc@@YAPAXPAXI@Z
_TEXT	SEGMENT
?lodepng_realloc@@YAPAXPAXI@Z PROC			; lodepng_realloc, COMDAT
; _ptr$ = ecx
; _new_size$ = edx

; 68   :   return realloc(ptr, new_size);

  00000	52		 push	 edx
  00001	51		 push	 ecx
  00002	e8 00 00 00 00	 call	 _realloc
  00007	83 c4 08	 add	 esp, 8

; 69   : }

  0000a	c3		 ret	 0
?lodepng_realloc@@YAPAXPAXI@Z ENDP			; lodepng_realloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_free@@YAXPAX@Z
_TEXT	SEGMENT
?lodepng_free@@YAXPAX@Z PROC				; lodepng_free, COMDAT
; _ptr$ = ecx

; 73   :   free(ptr);

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 _free
  00006	59		 pop	 ecx

; 74   : }

  00007	c3		 ret	 0
?lodepng_free@@YAXPAX@Z ENDP				; lodepng_free
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?uivector_cleanup@@YAXPAX@Z
_TEXT	SEGMENT
?uivector_cleanup@@YAXPAX@Z PROC			; uivector_cleanup, COMDAT
; _p$ = ecx

; 136  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 73   :   free(ptr);

  00003	ff 36		 push	 DWORD PTR [esi]

; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;

  00005	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0000c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 73   :   free(ptr);

  00013	e8 00 00 00 00	 call	 _free
  00018	83 c4 04	 add	 esp, 4

; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;

  0001b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00021	5e		 pop	 esi

; 140  : }

  00022	c3		 ret	 0
?uivector_cleanup@@YAXPAX@Z ENDP			; uivector_cleanup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?uivector_resize@@YAIPAUuivector@@I@Z
_TEXT	SEGMENT
?uivector_resize@@YAIPAUuivector@@I@Z PROC		; uivector_resize, COMDAT
; _p$ = ecx
; _size$ = edx

; 144  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b fa		 mov	 edi, edx
  00005	8b f1		 mov	 esi, ecx

; 145  :   if(size * sizeof(unsigned) > p->allocsize)

  00007	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
  0000e	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00011	76 1b		 jbe	 SHORT $LN4@uivector_r

; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;

  00013	8d 1c fd 00 00
	00 00		 lea	 ebx, DWORD PTR [edi*8]

; 68   :   return realloc(ptr, new_size);

  0001a	53		 push	 ebx
  0001b	ff 36		 push	 DWORD PTR [esi]
  0001d	e8 00 00 00 00	 call	 _realloc
  00022	83 c4 08	 add	 esp, 8

; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)

  00025	85 c0		 test	 eax, eax
  00027	74 11		 je	 SHORT $LN3@uivector_r

; 150  :     {
; 151  :       p->allocsize = newsize;

  00029	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 152  :       p->data = (unsigned*)data;

  0002c	89 06		 mov	 DWORD PTR [esi], eax
$LN4@uivector_r:

; 156  :   }
; 157  :   else p->size = size;

  0002e	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi

; 158  :   return 1;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	5b		 pop	 ebx

; 159  : }

  00039	c3		 ret	 0
$LN3@uivector_r:
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi

; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;

  0003c	33 c0		 xor	 eax, eax
  0003e	5b		 pop	 ebx

; 159  : }

  0003f	c3		 ret	 0
?uivector_resize@@YAIPAUuivector@@I@Z ENDP		; uivector_resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?uivector_resizev@@YAIPAUuivector@@II@Z
_TEXT	SEGMENT
_oldsize$1$ = -4					; size = 4
_value$dead$ = 8					; size = 4
?uivector_resizev@@YAIPAUuivector@@II@Z PROC		; uivector_resizev, COMDAT
; _p$ = ecx
; _size$ = edx

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b da		 mov	 ebx, edx
  00008	8b f1		 mov	 esi, ecx

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);
; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)

  0000a	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]

; 164  :   size_t oldsize = p->size, i;

  00011	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00014	57		 push	 edi
  00015	89 4d fc	 mov	 DWORD PTR _oldsize$1$[ebp], ecx

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);
; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)

  00018	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001b	76 1e		 jbe	 SHORT $LN10@uivector_r

; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;

  0001d	8d 3c dd 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*8]

; 68   :   return realloc(ptr, new_size);

  00024	57		 push	 edi
  00025	ff 36		 push	 DWORD PTR [esi]
  00027	e8 00 00 00 00	 call	 _realloc
  0002c	83 c4 08	 add	 esp, 8

; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)

  0002f	85 c0		 test	 eax, eax
  00031	74 28		 je	 SHORT $LN20@uivector_r

; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;

  00033	8b 4d fc	 mov	 ecx, DWORD PTR _oldsize$1$[ebp]
  00036	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00039	89 06		 mov	 DWORD PTR [esi], eax
$LN10@uivector_r:
  0003b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;

  0003e	3b cb		 cmp	 ecx, ebx
  00040	73 0d		 jae	 SHORT $LN17@uivector_r
  00042	8b 06		 mov	 eax, DWORD PTR [esi]
  00044	2b d9		 sub	 ebx, ecx
  00046	8d 3c 88	 lea	 edi, DWORD PTR [eax+ecx*4]
  00049	8b cb		 mov	 ecx, ebx
  0004b	33 c0		 xor	 eax, eax
  0004d	f3 ab		 rep stosd
$LN17@uivector_r:

; 167  :   return 1;

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	b8 01 00 00 00	 mov	 eax, 1
  00056	5b		 pop	 ebx

; 168  : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN20@uivector_r:
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi

; 165  :   if(!uivector_resize(p, size)) return 0;

  0005d	33 c0		 xor	 eax, eax
  0005f	5b		 pop	 ebx

; 168  : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?uivector_resizev@@YAIPAUuivector@@II@Z ENDP		; uivector_resizev
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?uivector_init@@YAXPAUuivector@@@Z
_TEXT	SEGMENT
?uivector_init@@YAXPAUuivector@@@Z PROC			; uivector_init, COMDAT
; _p$ = ecx

; 172  :   p->data = NULL;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 173  :   p->size = p->allocsize = 0;

  00006	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0000d	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 174  : }

  00014	c3		 ret	 0
?uivector_init@@YAXPAUuivector@@@Z ENDP			; uivector_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?ucvector_resize@@YAIPAUucvector@@I@Z
_TEXT	SEGMENT
?ucvector_resize@@YAIPAUucvector@@I@Z PROC		; ucvector_resize, COMDAT
; _p$ = ecx
; _size$ = edx

; 217  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f1		 mov	 esi, ecx
  00005	8b fa		 mov	 edi, edx

; 218  :   if(size * sizeof(unsigned char) > p->allocsize)

  00007	3b 7e 08	 cmp	 edi, DWORD PTR [esi+8]
  0000a	76 17		 jbe	 SHORT $LN4@ucvector_r

; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;

  0000c	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]

; 68   :   return realloc(ptr, new_size);

  0000f	53		 push	 ebx
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 _realloc
  00017	83 c4 08	 add	 esp, 8

; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)

  0001a	85 c0		 test	 eax, eax
  0001c	74 11		 je	 SHORT $LN3@ucvector_r

; 223  :     {
; 224  :       p->allocsize = newsize;

  0001e	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 225  :       p->data = (unsigned char*)data;

  00021	89 06		 mov	 DWORD PTR [esi], eax
$LN4@ucvector_r:

; 229  :   }
; 230  :   else p->size = size;

  00023	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 231  :   return 1;

  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	5b		 pop	 ebx

; 232  : }

  0002e	c3		 ret	 0
$LN3@ucvector_r:
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi

; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/

  00031	33 c0		 xor	 eax, eax
  00033	5b		 pop	 ebx

; 232  : }

  00034	c3		 ret	 0
?ucvector_resize@@YAIPAUucvector@@I@Z ENDP		; ucvector_resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?ucvector_cleanup@@YAXPAX@Z
_TEXT	SEGMENT
?ucvector_cleanup@@YAXPAX@Z PROC			; ucvector_cleanup, COMDAT
; _p$ = ecx

; 237  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 73   :   free(ptr);

  00003	ff 36		 push	 DWORD PTR [esi]

; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;

  00005	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0000c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 73   :   free(ptr);

  00013	e8 00 00 00 00	 call	 _free
  00018	83 c4 04	 add	 esp, 4

; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;

  0001b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00021	5e		 pop	 esi

; 241  : }

  00022	c3		 ret	 0
?ucvector_cleanup@@YAXPAX@Z ENDP			; ucvector_cleanup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?ucvector_init@@YAXPAUucvector@@@Z
_TEXT	SEGMENT
?ucvector_init@@YAXPAUucvector@@@Z PROC			; ucvector_init, COMDAT
; _p$ = ecx

; 245  :   p->data = NULL;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 246  :   p->size = p->allocsize = 0;

  00006	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0000d	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 247  : }

  00014	c3		 ret	 0
?ucvector_init@@YAXPAUucvector@@@Z ENDP			; ucvector_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?ucvector_resizev@@YAIPAUucvector@@IE@Z
_TEXT	SEGMENT
_value$dead$ = 8					; size = 1
?ucvector_resizev@@YAIPAUucvector@@IE@Z PROC		; ucvector_resizev, COMDAT
; _p$ = ecx
; _size$ = edx

; 252  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	8b f2		 mov	 esi, edx

; 253  :   size_t oldsize = p->size, i;

  00007	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);
; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)

  0000a	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
  0000d	76 1a		 jbe	 SHORT $LN10@ucvector_r

; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;

  0000f	8d 04 36	 lea	 eax, DWORD PTR [esi+esi]

; 68   :   return realloc(ptr, new_size);

  00012	50		 push	 eax
  00013	ff 37		 push	 DWORD PTR [edi]
  00015	e8 00 00 00 00	 call	 _realloc
  0001a	83 c4 08	 add	 esp, 8

; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)

  0001d	85 c0		 test	 eax, eax
  0001f	74 30		 je	 SHORT $LN20@ucvector_r

; 223  :     {
; 224  :       p->allocsize = newsize;

  00021	8d 0c 36	 lea	 ecx, DWORD PTR [esi+esi]
  00024	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 225  :       p->data = (unsigned char*)data;

  00027	89 07		 mov	 DWORD PTR [edi], eax
$LN10@ucvector_r:

; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;

  00029	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;

  0002c	3b de		 cmp	 ebx, esi
  0002e	73 18		 jae	 SHORT $LN17@ucvector_r
  00030	8b 3f		 mov	 edi, DWORD PTR [edi]
  00032	2b f3		 sub	 esi, ebx
  00034	8b ce		 mov	 ecx, esi
  00036	8b d1		 mov	 edx, ecx
  00038	c1 e9 02	 shr	 ecx, 2
  0003b	03 fb		 add	 edi, ebx
  0003d	33 c0		 xor	 eax, eax
  0003f	f3 ab		 rep stosd
  00041	8b ca		 mov	 ecx, edx
  00043	83 e1 03	 and	 ecx, 3
  00046	f3 aa		 rep stosb
$LN17@ucvector_r:

; 256  :   return 1;

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	b8 01 00 00 00	 mov	 eax, 1
  0004f	5b		 pop	 ebx

; 257  : }

  00050	c3		 ret	 0
$LN20@ucvector_r:
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi

; 254  :   if(!ucvector_resize(p, size)) return 0;

  00053	33 c0		 xor	 eax, eax
  00055	5b		 pop	 ebx

; 257  : }

  00056	c3		 ret	 0
?ucvector_resizev@@YAIPAUucvector@@IE@Z ENDP		; ucvector_resizev
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?ucvector_init_buffer@@YAXPAUucvector@@PAEI@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
?ucvector_init_buffer@@YAXPAUucvector@@PAEI@Z PROC	; ucvector_init_buffer, COMDAT
; _p$ = ecx
; _buffer$ = edx

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;

  00003	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00006	89 11		 mov	 DWORD PTR [ecx], edx
  00008	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0000b	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 268  : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?ucvector_init_buffer@@YAXPAUucvector@@PAEI@Z ENDP	; ucvector_init_buffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?ucvector_push_back@@YAIPAUucvector@@E@Z
_TEXT	SEGMENT
?ucvector_push_back@@YAIPAUucvector@@E@Z PROC		; ucvector_push_back, COMDAT
; _p$ = ecx
; _c$dead$ = dl

; 274  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;

  00005	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00008	47		 inc	 edi

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);
; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)

  00009	3b 7e 08	 cmp	 edi, DWORD PTR [esi+8]
  0000c	76 17		 jbe	 SHORT $LN7@ucvector_p

; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;

  0000e	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]

; 68   :   return realloc(ptr, new_size);

  00011	53		 push	 ebx
  00012	ff 36		 push	 DWORD PTR [esi]
  00014	e8 00 00 00 00	 call	 _realloc
  00019	83 c4 08	 add	 esp, 8

; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)

  0001c	85 c0		 test	 eax, eax
  0001e	74 18		 je	 SHORT $LN12@ucvector_p

; 223  :     {
; 224  :       p->allocsize = newsize;

  00020	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 225  :       p->data = (unsigned char*)data;

  00023	89 06		 mov	 DWORD PTR [esi], eax
$LN7@ucvector_p:

; 276  :   p->data[p->size - 1] = c;

  00025	8b 06		 mov	 eax, DWORD PTR [esi]

; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;

  00027	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 276  :   p->data[p->size - 1] = c;

  0002a	c6 44 38 ff 00	 mov	 BYTE PTR [eax+edi-1], 0
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi

; 277  :   return 1;

  00031	b8 01 00 00 00	 mov	 eax, 1
  00036	5b		 pop	 ebx

; 278  : }

  00037	c3		 ret	 0
$LN12@ucvector_p:
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi

; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;

  0003a	33 c0		 xor	 eax, eax
  0003c	5b		 pop	 ebx

; 278  : }

  0003d	c3		 ret	 0
?ucvector_push_back@@YAIPAUucvector@@E@Z ENDP		; ucvector_push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?string_resize@@YAIPAPADI@Z
_TEXT	SEGMENT
?string_resize@@YAIPAPADI@Z PROC			; string_resize, COMDAT
; _out$ = ecx
; _size$ = edx

; 288  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b fa		 mov	 edi, edx
  00005	8b d9		 mov	 ebx, ecx

; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);

  00007	8d 47 01	 lea	 eax, DWORD PTR [edi+1]

; 68   :   return realloc(ptr, new_size);

  0000a	50		 push	 eax
  0000b	ff 33		 push	 DWORD PTR [ebx]
  0000d	e8 00 00 00 00	 call	 _realloc

; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);

  00012	8b f0		 mov	 esi, eax

; 68   :   return realloc(ptr, new_size);

  00014	83 c4 08	 add	 esp, 8

; 290  :   if(data)

  00017	85 f6		 test	 esi, esi
  00019	74 06		 je	 SHORT $LN1@string_res

; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/

  0001b	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0

; 293  :     *out = data;

  0001f	89 33		 mov	 DWORD PTR [ebx], esi
$LN1@string_res:

; 294  :   }
; 295  :   return data != 0;

  00021	33 c0		 xor	 eax, eax
  00023	5f		 pop	 edi
  00024	85 f6		 test	 esi, esi
  00026	5e		 pop	 esi
  00027	0f 95 c0	 setne	 al
  0002a	5b		 pop	 ebx

; 296  : }

  0002b	c3		 ret	 0
?string_resize@@YAIPAPADI@Z ENDP			; string_resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?string_init@@YAXPAPAD@Z
_TEXT	SEGMENT
?string_init@@YAXPAPAD@Z PROC				; string_init, COMDAT
; _out$ = ecx

; 300  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 68   :   return realloc(ptr, new_size);

  00003	6a 01		 push	 1
  00005	6a 00		 push	 0

; 301  :   *out = NULL;

  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 68   :   return realloc(ptr, new_size);

  0000d	e8 00 00 00 00	 call	 _realloc
  00012	83 c4 08	 add	 esp, 8

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);
; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)

  00015	85 c0		 test	 eax, eax
  00017	74 05		 je	 SHORT $LN3@string_ini

; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/

  00019	c6 00 00	 mov	 BYTE PTR [eax], 0

; 293  :     *out = data;

  0001c	89 06		 mov	 DWORD PTR [esi], eax
$LN3@string_ini:
  0001e	5e		 pop	 esi

; 302  :   string_resize(out, 0);
; 303  : }

  0001f	c3		 ret	 0
?string_init@@YAXPAPAD@Z ENDP				; string_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?string_cleanup@@YAXPAPAD@Z
_TEXT	SEGMENT
?string_cleanup@@YAXPAPAD@Z PROC			; string_cleanup, COMDAT
; _out$ = ecx

; 307  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 73   :   free(ptr);

  00003	ff 36		 push	 DWORD PTR [esi]
  00005	e8 00 00 00 00	 call	 _free
  0000a	83 c4 04	 add	 esp, 4

; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;

  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	5e		 pop	 esi

; 310  : }

  00014	c3		 ret	 0
?string_cleanup@@YAXPAPAD@Z ENDP			; string_cleanup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?string_set@@YAXPAPADPBD@Z
_TEXT	SEGMENT
?string_set@@YAXPAPADPBD@Z PROC				; string_set, COMDAT
; _out$ = ecx
; _in$ = edx

; 313  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b da		 mov	 ebx, edx

; 314  :   size_t insize = strlen(in), i = 0;

  00004	8b f3		 mov	 esi, ebx
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0000c	8d 64 24 00	 npad	 4
$LL15@string_set:
  00010	8a 06		 mov	 al, BYTE PTR [esi]
  00012	46		 inc	 esi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL15@string_set
  00017	2b f1		 sub	 esi, ecx

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);
; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);

  00019	8d 46 01	 lea	 eax, DWORD PTR [esi+1]

; 68   :   return realloc(ptr, new_size);

  0001c	50		 push	 eax
  0001d	ff 37		 push	 DWORD PTR [edi]
  0001f	e8 00 00 00 00	 call	 _realloc
  00024	83 c4 08	 add	 esp, 8

; 290  :   if(data)

  00027	85 c0		 test	 eax, eax
  00029	74 19		 je	 SHORT $LN1@string_set

; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/

  0002b	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 293  :     *out = data;

  0002f	89 07		 mov	 DWORD PTR [edi], eax

; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)

  00031	33 c0		 xor	 eax, eax
  00033	85 f6		 test	 esi, esi
  00035	74 0d		 je	 SHORT $LN1@string_set
$LL3@string_set:

; 318  :     {
; 319  :       (*out)[i] = in[i];

  00037	8b 17		 mov	 edx, DWORD PTR [edi]
  00039	8a 0c 18	 mov	 cl, BYTE PTR [eax+ebx]
  0003c	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  0003f	40		 inc	 eax
  00040	3b c6		 cmp	 eax, esi
  00042	72 f3		 jb	 SHORT $LL3@string_set
$LN1@string_set:
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx

; 320  :     }
; 321  :   }
; 322  : }

  00047	c3		 ret	 0
?string_set@@YAXPAPADPBD@Z ENDP				; string_set
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_read32bitInt@@YAIPBE@Z
_TEXT	SEGMENT
?lodepng_read32bitInt@@YAIPBE@Z PROC			; lodepng_read32bitInt, COMDAT
; _buffer$ = ecx

; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];

  00000	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00003	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]
  00007	c1 e0 08	 shl	 eax, 8
  0000a	0b c2		 or	 eax, edx
  0000c	0f b6 51 02	 movzx	 edx, BYTE PTR [ecx+2]
  00010	0f b6 49 03	 movzx	 ecx, BYTE PTR [ecx+3]
  00014	c1 e0 08	 shl	 eax, 8
  00017	0b c2		 or	 eax, edx
  00019	c1 e0 08	 shl	 eax, 8
  0001c	0b c1		 or	 eax, ecx

; 331  : }

  0001e	c3		 ret	 0
?lodepng_read32bitInt@@YAIPBE@Z ENDP			; lodepng_read32bitInt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?readBitFromStream@@YAEPAIPBE@Z
_TEXT	SEGMENT
?readBitFromStream@@YAEPAIPBE@Z PROC			; readBitFromStream, COMDAT
; _bitpointer$ = ecx
; _bitstream$ = edx

; 434  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));

  00004	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00006	8b c3		 mov	 eax, ebx
  00008	c1 e8 03	 shr	 eax, 3
  0000b	8a cb		 mov	 cl, bl
  0000d	8a 04 10	 mov	 al, BYTE PTR [eax+edx]
  00010	80 e1 07	 and	 cl, 7
  00013	d2 e8		 shr	 al, cl

; 436  :   (*bitpointer)++;

  00015	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  00018	89 0e		 mov	 DWORD PTR [esi], ecx
  0001a	5e		 pop	 esi
  0001b	24 01		 and	 al, 1
  0001d	5b		 pop	 ebx

; 437  :   return result;
; 438  : }

  0001e	c3		 ret	 0
?readBitFromStream@@YAEPAIPBE@Z ENDP			; readBitFromStream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?readBitsFromStream@@YAIPAIPBEI@Z
_TEXT	SEGMENT
tv226 = -12						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_bitstream$1$ = -4					; size = 4
_nbits$ = 8						; size = 4
?readBitsFromStream@@YAIPAIPBEI@Z PROC			; readBitsFromStream, COMDAT
; _bitpointer$ = ecx
; _bitstream$ = edx

; 441  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)

  00006	8b 45 08	 mov	 eax, DWORD PTR _nbits$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	33 ff		 xor	 edi, edi
  0000e	33 f6		 xor	 esi, esi
  00010	89 55 fc	 mov	 DWORD PTR _bitstream$1$[ebp], edx
  00013	8b d9		 mov	 ebx, ecx
  00015	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00023	83 f8 02	 cmp	 eax, 2
  00026	7c 5c		 jl	 SHORT $LC10@readBitsFr
  00028	48		 dec	 eax
  00029	89 45 f4	 mov	 DWORD PTR tv226[ebp], eax
  0002c	8d 64 24 00	 npad	 4
$LL11@readBitsFr:

; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;

  00030	8b 13		 mov	 edx, DWORD PTR [ebx]
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _bitstream$1$[ebp]
  00035	8b c2		 mov	 eax, edx
  00037	c1 e8 03	 shr	 eax, 3
  0003a	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  0003e	0f b6 ca	 movzx	 ecx, dl
  00041	83 e1 07	 and	 ecx, 7
  00044	d3 e8		 shr	 eax, cl
  00046	8b ce		 mov	 ecx, esi

; 446  :     (*bitpointer)++;

  00048	42		 inc	 edx
  00049	83 e0 01	 and	 eax, 1
  0004c	d3 e0		 shl	 eax, cl
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _bitstream$1$[ebp]
  00051	03 f8		 add	 edi, eax
  00053	8b c2		 mov	 eax, edx
  00055	c1 e8 03	 shr	 eax, 3
  00058	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  0005c	0f b6 ca	 movzx	 ecx, dl
  0005f	83 e1 07	 and	 ecx, 7
  00062	d3 e8		 shr	 eax, cl
  00064	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00067	83 c6 02	 add	 esi, 2
  0006a	83 e0 01	 and	 eax, 1
  0006d	d3 e0		 shl	 eax, cl
  0006f	01 45 f8	 add	 DWORD PTR $T2[ebp], eax
  00072	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00075	89 03		 mov	 DWORD PTR [ebx], eax
  00077	3b 75 f4	 cmp	 esi, DWORD PTR tv226[ebp]
  0007a	72 b4		 jb	 SHORT $LL11@readBitsFr
  0007c	8b 45 08	 mov	 eax, DWORD PTR _nbits$[ebp]
  0007f	89 7d f4	 mov	 DWORD PTR $T1[ebp], edi
  00082	33 ff		 xor	 edi, edi
$LC10@readBitsFr:

; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)

  00084	3b f0		 cmp	 esi, eax
  00086	73 22		 jae	 SHORT $LN9@readBitsFr

; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;

  00088	8b 13		 mov	 edx, DWORD PTR [ebx]
  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _bitstream$1$[ebp]
  0008d	8b c2		 mov	 eax, edx
  0008f	c1 e8 03	 shr	 eax, 3
  00092	0f b6 3c 08	 movzx	 edi, BYTE PTR [eax+ecx]
  00096	0f b6 ca	 movzx	 ecx, dl
  00099	83 e1 07	 and	 ecx, 7
  0009c	d3 ef		 shr	 edi, cl
  0009e	8b ce		 mov	 ecx, esi

; 446  :     (*bitpointer)++;

  000a0	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  000a3	89 03		 mov	 DWORD PTR [ebx], eax
  000a5	83 e7 01	 and	 edi, 1
  000a8	d3 e7		 shl	 edi, cl
$LN9@readBitsFr:
  000aa	8b 45 f4	 mov	 eax, DWORD PTR $T1[ebp]
  000ad	03 45 f8	 add	 eax, DWORD PTR $T2[ebp]
  000b0	03 c7		 add	 eax, edi
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx

; 447  :   }
; 448  :   return result;
; 449  : }

  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
?readBitsFromStream@@YAIPAIPBEI@Z ENDP			; readBitsFromStream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?HuffmanTree_init@@YAXPAUHuffmanTree@@@Z
_TEXT	SEGMENT
?HuffmanTree_init@@YAXPAUHuffmanTree@@@Z PROC		; HuffmanTree_init, COMDAT
; _tree$ = ecx

; 519  :   tree->tree2d = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 520  :   tree->tree1d = 0;

  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 521  :   tree->lengths = 0;

  0000d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 522  : }

  00014	c3		 ret	 0
?HuffmanTree_init@@YAXPAUHuffmanTree@@@Z ENDP		; HuffmanTree_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?HuffmanTree_cleanup@@YAXPAUHuffmanTree@@@Z
_TEXT	SEGMENT
?HuffmanTree_cleanup@@YAXPAUHuffmanTree@@@Z PROC	; HuffmanTree_cleanup, COMDAT
; _tree$ = ecx

; 525  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 73   :   free(ptr);

  00003	ff 36		 push	 DWORD PTR [esi]
  00005	e8 00 00 00 00	 call	 _free
  0000a	ff 76 04	 push	 DWORD PTR [esi+4]
  0000d	e8 00 00 00 00	 call	 _free
  00012	ff 76 08	 push	 DWORD PTR [esi+8]
  00015	e8 00 00 00 00	 call	 _free
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001d	5e		 pop	 esi

; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }

  0001e	c3		 ret	 0
?HuffmanTree_cleanup@@YAXPAUHuffmanTree@@@Z ENDP	; HuffmanTree_cleanup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?HuffmanTree_make2DTree@@YAIPAUHuffmanTree@@@Z
_TEXT	SEGMENT
tv505 = -32						; size = 4
tv503 = -28						; size = 4
tv504 = -24						; size = 4
tv507 = -20						; size = 4
tv499 = -16						; size = 4
_tree$1$ = -12						; size = 4
tv506 = -8						; size = 4
_n$2$ = -4						; size = 4
?HuffmanTree_make2DTree@@YAIPAUHuffmanTree@@@Z PROC	; HuffmanTree_make2DTree, COMDAT
; _tree$ = ecx

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	8b c1		 mov	 eax, ecx
  00008	53		 push	 ebx

; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));

  00009	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]
  0000c	56		 push	 esi
  0000d	89 45 f4	 mov	 DWORD PTR _tree$1$[ebp], eax
  00010	57		 push	 edi
  00011	8d 04 dd 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*8]

; 63   :   return malloc(size);

  00018	50		 push	 eax

; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/

  00019	33 ff		 xor	 edi, edi

; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/

  0001b	33 f6		 xor	 esi, esi

; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));

  0001d	89 5d f8	 mov	 DWORD PTR tv506[ebp], ebx

; 63   :   return malloc(size);

  00020	e8 00 00 00 00	 call	 _malloc
  00025	8b c8		 mov	 ecx, eax

; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));

  00027	8b 45 f4	 mov	 eax, DWORD PTR _tree$1$[ebp]

; 63   :   return malloc(size);

  0002a	83 c4 04	 add	 esp, 4
  0002d	89 4d ec	 mov	 DWORD PTR tv507[ebp], ecx

; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));

  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/

  00032	85 c9		 test	 ecx, ecx
  00034	75 0a		 jne	 SHORT $LN19@HuffmanTre
  00036	8d 47 53	 lea	 eax, DWORD PTR [edi+83]
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx

; 589  : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN19@HuffmanTre:

; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)

  00040	8d 14 1b	 lea	 edx, DWORD PTR [ebx+ebx]
  00043	33 c0		 xor	 eax, eax
  00045	89 55 e0	 mov	 DWORD PTR tv505[ebp], edx
  00048	85 d2		 test	 edx, edx
  0004a	74 10		 je	 SHORT $LN16@HuffmanTre
  0004c	8d 64 24 00	 npad	 4
$LL18@HuffmanTre:

; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/

  00050	c7 04 81 ff 7f
	00 00		 mov	 DWORD PTR [ecx+eax*4], 32767 ; 00007fffH
  00057	40		 inc	 eax
  00058	3b c2		 cmp	 eax, edx
  0005a	72 f4		 jb	 SHORT $LL18@HuffmanTre
$LN16@HuffmanTre:

; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/

  0005c	33 c0		 xor	 eax, eax
  0005e	89 45 fc	 mov	 DWORD PTR _n$2$[ebp], eax
  00061	85 db		 test	 ebx, ebx
  00063	0f 84 9e 00 00
	00		 je	 $LN13@HuffmanTre
  00069	8b 4d f4	 mov	 ecx, DWORD PTR _tree$1$[ebp]
  0006c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0006f	89 4d f0	 mov	 DWORD PTR tv499[ebp], ecx
$LL15@HuffmanTre:

; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/

  00072	33 d2		 xor	 edx, edx
  00074	39 11		 cmp	 DWORD PTR [ecx], edx
  00076	76 77		 jbe	 SHORT $LN14@HuffmanTre

; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/

  00078	8b 45 f4	 mov	 eax, DWORD PTR _tree$1$[ebp]
  0007b	8b 5d fc	 mov	 ebx, DWORD PTR _n$2$[ebp]
  0007e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00081	8d 04 98	 lea	 eax, DWORD PTR [eax+ebx*4]
  00084	8b 5d f8	 mov	 ebx, DWORD PTR tv506[ebp]
  00087	83 c3 fe	 add	 ebx, -2			; fffffffeH
  0008a	89 45 e8	 mov	 DWORD PTR tv504[ebp], eax
  0008d	89 5d e4	 mov	 DWORD PTR tv503[ebp], ebx
  00090	eb 03		 jmp	 SHORT $LN12@HuffmanTre
$LL38@HuffmanTre:
  00092	8b 45 e8	 mov	 eax, DWORD PTR tv504[ebp]
$LN12@HuffmanTre:

; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);

  00095	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00097	8b 00		 mov	 eax, DWORD PTR [eax]
  00099	8b cb		 mov	 ecx, ebx
  0009b	2b ca		 sub	 ecx, edx
  0009d	49		 dec	 ecx
  0009e	d3 e8		 shr	 eax, cl
  000a0	24 01		 and	 al, 1

; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/

  000a2	3b 75 e4	 cmp	 esi, DWORD PTR tv503[ebp]
  000a5	0f 87 83 00 00
	00		 ja	 $LN28@HuffmanTre

; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/

  000ab	8b 4d ec	 mov	 ecx, DWORD PTR tv507[ebp]
  000ae	0f b6 c0	 movzx	 eax, al
  000b1	8d 04 70	 lea	 eax, DWORD PTR [eax+esi*2]
  000b4	8b 34 81	 mov	 esi, DWORD PTR [ecx+eax*4]
  000b7	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
  000ba	81 fe ff 7f 00
	00		 cmp	 esi, 32767		; 00007fffH
  000c0	75 1d		 jne	 SHORT $LN8@HuffmanTre

; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/

  000c2	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  000c5	3b c3		 cmp	 eax, ebx

; 568  :         }
; 569  :         else

  000c7	8b 5d f8	 mov	 ebx, DWORD PTR tv506[ebp]
  000ca	75 09		 jne	 SHORT $LN7@HuffmanTre

; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _n$2$[ebp]
  000cf	89 01		 mov	 DWORD PTR [ecx], eax

; 567  :           treepos = 0;

  000d1	33 f6		 xor	 esi, esi

; 568  :         }
; 569  :         else

  000d3	eb 12		 jmp	 SHORT $LN11@HuffmanTre
$LN7@HuffmanTre:

; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;

  000d5	47		 inc	 edi

; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;

  000d6	8b f7		 mov	 esi, edi
  000d8	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  000db	89 01		 mov	 DWORD PTR [ecx], eax

; 577  :         }

  000dd	eb 05		 jmp	 SHORT $LN39@HuffmanTre
$LN8@HuffmanTre:

; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;

  000df	8b 5d f8	 mov	 ebx, DWORD PTR tv506[ebp]
  000e2	2b f3		 sub	 esi, ebx
$LN39@HuffmanTre:
  000e4	8b 45 fc	 mov	 eax, DWORD PTR _n$2$[ebp]
$LN11@HuffmanTre:

; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/

  000e7	8b 4d f0	 mov	 ecx, DWORD PTR tv499[ebp]
  000ea	42		 inc	 edx
  000eb	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000ed	72 a3		 jb	 SHORT $LL38@HuffmanTre
$LN14@HuffmanTre:

; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/

  000ef	40		 inc	 eax
  000f0	83 c1 04	 add	 ecx, 4
  000f3	89 45 fc	 mov	 DWORD PTR _n$2$[ebp], eax
  000f6	89 4d f0	 mov	 DWORD PTR tv499[ebp], ecx
  000f9	3b c3		 cmp	 eax, ebx
  000fb	0f 82 71 ff ff
	ff		 jb	 $LL15@HuffmanTre
  00101	8b 4d ec	 mov	 ecx, DWORD PTR tv507[ebp]
  00104	8b 55 e0	 mov	 edx, DWORD PTR tv505[ebp]
$LN13@HuffmanTre:

; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)

  00107	33 c0		 xor	 eax, eax
  00109	85 d2		 test	 edx, edx
  0010b	74 18		 je	 SHORT $LN2@HuffmanTre
  0010d	8d 49 00	 npad	 3
$LL4@HuffmanTre:

; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/

  00110	81 3c 81 ff 7f
	00 00		 cmp	 DWORD PTR [ecx+eax*4], 32767 ; 00007fffH
  00117	75 07		 jne	 SHORT $LN3@HuffmanTre
  00119	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0
$LN3@HuffmanTre:

; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)

  00120	40		 inc	 eax
  00121	3b c2		 cmp	 eax, edx
  00123	72 eb		 jb	 SHORT $LL4@HuffmanTre
$LN2@HuffmanTre:
  00125	5f		 pop	 edi
  00126	5e		 pop	 esi

; 586  :   }
; 587  : 
; 588  :   return 0;

  00127	33 c0		 xor	 eax, eax
  00129	5b		 pop	 ebx

; 589  : }

  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
$LN28@HuffmanTre:
  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi

; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/

  00130	b8 37 00 00 00	 mov	 eax, 55			; 00000037H
  00135	5b		 pop	 ebx

; 589  : }

  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
?HuffmanTree_make2DTree@@YAIPAUHuffmanTree@@@Z ENDP	; HuffmanTree_make2DTree
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?HuffmanTree_makeFromLengths2@@YAIPAUHuffmanTree@@@Z
_TEXT	SEGMENT
_nextcode$ = -24					; size = 12
$T1 = -12						; size = 4
_error$2$ = -8						; size = 4
_blcount$1$ = -4					; size = 4
?HuffmanTree_makeFromLengths2@@YAIPAUHuffmanTree@@@Z PROC ; HuffmanTree_makeFromLengths2, COMDAT
; _tree$ = ecx

; 597  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi

; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));

  0000a	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000d	57		 push	 edi

; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;

  0000e	33 f6		 xor	 esi, esi

; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));

  00010	c1 e0 02	 shl	 eax, 2

; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;

  00013	33 ff		 xor	 edi, edi

; 63   :   return malloc(size);

  00015	50		 push	 eax

; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;

  00016	89 7d fc	 mov	 DWORD PTR _blcount$1$[ebp], edi
  00019	89 75 e8	 mov	 DWORD PTR _nextcode$[ebp], esi

; 173  :   p->size = p->allocsize = 0;

  0001c	89 75 f0	 mov	 DWORD PTR _nextcode$[ebp+8], esi
  0001f	89 75 ec	 mov	 DWORD PTR _nextcode$[ebp+4], esi

; 63   :   return malloc(size);

  00022	e8 00 00 00 00	 call	 _malloc

; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))

  00027	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]

; 63   :   return malloc(size);

  0002a	83 c4 04	 add	 esp, 4

; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/

  0002d	85 c0		 test	 eax, eax
  0002f	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00032	b9 53 00 00 00	 mov	 ecx, 83			; 00000053H
  00037	8b c6		 mov	 eax, esi
  00039	0f 44 c1	 cmove	 eax, ecx

; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))

  0003c	42		 inc	 edx
  0003d	89 45 f8	 mov	 DWORD PTR _error$2$[ebp], eax

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)

  00040	8d 04 95 00 00
	00 00		 lea	 eax, DWORD PTR [edx*4]

; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))

  00047	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)

  0004a	85 c0		 test	 eax, eax
  0004c	74 1f		 je	 SHORT $LN63@HuffmanTre

; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;

  0004e	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);

  00055	50		 push	 eax
  00056	56		 push	 esi
  00057	e8 00 00 00 00	 call	 _realloc
  0005c	83 c4 08	 add	 esp, 8

; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)

  0005f	85 c0		 test	 eax, eax
  00061	74 2e		 je	 SHORT $LN14@HuffmanTre

; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;

  00063	8b 55 f4	 mov	 edx, DWORD PTR $T1[ebp]
  00066	8b f0		 mov	 esi, eax
  00068	89 75 fc	 mov	 DWORD PTR _blcount$1$[ebp], esi
  0006b	eb 02		 jmp	 SHORT $LN28@HuffmanTre
$LN63@HuffmanTre:
  0006d	33 f6		 xor	 esi, esi
$LN28@HuffmanTre:

; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;

  0006f	85 d2		 test	 edx, edx
  00071	74 08		 je	 SHORT $LN27@HuffmanTre
  00073	8b ca		 mov	 ecx, edx
  00075	33 c0		 xor	 eax, eax
  00077	8b fe		 mov	 edi, esi
  00079	f3 ab		 rep stosd
$LN27@HuffmanTre:

; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))

  0007b	51		 push	 ecx
  0007c	8d 4d e8	 lea	 ecx, DWORD PTR _nextcode$[ebp]
  0007f	e8 00 00 00 00	 call	 ?uivector_resizev@@YAIPAUuivector@@II@Z ; uivector_resizev
  00084	83 c4 04	 add	 esp, 4
  00087	85 c0		 test	 eax, eax
  00089	75 0f		 jne	 SHORT $LN15@HuffmanTre
  0008b	8b 75 e8	 mov	 esi, DWORD PTR _nextcode$[ebp]
  0008e	8b 7d fc	 mov	 edi, DWORD PTR _blcount$1$[ebp]
$LN14@HuffmanTre:

; 610  :     error = 83; /*alloc fail*/

  00091	c7 45 f8 53 00
	00 00		 mov	 DWORD PTR _error$2$[ebp], 83 ; 00000053H

; 611  : 
; 612  :   if(!error)

  00098	eb 7f		 jmp	 SHORT $LN4@HuffmanTre
$LN15@HuffmanTre:
  0009a	8b 45 f8	 mov	 eax, DWORD PTR _error$2$[ebp]
  0009d	85 c0		 test	 eax, eax
  0009f	75 72		 jne	 SHORT $LN61@HuffmanTre

; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;

  000a1	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  000a4	85 ff		 test	 edi, edi
  000a6	74 13		 je	 SHORT $LN10@HuffmanTre
  000a8	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000ab	8b d7		 mov	 edx, edi
  000ad	8d 49 00	 npad	 3
$LL12@HuffmanTre:
  000b0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b2	8d 49 04	 lea	 ecx, DWORD PTR [ecx+4]
  000b5	ff 04 86	 inc	 DWORD PTR [esi+eax*4]
  000b8	4a		 dec	 edx
  000b9	75 f5		 jne	 SHORT $LL12@HuffmanTre
$LN10@HuffmanTre:

; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)

  000bb	8b 75 e8	 mov	 esi, DWORD PTR _nextcode$[ebp]
  000be	ba 01 00 00 00	 mov	 edx, 1
  000c3	39 53 0c	 cmp	 DWORD PTR [ebx+12], edx
  000c6	72 1f		 jb	 SHORT $LN7@HuffmanTre
  000c8	8b 4d fc	 mov	 ecx, DWORD PTR _blcount$1$[ebp]
  000cb	8b fe		 mov	 edi, esi
  000cd	2b f9		 sub	 edi, ecx
  000cf	90		 npad	 1
$LL9@HuffmanTre:

; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;

  000d0	8b 04 0f	 mov	 eax, DWORD PTR [edi+ecx]
  000d3	03 01		 add	 eax, DWORD PTR [ecx]
  000d5	42		 inc	 edx
  000d6	03 c0		 add	 eax, eax
  000d8	89 44 96 fc	 mov	 DWORD PTR [esi+edx*4-4], eax
  000dc	8d 49 04	 lea	 ecx, DWORD PTR [ecx+4]
  000df	3b 53 0c	 cmp	 edx, DWORD PTR [ebx+12]
  000e2	76 ec		 jbe	 SHORT $LL9@HuffmanTre
  000e4	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
$LN7@HuffmanTre:

; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)

  000e7	33 d2		 xor	 edx, edx
  000e9	85 ff		 test	 edi, edi
  000eb	74 29		 je	 SHORT $LN62@HuffmanTre
  000ed	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
$LL6@HuffmanTre:

; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;

  000f0	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  000f3	85 c0		 test	 eax, eax
  000f5	74 12		 je	 SHORT $LN5@HuffmanTre
  000f7	8b 04 86	 mov	 eax, DWORD PTR [esi+eax*4]
  000fa	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000fd	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
  00100	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00103	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00106	ff 04 86	 inc	 DWORD PTR [esi+eax*4]
$LN5@HuffmanTre:

; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)

  00109	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0010c	42		 inc	 edx
  0010d	3b d7		 cmp	 edx, edi
  0010f	72 df		 jb	 SHORT $LL6@HuffmanTre
  00111	eb 03		 jmp	 SHORT $LN62@HuffmanTre
$LN61@HuffmanTre:
  00113	8b 75 e8	 mov	 esi, DWORD PTR _nextcode$[ebp]
$LN62@HuffmanTre:
  00116	8b 7d fc	 mov	 edi, DWORD PTR _blcount$1$[ebp]
$LN4@HuffmanTre:

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  00119	57		 push	 edi
  0011a	e8 00 00 00 00	 call	 _free
  0011f	56		 push	 esi
  00120	e8 00 00 00 00	 call	 _free

; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);

  00125	8b 45 f8	 mov	 eax, DWORD PTR _error$2$[ebp]

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  00128	83 c4 08	 add	 esp, 8

; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);

  0012b	85 c0		 test	 eax, eax
  0012d	75 07		 jne	 SHORT $LN1@HuffmanTre
  0012f	8b cb		 mov	 ecx, ebx
  00131	e8 00 00 00 00	 call	 ?HuffmanTree_make2DTree@@YAIPAUHuffmanTree@@@Z ; HuffmanTree_make2DTree
$LN1@HuffmanTre:
  00136	5f		 pop	 edi
  00137	5e		 pop	 esi
  00138	5b		 pop	 ebx

; 632  :   else return error;
; 633  : }

  00139	8b e5		 mov	 esp, ebp
  0013b	5d		 pop	 ebp
  0013c	c3		 ret	 0
?HuffmanTree_makeFromLengths2@@YAIPAUHuffmanTree@@@Z ENDP ; HuffmanTree_makeFromLengths2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?HuffmanTree_makeFromLengths@@YAIPAUHuffmanTree@@PBIII@Z
_TEXT	SEGMENT
tv909 = -28						; size = 4
tv910 = -24						; size = 4
_nextcode$1$ = -20					; size = 4
tv905 = -16						; size = 4
_tree$1$ = -12						; size = 4
$T1 = -8						; size = 4
_blcount$1$ = -4					; size = 4
_numcodes$ = 8						; size = 4
_maxbitlen$ = 12					; size = 4
?HuffmanTree_makeFromLengths@@YAIPAUHuffmanTree@@PBIII@Z PROC ; HuffmanTree_makeFromLengths, COMDAT
; _tree$ = ecx
; _bitlen$ = edx

; 642  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));

  00008	8b 75 08	 mov	 esi, DWORD PTR _numcodes$[ebp]
  0000b	57		 push	 edi
  0000c	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]

; 63   :   return malloc(size);

  00013	50		 push	 eax

; 642  : {

  00014	8b fa		 mov	 edi, edx
  00016	89 4d f4	 mov	 DWORD PTR _tree$1$[ebp], ecx

; 63   :   return malloc(size);

  00019	e8 00 00 00 00	 call	 _malloc

; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));

  0001e	8b 55 f4	 mov	 edx, DWORD PTR _tree$1$[ebp]

; 63   :   return malloc(size);

  00021	8b d8		 mov	 ebx, eax
  00023	83 c4 04	 add	 esp, 4
  00026	89 5d e8	 mov	 DWORD PTR tv910[ebp], ebx

; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));

  00029	89 5a 08	 mov	 DWORD PTR [edx+8], ebx

; 645  :   if(!tree->lengths) return 83; /*alloc fail*/

  0002c	85 db		 test	 ebx, ebx
  0002e	75 0a		 jne	 SHORT $LN4@HuffmanTre
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	8d 43 53	 lea	 eax, DWORD PTR [ebx+83]
  00035	5b		 pop	 ebx

; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN4@HuffmanTre:

; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];

  0003a	33 c9		 xor	 ecx, ecx
  0003c	85 f6		 test	 esi, esi
  0003e	74 0b		 je	 SHORT $LN1@HuffmanTre
$LL81@HuffmanTre:
  00040	8b 04 8f	 mov	 eax, DWORD PTR [edi+ecx*4]
  00043	89 04 8b	 mov	 DWORD PTR [ebx+ecx*4], eax
  00046	41		 inc	 ecx
  00047	3b ce		 cmp	 ecx, esi
  00049	72 f5		 jb	 SHORT $LL81@HuffmanTre
$LN1@HuffmanTre:

; 648  :   tree->maxbitlen = maxbitlen;

  0004b	8b 45 0c	 mov	 eax, DWORD PTR _maxbitlen$[ebp]
  0004e	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 63   :   return malloc(size);

  00051	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]

; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;

  00058	33 ff		 xor	 edi, edi

; 63   :   return malloc(size);

  0005a	50		 push	 eax

; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/

  0005b	89 72 10	 mov	 DWORD PTR [edx+16], esi

; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;

  0005e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _blcount$1$[ebp], 0
  00065	89 7d ec	 mov	 DWORD PTR _nextcode$1$[ebp], edi

; 63   :   return malloc(size);

  00068	e8 00 00 00 00	 call	 _malloc

; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));

  0006d	8b 4d f4	 mov	 ecx, DWORD PTR _tree$1$[ebp]

; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))

  00070	8b 55 0c	 mov	 edx, DWORD PTR _maxbitlen$[ebp]
  00073	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 63   :   return malloc(size);

  00076	83 c4 04	 add	 esp, 4

; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/

  00079	85 c0		 test	 eax, eax

; 63   :   return malloc(size);

  0007b	89 45 e4	 mov	 DWORD PTR tv909[ebp], eax

; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/

  0007e	b9 53 00 00 00	 mov	 ecx, 83			; 00000053H
  00083	8b c7		 mov	 eax, edi
  00085	0f 44 c1	 cmove	 eax, ecx

; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))

  00088	42		 inc	 edx
  00089	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)

  0008c	8d 04 95 00 00
	00 00		 lea	 eax, DWORD PTR [edx*4]

; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))

  00093	89 55 f0	 mov	 DWORD PTR tv905[ebp], edx

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)

  00096	85 c0		 test	 eax, eax
  00098	74 1f		 je	 SHORT $LN36@HuffmanTre

; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;

  0009a	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);

  000a1	50		 push	 eax
  000a2	57		 push	 edi
  000a3	e8 00 00 00 00	 call	 _realloc
  000a8	83 c4 08	 add	 esp, 8

; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)

  000ab	85 c0		 test	 eax, eax
  000ad	0f 84 de 00 00
	00		 je	 $LN22@HuffmanTre
  000b3	8b 55 f0	 mov	 edx, DWORD PTR tv905[ebp]

; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;

  000b6	89 45 fc	 mov	 DWORD PTR _blcount$1$[ebp], eax
$LN36@HuffmanTre:

; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;

  000b9	85 d2		 test	 edx, edx
  000bb	74 0b		 je	 SHORT $LN35@HuffmanTre
  000bd	8b 7d fc	 mov	 edi, DWORD PTR _blcount$1$[ebp]
  000c0	33 c0		 xor	 eax, eax
  000c2	8b ca		 mov	 ecx, edx
  000c4	f3 ab		 rep stosd
  000c6	33 ff		 xor	 edi, edi
$LN35@HuffmanTre:

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)

  000c8	8d 04 95 00 00
	00 00		 lea	 eax, DWORD PTR [edx*4]
  000cf	85 c0		 test	 eax, eax
  000d1	74 22		 je	 SHORT $LN50@HuffmanTre

; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;

  000d3	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);

  000da	50		 push	 eax
  000db	6a 00		 push	 0
  000dd	e8 00 00 00 00	 call	 _realloc
  000e2	83 c4 08	 add	 esp, 8

; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)

  000e5	85 c0		 test	 eax, eax
  000e7	0f 84 a4 00 00
	00		 je	 $LN22@HuffmanTre

; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;

  000ed	8b 55 f0	 mov	 edx, DWORD PTR tv905[ebp]
  000f0	8b f8		 mov	 edi, eax
  000f2	89 7d ec	 mov	 DWORD PTR _nextcode$1$[ebp], edi
$LN50@HuffmanTre:

; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;

  000f5	85 d2		 test	 edx, edx
  000f7	74 09		 je	 SHORT $LN23@HuffmanTre
  000f9	8b ca		 mov	 ecx, edx
  000fb	33 c0		 xor	 eax, eax
  000fd	f3 ab		 rep stosd
  000ff	8b 7d ec	 mov	 edi, DWORD PTR _nextcode$1$[ebp]
$LN23@HuffmanTre:

; 611  : 
; 612  :   if(!error)

  00102	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
  00105	85 c0		 test	 eax, eax
  00107	75 61		 jne	 SHORT $LN12@HuffmanTre
  00109	8b 55 fc	 mov	 edx, DWORD PTR _blcount$1$[ebp]

; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;

  0010c	33 c9		 xor	 ecx, ecx
  0010e	85 f6		 test	 esi, esi
  00110	74 0b		 je	 SHORT $LN18@HuffmanTre
$LL20@HuffmanTre:
  00112	8b 04 8b	 mov	 eax, DWORD PTR [ebx+ecx*4]
  00115	41		 inc	 ecx
  00116	ff 04 82	 inc	 DWORD PTR [edx+eax*4]
  00119	3b ce		 cmp	 ecx, esi
  0011b	72 f5		 jb	 SHORT $LL20@HuffmanTre
$LN18@HuffmanTre:

; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)

  0011d	b9 01 00 00 00	 mov	 ecx, 1
  00122	39 4d 0c	 cmp	 DWORD PTR _maxbitlen$[ebp], ecx
  00125	72 22		 jb	 SHORT $LN15@HuffmanTre
  00127	8b 5d 0c	 mov	 ebx, DWORD PTR _maxbitlen$[ebp]
  0012a	8b f7		 mov	 esi, edi
  0012c	2b 75 fc	 sub	 esi, DWORD PTR _blcount$1$[ebp]
  0012f	90		 npad	 1
$LL17@HuffmanTre:

; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;

  00130	8b 04 16	 mov	 eax, DWORD PTR [esi+edx]
  00133	03 02		 add	 eax, DWORD PTR [edx]
  00135	41		 inc	 ecx
  00136	03 c0		 add	 eax, eax
  00138	89 44 8f fc	 mov	 DWORD PTR [edi+ecx*4-4], eax
  0013c	8d 52 04	 lea	 edx, DWORD PTR [edx+4]
  0013f	3b cb		 cmp	 ecx, ebx
  00141	76 ed		 jbe	 SHORT $LL17@HuffmanTre
  00143	8b 75 08	 mov	 esi, DWORD PTR _numcodes$[ebp]
  00146	8b 5d e8	 mov	 ebx, DWORD PTR tv910[ebp]
$LN15@HuffmanTre:

; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)

  00149	33 c9		 xor	 ecx, ecx
  0014b	85 f6		 test	 esi, esi
  0014d	74 1b		 je	 SHORT $LN12@HuffmanTre
  0014f	8b 55 e4	 mov	 edx, DWORD PTR tv909[ebp]
$LL14@HuffmanTre:

; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;

  00152	8b 04 8b	 mov	 eax, DWORD PTR [ebx+ecx*4]
  00155	85 c0		 test	 eax, eax
  00157	74 0c		 je	 SHORT $LN13@HuffmanTre
  00159	8b 04 87	 mov	 eax, DWORD PTR [edi+eax*4]
  0015c	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
  0015f	8b 04 8b	 mov	 eax, DWORD PTR [ebx+ecx*4]
  00162	ff 04 87	 inc	 DWORD PTR [edi+eax*4]
$LN13@HuffmanTre:

; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)

  00165	41		 inc	 ecx
  00166	3b ce		 cmp	 ecx, esi
  00168	72 e8		 jb	 SHORT $LL14@HuffmanTre
$LN12@HuffmanTre:

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  0016a	ff 75 fc	 push	 DWORD PTR _blcount$1$[ebp]
  0016d	e8 00 00 00 00	 call	 _free
  00172	57		 push	 edi
  00173	e8 00 00 00 00	 call	 _free

; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);

  00178	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  0017b	83 c4 08	 add	 esp, 8

; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);

  0017e	85 c0		 test	 eax, eax
  00180	75 08		 jne	 SHORT $LN5@HuffmanTre
  00182	8b 4d f4	 mov	 ecx, DWORD PTR _tree$1$[ebp]
  00185	e8 00 00 00 00	 call	 ?HuffmanTree_make2DTree@@YAIPAUHuffmanTree@@@Z ; HuffmanTree_make2DTree
$LN5@HuffmanTre:
  0018a	5f		 pop	 edi
  0018b	5e		 pop	 esi
  0018c	5b		 pop	 ebx

; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }

  0018d	8b e5		 mov	 esp, ebp
  0018f	5d		 pop	 ebp
  00190	c3		 ret	 0
$LN22@HuffmanTre:

; 610  :     error = 83; /*alloc fail*/

  00191	c7 45 f8 53 00
	00 00		 mov	 DWORD PTR $T1[ebp], 83	; 00000053H

; 611  : 
; 612  :   if(!error)

  00198	eb d0		 jmp	 SHORT $LN12@HuffmanTre
?HuffmanTree_makeFromLengths@@YAIPAUHuffmanTree@@PBIII@Z ENDP ; HuffmanTree_makeFromLengths
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?generateFixedLitLenTree@@YAIPAUHuffmanTree@@@Z
_TEXT	SEGMENT
?generateFixedLitLenTree@@YAIPAUHuffmanTree@@@Z PROC	; generateFixedLitLenTree, COMDAT
; _tree$ = ecx

; 895  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 63   :   return malloc(size);

  00002	68 80 04 00 00	 push	 1152			; 00000480H

; 895  : {

  00007	8b d9		 mov	 ebx, ecx

; 63   :   return malloc(size);

  00009	e8 00 00 00 00	 call	 _malloc

; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));

  0000e	8b f0		 mov	 esi, eax

; 63   :   return malloc(size);

  00010	83 c4 04	 add	 esp, 4

; 898  :   if(!bitlen) return 83; /*alloc fail*/

  00013	85 f6		 test	 esi, esi
  00015	75 06		 jne	 SHORT $LN13@generateFi
  00017	8d 46 53	 lea	 eax, DWORD PTR [esi+83]
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx

; 910  : }

  0001c	c3		 ret	 0
$LN13@generateFi:
  0001d	57		 push	 edi

; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;

  0001e	b8 08 00 00 00	 mov	 eax, 8
  00023	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00028	8b fe		 mov	 edi, esi
  0002a	f3 ab		 rep stosd

; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;

  0002c	b8 09 00 00 00	 mov	 eax, 9
  00031	8d be 40 02 00
	00		 lea	 edi, DWORD PTR [esi+576]
  00037	b9 70 00 00 00	 mov	 ecx, 112		; 00000070H
  0003c	f3 ab		 rep stosd

; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;

  0003e	c7 86 00 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1024], 7
  00048	c7 86 04 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1028], 7
  00052	c7 86 08 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1032], 7
  0005c	c7 86 0c 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1036], 7
  00066	c7 86 10 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1040], 7
  00070	c7 86 14 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1044], 7
  0007a	c7 86 18 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1048], 7
  00084	c7 86 1c 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1052], 7
  0008e	c7 86 20 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1056], 7
  00098	c7 86 24 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1060], 7
  000a2	c7 86 28 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1064], 7
  000ac	c7 86 2c 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1068], 7
  000b6	c7 86 30 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1072], 7
  000c0	c7 86 34 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1076], 7
  000ca	c7 86 38 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1080], 7
  000d4	c7 86 3c 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1084], 7
  000de	c7 86 40 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1088], 7
  000e8	c7 86 44 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1092], 7
  000f2	c7 86 48 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1096], 7
  000fc	c7 86 4c 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1100], 7
  00106	c7 86 50 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1104], 7
  00110	c7 86 54 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1108], 7
  0011a	c7 86 58 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1112], 7
  00124	c7 86 5c 04 00
	00 07 00 00 00	 mov	 DWORD PTR [esi+1116], 7

; 63   :   return malloc(size);

  0012e	68 80 04 00 00	 push	 1152			; 00000480H

; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;

  00133	c7 86 60 04 00
	00 08 00 00 00	 mov	 DWORD PTR [esi+1120], 8
  0013d	c7 86 64 04 00
	00 08 00 00 00	 mov	 DWORD PTR [esi+1124], 8
  00147	c7 86 68 04 00
	00 08 00 00 00	 mov	 DWORD PTR [esi+1128], 8
  00151	c7 86 6c 04 00
	00 08 00 00 00	 mov	 DWORD PTR [esi+1132], 8
  0015b	c7 86 70 04 00
	00 08 00 00 00	 mov	 DWORD PTR [esi+1136], 8
  00165	c7 86 74 04 00
	00 08 00 00 00	 mov	 DWORD PTR [esi+1140], 8
  0016f	c7 86 78 04 00
	00 08 00 00 00	 mov	 DWORD PTR [esi+1144], 8
  00179	c7 86 7c 04 00
	00 08 00 00 00	 mov	 DWORD PTR [esi+1148], 8

; 63   :   return malloc(size);

  00183	e8 00 00 00 00	 call	 _malloc
  00188	8b d0		 mov	 edx, eax
  0018a	83 c4 04	 add	 esp, 4

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));

  0018d	89 53 08	 mov	 DWORD PTR [ebx+8], edx

; 645  :   if(!tree->lengths) return 83; /*alloc fail*/

  00190	85 d2		 test	 edx, edx
  00192	75 12		 jne	 SHORT $LN21@generateFi

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  00194	56		 push	 esi

; 645  :   if(!tree->lengths) return 83; /*alloc fail*/

  00195	8d 78 53	 lea	 edi, DWORD PTR [eax+83]

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  00198	e8 00 00 00 00	 call	 _free
  0019d	83 c4 04	 add	 esp, 4

; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;

  001a0	8b c7		 mov	 eax, edi
  001a2	5f		 pop	 edi
  001a3	5e		 pop	 esi
  001a4	5b		 pop	 ebx

; 910  : }

  001a5	c3		 ret	 0
$LN21@generateFi:

; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];

  001a6	33 c0		 xor	 eax, eax
  001a8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL38@generateFi:
  001b0	8b 0c 30	 mov	 ecx, DWORD PTR [eax+esi]
  001b3	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx
  001b6	83 c0 04	 add	 eax, 4
  001b9	3d 80 04 00 00	 cmp	 eax, 1152		; 00000480H
  001be	72 f0		 jb	 SHORT $LL38@generateFi

; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);

  001c0	8b cb		 mov	 ecx, ebx
  001c2	c7 43 10 20 01
	00 00		 mov	 DWORD PTR [ebx+16], 288	; 00000120H
  001c9	c7 43 0c 0f 00
	00 00		 mov	 DWORD PTR [ebx+12], 15	; 0000000fH
  001d0	e8 00 00 00 00	 call	 ?HuffmanTree_makeFromLengths2@@YAIPAUHuffmanTree@@@Z ; HuffmanTree_makeFromLengths2

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  001d5	56		 push	 esi

; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);

  001d6	8b f8		 mov	 edi, eax

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  001d8	e8 00 00 00 00	 call	 _free
  001dd	83 c4 04	 add	 esp, 4

; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;

  001e0	8b c7		 mov	 eax, edi
  001e2	5f		 pop	 edi
  001e3	5e		 pop	 esi
  001e4	5b		 pop	 ebx

; 910  : }

  001e5	c3		 ret	 0
?generateFixedLitLenTree@@YAIPAUHuffmanTree@@@Z ENDP	; generateFixedLitLenTree
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?generateFixedDistanceTree@@YAIPAUHuffmanTree@@@Z
_TEXT	SEGMENT
?generateFixedDistanceTree@@YAIPAUHuffmanTree@@@Z PROC	; generateFixedDistanceTree, COMDAT
; _tree$ = ecx

; 914  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 63   :   return malloc(size);

  00002	68 80 00 00 00	 push	 128			; 00000080H

; 914  : {

  00007	8b f9		 mov	 edi, ecx

; 63   :   return malloc(size);

  00009	e8 00 00 00 00	 call	 _malloc

; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));

  0000e	8b f0		 mov	 esi, eax

; 63   :   return malloc(size);

  00010	83 c4 04	 add	 esp, 4

; 917  :   if(!bitlen) return 83; /*alloc fail*/

  00013	85 f6		 test	 esi, esi
  00015	75 06		 jne	 SHORT $LN4@generateFi
  00017	5f		 pop	 edi
  00018	8d 46 53	 lea	 eax, DWORD PTR [esi+83]
  0001b	5e		 pop	 esi

; 925  : }

  0001c	c3		 ret	 0
$LN4@generateFi:

; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;

  0001d	c7 06 05 00 00
	00		 mov	 DWORD PTR [esi], 5
  00023	c7 46 04 05 00
	00 00		 mov	 DWORD PTR [esi+4], 5
  0002a	c7 46 08 05 00
	00 00		 mov	 DWORD PTR [esi+8], 5
  00031	c7 46 0c 05 00
	00 00		 mov	 DWORD PTR [esi+12], 5
  00038	c7 46 10 05 00
	00 00		 mov	 DWORD PTR [esi+16], 5
  0003f	c7 46 14 05 00
	00 00		 mov	 DWORD PTR [esi+20], 5
  00046	c7 46 18 05 00
	00 00		 mov	 DWORD PTR [esi+24], 5
  0004d	c7 46 1c 05 00
	00 00		 mov	 DWORD PTR [esi+28], 5
  00054	c7 46 20 05 00
	00 00		 mov	 DWORD PTR [esi+32], 5
  0005b	c7 46 24 05 00
	00 00		 mov	 DWORD PTR [esi+36], 5
  00062	c7 46 28 05 00
	00 00		 mov	 DWORD PTR [esi+40], 5
  00069	c7 46 2c 05 00
	00 00		 mov	 DWORD PTR [esi+44], 5
  00070	c7 46 30 05 00
	00 00		 mov	 DWORD PTR [esi+48], 5
  00077	c7 46 34 05 00
	00 00		 mov	 DWORD PTR [esi+52], 5
  0007e	c7 46 38 05 00
	00 00		 mov	 DWORD PTR [esi+56], 5
  00085	c7 46 3c 05 00
	00 00		 mov	 DWORD PTR [esi+60], 5
  0008c	c7 46 40 05 00
	00 00		 mov	 DWORD PTR [esi+64], 5
  00093	c7 46 44 05 00
	00 00		 mov	 DWORD PTR [esi+68], 5
  0009a	c7 46 48 05 00
	00 00		 mov	 DWORD PTR [esi+72], 5
  000a1	c7 46 4c 05 00
	00 00		 mov	 DWORD PTR [esi+76], 5
  000a8	c7 46 50 05 00
	00 00		 mov	 DWORD PTR [esi+80], 5
  000af	c7 46 54 05 00
	00 00		 mov	 DWORD PTR [esi+84], 5
  000b6	c7 46 58 05 00
	00 00		 mov	 DWORD PTR [esi+88], 5
  000bd	c7 46 5c 05 00
	00 00		 mov	 DWORD PTR [esi+92], 5
  000c4	c7 46 60 05 00
	00 00		 mov	 DWORD PTR [esi+96], 5
  000cb	c7 46 64 05 00
	00 00		 mov	 DWORD PTR [esi+100], 5
  000d2	c7 46 68 05 00
	00 00		 mov	 DWORD PTR [esi+104], 5
  000d9	c7 46 6c 05 00
	00 00		 mov	 DWORD PTR [esi+108], 5
  000e0	c7 46 70 05 00
	00 00		 mov	 DWORD PTR [esi+112], 5
  000e7	c7 46 74 05 00
	00 00		 mov	 DWORD PTR [esi+116], 5
  000ee	c7 46 78 05 00
	00 00		 mov	 DWORD PTR [esi+120], 5

; 63   :   return malloc(size);

  000f5	68 80 00 00 00	 push	 128			; 00000080H

; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;

  000fa	c7 46 7c 05 00
	00 00		 mov	 DWORD PTR [esi+124], 5

; 63   :   return malloc(size);

  00101	e8 00 00 00 00	 call	 _malloc
  00106	8b d0		 mov	 edx, eax
  00108	83 c4 04	 add	 esp, 4

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));

  0010b	89 57 08	 mov	 DWORD PTR [edi+8], edx

; 645  :   if(!tree->lengths) return 83; /*alloc fail*/

  0010e	85 d2		 test	 edx, edx
  00110	75 11		 jne	 SHORT $LN12@generateFi

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  00112	56		 push	 esi

; 645  :   if(!tree->lengths) return 83; /*alloc fail*/

  00113	8d 78 53	 lea	 edi, DWORD PTR [eax+83]

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  00116	e8 00 00 00 00	 call	 _free
  0011b	83 c4 04	 add	 esp, 4

; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;

  0011e	8b c7		 mov	 eax, edi
  00120	5f		 pop	 edi
  00121	5e		 pop	 esi

; 925  : }

  00122	c3		 ret	 0
$LN12@generateFi:

; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];

  00123	33 c9		 xor	 ecx, ecx
$LL23@generateFi:
  00125	8b 04 31	 mov	 eax, DWORD PTR [ecx+esi]
  00128	89 04 11	 mov	 DWORD PTR [ecx+edx], eax
  0012b	83 c1 04	 add	 ecx, 4
  0012e	81 f9 80 00 00
	00		 cmp	 ecx, 128		; 00000080H
  00134	72 ef		 jb	 SHORT $LL23@generateFi

; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);

  00136	8b cf		 mov	 ecx, edi
  00138	c7 47 10 20 00
	00 00		 mov	 DWORD PTR [edi+16], 32	; 00000020H
  0013f	c7 47 0c 0f 00
	00 00		 mov	 DWORD PTR [edi+12], 15	; 0000000fH
  00146	e8 00 00 00 00	 call	 ?HuffmanTree_makeFromLengths2@@YAIPAUHuffmanTree@@@Z ; HuffmanTree_makeFromLengths2

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  0014b	56		 push	 esi

; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);

  0014c	8b f8		 mov	 edi, eax

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  0014e	e8 00 00 00 00	 call	 _free
  00153	83 c4 04	 add	 esp, 4

; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;

  00156	8b c7		 mov	 eax, edi
  00158	5f		 pop	 edi
  00159	5e		 pop	 esi

; 925  : }

  0015a	c3		 ret	 0
?generateFixedDistanceTree@@YAIPAUHuffmanTree@@@Z ENDP	; generateFixedDistanceTree
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?huffmanDecodeSymbol@@YAIPBEPAIPBUHuffmanTree@@I@Z
_TEXT	SEGMENT
_bp$1$ = -8						; size = 4
_in$1$ = -4						; size = 4
_codetree$ = 8						; size = 4
tv160 = 12						; size = 4
_inbitlength$ = 12					; size = 4
?huffmanDecodeSymbol@@YAIPBEPAIPBUHuffmanTree@@I@Z PROC	; huffmanDecodeSymbol, COMDAT
; _in$ = ecx
; _bp$ = edx

; 935  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/

  00009	8b 7d 0c	 mov	 edi, DWORD PTR _inbitlength$[ebp]
  0000c	33 c0		 xor	 eax, eax
  0000e	89 55 f8	 mov	 DWORD PTR _bp$1$[ebp], edx
  00011	89 4d fc	 mov	 DWORD PTR _in$1$[ebp], ecx
  00014	39 3a		 cmp	 DWORD PTR [edx], edi
  00016	73 41		 jae	 SHORT $LN11@huffmanDec
  00018	8b 75 08	 mov	 esi, DWORD PTR _codetree$[ebp]
  0001b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001d	8b 76 10	 mov	 esi, DWORD PTR [esi+16]
  00020	89 4d 0c	 mov	 DWORD PTR tv160[ebp], ecx
$LL6@huffmanDec:

; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];

  00023	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00025	8b 55 fc	 mov	 edx, DWORD PTR _in$1$[ebp]
  00028	8b cb		 mov	 ecx, ebx
  0002a	c1 e9 03	 shr	 ecx, 3
  0002d	0f b6 14 11	 movzx	 edx, BYTE PTR [ecx+edx]
  00031	0f b6 cb	 movzx	 ecx, bl
  00034	83 e1 07	 and	 ecx, 7
  00037	d3 ea		 shr	 edx, cl
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR tv160[ebp]

; 945  :     (*bp)++;

  0003c	43		 inc	 ebx
  0003d	83 e2 01	 and	 edx, 1
  00040	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00043	8b 55 f8	 mov	 edx, DWORD PTR _bp$1$[ebp]
  00046	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00049	89 1a		 mov	 DWORD PTR [edx], ebx

; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/

  0004b	3b c6		 cmp	 eax, esi
  0004d	72 0d		 jb	 SHORT $LN5@huffmanDec

; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/

  0004f	2b c6		 sub	 eax, esi

; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/

  00051	3b c6		 cmp	 eax, esi
  00053	73 04		 jae	 SHORT $LN11@huffmanDec

; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/

  00055	3b df		 cmp	 ebx, edi
  00057	72 ca		 jb	 SHORT $LL6@huffmanDec
$LN11@huffmanDec:
  00059	83 c8 ff	 or	 eax, -1
$LN5@huffmanDec:
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx

; 950  :   }
; 951  : }

  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
?huffmanDecodeSymbol@@YAIPBEPAIPBUHuffmanTree@@I@Z ENDP	; huffmanDecodeSymbol
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?getTreeInflateFixed@@YAXPAUHuffmanTree@@0@Z
_TEXT	SEGMENT
?getTreeInflateFixed@@YAXPAUHuffmanTree@@0@Z PROC	; getTreeInflateFixed, COMDAT
; _tree_ll$ = ecx
; _tree_d$ = edx

; 962  : {

  00000	56		 push	 esi
  00001	8b f2		 mov	 esi, edx

; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);

  00003	e8 00 00 00 00	 call	 ?generateFixedLitLenTree@@YAIPAUHuffmanTree@@@Z ; generateFixedLitLenTree

; 965  :   generateFixedDistanceTree(tree_d);

  00008	8b ce		 mov	 ecx, esi
  0000a	5e		 pop	 esi
  0000b	e9 00 00 00 00	 jmp	 ?generateFixedDistanceTree@@YAIPAUHuffmanTree@@@Z ; generateFixedDistanceTree
?getTreeInflateFixed@@YAXPAUHuffmanTree@@0@Z ENDP	; getTreeInflateFixed
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?getTreeInflateDynamic@@YAIPAUHuffmanTree@@0PBEPAII@Z
_TEXT	SEGMENT
_tree_cl$ = -56						; size = 20
_tree_d$1$ = -36					; size = 4
_tree_ll$1$ = -32					; size = 4
_replength$1$ = -28					; size = 4
_HDIST$1$ = -28						; size = 4
_bitlen_cl$1$ = -24					; size = 4
tv875 = -20						; size = 4
_HLIT$1$ = -16						; size = 4
_inbitlength$1$ = -12					; size = 4
_bitlen_d$1$ = -8					; size = 4
_error$1$ = -4						; size = 4
_in$ = 8						; size = 4
_bp$ = 12						; size = 4
_HCLEN$1$ = 16						; size = 4
_bitlen_ll$1$ = 16					; size = 4
_inlength$ = 16						; size = 4
?getTreeInflateDynamic@@YAIPAUHuffmanTree@@0PBEPAII@Z PROC ; getTreeInflateDynamic, COMDAT
; _tree_ll$ = ecx
; _tree_d$ = edx

; 971  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H

; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;

  00006	8b 45 10	 mov	 eax, DWORD PTR _inlength$[ebp]
  00009	56		 push	 esi

; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/

  0000a	8b 75 0c	 mov	 esi, DWORD PTR _bp$[ebp]
  0000d	89 4d e0	 mov	 DWORD PTR _tree_ll$1$[ebp], ecx
  00010	8b 36		 mov	 esi, DWORD PTR [esi]
  00012	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00019	57		 push	 edi
  0001a	33 ff		 xor	 edi, edi
  0001c	c1 ee 03	 shr	 esi, 3
  0001f	83 c0 fe	 add	 eax, -2			; fffffffeH
  00022	89 55 dc	 mov	 DWORD PTR _tree_d$1$[ebp], edx
  00025	89 4d f4	 mov	 DWORD PTR _inbitlength$1$[ebp], ecx
  00028	89 7d f8	 mov	 DWORD PTR _bitlen_d$1$[ebp], edi
  0002b	3b f0		 cmp	 esi, eax
  0002d	72 09		 jb	 SHORT $LN59@getTreeInf
  0002f	8d 47 31	 lea	 eax, DWORD PTR [edi+49]
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi

; 1114 : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
$LN59@getTreeInf:

; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;

  00038	8b 75 0c	 mov	 esi, DWORD PTR _bp$[ebp]
  0003b	8b 55 08	 mov	 edx, DWORD PTR _in$[ebp]
  0003e	53		 push	 ebx
  0003f	6a 05		 push	 5
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?readBitsFromStream@@YAIPAIPBEI@Z ; readBitsFromStream

; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;

  00048	8b 55 08	 mov	 edx, DWORD PTR _in$[ebp]
  0004b	8d 98 01 01 00
	00		 lea	 ebx, DWORD PTR [eax+257]
  00051	6a 05		 push	 5
  00053	8b ce		 mov	 ecx, esi
  00055	89 5d f0	 mov	 DWORD PTR _HLIT$1$[ebp], ebx
  00058	e8 00 00 00 00	 call	 ?readBitsFromStream@@YAIPAIPBEI@Z ; readBitsFromStream

; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;

  0005d	8b 55 08	 mov	 edx, DWORD PTR _in$[ebp]
  00060	40		 inc	 eax
  00061	6a 04		 push	 4
  00063	8b ce		 mov	 ecx, esi
  00065	89 45 e4	 mov	 DWORD PTR _HDIST$1$[ebp], eax
  00068	e8 00 00 00 00	 call	 ?readBitsFromStream@@YAIPAIPBEI@Z ; readBitsFromStream
  0006d	83 c0 04	 add	 eax, 4

; 63   :   return malloc(size);

  00070	6a 4c		 push	 76			; 0000004cH

; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;

  00072	89 45 10	 mov	 DWORD PTR _HCLEN$1$[ebp], eax

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;

  00075	89 7d c8	 mov	 DWORD PTR _tree_cl$[ebp], edi

; 520  :   tree->tree1d = 0;

  00078	89 7d cc	 mov	 DWORD PTR _tree_cl$[ebp+4], edi

; 521  :   tree->lengths = 0;

  0007b	89 7d d0	 mov	 DWORD PTR _tree_cl$[ebp+8], edi

; 63   :   return malloc(size);

  0007e	e8 00 00 00 00	 call	 _malloc

; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));

  00083	8b f0		 mov	 esi, eax

; 63   :   return malloc(size);

  00085	83 c4 10	 add	 esp, 16			; 00000010H

; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));

  00088	89 75 e8	 mov	 DWORD PTR _bitlen_cl$1$[ebp], esi

; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);

  0008b	85 f6		 test	 esi, esi
  0008d	75 08		 jne	 SHORT $LN56@getTreeInf
  0008f	8d 70 53	 lea	 esi, DWORD PTR [eax+83]
  00092	e9 53 03 00 00	 jmp	 $LN112@getTreeInf
$LN56@getTreeInf:
  00097	8b 5d 10	 mov	 ebx, DWORD PTR _HCLEN$1$[ebp]
  0009a	8b 7d 0c	 mov	 edi, DWORD PTR _bp$[ebp]

; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)

  0009d	33 f6		 xor	 esi, esi
  0009f	90		 npad	 1
$LL55@getTreeInf:

; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);

  000a0	3b f3		 cmp	 esi, ebx
  000a2	73 20		 jae	 SHORT $LN52@getTreeInf
  000a4	8b 55 08	 mov	 edx, DWORD PTR _in$[ebp]
  000a7	6a 03		 push	 3
  000a9	8b cf		 mov	 ecx, edi
  000ab	e8 00 00 00 00	 call	 ?readBitsFromStream@@YAIPAIPBEI@Z ; readBitsFromStream
  000b0	8b 0c b5 00 00
	00 00		 mov	 ecx, DWORD PTR _CLCL_ORDER[esi*4]
  000b7	8b 55 e8	 mov	 edx, DWORD PTR _bitlen_cl$1$[ebp]
  000ba	83 c4 04	 add	 esp, 4
  000bd	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
  000c0	8b ca		 mov	 ecx, edx
  000c2	eb 11		 jmp	 SHORT $LN54@getTreeInf
$LN52@getTreeInf:

; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/

  000c4	8b 04 b5 00 00
	00 00		 mov	 eax, DWORD PTR _CLCL_ORDER[esi*4]
  000cb	8b 4d e8	 mov	 ecx, DWORD PTR _bitlen_cl$1$[ebp]
  000ce	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0
$LN54@getTreeInf:

; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)

  000d5	46		 inc	 esi
  000d6	83 fe 13	 cmp	 esi, 19			; 00000013H
  000d9	72 c5		 jb	 SHORT $LL55@getTreeInf

; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);

  000db	6a 07		 push	 7
  000dd	8b d1		 mov	 edx, ecx
  000df	6a 13		 push	 19			; 00000013H
  000e1	8d 4d c8	 lea	 ecx, DWORD PTR _tree_cl$[ebp]
  000e4	e8 00 00 00 00	 call	 ?HuffmanTree_makeFromLengths@@YAIPAUHuffmanTree@@PBIII@Z ; HuffmanTree_makeFromLengths

; 1009 :     if(error) break;

  000e9	8b 5d f0	 mov	 ebx, DWORD PTR _HLIT$1$[ebp]
  000ec	8b f0		 mov	 esi, eax
  000ee	83 c4 08	 add	 esp, 8
  000f1	89 75 fc	 mov	 DWORD PTR _error$1$[ebp], esi
  000f4	bf 00 00 00 00	 mov	 edi, 0
  000f9	85 f6		 test	 esi, esi
  000fb	0f 85 e9 02 00
	00		 jne	 $LN112@getTreeInf

; 63   :   return malloc(size);

  00101	68 80 04 00 00	 push	 1152			; 00000480H
  00106	e8 00 00 00 00	 call	 _malloc
  0010b	68 80 00 00 00	 push	 128			; 00000080H

; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));

  00110	89 45 10	 mov	 DWORD PTR _bitlen_ll$1$[ebp], eax

; 63   :   return malloc(size);

  00113	e8 00 00 00 00	 call	 _malloc

; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);

  00118	8b 55 10	 mov	 edx, DWORD PTR _bitlen_ll$1$[ebp]

; 63   :   return malloc(size);

  0011b	83 c4 08	 add	 esp, 8

; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));

  0011e	89 45 f8	 mov	 DWORD PTR _bitlen_d$1$[ebp], eax

; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);

  00121	85 d2		 test	 edx, edx
  00123	0f 84 b4 02 00
	00		 je	 $LN48@getTreeInf
  00129	85 c0		 test	 eax, eax
  0012b	0f 84 ac 02 00
	00		 je	 $LN48@getTreeInf

; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;

  00131	33 c0		 xor	 eax, eax
  00133	b9 20 01 00 00	 mov	 ecx, 288		; 00000120H
  00138	8b fa		 mov	 edi, edx
  0013a	f3 ab		 rep stosd

; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;

  0013c	8b 7d f8	 mov	 edi, DWORD PTR _bitlen_d$1$[ebp]

; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;

  0013f	33 f6		 xor	 esi, esi
  00141	89 07		 mov	 DWORD PTR [edi], eax
  00143	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00146	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00149	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  0014c	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0014f	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00152	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00155	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  00158	89 47 20	 mov	 DWORD PTR [edi+32], eax
  0015b	89 47 24	 mov	 DWORD PTR [edi+36], eax
  0015e	89 47 28	 mov	 DWORD PTR [edi+40], eax
  00161	89 47 2c	 mov	 DWORD PTR [edi+44], eax
  00164	89 47 30	 mov	 DWORD PTR [edi+48], eax
  00167	89 47 34	 mov	 DWORD PTR [edi+52], eax
  0016a	89 47 38	 mov	 DWORD PTR [edi+56], eax
  0016d	89 47 3c	 mov	 DWORD PTR [edi+60], eax
  00170	89 47 40	 mov	 DWORD PTR [edi+64], eax
  00173	89 47 44	 mov	 DWORD PTR [edi+68], eax
  00176	89 47 48	 mov	 DWORD PTR [edi+72], eax
  00179	89 47 4c	 mov	 DWORD PTR [edi+76], eax
  0017c	89 47 50	 mov	 DWORD PTR [edi+80], eax
  0017f	89 47 54	 mov	 DWORD PTR [edi+84], eax
  00182	89 47 58	 mov	 DWORD PTR [edi+88], eax
  00185	89 47 5c	 mov	 DWORD PTR [edi+92], eax
  00188	89 47 60	 mov	 DWORD PTR [edi+96], eax
  0018b	89 47 64	 mov	 DWORD PTR [edi+100], eax
  0018e	89 47 68	 mov	 DWORD PTR [edi+104], eax
  00191	89 47 6c	 mov	 DWORD PTR [edi+108], eax
  00194	89 47 70	 mov	 DWORD PTR [edi+112], eax
  00197	89 47 74	 mov	 DWORD PTR [edi+116], eax
  0019a	89 47 78	 mov	 DWORD PTR [edi+120], eax
  0019d	89 47 7c	 mov	 DWORD PTR [edi+124], eax

; 1020 :     while(i < HLIT + HDIST)

  001a0	8b 45 e4	 mov	 eax, DWORD PTR _HDIST$1$[ebp]
  001a3	03 c3		 add	 eax, ebx
  001a5	89 45 ec	 mov	 DWORD PTR tv875[ebp], eax
  001a8	0f 84 e5 01 00
	00		 je	 $LN111@getTreeInf
  001ae	8b fa		 mov	 edi, edx
$LL41@getTreeInf:

; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);

  001b0	ff 75 f4	 push	 DWORD PTR _inbitlength$1$[ebp]
  001b3	8b 55 0c	 mov	 edx, DWORD PTR _bp$[ebp]
  001b6	8b 4d 08	 mov	 ecx, DWORD PTR _in$[ebp]
  001b9	8d 45 c8	 lea	 eax, DWORD PTR _tree_cl$[ebp]
  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 ?huffmanDecodeSymbol@@YAIPBEPAIPBUHuffmanTree@@I@Z ; huffmanDecodeSymbol
  001c2	8b c8		 mov	 ecx, eax
  001c4	83 c4 08	 add	 esp, 8

; 1023 :       if(code <= 15) /*a length code*/

  001c7	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  001ca	77 1d		 ja	 SHORT $LN39@getTreeInf

; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;

  001cc	3b f3		 cmp	 esi, ebx
  001ce	73 09		 jae	 SHORT $LN38@getTreeInf
  001d0	89 0c b7	 mov	 DWORD PTR [edi+esi*4], ecx

; 1027 :         i++;

  001d3	46		 inc	 esi
  001d4	e9 94 00 00 00	 jmp	 $LN118@getTreeInf
$LN38@getTreeInf:

; 1026 :         else bitlen_d[i - HLIT] = code;

  001d9	8b 55 f8	 mov	 edx, DWORD PTR _bitlen_d$1$[ebp]
  001dc	8b c6		 mov	 eax, esi
  001de	2b c3		 sub	 eax, ebx

; 1027 :         i++;

  001e0	46		 inc	 esi
  001e1	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx
  001e4	e9 84 00 00 00	 jmp	 $LN118@getTreeInf
$LN39@getTreeInf:

; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/

  001e9	83 f9 10	 cmp	 ecx, 16			; 00000010H
  001ec	0f 85 99 00 00
	00		 jne	 $LN35@getTreeInf

; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/

  001f2	8b 45 0c	 mov	 eax, DWORD PTR _bp$[ebp]
  001f5	8b 4d f4	 mov	 ecx, DWORD PTR _inbitlength$1$[ebp]
  001f8	39 08		 cmp	 DWORD PTR [eax], ecx
  001fa	0f 83 6d 01 00
	00		 jae	 $LN94@getTreeInf

; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/

  00200	85 f6		 test	 esi, esi
  00202	0f 84 5b 01 00
	00		 je	 $LN95@getTreeInf

; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);

  00208	8b 55 08	 mov	 edx, DWORD PTR _in$[ebp]
  0020b	6a 02		 push	 2
  0020d	8b c8		 mov	 ecx, eax
  0020f	e8 00 00 00 00	 call	 ?readBitsFromStream@@YAIPAIPBEI@Z ; readBitsFromStream

; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];

  00214	8b 7d 10	 mov	 edi, DWORD PTR _bitlen_ll$1$[ebp]
  00217	83 c0 03	 add	 eax, 3
  0021a	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0021d	83 c4 04	 add	 esp, 4
  00220	89 45 e4	 mov	 DWORD PTR _replength$1$[ebp], eax
  00223	3b f1		 cmp	 esi, ecx
  00225	73 06		 jae	 SHORT $LN32@getTreeInf
  00227	8b 54 b7 fc	 mov	 edx, DWORD PTR [edi+esi*4-4]
  0022b	eb 0e		 jmp	 SHORT $LN31@getTreeInf
$LN32@getTreeInf:

; 1040 :         else value = bitlen_d[i - HLIT - 1];

  0022d	8b 4d f8	 mov	 ecx, DWORD PTR _bitlen_d$1$[ebp]
  00230	8b c6		 mov	 eax, esi
  00232	2b c3		 sub	 eax, ebx
  00234	8b 54 81 fc	 mov	 edx, DWORD PTR [ecx+eax*4-4]
  00238	8b 45 e4	 mov	 eax, DWORD PTR _replength$1$[ebp]
$LN31@getTreeInf:

; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)

  0023b	33 c9		 xor	 ecx, ecx
  0023d	85 c0		 test	 eax, eax
  0023f	74 29		 je	 SHORT $LN115@getTreeInf
  00241	8b c6		 mov	 eax, esi
  00243	2b c3		 sub	 eax, ebx
  00245	8b 5d f8	 mov	 ebx, DWORD PTR _bitlen_d$1$[ebp]
  00248	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0024b	8b 5d f0	 mov	 ebx, DWORD PTR _HLIT$1$[ebp]
  0024e	8b ff		 npad	 2
$LL30@getTreeInf:

; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/

  00250	3b 75 ec	 cmp	 esi, DWORD PTR tv875[ebp]
  00253	73 29		 jae	 SHORT $LN91@getTreeInf

; 1045 :           if(i < HLIT) bitlen_ll[i] = value;

  00255	3b f3		 cmp	 esi, ebx
  00257	73 05		 jae	 SHORT $LN26@getTreeInf
  00259	89 14 b7	 mov	 DWORD PTR [edi+esi*4], edx
  0025c	eb 02		 jmp	 SHORT $LN25@getTreeInf
$LN26@getTreeInf:

; 1046 :           else bitlen_d[i - HLIT] = value;

  0025e	89 10		 mov	 DWORD PTR [eax], edx
$LN25@getTreeInf:

; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)

  00260	41		 inc	 ecx

; 1047 :           i++;

  00261	46		 inc	 esi
  00262	83 c0 04	 add	 eax, 4
  00265	3b 4d e4	 cmp	 ecx, DWORD PTR _replength$1$[ebp]
  00268	72 e6		 jb	 SHORT $LL30@getTreeInf
$LN115@getTreeInf:
  0026a	8b 7d 10	 mov	 edi, DWORD PTR _bitlen_ll$1$[ebp]
$LN118@getTreeInf:
  0026d	8b 45 fc	 mov	 eax, DWORD PTR _error$1$[ebp]
$LN10@getTreeInf:

; 1020 :     while(i < HLIT + HDIST)

  00270	3b 75 ec	 cmp	 esi, DWORD PTR tv875[ebp]
  00273	0f 82 37 ff ff
	ff		 jb	 $LL41@getTreeInf
  00279	e9 0b 01 00 00	 jmp	 $LN4@getTreeInf
$LN91@getTreeInf:

; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/

  0027e	8b 7d 10	 mov	 edi, DWORD PTR _bitlen_ll$1$[ebp]
  00281	b8 0d 00 00 00	 mov	 eax, 13			; 0000000dH
  00286	89 45 fc	 mov	 DWORD PTR _error$1$[ebp], eax
  00289	eb e5		 jmp	 SHORT $LN10@getTreeInf
$LN35@getTreeInf:
  0028b	83 f9 11	 cmp	 ecx, 17			; 00000011H
  0028e	75 64		 jne	 SHORT $LN23@getTreeInf

; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/

  00290	8b 45 0c	 mov	 eax, DWORD PTR _bp$[ebp]
  00293	8b 4d f4	 mov	 ecx, DWORD PTR _inbitlength$1$[ebp]
  00296	39 08		 cmp	 DWORD PTR [eax], ecx
  00298	0f 83 cf 00 00
	00		 jae	 $LN94@getTreeInf

; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);

  0029e	8b 55 08	 mov	 edx, DWORD PTR _in$[ebp]
  002a1	6a 03		 push	 3
  002a3	8b c8		 mov	 ecx, eax
  002a5	e8 00 00 00 00	 call	 ?readBitsFromStream@@YAIPAIPBEI@Z ; readBitsFromStream
  002aa	83 c4 04	 add	 esp, 4

; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)

  002ad	ba 00 00 00 00	 mov	 edx, 0
  002b2	83 c0 03	 add	 eax, 3
  002b5	74 b6		 je	 SHORT $LN118@getTreeInf

; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);

  002b7	8b ce		 mov	 ecx, esi
  002b9	2b cb		 sub	 ecx, ebx
  002bb	8b 5d f8	 mov	 ebx, DWORD PTR _bitlen_d$1$[ebp]
  002be	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]
  002c1	8b 5d f0	 mov	 ebx, DWORD PTR _HLIT$1$[ebp]
$LL21@getTreeInf:

; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/

  002c4	3b 75 ec	 cmp	 esi, DWORD PTR tv875[ebp]
  002c7	73 1e		 jae	 SHORT $LN92@getTreeInf

; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;

  002c9	3b f3		 cmp	 esi, ebx
  002cb	73 09		 jae	 SHORT $LN17@getTreeInf
  002cd	c7 04 b7 00 00
	00 00		 mov	 DWORD PTR [edi+esi*4], 0
  002d4	eb 06		 jmp	 SHORT $LN16@getTreeInf
$LN17@getTreeInf:

; 1063 :           else bitlen_d[i - HLIT] = 0;

  002d6	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN16@getTreeInf:

; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)

  002dc	42		 inc	 edx

; 1064 :           i++;

  002dd	46		 inc	 esi
  002de	83 c1 04	 add	 ecx, 4
  002e1	3b d0		 cmp	 edx, eax
  002e3	72 df		 jb	 SHORT $LL21@getTreeInf

; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/

  002e5	eb 86		 jmp	 SHORT $LN118@getTreeInf
$LN92@getTreeInf:

; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/

  002e7	b8 0e 00 00 00	 mov	 eax, 14			; 0000000eH
  002ec	89 45 fc	 mov	 DWORD PTR _error$1$[ebp], eax

; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/

  002ef	e9 7c ff ff ff	 jmp	 $LN10@getTreeInf
$LN23@getTreeInf:
  002f4	83 f9 12	 cmp	 ecx, 18			; 00000012H
  002f7	75 7b		 jne	 SHORT $LN14@getTreeInf

; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/

  002f9	8b 45 0c	 mov	 eax, DWORD PTR _bp$[ebp]
  002fc	8b 4d f4	 mov	 ecx, DWORD PTR _inbitlength$1$[ebp]
  002ff	39 08		 cmp	 DWORD PTR [eax], ecx
  00301	73 6a		 jae	 SHORT $LN94@getTreeInf

; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);

  00303	8b 55 08	 mov	 edx, DWORD PTR _in$[ebp]
  00306	6a 07		 push	 7
  00308	8b c8		 mov	 ecx, eax
  0030a	e8 00 00 00 00	 call	 ?readBitsFromStream@@YAIPAIPBEI@Z ; readBitsFromStream
  0030f	83 c4 04	 add	 esp, 4

; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)

  00312	ba 00 00 00 00	 mov	 edx, 0
  00317	83 c0 0b	 add	 eax, 11			; 0000000bH
  0031a	0f 84 4d ff ff
	ff		 je	 $LN118@getTreeInf

; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);

  00320	8b ce		 mov	 ecx, esi
  00322	2b cb		 sub	 ecx, ebx
  00324	8b 5d f8	 mov	 ebx, DWORD PTR _bitlen_d$1$[ebp]
  00327	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]
  0032a	8b 5d f0	 mov	 ebx, DWORD PTR _HLIT$1$[ebp]
  0032d	8d 49 00	 npad	 3
$LL12@getTreeInf:

; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/

  00330	3b 75 ec	 cmp	 esi, DWORD PTR tv875[ebp]
  00333	73 21		 jae	 SHORT $LN93@getTreeInf

; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;

  00335	3b f3		 cmp	 esi, ebx
  00337	73 09		 jae	 SHORT $LN8@getTreeInf
  00339	c7 04 b7 00 00
	00 00		 mov	 DWORD PTR [edi+esi*4], 0
  00340	eb 06		 jmp	 SHORT $LN7@getTreeInf
$LN8@getTreeInf:

; 1080 :           else bitlen_d[i - HLIT] = 0;

  00342	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN7@getTreeInf:

; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)

  00348	42		 inc	 edx

; 1081 :           i++;

  00349	46		 inc	 esi
  0034a	83 c1 04	 add	 ecx, 4
  0034d	3b d0		 cmp	 edx, eax
  0034f	72 df		 jb	 SHORT $LL12@getTreeInf

; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/

  00351	e9 17 ff ff ff	 jmp	 $LN118@getTreeInf
$LN93@getTreeInf:

; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/

  00356	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  0035b	89 45 fc	 mov	 DWORD PTR _error$1$[ebp], eax
  0035e	e9 0d ff ff ff	 jmp	 $LN10@getTreeInf
$LN95@getTreeInf:

; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/

  00363	be 36 00 00 00	 mov	 esi, 54			; 00000036H
  00368	e9 7d 00 00 00	 jmp	 $LN112@getTreeInf
$LN94@getTreeInf:

; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/

  0036d	be 32 00 00 00	 mov	 esi, 50			; 00000032H
  00372	eb 76		 jmp	 SHORT $LN112@getTreeInf
$LN14@getTreeInf:

; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))

  00374	83 f9 ff	 cmp	 ecx, -1
  00377	75 2d		 jne	 SHORT $LN5@getTreeInf

; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;

  00379	8b 45 0c	 mov	 eax, DWORD PTR _bp$[ebp]
  0037c	8b 4d f4	 mov	 ecx, DWORD PTR _inbitlength$1$[ebp]
  0037f	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00381	1b c0		 sbb	 eax, eax
  00383	83 c0 0b	 add	 eax, 11			; 0000000bH
  00386	89 45 fc	 mov	 DWORD PTR _error$1$[ebp], eax
$LN4@getTreeInf:

; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;

  00389	85 c0		 test	 eax, eax
  0038b	75 5a		 jne	 SHORT $LN116@getTreeInf
  0038d	8b 55 10	 mov	 edx, DWORD PTR _bitlen_ll$1$[ebp]
  00390	8b 7d f8	 mov	 edi, DWORD PTR _bitlen_d$1$[ebp]
$LN111@getTreeInf:

; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/

  00393	83 ba 00 04 00
	00 00		 cmp	 DWORD PTR [edx+1024], 0
  0039a	75 11		 jne	 SHORT $LN2@getTreeInf
  0039c	be 40 00 00 00	 mov	 esi, 64			; 00000040H
$LN114@getTreeInf:
  003a1	8b 7d 10	 mov	 edi, DWORD PTR _bitlen_ll$1$[ebp]
  003a4	eb 44		 jmp	 SHORT $LN112@getTreeInf
$LN5@getTreeInf:

; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/

  003a6	be 10 00 00 00	 mov	 esi, 16			; 00000010H

; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;

  003ab	eb 3d		 jmp	 SHORT $LN112@getTreeInf
$LN2@getTreeInf:

; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);

  003ad	8b 4d e0	 mov	 ecx, DWORD PTR _tree_ll$1$[ebp]
  003b0	6a 0f		 push	 15			; 0000000fH
  003b2	68 20 01 00 00	 push	 288			; 00000120H
  003b7	e8 00 00 00 00	 call	 ?HuffmanTree_makeFromLengths@@YAIPAUHuffmanTree@@PBIII@Z ; HuffmanTree_makeFromLengths
  003bc	8b f0		 mov	 esi, eax
  003be	83 c4 08	 add	 esp, 8

; 1102 :     if(error) break;

  003c1	85 f6		 test	 esi, esi
  003c3	75 dc		 jne	 SHORT $LN114@getTreeInf

; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);

  003c5	8b 4d dc	 mov	 ecx, DWORD PTR _tree_d$1$[ebp]
  003c8	6a 0f		 push	 15			; 0000000fH
  003ca	6a 20		 push	 32			; 00000020H
  003cc	8b d7		 mov	 edx, edi
  003ce	e8 00 00 00 00	 call	 ?HuffmanTree_makeFromLengths@@YAIPAUHuffmanTree@@PBIII@Z ; HuffmanTree_makeFromLengths

; 1104 : 
; 1105 :     break; /*end of error-while*/

  003d3	8b 7d 10	 mov	 edi, DWORD PTR _bitlen_ll$1$[ebp]
  003d6	83 c4 08	 add	 esp, 8
  003d9	8b f0		 mov	 esi, eax
  003db	eb 0d		 jmp	 SHORT $LN112@getTreeInf
$LN48@getTreeInf:
  003dd	8b 7d 10	 mov	 edi, DWORD PTR _bitlen_ll$1$[ebp]

; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);

  003e0	be 53 00 00 00	 mov	 esi, 83			; 00000053H
  003e5	eb 03		 jmp	 SHORT $LN112@getTreeInf
$LN116@getTreeInf:
  003e7	8b 75 fc	 mov	 esi, DWORD PTR _error$1$[ebp]
$LN112@getTreeInf:

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  003ea	8b 55 e8	 mov	 edx, DWORD PTR _bitlen_cl$1$[ebp]
  003ed	52		 push	 edx
  003ee	e8 00 00 00 00	 call	 _free
  003f3	57		 push	 edi
  003f4	e8 00 00 00 00	 call	 _free
  003f9	ff 75 f8	 push	 DWORD PTR _bitlen_d$1$[ebp]
  003fc	e8 00 00 00 00	 call	 _free
  00401	ff 75 c8	 push	 DWORD PTR _tree_cl$[ebp]
  00404	e8 00 00 00 00	 call	 _free
  00409	ff 75 cc	 push	 DWORD PTR _tree_cl$[ebp+4]
  0040c	e8 00 00 00 00	 call	 _free
  00411	ff 75 d0	 push	 DWORD PTR _tree_cl$[ebp+8]
  00414	e8 00 00 00 00	 call	 _free
  00419	83 c4 18	 add	 esp, 24			; 00000018H

; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;

  0041c	8b c6		 mov	 eax, esi
  0041e	5b		 pop	 ebx
  0041f	5f		 pop	 edi
  00420	5e		 pop	 esi

; 1114 : }

  00421	8b e5		 mov	 esp, ebp
  00423	5d		 pop	 ebp
  00424	c3		 ret	 0
?getTreeInflateDynamic@@YAIPAUHuffmanTree@@0PBEPAII@Z ENDP ; getTreeInflateDynamic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?inflateHuffmanBlock@@YAIPAUucvector@@PBEPAI2II@Z
_TEXT	SEGMENT
_tree_d$ = -56						; size = 20
_tree_ll$ = -36						; size = 20
tv481 = -16						; size = 4
_length$1$ = -16					; size = 4
tv475 = -12						; size = 4
$T1 = -12						; size = 4
_error$1$ = -8						; size = 4
_in$1$ = -4						; size = 4
_bp$ = 8						; size = 4
_pos$ = 12						; size = 4
_inbitlength$1$ = 16					; size = 4
_inlength$ = 16						; size = 4
_newsize$1$ = 20					; size = 4
_start$1$ = 20						; size = 4
_code_d$1$ = 20						; size = 4
_btype$ = 20						; size = 4
?inflateHuffmanBlock@@YAIPAUucvector@@PBEPAI2II@Z PROC	; inflateHuffmanBlock, COMDAT
; _out$ = ecx
; _in$ = edx

; 1119 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;

  00008	8b 75 10	 mov	 esi, DWORD PTR _inlength$[ebp]
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx

; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);

  0000e	8b 4d 14	 mov	 ecx, DWORD PTR _btype$[ebp]
  00011	8d 04 f5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*8]
  00018	89 55 fc	 mov	 DWORD PTR _in$1$[ebp], edx
  0001b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _error$1$[ebp], 0
  00022	89 45 10	 mov	 DWORD PTR _inbitlength$1$[ebp], eax

; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;

  00025	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _tree_ll$[ebp], 0

; 520  :   tree->tree1d = 0;

  0002c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _tree_ll$[ebp+4], 0

; 521  :   tree->lengths = 0;

  00033	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _tree_ll$[ebp+8], 0

; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;

  0003a	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _tree_d$[ebp], 0

; 520  :   tree->tree1d = 0;

  00041	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _tree_d$[ebp+4], 0

; 521  :   tree->lengths = 0;

  00048	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _tree_d$[ebp+8], 0

; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);

  0004f	83 f9 01	 cmp	 ecx, 1
  00052	75 12		 jne	 SHORT $LN25@inflateHuf

; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);

  00054	8d 4d dc	 lea	 ecx, DWORD PTR _tree_ll$[ebp]
  00057	e8 00 00 00 00	 call	 ?generateFixedLitLenTree@@YAIPAUHuffmanTree@@@Z ; generateFixedLitLenTree

; 965  :   generateFixedDistanceTree(tree_d);

  0005c	8d 4d c8	 lea	 ecx, DWORD PTR _tree_d$[ebp]
  0005f	e8 00 00 00 00	 call	 ?generateFixedDistanceTree@@YAIPAUHuffmanTree@@@Z ; generateFixedDistanceTree

; 966  : }

  00064	eb 26		 jmp	 SHORT $LN102@inflateHuf
$LN25@inflateHuf:

; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);

  00066	83 f9 02	 cmp	 ecx, 2
  00069	75 24		 jne	 SHORT $LN92@inflateHuf
  0006b	56		 push	 esi
  0006c	8b 75 08	 mov	 esi, DWORD PTR _bp$[ebp]
  0006f	56		 push	 esi
  00070	52		 push	 edx
  00071	8d 55 c8	 lea	 edx, DWORD PTR _tree_d$[ebp]
  00074	8d 4d dc	 lea	 ecx, DWORD PTR _tree_ll$[ebp]
  00077	e8 00 00 00 00	 call	 ?getTreeInflateDynamic@@YAIPAUHuffmanTree@@0PBEPAII@Z ; getTreeInflateDynamic
  0007c	8b d8		 mov	 ebx, eax
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00081	89 5d f8	 mov	 DWORD PTR _error$1$[ebp], ebx

; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/

  00084	85 db		 test	 ebx, ebx
  00086	0f 85 ea 01 00
	00		 jne	 $LN21@inflateHuf
$LN102@inflateHuf:
  0008c	8b 45 10	 mov	 eax, DWORD PTR _inbitlength$1$[ebp]
$LN92@inflateHuf:
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR _bp$[ebp]
$LL96@inflateHuf:
  00092	8b 75 ec	 mov	 esi, DWORD PTR _tree_ll$[ebp+16]
$LL22@inflateHuf:

; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;

  00095	33 db		 xor	 ebx, ebx

; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/

  00097	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00099	0f 86 cd 01 00
	00		 jbe	 $LN103@inflateHuf
  0009f	90		 npad	 1
$LL39@inflateHuf:

; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];

  000a0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _in$1$[ebp]
  000a5	8b c2		 mov	 eax, edx
  000a7	c1 e8 03	 shr	 eax, 3
  000aa	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  000ae	0f b6 ca	 movzx	 ecx, dl
  000b1	83 e1 07	 and	 ecx, 7
  000b4	d3 e8		 shr	 eax, cl

; 945  :     (*bp)++;

  000b6	8b 4d 08	 mov	 ecx, DWORD PTR _bp$[ebp]
  000b9	42		 inc	 edx
  000ba	89 11		 mov	 DWORD PTR [ecx], edx
  000bc	83 e0 01	 and	 eax, 1
  000bf	8d 1c 58	 lea	 ebx, DWORD PTR [eax+ebx*2]
  000c2	8b 45 dc	 mov	 eax, DWORD PTR _tree_ll$[ebp]
  000c5	8b 1c 98	 mov	 ebx, DWORD PTR [eax+ebx*4]

; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/

  000c8	3b de		 cmp	 ebx, esi
  000ca	72 1d		 jb	 SHORT $LN71@inflateHuf

; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/

  000cc	8b 45 10	 mov	 eax, DWORD PTR _inbitlength$1$[ebp]
  000cf	2b de		 sub	 ebx, esi

; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/

  000d1	3b de		 cmp	 ebx, esi
  000d3	0f 83 91 01 00
	00		 jae	 $LN85@inflateHuf

; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/

  000d9	3b d0		 cmp	 edx, eax
  000db	72 c3		 jb	 SHORT $LL39@inflateHuf

; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;

  000dd	3b c2		 cmp	 eax, edx
  000df	1b db		 sbb	 ebx, ebx
  000e1	83 c3 0b	 add	 ebx, 11			; 0000000bH
  000e4	e9 8d 01 00 00	 jmp	 $LN21@inflateHuf
$LN71@inflateHuf:

; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/

  000e9	81 fb ff 00 00
	00		 cmp	 ebx, 255		; 000000ffH
  000ef	77 5d		 ja	 SHORT $LN20@inflateHuf

; 1136 :     {
; 1137 :       if((*pos) >= out->size)

  000f1	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  000f4	8b 10		 mov	 edx, DWORD PTR [eax]
  000f6	89 55 f0	 mov	 DWORD PTR tv481[ebp], edx
  000f9	3b 57 04	 cmp	 edx, DWORD PTR [edi+4]
  000fc	72 3b		 jb	 SHORT $LN42@inflateHuf

; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);

  000fe	8d 04 55 02 00
	00 00		 lea	 eax, DWORD PTR [edx*2+2]
  00105	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)

  00108	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0010b	76 29		 jbe	 SHORT $LN45@inflateHuf

; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;

  0010d	03 c0		 add	 eax, eax

; 68   :   return realloc(ptr, new_size);

  0010f	50		 push	 eax
  00110	ff 37		 push	 DWORD PTR [edi]

; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;

  00112	89 45 14	 mov	 DWORD PTR _newsize$1$[ebp], eax

; 68   :   return realloc(ptr, new_size);

  00115	e8 00 00 00 00	 call	 _realloc
  0011a	83 c4 08	 add	 esp, 8

; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)

  0011d	85 c0		 test	 eax, eax
  0011f	0f 84 0d 01 00
	00		 je	 $LN44@inflateHuf

; 223  :     {
; 224  :       p->allocsize = newsize;

  00125	8b 4d 14	 mov	 ecx, DWORD PTR _newsize$1$[ebp]

; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;

  00128	8b 55 f0	 mov	 edx, DWORD PTR tv481[ebp]
  0012b	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
  0012e	8b 4d 08	 mov	 ecx, DWORD PTR _bp$[ebp]
  00131	89 07		 mov	 DWORD PTR [edi], eax
  00133	8b 45 f4	 mov	 eax, DWORD PTR $T1[ebp]
$LN45@inflateHuf:
  00136	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN42@inflateHuf:

; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);

  00139	8b 07		 mov	 eax, DWORD PTR [edi]
  0013b	88 1c 02	 mov	 BYTE PTR [edx+eax], bl

; 1143 :       (*pos)++;

  0013e	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00141	8b 55 0c	 mov	 edx, DWORD PTR _pos$[ebp]
  00144	89 02		 mov	 DWORD PTR [edx], eax
  00146	8b 45 10	 mov	 eax, DWORD PTR _inbitlength$1$[ebp]
  00149	e9 47 ff ff ff	 jmp	 $LL22@inflateHuf
$LN20@inflateHuf:

; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/

  0014e	8d 83 ff fe ff
	ff		 lea	 eax, DWORD PTR [ebx-257]
  00154	83 f8 1c	 cmp	 eax, 28			; 0000001cH
  00157	0f 87 02 01 00
	00		 ja	 $LN16@inflateHuf

; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/

  0015d	8b 75 10	 mov	 esi, DWORD PTR _inbitlength$1$[ebp]
  00160	3b d6		 cmp	 edx, esi
  00162	0f 83 f0 00 00
	00		 jae	 $LN74@inflateHuf

; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);

  00168	ff 34 9d fc fb
	ff ff		 push	 DWORD PTR _LENGTHEXTRA[ebx*4-1028]
  0016f	8b 55 fc	 mov	 edx, DWORD PTR _in$1$[ebp]
  00172	e8 00 00 00 00	 call	 ?readBitsFromStream@@YAIPAIPBEI@Z ; readBitsFromStream
  00177	03 04 9d fc fb
	ff ff		 add	 eax, DWORD PTR _LENGTHBASE[ebx*4-1028]

; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);

  0017e	8b 4d fc	 mov	 ecx, DWORD PTR _in$1$[ebp]
  00181	89 45 f0	 mov	 DWORD PTR _length$1$[ebp], eax
  00184	56		 push	 esi
  00185	8b 75 08	 mov	 esi, DWORD PTR _bp$[ebp]
  00188	8d 45 c8	 lea	 eax, DWORD PTR _tree_d$[ebp]
  0018b	50		 push	 eax
  0018c	8b d6		 mov	 edx, esi
  0018e	e8 00 00 00 00	 call	 ?huffmanDecodeSymbol@@YAIPBEPAIPBUHuffmanTree@@I@Z ; huffmanDecodeSymbol
  00193	83 c4 0c	 add	 esp, 12			; 0000000cH
  00196	89 45 14	 mov	 DWORD PTR _code_d$1$[ebp], eax

; 1161 :       if(code_d > 29)

  00199	83 f8 1d	 cmp	 eax, 29			; 0000001dH
  0019c	0f 87 9e 00 00
	00		 ja	 $LN75@inflateHuf

; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/

  001a2	8b 4d 10	 mov	 ecx, DWORD PTR _inbitlength$1$[ebp]
  001a5	39 0e		 cmp	 DWORD PTR [esi], ecx
  001a7	0f 83 ab 00 00
	00		 jae	 $LN74@inflateHuf

; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);

  001ad	ff 34 85 00 00
	00 00		 push	 DWORD PTR _DISTANCEEXTRA[eax*4]
  001b4	8b 55 fc	 mov	 edx, DWORD PTR _in$1$[ebp]
  001b7	8b ce		 mov	 ecx, esi
  001b9	e8 00 00 00 00	 call	 ?readBitsFromStream@@YAIPAIPBEI@Z ; readBitsFromStream

; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);

  001be	8b 55 0c	 mov	 edx, DWORD PTR _pos$[ebp]
  001c1	8b f0		 mov	 esi, eax
  001c3	8b 45 14	 mov	 eax, DWORD PTR _code_d$1$[ebp]
  001c6	8b 0a		 mov	 ecx, DWORD PTR [edx]
  001c8	03 34 85 00 00
	00 00		 add	 esi, DWORD PTR _DISTANCEBASE[eax*4]
  001cf	83 c4 04	 add	 esp, 4
  001d2	89 4d 14	 mov	 DWORD PTR _start$1$[ebp], ecx

; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/

  001d5	3b f1		 cmp	 esi, ecx
  001d7	77 60		 ja	 SHORT $LN77@inflateHuf

; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)

  001d9	8b 5d f0	 mov	 ebx, DWORD PTR _length$1$[ebp]
  001dc	8b c1		 mov	 eax, ecx
  001de	2b c6		 sub	 eax, esi
  001e0	89 45 f4	 mov	 DWORD PTR tv475[ebp], eax
  001e3	8b f0		 mov	 esi, eax
  001e5	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  001e8	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  001eb	72 11		 jb	 SHORT $LN8@inflateHuf

; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);

  001ed	8d 14 00	 lea	 edx, DWORD PTR [eax+eax]
  001f0	8b cf		 mov	 ecx, edi
  001f2	e8 00 00 00 00	 call	 ?ucvector_resize@@YAIPAUucvector@@I@Z ; ucvector_resize
  001f7	85 c0		 test	 eax, eax
  001f9	74 37		 je	 SHORT $LN44@inflateHuf
  001fb	8b 55 0c	 mov	 edx, DWORD PTR _pos$[ebp]
$LN8@inflateHuf:

; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)

  001fe	8b 4d 08	 mov	 ecx, DWORD PTR _bp$[ebp]
  00201	8b 45 10	 mov	 eax, DWORD PTR _inbitlength$1$[ebp]
  00204	85 db		 test	 ebx, ebx
  00206	0f 84 86 fe ff
	ff		 je	 $LL96@inflateHuf
  0020c	8d 64 24 00	 npad	 4
$LL7@inflateHuf:

; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];

  00210	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00212	8b 12		 mov	 edx, DWORD PTR [edx]
  00214	8a 04 31	 mov	 al, BYTE PTR [ecx+esi]

; 1193 :         (*pos)++;
; 1194 :         backward++;

  00217	46		 inc	 esi

; 1195 :         if(backward >= start) backward = start - distance;

  00218	3b 75 14	 cmp	 esi, DWORD PTR _start$1$[ebp]
  0021b	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  0021e	0f 43 75 f4	 cmovae	 esi, DWORD PTR tv475[ebp]
  00222	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00225	8b 55 0c	 mov	 edx, DWORD PTR _pos$[ebp]
  00228	89 02		 mov	 DWORD PTR [edx], eax
  0022a	4b		 dec	 ebx
  0022b	75 e3		 jne	 SHORT $LL7@inflateHuf
  0022d	e9 5a fe ff ff	 jmp	 $LN102@inflateHuf
$LN44@inflateHuf:

; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);

  00232	bb 53 00 00 00	 mov	 ebx, 83			; 00000053H
  00237	eb 3d		 jmp	 SHORT $LN21@inflateHuf
$LN77@inflateHuf:

; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/

  00239	bb 34 00 00 00	 mov	 ebx, 52			; 00000034H
  0023e	eb 36		 jmp	 SHORT $LN21@inflateHuf
$LN75@inflateHuf:

; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/

  00240	83 fb ff	 cmp	 ebx, -1
  00243	75 0c		 jne	 SHORT $LN13@inflateHuf

; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;

  00245	8b 4d 10	 mov	 ecx, DWORD PTR _inbitlength$1$[ebp]
  00248	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  0024a	1b db		 sbb	 ebx, ebx
  0024c	83 c3 0b	 add	 ebx, 11			; 0000000bH
  0024f	eb 25		 jmp	 SHORT $LN21@inflateHuf
$LN13@inflateHuf:

; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/

  00251	bb 12 00 00 00	 mov	 ebx, 18			; 00000012H

; 1170 :         break;

  00256	eb 1e		 jmp	 SHORT $LN21@inflateHuf
$LN74@inflateHuf:

; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/

  00258	bb 33 00 00 00	 mov	 ebx, 51			; 00000033H
  0025d	eb 17		 jmp	 SHORT $LN21@inflateHuf
$LN16@inflateHuf:

; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)

  0025f	81 fb 00 01 00
	00		 cmp	 ebx, 256		; 00000100H
  00265	74 0c		 je	 SHORT $LN98@inflateHuf
  00267	8b 45 10	 mov	 eax, DWORD PTR _inbitlength$1$[ebp]
$LN85@inflateHuf:

; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;

  0026a	3b 01		 cmp	 eax, DWORD PTR [ecx]
$LN103@inflateHuf:
  0026c	1b db		 sbb	 ebx, ebx
  0026e	83 c3 0b	 add	 ebx, 11			; 0000000bH
  00271	eb 03		 jmp	 SHORT $LN21@inflateHuf
$LN98@inflateHuf:
  00273	8b 5d f8	 mov	 ebx, DWORD PTR _error$1$[ebp]
$LN21@inflateHuf:

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  00276	ff 75 dc	 push	 DWORD PTR _tree_ll$[ebp]
  00279	e8 00 00 00 00	 call	 _free
  0027e	ff 75 e0	 push	 DWORD PTR _tree_ll$[ebp+4]
  00281	e8 00 00 00 00	 call	 _free
  00286	ff 75 e4	 push	 DWORD PTR _tree_ll$[ebp+8]
  00289	e8 00 00 00 00	 call	 _free
  0028e	ff 75 c8	 push	 DWORD PTR _tree_d$[ebp]
  00291	e8 00 00 00 00	 call	 _free
  00296	ff 75 cc	 push	 DWORD PTR _tree_d$[ebp+4]
  00299	e8 00 00 00 00	 call	 _free
  0029e	ff 75 d0	 push	 DWORD PTR _tree_d$[ebp+8]
  002a1	e8 00 00 00 00	 call	 _free
  002a6	83 c4 18	 add	 esp, 24			; 00000018H

; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;

  002a9	8b c3		 mov	 eax, ebx
  002ab	5f		 pop	 edi
  002ac	5e		 pop	 esi
  002ad	5b		 pop	 ebx

; 1215 : }

  002ae	8b e5		 mov	 esp, ebp
  002b0	5d		 pop	 ebp
  002b1	c3		 ret	 0
?inflateHuffmanBlock@@YAIPAUucvector@@PBEPAI2II@Z ENDP	; inflateHuffmanBlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?inflateNoCompression@@YAIPAUucvector@@PBEPAI2I@Z
_TEXT	SEGMENT
_in$1$ = -16						; size = 4
$T1 = -12						; size = 4
_newsize$1$ = -8					; size = 4
_out$1$ = -4						; size = 4
_bp$ = 8						; size = 4
_pos$ = 12						; size = 4
_inlength$ = 16						; size = 4
?inflateNoCompression@@YAIPAUucvector@@PBEPAI2I@Z PROC	; inflateNoCompression, COMDAT
; _out$ = ecx
; _in$ = edx

; 1218 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b da		 mov	 ebx, edx
  00009	8b d1		 mov	 edx, ecx

; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _bp$[ebp]
  0000e	56		 push	 esi
  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	89 5d f0	 mov	 DWORD PTR _in$1$[ebp], ebx
  00014	89 55 fc	 mov	 DWORD PTR _out$1$[ebp], edx
  00017	a8 07		 test	 al, 7
  00019	74 0c		 je	 SHORT $LN9@inflateNoC
  0001b	eb 03 8d 49 00	 npad	 5
$LL10@inflateNoC:
  00020	40		 inc	 eax
  00021	a8 07		 test	 al, 7
  00023	75 fb		 jne	 SHORT $LL10@inflateNoC
  00025	89 01		 mov	 DWORD PTR [ecx], eax
$LN9@inflateNoC:

; 1223 :   p = (*bp) / 8; /*byte position*/

  00027	8b 31		 mov	 esi, DWORD PTR [ecx]

; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/

  00029	8b 45 10	 mov	 eax, DWORD PTR _inlength$[ebp]
  0002c	c1 ee 03	 shr	 esi, 3
  0002f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00032	3b f0		 cmp	 esi, eax
  00034	72 0b		 jb	 SHORT $LN8@inflateNoC
  00036	5e		 pop	 esi
  00037	b8 34 00 00 00	 mov	 eax, 52			; 00000034H
  0003c	5b		 pop	 ebx

; 1245 : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN8@inflateNoC:

; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;

  00041	0f b6 04 1e	 movzx	 eax, BYTE PTR [esi+ebx]

; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;

  00045	0f b6 4c 1e 03	 movzx	 ecx, BYTE PTR [esi+ebx+3]
  0004a	57		 push	 edi
  0004b	0f b6 7c 1e 01	 movzx	 edi, BYTE PTR [esi+ebx+1]
  00050	c1 e7 08	 shl	 edi, 8
  00053	03 f8		 add	 edi, eax
  00055	0f b6 44 1e 02	 movzx	 eax, BYTE PTR [esi+ebx+2]
  0005a	c1 e1 08	 shl	 ecx, 8
  0005d	03 c1		 add	 eax, ecx

; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/

  0005f	03 c7		 add	 eax, edi
  00061	83 c6 04	 add	 esi, 4
  00064	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00069	74 0c		 je	 SHORT $LN7@inflateNoC
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	b8 15 00 00 00	 mov	 eax, 21			; 00000015H
  00072	5b		 pop	 ebx

; 1245 : }

  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
$LN7@inflateNoC:

; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)

  00077	8b 5d 0c	 mov	 ebx, DWORD PTR _pos$[ebp]
  0007a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0007c	03 c7		 add	 eax, edi
  0007e	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00081	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00084	72 2a		 jb	 SHORT $LN5@inflateNoC

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);
; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)

  00086	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00089	76 22		 jbe	 SHORT $LN16@inflateNoC

; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;

  0008b	03 c0		 add	 eax, eax

; 68   :   return realloc(ptr, new_size);

  0008d	50		 push	 eax
  0008e	ff 32		 push	 DWORD PTR [edx]

; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;

  00090	89 45 f8	 mov	 DWORD PTR _newsize$1$[ebp], eax

; 68   :   return realloc(ptr, new_size);

  00093	e8 00 00 00 00	 call	 _realloc
  00098	83 c4 08	 add	 esp, 8

; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)

  0009b	85 c0		 test	 eax, eax
  0009d	74 25		 je	 SHORT $LN27@inflateNoC

; 223  :     {
; 224  :       p->allocsize = newsize;

  0009f	8b 55 fc	 mov	 edx, DWORD PTR _out$1$[ebp]
  000a2	8b 4d f8	 mov	 ecx, DWORD PTR _newsize$1$[ebp]

; 225  :       p->data = (unsigned char*)data;

  000a5	89 02		 mov	 DWORD PTR [edx], eax

; 226  :       p->size = size;

  000a7	8b 45 f4	 mov	 eax, DWORD PTR $T1[ebp]
  000aa	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN16@inflateNoC:

; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;

  000ad	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN5@inflateNoC:

; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/

  000b0	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  000b3	3b 45 10	 cmp	 eax, DWORD PTR _inlength$[ebp]
  000b6	76 18		 jbe	 SHORT $LN4@inflateNoC
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	b8 17 00 00 00	 mov	 eax, 23			; 00000017H
  000bf	5b		 pop	 ebx

; 1245 : }

  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
$LN27@inflateNoC:
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi

; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/

  000c6	b8 53 00 00 00	 mov	 eax, 83			; 00000053H
  000cb	5b		 pop	 ebx

; 1245 : }

  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
$LN4@inflateNoC:

; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];

  000d0	85 ff		 test	 edi, edi
  000d2	74 16		 je	 SHORT $LN1@inflateNoC
  000d4	8b 12		 mov	 edx, DWORD PTR [edx]
$LL3@inflateNoC:
  000d6	8b 45 f0	 mov	 eax, DWORD PTR _in$1$[ebp]
  000d9	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000db	8a 04 06	 mov	 al, BYTE PTR [esi+eax]
  000de	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  000e1	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000e4	46		 inc	 esi
  000e5	89 03		 mov	 DWORD PTR [ebx], eax
  000e7	4f		 dec	 edi
  000e8	75 ec		 jne	 SHORT $LL3@inflateNoC
$LN1@inflateNoC:

; 1241 : 
; 1242 :   (*bp) = p * 8;

  000ea	8b 4d 08	 mov	 ecx, DWORD PTR _bp$[ebp]
  000ed	8d 04 f5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*8]
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	89 01		 mov	 DWORD PTR [ecx], eax

; 1243 : 
; 1244 :   return error;

  000f8	33 c0		 xor	 eax, eax
  000fa	5b		 pop	 ebx

; 1245 : }

  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
?inflateNoCompression@@YAIPAUucvector@@PBEPAI2I@Z ENDP	; inflateNoCompression
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_inflatev@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z
_TEXT	SEGMENT
tv246 = -20						; size = 4
_in$1$ = -16						; size = 4
_BFINAL$1$ = -12					; size = 4
_pos$ = -8						; size = 4
_bp$ = -4						; size = 4
_insize$ = 8						; size = 4
_settings$dead$ = 12					; size = 4
?lodepng_inflatev@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z PROC ; lodepng_inflatev, COMDAT
; _out$ = ecx
; _in$ = edx

; 1250 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	8b 45 08	 mov	 eax, DWORD PTR _insize$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b f2		 mov	 esi, edx

; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;

  00010	33 db		 xor	 ebx, ebx
  00012	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00019	89 75 f0	 mov	 DWORD PTR _in$1$[ebp], esi

; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/

  0001c	89 5d f8	 mov	 DWORD PTR _pos$[ebp], ebx
  0001f	89 4d ec	 mov	 DWORD PTR tv246[ebp], ecx
$LL9@lodepng_in:

; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/

  00022	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  00025	3b c1		 cmp	 eax, ecx
  00027	0f 83 e4 00 00
	00		 jae	 $LN27@lodepng_in

; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));

  0002d	8b c3		 mov	 eax, ebx
  0002f	c1 e8 03	 shr	 eax, 3
  00032	8a cb		 mov	 cl, bl
  00034	8a 04 30	 mov	 al, BYTE PTR [eax+esi]
  00037	80 e1 07	 and	 cl, 7
  0003a	d2 e8		 shr	 al, cl

; 436  :   (*bitpointer)++;

  0003c	43		 inc	 ebx

; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));

  0003d	8a cb		 mov	 cl, bl
  0003f	80 e1 07	 and	 cl, 7
  00042	24 01		 and	 al, 1

; 1264 :     BFINAL = readBitFromStream(&bp, in);

  00044	0f b6 c0	 movzx	 eax, al
  00047	89 45 f4	 mov	 DWORD PTR _BFINAL$1$[ebp], eax

; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));

  0004a	8b c3		 mov	 eax, ebx
  0004c	c1 e8 03	 shr	 eax, 3

; 436  :   (*bitpointer)++;

  0004f	43		 inc	 ebx
  00050	8a 14 30	 mov	 dl, BYTE PTR [eax+esi]
  00053	d2 ea		 shr	 dl, cl

; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));

  00055	8b c3		 mov	 eax, ebx
  00057	c1 e8 03	 shr	 eax, 3
  0005a	8a cb		 mov	 cl, bl
  0005c	8a 04 30	 mov	 al, BYTE PTR [eax+esi]
  0005f	80 e1 07	 and	 cl, 7
  00062	d2 e8		 shr	 al, cl
  00064	80 e2 01	 and	 dl, 1

; 436  :   (*bitpointer)++;

  00067	43		 inc	 ebx
  00068	89 5d fc	 mov	 DWORD PTR _bp$[ebp], ebx
  0006b	24 01		 and	 al, 1

; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);

  0006d	0f b6 c8	 movzx	 ecx, al
  00070	0f b6 c2	 movzx	 eax, dl
  00073	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]

; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/

  00076	83 f8 03	 cmp	 eax, 3
  00079	0f 84 86 00 00
	00		 je	 $LN28@lodepng_in

; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/

  0007f	8b d6		 mov	 edx, esi
  00081	8b cf		 mov	 ecx, edi
  00083	85 c0		 test	 eax, eax
  00085	75 15		 jne	 SHORT $LN4@lodepng_in
  00087	ff 75 08	 push	 DWORD PTR _insize$[ebp]
  0008a	8d 45 f8	 lea	 eax, DWORD PTR _pos$[ebp]
  0008d	50		 push	 eax
  0008e	8d 45 fc	 lea	 eax, DWORD PTR _bp$[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?inflateNoCompression@@YAIPAUucvector@@PBEPAI2I@Z ; inflateNoCompression
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	eb 14		 jmp	 SHORT $LN36@lodepng_in
$LN4@lodepng_in:

; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/

  0009c	50		 push	 eax
  0009d	ff 75 08	 push	 DWORD PTR _insize$[ebp]
  000a0	8d 45 f8	 lea	 eax, DWORD PTR _pos$[ebp]
  000a3	50		 push	 eax
  000a4	8d 45 fc	 lea	 eax, DWORD PTR _bp$[ebp]
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?inflateHuffmanBlock@@YAIPAUucvector@@PBEPAI2II@Z ; inflateHuffmanBlock
  000ad	83 c4 10	 add	 esp, 16			; 00000010H
$LN36@lodepng_in:
  000b0	8b f0		 mov	 esi, eax

; 1271 : 
; 1272 :     if(error) return error;

  000b2	85 f6		 test	 esi, esi
  000b4	75 38		 jne	 SHORT $LN1@lodepng_in

; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)

  000b6	39 45 f4	 cmp	 DWORD PTR _BFINAL$1$[ebp], eax
  000b9	75 0e		 jne	 SHORT $LN35@lodepng_in

; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/

  000bb	8b 5d fc	 mov	 ebx, DWORD PTR _bp$[ebp]
  000be	8b 75 f0	 mov	 esi, DWORD PTR _in$1$[ebp]
  000c1	8b 4d ec	 mov	 ecx, DWORD PTR tv246[ebp]
  000c4	e9 59 ff ff ff	 jmp	 $LL9@lodepng_in
$LN35@lodepng_in:

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);
; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)

  000c9	8b 5d f8	 mov	 ebx, DWORD PTR _pos$[ebp]
  000cc	3b 5f 08	 cmp	 ebx, DWORD PTR [edi+8]
  000cf	76 1a		 jbe	 SHORT $LN21@lodepng_in

; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;

  000d1	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]

; 68   :   return realloc(ptr, new_size);

  000d4	50		 push	 eax
  000d5	ff 37		 push	 DWORD PTR [edi]
  000d7	e8 00 00 00 00	 call	 _realloc
  000dc	83 c4 08	 add	 esp, 8

; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)

  000df	85 c0		 test	 eax, eax
  000e1	74 14		 je	 SHORT $LN31@lodepng_in

; 223  :     {
; 224  :       p->allocsize = newsize;

  000e3	8d 0c 1b	 lea	 ecx, DWORD PTR [ebx+ebx]
  000e6	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 225  :       p->data = (unsigned char*)data;

  000e9	89 07		 mov	 DWORD PTR [edi], eax
$LN21@lodepng_in:

; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;

  000eb	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
$LN1@lodepng_in:
  000ee	5f		 pop	 edi

; 1277 : 
; 1278 :   return error;

  000ef	8b c6		 mov	 eax, esi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx

; 1279 : }

  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c3		 ret	 0
$LN31@lodepng_in:

; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/

  000f7	be 53 00 00 00	 mov	 esi, 83			; 00000053H
  000fc	5f		 pop	 edi

; 1277 : 
; 1278 :   return error;

  000fd	8b c6		 mov	 eax, esi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx

; 1279 : }

  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c3		 ret	 0
$LN28@lodepng_in:
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi

; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/

  00107	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0010c	5b		 pop	 ebx

; 1279 : }

  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c3		 ret	 0
$LN27@lodepng_in:
  00111	5f		 pop	 edi
  00112	5e		 pop	 esi

; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/

  00113	b8 34 00 00 00	 mov	 eax, 52			; 00000034H
  00118	5b		 pop	 ebx

; 1279 : }

  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c3		 ret	 0
?lodepng_inflatev@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z ENDP ; lodepng_inflatev
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_inflate@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z
_TEXT	SEGMENT
_v$ = -12						; size = 12
_in$ = 8						; size = 4
_insize$ = 12						; size = 4
_settings$dead$ = 16					; size = 4
?lodepng_inflate@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z PROC ; lodepng_inflate, COMDAT
; _out$ = ecx
; _outsize$ = edx

; 1284 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b da		 mov	 ebx, edx

; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);

  0000b	8b 55 08	 mov	 edx, DWORD PTR _in$[ebp]
  0000e	8b 33		 mov	 esi, DWORD PTR [ebx]
  00010	8b f9		 mov	 edi, ecx
  00012	51		 push	 ecx

; 266  :   p->data = buffer;

  00013	8b 07		 mov	 eax, DWORD PTR [edi]

; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);

  00015	ff 75 0c	 push	 DWORD PTR _insize$[ebp]
  00018	8d 4d f4	 lea	 ecx, DWORD PTR _v$[ebp]

; 266  :   p->data = buffer;

  0001b	89 45 f4	 mov	 DWORD PTR _v$[ebp], eax

; 267  :   p->allocsize = p->size = size;

  0001e	89 75 f8	 mov	 DWORD PTR _v$[ebp+4], esi
  00021	89 75 fc	 mov	 DWORD PTR _v$[ebp+8], esi

; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);

  00024	e8 00 00 00 00	 call	 ?lodepng_inflatev@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z ; lodepng_inflatev

; 1289 :   *out = v.data;

  00029	8b 4d f4	 mov	 ecx, DWORD PTR _v$[ebp]
  0002c	83 c4 08	 add	 esp, 8
  0002f	89 0f		 mov	 DWORD PTR [edi], ecx

; 1290 :   *outsize = v.size;

  00031	8b 4d f8	 mov	 ecx, DWORD PTR _v$[ebp+4]
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	89 0b		 mov	 DWORD PTR [ebx], ecx
  00038	5b		 pop	 ebx

; 1291 :   return error;
; 1292 : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?lodepng_inflate@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z ENDP ; lodepng_inflate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?inflate@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z
_TEXT	SEGMENT
_v$1 = -12						; size = 12
_in$ = 8						; size = 4
_insize$ = 12						; size = 4
_settings$ = 16						; size = 4
?inflate@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z PROC ; inflate, COMDAT
; _out$ = ecx
; _outsize$ = edx

; 1297 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1298 :   if(settings->custom_inflate)

  00003	8b 45 10	 mov	 eax, DWORD PTR _settings$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000e	57		 push	 edi
  0000f	8b fa		 mov	 edi, edx
  00011	8b d9		 mov	 ebx, ecx
  00013	85 f6		 test	 esi, esi
  00015	74 15		 je	 SHORT $LN2@inflate

; 1299 :   {
; 1300 :     return settings->custom_inflate(out, outsize, in, insize, settings);

  00017	50		 push	 eax
  00018	ff 75 0c	 push	 DWORD PTR _insize$[ebp]
  0001b	ff 75 08	 push	 DWORD PTR _in$[ebp]
  0001e	57		 push	 edi
  0001f	53		 push	 ebx
  00020	ff d6		 call	 esi
  00022	83 c4 14	 add	 esp, 20			; 00000014H
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN2@inflate:

; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
; 945  :     (*bp)++;
; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);
; 965  :   generateFixedDistanceTree(tree_d);
; 966  : }
; 967  : 
; 968  : /*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
; 969  : static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
; 970  :                                       const unsigned char* in, size_t* bp, size_t inlength)
; 971  : {
; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;
; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/
; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;
; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;
; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;
; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)
; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
; 1009 :     if(error) break;
; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;
; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;
; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;
; 1020 :     while(i < HLIT + HDIST)
; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
; 1023 :       if(code <= 15) /*a length code*/
; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;
; 1026 :         else bitlen_d[i - HLIT] = code;
; 1027 :         i++;
; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/
; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);
; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];
; 1040 :         else value = bitlen_d[i - HLIT - 1];
; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)
; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
; 1045 :           if(i < HLIT) bitlen_ll[i] = value;
; 1046 :           else bitlen_d[i - HLIT] = value;
; 1047 :           i++;
; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/
; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);
; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)
; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1063 :           else bitlen_d[i - HLIT] = 0;
; 1064 :           i++;
; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/
; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);
; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)
; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1080 :           else bitlen_d[i - HLIT] = 0;
; 1081 :           i++;
; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))
; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;
; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/
; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;
; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 1102 :     if(error) break;
; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
; 1104 : 
; 1105 :     break; /*end of error-while*/
; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;
; 1114 : }
; 1115 : 
; 1116 : /*inflate a block with dynamic of fixed Huffman tree*/
; 1117 : static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
; 1118 :                                     size_t* pos, size_t inlength, unsigned btype)
; 1119 : {
; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;
; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/
; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/
; 1136 :     {
; 1137 :       if((*pos) >= out->size)
; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);
; 1143 :       (*pos)++;
; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);
; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
; 1161 :       if(code_d > 29)
; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;
; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/
; 1170 :         break;
; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);
; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);
; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)
; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)
; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];
; 1193 :         (*pos)++;
; 1194 :         backward++;
; 1195 :         if(backward >= start) backward = start - distance;
; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)
; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;
; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;
; 1215 : }
; 1216 : 
; 1217 : static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
; 1218 : {
; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;
; 1223 :   p = (*bp) / 8; /*byte position*/
; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/
; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;
; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;
; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)
; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];
; 1241 : 
; 1242 :   (*bp) = p * 8;
; 1243 : 
; 1244 :   return error;
; 1245 : }
; 1246 : 
; 1247 : static unsigned lodepng_inflatev(ucvector* out,
; 1248 :                                  const unsigned char* in, size_t insize,
; 1249 :                                  const LodePNGDecompressSettings* settings)
; 1250 : {
; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;
; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/
; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)
; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
; 1264 :     BFINAL = readBitFromStream(&bp, in);
; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);
; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
; 1271 : 
; 1272 :     if(error) return error;
; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/
; 1277 : 
; 1278 :   return error;
; 1279 : }
; 1280 : 
; 1281 : unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
; 1282 :                          const unsigned char* in, size_t insize,
; 1283 :                          const LodePNGDecompressSettings* settings)
; 1284 : {
; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);

  0002c	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 266  :   p->data = buffer;

  0002e	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);

  00030	8b 55 08	 mov	 edx, DWORD PTR _in$[ebp]
  00033	51		 push	 ecx
  00034	ff 75 0c	 push	 DWORD PTR _insize$[ebp]

; 267  :   p->allocsize = p->size = size;

  00037	89 4d f8	 mov	 DWORD PTR _v$1[ebp+4], ecx
  0003a	89 4d fc	 mov	 DWORD PTR _v$1[ebp+8], ecx

; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);

  0003d	8d 4d f4	 lea	 ecx, DWORD PTR _v$1[ebp]

; 266  :   p->data = buffer;

  00040	89 45 f4	 mov	 DWORD PTR _v$1[ebp], eax

; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);

  00043	e8 00 00 00 00	 call	 ?lodepng_inflatev@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z ; lodepng_inflatev

; 1289 :   *out = v.data;

  00048	8b 4d f4	 mov	 ecx, DWORD PTR _v$1[ebp]
  0004b	89 0b		 mov	 DWORD PTR [ebx], ecx

; 1290 :   *outsize = v.size;

  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _v$1[ebp+4]
  00050	83 c4 08	 add	 esp, 8
  00053	89 0f		 mov	 DWORD PTR [edi], ecx
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx

; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?inflate@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z ENDP ; inflate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?update_adler32@@YAIIPBEI@Z
_TEXT	SEGMENT
tv203 = -12						; size = 4
$T1 = -8						; size = 4
_s2$1$ = -4						; size = 4
_len$ = 8						; size = 4
?update_adler32@@YAIIPBEI@Z PROC			; update_adler32, COMDAT
; _adler$dead$ = ecx
; _data$ = edx

; 2050 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 2051 :    unsigned s1 = adler & 0xffff;
; 2052 :    unsigned s2 = (adler >> 16) & 0xffff;
; 2053 : 
; 2054 :   while(len > 0)

  00006	8b 45 08	 mov	 eax, DWORD PTR _len$[ebp]
  00009	53		 push	 ebx
  0000a	33 db		 xor	 ebx, ebx
  0000c	56		 push	 esi
  0000d	8b f2		 mov	 esi, edx
  0000f	b9 01 00 00 00	 mov	 ecx, 1
  00014	89 5d fc	 mov	 DWORD PTR _s2$1$[ebp], ebx
  00017	85 c0		 test	 eax, eax
  00019	0f 84 95 00 00
	00		 je	 $LN3@update_adl
  0001f	c7 45 f4 ae 15
	00 00		 mov	 DWORD PTR tv203[ebp], 5550 ; 000015aeH
  00026	57		 push	 edi
$LL4@update_adl:

; 2055 :   {
; 2056 :     /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
; 2057 :     unsigned amount = len > 5550 ? 5550 : len;

  00027	33 ff		 xor	 edi, edi
  00029	33 db		 xor	 ebx, ebx
  0002b	3d ae 15 00 00	 cmp	 eax, 5550		; 000015aeH
  00030	8b d0		 mov	 edx, eax
  00032	0f 47 55 f4	 cmova	 edx, DWORD PTR tv203[ebp]

; 2058 :     len -= amount;

  00036	2b c2		 sub	 eax, edx
  00038	89 7d f8	 mov	 DWORD PTR $T1[ebp], edi
  0003b	89 45 08	 mov	 DWORD PTR _len$[ebp], eax

; 2059 :     while(amount > 0)

  0003e	83 fa 02	 cmp	 edx, 2
  00041	7c 29		 jl	 SHORT $LC14@update_adl
  00043	8d 7a fe	 lea	 edi, DWORD PTR [edx-2]
  00046	d1 ef		 shr	 edi, 1
  00048	47		 inc	 edi
  00049	8d a4 24 00 00
	00 00		 npad	 7
$LL15@update_adl:

; 2060 :     {
; 2061 :       s1 += (*data++);

  00050	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00053	03 c8		 add	 ecx, eax
  00055	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]

; 2062 :       s2 += s1;

  00059	03 d9		 add	 ebx, ecx
  0005b	03 c8		 add	 ecx, eax
  0005d	01 4d f8	 add	 DWORD PTR $T1[ebp], ecx
  00060	83 c6 02	 add	 esi, 2
  00063	83 ea 02	 sub	 edx, 2
  00066	4f		 dec	 edi
  00067	75 e7		 jne	 SHORT $LL15@update_adl
  00069	8b 7d f8	 mov	 edi, DWORD PTR $T1[ebp]
$LC14@update_adl:

; 2059 :     while(amount > 0)

  0006c	85 d2		 test	 edx, edx
  0006e	74 09		 je	 SHORT $LN13@update_adl

; 2060 :     {
; 2061 :       s1 += (*data++);

  00070	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00073	03 c8		 add	 ecx, eax

; 2062 :       s2 += s1;

  00075	01 4d fc	 add	 DWORD PTR _s2$1$[ebp], ecx
  00078	46		 inc	 esi
$LN13@update_adl:

; 2063 :       amount--;
; 2064 :     }
; 2065 :     s1 %= 65521;

  00079	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  0007c	8b 5d fc	 mov	 ebx, DWORD PTR _s2$1$[ebp]
  0007f	03 d8		 add	 ebx, eax
  00081	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00086	f7 e1		 mul	 ecx
  00088	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  0008b	69 d2 0f 00 ff
	ff		 imul	 edx, -65521		; ffff000fH
  00091	03 ca		 add	 ecx, edx

; 2066 :     s2 %= 65521;

  00093	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00098	f7 e3		 mul	 ebx
  0009a	8b 45 08	 mov	 eax, DWORD PTR _len$[ebp]
  0009d	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  000a0	69 d2 0f 00 ff
	ff		 imul	 edx, -65521		; ffff000fH
  000a6	03 da		 add	 ebx, edx
  000a8	89 5d fc	 mov	 DWORD PTR _s2$1$[ebp], ebx
  000ab	85 c0		 test	 eax, eax
  000ad	0f 85 74 ff ff
	ff		 jne	 $LL4@update_adl
  000b3	5f		 pop	 edi
$LN3@update_adl:

; 2067 :   }
; 2068 : 
; 2069 :   return (s2 << 16) | s1;

  000b4	c1 e3 10	 shl	 ebx, 16			; 00000010H
  000b7	0b d9		 or	 ebx, ecx
  000b9	5e		 pop	 esi
  000ba	8b c3		 mov	 eax, ebx
  000bc	5b		 pop	 ebx

; 2070 : }

  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
?update_adler32@@YAIIPBEI@Z ENDP			; update_adler32
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?adler32@@YAIPBEI@Z
_TEXT	SEGMENT
?adler32@@YAIPBEI@Z PROC				; adler32, COMDAT
; _data$ = ecx
; _len$ = edx

; 2075 :   return update_adler32(1L, data, len);

  00000	52		 push	 edx
  00001	8b d1		 mov	 edx, ecx
  00003	e8 00 00 00 00	 call	 ?update_adler32@@YAIIPBEI@Z ; update_adler32
  00008	83 c4 04	 add	 esp, 4

; 2076 : }

  0000b	c3		 ret	 0
?adler32@@YAIPBEI@Z ENDP				; adler32
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_zlib_decompress@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z
_TEXT	SEGMENT
_out$1$ = -8						; size = 4
_outsize$1$ = -4					; size = 4
_in$ = 8						; size = 4
_insize$ = 12						; size = 4
_settings$ = 16						; size = 4
?lodepng_zlib_decompress@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z PROC ; lodepng_zlib_decompress, COMDAT
; _out$ = ecx
; _outsize$ = edx

; 2086 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 2087 :   unsigned error = 0;
; 2088 :   unsigned CM, CINFO, FDICT;
; 2089 : 
; 2090 :   if(insize < 2) return 53; /*error, size of zlib data too small*/

  00007	8b 75 0c	 mov	 esi, DWORD PTR _insize$[ebp]
  0000a	89 55 fc	 mov	 DWORD PTR _outsize$1$[ebp], edx
  0000d	89 4d f8	 mov	 DWORD PTR _out$1$[ebp], ecx
  00010	83 fe 02	 cmp	 esi, 2
  00013	73 0a		 jae	 SHORT $LN8@lodepng_zl
  00015	b8 35 00 00 00	 mov	 eax, 53			; 00000035H
  0001a	5e		 pop	 esi

; 2127 : }

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
$LN8@lodepng_zl:

; 2091 :   /*read information from zlib header*/
; 2092 :   if((in[0] * 256 + in[1]) % 31 != 0)

  0001f	8b 45 08	 mov	 eax, DWORD PTR _in$[ebp]
  00022	53		 push	 ebx
  00023	8a 18		 mov	 bl, BYTE PTR [eax]
  00025	8a 78 01	 mov	 bh, BYTE PTR [eax+1]
  00028	0f b6 c3	 movzx	 eax, bl
  0002b	c1 e0 08	 shl	 eax, 8
  0002e	0f b6 cf	 movzx	 ecx, bh
  00031	03 c1		 add	 eax, ecx
  00033	99		 cdq
  00034	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00039	f7 f9		 idiv	 ecx
  0003b	85 d2		 test	 edx, edx
  0003d	74 09		 je	 SHORT $LN7@lodepng_zl

; 2093 :   {
; 2094 :     /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
; 2095 :     return 24;

  0003f	5b		 pop	 ebx
  00040	8d 41 f9	 lea	 eax, DWORD PTR [ecx-7]
  00043	5e		 pop	 esi

; 2127 : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN7@lodepng_zl:

; 2096 :   }
; 2097 : 
; 2098 :   CM = in[0] & 15;

  00048	8a c3		 mov	 al, bl
  0004a	24 0f		 and	 al, 15			; 0000000fH

; 2099 :   CINFO = (in[0] >> 4) & 15;
; 2100 :   /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
; 2101 :   FDICT = (in[1] >> 5) & 1;
; 2102 :   /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/
; 2103 : 
; 2104 :   if(CM != 8 || CINFO > 7)

  0004c	3c 08		 cmp	 al, 8
  0004e	75 75		 jne	 SHORT $LN5@lodepng_zl
  00050	80 e3 f0	 and	 bl, 240			; 000000f0H
  00053	80 fb 70	 cmp	 bl, 112			; 00000070H
  00056	77 6d		 ja	 SHORT $LN5@lodepng_zl

; 2108 :   }
; 2109 :   if(FDICT != 0)

  00058	f6 c7 20	 test	 bh, 32			; 00000020H
  0005b	74 0b		 je	 SHORT $LN4@lodepng_zl

; 2110 :   {
; 2111 :     /*error: the specification of PNG says about the zlib stream:
; 2112 :       "The additional flags shall not specify a preset dictionary."*/
; 2113 :     return 26;

  0005d	5b		 pop	 ebx
  0005e	b8 1a 00 00 00	 mov	 eax, 26			; 0000001aH
  00063	5e		 pop	 esi

; 2127 : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
$LN4@lodepng_zl:

; 2114 :   }
; 2115 : 
; 2116 :   error = inflate(out, outsize, in + 2, insize - 2, settings);

  00068	8b 5d 08	 mov	 ebx, DWORD PTR _in$[ebp]
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _outsize$1$[ebp]
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _out$1$[ebp]
  00071	57		 push	 edi
  00072	8b 7d 10	 mov	 edi, DWORD PTR _settings$[ebp]
  00075	57		 push	 edi
  00076	8d 46 fe	 lea	 eax, DWORD PTR [esi-2]
  00079	50		 push	 eax
  0007a	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?inflate@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z ; inflate
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2117 :   if(error) return error;

  00086	85 c0		 test	 eax, eax
  00088	75 2b		 jne	 SHORT $LN14@lodepng_zl

; 2118 : 
; 2119 :   if(!settings->ignore_adler32)

  0008a	39 07		 cmp	 DWORD PTR [edi], eax
  0008c	75 2e		 jne	 SHORT $LN1@lodepng_zl

; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/

  0008e	8d 4e fc	 lea	 ecx, DWORD PTR [esi-4]
  00091	03 cb		 add	 ecx, ebx
  00093	e8 00 00 00 00	 call	 ?lodepng_read32bitInt@@YAIPBE@Z ; lodepng_read32bitInt
  00098	8b f0		 mov	 esi, eax

; 2075 :   return update_adler32(1L, data, len);

  0009a	8b 45 fc	 mov	 eax, DWORD PTR _outsize$1$[ebp]
  0009d	ff 30		 push	 DWORD PTR [eax]
  0009f	8b 45 f8	 mov	 eax, DWORD PTR _out$1$[ebp]
  000a2	8b 10		 mov	 edx, DWORD PTR [eax]
  000a4	e8 00 00 00 00	 call	 ?update_adler32@@YAIIPBEI@Z ; update_adler32
  000a9	83 c4 04	 add	 esp, 4

; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/

  000ac	3b c6		 cmp	 eax, esi
  000ae	74 0c		 je	 SHORT $LN1@lodepng_zl
  000b0	b8 3a 00 00 00	 mov	 eax, 58			; 0000003aH
$LN14@lodepng_zl:
  000b5	5f		 pop	 edi
  000b6	5b		 pop	 ebx
  000b7	5e		 pop	 esi

; 2127 : }

  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
$LN1@lodepng_zl:
  000bc	5f		 pop	 edi
  000bd	5b		 pop	 ebx

; 2124 :   }
; 2125 : 
; 2126 :   return 0; /*no error*/

  000be	33 c0		 xor	 eax, eax
  000c0	5e		 pop	 esi

; 2127 : }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN5@lodepng_zl:
  000c5	5b		 pop	 ebx

; 2105 :   {
; 2106 :     /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
; 2107 :     return 25;

  000c6	b8 19 00 00 00	 mov	 eax, 25			; 00000019H
  000cb	5e		 pop	 esi

; 2127 : }

  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
?lodepng_zlib_decompress@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z ENDP ; lodepng_zlib_decompress
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?zlib_decompress@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z
_TEXT	SEGMENT
_in$ = 8						; size = 4
_insize$ = 12						; size = 4
_settings$ = 16						; size = 4
?zlib_decompress@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z PROC ; zlib_decompress, COMDAT
; _out$ = ecx
; _outsize$ = edx

; 2131 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2132 :   if(settings->custom_zlib)

  00003	8b 45 10	 mov	 eax, DWORD PTR _settings$[ebp]
  00006	56		 push	 esi
  00007	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000a	85 f6		 test	 esi, esi
  0000c	74 11		 je	 SHORT $LN2@zlib_decom

; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);

  0000e	50		 push	 eax
  0000f	ff 75 0c	 push	 DWORD PTR _insize$[ebp]
  00012	ff 75 08	 push	 DWORD PTR _in$[ebp]
  00015	52		 push	 edx
  00016	51		 push	 ecx
  00017	ff d6		 call	 esi
  00019	83 c4 14	 add	 esp, 20			; 00000014H
  0001c	5e		 pop	 esi

; 2136 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
$LN2@zlib_decom:
  0001f	5e		 pop	 esi

; 2134 :   else
; 2135 :     return lodepng_zlib_decompress(out, outsize, in, insize, settings);

  00020	89 45 10	 mov	 DWORD PTR _settings$[ebp], eax

; 2136 : }

  00023	5d		 pop	 ebp

; 2134 :   else
; 2135 :     return lodepng_zlib_decompress(out, outsize, in, insize, settings);

  00024	e9 00 00 00 00	 jmp	 ?lodepng_zlib_decompress@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z ; lodepng_zlib_decompress
?zlib_decompress@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z ENDP ; zlib_decompress
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_compress_settings_init@@YAXPAULodePNGCompressSettings@@@Z
_TEXT	SEGMENT
?lodepng_compress_settings_init@@YAXPAULodePNGCompressSettings@@@Z PROC ; lodepng_compress_settings_init, COMDAT
; _settings$ = ecx

; 2230 :   /*compress with dynamic huffman tree (not in the mathematical sense, just not the predefined one)*/
; 2231 :   settings->btype = 2;

  00000	c7 01 02 00 00
	00		 mov	 DWORD PTR [ecx], 2

; 2232 :   settings->use_lz77 = 1;

  00006	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1

; 2233 :   settings->windowsize = DEFAULT_WINDOWSIZE;

  0000d	c7 41 08 00 08
	00 00		 mov	 DWORD PTR [ecx+8], 2048	; 00000800H

; 2234 :   settings->minmatch = 3;

  00014	c7 41 0c 03 00
	00 00		 mov	 DWORD PTR [ecx+12], 3

; 2235 :   settings->nicematch = 128;

  0001b	c7 41 10 80 00
	00 00		 mov	 DWORD PTR [ecx+16], 128	; 00000080H

; 2236 :   settings->lazymatching = 1;

  00022	c7 41 14 01 00
	00 00		 mov	 DWORD PTR [ecx+20], 1

; 2237 : 
; 2238 :   settings->custom_zlib = 0;

  00029	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 2239 :   settings->custom_deflate = 0;

  00030	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 2240 :   settings->custom_context = 0;

  00037	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 2241 : }

  0003e	c3		 ret	 0
?lodepng_compress_settings_init@@YAXPAULodePNGCompressSettings@@@Z ENDP ; lodepng_compress_settings_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_decompress_settings_init@@YAXPAULodePNGDecompressSettings@@@Z
_TEXT	SEGMENT
?lodepng_decompress_settings_init@@YAXPAULodePNGDecompressSettings@@@Z PROC ; lodepng_decompress_settings_init, COMDAT
; _settings$ = ecx

; 2252 :   settings->ignore_adler32 = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 2253 : 
; 2254 :   settings->custom_zlib = 0;

  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 2255 :   settings->custom_inflate = 0;

  0000d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 2256 :   settings->custom_context = 0;

  00014	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 2257 : }

  0001b	c3		 ret	 0
?lodepng_decompress_settings_init@@YAXPAULodePNGDecompressSettings@@@Z ENDP ; lodepng_decompress_settings_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_crc32@@YAIPBEI@Z
_TEXT	SEGMENT
?lodepng_crc32@@YAIPBEI@Z PROC				; lodepng_crc32, COMDAT
; _buf$ = ecx
; _len$ = edx

; 2313 : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b fa		 mov	 edi, edx

; 2314 :   unsigned c = 0xffffffffL;

  00004	83 c8 ff	 or	 eax, -1

; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)

  00007	33 f6		 xor	 esi, esi
  00009	85 ff		 test	 edi, edi
  0000b	74 1e		 je	 SHORT $LN1@lodepng_cr
  0000d	8d 49 00	 npad	 3
$LL3@lodepng_cr:

; 2318 :   {
; 2319 :     c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);

  00010	0f b6 14 0e	 movzx	 edx, BYTE PTR [esi+ecx]
  00014	33 d0		 xor	 edx, eax
  00016	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0001c	c1 e8 08	 shr	 eax, 8
  0001f	33 04 95 00 00
	00 00		 xor	 eax, DWORD PTR _lodepng_crc32_table[edx*4]
  00026	46		 inc	 esi
  00027	3b f7		 cmp	 esi, edi
  00029	72 e5		 jb	 SHORT $LL3@lodepng_cr
$LN1@lodepng_cr:
  0002b	5f		 pop	 edi

; 2320 :   }
; 2321 :   return c ^ 0xffffffffL;

  0002c	f7 d0		 not	 eax
  0002e	5e		 pop	 esi

; 2322 : }

  0002f	c3		 ret	 0
?lodepng_crc32@@YAIPBEI@Z ENDP				; lodepng_crc32
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?readBitFromReversedStream@@YAEPAIPBE@Z
_TEXT	SEGMENT
?readBitFromReversedStream@@YAEPAIPBE@Z PROC		; readBitFromReversedStream, COMDAT
; _bitpointer$ = ecx
; _bitstream$ = edx

; 2329 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);

  00004	b1 07		 mov	 cl, 7
  00006	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00008	8a c3		 mov	 al, bl
  0000a	24 07		 and	 al, 7
  0000c	2a c8		 sub	 cl, al
  0000e	8b c3		 mov	 eax, ebx
  00010	c1 e8 03	 shr	 eax, 3
  00013	8a 04 10	 mov	 al, BYTE PTR [eax+edx]
  00016	d2 e8		 shr	 al, cl

; 2331 :   (*bitpointer)++;

  00018	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0001b	89 0e		 mov	 DWORD PTR [esi], ecx
  0001d	5e		 pop	 esi
  0001e	24 01		 and	 al, 1
  00020	5b		 pop	 ebx

; 2332 :   return result;
; 2333 : }

  00021	c3		 ret	 0
?readBitFromReversedStream@@YAEPAIPBE@Z ENDP		; readBitFromReversedStream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?readBitsFromReversedStream@@YAIPAIPBEI@Z
_TEXT	SEGMENT
_bitstream$1$ = -8					; size = 4
_bitpointer$1$ = -4					; size = 4
_nbits$ = 8						; size = 4
?readBitsFromReversedStream@@YAIPAIPBEI@Z PROC		; readBitsFromReversedStream, COMDAT
; _bitpointer$ = ecx
; _bitstream$ = edx

; 2336 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)

  00006	8b 45 08	 mov	 eax, DWORD PTR _nbits$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d 70 ff	 lea	 esi, DWORD PTR [eax-1]
  0000e	33 ff		 xor	 edi, edi
  00010	89 55 f8	 mov	 DWORD PTR _bitstream$1$[ebp], edx
  00013	89 4d fc	 mov	 DWORD PTR _bitpointer$1$[ebp], ecx
  00016	3b f0		 cmp	 esi, eax
  00018	73 3b		 jae	 SHORT $LN11@readBitsFr
  0001a	53		 push	 ebx
  0001b	eb 03 8d 49 00	 npad	 5
$LL3@readBitsFr:

; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);

  00020	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00022	8a c3		 mov	 al, bl
  00024	24 07		 and	 al, 7
  00026	b1 07		 mov	 cl, 7
  00028	2a c8		 sub	 cl, al
  0002a	8b c3		 mov	 eax, ebx
  0002c	c1 e8 03	 shr	 eax, 3
  0002f	8a 14 10	 mov	 dl, BYTE PTR [eax+edx]
  00032	d2 ea		 shr	 dl, cl

; 2331 :   (*bitpointer)++;

  00034	8b 4d fc	 mov	 ecx, DWORD PTR _bitpointer$1$[ebp]
  00037	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0003a	89 01		 mov	 DWORD PTR [ecx], eax
  0003c	80 e2 01	 and	 dl, 1

; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;

  0003f	0f b6 d2	 movzx	 edx, dl
  00042	8b ce		 mov	 ecx, esi
  00044	d3 e2		 shl	 edx, cl
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _bitpointer$1$[ebp]
  00049	4e		 dec	 esi
  0004a	03 fa		 add	 edi, edx
  0004c	8b 55 f8	 mov	 edx, DWORD PTR _bitstream$1$[ebp]
  0004f	3b 75 08	 cmp	 esi, DWORD PTR _nbits$[ebp]
  00052	72 cc		 jb	 SHORT $LL3@readBitsFr
  00054	5b		 pop	 ebx
$LN11@readBitsFr:

; 2342 :   }
; 2343 :   return result;

  00055	8b c7		 mov	 eax, edi
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi

; 2344 : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?readBitsFromReversedStream@@YAIPAIPBEI@Z ENDP		; readBitsFromReversedStream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?setBitOfReversedStream0@@YAXPAIPAEE@Z
_TEXT	SEGMENT
_bit$ = 8						; size = 1
?setBitOfReversedStream0@@YAXPAIPAEE@Z PROC		; setBitOfReversedStream0, COMDAT
; _bitpointer$ = ecx
; _bitstream$ = edx

; 2348 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)

  00004	8a 5d 08	 mov	 bl, BYTE PTR _bit$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	84 db		 test	 bl, bl
  0000c	74 18		 je	 SHORT $LN4@setBitOfRe

; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));

  0000e	56		 push	 esi
  0000f	8b 37		 mov	 esi, DWORD PTR [edi]
  00011	8b c6		 mov	 eax, esi
  00013	83 e6 07	 and	 esi, 7
  00016	b9 07 00 00 00	 mov	 ecx, 7
  0001b	2b ce		 sub	 ecx, esi
  0001d	d2 e3		 shl	 bl, cl
  0001f	c1 e8 03	 shr	 eax, 3
  00022	5e		 pop	 esi
  00023	08 1c 10	 or	 BYTE PTR [eax+edx], bl
$LN4@setBitOfRe:

; 2354 :   }
; 2355 :   (*bitpointer)++;

  00026	ff 07		 inc	 DWORD PTR [edi]
  00028	5f		 pop	 edi
  00029	5b		 pop	 ebx

; 2356 : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?setBitOfReversedStream0@@YAXPAIPAEE@Z ENDP		; setBitOfReversedStream0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?setBitOfReversedStream@@YAXPAIPAEE@Z
_TEXT	SEGMENT
_bit$ = 8						; size = 1
?setBitOfReversedStream@@YAXPAIPAEE@Z PROC		; setBitOfReversedStream, COMDAT
; _bitpointer$ = ecx
; _bitstream$ = edx

; 2360 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));

  00007	b9 07 00 00 00	 mov	 ecx, 7
  0000c	8b 37		 mov	 esi, DWORD PTR [edi]
  0000e	8b c6		 mov	 eax, esi
  00010	c1 e8 03	 shr	 eax, 3
  00013	03 d0		 add	 edx, eax
  00015	8b c6		 mov	 eax, esi
  00017	23 c1		 and	 eax, ecx
  00019	2b c8		 sub	 ecx, eax
  0001b	b0 01		 mov	 al, 1
  0001d	d2 e0		 shl	 al, cl
  0001f	80 7d 08 00	 cmp	 BYTE PTR _bit$[ebp], 0
  00023	75 0d		 jne	 SHORT $LN2@setBitOfRe
  00025	f6 d0		 not	 al
  00027	20 02		 and	 BYTE PTR [edx], al

; 2364 :   (*bitpointer)++;

  00029	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0002c	89 07		 mov	 DWORD PTR [edi], eax
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi

; 2365 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN2@setBitOfRe:

; 2363 :   else         bitstream[(*bitpointer) >> 3] |=  (1 << (7 - ((*bitpointer) & 0x7)));

  00032	08 02		 or	 BYTE PTR [edx], al

; 2364 :   (*bitpointer)++;

  00034	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00037	89 07		 mov	 DWORD PTR [edi], eax
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi

; 2365 : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?setBitOfReversedStream@@YAXPAIPAEE@Z ENDP		; setBitOfReversedStream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_chunk_length@@YAIPBE@Z
_TEXT	SEGMENT
?lodepng_chunk_length@@YAIPBE@Z PROC			; lodepng_chunk_length, COMDAT
; _chunk$ = ecx

; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];

  00000	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00003	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]

; 2373 :   return lodepng_read32bitInt(&chunk[0]);

  00007	c1 e0 08	 shl	 eax, 8
  0000a	0b c2		 or	 eax, edx

; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];

  0000c	0f b6 51 02	 movzx	 edx, BYTE PTR [ecx+2]
  00010	0f b6 49 03	 movzx	 ecx, BYTE PTR [ecx+3]
  00014	c1 e0 08	 shl	 eax, 8

; 2373 :   return lodepng_read32bitInt(&chunk[0]);

  00017	0b c2		 or	 eax, edx

; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];

  00019	c1 e0 08	 shl	 eax, 8
  0001c	0b c1		 or	 eax, ecx

; 2374 : }

  0001e	c3		 ret	 0
?lodepng_chunk_length@@YAIPBE@Z ENDP			; lodepng_chunk_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_chunk_type_equals@@YAEPBEPBD@Z
_TEXT	SEGMENT
?lodepng_chunk_type_equals@@YAEPBEPBD@Z PROC		; lodepng_chunk_type_equals, COMDAT
; _chunk$ = ecx
; _type$ = edx

; 2384 : {

  00000	56		 push	 esi

; 2385 :   if(strlen(type) != 4) return 0;

  00001	8b f2		 mov	 esi, edx
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx
  00006	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00009	8d a4 24 00 00
	00 00		 npad	 7
$LL6@lodepng_ch:
  00010	8a 06		 mov	 al, BYTE PTR [esi]
  00012	46		 inc	 esi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL6@lodepng_ch
  00017	2b f1		 sub	 esi, ecx
  00019	83 fe 04	 cmp	 esi, 4
  0001c	75 34		 jne	 SHORT $LN4@lodepng_ch

; 2386 :   return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);

  0001e	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  00022	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00025	3b c8		 cmp	 ecx, eax
  00027	75 29		 jne	 SHORT $LN4@lodepng_ch
  00029	0f b6 4f 05	 movzx	 ecx, BYTE PTR [edi+5]
  0002d	0f be 42 01	 movsx	 eax, BYTE PTR [edx+1]
  00031	3b c8		 cmp	 ecx, eax
  00033	75 1d		 jne	 SHORT $LN4@lodepng_ch
  00035	0f b6 4f 06	 movzx	 ecx, BYTE PTR [edi+6]
  00039	0f be 42 02	 movsx	 eax, BYTE PTR [edx+2]
  0003d	3b c8		 cmp	 ecx, eax
  0003f	75 11		 jne	 SHORT $LN4@lodepng_ch
  00041	0f b6 4f 07	 movzx	 ecx, BYTE PTR [edi+7]
  00045	0f be 42 03	 movsx	 eax, BYTE PTR [edx+3]
  00049	3b c8		 cmp	 ecx, eax
  0004b	75 05		 jne	 SHORT $LN4@lodepng_ch
  0004d	5f		 pop	 edi
  0004e	b0 01		 mov	 al, 1
  00050	5e		 pop	 esi

; 2387 : }

  00051	c3		 ret	 0
$LN4@lodepng_ch:
  00052	5f		 pop	 edi

; 2386 :   return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);

  00053	32 c0		 xor	 al, al
  00055	5e		 pop	 esi

; 2387 : }

  00056	c3		 ret	 0
?lodepng_chunk_type_equals@@YAEPBEPBD@Z ENDP		; lodepng_chunk_type_equals
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_chunk_ancillary@@YAEPBE@Z
_TEXT	SEGMENT
?lodepng_chunk_ancillary@@YAEPBE@Z PROC			; lodepng_chunk_ancillary, COMDAT
; _chunk$ = ecx

; 2391 :   return((chunk[4] & 32) != 0);

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]
  00003	c0 e8 05	 shr	 al, 5
  00006	24 01		 and	 al, 1

; 2392 : }

  00008	c3		 ret	 0
?lodepng_chunk_ancillary@@YAEPBE@Z ENDP			; lodepng_chunk_ancillary
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_chunk_data_const@@YAPBEPBE@Z
_TEXT	SEGMENT
?lodepng_chunk_data_const@@YAPBEPBE@Z PROC		; lodepng_chunk_data_const, COMDAT
; _chunk$ = ecx

; 2411 :   return &chunk[8];

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 2412 : }

  00003	c3		 ret	 0
?lodepng_chunk_data_const@@YAPBEPBE@Z ENDP		; lodepng_chunk_data_const
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_chunk_check_crc@@YAIPBE@Z
_TEXT	SEGMENT
?lodepng_chunk_check_crc@@YAIPBE@Z PROC			; lodepng_chunk_check_crc, COMDAT
; _chunk$ = ecx

; 2415 : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 2416 :   unsigned length = lodepng_chunk_length(chunk);

  00004	0f b6 13	 movzx	 edx, BYTE PTR [ebx]
  00007	0f b6 43 01	 movzx	 eax, BYTE PTR [ebx+1]
  0000b	c1 e2 08	 shl	 edx, 8
  0000e	0b d0		 or	 edx, eax
  00010	0f b6 43 02	 movzx	 eax, BYTE PTR [ebx+2]

; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];

  00014	c1 e2 08	 shl	 edx, 8

; 2416 :   unsigned length = lodepng_chunk_length(chunk);

  00017	0b d0		 or	 edx, eax
  00019	0f b6 43 03	 movzx	 eax, BYTE PTR [ebx+3]
  0001d	57		 push	 edi

; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];

  0001e	c1 e2 08	 shl	 edx, 8
  00021	0b d0		 or	 edx, eax

; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
; 945  :     (*bp)++;
; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);
; 965  :   generateFixedDistanceTree(tree_d);
; 966  : }
; 967  : 
; 968  : /*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
; 969  : static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
; 970  :                                       const unsigned char* in, size_t* bp, size_t inlength)
; 971  : {
; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;
; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/
; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;
; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;
; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;
; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)
; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
; 1009 :     if(error) break;
; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;
; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;
; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;
; 1020 :     while(i < HLIT + HDIST)
; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
; 1023 :       if(code <= 15) /*a length code*/
; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;
; 1026 :         else bitlen_d[i - HLIT] = code;
; 1027 :         i++;
; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/
; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);
; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];
; 1040 :         else value = bitlen_d[i - HLIT - 1];
; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)
; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
; 1045 :           if(i < HLIT) bitlen_ll[i] = value;
; 1046 :           else bitlen_d[i - HLIT] = value;
; 1047 :           i++;
; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/
; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);
; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)
; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1063 :           else bitlen_d[i - HLIT] = 0;
; 1064 :           i++;
; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/
; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);
; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)
; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1080 :           else bitlen_d[i - HLIT] = 0;
; 1081 :           i++;
; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))
; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;
; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/
; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;
; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 1102 :     if(error) break;
; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
; 1104 : 
; 1105 :     break; /*end of error-while*/
; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;
; 1114 : }
; 1115 : 
; 1116 : /*inflate a block with dynamic of fixed Huffman tree*/
; 1117 : static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
; 1118 :                                     size_t* pos, size_t inlength, unsigned btype)
; 1119 : {
; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;
; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/
; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/
; 1136 :     {
; 1137 :       if((*pos) >= out->size)
; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);
; 1143 :       (*pos)++;
; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);
; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
; 1161 :       if(code_d > 29)
; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;
; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/
; 1170 :         break;
; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);
; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);
; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)
; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)
; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];
; 1193 :         (*pos)++;
; 1194 :         backward++;
; 1195 :         if(backward >= start) backward = start - distance;
; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)
; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;
; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;
; 1215 : }
; 1216 : 
; 1217 : static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
; 1218 : {
; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;
; 1223 :   p = (*bp) / 8; /*byte position*/
; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/
; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;
; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;
; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)
; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];
; 1241 : 
; 1242 :   (*bp) = p * 8;
; 1243 : 
; 1244 :   return error;
; 1245 : }
; 1246 : 
; 1247 : static unsigned lodepng_inflatev(ucvector* out,
; 1248 :                                  const unsigned char* in, size_t insize,
; 1249 :                                  const LodePNGDecompressSettings* settings)
; 1250 : {
; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;
; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/
; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)
; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
; 1264 :     BFINAL = readBitFromStream(&bp, in);
; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);
; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
; 1271 : 
; 1272 :     if(error) return error;
; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/
; 1277 : 
; 1278 :   return error;
; 1279 : }
; 1280 : 
; 1281 : unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
; 1282 :                          const unsigned char* in, size_t insize,
; 1283 :                          const LodePNGDecompressSettings* settings)
; 1284 : {
; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);
; 1289 :   *out = v.data;
; 1290 :   *outsize = v.size;
; 1291 :   return error;
; 1292 : }
; 1293 : 
; 1294 : static unsigned inflate(unsigned char** out, size_t* outsize,
; 1295 :                         const unsigned char* in, size_t insize,
; 1296 :                         const LodePNGDecompressSettings* settings)
; 1297 : {
; 1298 :   if(settings->custom_inflate)
; 1299 :   {
; 1300 :     return settings->custom_inflate(out, outsize, in, insize, settings);
; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }
; 1307 : 
; 1308 : #endif /*LODEPNG_COMPILE_DECODER*/
; 1309 : 
; 1310 : #ifdef LODEPNG_COMPILE_ENCODER
; 1311 : 
; 1312 : /* ////////////////////////////////////////////////////////////////////////// */
; 1313 : /* / Deflator (Compressor)                                                  / */
; 1314 : /* ////////////////////////////////////////////////////////////////////////// */
; 1315 : 
; 1316 : static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;
; 1317 : 
; 1318 : /*bitlen is the size in bits of the code*/
; 1319 : static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)
; 1320 : {
; 1321 :   addBitsToStreamReversed(bp, compressed, code, bitlen);
; 1322 : }
; 1323 : 
; 1324 : /*search the index in the array, that has the largest value smaller than or equal to the given value,
; 1325 : given array must be sorted (if no value is smaller, it returns the size of the given array)*/
; 1326 : static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)
; 1327 : {
; 1328 :   /*linear search implementation*/
; 1329 :   /*for(size_t i = 1; i < array_size; i++) if(array[i] > value) return i - 1;
; 1330 :   return array_size - 1;*/
; 1331 : 
; 1332 :   /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
; 1333 :   size_t left  = 1;
; 1334 :   size_t right = array_size - 1;
; 1335 :   while(left <= right)
; 1336 :   {
; 1337 :     size_t mid = (left + right) / 2;
; 1338 :     if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
; 1339 :     else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
; 1340 :     else return mid - 1;
; 1341 :   }
; 1342 :   return array_size - 1;
; 1343 : }
; 1344 : 
; 1345 : static void addLengthDistance(uivector* values, size_t length, size_t distance)
; 1346 : {
; 1347 :   /*values in encoded vector are those used by deflate:
; 1348 :   0-255: literal bytes
; 1349 :   256: end
; 1350 :   257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
; 1351 :   286-287: invalid*/
; 1352 : 
; 1353 :   unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
; 1354 :   unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
; 1355 :   unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
; 1356 :   unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);
; 1357 : 
; 1358 :   uivector_push_back(values, length_code + FIRST_LENGTH_CODE_INDEX);
; 1359 :   uivector_push_back(values, extra_length);
; 1360 :   uivector_push_back(values, dist_code);
; 1361 :   uivector_push_back(values, extra_distance);
; 1362 : }
; 1363 : 
; 1364 : static const unsigned HASH_NUM_VALUES = 65536;
; 1365 : static const unsigned HASH_NUM_CHARACTERS = 3;
; 1366 : static const unsigned HASH_SHIFT = 2;
; 1367 : /*
; 1368 : The HASH_NUM_CHARACTERS value is used to make encoding faster by using longer
; 1369 : sequences to generate a hash value from the stream bytes. Setting it to 3
; 1370 : gives exactly the same compression as the brute force method, since deflate's
; 1371 : run length encoding starts with lengths of 3. Setting it to higher values,
; 1372 : like 6, can make the encoding faster (not always though!), but will cause the
; 1373 : encoding to miss any length between 3 and this value, so that the compression
; 1374 : may be worse (but this can vary too depending on the image, sometimes it is
; 1375 : even a bit better instead).
; 1376 : The HASH_NUM_VALUES is the amount of unique possible hash values that
; 1377 : combinations of bytes can give, the higher it is the more memory is needed, but
; 1378 : if it's too low the advantage of hashing is gone.
; 1379 : */
; 1380 : 
; 1381 : typedef struct Hash
; 1382 : {
; 1383 :   int* head; /*hash value to head circular pos*/
; 1384 :   int* val; /*circular pos to hash value*/
; 1385 :   /*circular pos to prev circular pos*/
; 1386 :   unsigned short* chain;
; 1387 :   unsigned short* zeros;
; 1388 : } Hash;
; 1389 : 
; 1390 : static unsigned hash_init(Hash* hash, unsigned windowsize)
; 1391 : {
; 1392 :   unsigned i;
; 1393 :   hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
; 1394 :   hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
; 1395 :   hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1396 :   hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1397 : 
; 1398 :   if(!hash->head || !hash->val || !hash->chain || !hash->zeros) return 83; /*alloc fail*/
; 1399 : 
; 1400 :   /*initialize hash table*/
; 1401 :   for(i = 0; i < HASH_NUM_VALUES; i++) hash->head[i] = -1;
; 1402 :   for(i = 0; i < windowsize; i++) hash->val[i] = -1;
; 1403 :   for(i = 0; i < windowsize; i++) hash->chain[i] = i; /*same value as index indicates uninitialized*/
; 1404 : 
; 1405 :   return 0;
; 1406 : }
; 1407 : 
; 1408 : static void hash_cleanup(Hash* hash)
; 1409 : {
; 1410 :   lodepng_free(hash->head);
; 1411 :   lodepng_free(hash->val);
; 1412 :   lodepng_free(hash->chain);
; 1413 :   lodepng_free(hash->zeros);
; 1414 : }
; 1415 : 
; 1416 : static unsigned getHash(const unsigned char* data, size_t size, size_t pos)
; 1417 : {
; 1418 :   unsigned result = 0;
; 1419 :   size_t amount, i;
; 1420 :   if(pos >= size) return 0;
; 1421 :   amount = HASH_NUM_CHARACTERS;
; 1422 :   if(pos + amount >= size) amount = size - pos;
; 1423 :   for(i = 0; i < amount; i++) result ^= (data[pos + i] << (i * HASH_SHIFT));
; 1424 :   return result % HASH_NUM_VALUES;
; 1425 : }
; 1426 : 
; 1427 : static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)
; 1428 : {
; 1429 :   const unsigned char* start = data + pos;
; 1430 :   const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
; 1431 :   if(end > data + size) end = data + size;
; 1432 :   data = start;
; 1433 :   while (data != end && *data == 0) data++;
; 1434 :   /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
; 1435 :   return (unsigned)(data - start);
; 1436 : }
; 1437 : 
; 1438 : static void updateHashChain(Hash* hash, size_t pos, int hashval, unsigned windowsize)
; 1439 : {
; 1440 :   unsigned wpos = pos % windowsize;
; 1441 :   hash->val[wpos] = hashval;
; 1442 :   if(hash->head[hashval] != -1) hash->chain[wpos] = hash->head[hashval];
; 1443 :   hash->head[hashval] = wpos;
; 1444 : }
; 1445 : 
; 1446 : /*
; 1447 : LZ77-encode the data. Return value is error code. The input are raw bytes, the output
; 1448 : is in the form of unsigned integers with codes representing for example literal bytes, or
; 1449 : length/distance pairs.
; 1450 : It uses a hash table technique to let it encode faster. When doing LZ77 encoding, a
; 1451 : sliding window (of windowsize) is used, and all past bytes in that window can be used as
; 1452 : the "dictionary". A brute force search through all possible distances would be slow, and
; 1453 : this hash technique is one out of several ways to speed this up.
; 1454 : */
; 1455 : static unsigned encodeLZ77(uivector* out, Hash* hash,
; 1456 :                            const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
; 1457 :                            unsigned minmatch, unsigned nicematch, unsigned lazymatching)
; 1458 : {
; 1459 :   unsigned short numzeros = 0;
; 1460 :   int usezeros = windowsize >= 8192; /*for small window size, the 'max chain length' optimization does a better job*/
; 1461 :   unsigned pos, i, error = 0;
; 1462 :   /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
; 1463 :   unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8;
; 1464 :   unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;
; 1465 : 
; 1466 :   if(!error)
; 1467 :   {
; 1468 :     unsigned offset; /*the offset represents the distance in LZ77 terminology*/
; 1469 :     unsigned length;
; 1470 :     unsigned lazy = 0;
; 1471 :     unsigned lazylength = 0, lazyoffset = 0;
; 1472 :     unsigned hashval;
; 1473 :     unsigned current_offset, current_length;
; 1474 :     const unsigned char *lastptr, *foreptr, *backptr;
; 1475 :     unsigned short hashpos, prevpos;
; 1476 : 
; 1477 :     for(pos = inpos; pos < insize; pos++)
; 1478 :     {
; 1479 :       size_t wpos = pos % windowsize; /*position for in 'circular' hash buffers*/
; 1480 : 
; 1481 :       hashval = getHash(in, insize, pos);
; 1482 :       updateHashChain(hash, pos, hashval, windowsize);
; 1483 : 
; 1484 :       if(usezeros && hashval == 0)
; 1485 :       {
; 1486 :         numzeros = countZeros(in, insize, pos);
; 1487 :         hash->zeros[wpos] = numzeros;
; 1488 :       }
; 1489 : 
; 1490 :       /*the length and offset found for the current position*/
; 1491 :       length = 0;
; 1492 :       offset = 0;
; 1493 : 
; 1494 :       prevpos = hash->head[hashval];
; 1495 :       hashpos = hash->chain[prevpos];
; 1496 : 
; 1497 :       lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];
; 1498 : 
; 1499 :       /*search for the longest string*/
; 1500 :       if(hash->val[wpos] == (int)hashval)
; 1501 :       {
; 1502 :         unsigned chainlength = 0;
; 1503 :         for(;;)
; 1504 :         {
; 1505 :           /*stop when went completely around the circular buffer*/
; 1506 :           if(prevpos < wpos && hashpos > prevpos && hashpos <= wpos) break;
; 1507 :           if(prevpos > wpos && (hashpos <= wpos || hashpos > prevpos)) break;
; 1508 :           if(chainlength++ >= maxchainlength) break;
; 1509 : 
; 1510 :           current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;
; 1511 :           if(current_offset > 0)
; 1512 :           {
; 1513 :             /*test the next characters*/
; 1514 :             foreptr = &in[pos];
; 1515 :             backptr = &in[pos - current_offset];
; 1516 : 
; 1517 :             /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
; 1518 :             if(usezeros && hashval == 0 && hash->val[hashpos] == 0 /*hashval[hashpos] may be out of date*/)
; 1519 :             {
; 1520 :               unsigned short skip = hash->zeros[hashpos];
; 1521 :               if(skip > numzeros) skip = numzeros;
; 1522 :               backptr += skip;
; 1523 :               foreptr += skip;
; 1524 :             }
; 1525 : 
; 1526 :             /* multiple checks at once per array bounds check */
; 1527 :             while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
; 1528 :             {
; 1529 :               ++backptr;
; 1530 :               ++foreptr;
; 1531 :             }
; 1532 :             current_length = (unsigned)(foreptr - &in[pos]);
; 1533 : 
; 1534 :             if(current_length > length)
; 1535 :             {
; 1536 :               length = current_length; /*the longest length*/
; 1537 :               offset = current_offset; /*the offset that is related to this longest length*/
; 1538 :               /*jump out once a length of max length is found (speed gain)*/
; 1539 :               if(current_length >= nicematch || current_length == MAX_SUPPORTED_DEFLATE_LENGTH) break;
; 1540 :             }
; 1541 :           }
; 1542 : 
; 1543 :           if(hashpos == hash->chain[hashpos]) break;
; 1544 : 
; 1545 :           prevpos = hashpos;
; 1546 :           hashpos = hash->chain[hashpos];
; 1547 :         }
; 1548 :       }
; 1549 : 
; 1550 :       if(lazymatching)
; 1551 :       {
; 1552 :         if(!lazy && length >= 3 && length <= maxlazymatch && length < MAX_SUPPORTED_DEFLATE_LENGTH)
; 1553 :         {
; 1554 :           lazy = 1;
; 1555 :           lazylength = length;
; 1556 :           lazyoffset = offset;
; 1557 :           continue; /*try the next byte*/
; 1558 :         }
; 1559 :         if(lazy)
; 1560 :         {
; 1561 :           lazy = 0;
; 1562 :           if(pos == 0) ERROR_BREAK(81);
; 1563 :           if(length > lazylength + 1)
; 1564 :           {
; 1565 :             /*push the previous character as literal*/
; 1566 :             if(!uivector_push_back(out, in[pos - 1])) ERROR_BREAK(83 /*alloc fail*/);
; 1567 :           }
; 1568 :           else
; 1569 :           {
; 1570 :             length = lazylength;
; 1571 :             offset = lazyoffset;
; 1572 :             hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
; 1573 :             pos--;
; 1574 :           }
; 1575 :         }
; 1576 :       }
; 1577 :       if(length >= 3 && offset > windowsize) ERROR_BREAK(86 /*too big (or overflown negative) offset*/);
; 1578 : 
; 1579 :       /**encode it as length/distance pair or literal value**/
; 1580 :       if(length < 3) /*only lengths of 3 or higher are supported as length/distance pair*/
; 1581 :       {
; 1582 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1583 :       }
; 1584 :       else if(length < minmatch || (length == 3 && offset > 4096))
; 1585 :       {
; 1586 :         /*compensate for the fact that longer offsets have more extra bits, a
; 1587 :         length of only 3 may be not worth it then*/
; 1588 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1589 :       }
; 1590 :       else
; 1591 :       {
; 1592 :         addLengthDistance(out, length, offset);
; 1593 :         for(i = 1; i < length; i++)
; 1594 :         {
; 1595 :           pos++;
; 1596 :           hashval = getHash(in, insize, pos);
; 1597 :           updateHashChain(hash, pos, hashval, windowsize);
; 1598 :           if(usezeros && hashval == 0)
; 1599 :           {
; 1600 :             hash->zeros[pos % windowsize] = countZeros(in, insize, pos);
; 1601 :           }
; 1602 :         }
; 1603 :       }
; 1604 : 
; 1605 :     } /*end of the loop through each character of input*/
; 1606 :   } /*end of "if(!error)"*/
; 1607 : 
; 1608 :   return error;
; 1609 : }
; 1610 : 
; 1611 : /* /////////////////////////////////////////////////////////////////////////// */
; 1612 : 
; 1613 : static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)
; 1614 : {
; 1615 :   /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
; 1616 :   2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/
; 1617 : 
; 1618 :   size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
; 1619 :   unsigned datapos = 0;
; 1620 :   for(i = 0; i < numdeflateblocks; i++)
; 1621 :   {
; 1622 :     unsigned BFINAL, BTYPE, LEN, NLEN;
; 1623 :     unsigned char firstbyte;
; 1624 : 
; 1625 :     BFINAL = (i == numdeflateblocks - 1);
; 1626 :     BTYPE = 0;
; 1627 : 
; 1628 :     firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1) << 1) + ((BTYPE & 2) << 1));
; 1629 :     ucvector_push_back(out, firstbyte);
; 1630 : 
; 1631 :     LEN = 65535;
; 1632 :     if(datasize - datapos < 65535) LEN = (unsigned)datasize - datapos;
; 1633 :     NLEN = 65535 - LEN;
; 1634 : 
; 1635 :     ucvector_push_back(out, (unsigned char)(LEN % 256));
; 1636 :     ucvector_push_back(out, (unsigned char)(LEN / 256));
; 1637 :     ucvector_push_back(out, (unsigned char)(NLEN % 256));
; 1638 :     ucvector_push_back(out, (unsigned char)(NLEN / 256));
; 1639 : 
; 1640 :     /*Decompressed data*/
; 1641 :     for(j = 0; j < 65535 && datapos < datasize; j++)
; 1642 :     {
; 1643 :       ucvector_push_back(out, data[datapos++]);
; 1644 :     }
; 1645 :   }
; 1646 : 
; 1647 :   return 0;
; 1648 : }
; 1649 : 
; 1650 : /*
; 1651 : write the lz77-encoded data, which has lit, len and dist codes, to compressed stream using huffman trees.
; 1652 : tree_ll: the tree for lit and len codes.
; 1653 : tree_d: the tree for distance codes.
; 1654 : */
; 1655 : static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
; 1656 :                           const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
; 1657 : {
; 1658 :   size_t i = 0;
; 1659 :   for(i = 0; i < lz77_encoded->size; i++)
; 1660 :   {
; 1661 :     unsigned val = lz77_encoded->data[i];
; 1662 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_ll, val), HuffmanTree_getLength(tree_ll, val));
; 1663 :     if(val > 256) /*for a length code, 3 more things have to be added*/
; 1664 :     {
; 1665 :       unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
; 1666 :       unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
; 1667 :       unsigned length_extra_bits = lz77_encoded->data[++i];
; 1668 : 
; 1669 :       unsigned distance_code = lz77_encoded->data[++i];
; 1670 : 
; 1671 :       unsigned distance_index = distance_code;
; 1672 :       unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
; 1673 :       unsigned distance_extra_bits = lz77_encoded->data[++i];
; 1674 : 
; 1675 :       addBitsToStream(bp, out, length_extra_bits, n_length_extra_bits);
; 1676 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
; 1677 :                        HuffmanTree_getLength(tree_d, distance_code));
; 1678 :       addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
; 1679 :     }
; 1680 :   }
; 1681 : }
; 1682 : 
; 1683 : /*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
; 1684 : static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,
; 1685 :                                const unsigned char* data, size_t datapos, size_t dataend,
; 1686 :                                const LodePNGCompressSettings* settings, int final)
; 1687 : {
; 1688 :   unsigned error = 0;
; 1689 : 
; 1690 :   /*
; 1691 :   A block is compressed as follows: The PNG data is lz77 encoded, resulting in
; 1692 :   literal bytes and length/distance pairs. This is then huffman compressed with
; 1693 :   two huffman trees. One huffman tree is used for the lit and len values ("ll"),
; 1694 :   another huffman tree is used for the dist values ("d"). These two trees are
; 1695 :   stored using their code lengths, and to compress even more these code lengths
; 1696 :   are also run-length encoded and huffman compressed. This gives a huffman tree
; 1697 :   of code lengths "cl". The code lenghts used to describe this third tree are
; 1698 :   the code length code lengths ("clcl").
; 1699 :   */
; 1700 : 
; 1701 :   /*The lz77 encoded data, represented with integers since there will also be length and distance codes in it*/
; 1702 :   uivector lz77_encoded;
; 1703 :   HuffmanTree tree_ll; /*tree for lit,len values*/
; 1704 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1705 :   HuffmanTree tree_cl; /*tree for encoding the code lengths representing tree_ll and tree_d*/
; 1706 :   uivector frequencies_ll; /*frequency of lit,len codes*/
; 1707 :   uivector frequencies_d; /*frequency of dist codes*/
; 1708 :   uivector frequencies_cl; /*frequency of code length codes*/
; 1709 :   uivector bitlen_lld; /*lit,len,dist code lenghts (int bits), literally (without repeat codes).*/
; 1710 :   uivector bitlen_lld_e; /*bitlen_lld encoded with repeat codes (this is a rudemtary run length compression)*/
; 1711 :   /*bitlen_cl is the code length code lengths ("clcl"). The bit lengths of codes to represent tree_cl
; 1712 :   (these are written as is in the file, it would be crazy to compress these using yet another huffman
; 1713 :   tree that needs to be represented by yet another set of code lengths)*/
; 1714 :   uivector bitlen_cl;
; 1715 :   size_t datasize = dataend - datapos;
; 1716 : 
; 1717 :   /*
; 1718 :   Due to the huffman compression of huffman tree representations ("two levels"), there are some anologies:
; 1719 :   bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
; 1720 :   bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
; 1721 :   bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
; 1722 :   */
; 1723 : 
; 1724 :   unsigned BFINAL = final;
; 1725 :   size_t numcodes_ll, numcodes_d, i;
; 1726 :   unsigned HLIT, HDIST, HCLEN;
; 1727 : 
; 1728 :   uivector_init(&lz77_encoded);
; 1729 :   HuffmanTree_init(&tree_ll);
; 1730 :   HuffmanTree_init(&tree_d);
; 1731 :   HuffmanTree_init(&tree_cl);
; 1732 :   uivector_init(&frequencies_ll);
; 1733 :   uivector_init(&frequencies_d);
; 1734 :   uivector_init(&frequencies_cl);
; 1735 :   uivector_init(&bitlen_lld);
; 1736 :   uivector_init(&bitlen_lld_e);
; 1737 :   uivector_init(&bitlen_cl);
; 1738 : 
; 1739 :   /*This while loop never loops due to a break at the end, it is here to
; 1740 :   allow breaking out of it to the cleanup phase on error conditions.*/
; 1741 :   while(!error)
; 1742 :   {
; 1743 :     if(settings->use_lz77)
; 1744 :     {
; 1745 :       error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1746 :                          settings->minmatch, settings->nicematch, settings->lazymatching);
; 1747 :       if(error) break;
; 1748 :     }
; 1749 :     else
; 1750 :     {
; 1751 :       if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83 /*alloc fail*/);
; 1752 :       for(i = datapos; i < dataend; i++) lz77_encoded.data[i] = data[i]; /*no LZ77, but still will be Huffman compressed*/
; 1753 :     }
; 1754 : 
; 1755 :     if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1756 :     if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1757 : 
; 1758 :     /*Count the frequencies of lit, len and dist codes*/
; 1759 :     for(i = 0; i < lz77_encoded.size; i++)
; 1760 :     {
; 1761 :       unsigned symbol = lz77_encoded.data[i];
; 1762 :       frequencies_ll.data[symbol]++;
; 1763 :       if(symbol > 256)
; 1764 :       {
; 1765 :         unsigned dist = lz77_encoded.data[i + 2];
; 1766 :         frequencies_d.data[dist]++;
; 1767 :         i += 3;
; 1768 :       }
; 1769 :     }
; 1770 :     frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/
; 1771 : 
; 1772 :     /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
; 1773 :     error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
; 1774 :     if(error) break;
; 1775 :     /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
; 1776 :     error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
; 1777 :     if(error) break;
; 1778 : 
; 1779 :     numcodes_ll = tree_ll.numcodes; if(numcodes_ll > 286) numcodes_ll = 286;
; 1780 :     numcodes_d = tree_d.numcodes; if(numcodes_d > 30) numcodes_d = 30;
; 1781 :     /*store the code lengths of both generated trees in bitlen_lld*/
; 1782 :     for(i = 0; i < numcodes_ll; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
; 1783 :     for(i = 0; i < numcodes_d; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));
; 1784 : 
; 1785 :     /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
; 1786 :     17 (3-10 zeroes), 18 (11-138 zeroes)*/
; 1787 :     for(i = 0; i < (unsigned)bitlen_lld.size; i++)
; 1788 :     {
; 1789 :       unsigned j = 0; /*amount of repititions*/
; 1790 :       while(i + j + 1 < (unsigned)bitlen_lld.size && bitlen_lld.data[i + j + 1] == bitlen_lld.data[i]) j++;
; 1791 : 
; 1792 :       if(bitlen_lld.data[i] == 0 && j >= 2) /*repeat code for zeroes*/
; 1793 :       {
; 1794 :         j++; /*include the first zero*/
; 1795 :         if(j <= 10) /*repeat code 17 supports max 10 zeroes*/
; 1796 :         {
; 1797 :           uivector_push_back(&bitlen_lld_e, 17);
; 1798 :           uivector_push_back(&bitlen_lld_e, j - 3);
; 1799 :         }
; 1800 :         else /*repeat code 18 supports max 138 zeroes*/
; 1801 :         {
; 1802 :           if(j > 138) j = 138;
; 1803 :           uivector_push_back(&bitlen_lld_e, 18);
; 1804 :           uivector_push_back(&bitlen_lld_e, j - 11);
; 1805 :         }
; 1806 :         i += (j - 1);
; 1807 :       }
; 1808 :       else if(j >= 3) /*repeat code for value other than zero*/
; 1809 :       {
; 1810 :         size_t k;
; 1811 :         unsigned num = j / 6, rest = j % 6;
; 1812 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1813 :         for(k = 0; k < num; k++)
; 1814 :         {
; 1815 :           uivector_push_back(&bitlen_lld_e, 16);
; 1816 :           uivector_push_back(&bitlen_lld_e, 6 - 3);
; 1817 :         }
; 1818 :         if(rest >= 3)
; 1819 :         {
; 1820 :           uivector_push_back(&bitlen_lld_e, 16);
; 1821 :           uivector_push_back(&bitlen_lld_e, rest - 3);
; 1822 :         }
; 1823 :         else j -= rest;
; 1824 :         i += j;
; 1825 :       }
; 1826 :       else /*too short to benefit from repeat code*/
; 1827 :       {
; 1828 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1829 :       }
; 1830 :     }
; 1831 : 
; 1832 :     /*generate tree_cl, the huffmantree of huffmantrees*/
; 1833 : 
; 1834 :     if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1835 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1836 :     {
; 1837 :       frequencies_cl.data[bitlen_lld_e.data[i]]++;
; 1838 :       /*after a repeat code come the bits that specify the number of repetitions,
; 1839 :       those don't need to be in the frequencies_cl calculation*/
; 1840 :       if(bitlen_lld_e.data[i] >= 16) i++;
; 1841 :     }
; 1842 : 
; 1843 :     error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
; 1844 :                                             frequencies_cl.size, frequencies_cl.size, 7);
; 1845 :     if(error) break;
; 1846 : 
; 1847 :     if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
; 1848 :     for(i = 0; i < tree_cl.numcodes; i++)
; 1849 :     {
; 1850 :       /*lenghts of code length tree is in the order as specified by deflate*/
; 1851 :       bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
; 1852 :     }
; 1853 :     while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
; 1854 :     {
; 1855 :       /*remove zeros at the end, but minimum size must be 4*/
; 1856 :       if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
; 1857 :     }
; 1858 :     if(error) break;
; 1859 : 
; 1860 :     /*
; 1861 :     Write everything into the output
; 1862 : 
; 1863 :     After the BFINAL and BTYPE, the dynamic block consists out of the following:
; 1864 :     - 5 bits HLIT, 5 bits HDIST, 4 bits HCLEN
; 1865 :     - (HCLEN+4)*3 bits code lengths of code length alphabet
; 1866 :     - HLIT + 257 code lenghts of lit/length alphabet (encoded using the code length
; 1867 :       alphabet, + possible repetition codes 16, 17, 18)
; 1868 :     - HDIST + 1 code lengths of distance alphabet (encoded using the code length
; 1869 :       alphabet, + possible repetition codes 16, 17, 18)
; 1870 :     - compressed data
; 1871 :     - 256 (end code)
; 1872 :     */
; 1873 : 
; 1874 :     /*Write block type*/
; 1875 :     addBitToStream(bp, out, BFINAL);
; 1876 :     addBitToStream(bp, out, 0); /*first bit of BTYPE "dynamic"*/
; 1877 :     addBitToStream(bp, out, 1); /*second bit of BTYPE "dynamic"*/
; 1878 : 
; 1879 :     /*write the HLIT, HDIST and HCLEN values*/
; 1880 :     HLIT = (unsigned)(numcodes_ll - 257);
; 1881 :     HDIST = (unsigned)(numcodes_d - 1);
; 1882 :     HCLEN = (unsigned)bitlen_cl.size - 4;
; 1883 :     /*trim zeroes for HCLEN. HLIT and HDIST were already trimmed at tree creation*/
; 1884 :     while(!bitlen_cl.data[HCLEN + 4 - 1] && HCLEN > 0) HCLEN--;
; 1885 :     addBitsToStream(bp, out, HLIT, 5);
; 1886 :     addBitsToStream(bp, out, HDIST, 5);
; 1887 :     addBitsToStream(bp, out, HCLEN, 4);
; 1888 : 
; 1889 :     /*write the code lenghts of the code length alphabet*/
; 1890 :     for(i = 0; i < HCLEN + 4; i++) addBitsToStream(bp, out, bitlen_cl.data[i], 3);
; 1891 : 
; 1892 :     /*write the lenghts of the lit/len AND the dist alphabet*/
; 1893 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1894 :     {
; 1895 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
; 1896 :                        HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
; 1897 :       /*extra bits of repeat codes*/
; 1898 :       if(bitlen_lld_e.data[i] == 16) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 2);
; 1899 :       else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
; 1900 :       else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
; 1901 :     }
; 1902 : 
; 1903 :     /*write the compressed data symbols*/
; 1904 :     writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1905 :     /*error: the length of the end code 256 must be larger than 0*/
; 1906 :     if(HuffmanTree_getLength(&tree_ll, 256) == 0) ERROR_BREAK(64);
; 1907 : 
; 1908 :     /*write the end code*/
; 1909 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1910 : 
; 1911 :     break; /*end of error-while*/
; 1912 :   }
; 1913 : 
; 1914 :   /*cleanup*/
; 1915 :   uivector_cleanup(&lz77_encoded);
; 1916 :   HuffmanTree_cleanup(&tree_ll);
; 1917 :   HuffmanTree_cleanup(&tree_d);
; 1918 :   HuffmanTree_cleanup(&tree_cl);
; 1919 :   uivector_cleanup(&frequencies_ll);
; 1920 :   uivector_cleanup(&frequencies_d);
; 1921 :   uivector_cleanup(&frequencies_cl);
; 1922 :   uivector_cleanup(&bitlen_lld_e);
; 1923 :   uivector_cleanup(&bitlen_lld);
; 1924 :   uivector_cleanup(&bitlen_cl);
; 1925 : 
; 1926 :   return error;
; 1927 : }
; 1928 : 
; 1929 : static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,
; 1930 :                              const unsigned char* data,
; 1931 :                              size_t datapos, size_t dataend,
; 1932 :                              const LodePNGCompressSettings* settings, int final)
; 1933 : {
; 1934 :   HuffmanTree tree_ll; /*tree for literal values and length codes*/
; 1935 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1936 : 
; 1937 :   unsigned BFINAL = final;
; 1938 :   unsigned error = 0;
; 1939 :   size_t i;
; 1940 : 
; 1941 :   HuffmanTree_init(&tree_ll);
; 1942 :   HuffmanTree_init(&tree_d);
; 1943 : 
; 1944 :   generateFixedLitLenTree(&tree_ll);
; 1945 :   generateFixedDistanceTree(&tree_d);
; 1946 : 
; 1947 :   addBitToStream(bp, out, BFINAL);
; 1948 :   addBitToStream(bp, out, 1); /*first bit of BTYPE*/
; 1949 :   addBitToStream(bp, out, 0); /*second bit of BTYPE*/
; 1950 : 
; 1951 :   if(settings->use_lz77) /*LZ77 encoded*/
; 1952 :   {
; 1953 :     uivector lz77_encoded;
; 1954 :     uivector_init(&lz77_encoded);
; 1955 :     error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1956 :                        settings->minmatch, settings->nicematch, settings->lazymatching);
; 1957 :     if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1958 :     uivector_cleanup(&lz77_encoded);
; 1959 :   }
; 1960 :   else /*no LZ77, but still will be Huffman compressed*/
; 1961 :   {
; 1962 :     for(i = datapos; i < dataend; i++)
; 1963 :     {
; 1964 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
; 1965 :     }
; 1966 :   }
; 1967 :   /*add END code*/
; 1968 :   if(!error) addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1969 : 
; 1970 :   /*cleanup*/
; 1971 :   HuffmanTree_cleanup(&tree_ll);
; 1972 :   HuffmanTree_cleanup(&tree_d);
; 1973 : 
; 1974 :   return error;
; 1975 : }
; 1976 : 
; 1977 : static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
; 1978 :                                  const LodePNGCompressSettings* settings)
; 1979 : {
; 1980 :   unsigned error = 0;
; 1981 :   size_t i, blocksize, numdeflateblocks;
; 1982 :   size_t bp = 0; /*the bit pointer*/
; 1983 :   Hash hash;
; 1984 : 
; 1985 :   if(settings->btype > 2) return 61;
; 1986 :   else if(settings->btype == 0) return deflateNoCompression(out, in, insize);
; 1987 :   else if(settings->btype == 1) blocksize = insize;
; 1988 :   else /*if(settings->btype == 2)*/
; 1989 :   {
; 1990 :     blocksize = insize / 8 + 8;
; 1991 :     if(blocksize < 65535) blocksize = 65535;
; 1992 :   }
; 1993 : 
; 1994 :   numdeflateblocks = (insize + blocksize - 1) / blocksize;
; 1995 :   if(numdeflateblocks == 0) numdeflateblocks = 1;
; 1996 : 
; 1997 :   error = hash_init(&hash, settings->windowsize);
; 1998 :   if(error) return error;
; 1999 : 
; 2000 :   for(i = 0; i < numdeflateblocks && !error; i++)
; 2001 :   {
; 2002 :     int final = i == numdeflateblocks - 1;
; 2003 :     size_t start = i * blocksize;
; 2004 :     size_t end = start + blocksize;
; 2005 :     if(end > insize) end = insize;
; 2006 : 
; 2007 :     if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
; 2008 :     else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
; 2009 :   }
; 2010 : 
; 2011 :   hash_cleanup(&hash);
; 2012 : 
; 2013 :   return error;
; 2014 : }
; 2015 : 
; 2016 : unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
; 2017 :                          const unsigned char* in, size_t insize,
; 2018 :                          const LodePNGCompressSettings* settings)
; 2019 : {
; 2020 :   unsigned error;
; 2021 :   ucvector v;
; 2022 :   ucvector_init_buffer(&v, *out, *outsize);
; 2023 :   error = lodepng_deflatev(&v, in, insize, settings);
; 2024 :   *out = v.data;
; 2025 :   *outsize = v.size;
; 2026 :   return error;
; 2027 : }
; 2028 : 
; 2029 : static unsigned deflate(unsigned char** out, size_t* outsize,
; 2030 :                         const unsigned char* in, size_t insize,
; 2031 :                         const LodePNGCompressSettings* settings)
; 2032 : {
; 2033 :   if(settings->custom_deflate)
; 2034 :   {
; 2035 :     return settings->custom_deflate(out, outsize, in, insize, settings);
; 2036 :   }
; 2037 :   else
; 2038 :   {
; 2039 :     return lodepng_deflate(out, outsize, in, insize, settings);
; 2040 :   }
; 2041 : }
; 2042 : 
; 2043 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2044 : 
; 2045 : /* ////////////////////////////////////////////////////////////////////////// */
; 2046 : /* / Adler32                                                                  */
; 2047 : /* ////////////////////////////////////////////////////////////////////////// */
; 2048 : 
; 2049 : static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
; 2050 : {
; 2051 :    unsigned s1 = adler & 0xffff;
; 2052 :    unsigned s2 = (adler >> 16) & 0xffff;
; 2053 : 
; 2054 :   while(len > 0)
; 2055 :   {
; 2056 :     /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
; 2057 :     unsigned amount = len > 5550 ? 5550 : len;
; 2058 :     len -= amount;
; 2059 :     while(amount > 0)
; 2060 :     {
; 2061 :       s1 += (*data++);
; 2062 :       s2 += s1;
; 2063 :       amount--;
; 2064 :     }
; 2065 :     s1 %= 65521;
; 2066 :     s2 %= 65521;
; 2067 :   }
; 2068 : 
; 2069 :   return (s2 << 16) | s1;
; 2070 : }
; 2071 : 
; 2072 : /*Return the adler32 of the bytes data[0..len-1]*/
; 2073 : static unsigned adler32(const unsigned char* data, unsigned len)
; 2074 : {
; 2075 :   return update_adler32(1L, data, len);
; 2076 : }
; 2077 : 
; 2078 : /* ////////////////////////////////////////////////////////////////////////// */
; 2079 : /* / Zlib                                                                   / */
; 2080 : /* ////////////////////////////////////////////////////////////////////////// */
; 2081 : 
; 2082 : #ifdef LODEPNG_COMPILE_DECODER
; 2083 : 
; 2084 : unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2085 :                                  size_t insize, const LodePNGDecompressSettings* settings)
; 2086 : {
; 2087 :   unsigned error = 0;
; 2088 :   unsigned CM, CINFO, FDICT;
; 2089 : 
; 2090 :   if(insize < 2) return 53; /*error, size of zlib data too small*/
; 2091 :   /*read information from zlib header*/
; 2092 :   if((in[0] * 256 + in[1]) % 31 != 0)
; 2093 :   {
; 2094 :     /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
; 2095 :     return 24;
; 2096 :   }
; 2097 : 
; 2098 :   CM = in[0] & 15;
; 2099 :   CINFO = (in[0] >> 4) & 15;
; 2100 :   /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
; 2101 :   FDICT = (in[1] >> 5) & 1;
; 2102 :   /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/
; 2103 : 
; 2104 :   if(CM != 8 || CINFO > 7)
; 2105 :   {
; 2106 :     /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
; 2107 :     return 25;
; 2108 :   }
; 2109 :   if(FDICT != 0)
; 2110 :   {
; 2111 :     /*error: the specification of PNG says about the zlib stream:
; 2112 :       "The additional flags shall not specify a preset dictionary."*/
; 2113 :     return 26;
; 2114 :   }
; 2115 : 
; 2116 :   error = inflate(out, outsize, in + 2, insize - 2, settings);
; 2117 :   if(error) return error;
; 2118 : 
; 2119 :   if(!settings->ignore_adler32)
; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/
; 2124 :   }
; 2125 : 
; 2126 :   return 0; /*no error*/
; 2127 : }
; 2128 : 
; 2129 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2130 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2131 : {
; 2132 :   if(settings->custom_zlib)
; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2134 :   else
; 2135 :     return lodepng_zlib_decompress(out, outsize, in, insize, settings);
; 2136 : }
; 2137 : 
; 2138 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2139 : 
; 2140 : #ifdef LODEPNG_COMPILE_ENCODER
; 2141 : 
; 2142 : unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2143 :                                size_t insize, const LodePNGCompressSettings* settings)
; 2144 : {
; 2145 :   /*initially, *out must be NULL and outsize 0, if you just give some random *out
; 2146 :   that's pointing to a non allocated buffer, this'll crash*/
; 2147 :   ucvector outv;
; 2148 :   size_t i;
; 2149 :   unsigned error;
; 2150 :   unsigned char* deflatedata = 0;
; 2151 :   size_t deflatesize = 0;
; 2152 : 
; 2153 :   unsigned ADLER32;
; 2154 :   /*zlib data: 1 byte CMF (CM+CINFO), 1 byte FLG, deflate data, 4 byte ADLER32 checksum of the Decompressed data*/
; 2155 :   unsigned CMF = 120; /*0b01111000: CM 8, CINFO 7. With CINFO 7, any window size up to 32768 can be used.*/
; 2156 :   unsigned FLEVEL = 0;
; 2157 :   unsigned FDICT = 0;
; 2158 :   unsigned CMFFLG = 256 * CMF + FDICT * 32 + FLEVEL * 64;
; 2159 :   unsigned FCHECK = 31 - CMFFLG % 31;
; 2160 :   CMFFLG += FCHECK;
; 2161 : 
; 2162 :   /*ucvector-controlled version of the output buffer, for dynamic array*/
; 2163 :   ucvector_init_buffer(&outv, *out, *outsize);
; 2164 : 
; 2165 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG / 256));
; 2166 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG % 256));
; 2167 : 
; 2168 :   error = deflate(&deflatedata, &deflatesize, in, insize, settings);
; 2169 : 
; 2170 :   if(!error)
; 2171 :   {
; 2172 :     ADLER32 = adler32(in, (unsigned)insize);
; 2173 :     for(i = 0; i < deflatesize; i++) ucvector_push_back(&outv, deflatedata[i]);
; 2174 :     lodepng_free(deflatedata);
; 2175 :     lodepng_add32bitInt(&outv, ADLER32);
; 2176 :   }
; 2177 : 
; 2178 :   *out = outv.data;
; 2179 :   *outsize = outv.size;
; 2180 : 
; 2181 :   return error;
; 2182 : }
; 2183 : 
; 2184 : /* compress using the default or custom zlib function */
; 2185 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2186 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2187 : {
; 2188 :   if(settings->custom_zlib)
; 2189 :   {
; 2190 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2191 :   }
; 2192 :   else
; 2193 :   {
; 2194 :     return lodepng_zlib_compress(out, outsize, in, insize, settings);
; 2195 :   }
; 2196 : }
; 2197 : 
; 2198 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2199 : 
; 2200 : #else /*no LODEPNG_COMPILE_ZLIB*/
; 2201 : 
; 2202 : #ifdef LODEPNG_COMPILE_DECODER
; 2203 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2204 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2205 : {
; 2206 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2207 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2208 : }
; 2209 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2210 : #ifdef LODEPNG_COMPILE_ENCODER
; 2211 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2212 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2213 : {
; 2214 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2215 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2216 : }
; 2217 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2218 : 
; 2219 : #endif /*LODEPNG_COMPILE_ZLIB*/
; 2220 : 
; 2221 : /* ////////////////////////////////////////////////////////////////////////// */
; 2222 : 
; 2223 : #ifdef LODEPNG_COMPILE_ENCODER
; 2224 : 
; 2225 : /*this is a good tradeoff between speed and compression ratio*/
; 2226 : #define DEFAULT_WINDOWSIZE 2048
; 2227 : 
; 2228 : void lodepng_compress_settings_init(LodePNGCompressSettings* settings)
; 2229 : {
; 2230 :   /*compress with dynamic huffman tree (not in the mathematical sense, just not the predefined one)*/
; 2231 :   settings->btype = 2;
; 2232 :   settings->use_lz77 = 1;
; 2233 :   settings->windowsize = DEFAULT_WINDOWSIZE;
; 2234 :   settings->minmatch = 3;
; 2235 :   settings->nicematch = 128;
; 2236 :   settings->lazymatching = 1;
; 2237 : 
; 2238 :   settings->custom_zlib = 0;
; 2239 :   settings->custom_deflate = 0;
; 2240 :   settings->custom_context = 0;
; 2241 : }
; 2242 : 
; 2243 : const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 3, 128, 1, 0, 0, 0};
; 2244 : 
; 2245 : 
; 2246 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2247 : 
; 2248 : #ifdef LODEPNG_COMPILE_DECODER
; 2249 : 
; 2250 : void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings)
; 2251 : {
; 2252 :   settings->ignore_adler32 = 0;
; 2253 : 
; 2254 :   settings->custom_zlib = 0;
; 2255 :   settings->custom_inflate = 0;
; 2256 :   settings->custom_context = 0;
; 2257 : }
; 2258 : 
; 2259 : const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0, 0, 0};
; 2260 : 
; 2261 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2262 : 
; 2263 : /* ////////////////////////////////////////////////////////////////////////// */
; 2264 : /* ////////////////////////////////////////////////////////////////////////// */
; 2265 : /* // End of Zlib related code. Begin of PNG related code.                 // */
; 2266 : /* ////////////////////////////////////////////////////////////////////////// */
; 2267 : /* ////////////////////////////////////////////////////////////////////////// */
; 2268 : 
; 2269 : #ifdef LODEPNG_COMPILE_PNG
; 2270 : 
; 2271 : /* ////////////////////////////////////////////////////////////////////////// */
; 2272 : /* / CRC32                                                                  / */
; 2273 : /* ////////////////////////////////////////////////////////////////////////// */
; 2274 : 
; 2275 : /* CRC polynomial: 0xedb88320 */
; 2276 : static unsigned lodepng_crc32_table[256] = {
; 2277 :            0u, 1996959894u, 3993919788u, 2567524794u,  124634137u, 1886057615u, 3915621685u, 2657392035u,
; 2278 :    249268274u, 2044508324u, 3772115230u, 2547177864u,  162941995u, 2125561021u, 3887607047u, 2428444049u,
; 2279 :    498536548u, 1789927666u, 4089016648u, 2227061214u,  450548861u, 1843258603u, 4107580753u, 2211677639u,
; 2280 :    325883990u, 1684777152u, 4251122042u, 2321926636u,  335633487u, 1661365465u, 4195302755u, 2366115317u,
; 2281 :    997073096u, 1281953886u, 3579855332u, 2724688242u, 1006888145u, 1258607687u, 3524101629u, 2768942443u,
; 2282 :    901097722u, 1119000684u, 3686517206u, 2898065728u,  853044451u, 1172266101u, 3705015759u, 2882616665u,
; 2283 :    651767980u, 1373503546u, 3369554304u, 3218104598u,  565507253u, 1454621731u, 3485111705u, 3099436303u,
; 2284 :    671266974u, 1594198024u, 3322730930u, 2970347812u,  795835527u, 1483230225u, 3244367275u, 3060149565u,
; 2285 :   1994146192u,   31158534u, 2563907772u, 4023717930u, 1907459465u,  112637215u, 2680153253u, 3904427059u,
; 2286 :   2013776290u,  251722036u, 2517215374u, 3775830040u, 2137656763u,  141376813u, 2439277719u, 3865271297u,
; 2287 :   1802195444u,  476864866u, 2238001368u, 4066508878u, 1812370925u,  453092731u, 2181625025u, 4111451223u,
; 2288 :   1706088902u,  314042704u, 2344532202u, 4240017532u, 1658658271u,  366619977u, 2362670323u, 4224994405u,
; 2289 :   1303535960u,  984961486u, 2747007092u, 3569037538u, 1256170817u, 1037604311u, 2765210733u, 3554079995u,
; 2290 :   1131014506u,  879679996u, 2909243462u, 3663771856u, 1141124467u,  855842277u, 2852801631u, 3708648649u,
; 2291 :   1342533948u,  654459306u, 3188396048u, 3373015174u, 1466479909u,  544179635u, 3110523913u, 3462522015u,
; 2292 :   1591671054u,  702138776u, 2966460450u, 3352799412u, 1504918807u,  783551873u, 3082640443u, 3233442989u,
; 2293 :   3988292384u, 2596254646u,   62317068u, 1957810842u, 3939845945u, 2647816111u,   81470997u, 1943803523u,
; 2294 :   3814918930u, 2489596804u,  225274430u, 2053790376u, 3826175755u, 2466906013u,  167816743u, 2097651377u,
; 2295 :   4027552580u, 2265490386u,  503444072u, 1762050814u, 4150417245u, 2154129355u,  426522225u, 1852507879u,
; 2296 :   4275313526u, 2312317920u,  282753626u, 1742555852u, 4189708143u, 2394877945u,  397917763u, 1622183637u,
; 2297 :   3604390888u, 2714866558u,  953729732u, 1340076626u, 3518719985u, 2797360999u, 1068828381u, 1219638859u,
; 2298 :   3624741850u, 2936675148u,  906185462u, 1090812512u, 3747672003u, 2825379669u,  829329135u, 1181335161u,
; 2299 :   3412177804u, 3160834842u,  628085408u, 1382605366u, 3423369109u, 3138078467u,  570562233u, 1426400815u,
; 2300 :   3317316542u, 2998733608u,  733239954u, 1555261956u, 3268935591u, 3050360625u,  752459403u, 1541320221u,
; 2301 :   2607071920u, 3965973030u, 1969922972u,   40735498u, 2617837225u, 3943577151u, 1913087877u,   83908371u,
; 2302 :   2512341634u, 3803740692u, 2075208622u,  213261112u, 2463272603u, 3855990285u, 2094854071u,  198958881u,
; 2303 :   2262029012u, 4057260610u, 1759359992u,  534414190u, 2176718541u, 4139329115u, 1873836001u,  414664567u,
; 2304 :   2282248934u, 4279200368u, 1711684554u,  285281116u, 2405801727u, 4167216745u, 1634467795u,  376229701u,
; 2305 :   2685067896u, 3608007406u, 1308918612u,  956543938u, 2808555105u, 3495958263u, 1231636301u, 1047427035u,
; 2306 :   2932959818u, 3654703836u, 1088359270u,  936918000u, 2847714899u, 3736837829u, 1202900863u,  817233897u,
; 2307 :   3183342108u, 3401237130u, 1404277552u,  615818150u, 3134207493u, 3453421203u, 1423857449u,  601450431u,
; 2308 :   3009837614u, 3294710456u, 1567103746u,  711928724u, 3020668471u, 3272380065u, 1510334235u,  755167117u
; 2309 : };
; 2310 : 
; 2311 : /*Return the CRC of the bytes buf[0..len-1].*/
; 2312 : unsigned lodepng_crc32(const unsigned char* buf, size_t len)
; 2313 : {
; 2314 :   unsigned c = 0xffffffffL;

  00023	83 c9 ff	 or	 ecx, -1

; 2417 :   unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);

  00026	0f b6 7c 1a 08	 movzx	 edi, BYTE PTR [edx+ebx+8]
  0002b	0f b6 44 1a 09	 movzx	 eax, BYTE PTR [edx+ebx+9]
  00030	c1 e7 08	 shl	 edi, 8
  00033	0b f8		 or	 edi, eax
  00035	0f b6 44 1a 0a	 movzx	 eax, BYTE PTR [edx+ebx+10]

; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];

  0003a	c1 e7 08	 shl	 edi, 8

; 2417 :   unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);

  0003d	0b f8		 or	 edi, eax
  0003f	0f b6 44 1a 0b	 movzx	 eax, BYTE PTR [edx+ebx+11]

; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];

  00044	c1 e7 08	 shl	 edi, 8
  00047	0b f8		 or	 edi, eax

; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)

  00049	33 f6		 xor	 esi, esi

; 2418 :   /*the CRC is taken of the data and the 4 chunk type letters, not the length*/
; 2419 :   unsigned checksum = lodepng_crc32(&chunk[4], length + 4);

  0004b	83 c2 04	 add	 edx, 4

; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)

  0004e	74 1b		 je	 SHORT $LN11@lodepng_ch
$LL13@lodepng_ch:

; 2318 :   {
; 2319 :     c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);

  00050	0f b6 44 33 04	 movzx	 eax, BYTE PTR [ebx+esi+4]
  00055	33 c1		 xor	 eax, ecx
  00057	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0005c	c1 e9 08	 shr	 ecx, 8
  0005f	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR _lodepng_crc32_table[eax*4]
  00066	46		 inc	 esi
  00067	3b f2		 cmp	 esi, edx
  00069	72 e5		 jb	 SHORT $LL13@lodepng_ch
$LN11@lodepng_ch:

; 2420 :   if(CRC != checksum) return 1;

  0006b	f7 d1		 not	 ecx
  0006d	33 c0		 xor	 eax, eax
  0006f	3b f9		 cmp	 edi, ecx
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	0f 95 c0	 setne	 al
  00076	5b		 pop	 ebx

; 2421 :   else return 0;
; 2422 : }

  00077	c3		 ret	 0
?lodepng_chunk_check_crc@@YAIPBE@Z ENDP			; lodepng_chunk_check_crc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_chunk_next_const@@YAPBEPBE@Z
_TEXT	SEGMENT
?lodepng_chunk_next_const@@YAPBEPBE@Z PROC		; lodepng_chunk_next_const, COMDAT
; _chunk$ = ecx

; 2439 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2440 :   return &chunk[total_chunk_length];

  00000	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00003	0f b6 41 01	 movzx	 eax, BYTE PTR [ecx+1]
  00007	c1 e2 08	 shl	 edx, 8
  0000a	0b d0		 or	 edx, eax
  0000c	0f b6 41 02	 movzx	 eax, BYTE PTR [ecx+2]

; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];

  00010	c1 e2 08	 shl	 edx, 8

; 2439 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2440 :   return &chunk[total_chunk_length];

  00013	0b d0		 or	 edx, eax
  00015	0f b6 41 03	 movzx	 eax, BYTE PTR [ecx+3]

; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];

  00019	c1 e2 08	 shl	 edx, 8
  0001c	0b d0		 or	 edx, eax

; 2439 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2440 :   return &chunk[total_chunk_length];

  0001e	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00021	03 c2		 add	 eax, edx

; 2441 : }

  00023	c3		 ret	 0
?lodepng_chunk_next_const@@YAPBEPBE@Z ENDP		; lodepng_chunk_next_const
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_chunk_append@@YAIPAPAEPAIPBE@Z
_TEXT	SEGMENT
_outlength$1$ = -8					; size = 4
_out$1$ = -4						; size = 4
_chunk$ = 8						; size = 4
?lodepng_chunk_append@@YAIPAPAEPAIPBE@Z PROC		; lodepng_chunk_append, COMDAT
; _out$ = ecx
; _outlength$ = edx

; 2444 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2445 :   unsigned i;
; 2446 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;

  00009	8b 7d 08	 mov	 edi, DWORD PTR _chunk$[ebp]
  0000c	89 55 f8	 mov	 DWORD PTR _outlength$1$[ebp], edx
  0000f	0f b6 37	 movzx	 esi, BYTE PTR [edi]
  00012	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  00016	c1 e6 08	 shl	 esi, 8
  00019	0b f0		 or	 esi, eax
  0001b	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);
; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];

  0001f	c1 e6 08	 shl	 esi, 8

; 2445 :   unsigned i;
; 2446 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;

  00022	0b f0		 or	 esi, eax
  00024	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);
; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];

  00028	c1 e6 08	 shl	 esi, 8
  0002b	0b f0		 or	 esi, eax

; 2447 :   unsigned char *chunk_start, *new_buffer;
; 2448 :   size_t new_length = (*outlength) + total_chunk_length;

  0002d	8b 02		 mov	 eax, DWORD PTR [edx]
  0002f	83 c6 0c	 add	 esi, 12			; 0000000cH
  00032	89 4d fc	 mov	 DWORD PTR _out$1$[ebp], ecx
  00035	8d 1c 30	 lea	 ebx, DWORD PTR [eax+esi]

; 2449 :   if(new_length < total_chunk_length || new_length < (*outlength)) return 77; /*integer overflow happened*/

  00038	3b de		 cmp	 ebx, esi
  0003a	72 49		 jb	 SHORT $LN5@lodepng_ch
  0003c	3b d8		 cmp	 ebx, eax
  0003e	72 45		 jb	 SHORT $LN5@lodepng_ch

; 68   :   return realloc(ptr, new_size);

  00040	53		 push	 ebx
  00041	ff 31		 push	 DWORD PTR [ecx]
  00043	e8 00 00 00 00	 call	 _realloc

; 2450 : 
; 2451 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);

  00048	8b c8		 mov	 ecx, eax

; 68   :   return realloc(ptr, new_size);

  0004a	83 c4 08	 add	 esp, 8

; 2452 :   if(!new_buffer) return 83; /*alloc fail*/

  0004d	85 c9		 test	 ecx, ecx
  0004f	75 0a		 jne	 SHORT $LN4@lodepng_ch
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	8d 41 53	 lea	 eax, DWORD PTR [ecx+83]
  00056	5b		 pop	 ebx

; 2460 : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN4@lodepng_ch:

; 2453 :   (*out) = new_buffer;

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _out$1$[ebp]
  0005e	89 08		 mov	 DWORD PTR [eax], ecx

; 2454 :   (*outlength) = new_length;

  00060	8b 4d f8	 mov	 ecx, DWORD PTR _outlength$1$[ebp]
  00063	89 19		 mov	 DWORD PTR [ecx], ebx

; 2455 :   chunk_start = &(*out)[new_length - total_chunk_length];

  00065	8b 00		 mov	 eax, DWORD PTR [eax]
  00067	2b c6		 sub	 eax, esi
  00069	03 c3		 add	 eax, ebx

; 2456 : 
; 2457 :   for(i = 0; i < total_chunk_length; i++) chunk_start[i] = chunk[i];

  0006b	85 f6		 test	 esi, esi
  0006d	74 0d		 je	 SHORT $LN1@lodepng_ch
  0006f	2b f8		 sub	 edi, eax
$LL17@lodepng_ch:
  00071	8a 0c 07	 mov	 cl, BYTE PTR [edi+eax]
  00074	88 08		 mov	 BYTE PTR [eax], cl
  00076	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00079	4e		 dec	 esi
  0007a	75 f5		 jne	 SHORT $LL17@lodepng_ch
$LN1@lodepng_ch:
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi

; 2458 : 
; 2459 :   return 0;

  0007e	33 c0		 xor	 eax, eax
  00080	5b		 pop	 ebx

; 2460 : }

  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
$LN5@lodepng_ch:
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi

; 2449 :   if(new_length < total_chunk_length || new_length < (*outlength)) return 77; /*integer overflow happened*/

  00087	b8 4d 00 00 00	 mov	 eax, 77			; 0000004dH
  0008c	5b		 pop	 ebx

; 2460 : }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
?lodepng_chunk_append@@YAIPAPAEPAIPBE@Z ENDP		; lodepng_chunk_append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?checkColorValidity@@YAIW4LodePNGColorType@@I@Z
_TEXT	SEGMENT
?checkColorValidity@@YAIW4LodePNGColorType@@I@Z PROC	; checkColorValidity, COMDAT
; _colortype$ = ecx
; _bd$ = edx

; 2500 :   switch(colortype)

  00000	83 f9 06	 cmp	 ecx, 6
  00003	77 43		 ja	 SHORT $LN1@checkColor
  00005	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN17@checkColor[ecx*4]
$LN11@checkColor:

; 2501 :   {
; 2502 :     case 0: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)) return 37; break; /*grey*/

  0000c	83 fa 01	 cmp	 edx, 1
  0000f	74 34		 je	 SHORT $LN2@checkColor
  00011	83 fa 02	 cmp	 edx, 2
  00014	74 2f		 je	 SHORT $LN2@checkColor
  00016	83 fa 04	 cmp	 edx, 4
  00019	74 2a		 je	 SHORT $LN2@checkColor
$LN9@checkColor:
  0001b	83 fa 08	 cmp	 edx, 8
  0001e	74 25		 je	 SHORT $LN2@checkColor
  00020	83 fa 10	 cmp	 edx, 16			; 00000010H
  00023	74 20		 je	 SHORT $LN2@checkColor
  00025	b8 25 00 00 00	 mov	 eax, 37			; 00000025H

; 2510 : }

  0002a	c3		 ret	 0
$LN7@checkColor:

; 2503 :     case 2: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGB*/
; 2504 :     case 3: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )) return 37; break; /*palette*/

  0002b	83 fa 01	 cmp	 edx, 1
  0002e	74 15		 je	 SHORT $LN2@checkColor
  00030	83 fa 02	 cmp	 edx, 2
  00033	74 10		 je	 SHORT $LN2@checkColor
  00035	83 fa 04	 cmp	 edx, 4
  00038	74 0b		 je	 SHORT $LN2@checkColor
  0003a	83 fa 08	 cmp	 edx, 8
  0003d	74 06		 je	 SHORT $LN2@checkColor
  0003f	b8 25 00 00 00	 mov	 eax, 37			; 00000025H

; 2510 : }

  00044	c3		 ret	 0
$LN2@checkColor:

; 2508 :   }
; 2509 :   return 0; /*allowed color type / bits combination*/

  00045	33 c0		 xor	 eax, eax

; 2510 : }

  00047	c3		 ret	 0
$LN1@checkColor:

; 2505 :     case 4: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*grey + alpha*/
; 2506 :     case 6: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGBA*/
; 2507 :     default: return 31;

  00048	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH

; 2510 : }

  0004d	c3		 ret	 0
  0004e	8b ff		 npad	 2
$LN17@checkColor:
  00050	00 00 00 00	 DD	 $LN11@checkColor
  00054	00 00 00 00	 DD	 $LN1@checkColor
  00058	00 00 00 00	 DD	 $LN9@checkColor
  0005c	00 00 00 00	 DD	 $LN7@checkColor
  00060	00 00 00 00	 DD	 $LN9@checkColor
  00064	00 00 00 00	 DD	 $LN1@checkColor
  00068	00 00 00 00	 DD	 $LN9@checkColor
?checkColorValidity@@YAIW4LodePNGColorType@@I@Z ENDP	; checkColorValidity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?getNumColorChannels@@YAIW4LodePNGColorType@@@Z
_TEXT	SEGMENT
?getNumColorChannels@@YAIW4LodePNGColorType@@@Z PROC	; getNumColorChannels, COMDAT
; _colortype$ = ecx

; 2514 :   switch(colortype)

  00000	83 f9 06	 cmp	 ecx, 6
  00003	77 1f		 ja	 SHORT $LN6@getNumColo
  00005	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN11@getNumColo[ecx*4]
$LN5@getNumColo:

; 2515 :   {
; 2516 :     case 0: return 1; /*grey*/

  0000c	b8 01 00 00 00	 mov	 eax, 1

; 2523 : }

  00011	c3		 ret	 0
$LN4@getNumColo:

; 2517 :     case 2: return 3; /*RGB*/

  00012	b8 03 00 00 00	 mov	 eax, 3

; 2523 : }

  00017	c3		 ret	 0
$LN2@getNumColo:

; 2518 :     case 3: return 1; /*palette*/
; 2519 :     case 4: return 2; /*grey + alpha*/

  00018	b8 02 00 00 00	 mov	 eax, 2

; 2523 : }

  0001d	c3		 ret	 0
$LN1@getNumColo:

; 2520 :     case 6: return 4; /*RGBA*/

  0001e	b8 04 00 00 00	 mov	 eax, 4

; 2523 : }

  00023	c3		 ret	 0
$LN6@getNumColo:

; 2521 :   }
; 2522 :   return 0; /*unexisting color type*/

  00024	33 c0		 xor	 eax, eax

; 2523 : }

  00026	c3		 ret	 0
  00027	90		 npad	 1
$LN11@getNumColo:
  00028	00 00 00 00	 DD	 $LN5@getNumColo
  0002c	00 00 00 00	 DD	 $LN6@getNumColo
  00030	00 00 00 00	 DD	 $LN4@getNumColo
  00034	00 00 00 00	 DD	 $LN5@getNumColo
  00038	00 00 00 00	 DD	 $LN2@getNumColo
  0003c	00 00 00 00	 DD	 $LN6@getNumColo
  00040	00 00 00 00	 DD	 $LN1@getNumColo
?getNumColorChannels@@YAIW4LodePNGColorType@@@Z ENDP	; getNumColorChannels
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_get_bpp_lct@@YAIW4LodePNGColorType@@I@Z
_TEXT	SEGMENT
?lodepng_get_bpp_lct@@YAIW4LodePNGColorType@@I@Z PROC	; lodepng_get_bpp_lct, COMDAT
; _colortype$ = ecx
; _bitdepth$ = edx

; 2514 :   switch(colortype)

  00000	83 f9 06	 cmp	 ecx, 6
  00003	77 2b		 ja	 SHORT $LN8@lodepng_ge
  00005	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN13@lodepng_ge[ecx*4]
$LN7@lodepng_ge:

; 2515 :   {
; 2516 :     case 0: return 1; /*grey*/

  0000c	b8 01 00 00 00	 mov	 eax, 1

; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;

  00011	0f af c2	 imul	 eax, edx

; 2529 : }

  00014	c3		 ret	 0
$LN6@lodepng_ge:

; 2517 :     case 2: return 3; /*RGB*/

  00015	b8 03 00 00 00	 mov	 eax, 3

; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;

  0001a	0f af c2	 imul	 eax, edx

; 2529 : }

  0001d	c3		 ret	 0
$LN4@lodepng_ge:

; 2518 :     case 3: return 1; /*palette*/
; 2519 :     case 4: return 2; /*grey + alpha*/

  0001e	b8 02 00 00 00	 mov	 eax, 2

; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;

  00023	0f af c2	 imul	 eax, edx

; 2529 : }

  00026	c3		 ret	 0
$LN3@lodepng_ge:

; 2520 :     case 6: return 4; /*RGBA*/

  00027	b8 04 00 00 00	 mov	 eax, 4

; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;

  0002c	0f af c2	 imul	 eax, edx

; 2529 : }

  0002f	c3		 ret	 0
$LN8@lodepng_ge:

; 2521 :   }
; 2522 :   return 0; /*unexisting color type*/

  00030	33 c0		 xor	 eax, eax

; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;

  00032	0f af c2	 imul	 eax, edx

; 2529 : }

  00035	c3		 ret	 0
  00036	8b ff		 npad	 2
$LN13@lodepng_ge:
  00038	00 00 00 00	 DD	 $LN7@lodepng_ge
  0003c	00 00 00 00	 DD	 $LN8@lodepng_ge
  00040	00 00 00 00	 DD	 $LN6@lodepng_ge
  00044	00 00 00 00	 DD	 $LN7@lodepng_ge
  00048	00 00 00 00	 DD	 $LN4@lodepng_ge
  0004c	00 00 00 00	 DD	 $LN8@lodepng_ge
  00050	00 00 00 00	 DD	 $LN3@lodepng_ge
?lodepng_get_bpp_lct@@YAIW4LodePNGColorType@@I@Z ENDP	; lodepng_get_bpp_lct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_color_mode_init@@YAXPAULodePNGColorMode@@@Z
_TEXT	SEGMENT
?lodepng_color_mode_init@@YAXPAULodePNGColorMode@@@Z PROC ; lodepng_color_mode_init, COMDAT
; _info$ = ecx

; 2535 :   info->key_defined = 0;

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 2536 :   info->key_r = info->key_g = info->key_b = 0;

  00007	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  0000e	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00015	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 2537 :   info->colortype = LCT_RGBA;

  0001c	c7 01 06 00 00
	00		 mov	 DWORD PTR [ecx], 6

; 2538 :   info->bitdepth = 8;

  00022	c7 41 04 08 00
	00 00		 mov	 DWORD PTR [ecx+4], 8

; 2539 :   info->palette = 0;

  00029	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 2540 :   info->palettesize = 0;

  00030	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 2541 : }

  00037	c3		 ret	 0
?lodepng_color_mode_init@@YAXPAULodePNGColorMode@@@Z ENDP ; lodepng_color_mode_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_color_mode_cleanup@@YAXPAULodePNGColorMode@@@Z
_TEXT	SEGMENT
?lodepng_color_mode_cleanup@@YAXPAULodePNGColorMode@@@Z PROC ; lodepng_color_mode_cleanup, COMDAT
; _info$ = ecx

; 2544 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2547 : 
; 2548 : unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
; 2549 : {
; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;
; 2553 :   if(source->palette)
; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);
; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];
; 2558 :   }
; 2559 :   return 0;
; 2560 : }
; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN8@lodepng_co

; 73   :   free(ptr);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _free
  00010	83 c4 04	 add	 esp, 4
$LN8@lodepng_co:

; 2585 :   info->palette = 0;
; 2586 :   info->palettesize = 0;

  00013	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 2545 :   lodepng_palette_clear(info);
; 2546 : }

  00022	c3		 ret	 0
?lodepng_color_mode_cleanup@@YAXPAULodePNGColorMode@@@Z ENDP ; lodepng_color_mode_cleanup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_color_mode_copy@@YAIPAULodePNGColorMode@@PBU1@@Z
_TEXT	SEGMENT
?lodepng_color_mode_copy@@YAIPAULodePNGColorMode@@PBU1@@Z PROC ; lodepng_color_mode_copy, COMDAT
; _dest$ = ecx
; _source$ = edx

; 2549 : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	8b f2		 mov	 esi, edx

; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);

  00006	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00009	85 c0		 test	 eax, eax
  0000b	74 09		 je	 SHORT $LN13@lodepng_co

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 _free
  00013	83 c4 04	 add	 esp, 4
$LN13@lodepng_co:

; 2585 :   info->palette = 0;

  00016	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2586 :   info->palettesize = 0;

  0001d	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;

  00024	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  00028	66 0f d6 07	 movq	 QWORD PTR [edi], xmm0
  0002c	f3 0f 7e 46 08	 movq	 xmm0, QWORD PTR [esi+8]
  00031	66 0f d6 47 08	 movq	 QWORD PTR [edi+8], xmm0
  00036	f3 0f 7e 46 10	 movq	 xmm0, QWORD PTR [esi+16]
  0003b	66 0f d6 47 10	 movq	 QWORD PTR [edi+16], xmm0
  00040	f3 0f 7e 46 18	 movq	 xmm0, QWORD PTR [esi+24]
  00045	66 0f d6 47 18	 movq	 QWORD PTR [edi+24], xmm0

; 2553 :   if(source->palette)

  0004a	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  0004e	74 47		 je	 SHORT $LN1@lodepng_co

; 63   :   return malloc(size);

  00050	68 00 04 00 00	 push	 1024			; 00000400H
  00055	e8 00 00 00 00	 call	 _malloc
  0005a	83 c4 04	 add	 esp, 4

; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);

  0005d	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/

  00060	85 c0		 test	 eax, eax
  00062	75 0d		 jne	 SHORT $LN4@lodepng_co
  00064	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  00067	74 08		 je	 SHORT $LN4@lodepng_co
  00069	5f		 pop	 edi
  0006a	b8 53 00 00 00	 mov	 eax, 83			; 00000053H
  0006f	5e		 pop	 esi

; 2560 : }

  00070	c3		 ret	 0
$LN4@lodepng_co:

; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];

  00071	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00074	c1 e0 02	 shl	 eax, 2
  00077	33 d2		 xor	 edx, edx
  00079	85 c0		 test	 eax, eax
  0007b	74 1a		 je	 SHORT $LN1@lodepng_co
  0007d	8d 49 00	 npad	 3
$LL3@lodepng_co:
  00080	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00083	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00086	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  00089	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0008c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0008f	42		 inc	 edx
  00090	c1 e0 02	 shl	 eax, 2
  00093	3b d0		 cmp	 edx, eax
  00095	72 e9		 jb	 SHORT $LL3@lodepng_co
$LN1@lodepng_co:
  00097	5f		 pop	 edi

; 2558 :   }
; 2559 :   return 0;

  00098	33 c0		 xor	 eax, eax
  0009a	5e		 pop	 esi

; 2560 : }

  0009b	c3		 ret	 0
?lodepng_color_mode_copy@@YAIPAULodePNGColorMode@@PBU1@@Z ENDP ; lodepng_color_mode_copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_color_mode_equal@@YAHPBULodePNGColorMode@@0@Z
_TEXT	SEGMENT
?lodepng_color_mode_equal@@YAHPBULodePNGColorMode@@0@Z PROC ; lodepng_color_mode_equal, COMDAT
; _a$ = ecx
; _b$ = edx

; 2563 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	3b 02		 cmp	 eax, DWORD PTR [edx]
  00007	74 04		 je	 SHORT $LN12@lodepng_co
$LN20@lodepng_co:
  00009	33 c0		 xor	 eax, eax
  0000b	5e		 pop	 esi

; 2580 : }

  0000c	c3		 ret	 0
$LN12@lodepng_co:

; 2566 :   if(a->bitdepth != b->bitdepth) return 0;

  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00013	75 f4		 jne	 SHORT $LN20@lodepng_co

; 2567 :   if(a->key_defined != b->key_defined) return 0;

  00015	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00018	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
  0001b	75 ec		 jne	 SHORT $LN20@lodepng_co

; 2568 :   if(a->key_defined)

  0001d	85 c0		 test	 eax, eax
  0001f	74 18		 je	 SHORT $LN6@lodepng_co

; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;

  00021	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00024	3b 42 14	 cmp	 eax, DWORD PTR [edx+20]
  00027	75 e0		 jne	 SHORT $LN20@lodepng_co

; 2571 :     if(a->key_g != b->key_g) return 0;

  00029	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0002c	3b 42 18	 cmp	 eax, DWORD PTR [edx+24]
  0002f	75 d8		 jne	 SHORT $LN20@lodepng_co

; 2572 :     if(a->key_b != b->key_b) return 0;

  00031	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00034	3b 42 1c	 cmp	 eax, DWORD PTR [edx+28]
  00037	75 d0		 jne	 SHORT $LN20@lodepng_co
$LN6@lodepng_co:
  00039	57		 push	 edi

; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;

  0003a	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  0003d	3b 7a 0c	 cmp	 edi, DWORD PTR [edx+12]
  00040	75 24		 jne	 SHORT $LN16@lodepng_co

; 2575 :   for(i = 0; i < a->palettesize * 4; i++)

  00042	c1 e7 02	 shl	 edi, 2
  00045	33 c9		 xor	 ecx, ecx
  00047	85 ff		 test	 edi, edi
  00049	74 13		 je	 SHORT $LN2@lodepng_co
  0004b	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  0004e	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
$LL4@lodepng_co:

; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;

  00051	8a 04 0e	 mov	 al, BYTE PTR [esi+ecx]
  00054	3a 04 0a	 cmp	 al, BYTE PTR [edx+ecx]
  00057	75 0d		 jne	 SHORT $LN16@lodepng_co

; 2575 :   for(i = 0; i < a->palettesize * 4; i++)

  00059	41		 inc	 ecx
  0005a	3b cf		 cmp	 ecx, edi
  0005c	72 f3		 jb	 SHORT $LL4@lodepng_co
$LN2@lodepng_co:
  0005e	5f		 pop	 edi

; 2578 :   }
; 2579 :   return 1;

  0005f	b8 01 00 00 00	 mov	 eax, 1
  00064	5e		 pop	 esi

; 2580 : }

  00065	c3		 ret	 0
$LN16@lodepng_co:
  00066	5f		 pop	 edi

; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;

  00067	33 c0		 xor	 eax, eax
  00069	5e		 pop	 esi

; 2580 : }

  0006a	c3		 ret	 0
?lodepng_color_mode_equal@@YAHPBULodePNGColorMode@@0@Z ENDP ; lodepng_color_mode_equal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_palette_clear@@YAXPAULodePNGColorMode@@@Z
_TEXT	SEGMENT
?lodepng_palette_clear@@YAXPAULodePNGColorMode@@@Z PROC	; lodepng_palette_clear, COMDAT
; _info$ = ecx

; 2583 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2584 :   if(info->palette) lodepng_free(info->palette);

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN6@lodepng_pa

; 73   :   free(ptr);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _free
  00010	83 c4 04	 add	 esp, 4
$LN6@lodepng_pa:

; 2585 :   info->palette = 0;
; 2586 :   info->palettesize = 0;

  00013	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	5e		 pop	 esi

; 2587 : }

  00022	c3		 ret	 0
?lodepng_palette_clear@@YAXPAULodePNGColorMode@@@Z ENDP	; lodepng_palette_clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_get_bpp@@YAIPBULodePNGColorMode@@@Z
_TEXT	SEGMENT
?lodepng_get_bpp@@YAIPBULodePNGColorMode@@@Z PROC	; lodepng_get_bpp, COMDAT
; _info$ = ecx

; 2514 :   switch(colortype)

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 f8 06	 cmp	 eax, 6
  00005	77 37		 ja	 SHORT $LN10@lodepng_ge
  00007	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN15@lodepng_ge[eax*4]
$LN9@lodepng_ge:

; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;

  0000e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2515 :   {
; 2516 :     case 0: return 1; /*grey*/

  00011	ba 01 00 00 00	 mov	 edx, 1

; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;

  00016	0f af c2	 imul	 eax, edx

; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }

  00019	c3		 ret	 0
$LN8@lodepng_ge:

; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;

  0001a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2517 :     case 2: return 3; /*RGB*/

  0001d	ba 03 00 00 00	 mov	 edx, 3

; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;

  00022	0f af c2	 imul	 eax, edx

; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }

  00025	c3		 ret	 0
$LN6@lodepng_ge:

; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;

  00026	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2518 :     case 3: return 1; /*palette*/
; 2519 :     case 4: return 2; /*grey + alpha*/

  00029	ba 02 00 00 00	 mov	 edx, 2

; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;

  0002e	0f af c2	 imul	 eax, edx

; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }

  00031	c3		 ret	 0
$LN5@lodepng_ge:

; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;

  00032	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2520 :     case 6: return 4; /*RGBA*/

  00035	ba 04 00 00 00	 mov	 edx, 4

; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;

  0003a	0f af c2	 imul	 eax, edx

; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }

  0003d	c3		 ret	 0
$LN10@lodepng_ge:

; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;

  0003e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2521 :   }
; 2522 :   return 0; /*unexisting color type*/

  00041	33 d2		 xor	 edx, edx

; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;

  00043	0f af c2	 imul	 eax, edx

; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }

  00046	c3		 ret	 0
  00047	90		 npad	 1
$LN15@lodepng_ge:
  00048	00 00 00 00	 DD	 $LN9@lodepng_ge
  0004c	00 00 00 00	 DD	 $LN10@lodepng_ge
  00050	00 00 00 00	 DD	 $LN8@lodepng_ge
  00054	00 00 00 00	 DD	 $LN9@lodepng_ge
  00058	00 00 00 00	 DD	 $LN6@lodepng_ge
  0005c	00 00 00 00	 DD	 $LN10@lodepng_ge
  00060	00 00 00 00	 DD	 $LN5@lodepng_ge
?lodepng_get_bpp@@YAIPBULodePNGColorMode@@@Z ENDP	; lodepng_get_bpp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_get_raw_size@@YAIIIPBULodePNGColorMode@@@Z
_TEXT	SEGMENT
_color$ = 8						; size = 4
?lodepng_get_raw_size@@YAIIIPBULodePNGColorMode@@@Z PROC ; lodepng_get_raw_size, COMDAT
; _w$ = ecx
; _h$ = edx

; 2654 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx

; 2655 :   return (w * h * lodepng_get_bpp(color) + 7) / 8;

  00007	8b 4d 08	 mov	 ecx, DWORD PTR _color$[ebp]
  0000a	8b fa		 mov	 edi, edx
  0000c	e8 00 00 00 00	 call	 ?lodepng_get_bpp@@YAIPBULodePNGColorMode@@@Z ; lodepng_get_bpp
  00011	0f af c6	 imul	 eax, esi
  00014	0f af c7	 imul	 eax, edi
  00017	83 c0 07	 add	 eax, 7
  0001a	5f		 pop	 edi
  0001b	c1 e8 03	 shr	 eax, 3
  0001e	5e		 pop	 esi

; 2656 : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?lodepng_get_raw_size@@YAIIIPBULodePNGColorMode@@@Z ENDP ; lodepng_get_raw_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?LodePNGUnknownChunks_init@@YAXPAULodePNGInfo@@@Z
_TEXT	SEGMENT
?LodePNGUnknownChunks_init@@YAXPAULodePNGInfo@@@Z PROC	; LodePNGUnknownChunks_init, COMDAT
; _info$ = ecx

; 2667 :   unsigned i;
; 2668 :   for(i = 0; i < 3; i++) info->unknown_chunks_data[i] = 0;

  00000	c7 81 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+136], 0
  0000a	c7 81 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+140], 0
  00014	c7 81 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+144], 0

; 2669 :   for(i = 0; i < 3; i++) info->unknown_chunks_size[i] = 0;

  0001e	c7 81 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+148], 0
  00028	c7 81 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+152], 0
  00032	c7 81 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+156], 0

; 2670 : }

  0003c	c3		 ret	 0
?LodePNGUnknownChunks_init@@YAXPAULodePNGInfo@@@Z ENDP	; LodePNGUnknownChunks_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?LodePNGUnknownChunks_cleanup@@YAXPAULodePNGInfo@@@Z
_TEXT	SEGMENT
?LodePNGUnknownChunks_cleanup@@YAXPAULodePNGInfo@@@Z PROC ; LodePNGUnknownChunks_cleanup, COMDAT
; _info$ = ecx

; 2673 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2674 :   unsigned i;
; 2675 :   for(i = 0; i < 3; i++) lodepng_free(info->unknown_chunks_data[i]);

  00002	8d b1 88 00 00
	00		 lea	 esi, DWORD PTR [ecx+136]
  00008	bf 03 00 00 00	 mov	 edi, 3
  0000d	8d 49 00	 npad	 3
$LL3@LodePNGUnk:

; 73   :   free(ptr);

  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 _free
  00017	83 c4 04	 add	 esp, 4

; 2674 :   unsigned i;
; 2675 :   for(i = 0; i < 3; i++) lodepng_free(info->unknown_chunks_data[i]);

  0001a	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  0001d	4f		 dec	 edi
  0001e	75 f0		 jne	 SHORT $LL3@LodePNGUnk

; 2676 : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	c3		 ret	 0
?LodePNGUnknownChunks_cleanup@@YAXPAULodePNGInfo@@@Z ENDP ; LodePNGUnknownChunks_cleanup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?LodePNGText_init@@YAXPAULodePNGInfo@@@Z
_TEXT	SEGMENT
?LodePNGText_init@@YAXPAULodePNGInfo@@@Z PROC		; LodePNGText_init, COMDAT
; _info$ = ecx

; 2703 :   info->text_num = 0;

  00000	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0

; 2704 :   info->text_keys = NULL;

  00007	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0

; 2705 :   info->text_strings = NULL;

  0000e	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 2706 : }

  00015	c3		 ret	 0
?LodePNGText_init@@YAXPAULodePNGInfo@@@Z ENDP		; LodePNGText_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?LodePNGText_cleanup@@YAXPAULodePNGInfo@@@Z
_TEXT	SEGMENT
_i$1$ = -4						; size = 4
?LodePNGText_cleanup@@YAXPAULodePNGInfo@@@Z PROC	; LodePNGText_cleanup, COMDAT
; _info$ = ecx

; 2709 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx

; 2710 :   size_t i;
; 2711 :   for(i = 0; i < info->text_num; i++)

  00007	33 c0		 xor	 eax, eax
  00009	89 45 fc	 mov	 DWORD PTR _i$1$[ebp], eax
  0000c	39 43 3c	 cmp	 DWORD PTR [ebx+60], eax
  0000f	76 3e		 jbe	 SHORT $LN1@LodePNGTex
  00011	56		 push	 esi
  00012	57		 push	 edi
$LL3@LodePNGTex:
  00013	8b 73 40	 mov	 esi, DWORD PTR [ebx+64]
  00016	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]

; 73   :   free(ptr);

  0001d	ff 34 3e	 push	 DWORD PTR [esi+edi]
  00020	e8 00 00 00 00	 call	 _free

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;

  00025	c7 04 3e 00 00
	00 00		 mov	 DWORD PTR [esi+edi], 0

; 2710 :   size_t i;
; 2711 :   for(i = 0; i < info->text_num; i++)

  0002c	8b 73 44	 mov	 esi, DWORD PTR [ebx+68]

; 73   :   free(ptr);

  0002f	ff 34 3e	 push	 DWORD PTR [esi+edi]
  00032	e8 00 00 00 00	 call	 _free

; 2710 :   size_t i;
; 2711 :   for(i = 0; i < info->text_num; i++)

  00037	8b 45 fc	 mov	 eax, DWORD PTR _i$1$[ebp]
  0003a	40		 inc	 eax

; 73   :   free(ptr);

  0003b	83 c4 08	 add	 esp, 8

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;

  0003e	c7 04 3e 00 00
	00 00		 mov	 DWORD PTR [esi+edi], 0

; 2710 :   size_t i;
; 2711 :   for(i = 0; i < info->text_num; i++)

  00045	89 45 fc	 mov	 DWORD PTR _i$1$[ebp], eax
  00048	3b 43 3c	 cmp	 eax, DWORD PTR [ebx+60]
  0004b	72 c6		 jb	 SHORT $LL3@LodePNGTex
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
$LN1@LodePNGTex:

; 73   :   free(ptr);

  0004f	ff 73 40	 push	 DWORD PTR [ebx+64]
  00052	e8 00 00 00 00	 call	 _free
  00057	ff 73 44	 push	 DWORD PTR [ebx+68]
  0005a	e8 00 00 00 00	 call	 _free
  0005f	83 c4 08	 add	 esp, 8
  00062	5b		 pop	 ebx

; 2712 :   {
; 2713 :     string_cleanup(&info->text_keys[i]);
; 2714 :     string_cleanup(&info->text_strings[i]);
; 2715 :   }
; 2716 :   lodepng_free(info->text_keys);
; 2717 :   lodepng_free(info->text_strings);
; 2718 : }

  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
?LodePNGText_cleanup@@YAXPAULodePNGInfo@@@Z ENDP	; LodePNGText_cleanup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_add_text@@YAIPAULodePNGInfo@@PBD1@Z
_TEXT	SEGMENT
_key$1$ = -4						; size = 4
_str$ = 8						; size = 4
?lodepng_add_text@@YAIPAULodePNGInfo@@PBD1@Z PROC	; lodepng_add_text, COMDAT
; _info$ = ecx
; _key$ = edx

; 2739 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 2740 :   char** new_keys = (char**)(lodepng_realloc(info->text_keys, sizeof(char*) * (info->text_num + 1)));

  00009	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0000c	89 55 fc	 mov	 DWORD PTR _key$1$[ebp], edx
  0000f	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]

; 68   :   return realloc(ptr, new_size);

  00016	50		 push	 eax
  00017	ff 76 40	 push	 DWORD PTR [esi+64]
  0001a	e8 00 00 00 00	 call	 _realloc

; 2741 :   char** new_strings = (char**)(lodepng_realloc(info->text_strings, sizeof(char*) * (info->text_num + 1)));

  0001f	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  00022	8b d8		 mov	 ebx, eax
  00024	8d 0c 8d 04 00
	00 00		 lea	 ecx, DWORD PTR [ecx*4+4]

; 68   :   return realloc(ptr, new_size);

  0002b	51		 push	 ecx
  0002c	ff 76 44	 push	 DWORD PTR [esi+68]
  0002f	e8 00 00 00 00	 call	 _realloc
  00034	83 c4 10	 add	 esp, 16			; 00000010H

; 2741 :   char** new_strings = (char**)(lodepng_realloc(info->text_strings, sizeof(char*) * (info->text_num + 1)));

  00037	8b f8		 mov	 edi, eax

; 2742 :   if(!new_keys || !new_strings)

  00039	85 db		 test	 ebx, ebx
  0003b	0f 84 89 00 00
	00		 je	 $LN1@lodepng_ad
  00041	85 ff		 test	 edi, edi
  00043	0f 84 81 00 00
	00		 je	 $LN1@lodepng_ad

; 2747 :   }
; 2748 : 
; 2749 :   info->text_num++;

  00049	ff 46 3c	 inc	 DWORD PTR [esi+60]
  0004c	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]

; 2751 :   info->text_strings = new_strings;

  0004f	89 7e 44	 mov	 DWORD PTR [esi+68], edi

; 2752 : 
; 2753 :   string_init(&info->text_keys[info->text_num - 1]);

  00052	8d 3c 8b	 lea	 edi, DWORD PTR [ebx+ecx*4]

; 68   :   return realloc(ptr, new_size);

  00055	6a 01		 push	 1

; 2750 :   info->text_keys = new_keys;

  00057	89 5e 40	 mov	 DWORD PTR [esi+64], ebx

; 68   :   return realloc(ptr, new_size);

  0005a	6a 00		 push	 0

; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;

  0005c	c7 47 fc 00 00
	00 00		 mov	 DWORD PTR [edi-4], 0

; 68   :   return realloc(ptr, new_size);

  00063	e8 00 00 00 00	 call	 _realloc
  00068	83 c4 08	 add	 esp, 8

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)

  0006b	85 c0		 test	 eax, eax
  0006d	74 06		 je	 SHORT $LN15@lodepng_ad

; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/

  0006f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 293  :     *out = data;

  00072	89 47 fc	 mov	 DWORD PTR [edi-4], eax
$LN15@lodepng_ad:

; 2754 :   string_set(&info->text_keys[info->text_num - 1], key);

  00075	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00078	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  0007b	8b 55 fc	 mov	 edx, DWORD PTR _key$1$[ebp]
  0007e	83 e8 04	 sub	 eax, 4
  00081	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00084	e8 00 00 00 00	 call	 ?string_set@@YAXPAPADPBD@Z ; string_set

; 2755 : 
; 2756 :   string_init(&info->text_strings[info->text_num - 1]);

  00089	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  0008c	8b 46 44	 mov	 eax, DWORD PTR [esi+68]

; 68   :   return realloc(ptr, new_size);

  0008f	6a 01		 push	 1

; 2755 : 
; 2756 :   string_init(&info->text_strings[info->text_num - 1]);

  00091	8d 3c 88	 lea	 edi, DWORD PTR [eax+ecx*4]

; 68   :   return realloc(ptr, new_size);

  00094	6a 00		 push	 0

; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;

  00096	c7 47 fc 00 00
	00 00		 mov	 DWORD PTR [edi-4], 0

; 68   :   return realloc(ptr, new_size);

  0009d	e8 00 00 00 00	 call	 _realloc
  000a2	83 c4 08	 add	 esp, 8

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)

  000a5	85 c0		 test	 eax, eax
  000a7	74 06		 je	 SHORT $LN22@lodepng_ad

; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/

  000a9	c6 00 00	 mov	 BYTE PTR [eax], 0

; 293  :     *out = data;

  000ac	89 47 fc	 mov	 DWORD PTR [edi-4], eax
$LN22@lodepng_ad:

; 2757 :   string_set(&info->text_strings[info->text_num - 1], str);

  000af	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  000b2	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000b5	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  000b8	49		 dec	 ecx
  000b9	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  000bc	e8 00 00 00 00	 call	 ?string_set@@YAXPAPADPBD@Z ; string_set
  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi

; 2758 : 
; 2759 :   return 0;

  000c3	33 c0		 xor	 eax, eax
  000c5	5b		 pop	 ebx

; 2760 : }

  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
$LN1@lodepng_ad:

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  000ca	53		 push	 ebx
  000cb	e8 00 00 00 00	 call	 _free
  000d0	57		 push	 edi
  000d1	e8 00 00 00 00	 call	 _free
  000d6	83 c4 08	 add	 esp, 8

; 2743 :   {
; 2744 :     lodepng_free(new_keys);
; 2745 :     lodepng_free(new_strings);
; 2746 :     return 83; /*alloc fail*/

  000d9	b8 53 00 00 00	 mov	 eax, 83			; 00000053H
  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx

; 2760 : }

  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
?lodepng_add_text@@YAIPAULodePNGInfo@@PBD1@Z ENDP	; lodepng_add_text
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?LodePNGIText_init@@YAXPAULodePNGInfo@@@Z
_TEXT	SEGMENT
?LodePNGIText_init@@YAXPAULodePNGInfo@@@Z PROC		; LodePNGIText_init, COMDAT
; _info$ = ecx

; 2766 :   info->itext_num = 0;

  00000	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 2767 :   info->itext_keys = NULL;

  00007	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0

; 2768 :   info->itext_langtags = NULL;

  0000e	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0

; 2769 :   info->itext_transkeys = NULL;

  00015	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], 0

; 2770 :   info->itext_strings = NULL;

  0001c	c7 41 58 00 00
	00 00		 mov	 DWORD PTR [ecx+88], 0

; 2771 : }

  00023	c3		 ret	 0
?LodePNGIText_init@@YAXPAULodePNGInfo@@@Z ENDP		; LodePNGIText_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?LodePNGIText_cleanup@@YAXPAULodePNGInfo@@@Z
_TEXT	SEGMENT
_i$1$ = -4						; size = 4
?LodePNGIText_cleanup@@YAXPAULodePNGInfo@@@Z PROC	; LodePNGIText_cleanup, COMDAT
; _info$ = ecx

; 2774 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)

  00007	33 c0		 xor	 eax, eax
  00009	89 45 fc	 mov	 DWORD PTR _i$1$[ebp], eax
  0000c	39 46 48	 cmp	 DWORD PTR [esi+72], eax
  0000f	76 62		 jbe	 SHORT $LN1@LodePNGITe
  00011	53		 push	 ebx
  00012	57		 push	 edi
$LL3@LodePNGITe:
  00013	8b 7e 4c	 mov	 edi, DWORD PTR [esi+76]
  00016	8d 1c 85 00 00
	00 00		 lea	 ebx, DWORD PTR [eax*4]

; 73   :   free(ptr);

  0001d	ff 34 1f	 push	 DWORD PTR [edi+ebx]
  00020	e8 00 00 00 00	 call	 _free

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;

  00025	c7 04 1f 00 00
	00 00		 mov	 DWORD PTR [edi+ebx], 0

; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)

  0002c	8b 7e 50	 mov	 edi, DWORD PTR [esi+80]

; 73   :   free(ptr);

  0002f	ff 34 1f	 push	 DWORD PTR [edi+ebx]
  00032	e8 00 00 00 00	 call	 _free

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;

  00037	c7 04 1f 00 00
	00 00		 mov	 DWORD PTR [edi+ebx], 0

; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)

  0003e	8b 7e 54	 mov	 edi, DWORD PTR [esi+84]

; 73   :   free(ptr);

  00041	ff 34 1f	 push	 DWORD PTR [edi+ebx]
  00044	e8 00 00 00 00	 call	 _free

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;

  00049	c7 04 1f 00 00
	00 00		 mov	 DWORD PTR [edi+ebx], 0

; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)

  00050	8b 7e 58	 mov	 edi, DWORD PTR [esi+88]

; 73   :   free(ptr);

  00053	ff 34 1f	 push	 DWORD PTR [edi+ebx]
  00056	e8 00 00 00 00	 call	 _free

; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _i$1$[ebp]
  0005e	40		 inc	 eax

; 73   :   free(ptr);

  0005f	83 c4 10	 add	 esp, 16			; 00000010H

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;

  00062	c7 04 1f 00 00
	00 00		 mov	 DWORD PTR [edi+ebx], 0

; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)

  00069	89 45 fc	 mov	 DWORD PTR _i$1$[ebp], eax
  0006c	3b 46 48	 cmp	 eax, DWORD PTR [esi+72]
  0006f	72 a2		 jb	 SHORT $LL3@LodePNGITe
  00071	5f		 pop	 edi
  00072	5b		 pop	 ebx
$LN1@LodePNGITe:

; 73   :   free(ptr);

  00073	ff 76 4c	 push	 DWORD PTR [esi+76]
  00076	e8 00 00 00 00	 call	 _free
  0007b	ff 76 50	 push	 DWORD PTR [esi+80]
  0007e	e8 00 00 00 00	 call	 _free
  00083	ff 76 54	 push	 DWORD PTR [esi+84]
  00086	e8 00 00 00 00	 call	 _free
  0008b	ff 76 58	 push	 DWORD PTR [esi+88]
  0008e	e8 00 00 00 00	 call	 _free
  00093	83 c4 10	 add	 esp, 16			; 00000010H
  00096	5e		 pop	 esi

; 2777 :   {
; 2778 :     string_cleanup(&info->itext_keys[i]);
; 2779 :     string_cleanup(&info->itext_langtags[i]);
; 2780 :     string_cleanup(&info->itext_transkeys[i]);
; 2781 :     string_cleanup(&info->itext_strings[i]);
; 2782 :   }
; 2783 :   lodepng_free(info->itext_keys);
; 2784 :   lodepng_free(info->itext_langtags);
; 2785 :   lodepng_free(info->itext_transkeys);
; 2786 :   lodepng_free(info->itext_strings);
; 2787 : }

  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
?LodePNGIText_cleanup@@YAXPAULodePNGInfo@@@Z ENDP	; LodePNGIText_cleanup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_add_itext@@YAIPAULodePNGInfo@@PBD111@Z
_TEXT	SEGMENT
_new_strings$1$ = -12					; size = 4
_key$1$ = -8						; size = 4
_new_keys$1$ = -4					; size = 4
_langtag$ = 8						; size = 4
_transkey$ = 12						; size = 4
_str$ = 16						; size = 4
?lodepng_add_itext@@YAIPAULodePNGInfo@@PBD111@Z PROC	; lodepng_add_itext, COMDAT
; _info$ = ecx
; _key$ = edx

; 2812 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 2813 :   char** new_keys = (char**)(lodepng_realloc(info->itext_keys, sizeof(char*) * (info->itext_num + 1)));

  0000b	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  0000e	89 55 f8	 mov	 DWORD PTR _key$1$[ebp], edx
  00011	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]

; 68   :   return realloc(ptr, new_size);

  00018	50		 push	 eax
  00019	ff 76 4c	 push	 DWORD PTR [esi+76]
  0001c	e8 00 00 00 00	 call	 _realloc

; 2814 :   char** new_langtags = (char**)(lodepng_realloc(info->itext_langtags, sizeof(char*) * (info->itext_num + 1)));

  00021	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00024	89 45 fc	 mov	 DWORD PTR _new_keys$1$[ebp], eax
  00027	8d 0c 8d 04 00
	00 00		 lea	 ecx, DWORD PTR [ecx*4+4]

; 68   :   return realloc(ptr, new_size);

  0002e	51		 push	 ecx
  0002f	ff 76 50	 push	 DWORD PTR [esi+80]
  00032	e8 00 00 00 00	 call	 _realloc

; 2815 :   char** new_transkeys = (char**)(lodepng_realloc(info->itext_transkeys, sizeof(char*) * (info->itext_num + 1)));

  00037	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0003a	8b f8		 mov	 edi, eax
  0003c	8d 0c 8d 04 00
	00 00		 lea	 ecx, DWORD PTR [ecx*4+4]

; 68   :   return realloc(ptr, new_size);

  00043	51		 push	 ecx
  00044	ff 76 54	 push	 DWORD PTR [esi+84]
  00047	e8 00 00 00 00	 call	 _realloc

; 2816 :   char** new_strings = (char**)(lodepng_realloc(info->itext_strings, sizeof(char*) * (info->itext_num + 1)));

  0004c	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0004f	8b d8		 mov	 ebx, eax
  00051	8d 0c 8d 04 00
	00 00		 lea	 ecx, DWORD PTR [ecx*4+4]

; 68   :   return realloc(ptr, new_size);

  00058	51		 push	 ecx
  00059	ff 76 58	 push	 DWORD PTR [esi+88]
  0005c	e8 00 00 00 00	 call	 _realloc

; 2817 :   if(!new_keys || !new_langtags || !new_transkeys || !new_strings)

  00061	8b 55 fc	 mov	 edx, DWORD PTR _new_keys$1$[ebp]

; 68   :   return realloc(ptr, new_size);

  00064	83 c4 20	 add	 esp, 32			; 00000020H

; 2816 :   char** new_strings = (char**)(lodepng_realloc(info->itext_strings, sizeof(char*) * (info->itext_num + 1)));

  00067	8b c8		 mov	 ecx, eax
  00069	89 4d f4	 mov	 DWORD PTR _new_strings$1$[ebp], ecx

; 2817 :   if(!new_keys || !new_langtags || !new_transkeys || !new_strings)

  0006c	85 d2		 test	 edx, edx
  0006e	0f 84 13 01 00
	00		 je	 $LN1@lodepng_ad
  00074	85 ff		 test	 edi, edi
  00076	0f 84 0b 01 00
	00		 je	 $LN1@lodepng_ad
  0007c	85 db		 test	 ebx, ebx
  0007e	0f 84 03 01 00
	00		 je	 $LN1@lodepng_ad
  00084	85 c9		 test	 ecx, ecx
  00086	0f 84 fb 00 00
	00		 je	 $LN1@lodepng_ad

; 2824 :   }
; 2825 : 
; 2826 :   info->itext_num++;

  0008c	ff 46 48	 inc	 DWORD PTR [esi+72]
  0008f	8b 46 48	 mov	 eax, DWORD PTR [esi+72]

; 2828 :   info->itext_langtags = new_langtags;

  00092	89 7e 50	 mov	 DWORD PTR [esi+80], edi

; 2831 : 
; 2832 :   string_init(&info->itext_keys[info->itext_num - 1]);

  00095	8d 3c 82	 lea	 edi, DWORD PTR [edx+eax*4]

; 68   :   return realloc(ptr, new_size);

  00098	6a 01		 push	 1

; 2827 :   info->itext_keys = new_keys;

  0009a	89 56 4c	 mov	 DWORD PTR [esi+76], edx

; 2829 :   info->itext_transkeys = new_transkeys;

  0009d	89 5e 54	 mov	 DWORD PTR [esi+84], ebx

; 2830 :   info->itext_strings = new_strings;

  000a0	89 4e 58	 mov	 DWORD PTR [esi+88], ecx

; 68   :   return realloc(ptr, new_size);

  000a3	6a 00		 push	 0

; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;

  000a5	c7 47 fc 00 00
	00 00		 mov	 DWORD PTR [edi-4], 0

; 68   :   return realloc(ptr, new_size);

  000ac	e8 00 00 00 00	 call	 _realloc
  000b1	83 c4 08	 add	 esp, 8

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)

  000b4	85 c0		 test	 eax, eax
  000b6	74 06		 je	 SHORT $LN23@lodepng_ad

; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/

  000b8	c6 00 00	 mov	 BYTE PTR [eax], 0

; 293  :     *out = data;

  000bb	89 47 fc	 mov	 DWORD PTR [edi-4], eax
$LN23@lodepng_ad:

; 2833 :   string_set(&info->itext_keys[info->itext_num - 1], key);

  000be	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  000c1	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000c4	8b 55 f8	 mov	 edx, DWORD PTR _key$1$[ebp]
  000c7	83 e8 04	 sub	 eax, 4
  000ca	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  000cd	e8 00 00 00 00	 call	 ?string_set@@YAXPAPADPBD@Z ; string_set

; 2834 : 
; 2835 :   string_init(&info->itext_langtags[info->itext_num - 1]);

  000d2	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000d5	8b 46 50	 mov	 eax, DWORD PTR [esi+80]

; 68   :   return realloc(ptr, new_size);

  000d8	6a 01		 push	 1

; 2834 : 
; 2835 :   string_init(&info->itext_langtags[info->itext_num - 1]);

  000da	8d 3c 88	 lea	 edi, DWORD PTR [eax+ecx*4]

; 68   :   return realloc(ptr, new_size);

  000dd	6a 00		 push	 0

; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;

  000df	c7 47 fc 00 00
	00 00		 mov	 DWORD PTR [edi-4], 0

; 68   :   return realloc(ptr, new_size);

  000e6	e8 00 00 00 00	 call	 _realloc
  000eb	83 c4 08	 add	 esp, 8

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)

  000ee	85 c0		 test	 eax, eax
  000f0	74 06		 je	 SHORT $LN30@lodepng_ad

; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/

  000f2	c6 00 00	 mov	 BYTE PTR [eax], 0

; 293  :     *out = data;

  000f5	89 47 fc	 mov	 DWORD PTR [edi-4], eax
$LN30@lodepng_ad:

; 2836 :   string_set(&info->itext_langtags[info->itext_num - 1], langtag);

  000f8	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  000fb	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000fe	8b 55 08	 mov	 edx, DWORD PTR _langtag$[ebp]
  00101	83 e8 04	 sub	 eax, 4
  00104	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00107	e8 00 00 00 00	 call	 ?string_set@@YAXPAPADPBD@Z ; string_set

; 2837 : 
; 2838 :   string_init(&info->itext_transkeys[info->itext_num - 1]);

  0010c	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0010f	8b 46 54	 mov	 eax, DWORD PTR [esi+84]

; 68   :   return realloc(ptr, new_size);

  00112	6a 01		 push	 1

; 2837 : 
; 2838 :   string_init(&info->itext_transkeys[info->itext_num - 1]);

  00114	8d 3c 88	 lea	 edi, DWORD PTR [eax+ecx*4]

; 68   :   return realloc(ptr, new_size);

  00117	6a 00		 push	 0

; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;

  00119	c7 47 fc 00 00
	00 00		 mov	 DWORD PTR [edi-4], 0

; 68   :   return realloc(ptr, new_size);

  00120	e8 00 00 00 00	 call	 _realloc
  00125	83 c4 08	 add	 esp, 8

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)

  00128	85 c0		 test	 eax, eax
  0012a	74 06		 je	 SHORT $LN37@lodepng_ad

; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/

  0012c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 293  :     *out = data;

  0012f	89 47 fc	 mov	 DWORD PTR [edi-4], eax
$LN37@lodepng_ad:

; 2839 :   string_set(&info->itext_transkeys[info->itext_num - 1], transkey);

  00132	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  00135	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00138	8b 55 0c	 mov	 edx, DWORD PTR _transkey$[ebp]
  0013b	83 e8 04	 sub	 eax, 4
  0013e	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00141	e8 00 00 00 00	 call	 ?string_set@@YAXPAPADPBD@Z ; string_set

; 2840 : 
; 2841 :   string_init(&info->itext_strings[info->itext_num - 1]);

  00146	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00149	8b 46 58	 mov	 eax, DWORD PTR [esi+88]

; 68   :   return realloc(ptr, new_size);

  0014c	6a 01		 push	 1

; 2840 : 
; 2841 :   string_init(&info->itext_strings[info->itext_num - 1]);

  0014e	8d 3c 88	 lea	 edi, DWORD PTR [eax+ecx*4]

; 68   :   return realloc(ptr, new_size);

  00151	6a 00		 push	 0

; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;

  00153	c7 47 fc 00 00
	00 00		 mov	 DWORD PTR [edi-4], 0

; 68   :   return realloc(ptr, new_size);

  0015a	e8 00 00 00 00	 call	 _realloc
  0015f	83 c4 08	 add	 esp, 8

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)

  00162	85 c0		 test	 eax, eax
  00164	74 06		 je	 SHORT $LN44@lodepng_ad

; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/

  00166	c6 00 00	 mov	 BYTE PTR [eax], 0

; 293  :     *out = data;

  00169	89 47 fc	 mov	 DWORD PTR [edi-4], eax
$LN44@lodepng_ad:

; 2842 :   string_set(&info->itext_strings[info->itext_num - 1], str);

  0016c	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0016f	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00172	8b 55 10	 mov	 edx, DWORD PTR _str$[ebp]
  00175	49		 dec	 ecx
  00176	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00179	e8 00 00 00 00	 call	 ?string_set@@YAXPAPADPBD@Z ; string_set
  0017e	5f		 pop	 edi
  0017f	5e		 pop	 esi

; 2843 : 
; 2844 :   return 0;

  00180	33 c0		 xor	 eax, eax
  00182	5b		 pop	 ebx

; 2845 : }

  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c3		 ret	 0
$LN1@lodepng_ad:

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  00187	52		 push	 edx
  00188	e8 00 00 00 00	 call	 _free
  0018d	57		 push	 edi
  0018e	e8 00 00 00 00	 call	 _free
  00193	53		 push	 ebx
  00194	e8 00 00 00 00	 call	 _free
  00199	ff 75 f4	 push	 DWORD PTR _new_strings$1$[ebp]
  0019c	e8 00 00 00 00	 call	 _free
  001a1	83 c4 10	 add	 esp, 16			; 00000010H

; 2818 :   {
; 2819 :     lodepng_free(new_keys);
; 2820 :     lodepng_free(new_langtags);
; 2821 :     lodepng_free(new_transkeys);
; 2822 :     lodepng_free(new_strings);
; 2823 :     return 83; /*alloc fail*/

  001a4	b8 53 00 00 00	 mov	 eax, 83			; 00000053H
  001a9	5f		 pop	 edi
  001aa	5e		 pop	 esi
  001ab	5b		 pop	 ebx

; 2845 : }

  001ac	8b e5		 mov	 esp, ebp
  001ae	5d		 pop	 ebp
  001af	c3		 ret	 0
?lodepng_add_itext@@YAIPAULodePNGInfo@@PBD111@Z ENDP	; lodepng_add_itext
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_info_init@@YAXPAULodePNGInfo@@@Z
_TEXT	SEGMENT
?lodepng_info_init@@YAXPAULodePNGInfo@@@Z PROC		; lodepng_info_init, COMDAT
; _info$ = ecx

; 2535 :   info->key_defined = 0;

  00000	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 2536 :   info->key_r = info->key_g = info->key_b = 0;

  00007	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  0000e	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  00015	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 2537 :   info->colortype = LCT_RGBA;

  0001c	c7 41 0c 06 00
	00 00		 mov	 DWORD PTR [ecx+12], 6

; 2538 :   info->bitdepth = 8;

  00023	c7 41 10 08 00
	00 00		 mov	 DWORD PTR [ecx+16], 8

; 2539 :   info->palette = 0;

  0002a	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 2540 :   info->palettesize = 0;

  00031	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 2850 :   lodepng_color_mode_init(&info->color);
; 2851 :   info->interlace_method = 0;

  00038	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 2852 :   info->compression_method = 0;

  0003f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 2853 :   info->filter_method = 0;

  00045	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 2854 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2855 :   info->background_defined = 0;

  0004c	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 2856 :   info->background_r = info->background_g = info->background_b = 0;

  00053	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0
  0005a	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
  00061	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 2670 : }
; 2671 : 
; 2672 : static void LodePNGUnknownChunks_cleanup(LodePNGInfo* info)
; 2673 : {
; 2674 :   unsigned i;
; 2675 :   for(i = 0; i < 3; i++) lodepng_free(info->unknown_chunks_data[i]);
; 2676 : }
; 2677 : 
; 2678 : static unsigned LodePNGUnknownChunks_copy(LodePNGInfo* dest, const LodePNGInfo* src)
; 2679 : {
; 2680 :   unsigned i;
; 2681 : 
; 2682 :   LodePNGUnknownChunks_cleanup(dest);
; 2683 : 
; 2684 :   for(i = 0; i < 3; i++)
; 2685 :   {
; 2686 :     size_t j;
; 2687 :     dest->unknown_chunks_size[i] = src->unknown_chunks_size[i];
; 2688 :     dest->unknown_chunks_data[i] = (unsigned char*)lodepng_malloc(src->unknown_chunks_size[i]);
; 2689 :     if(!dest->unknown_chunks_data[i] && dest->unknown_chunks_size[i]) return 83; /*alloc fail*/
; 2690 :     for(j = 0; j < src->unknown_chunks_size[i]; j++)
; 2691 :     {
; 2692 :       dest->unknown_chunks_data[i][j] = src->unknown_chunks_data[i][j];
; 2693 :     }
; 2694 :   }
; 2695 : 
; 2696 :   return 0;
; 2697 : }
; 2698 : 
; 2699 : /******************************************************************************/
; 2700 : 
; 2701 : static void LodePNGText_init(LodePNGInfo* info)
; 2702 : {
; 2703 :   info->text_num = 0;

  00068	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0

; 2704 :   info->text_keys = NULL;

  0006f	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0

; 2705 :   info->text_strings = NULL;

  00076	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 2706 : }
; 2707 : 
; 2708 : static void LodePNGText_cleanup(LodePNGInfo* info)
; 2709 : {
; 2710 :   size_t i;
; 2711 :   for(i = 0; i < info->text_num; i++)
; 2712 :   {
; 2713 :     string_cleanup(&info->text_keys[i]);
; 2714 :     string_cleanup(&info->text_strings[i]);
; 2715 :   }
; 2716 :   lodepng_free(info->text_keys);
; 2717 :   lodepng_free(info->text_strings);
; 2718 : }
; 2719 : 
; 2720 : static unsigned LodePNGText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2721 : {
; 2722 :   size_t i = 0;
; 2723 :   dest->text_keys = 0;
; 2724 :   dest->text_strings = 0;
; 2725 :   dest->text_num = 0;
; 2726 :   for(i = 0; i < source->text_num; i++)
; 2727 :   {
; 2728 :     CERROR_TRY_RETURN(lodepng_add_text(dest, source->text_keys[i], source->text_strings[i]));
; 2729 :   }
; 2730 :   return 0;
; 2731 : }
; 2732 : 
; 2733 : void lodepng_clear_text(LodePNGInfo* info)
; 2734 : {
; 2735 :   LodePNGText_cleanup(info);
; 2736 : }
; 2737 : 
; 2738 : unsigned lodepng_add_text(LodePNGInfo* info, const char* key, const char* str)
; 2739 : {
; 2740 :   char** new_keys = (char**)(lodepng_realloc(info->text_keys, sizeof(char*) * (info->text_num + 1)));
; 2741 :   char** new_strings = (char**)(lodepng_realloc(info->text_strings, sizeof(char*) * (info->text_num + 1)));
; 2742 :   if(!new_keys || !new_strings)
; 2743 :   {
; 2744 :     lodepng_free(new_keys);
; 2745 :     lodepng_free(new_strings);
; 2746 :     return 83; /*alloc fail*/
; 2747 :   }
; 2748 : 
; 2749 :   info->text_num++;
; 2750 :   info->text_keys = new_keys;
; 2751 :   info->text_strings = new_strings;
; 2752 : 
; 2753 :   string_init(&info->text_keys[info->text_num - 1]);
; 2754 :   string_set(&info->text_keys[info->text_num - 1], key);
; 2755 : 
; 2756 :   string_init(&info->text_strings[info->text_num - 1]);
; 2757 :   string_set(&info->text_strings[info->text_num - 1], str);
; 2758 : 
; 2759 :   return 0;
; 2760 : }
; 2761 : 
; 2762 : /******************************************************************************/
; 2763 : 
; 2764 : static void LodePNGIText_init(LodePNGInfo* info)
; 2765 : {
; 2766 :   info->itext_num = 0;

  0007d	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 2767 :   info->itext_keys = NULL;

  00084	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0

; 2768 :   info->itext_langtags = NULL;

  0008b	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0

; 2769 :   info->itext_transkeys = NULL;

  00092	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], 0

; 2770 :   info->itext_strings = NULL;

  00099	c7 41 58 00 00
	00 00		 mov	 DWORD PTR [ecx+88], 0

; 2857 : 
; 2858 :   LodePNGText_init(info);
; 2859 :   LodePNGIText_init(info);
; 2860 : 
; 2861 :   info->time_defined = 0;

  000a0	c7 41 5c 00 00
	00 00		 mov	 DWORD PTR [ecx+92], 0

; 2862 :   info->phys_defined = 0;

  000a7	c7 41 78 00 00
	00 00		 mov	 DWORD PTR [ecx+120], 0

; 2541 : }
; 2542 : 
; 2543 : void lodepng_color_mode_cleanup(LodePNGColorMode* info)
; 2544 : {
; 2545 :   lodepng_palette_clear(info);
; 2546 : }
; 2547 : 
; 2548 : unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
; 2549 : {
; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;
; 2553 :   if(source->palette)
; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);
; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];
; 2558 :   }
; 2559 :   return 0;
; 2560 : }
; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);
; 2585 :   info->palette = 0;
; 2586 :   info->palettesize = 0;
; 2587 : }
; 2588 : 
; 2589 : unsigned lodepng_palette_add(LodePNGColorMode* info,
; 2590 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2591 : {
; 2592 :   unsigned char* data;
; 2593 :   /*the same resize technique as C++ std::vectors is used, and here it's made so that for a palette with
; 2594 :   the max of 256 colors, it'll have the exact alloc size*/
; 2595 :   if(!info->palette) /*allocate palette if empty*/
; 2596 :   {
; 2597 :     /*room for 256 colors with 4 bytes each*/
; 2598 :     data = (unsigned char*)lodepng_realloc(info->palette, 1024);
; 2599 :     if(!data) return 83; /*alloc fail*/
; 2600 :     else info->palette = data;
; 2601 :   }
; 2602 :   info->palette[4 * info->palettesize + 0] = r;
; 2603 :   info->palette[4 * info->palettesize + 1] = g;
; 2604 :   info->palette[4 * info->palettesize + 2] = b;
; 2605 :   info->palette[4 * info->palettesize + 3] = a;
; 2606 :   info->palettesize++;
; 2607 :   return 0;
; 2608 : }
; 2609 : 
; 2610 : unsigned lodepng_get_bpp(const LodePNGColorMode* info)
; 2611 : {
; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }
; 2615 : 
; 2616 : unsigned lodepng_get_channels(const LodePNGColorMode* info)
; 2617 : {
; 2618 :   return getNumColorChannels(info->colortype);
; 2619 : }
; 2620 : 
; 2621 : unsigned lodepng_is_greyscale_type(const LodePNGColorMode* info)
; 2622 : {
; 2623 :   return info->colortype == LCT_GREY || info->colortype == LCT_GREY_ALPHA;
; 2624 : }
; 2625 : 
; 2626 : unsigned lodepng_is_alpha_type(const LodePNGColorMode* info)
; 2627 : {
; 2628 :   return (info->colortype & 4) != 0; /*4 or 6*/
; 2629 : }
; 2630 : 
; 2631 : unsigned lodepng_is_palette_type(const LodePNGColorMode* info)
; 2632 : {
; 2633 :   return info->colortype == LCT_PALETTE;
; 2634 : }
; 2635 : 
; 2636 : unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info)
; 2637 : {
; 2638 :   size_t i;
; 2639 :   for(i = 0; i < info->palettesize; i++)
; 2640 :   {
; 2641 :     if(info->palette[i * 4 + 3] < 255) return 1;
; 2642 :   }
; 2643 :   return 0;
; 2644 : }
; 2645 : 
; 2646 : unsigned lodepng_can_have_alpha(const LodePNGColorMode* info)
; 2647 : {
; 2648 :   return info->key_defined
; 2649 :       || lodepng_is_alpha_type(info)
; 2650 :       || lodepng_has_palette_alpha(info);
; 2651 : }
; 2652 : 
; 2653 : size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode* color)
; 2654 : {
; 2655 :   return (w * h * lodepng_get_bpp(color) + 7) / 8;
; 2656 : }
; 2657 : 
; 2658 : size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)
; 2659 : {
; 2660 :   return (w * h * lodepng_get_bpp_lct(colortype, bitdepth) + 7) / 8;
; 2661 : }
; 2662 : 
; 2663 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2664 : 
; 2665 : static void LodePNGUnknownChunks_init(LodePNGInfo* info)
; 2666 : {
; 2667 :   unsigned i;
; 2668 :   for(i = 0; i < 3; i++) info->unknown_chunks_data[i] = 0;

  000ae	c7 81 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+136], 0
  000b8	c7 81 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+140], 0
  000c2	c7 81 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+144], 0

; 2669 :   for(i = 0; i < 3; i++) info->unknown_chunks_size[i] = 0;

  000cc	c7 81 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+148], 0
  000d6	c7 81 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+152], 0
  000e0	c7 81 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+156], 0

; 2863 : 
; 2864 :   LodePNGUnknownChunks_init(info);
; 2865 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2866 : }

  000ea	c3		 ret	 0
?lodepng_info_init@@YAXPAULodePNGInfo@@@Z ENDP		; lodepng_info_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z
_TEXT	SEGMENT
?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z PROC	; lodepng_info_cleanup, COMDAT
; _info$ = ecx

; 2869 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
; 945  :     (*bp)++;
; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);
; 965  :   generateFixedDistanceTree(tree_d);
; 966  : }
; 967  : 
; 968  : /*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
; 969  : static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
; 970  :                                       const unsigned char* in, size_t* bp, size_t inlength)
; 971  : {
; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;
; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/
; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;
; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;
; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;
; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)
; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
; 1009 :     if(error) break;
; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;
; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;
; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;
; 1020 :     while(i < HLIT + HDIST)
; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
; 1023 :       if(code <= 15) /*a length code*/
; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;
; 1026 :         else bitlen_d[i - HLIT] = code;
; 1027 :         i++;
; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/
; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);
; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];
; 1040 :         else value = bitlen_d[i - HLIT - 1];
; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)
; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
; 1045 :           if(i < HLIT) bitlen_ll[i] = value;
; 1046 :           else bitlen_d[i - HLIT] = value;
; 1047 :           i++;
; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/
; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);
; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)
; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1063 :           else bitlen_d[i - HLIT] = 0;
; 1064 :           i++;
; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/
; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);
; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)
; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1080 :           else bitlen_d[i - HLIT] = 0;
; 1081 :           i++;
; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))
; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;
; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/
; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;
; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 1102 :     if(error) break;
; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
; 1104 : 
; 1105 :     break; /*end of error-while*/
; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;
; 1114 : }
; 1115 : 
; 1116 : /*inflate a block with dynamic of fixed Huffman tree*/
; 1117 : static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
; 1118 :                                     size_t* pos, size_t inlength, unsigned btype)
; 1119 : {
; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;
; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/
; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/
; 1136 :     {
; 1137 :       if((*pos) >= out->size)
; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);
; 1143 :       (*pos)++;
; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);
; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
; 1161 :       if(code_d > 29)
; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;
; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/
; 1170 :         break;
; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);
; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);
; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)
; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)
; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];
; 1193 :         (*pos)++;
; 1194 :         backward++;
; 1195 :         if(backward >= start) backward = start - distance;
; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)
; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;
; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;
; 1215 : }
; 1216 : 
; 1217 : static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
; 1218 : {
; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;
; 1223 :   p = (*bp) / 8; /*byte position*/
; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/
; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;
; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;
; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)
; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];
; 1241 : 
; 1242 :   (*bp) = p * 8;
; 1243 : 
; 1244 :   return error;
; 1245 : }
; 1246 : 
; 1247 : static unsigned lodepng_inflatev(ucvector* out,
; 1248 :                                  const unsigned char* in, size_t insize,
; 1249 :                                  const LodePNGDecompressSettings* settings)
; 1250 : {
; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;
; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/
; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)
; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
; 1264 :     BFINAL = readBitFromStream(&bp, in);
; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);
; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
; 1271 : 
; 1272 :     if(error) return error;
; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/
; 1277 : 
; 1278 :   return error;
; 1279 : }
; 1280 : 
; 1281 : unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
; 1282 :                          const unsigned char* in, size_t insize,
; 1283 :                          const LodePNGDecompressSettings* settings)
; 1284 : {
; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);
; 1289 :   *out = v.data;
; 1290 :   *outsize = v.size;
; 1291 :   return error;
; 1292 : }
; 1293 : 
; 1294 : static unsigned inflate(unsigned char** out, size_t* outsize,
; 1295 :                         const unsigned char* in, size_t insize,
; 1296 :                         const LodePNGDecompressSettings* settings)
; 1297 : {
; 1298 :   if(settings->custom_inflate)
; 1299 :   {
; 1300 :     return settings->custom_inflate(out, outsize, in, insize, settings);
; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }
; 1307 : 
; 1308 : #endif /*LODEPNG_COMPILE_DECODER*/
; 1309 : 
; 1310 : #ifdef LODEPNG_COMPILE_ENCODER
; 1311 : 
; 1312 : /* ////////////////////////////////////////////////////////////////////////// */
; 1313 : /* / Deflator (Compressor)                                                  / */
; 1314 : /* ////////////////////////////////////////////////////////////////////////// */
; 1315 : 
; 1316 : static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;
; 1317 : 
; 1318 : /*bitlen is the size in bits of the code*/
; 1319 : static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)
; 1320 : {
; 1321 :   addBitsToStreamReversed(bp, compressed, code, bitlen);
; 1322 : }
; 1323 : 
; 1324 : /*search the index in the array, that has the largest value smaller than or equal to the given value,
; 1325 : given array must be sorted (if no value is smaller, it returns the size of the given array)*/
; 1326 : static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)
; 1327 : {
; 1328 :   /*linear search implementation*/
; 1329 :   /*for(size_t i = 1; i < array_size; i++) if(array[i] > value) return i - 1;
; 1330 :   return array_size - 1;*/
; 1331 : 
; 1332 :   /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
; 1333 :   size_t left  = 1;
; 1334 :   size_t right = array_size - 1;
; 1335 :   while(left <= right)
; 1336 :   {
; 1337 :     size_t mid = (left + right) / 2;
; 1338 :     if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
; 1339 :     else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
; 1340 :     else return mid - 1;
; 1341 :   }
; 1342 :   return array_size - 1;
; 1343 : }
; 1344 : 
; 1345 : static void addLengthDistance(uivector* values, size_t length, size_t distance)
; 1346 : {
; 1347 :   /*values in encoded vector are those used by deflate:
; 1348 :   0-255: literal bytes
; 1349 :   256: end
; 1350 :   257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
; 1351 :   286-287: invalid*/
; 1352 : 
; 1353 :   unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
; 1354 :   unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
; 1355 :   unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
; 1356 :   unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);
; 1357 : 
; 1358 :   uivector_push_back(values, length_code + FIRST_LENGTH_CODE_INDEX);
; 1359 :   uivector_push_back(values, extra_length);
; 1360 :   uivector_push_back(values, dist_code);
; 1361 :   uivector_push_back(values, extra_distance);
; 1362 : }
; 1363 : 
; 1364 : static const unsigned HASH_NUM_VALUES = 65536;
; 1365 : static const unsigned HASH_NUM_CHARACTERS = 3;
; 1366 : static const unsigned HASH_SHIFT = 2;
; 1367 : /*
; 1368 : The HASH_NUM_CHARACTERS value is used to make encoding faster by using longer
; 1369 : sequences to generate a hash value from the stream bytes. Setting it to 3
; 1370 : gives exactly the same compression as the brute force method, since deflate's
; 1371 : run length encoding starts with lengths of 3. Setting it to higher values,
; 1372 : like 6, can make the encoding faster (not always though!), but will cause the
; 1373 : encoding to miss any length between 3 and this value, so that the compression
; 1374 : may be worse (but this can vary too depending on the image, sometimes it is
; 1375 : even a bit better instead).
; 1376 : The HASH_NUM_VALUES is the amount of unique possible hash values that
; 1377 : combinations of bytes can give, the higher it is the more memory is needed, but
; 1378 : if it's too low the advantage of hashing is gone.
; 1379 : */
; 1380 : 
; 1381 : typedef struct Hash
; 1382 : {
; 1383 :   int* head; /*hash value to head circular pos*/
; 1384 :   int* val; /*circular pos to hash value*/
; 1385 :   /*circular pos to prev circular pos*/
; 1386 :   unsigned short* chain;
; 1387 :   unsigned short* zeros;
; 1388 : } Hash;
; 1389 : 
; 1390 : static unsigned hash_init(Hash* hash, unsigned windowsize)
; 1391 : {
; 1392 :   unsigned i;
; 1393 :   hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
; 1394 :   hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
; 1395 :   hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1396 :   hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1397 : 
; 1398 :   if(!hash->head || !hash->val || !hash->chain || !hash->zeros) return 83; /*alloc fail*/
; 1399 : 
; 1400 :   /*initialize hash table*/
; 1401 :   for(i = 0; i < HASH_NUM_VALUES; i++) hash->head[i] = -1;
; 1402 :   for(i = 0; i < windowsize; i++) hash->val[i] = -1;
; 1403 :   for(i = 0; i < windowsize; i++) hash->chain[i] = i; /*same value as index indicates uninitialized*/
; 1404 : 
; 1405 :   return 0;
; 1406 : }
; 1407 : 
; 1408 : static void hash_cleanup(Hash* hash)
; 1409 : {
; 1410 :   lodepng_free(hash->head);
; 1411 :   lodepng_free(hash->val);
; 1412 :   lodepng_free(hash->chain);
; 1413 :   lodepng_free(hash->zeros);
; 1414 : }
; 1415 : 
; 1416 : static unsigned getHash(const unsigned char* data, size_t size, size_t pos)
; 1417 : {
; 1418 :   unsigned result = 0;
; 1419 :   size_t amount, i;
; 1420 :   if(pos >= size) return 0;
; 1421 :   amount = HASH_NUM_CHARACTERS;
; 1422 :   if(pos + amount >= size) amount = size - pos;
; 1423 :   for(i = 0; i < amount; i++) result ^= (data[pos + i] << (i * HASH_SHIFT));
; 1424 :   return result % HASH_NUM_VALUES;
; 1425 : }
; 1426 : 
; 1427 : static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)
; 1428 : {
; 1429 :   const unsigned char* start = data + pos;
; 1430 :   const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
; 1431 :   if(end > data + size) end = data + size;
; 1432 :   data = start;
; 1433 :   while (data != end && *data == 0) data++;
; 1434 :   /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
; 1435 :   return (unsigned)(data - start);
; 1436 : }
; 1437 : 
; 1438 : static void updateHashChain(Hash* hash, size_t pos, int hashval, unsigned windowsize)
; 1439 : {
; 1440 :   unsigned wpos = pos % windowsize;
; 1441 :   hash->val[wpos] = hashval;
; 1442 :   if(hash->head[hashval] != -1) hash->chain[wpos] = hash->head[hashval];
; 1443 :   hash->head[hashval] = wpos;
; 1444 : }
; 1445 : 
; 1446 : /*
; 1447 : LZ77-encode the data. Return value is error code. The input are raw bytes, the output
; 1448 : is in the form of unsigned integers with codes representing for example literal bytes, or
; 1449 : length/distance pairs.
; 1450 : It uses a hash table technique to let it encode faster. When doing LZ77 encoding, a
; 1451 : sliding window (of windowsize) is used, and all past bytes in that window can be used as
; 1452 : the "dictionary". A brute force search through all possible distances would be slow, and
; 1453 : this hash technique is one out of several ways to speed this up.
; 1454 : */
; 1455 : static unsigned encodeLZ77(uivector* out, Hash* hash,
; 1456 :                            const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
; 1457 :                            unsigned minmatch, unsigned nicematch, unsigned lazymatching)
; 1458 : {
; 1459 :   unsigned short numzeros = 0;
; 1460 :   int usezeros = windowsize >= 8192; /*for small window size, the 'max chain length' optimization does a better job*/
; 1461 :   unsigned pos, i, error = 0;
; 1462 :   /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
; 1463 :   unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8;
; 1464 :   unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;
; 1465 : 
; 1466 :   if(!error)
; 1467 :   {
; 1468 :     unsigned offset; /*the offset represents the distance in LZ77 terminology*/
; 1469 :     unsigned length;
; 1470 :     unsigned lazy = 0;
; 1471 :     unsigned lazylength = 0, lazyoffset = 0;
; 1472 :     unsigned hashval;
; 1473 :     unsigned current_offset, current_length;
; 1474 :     const unsigned char *lastptr, *foreptr, *backptr;
; 1475 :     unsigned short hashpos, prevpos;
; 1476 : 
; 1477 :     for(pos = inpos; pos < insize; pos++)
; 1478 :     {
; 1479 :       size_t wpos = pos % windowsize; /*position for in 'circular' hash buffers*/
; 1480 : 
; 1481 :       hashval = getHash(in, insize, pos);
; 1482 :       updateHashChain(hash, pos, hashval, windowsize);
; 1483 : 
; 1484 :       if(usezeros && hashval == 0)
; 1485 :       {
; 1486 :         numzeros = countZeros(in, insize, pos);
; 1487 :         hash->zeros[wpos] = numzeros;
; 1488 :       }
; 1489 : 
; 1490 :       /*the length and offset found for the current position*/
; 1491 :       length = 0;
; 1492 :       offset = 0;
; 1493 : 
; 1494 :       prevpos = hash->head[hashval];
; 1495 :       hashpos = hash->chain[prevpos];
; 1496 : 
; 1497 :       lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];
; 1498 : 
; 1499 :       /*search for the longest string*/
; 1500 :       if(hash->val[wpos] == (int)hashval)
; 1501 :       {
; 1502 :         unsigned chainlength = 0;
; 1503 :         for(;;)
; 1504 :         {
; 1505 :           /*stop when went completely around the circular buffer*/
; 1506 :           if(prevpos < wpos && hashpos > prevpos && hashpos <= wpos) break;
; 1507 :           if(prevpos > wpos && (hashpos <= wpos || hashpos > prevpos)) break;
; 1508 :           if(chainlength++ >= maxchainlength) break;
; 1509 : 
; 1510 :           current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;
; 1511 :           if(current_offset > 0)
; 1512 :           {
; 1513 :             /*test the next characters*/
; 1514 :             foreptr = &in[pos];
; 1515 :             backptr = &in[pos - current_offset];
; 1516 : 
; 1517 :             /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
; 1518 :             if(usezeros && hashval == 0 && hash->val[hashpos] == 0 /*hashval[hashpos] may be out of date*/)
; 1519 :             {
; 1520 :               unsigned short skip = hash->zeros[hashpos];
; 1521 :               if(skip > numzeros) skip = numzeros;
; 1522 :               backptr += skip;
; 1523 :               foreptr += skip;
; 1524 :             }
; 1525 : 
; 1526 :             /* multiple checks at once per array bounds check */
; 1527 :             while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
; 1528 :             {
; 1529 :               ++backptr;
; 1530 :               ++foreptr;
; 1531 :             }
; 1532 :             current_length = (unsigned)(foreptr - &in[pos]);
; 1533 : 
; 1534 :             if(current_length > length)
; 1535 :             {
; 1536 :               length = current_length; /*the longest length*/
; 1537 :               offset = current_offset; /*the offset that is related to this longest length*/
; 1538 :               /*jump out once a length of max length is found (speed gain)*/
; 1539 :               if(current_length >= nicematch || current_length == MAX_SUPPORTED_DEFLATE_LENGTH) break;
; 1540 :             }
; 1541 :           }
; 1542 : 
; 1543 :           if(hashpos == hash->chain[hashpos]) break;
; 1544 : 
; 1545 :           prevpos = hashpos;
; 1546 :           hashpos = hash->chain[hashpos];
; 1547 :         }
; 1548 :       }
; 1549 : 
; 1550 :       if(lazymatching)
; 1551 :       {
; 1552 :         if(!lazy && length >= 3 && length <= maxlazymatch && length < MAX_SUPPORTED_DEFLATE_LENGTH)
; 1553 :         {
; 1554 :           lazy = 1;
; 1555 :           lazylength = length;
; 1556 :           lazyoffset = offset;
; 1557 :           continue; /*try the next byte*/
; 1558 :         }
; 1559 :         if(lazy)
; 1560 :         {
; 1561 :           lazy = 0;
; 1562 :           if(pos == 0) ERROR_BREAK(81);
; 1563 :           if(length > lazylength + 1)
; 1564 :           {
; 1565 :             /*push the previous character as literal*/
; 1566 :             if(!uivector_push_back(out, in[pos - 1])) ERROR_BREAK(83 /*alloc fail*/);
; 1567 :           }
; 1568 :           else
; 1569 :           {
; 1570 :             length = lazylength;
; 1571 :             offset = lazyoffset;
; 1572 :             hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
; 1573 :             pos--;
; 1574 :           }
; 1575 :         }
; 1576 :       }
; 1577 :       if(length >= 3 && offset > windowsize) ERROR_BREAK(86 /*too big (or overflown negative) offset*/);
; 1578 : 
; 1579 :       /**encode it as length/distance pair or literal value**/
; 1580 :       if(length < 3) /*only lengths of 3 or higher are supported as length/distance pair*/
; 1581 :       {
; 1582 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1583 :       }
; 1584 :       else if(length < minmatch || (length == 3 && offset > 4096))
; 1585 :       {
; 1586 :         /*compensate for the fact that longer offsets have more extra bits, a
; 1587 :         length of only 3 may be not worth it then*/
; 1588 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1589 :       }
; 1590 :       else
; 1591 :       {
; 1592 :         addLengthDistance(out, length, offset);
; 1593 :         for(i = 1; i < length; i++)
; 1594 :         {
; 1595 :           pos++;
; 1596 :           hashval = getHash(in, insize, pos);
; 1597 :           updateHashChain(hash, pos, hashval, windowsize);
; 1598 :           if(usezeros && hashval == 0)
; 1599 :           {
; 1600 :             hash->zeros[pos % windowsize] = countZeros(in, insize, pos);
; 1601 :           }
; 1602 :         }
; 1603 :       }
; 1604 : 
; 1605 :     } /*end of the loop through each character of input*/
; 1606 :   } /*end of "if(!error)"*/
; 1607 : 
; 1608 :   return error;
; 1609 : }
; 1610 : 
; 1611 : /* /////////////////////////////////////////////////////////////////////////// */
; 1612 : 
; 1613 : static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)
; 1614 : {
; 1615 :   /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
; 1616 :   2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/
; 1617 : 
; 1618 :   size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
; 1619 :   unsigned datapos = 0;
; 1620 :   for(i = 0; i < numdeflateblocks; i++)
; 1621 :   {
; 1622 :     unsigned BFINAL, BTYPE, LEN, NLEN;
; 1623 :     unsigned char firstbyte;
; 1624 : 
; 1625 :     BFINAL = (i == numdeflateblocks - 1);
; 1626 :     BTYPE = 0;
; 1627 : 
; 1628 :     firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1) << 1) + ((BTYPE & 2) << 1));
; 1629 :     ucvector_push_back(out, firstbyte);
; 1630 : 
; 1631 :     LEN = 65535;
; 1632 :     if(datasize - datapos < 65535) LEN = (unsigned)datasize - datapos;
; 1633 :     NLEN = 65535 - LEN;
; 1634 : 
; 1635 :     ucvector_push_back(out, (unsigned char)(LEN % 256));
; 1636 :     ucvector_push_back(out, (unsigned char)(LEN / 256));
; 1637 :     ucvector_push_back(out, (unsigned char)(NLEN % 256));
; 1638 :     ucvector_push_back(out, (unsigned char)(NLEN / 256));
; 1639 : 
; 1640 :     /*Decompressed data*/
; 1641 :     for(j = 0; j < 65535 && datapos < datasize; j++)
; 1642 :     {
; 1643 :       ucvector_push_back(out, data[datapos++]);
; 1644 :     }
; 1645 :   }
; 1646 : 
; 1647 :   return 0;
; 1648 : }
; 1649 : 
; 1650 : /*
; 1651 : write the lz77-encoded data, which has lit, len and dist codes, to compressed stream using huffman trees.
; 1652 : tree_ll: the tree for lit and len codes.
; 1653 : tree_d: the tree for distance codes.
; 1654 : */
; 1655 : static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
; 1656 :                           const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
; 1657 : {
; 1658 :   size_t i = 0;
; 1659 :   for(i = 0; i < lz77_encoded->size; i++)
; 1660 :   {
; 1661 :     unsigned val = lz77_encoded->data[i];
; 1662 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_ll, val), HuffmanTree_getLength(tree_ll, val));
; 1663 :     if(val > 256) /*for a length code, 3 more things have to be added*/
; 1664 :     {
; 1665 :       unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
; 1666 :       unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
; 1667 :       unsigned length_extra_bits = lz77_encoded->data[++i];
; 1668 : 
; 1669 :       unsigned distance_code = lz77_encoded->data[++i];
; 1670 : 
; 1671 :       unsigned distance_index = distance_code;
; 1672 :       unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
; 1673 :       unsigned distance_extra_bits = lz77_encoded->data[++i];
; 1674 : 
; 1675 :       addBitsToStream(bp, out, length_extra_bits, n_length_extra_bits);
; 1676 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
; 1677 :                        HuffmanTree_getLength(tree_d, distance_code));
; 1678 :       addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
; 1679 :     }
; 1680 :   }
; 1681 : }
; 1682 : 
; 1683 : /*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
; 1684 : static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,
; 1685 :                                const unsigned char* data, size_t datapos, size_t dataend,
; 1686 :                                const LodePNGCompressSettings* settings, int final)
; 1687 : {
; 1688 :   unsigned error = 0;
; 1689 : 
; 1690 :   /*
; 1691 :   A block is compressed as follows: The PNG data is lz77 encoded, resulting in
; 1692 :   literal bytes and length/distance pairs. This is then huffman compressed with
; 1693 :   two huffman trees. One huffman tree is used for the lit and len values ("ll"),
; 1694 :   another huffman tree is used for the dist values ("d"). These two trees are
; 1695 :   stored using their code lengths, and to compress even more these code lengths
; 1696 :   are also run-length encoded and huffman compressed. This gives a huffman tree
; 1697 :   of code lengths "cl". The code lenghts used to describe this third tree are
; 1698 :   the code length code lengths ("clcl").
; 1699 :   */
; 1700 : 
; 1701 :   /*The lz77 encoded data, represented with integers since there will also be length and distance codes in it*/
; 1702 :   uivector lz77_encoded;
; 1703 :   HuffmanTree tree_ll; /*tree for lit,len values*/
; 1704 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1705 :   HuffmanTree tree_cl; /*tree for encoding the code lengths representing tree_ll and tree_d*/
; 1706 :   uivector frequencies_ll; /*frequency of lit,len codes*/
; 1707 :   uivector frequencies_d; /*frequency of dist codes*/
; 1708 :   uivector frequencies_cl; /*frequency of code length codes*/
; 1709 :   uivector bitlen_lld; /*lit,len,dist code lenghts (int bits), literally (without repeat codes).*/
; 1710 :   uivector bitlen_lld_e; /*bitlen_lld encoded with repeat codes (this is a rudemtary run length compression)*/
; 1711 :   /*bitlen_cl is the code length code lengths ("clcl"). The bit lengths of codes to represent tree_cl
; 1712 :   (these are written as is in the file, it would be crazy to compress these using yet another huffman
; 1713 :   tree that needs to be represented by yet another set of code lengths)*/
; 1714 :   uivector bitlen_cl;
; 1715 :   size_t datasize = dataend - datapos;
; 1716 : 
; 1717 :   /*
; 1718 :   Due to the huffman compression of huffman tree representations ("two levels"), there are some anologies:
; 1719 :   bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
; 1720 :   bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
; 1721 :   bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
; 1722 :   */
; 1723 : 
; 1724 :   unsigned BFINAL = final;
; 1725 :   size_t numcodes_ll, numcodes_d, i;
; 1726 :   unsigned HLIT, HDIST, HCLEN;
; 1727 : 
; 1728 :   uivector_init(&lz77_encoded);
; 1729 :   HuffmanTree_init(&tree_ll);
; 1730 :   HuffmanTree_init(&tree_d);
; 1731 :   HuffmanTree_init(&tree_cl);
; 1732 :   uivector_init(&frequencies_ll);
; 1733 :   uivector_init(&frequencies_d);
; 1734 :   uivector_init(&frequencies_cl);
; 1735 :   uivector_init(&bitlen_lld);
; 1736 :   uivector_init(&bitlen_lld_e);
; 1737 :   uivector_init(&bitlen_cl);
; 1738 : 
; 1739 :   /*This while loop never loops due to a break at the end, it is here to
; 1740 :   allow breaking out of it to the cleanup phase on error conditions.*/
; 1741 :   while(!error)
; 1742 :   {
; 1743 :     if(settings->use_lz77)
; 1744 :     {
; 1745 :       error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1746 :                          settings->minmatch, settings->nicematch, settings->lazymatching);
; 1747 :       if(error) break;
; 1748 :     }
; 1749 :     else
; 1750 :     {
; 1751 :       if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83 /*alloc fail*/);
; 1752 :       for(i = datapos; i < dataend; i++) lz77_encoded.data[i] = data[i]; /*no LZ77, but still will be Huffman compressed*/
; 1753 :     }
; 1754 : 
; 1755 :     if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1756 :     if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1757 : 
; 1758 :     /*Count the frequencies of lit, len and dist codes*/
; 1759 :     for(i = 0; i < lz77_encoded.size; i++)
; 1760 :     {
; 1761 :       unsigned symbol = lz77_encoded.data[i];
; 1762 :       frequencies_ll.data[symbol]++;
; 1763 :       if(symbol > 256)
; 1764 :       {
; 1765 :         unsigned dist = lz77_encoded.data[i + 2];
; 1766 :         frequencies_d.data[dist]++;
; 1767 :         i += 3;
; 1768 :       }
; 1769 :     }
; 1770 :     frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/
; 1771 : 
; 1772 :     /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
; 1773 :     error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
; 1774 :     if(error) break;
; 1775 :     /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
; 1776 :     error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
; 1777 :     if(error) break;
; 1778 : 
; 1779 :     numcodes_ll = tree_ll.numcodes; if(numcodes_ll > 286) numcodes_ll = 286;
; 1780 :     numcodes_d = tree_d.numcodes; if(numcodes_d > 30) numcodes_d = 30;
; 1781 :     /*store the code lengths of both generated trees in bitlen_lld*/
; 1782 :     for(i = 0; i < numcodes_ll; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
; 1783 :     for(i = 0; i < numcodes_d; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));
; 1784 : 
; 1785 :     /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
; 1786 :     17 (3-10 zeroes), 18 (11-138 zeroes)*/
; 1787 :     for(i = 0; i < (unsigned)bitlen_lld.size; i++)
; 1788 :     {
; 1789 :       unsigned j = 0; /*amount of repititions*/
; 1790 :       while(i + j + 1 < (unsigned)bitlen_lld.size && bitlen_lld.data[i + j + 1] == bitlen_lld.data[i]) j++;
; 1791 : 
; 1792 :       if(bitlen_lld.data[i] == 0 && j >= 2) /*repeat code for zeroes*/
; 1793 :       {
; 1794 :         j++; /*include the first zero*/
; 1795 :         if(j <= 10) /*repeat code 17 supports max 10 zeroes*/
; 1796 :         {
; 1797 :           uivector_push_back(&bitlen_lld_e, 17);
; 1798 :           uivector_push_back(&bitlen_lld_e, j - 3);
; 1799 :         }
; 1800 :         else /*repeat code 18 supports max 138 zeroes*/
; 1801 :         {
; 1802 :           if(j > 138) j = 138;
; 1803 :           uivector_push_back(&bitlen_lld_e, 18);
; 1804 :           uivector_push_back(&bitlen_lld_e, j - 11);
; 1805 :         }
; 1806 :         i += (j - 1);
; 1807 :       }
; 1808 :       else if(j >= 3) /*repeat code for value other than zero*/
; 1809 :       {
; 1810 :         size_t k;
; 1811 :         unsigned num = j / 6, rest = j % 6;
; 1812 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1813 :         for(k = 0; k < num; k++)
; 1814 :         {
; 1815 :           uivector_push_back(&bitlen_lld_e, 16);
; 1816 :           uivector_push_back(&bitlen_lld_e, 6 - 3);
; 1817 :         }
; 1818 :         if(rest >= 3)
; 1819 :         {
; 1820 :           uivector_push_back(&bitlen_lld_e, 16);
; 1821 :           uivector_push_back(&bitlen_lld_e, rest - 3);
; 1822 :         }
; 1823 :         else j -= rest;
; 1824 :         i += j;
; 1825 :       }
; 1826 :       else /*too short to benefit from repeat code*/
; 1827 :       {
; 1828 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1829 :       }
; 1830 :     }
; 1831 : 
; 1832 :     /*generate tree_cl, the huffmantree of huffmantrees*/
; 1833 : 
; 1834 :     if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1835 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1836 :     {
; 1837 :       frequencies_cl.data[bitlen_lld_e.data[i]]++;
; 1838 :       /*after a repeat code come the bits that specify the number of repetitions,
; 1839 :       those don't need to be in the frequencies_cl calculation*/
; 1840 :       if(bitlen_lld_e.data[i] >= 16) i++;
; 1841 :     }
; 1842 : 
; 1843 :     error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
; 1844 :                                             frequencies_cl.size, frequencies_cl.size, 7);
; 1845 :     if(error) break;
; 1846 : 
; 1847 :     if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
; 1848 :     for(i = 0; i < tree_cl.numcodes; i++)
; 1849 :     {
; 1850 :       /*lenghts of code length tree is in the order as specified by deflate*/
; 1851 :       bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
; 1852 :     }
; 1853 :     while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
; 1854 :     {
; 1855 :       /*remove zeros at the end, but minimum size must be 4*/
; 1856 :       if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
; 1857 :     }
; 1858 :     if(error) break;
; 1859 : 
; 1860 :     /*
; 1861 :     Write everything into the output
; 1862 : 
; 1863 :     After the BFINAL and BTYPE, the dynamic block consists out of the following:
; 1864 :     - 5 bits HLIT, 5 bits HDIST, 4 bits HCLEN
; 1865 :     - (HCLEN+4)*3 bits code lengths of code length alphabet
; 1866 :     - HLIT + 257 code lenghts of lit/length alphabet (encoded using the code length
; 1867 :       alphabet, + possible repetition codes 16, 17, 18)
; 1868 :     - HDIST + 1 code lengths of distance alphabet (encoded using the code length
; 1869 :       alphabet, + possible repetition codes 16, 17, 18)
; 1870 :     - compressed data
; 1871 :     - 256 (end code)
; 1872 :     */
; 1873 : 
; 1874 :     /*Write block type*/
; 1875 :     addBitToStream(bp, out, BFINAL);
; 1876 :     addBitToStream(bp, out, 0); /*first bit of BTYPE "dynamic"*/
; 1877 :     addBitToStream(bp, out, 1); /*second bit of BTYPE "dynamic"*/
; 1878 : 
; 1879 :     /*write the HLIT, HDIST and HCLEN values*/
; 1880 :     HLIT = (unsigned)(numcodes_ll - 257);
; 1881 :     HDIST = (unsigned)(numcodes_d - 1);
; 1882 :     HCLEN = (unsigned)bitlen_cl.size - 4;
; 1883 :     /*trim zeroes for HCLEN. HLIT and HDIST were already trimmed at tree creation*/
; 1884 :     while(!bitlen_cl.data[HCLEN + 4 - 1] && HCLEN > 0) HCLEN--;
; 1885 :     addBitsToStream(bp, out, HLIT, 5);
; 1886 :     addBitsToStream(bp, out, HDIST, 5);
; 1887 :     addBitsToStream(bp, out, HCLEN, 4);
; 1888 : 
; 1889 :     /*write the code lenghts of the code length alphabet*/
; 1890 :     for(i = 0; i < HCLEN + 4; i++) addBitsToStream(bp, out, bitlen_cl.data[i], 3);
; 1891 : 
; 1892 :     /*write the lenghts of the lit/len AND the dist alphabet*/
; 1893 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1894 :     {
; 1895 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
; 1896 :                        HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
; 1897 :       /*extra bits of repeat codes*/
; 1898 :       if(bitlen_lld_e.data[i] == 16) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 2);
; 1899 :       else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
; 1900 :       else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
; 1901 :     }
; 1902 : 
; 1903 :     /*write the compressed data symbols*/
; 1904 :     writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1905 :     /*error: the length of the end code 256 must be larger than 0*/
; 1906 :     if(HuffmanTree_getLength(&tree_ll, 256) == 0) ERROR_BREAK(64);
; 1907 : 
; 1908 :     /*write the end code*/
; 1909 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1910 : 
; 1911 :     break; /*end of error-while*/
; 1912 :   }
; 1913 : 
; 1914 :   /*cleanup*/
; 1915 :   uivector_cleanup(&lz77_encoded);
; 1916 :   HuffmanTree_cleanup(&tree_ll);
; 1917 :   HuffmanTree_cleanup(&tree_d);
; 1918 :   HuffmanTree_cleanup(&tree_cl);
; 1919 :   uivector_cleanup(&frequencies_ll);
; 1920 :   uivector_cleanup(&frequencies_d);
; 1921 :   uivector_cleanup(&frequencies_cl);
; 1922 :   uivector_cleanup(&bitlen_lld_e);
; 1923 :   uivector_cleanup(&bitlen_lld);
; 1924 :   uivector_cleanup(&bitlen_cl);
; 1925 : 
; 1926 :   return error;
; 1927 : }
; 1928 : 
; 1929 : static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,
; 1930 :                              const unsigned char* data,
; 1931 :                              size_t datapos, size_t dataend,
; 1932 :                              const LodePNGCompressSettings* settings, int final)
; 1933 : {
; 1934 :   HuffmanTree tree_ll; /*tree for literal values and length codes*/
; 1935 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1936 : 
; 1937 :   unsigned BFINAL = final;
; 1938 :   unsigned error = 0;
; 1939 :   size_t i;
; 1940 : 
; 1941 :   HuffmanTree_init(&tree_ll);
; 1942 :   HuffmanTree_init(&tree_d);
; 1943 : 
; 1944 :   generateFixedLitLenTree(&tree_ll);
; 1945 :   generateFixedDistanceTree(&tree_d);
; 1946 : 
; 1947 :   addBitToStream(bp, out, BFINAL);
; 1948 :   addBitToStream(bp, out, 1); /*first bit of BTYPE*/
; 1949 :   addBitToStream(bp, out, 0); /*second bit of BTYPE*/
; 1950 : 
; 1951 :   if(settings->use_lz77) /*LZ77 encoded*/
; 1952 :   {
; 1953 :     uivector lz77_encoded;
; 1954 :     uivector_init(&lz77_encoded);
; 1955 :     error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1956 :                        settings->minmatch, settings->nicematch, settings->lazymatching);
; 1957 :     if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1958 :     uivector_cleanup(&lz77_encoded);
; 1959 :   }
; 1960 :   else /*no LZ77, but still will be Huffman compressed*/
; 1961 :   {
; 1962 :     for(i = datapos; i < dataend; i++)
; 1963 :     {
; 1964 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
; 1965 :     }
; 1966 :   }
; 1967 :   /*add END code*/
; 1968 :   if(!error) addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1969 : 
; 1970 :   /*cleanup*/
; 1971 :   HuffmanTree_cleanup(&tree_ll);
; 1972 :   HuffmanTree_cleanup(&tree_d);
; 1973 : 
; 1974 :   return error;
; 1975 : }
; 1976 : 
; 1977 : static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
; 1978 :                                  const LodePNGCompressSettings* settings)
; 1979 : {
; 1980 :   unsigned error = 0;
; 1981 :   size_t i, blocksize, numdeflateblocks;
; 1982 :   size_t bp = 0; /*the bit pointer*/
; 1983 :   Hash hash;
; 1984 : 
; 1985 :   if(settings->btype > 2) return 61;
; 1986 :   else if(settings->btype == 0) return deflateNoCompression(out, in, insize);
; 1987 :   else if(settings->btype == 1) blocksize = insize;
; 1988 :   else /*if(settings->btype == 2)*/
; 1989 :   {
; 1990 :     blocksize = insize / 8 + 8;
; 1991 :     if(blocksize < 65535) blocksize = 65535;
; 1992 :   }
; 1993 : 
; 1994 :   numdeflateblocks = (insize + blocksize - 1) / blocksize;
; 1995 :   if(numdeflateblocks == 0) numdeflateblocks = 1;
; 1996 : 
; 1997 :   error = hash_init(&hash, settings->windowsize);
; 1998 :   if(error) return error;
; 1999 : 
; 2000 :   for(i = 0; i < numdeflateblocks && !error; i++)
; 2001 :   {
; 2002 :     int final = i == numdeflateblocks - 1;
; 2003 :     size_t start = i * blocksize;
; 2004 :     size_t end = start + blocksize;
; 2005 :     if(end > insize) end = insize;
; 2006 : 
; 2007 :     if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
; 2008 :     else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
; 2009 :   }
; 2010 : 
; 2011 :   hash_cleanup(&hash);
; 2012 : 
; 2013 :   return error;
; 2014 : }
; 2015 : 
; 2016 : unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
; 2017 :                          const unsigned char* in, size_t insize,
; 2018 :                          const LodePNGCompressSettings* settings)
; 2019 : {
; 2020 :   unsigned error;
; 2021 :   ucvector v;
; 2022 :   ucvector_init_buffer(&v, *out, *outsize);
; 2023 :   error = lodepng_deflatev(&v, in, insize, settings);
; 2024 :   *out = v.data;
; 2025 :   *outsize = v.size;
; 2026 :   return error;
; 2027 : }
; 2028 : 
; 2029 : static unsigned deflate(unsigned char** out, size_t* outsize,
; 2030 :                         const unsigned char* in, size_t insize,
; 2031 :                         const LodePNGCompressSettings* settings)
; 2032 : {
; 2033 :   if(settings->custom_deflate)
; 2034 :   {
; 2035 :     return settings->custom_deflate(out, outsize, in, insize, settings);
; 2036 :   }
; 2037 :   else
; 2038 :   {
; 2039 :     return lodepng_deflate(out, outsize, in, insize, settings);
; 2040 :   }
; 2041 : }
; 2042 : 
; 2043 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2044 : 
; 2045 : /* ////////////////////////////////////////////////////////////////////////// */
; 2046 : /* / Adler32                                                                  */
; 2047 : /* ////////////////////////////////////////////////////////////////////////// */
; 2048 : 
; 2049 : static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
; 2050 : {
; 2051 :    unsigned s1 = adler & 0xffff;
; 2052 :    unsigned s2 = (adler >> 16) & 0xffff;
; 2053 : 
; 2054 :   while(len > 0)
; 2055 :   {
; 2056 :     /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
; 2057 :     unsigned amount = len > 5550 ? 5550 : len;
; 2058 :     len -= amount;
; 2059 :     while(amount > 0)
; 2060 :     {
; 2061 :       s1 += (*data++);
; 2062 :       s2 += s1;
; 2063 :       amount--;
; 2064 :     }
; 2065 :     s1 %= 65521;
; 2066 :     s2 %= 65521;
; 2067 :   }
; 2068 : 
; 2069 :   return (s2 << 16) | s1;
; 2070 : }
; 2071 : 
; 2072 : /*Return the adler32 of the bytes data[0..len-1]*/
; 2073 : static unsigned adler32(const unsigned char* data, unsigned len)
; 2074 : {
; 2075 :   return update_adler32(1L, data, len);
; 2076 : }
; 2077 : 
; 2078 : /* ////////////////////////////////////////////////////////////////////////// */
; 2079 : /* / Zlib                                                                   / */
; 2080 : /* ////////////////////////////////////////////////////////////////////////// */
; 2081 : 
; 2082 : #ifdef LODEPNG_COMPILE_DECODER
; 2083 : 
; 2084 : unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2085 :                                  size_t insize, const LodePNGDecompressSettings* settings)
; 2086 : {
; 2087 :   unsigned error = 0;
; 2088 :   unsigned CM, CINFO, FDICT;
; 2089 : 
; 2090 :   if(insize < 2) return 53; /*error, size of zlib data too small*/
; 2091 :   /*read information from zlib header*/
; 2092 :   if((in[0] * 256 + in[1]) % 31 != 0)
; 2093 :   {
; 2094 :     /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
; 2095 :     return 24;
; 2096 :   }
; 2097 : 
; 2098 :   CM = in[0] & 15;
; 2099 :   CINFO = (in[0] >> 4) & 15;
; 2100 :   /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
; 2101 :   FDICT = (in[1] >> 5) & 1;
; 2102 :   /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/
; 2103 : 
; 2104 :   if(CM != 8 || CINFO > 7)
; 2105 :   {
; 2106 :     /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
; 2107 :     return 25;
; 2108 :   }
; 2109 :   if(FDICT != 0)
; 2110 :   {
; 2111 :     /*error: the specification of PNG says about the zlib stream:
; 2112 :       "The additional flags shall not specify a preset dictionary."*/
; 2113 :     return 26;
; 2114 :   }
; 2115 : 
; 2116 :   error = inflate(out, outsize, in + 2, insize - 2, settings);
; 2117 :   if(error) return error;
; 2118 : 
; 2119 :   if(!settings->ignore_adler32)
; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/
; 2124 :   }
; 2125 : 
; 2126 :   return 0; /*no error*/
; 2127 : }
; 2128 : 
; 2129 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2130 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2131 : {
; 2132 :   if(settings->custom_zlib)
; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2134 :   else
; 2135 :     return lodepng_zlib_decompress(out, outsize, in, insize, settings);
; 2136 : }
; 2137 : 
; 2138 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2139 : 
; 2140 : #ifdef LODEPNG_COMPILE_ENCODER
; 2141 : 
; 2142 : unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2143 :                                size_t insize, const LodePNGCompressSettings* settings)
; 2144 : {
; 2145 :   /*initially, *out must be NULL and outsize 0, if you just give some random *out
; 2146 :   that's pointing to a non allocated buffer, this'll crash*/
; 2147 :   ucvector outv;
; 2148 :   size_t i;
; 2149 :   unsigned error;
; 2150 :   unsigned char* deflatedata = 0;
; 2151 :   size_t deflatesize = 0;
; 2152 : 
; 2153 :   unsigned ADLER32;
; 2154 :   /*zlib data: 1 byte CMF (CM+CINFO), 1 byte FLG, deflate data, 4 byte ADLER32 checksum of the Decompressed data*/
; 2155 :   unsigned CMF = 120; /*0b01111000: CM 8, CINFO 7. With CINFO 7, any window size up to 32768 can be used.*/
; 2156 :   unsigned FLEVEL = 0;
; 2157 :   unsigned FDICT = 0;
; 2158 :   unsigned CMFFLG = 256 * CMF + FDICT * 32 + FLEVEL * 64;
; 2159 :   unsigned FCHECK = 31 - CMFFLG % 31;
; 2160 :   CMFFLG += FCHECK;
; 2161 : 
; 2162 :   /*ucvector-controlled version of the output buffer, for dynamic array*/
; 2163 :   ucvector_init_buffer(&outv, *out, *outsize);
; 2164 : 
; 2165 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG / 256));
; 2166 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG % 256));
; 2167 : 
; 2168 :   error = deflate(&deflatedata, &deflatesize, in, insize, settings);
; 2169 : 
; 2170 :   if(!error)
; 2171 :   {
; 2172 :     ADLER32 = adler32(in, (unsigned)insize);
; 2173 :     for(i = 0; i < deflatesize; i++) ucvector_push_back(&outv, deflatedata[i]);
; 2174 :     lodepng_free(deflatedata);
; 2175 :     lodepng_add32bitInt(&outv, ADLER32);
; 2176 :   }
; 2177 : 
; 2178 :   *out = outv.data;
; 2179 :   *outsize = outv.size;
; 2180 : 
; 2181 :   return error;
; 2182 : }
; 2183 : 
; 2184 : /* compress using the default or custom zlib function */
; 2185 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2186 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2187 : {
; 2188 :   if(settings->custom_zlib)
; 2189 :   {
; 2190 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2191 :   }
; 2192 :   else
; 2193 :   {
; 2194 :     return lodepng_zlib_compress(out, outsize, in, insize, settings);
; 2195 :   }
; 2196 : }
; 2197 : 
; 2198 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2199 : 
; 2200 : #else /*no LODEPNG_COMPILE_ZLIB*/
; 2201 : 
; 2202 : #ifdef LODEPNG_COMPILE_DECODER
; 2203 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2204 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2205 : {
; 2206 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2207 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2208 : }
; 2209 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2210 : #ifdef LODEPNG_COMPILE_ENCODER
; 2211 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2212 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2213 : {
; 2214 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2215 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2216 : }
; 2217 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2218 : 
; 2219 : #endif /*LODEPNG_COMPILE_ZLIB*/
; 2220 : 
; 2221 : /* ////////////////////////////////////////////////////////////////////////// */
; 2222 : 
; 2223 : #ifdef LODEPNG_COMPILE_ENCODER
; 2224 : 
; 2225 : /*this is a good tradeoff between speed and compression ratio*/
; 2226 : #define DEFAULT_WINDOWSIZE 2048
; 2227 : 
; 2228 : void lodepng_compress_settings_init(LodePNGCompressSettings* settings)
; 2229 : {
; 2230 :   /*compress with dynamic huffman tree (not in the mathematical sense, just not the predefined one)*/
; 2231 :   settings->btype = 2;
; 2232 :   settings->use_lz77 = 1;
; 2233 :   settings->windowsize = DEFAULT_WINDOWSIZE;
; 2234 :   settings->minmatch = 3;
; 2235 :   settings->nicematch = 128;
; 2236 :   settings->lazymatching = 1;
; 2237 : 
; 2238 :   settings->custom_zlib = 0;
; 2239 :   settings->custom_deflate = 0;
; 2240 :   settings->custom_context = 0;
; 2241 : }
; 2242 : 
; 2243 : const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 3, 128, 1, 0, 0, 0};
; 2244 : 
; 2245 : 
; 2246 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2247 : 
; 2248 : #ifdef LODEPNG_COMPILE_DECODER
; 2249 : 
; 2250 : void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings)
; 2251 : {
; 2252 :   settings->ignore_adler32 = 0;
; 2253 : 
; 2254 :   settings->custom_zlib = 0;
; 2255 :   settings->custom_inflate = 0;
; 2256 :   settings->custom_context = 0;
; 2257 : }
; 2258 : 
; 2259 : const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0, 0, 0};
; 2260 : 
; 2261 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2262 : 
; 2263 : /* ////////////////////////////////////////////////////////////////////////// */
; 2264 : /* ////////////////////////////////////////////////////////////////////////// */
; 2265 : /* // End of Zlib related code. Begin of PNG related code.                 // */
; 2266 : /* ////////////////////////////////////////////////////////////////////////// */
; 2267 : /* ////////////////////////////////////////////////////////////////////////// */
; 2268 : 
; 2269 : #ifdef LODEPNG_COMPILE_PNG
; 2270 : 
; 2271 : /* ////////////////////////////////////////////////////////////////////////// */
; 2272 : /* / CRC32                                                                  / */
; 2273 : /* ////////////////////////////////////////////////////////////////////////// */
; 2274 : 
; 2275 : /* CRC polynomial: 0xedb88320 */
; 2276 : static unsigned lodepng_crc32_table[256] = {
; 2277 :            0u, 1996959894u, 3993919788u, 2567524794u,  124634137u, 1886057615u, 3915621685u, 2657392035u,
; 2278 :    249268274u, 2044508324u, 3772115230u, 2547177864u,  162941995u, 2125561021u, 3887607047u, 2428444049u,
; 2279 :    498536548u, 1789927666u, 4089016648u, 2227061214u,  450548861u, 1843258603u, 4107580753u, 2211677639u,
; 2280 :    325883990u, 1684777152u, 4251122042u, 2321926636u,  335633487u, 1661365465u, 4195302755u, 2366115317u,
; 2281 :    997073096u, 1281953886u, 3579855332u, 2724688242u, 1006888145u, 1258607687u, 3524101629u, 2768942443u,
; 2282 :    901097722u, 1119000684u, 3686517206u, 2898065728u,  853044451u, 1172266101u, 3705015759u, 2882616665u,
; 2283 :    651767980u, 1373503546u, 3369554304u, 3218104598u,  565507253u, 1454621731u, 3485111705u, 3099436303u,
; 2284 :    671266974u, 1594198024u, 3322730930u, 2970347812u,  795835527u, 1483230225u, 3244367275u, 3060149565u,
; 2285 :   1994146192u,   31158534u, 2563907772u, 4023717930u, 1907459465u,  112637215u, 2680153253u, 3904427059u,
; 2286 :   2013776290u,  251722036u, 2517215374u, 3775830040u, 2137656763u,  141376813u, 2439277719u, 3865271297u,
; 2287 :   1802195444u,  476864866u, 2238001368u, 4066508878u, 1812370925u,  453092731u, 2181625025u, 4111451223u,
; 2288 :   1706088902u,  314042704u, 2344532202u, 4240017532u, 1658658271u,  366619977u, 2362670323u, 4224994405u,
; 2289 :   1303535960u,  984961486u, 2747007092u, 3569037538u, 1256170817u, 1037604311u, 2765210733u, 3554079995u,
; 2290 :   1131014506u,  879679996u, 2909243462u, 3663771856u, 1141124467u,  855842277u, 2852801631u, 3708648649u,
; 2291 :   1342533948u,  654459306u, 3188396048u, 3373015174u, 1466479909u,  544179635u, 3110523913u, 3462522015u,
; 2292 :   1591671054u,  702138776u, 2966460450u, 3352799412u, 1504918807u,  783551873u, 3082640443u, 3233442989u,
; 2293 :   3988292384u, 2596254646u,   62317068u, 1957810842u, 3939845945u, 2647816111u,   81470997u, 1943803523u,
; 2294 :   3814918930u, 2489596804u,  225274430u, 2053790376u, 3826175755u, 2466906013u,  167816743u, 2097651377u,
; 2295 :   4027552580u, 2265490386u,  503444072u, 1762050814u, 4150417245u, 2154129355u,  426522225u, 1852507879u,
; 2296 :   4275313526u, 2312317920u,  282753626u, 1742555852u, 4189708143u, 2394877945u,  397917763u, 1622183637u,
; 2297 :   3604390888u, 2714866558u,  953729732u, 1340076626u, 3518719985u, 2797360999u, 1068828381u, 1219638859u,
; 2298 :   3624741850u, 2936675148u,  906185462u, 1090812512u, 3747672003u, 2825379669u,  829329135u, 1181335161u,
; 2299 :   3412177804u, 3160834842u,  628085408u, 1382605366u, 3423369109u, 3138078467u,  570562233u, 1426400815u,
; 2300 :   3317316542u, 2998733608u,  733239954u, 1555261956u, 3268935591u, 3050360625u,  752459403u, 1541320221u,
; 2301 :   2607071920u, 3965973030u, 1969922972u,   40735498u, 2617837225u, 3943577151u, 1913087877u,   83908371u,
; 2302 :   2512341634u, 3803740692u, 2075208622u,  213261112u, 2463272603u, 3855990285u, 2094854071u,  198958881u,
; 2303 :   2262029012u, 4057260610u, 1759359992u,  534414190u, 2176718541u, 4139329115u, 1873836001u,  414664567u,
; 2304 :   2282248934u, 4279200368u, 1711684554u,  285281116u, 2405801727u, 4167216745u, 1634467795u,  376229701u,
; 2305 :   2685067896u, 3608007406u, 1308918612u,  956543938u, 2808555105u, 3495958263u, 1231636301u, 1047427035u,
; 2306 :   2932959818u, 3654703836u, 1088359270u,  936918000u, 2847714899u, 3736837829u, 1202900863u,  817233897u,
; 2307 :   3183342108u, 3401237130u, 1404277552u,  615818150u, 3134207493u, 3453421203u, 1423857449u,  601450431u,
; 2308 :   3009837614u, 3294710456u, 1567103746u,  711928724u, 3020668471u, 3272380065u, 1510334235u,  755167117u
; 2309 : };
; 2310 : 
; 2311 : /*Return the CRC of the bytes buf[0..len-1].*/
; 2312 : unsigned lodepng_crc32(const unsigned char* buf, size_t len)
; 2313 : {
; 2314 :   unsigned c = 0xffffffffL;
; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)
; 2318 :   {
; 2319 :     c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
; 2320 :   }
; 2321 :   return c ^ 0xffffffffL;
; 2322 : }
; 2323 : 
; 2324 : /* ////////////////////////////////////////////////////////////////////////// */
; 2325 : /* / Reading and writing single bits and bytes from/to stream for LodePNG   / */
; 2326 : /* ////////////////////////////////////////////////////////////////////////// */
; 2327 : 
; 2328 : static unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream)
; 2329 : {
; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);
; 2331 :   (*bitpointer)++;
; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)
; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
; 2354 :   }
; 2355 :   (*bitpointer)++;
; 2356 : }
; 2357 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2358 : 
; 2359 : static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2360 : {
; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));
; 2363 :   else         bitstream[(*bitpointer) >> 3] |=  (1 << (7 - ((*bitpointer) & 0x7)));
; 2364 :   (*bitpointer)++;
; 2365 : }
; 2366 : 
; 2367 : /* ////////////////////////////////////////////////////////////////////////// */
; 2368 : /* / PNG chunks                                                             / */
; 2369 : /* ////////////////////////////////////////////////////////////////////////// */
; 2370 : 
; 2371 : unsigned lodepng_chunk_length(const unsigned char* chunk)
; 2372 : {
; 2373 :   return lodepng_read32bitInt(&chunk[0]);
; 2374 : }
; 2375 : 
; 2376 : void lodepng_chunk_type(char type[5], const unsigned char* chunk)
; 2377 : {
; 2378 :   unsigned i;
; 2379 :   for(i = 0; i < 4; i++) type[i] = chunk[4 + i];
; 2380 :   type[4] = 0; /*null termination char*/
; 2381 : }
; 2382 : 
; 2383 : unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type)
; 2384 : {
; 2385 :   if(strlen(type) != 4) return 0;
; 2386 :   return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);
; 2387 : }
; 2388 : 
; 2389 : unsigned char lodepng_chunk_ancillary(const unsigned char* chunk)
; 2390 : {
; 2391 :   return((chunk[4] & 32) != 0);
; 2392 : }
; 2393 : 
; 2394 : unsigned char lodepng_chunk_private(const unsigned char* chunk)
; 2395 : {
; 2396 :   return((chunk[6] & 32) != 0);
; 2397 : }
; 2398 : 
; 2399 : unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk)
; 2400 : {
; 2401 :   return((chunk[7] & 32) != 0);
; 2402 : }
; 2403 : 
; 2404 : unsigned char* lodepng_chunk_data(unsigned char* chunk)
; 2405 : {
; 2406 :   return &chunk[8];
; 2407 : }
; 2408 : 
; 2409 : const unsigned char* lodepng_chunk_data_const(const unsigned char* chunk)
; 2410 : {
; 2411 :   return &chunk[8];
; 2412 : }
; 2413 : 
; 2414 : unsigned lodepng_chunk_check_crc(const unsigned char* chunk)
; 2415 : {
; 2416 :   unsigned length = lodepng_chunk_length(chunk);
; 2417 :   unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);
; 2418 :   /*the CRC is taken of the data and the 4 chunk type letters, not the length*/
; 2419 :   unsigned checksum = lodepng_crc32(&chunk[4], length + 4);
; 2420 :   if(CRC != checksum) return 1;
; 2421 :   else return 0;
; 2422 : }
; 2423 : 
; 2424 : void lodepng_chunk_generate_crc(unsigned char* chunk)
; 2425 : {
; 2426 :   unsigned length = lodepng_chunk_length(chunk);
; 2427 :   unsigned CRC = lodepng_crc32(&chunk[4], length + 4);
; 2428 :   lodepng_set32bitInt(chunk + 8 + length, CRC);
; 2429 : }
; 2430 : 
; 2431 : unsigned char* lodepng_chunk_next(unsigned char* chunk)
; 2432 : {
; 2433 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2434 :   return &chunk[total_chunk_length];
; 2435 : }
; 2436 : 
; 2437 : const unsigned char* lodepng_chunk_next_const(const unsigned char* chunk)
; 2438 : {
; 2439 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2440 :   return &chunk[total_chunk_length];
; 2441 : }
; 2442 : 
; 2443 : unsigned lodepng_chunk_append(unsigned char** out, size_t* outlength, const unsigned char* chunk)
; 2444 : {
; 2445 :   unsigned i;
; 2446 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2447 :   unsigned char *chunk_start, *new_buffer;
; 2448 :   size_t new_length = (*outlength) + total_chunk_length;
; 2449 :   if(new_length < total_chunk_length || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2450 : 
; 2451 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2452 :   if(!new_buffer) return 83; /*alloc fail*/
; 2453 :   (*out) = new_buffer;
; 2454 :   (*outlength) = new_length;
; 2455 :   chunk_start = &(*out)[new_length - total_chunk_length];
; 2456 : 
; 2457 :   for(i = 0; i < total_chunk_length; i++) chunk_start[i] = chunk[i];
; 2458 : 
; 2459 :   return 0;
; 2460 : }
; 2461 : 
; 2462 : unsigned lodepng_chunk_create(unsigned char** out, size_t* outlength, unsigned length,
; 2463 :                               const char* type, const unsigned char* data)
; 2464 : {
; 2465 :   unsigned i;
; 2466 :   unsigned char *chunk, *new_buffer;
; 2467 :   size_t new_length = (*outlength) + length + 12;
; 2468 :   if(new_length < length + 12 || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2469 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2470 :   if(!new_buffer) return 83; /*alloc fail*/
; 2471 :   (*out) = new_buffer;
; 2472 :   (*outlength) = new_length;
; 2473 :   chunk = &(*out)[(*outlength) - length - 12];
; 2474 : 
; 2475 :   /*1: length*/
; 2476 :   lodepng_set32bitInt(chunk, (unsigned)length);
; 2477 : 
; 2478 :   /*2: chunk name (4 letters)*/
; 2479 :   chunk[4] = type[0];
; 2480 :   chunk[5] = type[1];
; 2481 :   chunk[6] = type[2];
; 2482 :   chunk[7] = type[3];
; 2483 : 
; 2484 :   /*3: the data*/
; 2485 :   for(i = 0; i < length; i++) chunk[8 + i] = data[i];
; 2486 : 
; 2487 :   /*4: CRC (of the chunkname characters and the data)*/
; 2488 :   lodepng_chunk_generate_crc(chunk);
; 2489 : 
; 2490 :   return 0;
; 2491 : }
; 2492 : 
; 2493 : /* ////////////////////////////////////////////////////////////////////////// */
; 2494 : /* / Color types and such                                                   / */
; 2495 : /* ////////////////////////////////////////////////////////////////////////// */
; 2496 : 
; 2497 : /*return type is a LodePNG error code*/
; 2498 : static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) /*bd = bitdepth*/
; 2499 : {
; 2500 :   switch(colortype)
; 2501 :   {
; 2502 :     case 0: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)) return 37; break; /*grey*/
; 2503 :     case 2: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGB*/
; 2504 :     case 3: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )) return 37; break; /*palette*/
; 2505 :     case 4: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*grey + alpha*/
; 2506 :     case 6: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGBA*/
; 2507 :     default: return 31;
; 2508 :   }
; 2509 :   return 0; /*allowed color type / bits combination*/
; 2510 : }
; 2511 : 
; 2512 : static unsigned getNumColorChannels(LodePNGColorType colortype)
; 2513 : {
; 2514 :   switch(colortype)
; 2515 :   {
; 2516 :     case 0: return 1; /*grey*/
; 2517 :     case 2: return 3; /*RGB*/
; 2518 :     case 3: return 1; /*palette*/
; 2519 :     case 4: return 2; /*grey + alpha*/
; 2520 :     case 6: return 4; /*RGBA*/
; 2521 :   }
; 2522 :   return 0; /*unexisting color type*/
; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;
; 2529 : }
; 2530 : 
; 2531 : /* ////////////////////////////////////////////////////////////////////////// */
; 2532 : 
; 2533 : void lodepng_color_mode_init(LodePNGColorMode* info)
; 2534 : {
; 2535 :   info->key_defined = 0;
; 2536 :   info->key_r = info->key_g = info->key_b = 0;
; 2537 :   info->colortype = LCT_RGBA;
; 2538 :   info->bitdepth = 8;
; 2539 :   info->palette = 0;
; 2540 :   info->palettesize = 0;
; 2541 : }
; 2542 : 
; 2543 : void lodepng_color_mode_cleanup(LodePNGColorMode* info)
; 2544 : {
; 2545 :   lodepng_palette_clear(info);
; 2546 : }
; 2547 : 
; 2548 : unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
; 2549 : {
; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;
; 2553 :   if(source->palette)
; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);
; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];
; 2558 :   }
; 2559 :   return 0;
; 2560 : }
; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);

  00004	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00007	85 c0		 test	 eax, eax
  00009	74 09		 je	 SHORT $LN8@lodepng_in

; 73   :   free(ptr);

  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 _free
  00011	83 c4 04	 add	 esp, 4
$LN8@lodepng_in:

; 2870 :   lodepng_color_mode_cleanup(&info->color);
; 2871 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2872 :   LodePNGText_cleanup(info);

  00014	8b ce		 mov	 ecx, esi

; 2585 :   info->palette = 0;

  00016	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2586 :   info->palettesize = 0;

  0001d	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 2870 :   lodepng_color_mode_cleanup(&info->color);
; 2871 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2872 :   LodePNGText_cleanup(info);

  00024	e8 00 00 00 00	 call	 ?LodePNGText_cleanup@@YAXPAULodePNGInfo@@@Z ; LodePNGText_cleanup

; 2873 :   LodePNGIText_cleanup(info);

  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?LodePNGIText_cleanup@@YAXPAULodePNGInfo@@@Z ; LodePNGIText_cleanup

; 2585 :   info->palette = 0;

  00030	81 c6 88 00 00
	00		 add	 esi, 136		; 00000088H
  00036	bf 03 00 00 00	 mov	 edi, 3
  0003b	eb 03 8d 49 00	 npad	 5
$LL12@lodepng_in:

; 73   :   free(ptr);

  00040	ff 36		 push	 DWORD PTR [esi]
  00042	e8 00 00 00 00	 call	 _free
  00047	83 c4 04	 add	 esp, 4

; 2587 : }
; 2588 : 
; 2589 : unsigned lodepng_palette_add(LodePNGColorMode* info,
; 2590 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2591 : {
; 2592 :   unsigned char* data;
; 2593 :   /*the same resize technique as C++ std::vectors is used, and here it's made so that for a palette with
; 2594 :   the max of 256 colors, it'll have the exact alloc size*/
; 2595 :   if(!info->palette) /*allocate palette if empty*/
; 2596 :   {
; 2597 :     /*room for 256 colors with 4 bytes each*/
; 2598 :     data = (unsigned char*)lodepng_realloc(info->palette, 1024);
; 2599 :     if(!data) return 83; /*alloc fail*/
; 2600 :     else info->palette = data;
; 2601 :   }
; 2602 :   info->palette[4 * info->palettesize + 0] = r;
; 2603 :   info->palette[4 * info->palettesize + 1] = g;
; 2604 :   info->palette[4 * info->palettesize + 2] = b;
; 2605 :   info->palette[4 * info->palettesize + 3] = a;
; 2606 :   info->palettesize++;
; 2607 :   return 0;
; 2608 : }
; 2609 : 
; 2610 : unsigned lodepng_get_bpp(const LodePNGColorMode* info)
; 2611 : {
; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }
; 2615 : 
; 2616 : unsigned lodepng_get_channels(const LodePNGColorMode* info)
; 2617 : {
; 2618 :   return getNumColorChannels(info->colortype);
; 2619 : }
; 2620 : 
; 2621 : unsigned lodepng_is_greyscale_type(const LodePNGColorMode* info)
; 2622 : {
; 2623 :   return info->colortype == LCT_GREY || info->colortype == LCT_GREY_ALPHA;
; 2624 : }
; 2625 : 
; 2626 : unsigned lodepng_is_alpha_type(const LodePNGColorMode* info)
; 2627 : {
; 2628 :   return (info->colortype & 4) != 0; /*4 or 6*/
; 2629 : }
; 2630 : 
; 2631 : unsigned lodepng_is_palette_type(const LodePNGColorMode* info)
; 2632 : {
; 2633 :   return info->colortype == LCT_PALETTE;
; 2634 : }
; 2635 : 
; 2636 : unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info)
; 2637 : {
; 2638 :   size_t i;
; 2639 :   for(i = 0; i < info->palettesize; i++)
; 2640 :   {
; 2641 :     if(info->palette[i * 4 + 3] < 255) return 1;
; 2642 :   }
; 2643 :   return 0;
; 2644 : }
; 2645 : 
; 2646 : unsigned lodepng_can_have_alpha(const LodePNGColorMode* info)
; 2647 : {
; 2648 :   return info->key_defined
; 2649 :       || lodepng_is_alpha_type(info)
; 2650 :       || lodepng_has_palette_alpha(info);
; 2651 : }
; 2652 : 
; 2653 : size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode* color)
; 2654 : {
; 2655 :   return (w * h * lodepng_get_bpp(color) + 7) / 8;
; 2656 : }
; 2657 : 
; 2658 : size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)
; 2659 : {
; 2660 :   return (w * h * lodepng_get_bpp_lct(colortype, bitdepth) + 7) / 8;
; 2661 : }
; 2662 : 
; 2663 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2664 : 
; 2665 : static void LodePNGUnknownChunks_init(LodePNGInfo* info)
; 2666 : {
; 2667 :   unsigned i;
; 2668 :   for(i = 0; i < 3; i++) info->unknown_chunks_data[i] = 0;
; 2669 :   for(i = 0; i < 3; i++) info->unknown_chunks_size[i] = 0;
; 2670 : }
; 2671 : 
; 2672 : static void LodePNGUnknownChunks_cleanup(LodePNGInfo* info)
; 2673 : {
; 2674 :   unsigned i;
; 2675 :   for(i = 0; i < 3; i++) lodepng_free(info->unknown_chunks_data[i]);

  0004a	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  0004d	4f		 dec	 edi
  0004e	75 f0		 jne	 SHORT $LL12@lodepng_in

; 2874 : 
; 2875 :   LodePNGUnknownChunks_cleanup(info);
; 2876 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2877 : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z ENDP	; lodepng_info_cleanup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?addColorBits@@YAXPAEIII@Z
_TEXT	SEGMENT
_out$1$ = -4						; size = 4
_bits$ = 8						; size = 4
_in$ = 12						; size = 4
?addColorBits@@YAXPAEIII@Z PROC				; addColorBits, COMDAT
; _out$ = ecx
; _index$ = edx

; 2907 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b fa		 mov	 edi, edx
  00009	89 4d fc	 mov	 DWORD PTR _out$1$[ebp], ecx

; 2908 :   /*p = the partial index in the byte, e.g. with 4 palettebits it is 0 for first half or 1 for second half*/
; 2909 :   unsigned p = index % (8 / bits);

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _bits$[ebp]
  0000f	33 d2		 xor	 edx, edx
  00011	b8 08 00 00 00	 mov	 eax, 8
  00016	f7 f1		 div	 ecx
  00018	33 d2		 xor	 edx, edx

; 2910 :   in &= (1 << bits) - 1; /*filter out any other bits of the input value*/

  0001a	bb 01 00 00 00	 mov	 ebx, 1
  0001f	d3 e3		 shl	 ebx, cl
  00021	4b		 dec	 ebx
  00022	23 5d 0c	 and	 ebx, DWORD PTR _in$[ebp]
  00025	8b f0		 mov	 esi, eax
  00027	8b c7		 mov	 eax, edi

; 2911 :   in = in << (bits * (8 / bits - p - 1));
; 2912 :   if(p == 0) out[index * bits / 8] = in;

  00029	0f af 7d 08	 imul	 edi, DWORD PTR _bits$[ebp]
  0002d	f7 f6		 div	 esi
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _out$1$[ebp]
  00032	c1 ef 03	 shr	 edi, 3
  00035	2b f2		 sub	 esi, edx
  00037	4e		 dec	 esi
  00038	0f af f1	 imul	 esi, ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	d3 e3		 shl	 ebx, cl
  0003f	85 d2		 test	 edx, edx
  00041	75 0a		 jne	 SHORT $LN2@addColorBi
  00043	88 1c 07	 mov	 BYTE PTR [edi+eax], bl
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx

; 2914 : }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN2@addColorBi:

; 2913 :   else out[index * bits / 8] |= in;

  0004d	08 1c 38	 or	 BYTE PTR [eax+edi], bl
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 2914 : }

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?addColorBits@@YAXPAEIII@Z ENDP				; addColorBits
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?color_tree_init@@YAXPAUColorTree@@@Z
_TEXT	SEGMENT
?color_tree_init@@YAXPAUColorTree@@@Z PROC		; color_tree_init, COMDAT
; _tree$ = ecx

; 2931 : {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 2932 :   int i;
; 2933 :   for(i = 0; i < 16; i++) tree->children[i] = 0;

  00003	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00007	66 0f d6 41 08	 movq	 QWORD PTR [ecx+8], xmm0
  0000c	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  00011	66 0f d6 41 18	 movq	 QWORD PTR [ecx+24], xmm0
  00016	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  0001b	66 0f d6 41 28	 movq	 QWORD PTR [ecx+40], xmm0
  00020	66 0f d6 41 30	 movq	 QWORD PTR [ecx+48], xmm0
  00025	66 0f d6 41 38	 movq	 QWORD PTR [ecx+56], xmm0

; 2934 :   tree->index = -1;

  0002a	c7 41 40 ff ff
	ff ff		 mov	 DWORD PTR [ecx+64], -1

; 2935 : }

  00031	c3		 ret	 0
?color_tree_init@@YAXPAUColorTree@@@Z ENDP		; color_tree_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?color_tree_cleanup@@YAXPAUColorTree@@@Z
_TEXT	SEGMENT
?color_tree_cleanup@@YAXPAUColorTree@@@Z PROC		; color_tree_cleanup, COMDAT
; _tree$ = ecx

; 2938 : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2939 :   int i;
; 2940 :   for(i = 0; i < 16; i++)

  00004	33 f6		 xor	 esi, esi
$LL4@color_tree:

; 2941 :   {
; 2942 :     if(tree->children[i])

  00006	8b 0c b7	 mov	 ecx, DWORD PTR [edi+esi*4]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 10		 je	 SHORT $LN3@color_tree

; 2943 :     {
; 2944 :       color_tree_cleanup(tree->children[i]);

  0000d	e8 00 00 00 00	 call	 ?color_tree_cleanup@@YAXPAUColorTree@@@Z ; color_tree_cleanup

; 73   :   free(ptr);

  00012	ff 34 b7	 push	 DWORD PTR [edi+esi*4]
  00015	e8 00 00 00 00	 call	 _free
  0001a	83 c4 04	 add	 esp, 4
$LN3@color_tree:

; 2939 :   int i;
; 2940 :   for(i = 0; i < 16; i++)

  0001d	46		 inc	 esi
  0001e	83 fe 10	 cmp	 esi, 16			; 00000010H
  00021	7c e3		 jl	 SHORT $LL4@color_tree

; 2945 :       lodepng_free(tree->children[i]);
; 2946 :     }
; 2947 :   }
; 2948 : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	c3		 ret	 0
?color_tree_cleanup@@YAXPAUColorTree@@@Z ENDP		; color_tree_cleanup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?color_tree_get@@YAHPAUColorTree@@EEEE@Z
_TEXT	SEGMENT
tv305 = -12						; size = 4
tv303 = -8						; size = 4
tv304 = -4						; size = 4
_g$ = 8							; size = 1
_b$ = 12						; size = 1
_a$ = 16						; size = 1
?color_tree_get@@YAHPAUColorTree@@EEEE@Z PROC		; color_tree_get, COMDAT
; _tree$ = ecx
; _r$ = dl

; 2952 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _b$[ebp]
  0000f	0f b6 da	 movzx	 ebx, dl
  00012	0f b6 55 08	 movzx	 edx, BYTE PTR _g$[ebp]
  00016	89 4d fc	 mov	 DWORD PTR tv304[ebp], ecx
  00019	0f b6 4d 10	 movzx	 ecx, BYTE PTR _a$[ebp]

; 2953 :   int bit = 0;
; 2954 :   for(bit = 0; bit < 8; bit++)

  0001d	33 c0		 xor	 eax, eax
  0001f	89 55 f4	 mov	 DWORD PTR tv305[ebp], edx
  00022	89 4d f8	 mov	 DWORD PTR tv303[ebp], ecx
$LL5@color_tree:

; 2955 :   {
; 2956 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);

  00025	0f b6 c8	 movzx	 ecx, al
  00028	d3 ea		 shr	 edx, cl
  0002a	8b f3		 mov	 esi, ebx
  0002c	d3 ee		 shr	 esi, cl
  0002e	83 e2 01	 and	 edx, 1
  00031	83 e6 01	 and	 esi, 1
  00034	8d 34 72	 lea	 esi, DWORD PTR [edx+esi*2]
  00037	8b 55 fc	 mov	 edx, DWORD PTR tv304[ebp]
  0003a	d3 ea		 shr	 edx, cl
  0003c	83 e2 01	 and	 edx, 1
  0003f	8d 34 72	 lea	 esi, DWORD PTR [edx+esi*2]
  00042	8b 55 f8	 mov	 edx, DWORD PTR tv303[ebp]
  00045	d3 ea		 shr	 edx, cl
  00047	83 e2 01	 and	 edx, 1
  0004a	8d 0c 72	 lea	 ecx, DWORD PTR [edx+esi*2]

; 2957 :     if(!tree->children[i]) return -1;

  0004d	8b 3c 8f	 mov	 edi, DWORD PTR [edi+ecx*4]
  00050	85 ff		 test	 edi, edi
  00052	74 17		 je	 SHORT $LN11@color_tree

; 2953 :   int bit = 0;
; 2954 :   for(bit = 0; bit < 8; bit++)

  00054	8b 55 f4	 mov	 edx, DWORD PTR tv305[ebp]
  00057	40		 inc	 eax
  00058	83 f8 08	 cmp	 eax, 8
  0005b	7c c8		 jl	 SHORT $LL5@color_tree

; 2958 :     else tree = tree->children[i];
; 2959 :   }
; 2960 :   return tree ? tree->index : -1;

  0005d	85 ff		 test	 edi, edi
  0005f	74 0a		 je	 SHORT $LN11@color_tree
  00061	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx

; 2961 : }

  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
$LN11@color_tree:
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi

; 2957 :     if(!tree->children[i]) return -1;

  0006d	83 c8 ff	 or	 eax, -1
  00070	5b		 pop	 ebx

; 2961 : }

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?color_tree_get@@YAHPAUColorTree@@EEEE@Z ENDP		; color_tree_get
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?color_tree_add@@YAXPAUColorTree@@EEEEH@Z
_TEXT	SEGMENT
tv342 = -12						; size = 4
tv340 = -8						; size = 4
tv341 = -4						; size = 4
_g$ = 8							; size = 1
_b$ = 12						; size = 1
_a$ = 16						; size = 1
_index$ = 20						; size = 4
?color_tree_add@@YAXPAUColorTree@@EEEEH@Z PROC		; color_tree_add, COMDAT
; _tree$ = ecx
; _r$ = dl

; 2974 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	0f b6 45 08	 movzx	 eax, BYTE PTR _g$[ebp]
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	8b f1		 mov	 esi, ecx
  0000e	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _b$[ebp]
  00012	89 4d fc	 mov	 DWORD PTR tv341[ebp], ecx
  00015	0f b6 4d 10	 movzx	 ecx, BYTE PTR _a$[ebp]
  00019	57		 push	 edi

; 2975 :   int bit;
; 2976 :   for(bit = 0; bit < 8; bit++)

  0001a	33 db		 xor	 ebx, ebx
  0001c	0f b6 fa	 movzx	 edi, dl
  0001f	89 45 f4	 mov	 DWORD PTR tv342[ebp], eax
  00022	89 4d f8	 mov	 DWORD PTR tv340[ebp], ecx
$LL4@color_tree:

; 2977 :   {
; 2978 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);

  00025	0f b6 cb	 movzx	 ecx, bl
  00028	d3 e8		 shr	 eax, cl
  0002a	8b d7		 mov	 edx, edi
  0002c	d3 ea		 shr	 edx, cl
  0002e	83 e0 01	 and	 eax, 1
  00031	83 e2 01	 and	 edx, 1
  00034	8d 14 50	 lea	 edx, DWORD PTR [eax+edx*2]
  00037	8b 45 fc	 mov	 eax, DWORD PTR tv341[ebp]
  0003a	d3 e8		 shr	 eax, cl
  0003c	83 e0 01	 and	 eax, 1
  0003f	8d 14 50	 lea	 edx, DWORD PTR [eax+edx*2]
  00042	8b 45 f8	 mov	 eax, DWORD PTR tv340[ebp]
  00045	d3 e8		 shr	 eax, cl
  00047	83 e0 01	 and	 eax, 1
  0004a	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]

; 2979 :     if(!tree->children[i])

  0004d	83 3c 86 00	 cmp	 DWORD PTR [esi+eax*4], 0
  00051	8d 34 86	 lea	 esi, DWORD PTR [esi+eax*4]
  00054	75 30		 jne	 SHORT $LN12@color_tree

; 63   :   return malloc(size);

  00056	6a 44		 push	 68			; 00000044H
  00058	e8 00 00 00 00	 call	 _malloc
  0005d	83 c4 04	 add	 esp, 4

; 2980 :     {
; 2981 :       tree->children[i] = (ColorTree*)lodepng_malloc(sizeof(ColorTree));

  00060	89 06		 mov	 DWORD PTR [esi], eax

; 63   :   return malloc(size);

  00062	33 c9		 xor	 ecx, ecx
  00064	eb 0a 8d a4 24
	00 00 00 00 8d
	49 00		 npad	 12
$LL11@color_tree:

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);
; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
; 945  :     (*bp)++;
; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);
; 965  :   generateFixedDistanceTree(tree_d);
; 966  : }
; 967  : 
; 968  : /*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
; 969  : static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
; 970  :                                       const unsigned char* in, size_t* bp, size_t inlength)
; 971  : {
; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;
; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/
; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;
; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;
; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;
; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)
; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
; 1009 :     if(error) break;
; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;
; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;
; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;
; 1020 :     while(i < HLIT + HDIST)
; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
; 1023 :       if(code <= 15) /*a length code*/
; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;
; 1026 :         else bitlen_d[i - HLIT] = code;
; 1027 :         i++;
; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/
; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);
; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];
; 1040 :         else value = bitlen_d[i - HLIT - 1];
; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)
; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
; 1045 :           if(i < HLIT) bitlen_ll[i] = value;
; 1046 :           else bitlen_d[i - HLIT] = value;
; 1047 :           i++;
; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/
; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);
; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)
; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1063 :           else bitlen_d[i - HLIT] = 0;
; 1064 :           i++;
; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/
; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);
; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)
; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1080 :           else bitlen_d[i - HLIT] = 0;
; 1081 :           i++;
; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))
; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;
; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/
; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;
; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 1102 :     if(error) break;
; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
; 1104 : 
; 1105 :     break; /*end of error-while*/
; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;
; 1114 : }
; 1115 : 
; 1116 : /*inflate a block with dynamic of fixed Huffman tree*/
; 1117 : static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
; 1118 :                                     size_t* pos, size_t inlength, unsigned btype)
; 1119 : {
; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;
; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/
; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/
; 1136 :     {
; 1137 :       if((*pos) >= out->size)
; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);
; 1143 :       (*pos)++;
; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);
; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
; 1161 :       if(code_d > 29)
; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;
; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/
; 1170 :         break;
; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);
; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);
; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)
; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)
; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];
; 1193 :         (*pos)++;
; 1194 :         backward++;
; 1195 :         if(backward >= start) backward = start - distance;
; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)
; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;
; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;
; 1215 : }
; 1216 : 
; 1217 : static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
; 1218 : {
; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;
; 1223 :   p = (*bp) / 8; /*byte position*/
; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/
; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;
; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;
; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)
; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];
; 1241 : 
; 1242 :   (*bp) = p * 8;
; 1243 : 
; 1244 :   return error;
; 1245 : }
; 1246 : 
; 1247 : static unsigned lodepng_inflatev(ucvector* out,
; 1248 :                                  const unsigned char* in, size_t insize,
; 1249 :                                  const LodePNGDecompressSettings* settings)
; 1250 : {
; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;
; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/
; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)
; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
; 1264 :     BFINAL = readBitFromStream(&bp, in);
; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);
; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
; 1271 : 
; 1272 :     if(error) return error;
; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/
; 1277 : 
; 1278 :   return error;
; 1279 : }
; 1280 : 
; 1281 : unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
; 1282 :                          const unsigned char* in, size_t insize,
; 1283 :                          const LodePNGDecompressSettings* settings)
; 1284 : {
; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);
; 1289 :   *out = v.data;
; 1290 :   *outsize = v.size;
; 1291 :   return error;
; 1292 : }
; 1293 : 
; 1294 : static unsigned inflate(unsigned char** out, size_t* outsize,
; 1295 :                         const unsigned char* in, size_t insize,
; 1296 :                         const LodePNGDecompressSettings* settings)
; 1297 : {
; 1298 :   if(settings->custom_inflate)
; 1299 :   {
; 1300 :     return settings->custom_inflate(out, outsize, in, insize, settings);
; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }
; 1307 : 
; 1308 : #endif /*LODEPNG_COMPILE_DECODER*/
; 1309 : 
; 1310 : #ifdef LODEPNG_COMPILE_ENCODER
; 1311 : 
; 1312 : /* ////////////////////////////////////////////////////////////////////////// */
; 1313 : /* / Deflator (Compressor)                                                  / */
; 1314 : /* ////////////////////////////////////////////////////////////////////////// */
; 1315 : 
; 1316 : static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;
; 1317 : 
; 1318 : /*bitlen is the size in bits of the code*/
; 1319 : static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)
; 1320 : {
; 1321 :   addBitsToStreamReversed(bp, compressed, code, bitlen);
; 1322 : }
; 1323 : 
; 1324 : /*search the index in the array, that has the largest value smaller than or equal to the given value,
; 1325 : given array must be sorted (if no value is smaller, it returns the size of the given array)*/
; 1326 : static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)
; 1327 : {
; 1328 :   /*linear search implementation*/
; 1329 :   /*for(size_t i = 1; i < array_size; i++) if(array[i] > value) return i - 1;
; 1330 :   return array_size - 1;*/
; 1331 : 
; 1332 :   /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
; 1333 :   size_t left  = 1;
; 1334 :   size_t right = array_size - 1;
; 1335 :   while(left <= right)
; 1336 :   {
; 1337 :     size_t mid = (left + right) / 2;
; 1338 :     if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
; 1339 :     else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
; 1340 :     else return mid - 1;
; 1341 :   }
; 1342 :   return array_size - 1;
; 1343 : }
; 1344 : 
; 1345 : static void addLengthDistance(uivector* values, size_t length, size_t distance)
; 1346 : {
; 1347 :   /*values in encoded vector are those used by deflate:
; 1348 :   0-255: literal bytes
; 1349 :   256: end
; 1350 :   257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
; 1351 :   286-287: invalid*/
; 1352 : 
; 1353 :   unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
; 1354 :   unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
; 1355 :   unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
; 1356 :   unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);
; 1357 : 
; 1358 :   uivector_push_back(values, length_code + FIRST_LENGTH_CODE_INDEX);
; 1359 :   uivector_push_back(values, extra_length);
; 1360 :   uivector_push_back(values, dist_code);
; 1361 :   uivector_push_back(values, extra_distance);
; 1362 : }
; 1363 : 
; 1364 : static const unsigned HASH_NUM_VALUES = 65536;
; 1365 : static const unsigned HASH_NUM_CHARACTERS = 3;
; 1366 : static const unsigned HASH_SHIFT = 2;
; 1367 : /*
; 1368 : The HASH_NUM_CHARACTERS value is used to make encoding faster by using longer
; 1369 : sequences to generate a hash value from the stream bytes. Setting it to 3
; 1370 : gives exactly the same compression as the brute force method, since deflate's
; 1371 : run length encoding starts with lengths of 3. Setting it to higher values,
; 1372 : like 6, can make the encoding faster (not always though!), but will cause the
; 1373 : encoding to miss any length between 3 and this value, so that the compression
; 1374 : may be worse (but this can vary too depending on the image, sometimes it is
; 1375 : even a bit better instead).
; 1376 : The HASH_NUM_VALUES is the amount of unique possible hash values that
; 1377 : combinations of bytes can give, the higher it is the more memory is needed, but
; 1378 : if it's too low the advantage of hashing is gone.
; 1379 : */
; 1380 : 
; 1381 : typedef struct Hash
; 1382 : {
; 1383 :   int* head; /*hash value to head circular pos*/
; 1384 :   int* val; /*circular pos to hash value*/
; 1385 :   /*circular pos to prev circular pos*/
; 1386 :   unsigned short* chain;
; 1387 :   unsigned short* zeros;
; 1388 : } Hash;
; 1389 : 
; 1390 : static unsigned hash_init(Hash* hash, unsigned windowsize)
; 1391 : {
; 1392 :   unsigned i;
; 1393 :   hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
; 1394 :   hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
; 1395 :   hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1396 :   hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1397 : 
; 1398 :   if(!hash->head || !hash->val || !hash->chain || !hash->zeros) return 83; /*alloc fail*/
; 1399 : 
; 1400 :   /*initialize hash table*/
; 1401 :   for(i = 0; i < HASH_NUM_VALUES; i++) hash->head[i] = -1;
; 1402 :   for(i = 0; i < windowsize; i++) hash->val[i] = -1;
; 1403 :   for(i = 0; i < windowsize; i++) hash->chain[i] = i; /*same value as index indicates uninitialized*/
; 1404 : 
; 1405 :   return 0;
; 1406 : }
; 1407 : 
; 1408 : static void hash_cleanup(Hash* hash)
; 1409 : {
; 1410 :   lodepng_free(hash->head);
; 1411 :   lodepng_free(hash->val);
; 1412 :   lodepng_free(hash->chain);
; 1413 :   lodepng_free(hash->zeros);
; 1414 : }
; 1415 : 
; 1416 : static unsigned getHash(const unsigned char* data, size_t size, size_t pos)
; 1417 : {
; 1418 :   unsigned result = 0;
; 1419 :   size_t amount, i;
; 1420 :   if(pos >= size) return 0;
; 1421 :   amount = HASH_NUM_CHARACTERS;
; 1422 :   if(pos + amount >= size) amount = size - pos;
; 1423 :   for(i = 0; i < amount; i++) result ^= (data[pos + i] << (i * HASH_SHIFT));
; 1424 :   return result % HASH_NUM_VALUES;
; 1425 : }
; 1426 : 
; 1427 : static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)
; 1428 : {
; 1429 :   const unsigned char* start = data + pos;
; 1430 :   const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
; 1431 :   if(end > data + size) end = data + size;
; 1432 :   data = start;
; 1433 :   while (data != end && *data == 0) data++;
; 1434 :   /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
; 1435 :   return (unsigned)(data - start);
; 1436 : }
; 1437 : 
; 1438 : static void updateHashChain(Hash* hash, size_t pos, int hashval, unsigned windowsize)
; 1439 : {
; 1440 :   unsigned wpos = pos % windowsize;
; 1441 :   hash->val[wpos] = hashval;
; 1442 :   if(hash->head[hashval] != -1) hash->chain[wpos] = hash->head[hashval];
; 1443 :   hash->head[hashval] = wpos;
; 1444 : }
; 1445 : 
; 1446 : /*
; 1447 : LZ77-encode the data. Return value is error code. The input are raw bytes, the output
; 1448 : is in the form of unsigned integers with codes representing for example literal bytes, or
; 1449 : length/distance pairs.
; 1450 : It uses a hash table technique to let it encode faster. When doing LZ77 encoding, a
; 1451 : sliding window (of windowsize) is used, and all past bytes in that window can be used as
; 1452 : the "dictionary". A brute force search through all possible distances would be slow, and
; 1453 : this hash technique is one out of several ways to speed this up.
; 1454 : */
; 1455 : static unsigned encodeLZ77(uivector* out, Hash* hash,
; 1456 :                            const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
; 1457 :                            unsigned minmatch, unsigned nicematch, unsigned lazymatching)
; 1458 : {
; 1459 :   unsigned short numzeros = 0;
; 1460 :   int usezeros = windowsize >= 8192; /*for small window size, the 'max chain length' optimization does a better job*/
; 1461 :   unsigned pos, i, error = 0;
; 1462 :   /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
; 1463 :   unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8;
; 1464 :   unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;
; 1465 : 
; 1466 :   if(!error)
; 1467 :   {
; 1468 :     unsigned offset; /*the offset represents the distance in LZ77 terminology*/
; 1469 :     unsigned length;
; 1470 :     unsigned lazy = 0;
; 1471 :     unsigned lazylength = 0, lazyoffset = 0;
; 1472 :     unsigned hashval;
; 1473 :     unsigned current_offset, current_length;
; 1474 :     const unsigned char *lastptr, *foreptr, *backptr;
; 1475 :     unsigned short hashpos, prevpos;
; 1476 : 
; 1477 :     for(pos = inpos; pos < insize; pos++)
; 1478 :     {
; 1479 :       size_t wpos = pos % windowsize; /*position for in 'circular' hash buffers*/
; 1480 : 
; 1481 :       hashval = getHash(in, insize, pos);
; 1482 :       updateHashChain(hash, pos, hashval, windowsize);
; 1483 : 
; 1484 :       if(usezeros && hashval == 0)
; 1485 :       {
; 1486 :         numzeros = countZeros(in, insize, pos);
; 1487 :         hash->zeros[wpos] = numzeros;
; 1488 :       }
; 1489 : 
; 1490 :       /*the length and offset found for the current position*/
; 1491 :       length = 0;
; 1492 :       offset = 0;
; 1493 : 
; 1494 :       prevpos = hash->head[hashval];
; 1495 :       hashpos = hash->chain[prevpos];
; 1496 : 
; 1497 :       lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];
; 1498 : 
; 1499 :       /*search for the longest string*/
; 1500 :       if(hash->val[wpos] == (int)hashval)
; 1501 :       {
; 1502 :         unsigned chainlength = 0;
; 1503 :         for(;;)
; 1504 :         {
; 1505 :           /*stop when went completely around the circular buffer*/
; 1506 :           if(prevpos < wpos && hashpos > prevpos && hashpos <= wpos) break;
; 1507 :           if(prevpos > wpos && (hashpos <= wpos || hashpos > prevpos)) break;
; 1508 :           if(chainlength++ >= maxchainlength) break;
; 1509 : 
; 1510 :           current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;
; 1511 :           if(current_offset > 0)
; 1512 :           {
; 1513 :             /*test the next characters*/
; 1514 :             foreptr = &in[pos];
; 1515 :             backptr = &in[pos - current_offset];
; 1516 : 
; 1517 :             /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
; 1518 :             if(usezeros && hashval == 0 && hash->val[hashpos] == 0 /*hashval[hashpos] may be out of date*/)
; 1519 :             {
; 1520 :               unsigned short skip = hash->zeros[hashpos];
; 1521 :               if(skip > numzeros) skip = numzeros;
; 1522 :               backptr += skip;
; 1523 :               foreptr += skip;
; 1524 :             }
; 1525 : 
; 1526 :             /* multiple checks at once per array bounds check */
; 1527 :             while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
; 1528 :             {
; 1529 :               ++backptr;
; 1530 :               ++foreptr;
; 1531 :             }
; 1532 :             current_length = (unsigned)(foreptr - &in[pos]);
; 1533 : 
; 1534 :             if(current_length > length)
; 1535 :             {
; 1536 :               length = current_length; /*the longest length*/
; 1537 :               offset = current_offset; /*the offset that is related to this longest length*/
; 1538 :               /*jump out once a length of max length is found (speed gain)*/
; 1539 :               if(current_length >= nicematch || current_length == MAX_SUPPORTED_DEFLATE_LENGTH) break;
; 1540 :             }
; 1541 :           }
; 1542 : 
; 1543 :           if(hashpos == hash->chain[hashpos]) break;
; 1544 : 
; 1545 :           prevpos = hashpos;
; 1546 :           hashpos = hash->chain[hashpos];
; 1547 :         }
; 1548 :       }
; 1549 : 
; 1550 :       if(lazymatching)
; 1551 :       {
; 1552 :         if(!lazy && length >= 3 && length <= maxlazymatch && length < MAX_SUPPORTED_DEFLATE_LENGTH)
; 1553 :         {
; 1554 :           lazy = 1;
; 1555 :           lazylength = length;
; 1556 :           lazyoffset = offset;
; 1557 :           continue; /*try the next byte*/
; 1558 :         }
; 1559 :         if(lazy)
; 1560 :         {
; 1561 :           lazy = 0;
; 1562 :           if(pos == 0) ERROR_BREAK(81);
; 1563 :           if(length > lazylength + 1)
; 1564 :           {
; 1565 :             /*push the previous character as literal*/
; 1566 :             if(!uivector_push_back(out, in[pos - 1])) ERROR_BREAK(83 /*alloc fail*/);
; 1567 :           }
; 1568 :           else
; 1569 :           {
; 1570 :             length = lazylength;
; 1571 :             offset = lazyoffset;
; 1572 :             hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
; 1573 :             pos--;
; 1574 :           }
; 1575 :         }
; 1576 :       }
; 1577 :       if(length >= 3 && offset > windowsize) ERROR_BREAK(86 /*too big (or overflown negative) offset*/);
; 1578 : 
; 1579 :       /**encode it as length/distance pair or literal value**/
; 1580 :       if(length < 3) /*only lengths of 3 or higher are supported as length/distance pair*/
; 1581 :       {
; 1582 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1583 :       }
; 1584 :       else if(length < minmatch || (length == 3 && offset > 4096))
; 1585 :       {
; 1586 :         /*compensate for the fact that longer offsets have more extra bits, a
; 1587 :         length of only 3 may be not worth it then*/
; 1588 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1589 :       }
; 1590 :       else
; 1591 :       {
; 1592 :         addLengthDistance(out, length, offset);
; 1593 :         for(i = 1; i < length; i++)
; 1594 :         {
; 1595 :           pos++;
; 1596 :           hashval = getHash(in, insize, pos);
; 1597 :           updateHashChain(hash, pos, hashval, windowsize);
; 1598 :           if(usezeros && hashval == 0)
; 1599 :           {
; 1600 :             hash->zeros[pos % windowsize] = countZeros(in, insize, pos);
; 1601 :           }
; 1602 :         }
; 1603 :       }
; 1604 : 
; 1605 :     } /*end of the loop through each character of input*/
; 1606 :   } /*end of "if(!error)"*/
; 1607 : 
; 1608 :   return error;
; 1609 : }
; 1610 : 
; 1611 : /* /////////////////////////////////////////////////////////////////////////// */
; 1612 : 
; 1613 : static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)
; 1614 : {
; 1615 :   /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
; 1616 :   2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/
; 1617 : 
; 1618 :   size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
; 1619 :   unsigned datapos = 0;
; 1620 :   for(i = 0; i < numdeflateblocks; i++)
; 1621 :   {
; 1622 :     unsigned BFINAL, BTYPE, LEN, NLEN;
; 1623 :     unsigned char firstbyte;
; 1624 : 
; 1625 :     BFINAL = (i == numdeflateblocks - 1);
; 1626 :     BTYPE = 0;
; 1627 : 
; 1628 :     firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1) << 1) + ((BTYPE & 2) << 1));
; 1629 :     ucvector_push_back(out, firstbyte);
; 1630 : 
; 1631 :     LEN = 65535;
; 1632 :     if(datasize - datapos < 65535) LEN = (unsigned)datasize - datapos;
; 1633 :     NLEN = 65535 - LEN;
; 1634 : 
; 1635 :     ucvector_push_back(out, (unsigned char)(LEN % 256));
; 1636 :     ucvector_push_back(out, (unsigned char)(LEN / 256));
; 1637 :     ucvector_push_back(out, (unsigned char)(NLEN % 256));
; 1638 :     ucvector_push_back(out, (unsigned char)(NLEN / 256));
; 1639 : 
; 1640 :     /*Decompressed data*/
; 1641 :     for(j = 0; j < 65535 && datapos < datasize; j++)
; 1642 :     {
; 1643 :       ucvector_push_back(out, data[datapos++]);
; 1644 :     }
; 1645 :   }
; 1646 : 
; 1647 :   return 0;
; 1648 : }
; 1649 : 
; 1650 : /*
; 1651 : write the lz77-encoded data, which has lit, len and dist codes, to compressed stream using huffman trees.
; 1652 : tree_ll: the tree for lit and len codes.
; 1653 : tree_d: the tree for distance codes.
; 1654 : */
; 1655 : static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
; 1656 :                           const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
; 1657 : {
; 1658 :   size_t i = 0;
; 1659 :   for(i = 0; i < lz77_encoded->size; i++)
; 1660 :   {
; 1661 :     unsigned val = lz77_encoded->data[i];
; 1662 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_ll, val), HuffmanTree_getLength(tree_ll, val));
; 1663 :     if(val > 256) /*for a length code, 3 more things have to be added*/
; 1664 :     {
; 1665 :       unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
; 1666 :       unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
; 1667 :       unsigned length_extra_bits = lz77_encoded->data[++i];
; 1668 : 
; 1669 :       unsigned distance_code = lz77_encoded->data[++i];
; 1670 : 
; 1671 :       unsigned distance_index = distance_code;
; 1672 :       unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
; 1673 :       unsigned distance_extra_bits = lz77_encoded->data[++i];
; 1674 : 
; 1675 :       addBitsToStream(bp, out, length_extra_bits, n_length_extra_bits);
; 1676 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
; 1677 :                        HuffmanTree_getLength(tree_d, distance_code));
; 1678 :       addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
; 1679 :     }
; 1680 :   }
; 1681 : }
; 1682 : 
; 1683 : /*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
; 1684 : static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,
; 1685 :                                const unsigned char* data, size_t datapos, size_t dataend,
; 1686 :                                const LodePNGCompressSettings* settings, int final)
; 1687 : {
; 1688 :   unsigned error = 0;
; 1689 : 
; 1690 :   /*
; 1691 :   A block is compressed as follows: The PNG data is lz77 encoded, resulting in
; 1692 :   literal bytes and length/distance pairs. This is then huffman compressed with
; 1693 :   two huffman trees. One huffman tree is used for the lit and len values ("ll"),
; 1694 :   another huffman tree is used for the dist values ("d"). These two trees are
; 1695 :   stored using their code lengths, and to compress even more these code lengths
; 1696 :   are also run-length encoded and huffman compressed. This gives a huffman tree
; 1697 :   of code lengths "cl". The code lenghts used to describe this third tree are
; 1698 :   the code length code lengths ("clcl").
; 1699 :   */
; 1700 : 
; 1701 :   /*The lz77 encoded data, represented with integers since there will also be length and distance codes in it*/
; 1702 :   uivector lz77_encoded;
; 1703 :   HuffmanTree tree_ll; /*tree for lit,len values*/
; 1704 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1705 :   HuffmanTree tree_cl; /*tree for encoding the code lengths representing tree_ll and tree_d*/
; 1706 :   uivector frequencies_ll; /*frequency of lit,len codes*/
; 1707 :   uivector frequencies_d; /*frequency of dist codes*/
; 1708 :   uivector frequencies_cl; /*frequency of code length codes*/
; 1709 :   uivector bitlen_lld; /*lit,len,dist code lenghts (int bits), literally (without repeat codes).*/
; 1710 :   uivector bitlen_lld_e; /*bitlen_lld encoded with repeat codes (this is a rudemtary run length compression)*/
; 1711 :   /*bitlen_cl is the code length code lengths ("clcl"). The bit lengths of codes to represent tree_cl
; 1712 :   (these are written as is in the file, it would be crazy to compress these using yet another huffman
; 1713 :   tree that needs to be represented by yet another set of code lengths)*/
; 1714 :   uivector bitlen_cl;
; 1715 :   size_t datasize = dataend - datapos;
; 1716 : 
; 1717 :   /*
; 1718 :   Due to the huffman compression of huffman tree representations ("two levels"), there are some anologies:
; 1719 :   bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
; 1720 :   bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
; 1721 :   bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
; 1722 :   */
; 1723 : 
; 1724 :   unsigned BFINAL = final;
; 1725 :   size_t numcodes_ll, numcodes_d, i;
; 1726 :   unsigned HLIT, HDIST, HCLEN;
; 1727 : 
; 1728 :   uivector_init(&lz77_encoded);
; 1729 :   HuffmanTree_init(&tree_ll);
; 1730 :   HuffmanTree_init(&tree_d);
; 1731 :   HuffmanTree_init(&tree_cl);
; 1732 :   uivector_init(&frequencies_ll);
; 1733 :   uivector_init(&frequencies_d);
; 1734 :   uivector_init(&frequencies_cl);
; 1735 :   uivector_init(&bitlen_lld);
; 1736 :   uivector_init(&bitlen_lld_e);
; 1737 :   uivector_init(&bitlen_cl);
; 1738 : 
; 1739 :   /*This while loop never loops due to a break at the end, it is here to
; 1740 :   allow breaking out of it to the cleanup phase on error conditions.*/
; 1741 :   while(!error)
; 1742 :   {
; 1743 :     if(settings->use_lz77)
; 1744 :     {
; 1745 :       error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1746 :                          settings->minmatch, settings->nicematch, settings->lazymatching);
; 1747 :       if(error) break;
; 1748 :     }
; 1749 :     else
; 1750 :     {
; 1751 :       if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83 /*alloc fail*/);
; 1752 :       for(i = datapos; i < dataend; i++) lz77_encoded.data[i] = data[i]; /*no LZ77, but still will be Huffman compressed*/
; 1753 :     }
; 1754 : 
; 1755 :     if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1756 :     if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1757 : 
; 1758 :     /*Count the frequencies of lit, len and dist codes*/
; 1759 :     for(i = 0; i < lz77_encoded.size; i++)
; 1760 :     {
; 1761 :       unsigned symbol = lz77_encoded.data[i];
; 1762 :       frequencies_ll.data[symbol]++;
; 1763 :       if(symbol > 256)
; 1764 :       {
; 1765 :         unsigned dist = lz77_encoded.data[i + 2];
; 1766 :         frequencies_d.data[dist]++;
; 1767 :         i += 3;
; 1768 :       }
; 1769 :     }
; 1770 :     frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/
; 1771 : 
; 1772 :     /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
; 1773 :     error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
; 1774 :     if(error) break;
; 1775 :     /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
; 1776 :     error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
; 1777 :     if(error) break;
; 1778 : 
; 1779 :     numcodes_ll = tree_ll.numcodes; if(numcodes_ll > 286) numcodes_ll = 286;
; 1780 :     numcodes_d = tree_d.numcodes; if(numcodes_d > 30) numcodes_d = 30;
; 1781 :     /*store the code lengths of both generated trees in bitlen_lld*/
; 1782 :     for(i = 0; i < numcodes_ll; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
; 1783 :     for(i = 0; i < numcodes_d; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));
; 1784 : 
; 1785 :     /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
; 1786 :     17 (3-10 zeroes), 18 (11-138 zeroes)*/
; 1787 :     for(i = 0; i < (unsigned)bitlen_lld.size; i++)
; 1788 :     {
; 1789 :       unsigned j = 0; /*amount of repititions*/
; 1790 :       while(i + j + 1 < (unsigned)bitlen_lld.size && bitlen_lld.data[i + j + 1] == bitlen_lld.data[i]) j++;
; 1791 : 
; 1792 :       if(bitlen_lld.data[i] == 0 && j >= 2) /*repeat code for zeroes*/
; 1793 :       {
; 1794 :         j++; /*include the first zero*/
; 1795 :         if(j <= 10) /*repeat code 17 supports max 10 zeroes*/
; 1796 :         {
; 1797 :           uivector_push_back(&bitlen_lld_e, 17);
; 1798 :           uivector_push_back(&bitlen_lld_e, j - 3);
; 1799 :         }
; 1800 :         else /*repeat code 18 supports max 138 zeroes*/
; 1801 :         {
; 1802 :           if(j > 138) j = 138;
; 1803 :           uivector_push_back(&bitlen_lld_e, 18);
; 1804 :           uivector_push_back(&bitlen_lld_e, j - 11);
; 1805 :         }
; 1806 :         i += (j - 1);
; 1807 :       }
; 1808 :       else if(j >= 3) /*repeat code for value other than zero*/
; 1809 :       {
; 1810 :         size_t k;
; 1811 :         unsigned num = j / 6, rest = j % 6;
; 1812 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1813 :         for(k = 0; k < num; k++)
; 1814 :         {
; 1815 :           uivector_push_back(&bitlen_lld_e, 16);
; 1816 :           uivector_push_back(&bitlen_lld_e, 6 - 3);
; 1817 :         }
; 1818 :         if(rest >= 3)
; 1819 :         {
; 1820 :           uivector_push_back(&bitlen_lld_e, 16);
; 1821 :           uivector_push_back(&bitlen_lld_e, rest - 3);
; 1822 :         }
; 1823 :         else j -= rest;
; 1824 :         i += j;
; 1825 :       }
; 1826 :       else /*too short to benefit from repeat code*/
; 1827 :       {
; 1828 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1829 :       }
; 1830 :     }
; 1831 : 
; 1832 :     /*generate tree_cl, the huffmantree of huffmantrees*/
; 1833 : 
; 1834 :     if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1835 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1836 :     {
; 1837 :       frequencies_cl.data[bitlen_lld_e.data[i]]++;
; 1838 :       /*after a repeat code come the bits that specify the number of repetitions,
; 1839 :       those don't need to be in the frequencies_cl calculation*/
; 1840 :       if(bitlen_lld_e.data[i] >= 16) i++;
; 1841 :     }
; 1842 : 
; 1843 :     error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
; 1844 :                                             frequencies_cl.size, frequencies_cl.size, 7);
; 1845 :     if(error) break;
; 1846 : 
; 1847 :     if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
; 1848 :     for(i = 0; i < tree_cl.numcodes; i++)
; 1849 :     {
; 1850 :       /*lenghts of code length tree is in the order as specified by deflate*/
; 1851 :       bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
; 1852 :     }
; 1853 :     while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
; 1854 :     {
; 1855 :       /*remove zeros at the end, but minimum size must be 4*/
; 1856 :       if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
; 1857 :     }
; 1858 :     if(error) break;
; 1859 : 
; 1860 :     /*
; 1861 :     Write everything into the output
; 1862 : 
; 1863 :     After the BFINAL and BTYPE, the dynamic block consists out of the following:
; 1864 :     - 5 bits HLIT, 5 bits HDIST, 4 bits HCLEN
; 1865 :     - (HCLEN+4)*3 bits code lengths of code length alphabet
; 1866 :     - HLIT + 257 code lenghts of lit/length alphabet (encoded using the code length
; 1867 :       alphabet, + possible repetition codes 16, 17, 18)
; 1868 :     - HDIST + 1 code lengths of distance alphabet (encoded using the code length
; 1869 :       alphabet, + possible repetition codes 16, 17, 18)
; 1870 :     - compressed data
; 1871 :     - 256 (end code)
; 1872 :     */
; 1873 : 
; 1874 :     /*Write block type*/
; 1875 :     addBitToStream(bp, out, BFINAL);
; 1876 :     addBitToStream(bp, out, 0); /*first bit of BTYPE "dynamic"*/
; 1877 :     addBitToStream(bp, out, 1); /*second bit of BTYPE "dynamic"*/
; 1878 : 
; 1879 :     /*write the HLIT, HDIST and HCLEN values*/
; 1880 :     HLIT = (unsigned)(numcodes_ll - 257);
; 1881 :     HDIST = (unsigned)(numcodes_d - 1);
; 1882 :     HCLEN = (unsigned)bitlen_cl.size - 4;
; 1883 :     /*trim zeroes for HCLEN. HLIT and HDIST were already trimmed at tree creation*/
; 1884 :     while(!bitlen_cl.data[HCLEN + 4 - 1] && HCLEN > 0) HCLEN--;
; 1885 :     addBitsToStream(bp, out, HLIT, 5);
; 1886 :     addBitsToStream(bp, out, HDIST, 5);
; 1887 :     addBitsToStream(bp, out, HCLEN, 4);
; 1888 : 
; 1889 :     /*write the code lenghts of the code length alphabet*/
; 1890 :     for(i = 0; i < HCLEN + 4; i++) addBitsToStream(bp, out, bitlen_cl.data[i], 3);
; 1891 : 
; 1892 :     /*write the lenghts of the lit/len AND the dist alphabet*/
; 1893 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1894 :     {
; 1895 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
; 1896 :                        HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
; 1897 :       /*extra bits of repeat codes*/
; 1898 :       if(bitlen_lld_e.data[i] == 16) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 2);
; 1899 :       else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
; 1900 :       else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
; 1901 :     }
; 1902 : 
; 1903 :     /*write the compressed data symbols*/
; 1904 :     writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1905 :     /*error: the length of the end code 256 must be larger than 0*/
; 1906 :     if(HuffmanTree_getLength(&tree_ll, 256) == 0) ERROR_BREAK(64);
; 1907 : 
; 1908 :     /*write the end code*/
; 1909 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1910 : 
; 1911 :     break; /*end of error-while*/
; 1912 :   }
; 1913 : 
; 1914 :   /*cleanup*/
; 1915 :   uivector_cleanup(&lz77_encoded);
; 1916 :   HuffmanTree_cleanup(&tree_ll);
; 1917 :   HuffmanTree_cleanup(&tree_d);
; 1918 :   HuffmanTree_cleanup(&tree_cl);
; 1919 :   uivector_cleanup(&frequencies_ll);
; 1920 :   uivector_cleanup(&frequencies_d);
; 1921 :   uivector_cleanup(&frequencies_cl);
; 1922 :   uivector_cleanup(&bitlen_lld_e);
; 1923 :   uivector_cleanup(&bitlen_lld);
; 1924 :   uivector_cleanup(&bitlen_cl);
; 1925 : 
; 1926 :   return error;
; 1927 : }
; 1928 : 
; 1929 : static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,
; 1930 :                              const unsigned char* data,
; 1931 :                              size_t datapos, size_t dataend,
; 1932 :                              const LodePNGCompressSettings* settings, int final)
; 1933 : {
; 1934 :   HuffmanTree tree_ll; /*tree for literal values and length codes*/
; 1935 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1936 : 
; 1937 :   unsigned BFINAL = final;
; 1938 :   unsigned error = 0;
; 1939 :   size_t i;
; 1940 : 
; 1941 :   HuffmanTree_init(&tree_ll);
; 1942 :   HuffmanTree_init(&tree_d);
; 1943 : 
; 1944 :   generateFixedLitLenTree(&tree_ll);
; 1945 :   generateFixedDistanceTree(&tree_d);
; 1946 : 
; 1947 :   addBitToStream(bp, out, BFINAL);
; 1948 :   addBitToStream(bp, out, 1); /*first bit of BTYPE*/
; 1949 :   addBitToStream(bp, out, 0); /*second bit of BTYPE*/
; 1950 : 
; 1951 :   if(settings->use_lz77) /*LZ77 encoded*/
; 1952 :   {
; 1953 :     uivector lz77_encoded;
; 1954 :     uivector_init(&lz77_encoded);
; 1955 :     error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1956 :                        settings->minmatch, settings->nicematch, settings->lazymatching);
; 1957 :     if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1958 :     uivector_cleanup(&lz77_encoded);
; 1959 :   }
; 1960 :   else /*no LZ77, but still will be Huffman compressed*/
; 1961 :   {
; 1962 :     for(i = datapos; i < dataend; i++)
; 1963 :     {
; 1964 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
; 1965 :     }
; 1966 :   }
; 1967 :   /*add END code*/
; 1968 :   if(!error) addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1969 : 
; 1970 :   /*cleanup*/
; 1971 :   HuffmanTree_cleanup(&tree_ll);
; 1972 :   HuffmanTree_cleanup(&tree_d);
; 1973 : 
; 1974 :   return error;
; 1975 : }
; 1976 : 
; 1977 : static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
; 1978 :                                  const LodePNGCompressSettings* settings)
; 1979 : {
; 1980 :   unsigned error = 0;
; 1981 :   size_t i, blocksize, numdeflateblocks;
; 1982 :   size_t bp = 0; /*the bit pointer*/
; 1983 :   Hash hash;
; 1984 : 
; 1985 :   if(settings->btype > 2) return 61;
; 1986 :   else if(settings->btype == 0) return deflateNoCompression(out, in, insize);
; 1987 :   else if(settings->btype == 1) blocksize = insize;
; 1988 :   else /*if(settings->btype == 2)*/
; 1989 :   {
; 1990 :     blocksize = insize / 8 + 8;
; 1991 :     if(blocksize < 65535) blocksize = 65535;
; 1992 :   }
; 1993 : 
; 1994 :   numdeflateblocks = (insize + blocksize - 1) / blocksize;
; 1995 :   if(numdeflateblocks == 0) numdeflateblocks = 1;
; 1996 : 
; 1997 :   error = hash_init(&hash, settings->windowsize);
; 1998 :   if(error) return error;
; 1999 : 
; 2000 :   for(i = 0; i < numdeflateblocks && !error; i++)
; 2001 :   {
; 2002 :     int final = i == numdeflateblocks - 1;
; 2003 :     size_t start = i * blocksize;
; 2004 :     size_t end = start + blocksize;
; 2005 :     if(end > insize) end = insize;
; 2006 : 
; 2007 :     if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
; 2008 :     else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
; 2009 :   }
; 2010 : 
; 2011 :   hash_cleanup(&hash);
; 2012 : 
; 2013 :   return error;
; 2014 : }
; 2015 : 
; 2016 : unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
; 2017 :                          const unsigned char* in, size_t insize,
; 2018 :                          const LodePNGCompressSettings* settings)
; 2019 : {
; 2020 :   unsigned error;
; 2021 :   ucvector v;
; 2022 :   ucvector_init_buffer(&v, *out, *outsize);
; 2023 :   error = lodepng_deflatev(&v, in, insize, settings);
; 2024 :   *out = v.data;
; 2025 :   *outsize = v.size;
; 2026 :   return error;
; 2027 : }
; 2028 : 
; 2029 : static unsigned deflate(unsigned char** out, size_t* outsize,
; 2030 :                         const unsigned char* in, size_t insize,
; 2031 :                         const LodePNGCompressSettings* settings)
; 2032 : {
; 2033 :   if(settings->custom_deflate)
; 2034 :   {
; 2035 :     return settings->custom_deflate(out, outsize, in, insize, settings);
; 2036 :   }
; 2037 :   else
; 2038 :   {
; 2039 :     return lodepng_deflate(out, outsize, in, insize, settings);
; 2040 :   }
; 2041 : }
; 2042 : 
; 2043 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2044 : 
; 2045 : /* ////////////////////////////////////////////////////////////////////////// */
; 2046 : /* / Adler32                                                                  */
; 2047 : /* ////////////////////////////////////////////////////////////////////////// */
; 2048 : 
; 2049 : static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
; 2050 : {
; 2051 :    unsigned s1 = adler & 0xffff;
; 2052 :    unsigned s2 = (adler >> 16) & 0xffff;
; 2053 : 
; 2054 :   while(len > 0)
; 2055 :   {
; 2056 :     /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
; 2057 :     unsigned amount = len > 5550 ? 5550 : len;
; 2058 :     len -= amount;
; 2059 :     while(amount > 0)
; 2060 :     {
; 2061 :       s1 += (*data++);
; 2062 :       s2 += s1;
; 2063 :       amount--;
; 2064 :     }
; 2065 :     s1 %= 65521;
; 2066 :     s2 %= 65521;
; 2067 :   }
; 2068 : 
; 2069 :   return (s2 << 16) | s1;
; 2070 : }
; 2071 : 
; 2072 : /*Return the adler32 of the bytes data[0..len-1]*/
; 2073 : static unsigned adler32(const unsigned char* data, unsigned len)
; 2074 : {
; 2075 :   return update_adler32(1L, data, len);
; 2076 : }
; 2077 : 
; 2078 : /* ////////////////////////////////////////////////////////////////////////// */
; 2079 : /* / Zlib                                                                   / */
; 2080 : /* ////////////////////////////////////////////////////////////////////////// */
; 2081 : 
; 2082 : #ifdef LODEPNG_COMPILE_DECODER
; 2083 : 
; 2084 : unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2085 :                                  size_t insize, const LodePNGDecompressSettings* settings)
; 2086 : {
; 2087 :   unsigned error = 0;
; 2088 :   unsigned CM, CINFO, FDICT;
; 2089 : 
; 2090 :   if(insize < 2) return 53; /*error, size of zlib data too small*/
; 2091 :   /*read information from zlib header*/
; 2092 :   if((in[0] * 256 + in[1]) % 31 != 0)
; 2093 :   {
; 2094 :     /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
; 2095 :     return 24;
; 2096 :   }
; 2097 : 
; 2098 :   CM = in[0] & 15;
; 2099 :   CINFO = (in[0] >> 4) & 15;
; 2100 :   /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
; 2101 :   FDICT = (in[1] >> 5) & 1;
; 2102 :   /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/
; 2103 : 
; 2104 :   if(CM != 8 || CINFO > 7)
; 2105 :   {
; 2106 :     /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
; 2107 :     return 25;
; 2108 :   }
; 2109 :   if(FDICT != 0)
; 2110 :   {
; 2111 :     /*error: the specification of PNG says about the zlib stream:
; 2112 :       "The additional flags shall not specify a preset dictionary."*/
; 2113 :     return 26;
; 2114 :   }
; 2115 : 
; 2116 :   error = inflate(out, outsize, in + 2, insize - 2, settings);
; 2117 :   if(error) return error;
; 2118 : 
; 2119 :   if(!settings->ignore_adler32)
; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/
; 2124 :   }
; 2125 : 
; 2126 :   return 0; /*no error*/
; 2127 : }
; 2128 : 
; 2129 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2130 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2131 : {
; 2132 :   if(settings->custom_zlib)
; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2134 :   else
; 2135 :     return lodepng_zlib_decompress(out, outsize, in, insize, settings);
; 2136 : }
; 2137 : 
; 2138 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2139 : 
; 2140 : #ifdef LODEPNG_COMPILE_ENCODER
; 2141 : 
; 2142 : unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2143 :                                size_t insize, const LodePNGCompressSettings* settings)
; 2144 : {
; 2145 :   /*initially, *out must be NULL and outsize 0, if you just give some random *out
; 2146 :   that's pointing to a non allocated buffer, this'll crash*/
; 2147 :   ucvector outv;
; 2148 :   size_t i;
; 2149 :   unsigned error;
; 2150 :   unsigned char* deflatedata = 0;
; 2151 :   size_t deflatesize = 0;
; 2152 : 
; 2153 :   unsigned ADLER32;
; 2154 :   /*zlib data: 1 byte CMF (CM+CINFO), 1 byte FLG, deflate data, 4 byte ADLER32 checksum of the Decompressed data*/
; 2155 :   unsigned CMF = 120; /*0b01111000: CM 8, CINFO 7. With CINFO 7, any window size up to 32768 can be used.*/
; 2156 :   unsigned FLEVEL = 0;
; 2157 :   unsigned FDICT = 0;
; 2158 :   unsigned CMFFLG = 256 * CMF + FDICT * 32 + FLEVEL * 64;
; 2159 :   unsigned FCHECK = 31 - CMFFLG % 31;
; 2160 :   CMFFLG += FCHECK;
; 2161 : 
; 2162 :   /*ucvector-controlled version of the output buffer, for dynamic array*/
; 2163 :   ucvector_init_buffer(&outv, *out, *outsize);
; 2164 : 
; 2165 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG / 256));
; 2166 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG % 256));
; 2167 : 
; 2168 :   error = deflate(&deflatedata, &deflatesize, in, insize, settings);
; 2169 : 
; 2170 :   if(!error)
; 2171 :   {
; 2172 :     ADLER32 = adler32(in, (unsigned)insize);
; 2173 :     for(i = 0; i < deflatesize; i++) ucvector_push_back(&outv, deflatedata[i]);
; 2174 :     lodepng_free(deflatedata);
; 2175 :     lodepng_add32bitInt(&outv, ADLER32);
; 2176 :   }
; 2177 : 
; 2178 :   *out = outv.data;
; 2179 :   *outsize = outv.size;
; 2180 : 
; 2181 :   return error;
; 2182 : }
; 2183 : 
; 2184 : /* compress using the default or custom zlib function */
; 2185 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2186 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2187 : {
; 2188 :   if(settings->custom_zlib)
; 2189 :   {
; 2190 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2191 :   }
; 2192 :   else
; 2193 :   {
; 2194 :     return lodepng_zlib_compress(out, outsize, in, insize, settings);
; 2195 :   }
; 2196 : }
; 2197 : 
; 2198 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2199 : 
; 2200 : #else /*no LODEPNG_COMPILE_ZLIB*/
; 2201 : 
; 2202 : #ifdef LODEPNG_COMPILE_DECODER
; 2203 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2204 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2205 : {
; 2206 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2207 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2208 : }
; 2209 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2210 : #ifdef LODEPNG_COMPILE_ENCODER
; 2211 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2212 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2213 : {
; 2214 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2215 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2216 : }
; 2217 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2218 : 
; 2219 : #endif /*LODEPNG_COMPILE_ZLIB*/
; 2220 : 
; 2221 : /* ////////////////////////////////////////////////////////////////////////// */
; 2222 : 
; 2223 : #ifdef LODEPNG_COMPILE_ENCODER
; 2224 : 
; 2225 : /*this is a good tradeoff between speed and compression ratio*/
; 2226 : #define DEFAULT_WINDOWSIZE 2048
; 2227 : 
; 2228 : void lodepng_compress_settings_init(LodePNGCompressSettings* settings)
; 2229 : {
; 2230 :   /*compress with dynamic huffman tree (not in the mathematical sense, just not the predefined one)*/
; 2231 :   settings->btype = 2;
; 2232 :   settings->use_lz77 = 1;
; 2233 :   settings->windowsize = DEFAULT_WINDOWSIZE;
; 2234 :   settings->minmatch = 3;
; 2235 :   settings->nicematch = 128;
; 2236 :   settings->lazymatching = 1;
; 2237 : 
; 2238 :   settings->custom_zlib = 0;
; 2239 :   settings->custom_deflate = 0;
; 2240 :   settings->custom_context = 0;
; 2241 : }
; 2242 : 
; 2243 : const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 3, 128, 1, 0, 0, 0};
; 2244 : 
; 2245 : 
; 2246 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2247 : 
; 2248 : #ifdef LODEPNG_COMPILE_DECODER
; 2249 : 
; 2250 : void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings)
; 2251 : {
; 2252 :   settings->ignore_adler32 = 0;
; 2253 : 
; 2254 :   settings->custom_zlib = 0;
; 2255 :   settings->custom_inflate = 0;
; 2256 :   settings->custom_context = 0;
; 2257 : }
; 2258 : 
; 2259 : const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0, 0, 0};
; 2260 : 
; 2261 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2262 : 
; 2263 : /* ////////////////////////////////////////////////////////////////////////// */
; 2264 : /* ////////////////////////////////////////////////////////////////////////// */
; 2265 : /* // End of Zlib related code. Begin of PNG related code.                 // */
; 2266 : /* ////////////////////////////////////////////////////////////////////////// */
; 2267 : /* ////////////////////////////////////////////////////////////////////////// */
; 2268 : 
; 2269 : #ifdef LODEPNG_COMPILE_PNG
; 2270 : 
; 2271 : /* ////////////////////////////////////////////////////////////////////////// */
; 2272 : /* / CRC32                                                                  / */
; 2273 : /* ////////////////////////////////////////////////////////////////////////// */
; 2274 : 
; 2275 : /* CRC polynomial: 0xedb88320 */
; 2276 : static unsigned lodepng_crc32_table[256] = {
; 2277 :            0u, 1996959894u, 3993919788u, 2567524794u,  124634137u, 1886057615u, 3915621685u, 2657392035u,
; 2278 :    249268274u, 2044508324u, 3772115230u, 2547177864u,  162941995u, 2125561021u, 3887607047u, 2428444049u,
; 2279 :    498536548u, 1789927666u, 4089016648u, 2227061214u,  450548861u, 1843258603u, 4107580753u, 2211677639u,
; 2280 :    325883990u, 1684777152u, 4251122042u, 2321926636u,  335633487u, 1661365465u, 4195302755u, 2366115317u,
; 2281 :    997073096u, 1281953886u, 3579855332u, 2724688242u, 1006888145u, 1258607687u, 3524101629u, 2768942443u,
; 2282 :    901097722u, 1119000684u, 3686517206u, 2898065728u,  853044451u, 1172266101u, 3705015759u, 2882616665u,
; 2283 :    651767980u, 1373503546u, 3369554304u, 3218104598u,  565507253u, 1454621731u, 3485111705u, 3099436303u,
; 2284 :    671266974u, 1594198024u, 3322730930u, 2970347812u,  795835527u, 1483230225u, 3244367275u, 3060149565u,
; 2285 :   1994146192u,   31158534u, 2563907772u, 4023717930u, 1907459465u,  112637215u, 2680153253u, 3904427059u,
; 2286 :   2013776290u,  251722036u, 2517215374u, 3775830040u, 2137656763u,  141376813u, 2439277719u, 3865271297u,
; 2287 :   1802195444u,  476864866u, 2238001368u, 4066508878u, 1812370925u,  453092731u, 2181625025u, 4111451223u,
; 2288 :   1706088902u,  314042704u, 2344532202u, 4240017532u, 1658658271u,  366619977u, 2362670323u, 4224994405u,
; 2289 :   1303535960u,  984961486u, 2747007092u, 3569037538u, 1256170817u, 1037604311u, 2765210733u, 3554079995u,
; 2290 :   1131014506u,  879679996u, 2909243462u, 3663771856u, 1141124467u,  855842277u, 2852801631u, 3708648649u,
; 2291 :   1342533948u,  654459306u, 3188396048u, 3373015174u, 1466479909u,  544179635u, 3110523913u, 3462522015u,
; 2292 :   1591671054u,  702138776u, 2966460450u, 3352799412u, 1504918807u,  783551873u, 3082640443u, 3233442989u,
; 2293 :   3988292384u, 2596254646u,   62317068u, 1957810842u, 3939845945u, 2647816111u,   81470997u, 1943803523u,
; 2294 :   3814918930u, 2489596804u,  225274430u, 2053790376u, 3826175755u, 2466906013u,  167816743u, 2097651377u,
; 2295 :   4027552580u, 2265490386u,  503444072u, 1762050814u, 4150417245u, 2154129355u,  426522225u, 1852507879u,
; 2296 :   4275313526u, 2312317920u,  282753626u, 1742555852u, 4189708143u, 2394877945u,  397917763u, 1622183637u,
; 2297 :   3604390888u, 2714866558u,  953729732u, 1340076626u, 3518719985u, 2797360999u, 1068828381u, 1219638859u,
; 2298 :   3624741850u, 2936675148u,  906185462u, 1090812512u, 3747672003u, 2825379669u,  829329135u, 1181335161u,
; 2299 :   3412177804u, 3160834842u,  628085408u, 1382605366u, 3423369109u, 3138078467u,  570562233u, 1426400815u,
; 2300 :   3317316542u, 2998733608u,  733239954u, 1555261956u, 3268935591u, 3050360625u,  752459403u, 1541320221u,
; 2301 :   2607071920u, 3965973030u, 1969922972u,   40735498u, 2617837225u, 3943577151u, 1913087877u,   83908371u,
; 2302 :   2512341634u, 3803740692u, 2075208622u,  213261112u, 2463272603u, 3855990285u, 2094854071u,  198958881u,
; 2303 :   2262029012u, 4057260610u, 1759359992u,  534414190u, 2176718541u, 4139329115u, 1873836001u,  414664567u,
; 2304 :   2282248934u, 4279200368u, 1711684554u,  285281116u, 2405801727u, 4167216745u, 1634467795u,  376229701u,
; 2305 :   2685067896u, 3608007406u, 1308918612u,  956543938u, 2808555105u, 3495958263u, 1231636301u, 1047427035u,
; 2306 :   2932959818u, 3654703836u, 1088359270u,  936918000u, 2847714899u, 3736837829u, 1202900863u,  817233897u,
; 2307 :   3183342108u, 3401237130u, 1404277552u,  615818150u, 3134207493u, 3453421203u, 1423857449u,  601450431u,
; 2308 :   3009837614u, 3294710456u, 1567103746u,  711928724u, 3020668471u, 3272380065u, 1510334235u,  755167117u
; 2309 : };
; 2310 : 
; 2311 : /*Return the CRC of the bytes buf[0..len-1].*/
; 2312 : unsigned lodepng_crc32(const unsigned char* buf, size_t len)
; 2313 : {
; 2314 :   unsigned c = 0xffffffffL;
; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)
; 2318 :   {
; 2319 :     c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
; 2320 :   }
; 2321 :   return c ^ 0xffffffffL;
; 2322 : }
; 2323 : 
; 2324 : /* ////////////////////////////////////////////////////////////////////////// */
; 2325 : /* / Reading and writing single bits and bytes from/to stream for LodePNG   / */
; 2326 : /* ////////////////////////////////////////////////////////////////////////// */
; 2327 : 
; 2328 : static unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream)
; 2329 : {
; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);
; 2331 :   (*bitpointer)++;
; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)
; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
; 2354 :   }
; 2355 :   (*bitpointer)++;
; 2356 : }
; 2357 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2358 : 
; 2359 : static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2360 : {
; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));
; 2363 :   else         bitstream[(*bitpointer) >> 3] |=  (1 << (7 - ((*bitpointer) & 0x7)));
; 2364 :   (*bitpointer)++;
; 2365 : }
; 2366 : 
; 2367 : /* ////////////////////////////////////////////////////////////////////////// */
; 2368 : /* / PNG chunks                                                             / */
; 2369 : /* ////////////////////////////////////////////////////////////////////////// */
; 2370 : 
; 2371 : unsigned lodepng_chunk_length(const unsigned char* chunk)
; 2372 : {
; 2373 :   return lodepng_read32bitInt(&chunk[0]);
; 2374 : }
; 2375 : 
; 2376 : void lodepng_chunk_type(char type[5], const unsigned char* chunk)
; 2377 : {
; 2378 :   unsigned i;
; 2379 :   for(i = 0; i < 4; i++) type[i] = chunk[4 + i];
; 2380 :   type[4] = 0; /*null termination char*/
; 2381 : }
; 2382 : 
; 2383 : unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type)
; 2384 : {
; 2385 :   if(strlen(type) != 4) return 0;
; 2386 :   return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);
; 2387 : }
; 2388 : 
; 2389 : unsigned char lodepng_chunk_ancillary(const unsigned char* chunk)
; 2390 : {
; 2391 :   return((chunk[4] & 32) != 0);
; 2392 : }
; 2393 : 
; 2394 : unsigned char lodepng_chunk_private(const unsigned char* chunk)
; 2395 : {
; 2396 :   return((chunk[6] & 32) != 0);
; 2397 : }
; 2398 : 
; 2399 : unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk)
; 2400 : {
; 2401 :   return((chunk[7] & 32) != 0);
; 2402 : }
; 2403 : 
; 2404 : unsigned char* lodepng_chunk_data(unsigned char* chunk)
; 2405 : {
; 2406 :   return &chunk[8];
; 2407 : }
; 2408 : 
; 2409 : const unsigned char* lodepng_chunk_data_const(const unsigned char* chunk)
; 2410 : {
; 2411 :   return &chunk[8];
; 2412 : }
; 2413 : 
; 2414 : unsigned lodepng_chunk_check_crc(const unsigned char* chunk)
; 2415 : {
; 2416 :   unsigned length = lodepng_chunk_length(chunk);
; 2417 :   unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);
; 2418 :   /*the CRC is taken of the data and the 4 chunk type letters, not the length*/
; 2419 :   unsigned checksum = lodepng_crc32(&chunk[4], length + 4);
; 2420 :   if(CRC != checksum) return 1;
; 2421 :   else return 0;
; 2422 : }
; 2423 : 
; 2424 : void lodepng_chunk_generate_crc(unsigned char* chunk)
; 2425 : {
; 2426 :   unsigned length = lodepng_chunk_length(chunk);
; 2427 :   unsigned CRC = lodepng_crc32(&chunk[4], length + 4);
; 2428 :   lodepng_set32bitInt(chunk + 8 + length, CRC);
; 2429 : }
; 2430 : 
; 2431 : unsigned char* lodepng_chunk_next(unsigned char* chunk)
; 2432 : {
; 2433 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2434 :   return &chunk[total_chunk_length];
; 2435 : }
; 2436 : 
; 2437 : const unsigned char* lodepng_chunk_next_const(const unsigned char* chunk)
; 2438 : {
; 2439 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2440 :   return &chunk[total_chunk_length];
; 2441 : }
; 2442 : 
; 2443 : unsigned lodepng_chunk_append(unsigned char** out, size_t* outlength, const unsigned char* chunk)
; 2444 : {
; 2445 :   unsigned i;
; 2446 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2447 :   unsigned char *chunk_start, *new_buffer;
; 2448 :   size_t new_length = (*outlength) + total_chunk_length;
; 2449 :   if(new_length < total_chunk_length || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2450 : 
; 2451 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2452 :   if(!new_buffer) return 83; /*alloc fail*/
; 2453 :   (*out) = new_buffer;
; 2454 :   (*outlength) = new_length;
; 2455 :   chunk_start = &(*out)[new_length - total_chunk_length];
; 2456 : 
; 2457 :   for(i = 0; i < total_chunk_length; i++) chunk_start[i] = chunk[i];
; 2458 : 
; 2459 :   return 0;
; 2460 : }
; 2461 : 
; 2462 : unsigned lodepng_chunk_create(unsigned char** out, size_t* outlength, unsigned length,
; 2463 :                               const char* type, const unsigned char* data)
; 2464 : {
; 2465 :   unsigned i;
; 2466 :   unsigned char *chunk, *new_buffer;
; 2467 :   size_t new_length = (*outlength) + length + 12;
; 2468 :   if(new_length < length + 12 || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2469 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2470 :   if(!new_buffer) return 83; /*alloc fail*/
; 2471 :   (*out) = new_buffer;
; 2472 :   (*outlength) = new_length;
; 2473 :   chunk = &(*out)[(*outlength) - length - 12];
; 2474 : 
; 2475 :   /*1: length*/
; 2476 :   lodepng_set32bitInt(chunk, (unsigned)length);
; 2477 : 
; 2478 :   /*2: chunk name (4 letters)*/
; 2479 :   chunk[4] = type[0];
; 2480 :   chunk[5] = type[1];
; 2481 :   chunk[6] = type[2];
; 2482 :   chunk[7] = type[3];
; 2483 : 
; 2484 :   /*3: the data*/
; 2485 :   for(i = 0; i < length; i++) chunk[8 + i] = data[i];
; 2486 : 
; 2487 :   /*4: CRC (of the chunkname characters and the data)*/
; 2488 :   lodepng_chunk_generate_crc(chunk);
; 2489 : 
; 2490 :   return 0;
; 2491 : }
; 2492 : 
; 2493 : /* ////////////////////////////////////////////////////////////////////////// */
; 2494 : /* / Color types and such                                                   / */
; 2495 : /* ////////////////////////////////////////////////////////////////////////// */
; 2496 : 
; 2497 : /*return type is a LodePNG error code*/
; 2498 : static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) /*bd = bitdepth*/
; 2499 : {
; 2500 :   switch(colortype)
; 2501 :   {
; 2502 :     case 0: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)) return 37; break; /*grey*/
; 2503 :     case 2: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGB*/
; 2504 :     case 3: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )) return 37; break; /*palette*/
; 2505 :     case 4: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*grey + alpha*/
; 2506 :     case 6: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGBA*/
; 2507 :     default: return 31;
; 2508 :   }
; 2509 :   return 0; /*allowed color type / bits combination*/
; 2510 : }
; 2511 : 
; 2512 : static unsigned getNumColorChannels(LodePNGColorType colortype)
; 2513 : {
; 2514 :   switch(colortype)
; 2515 :   {
; 2516 :     case 0: return 1; /*grey*/
; 2517 :     case 2: return 3; /*RGB*/
; 2518 :     case 3: return 1; /*palette*/
; 2519 :     case 4: return 2; /*grey + alpha*/
; 2520 :     case 6: return 4; /*RGBA*/
; 2521 :   }
; 2522 :   return 0; /*unexisting color type*/
; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;
; 2529 : }
; 2530 : 
; 2531 : /* ////////////////////////////////////////////////////////////////////////// */
; 2532 : 
; 2533 : void lodepng_color_mode_init(LodePNGColorMode* info)
; 2534 : {
; 2535 :   info->key_defined = 0;
; 2536 :   info->key_r = info->key_g = info->key_b = 0;
; 2537 :   info->colortype = LCT_RGBA;
; 2538 :   info->bitdepth = 8;
; 2539 :   info->palette = 0;
; 2540 :   info->palettesize = 0;
; 2541 : }
; 2542 : 
; 2543 : void lodepng_color_mode_cleanup(LodePNGColorMode* info)
; 2544 : {
; 2545 :   lodepng_palette_clear(info);
; 2546 : }
; 2547 : 
; 2548 : unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
; 2549 : {
; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;
; 2553 :   if(source->palette)
; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);
; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];
; 2558 :   }
; 2559 :   return 0;
; 2560 : }
; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);
; 2585 :   info->palette = 0;
; 2586 :   info->palettesize = 0;
; 2587 : }
; 2588 : 
; 2589 : unsigned lodepng_palette_add(LodePNGColorMode* info,
; 2590 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2591 : {
; 2592 :   unsigned char* data;
; 2593 :   /*the same resize technique as C++ std::vectors is used, and here it's made so that for a palette with
; 2594 :   the max of 256 colors, it'll have the exact alloc size*/
; 2595 :   if(!info->palette) /*allocate palette if empty*/
; 2596 :   {
; 2597 :     /*room for 256 colors with 4 bytes each*/
; 2598 :     data = (unsigned char*)lodepng_realloc(info->palette, 1024);
; 2599 :     if(!data) return 83; /*alloc fail*/
; 2600 :     else info->palette = data;
; 2601 :   }
; 2602 :   info->palette[4 * info->palettesize + 0] = r;
; 2603 :   info->palette[4 * info->palettesize + 1] = g;
; 2604 :   info->palette[4 * info->palettesize + 2] = b;
; 2605 :   info->palette[4 * info->palettesize + 3] = a;
; 2606 :   info->palettesize++;
; 2607 :   return 0;
; 2608 : }
; 2609 : 
; 2610 : unsigned lodepng_get_bpp(const LodePNGColorMode* info)
; 2611 : {
; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }
; 2615 : 
; 2616 : unsigned lodepng_get_channels(const LodePNGColorMode* info)
; 2617 : {
; 2618 :   return getNumColorChannels(info->colortype);
; 2619 : }
; 2620 : 
; 2621 : unsigned lodepng_is_greyscale_type(const LodePNGColorMode* info)
; 2622 : {
; 2623 :   return info->colortype == LCT_GREY || info->colortype == LCT_GREY_ALPHA;
; 2624 : }
; 2625 : 
; 2626 : unsigned lodepng_is_alpha_type(const LodePNGColorMode* info)
; 2627 : {
; 2628 :   return (info->colortype & 4) != 0; /*4 or 6*/
; 2629 : }
; 2630 : 
; 2631 : unsigned lodepng_is_palette_type(const LodePNGColorMode* info)
; 2632 : {
; 2633 :   return info->colortype == LCT_PALETTE;
; 2634 : }
; 2635 : 
; 2636 : unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info)
; 2637 : {
; 2638 :   size_t i;
; 2639 :   for(i = 0; i < info->palettesize; i++)
; 2640 :   {
; 2641 :     if(info->palette[i * 4 + 3] < 255) return 1;
; 2642 :   }
; 2643 :   return 0;
; 2644 : }
; 2645 : 
; 2646 : unsigned lodepng_can_have_alpha(const LodePNGColorMode* info)
; 2647 : {
; 2648 :   return info->key_defined
; 2649 :       || lodepng_is_alpha_type(info)
; 2650 :       || lodepng_has_palette_alpha(info);
; 2651 : }
; 2652 : 
; 2653 : size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode* color)
; 2654 : {
; 2655 :   return (w * h * lodepng_get_bpp(color) + 7) / 8;
; 2656 : }
; 2657 : 
; 2658 : size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)
; 2659 : {
; 2660 :   return (w * h * lodepng_get_bpp_lct(colortype, bitdepth) + 7) / 8;
; 2661 : }
; 2662 : 
; 2663 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2664 : 
; 2665 : static void LodePNGUnknownChunks_init(LodePNGInfo* info)
; 2666 : {
; 2667 :   unsigned i;
; 2668 :   for(i = 0; i < 3; i++) info->unknown_chunks_data[i] = 0;
; 2669 :   for(i = 0; i < 3; i++) info->unknown_chunks_size[i] = 0;
; 2670 : }
; 2671 : 
; 2672 : static void LodePNGUnknownChunks_cleanup(LodePNGInfo* info)
; 2673 : {
; 2674 :   unsigned i;
; 2675 :   for(i = 0; i < 3; i++) lodepng_free(info->unknown_chunks_data[i]);
; 2676 : }
; 2677 : 
; 2678 : static unsigned LodePNGUnknownChunks_copy(LodePNGInfo* dest, const LodePNGInfo* src)
; 2679 : {
; 2680 :   unsigned i;
; 2681 : 
; 2682 :   LodePNGUnknownChunks_cleanup(dest);
; 2683 : 
; 2684 :   for(i = 0; i < 3; i++)
; 2685 :   {
; 2686 :     size_t j;
; 2687 :     dest->unknown_chunks_size[i] = src->unknown_chunks_size[i];
; 2688 :     dest->unknown_chunks_data[i] = (unsigned char*)lodepng_malloc(src->unknown_chunks_size[i]);
; 2689 :     if(!dest->unknown_chunks_data[i] && dest->unknown_chunks_size[i]) return 83; /*alloc fail*/
; 2690 :     for(j = 0; j < src->unknown_chunks_size[i]; j++)
; 2691 :     {
; 2692 :       dest->unknown_chunks_data[i][j] = src->unknown_chunks_data[i][j];
; 2693 :     }
; 2694 :   }
; 2695 : 
; 2696 :   return 0;
; 2697 : }
; 2698 : 
; 2699 : /******************************************************************************/
; 2700 : 
; 2701 : static void LodePNGText_init(LodePNGInfo* info)
; 2702 : {
; 2703 :   info->text_num = 0;
; 2704 :   info->text_keys = NULL;
; 2705 :   info->text_strings = NULL;
; 2706 : }
; 2707 : 
; 2708 : static void LodePNGText_cleanup(LodePNGInfo* info)
; 2709 : {
; 2710 :   size_t i;
; 2711 :   for(i = 0; i < info->text_num; i++)
; 2712 :   {
; 2713 :     string_cleanup(&info->text_keys[i]);
; 2714 :     string_cleanup(&info->text_strings[i]);
; 2715 :   }
; 2716 :   lodepng_free(info->text_keys);
; 2717 :   lodepng_free(info->text_strings);
; 2718 : }
; 2719 : 
; 2720 : static unsigned LodePNGText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2721 : {
; 2722 :   size_t i = 0;
; 2723 :   dest->text_keys = 0;
; 2724 :   dest->text_strings = 0;
; 2725 :   dest->text_num = 0;
; 2726 :   for(i = 0; i < source->text_num; i++)
; 2727 :   {
; 2728 :     CERROR_TRY_RETURN(lodepng_add_text(dest, source->text_keys[i], source->text_strings[i]));
; 2729 :   }
; 2730 :   return 0;
; 2731 : }
; 2732 : 
; 2733 : void lodepng_clear_text(LodePNGInfo* info)
; 2734 : {
; 2735 :   LodePNGText_cleanup(info);
; 2736 : }
; 2737 : 
; 2738 : unsigned lodepng_add_text(LodePNGInfo* info, const char* key, const char* str)
; 2739 : {
; 2740 :   char** new_keys = (char**)(lodepng_realloc(info->text_keys, sizeof(char*) * (info->text_num + 1)));
; 2741 :   char** new_strings = (char**)(lodepng_realloc(info->text_strings, sizeof(char*) * (info->text_num + 1)));
; 2742 :   if(!new_keys || !new_strings)
; 2743 :   {
; 2744 :     lodepng_free(new_keys);
; 2745 :     lodepng_free(new_strings);
; 2746 :     return 83; /*alloc fail*/
; 2747 :   }
; 2748 : 
; 2749 :   info->text_num++;
; 2750 :   info->text_keys = new_keys;
; 2751 :   info->text_strings = new_strings;
; 2752 : 
; 2753 :   string_init(&info->text_keys[info->text_num - 1]);
; 2754 :   string_set(&info->text_keys[info->text_num - 1], key);
; 2755 : 
; 2756 :   string_init(&info->text_strings[info->text_num - 1]);
; 2757 :   string_set(&info->text_strings[info->text_num - 1], str);
; 2758 : 
; 2759 :   return 0;
; 2760 : }
; 2761 : 
; 2762 : /******************************************************************************/
; 2763 : 
; 2764 : static void LodePNGIText_init(LodePNGInfo* info)
; 2765 : {
; 2766 :   info->itext_num = 0;
; 2767 :   info->itext_keys = NULL;
; 2768 :   info->itext_langtags = NULL;
; 2769 :   info->itext_transkeys = NULL;
; 2770 :   info->itext_strings = NULL;
; 2771 : }
; 2772 : 
; 2773 : static void LodePNGIText_cleanup(LodePNGInfo* info)
; 2774 : {
; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)
; 2777 :   {
; 2778 :     string_cleanup(&info->itext_keys[i]);
; 2779 :     string_cleanup(&info->itext_langtags[i]);
; 2780 :     string_cleanup(&info->itext_transkeys[i]);
; 2781 :     string_cleanup(&info->itext_strings[i]);
; 2782 :   }
; 2783 :   lodepng_free(info->itext_keys);
; 2784 :   lodepng_free(info->itext_langtags);
; 2785 :   lodepng_free(info->itext_transkeys);
; 2786 :   lodepng_free(info->itext_strings);
; 2787 : }
; 2788 : 
; 2789 : static unsigned LodePNGIText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2790 : {
; 2791 :   size_t i = 0;
; 2792 :   dest->itext_keys = 0;
; 2793 :   dest->itext_langtags = 0;
; 2794 :   dest->itext_transkeys = 0;
; 2795 :   dest->itext_strings = 0;
; 2796 :   dest->itext_num = 0;
; 2797 :   for(i = 0; i < source->itext_num; i++)
; 2798 :   {
; 2799 :     CERROR_TRY_RETURN(lodepng_add_itext(dest, source->itext_keys[i], source->itext_langtags[i],
; 2800 :                                         source->itext_transkeys[i], source->itext_strings[i]));
; 2801 :   }
; 2802 :   return 0;
; 2803 : }
; 2804 : 
; 2805 : void lodepng_clear_itext(LodePNGInfo* info)
; 2806 : {
; 2807 :   LodePNGIText_cleanup(info);
; 2808 : }
; 2809 : 
; 2810 : unsigned lodepng_add_itext(LodePNGInfo* info, const char* key, const char* langtag,
; 2811 :                            const char* transkey, const char* str)
; 2812 : {
; 2813 :   char** new_keys = (char**)(lodepng_realloc(info->itext_keys, sizeof(char*) * (info->itext_num + 1)));
; 2814 :   char** new_langtags = (char**)(lodepng_realloc(info->itext_langtags, sizeof(char*) * (info->itext_num + 1)));
; 2815 :   char** new_transkeys = (char**)(lodepng_realloc(info->itext_transkeys, sizeof(char*) * (info->itext_num + 1)));
; 2816 :   char** new_strings = (char**)(lodepng_realloc(info->itext_strings, sizeof(char*) * (info->itext_num + 1)));
; 2817 :   if(!new_keys || !new_langtags || !new_transkeys || !new_strings)
; 2818 :   {
; 2819 :     lodepng_free(new_keys);
; 2820 :     lodepng_free(new_langtags);
; 2821 :     lodepng_free(new_transkeys);
; 2822 :     lodepng_free(new_strings);
; 2823 :     return 83; /*alloc fail*/
; 2824 :   }
; 2825 : 
; 2826 :   info->itext_num++;
; 2827 :   info->itext_keys = new_keys;
; 2828 :   info->itext_langtags = new_langtags;
; 2829 :   info->itext_transkeys = new_transkeys;
; 2830 :   info->itext_strings = new_strings;
; 2831 : 
; 2832 :   string_init(&info->itext_keys[info->itext_num - 1]);
; 2833 :   string_set(&info->itext_keys[info->itext_num - 1], key);
; 2834 : 
; 2835 :   string_init(&info->itext_langtags[info->itext_num - 1]);
; 2836 :   string_set(&info->itext_langtags[info->itext_num - 1], langtag);
; 2837 : 
; 2838 :   string_init(&info->itext_transkeys[info->itext_num - 1]);
; 2839 :   string_set(&info->itext_transkeys[info->itext_num - 1], transkey);
; 2840 : 
; 2841 :   string_init(&info->itext_strings[info->itext_num - 1]);
; 2842 :   string_set(&info->itext_strings[info->itext_num - 1], str);
; 2843 : 
; 2844 :   return 0;
; 2845 : }
; 2846 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2847 : 
; 2848 : void lodepng_info_init(LodePNGInfo* info)
; 2849 : {
; 2850 :   lodepng_color_mode_init(&info->color);
; 2851 :   info->interlace_method = 0;
; 2852 :   info->compression_method = 0;
; 2853 :   info->filter_method = 0;
; 2854 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2855 :   info->background_defined = 0;
; 2856 :   info->background_r = info->background_g = info->background_b = 0;
; 2857 : 
; 2858 :   LodePNGText_init(info);
; 2859 :   LodePNGIText_init(info);
; 2860 : 
; 2861 :   info->time_defined = 0;
; 2862 :   info->phys_defined = 0;
; 2863 : 
; 2864 :   LodePNGUnknownChunks_init(info);
; 2865 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2866 : }
; 2867 : 
; 2868 : void lodepng_info_cleanup(LodePNGInfo* info)
; 2869 : {
; 2870 :   lodepng_color_mode_cleanup(&info->color);
; 2871 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2872 :   LodePNGText_cleanup(info);
; 2873 :   LodePNGIText_cleanup(info);
; 2874 : 
; 2875 :   LodePNGUnknownChunks_cleanup(info);
; 2876 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2877 : }
; 2878 : 
; 2879 : unsigned lodepng_info_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2880 : {
; 2881 :   lodepng_info_cleanup(dest);
; 2882 :   *dest = *source;
; 2883 :   lodepng_color_mode_init(&dest->color);
; 2884 :   CERROR_TRY_RETURN(lodepng_color_mode_copy(&dest->color, &source->color));
; 2885 : 
; 2886 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2887 :   CERROR_TRY_RETURN(LodePNGText_copy(dest, source));
; 2888 :   CERROR_TRY_RETURN(LodePNGIText_copy(dest, source));
; 2889 : 
; 2890 :   LodePNGUnknownChunks_init(dest);
; 2891 :   CERROR_TRY_RETURN(LodePNGUnknownChunks_copy(dest, source));
; 2892 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2893 :   return 0;
; 2894 : }
; 2895 : 
; 2896 : void lodepng_info_swap(LodePNGInfo* a, LodePNGInfo* b)
; 2897 : {
; 2898 :   LodePNGInfo temp = *a;
; 2899 :   *a = *b;
; 2900 :   *b = temp;
; 2901 : }
; 2902 : 
; 2903 : /* ////////////////////////////////////////////////////////////////////////// */
; 2904 : 
; 2905 : /*index: bitgroup index, bits: bitgroup size(1, 2 or 4, in: bitgroup value, out: octet array to add bits to*/
; 2906 : static void addColorBits(unsigned char* out, size_t index, unsigned bits, unsigned in)
; 2907 : {
; 2908 :   /*p = the partial index in the byte, e.g. with 4 palettebits it is 0 for first half or 1 for second half*/
; 2909 :   unsigned p = index % (8 / bits);
; 2910 :   in &= (1 << bits) - 1; /*filter out any other bits of the input value*/
; 2911 :   in = in << (bits * (8 / bits - p - 1));
; 2912 :   if(p == 0) out[index * bits / 8] = in;
; 2913 :   else out[index * bits / 8] |= in;
; 2914 : }
; 2915 : 
; 2916 : typedef struct ColorTree ColorTree;
; 2917 : 
; 2918 : /*
; 2919 : One node of a color tree
; 2920 : This is the data structure used to count the number of unique colors and to get a palette
; 2921 : index for a color. It's like an octree, but because the alpha channel is used too, each
; 2922 : node has 16 instead of 8 children.
; 2923 : */
; 2924 : struct ColorTree
; 2925 : {
; 2926 :   ColorTree* children[16]; /*up to 16 pointers to ColorTree of next level*/
; 2927 :   int index; /*the payload. Only has a meaningful value if this is in the last level*/
; 2928 : };
; 2929 : 
; 2930 : static void color_tree_init(ColorTree* tree)
; 2931 : {
; 2932 :   int i;
; 2933 :   for(i = 0; i < 16; i++) tree->children[i] = 0;

  00070	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [ecx+eax], 0
  00077	83 c1 04	 add	 ecx, 4
  0007a	83 f9 40	 cmp	 ecx, 64			; 00000040H
  0007d	7c f1		 jl	 SHORT $LL11@color_tree

; 2934 :   tree->index = -1;

  0007f	c7 40 40 ff ff
	ff ff		 mov	 DWORD PTR [eax+64], -1
$LN12@color_tree:

; 2982 :       color_tree_init(tree->children[i]);
; 2983 :     }
; 2984 :     tree = tree->children[i];

  00086	8b 36		 mov	 esi, DWORD PTR [esi]
  00088	8b 45 f4	 mov	 eax, DWORD PTR tv342[ebp]
  0008b	43		 inc	 ebx
  0008c	83 fb 08	 cmp	 ebx, 8
  0008f	7c 94		 jl	 SHORT $LL4@color_tree

; 2985 :   }
; 2986 :   tree->index = index;

  00091	8b 45 14	 mov	 eax, DWORD PTR _index$[ebp]
  00094	5f		 pop	 edi
  00095	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx

; 2987 : }

  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
?color_tree_add@@YAXPAUColorTree@@EEEEH@Z ENDP		; color_tree_add
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?rgba8ToPixel@@YAIPAEIPBULodePNGColorMode@@PAUColorTree@@EEEE@Z
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_tree$ = 12						; size = 4
_r$ = 16						; size = 1
_g$ = 20						; size = 1
_b$ = 24						; size = 1
_a$ = 28						; size = 1
?rgba8ToPixel@@YAIPAEIPBULodePNGColorMode@@PAUColorTree@@EEEE@Z PROC ; rgba8ToPixel, COMDAT
; _out$ = ecx
; _i$ = edx

; 2993 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2994 :   if(mode->colortype == LCT_GREY)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _mode$[ebp]
  00007	56		 push	 esi
  00008	8b 03		 mov	 eax, DWORD PTR [ebx]
  0000a	57		 push	 edi
  0000b	8b f2		 mov	 esi, edx
  0000d	8b f9		 mov	 edi, ecx
  0000f	85 c0		 test	 eax, eax
  00011	75 5a		 jne	 SHORT $LN23@rgba8ToPix

; 2995 :   {
; 2996 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 2997 :     if(mode->bitdepth == 8) out[i] = grey;

  00013	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]
  00016	83 fb 08	 cmp	 ebx, 8
  00019	75 0d		 jne	 SHORT $LN22@rgba8ToPix
  0001b	8a 45 10	 mov	 al, BYTE PTR _r$[ebp]
$LN26@rgba8ToPix:
  0001e	88 04 37	 mov	 BYTE PTR [edi+esi], al
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/

  00023	33 c0		 xor	 eax, eax
  00025	5b		 pop	 ebx

; 3061 : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
$LN22@rgba8ToPix:

; 2998 :     else if(mode->bitdepth == 16) out[i * 2 + 0] = out[i * 2 + 1] = grey;

  00028	83 fb 10	 cmp	 ebx, 16			; 00000010H
  0002b	75 11		 jne	 SHORT $LN20@rgba8ToPix
  0002d	8a 45 10	 mov	 al, BYTE PTR _r$[ebp]
  00030	88 44 77 01	 mov	 BYTE PTR [edi+esi*2+1], al
  00034	88 04 77	 mov	 BYTE PTR [edi+esi*2], al
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi

; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/

  00039	33 c0		 xor	 eax, eax
  0003b	5b		 pop	 ebx

; 3061 : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
$LN20@rgba8ToPix:

; 2999 :     else
; 3000 :     {
; 3001 :       /*take the most significant bits of grey*/
; 3002 :       grey = (grey >> (8 - mode->bitdepth)) & ((1 << mode->bitdepth) - 1);
; 3003 :       addColorBits(out, i, mode->bitdepth, grey);

  0003e	0f b6 55 10	 movzx	 edx, BYTE PTR _r$[ebp]
  00042	b9 08 00 00 00	 mov	 ecx, 8
  00047	2a cb		 sub	 cl, bl
  00049	d3 ea		 shr	 edx, cl
  0004b	b0 01		 mov	 al, 1
  0004d	8b cb		 mov	 ecx, ebx
  0004f	d2 e0		 shl	 al, cl
  00051	8b cf		 mov	 ecx, edi
  00053	fe c8		 dec	 al
  00055	0f b6 c0	 movzx	 eax, al
  00058	23 d0		 and	 edx, eax
  0005a	52		 push	 edx
  0005b	53		 push	 ebx
  0005c	8b d6		 mov	 edx, esi
  0005e	e8 00 00 00 00	 call	 ?addColorBits@@YAXPAEIII@Z ; addColorBits
  00063	83 c4 08	 add	 esp, 8

; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/

  00066	33 c0		 xor	 eax, eax
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx

; 3061 : }

  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
$LN23@rgba8ToPix:

; 3004 :     }
; 3005 :   }
; 3006 :   else if(mode->colortype == LCT_RGB)

  0006d	83 f8 02	 cmp	 eax, 2
  00070	75 4b		 jne	 SHORT $LN17@rgba8ToPix

; 3007 :   {
; 3008 :     if(mode->bitdepth == 8)

  00072	83 7b 04 08	 cmp	 DWORD PTR [ebx+4], 8
  00076	75 1e		 jne	 SHORT $LN16@rgba8ToPix

; 3009 :     {
; 3010 :       out[i * 3 + 0] = r;

  00078	8a 45 10	 mov	 al, BYTE PTR _r$[ebp]
  0007b	8d 0c 77	 lea	 ecx, DWORD PTR [edi+esi*2]
  0007e	5f		 pop	 edi
  0007f	88 04 31	 mov	 BYTE PTR [ecx+esi], al

; 3011 :       out[i * 3 + 1] = g;

  00082	8a 45 14	 mov	 al, BYTE PTR _g$[ebp]
  00085	88 44 31 01	 mov	 BYTE PTR [ecx+esi+1], al

; 3012 :       out[i * 3 + 2] = b;

  00089	8a 45 18	 mov	 al, BYTE PTR _b$[ebp]
  0008c	88 44 31 02	 mov	 BYTE PTR [ecx+esi+2], al
  00090	5e		 pop	 esi

; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/

  00091	33 c0		 xor	 eax, eax
  00093	5b		 pop	 ebx

; 3061 : }

  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
$LN16@rgba8ToPix:

; 3013 :     }
; 3014 :     else
; 3015 :     {
; 3016 :       out[i * 6 + 0] = out[i * 6 + 1] = r;

  00096	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00099	8d 0c 47	 lea	 ecx, DWORD PTR [edi+eax*2]
  0009c	8a 45 10	 mov	 al, BYTE PTR _r$[ebp]
  0009f	88 41 01	 mov	 BYTE PTR [ecx+1], al
  000a2	88 01		 mov	 BYTE PTR [ecx], al

; 3017 :       out[i * 6 + 2] = out[i * 6 + 3] = g;

  000a4	8b 45 14	 mov	 eax, DWORD PTR _g$[ebp]
  000a7	88 41 03	 mov	 BYTE PTR [ecx+3], al
  000aa	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 3018 :       out[i * 6 + 4] = out[i * 6 + 5] = b;

  000ad	8b 45 18	 mov	 eax, DWORD PTR _b$[ebp]
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	88 41 05	 mov	 BYTE PTR [ecx+5], al
  000b5	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/

  000b8	33 c0		 xor	 eax, eax
  000ba	5b		 pop	 ebx

; 3061 : }

  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$LN17@rgba8ToPix:

; 3019 :     }
; 3020 :   }
; 3021 :   else if(mode->colortype == LCT_PALETTE)

  000bd	83 f8 03	 cmp	 eax, 3
  000c0	75 46		 jne	 SHORT $LN13@rgba8ToPix

; 3022 :   {
; 3023 :     int index = color_tree_get(tree, r, g, b, a);

  000c2	ff 75 1c	 push	 DWORD PTR _a$[ebp]
  000c5	8a 55 10	 mov	 dl, BYTE PTR _r$[ebp]
  000c8	ff 75 18	 push	 DWORD PTR _b$[ebp]
  000cb	8b 4d 0c	 mov	 ecx, DWORD PTR _tree$[ebp]
  000ce	ff 75 14	 push	 DWORD PTR _g$[ebp]
  000d1	e8 00 00 00 00	 call	 ?color_tree_get@@YAHPAUColorTree@@EEEE@Z ; color_tree_get
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3024 :     if(index < 0) return 82; /*color not in palette*/

  000d9	85 c0		 test	 eax, eax
  000db	79 0a		 jns	 SHORT $LN12@rgba8ToPix
  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	b8 52 00 00 00	 mov	 eax, 82			; 00000052H
  000e4	5b		 pop	 ebx

; 3061 : }

  000e5	5d		 pop	 ebp
  000e6	c3		 ret	 0
$LN12@rgba8ToPix:

; 3025 :     if(mode->bitdepth == 8) out[i] = index;

  000e7	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000ea	83 f9 08	 cmp	 ecx, 8
  000ed	0f 84 2b ff ff
	ff		 je	 $LN26@rgba8ToPix

; 3026 :     else addColorBits(out, i, mode->bitdepth, index);

  000f3	50		 push	 eax
  000f4	51		 push	 ecx
  000f5	8b d6		 mov	 edx, esi
  000f7	8b cf		 mov	 ecx, edi
  000f9	e8 00 00 00 00	 call	 ?addColorBits@@YAXPAEIII@Z ; addColorBits
  000fe	83 c4 08	 add	 esp, 8

; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/

  00101	33 c0		 xor	 eax, eax
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx

; 3061 : }

  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
$LN13@rgba8ToPix:

; 3027 :   }
; 3028 :   else if(mode->colortype == LCT_GREY_ALPHA)

  00108	83 f8 04	 cmp	 eax, 4
  0010b	75 3d		 jne	 SHORT $LN8@rgba8ToPix

; 3029 :   {
; 3030 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 3031 :     if(mode->bitdepth == 8)

  0010d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00110	83 f8 08	 cmp	 eax, 8
  00113	75 14		 jne	 SHORT $LN7@rgba8ToPix

; 3032 :     {
; 3033 :       out[i * 2 + 0] = grey;

  00115	8a 45 10	 mov	 al, BYTE PTR _r$[ebp]
  00118	88 04 77	 mov	 BYTE PTR [edi+esi*2], al

; 3034 :       out[i * 2 + 1] = a;

  0011b	8a 45 1c	 mov	 al, BYTE PTR _a$[ebp]
  0011e	88 44 77 01	 mov	 BYTE PTR [edi+esi*2+1], al
  00122	5f		 pop	 edi
  00123	5e		 pop	 esi

; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/

  00124	33 c0		 xor	 eax, eax
  00126	5b		 pop	 ebx

; 3061 : }

  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
$LN7@rgba8ToPix:

; 3035 :     }
; 3036 :     else if(mode->bitdepth == 16)

  00129	83 f8 10	 cmp	 eax, 16			; 00000010H
  0012c	75 71		 jne	 SHORT $LN1@rgba8ToPix

; 3037 :     {
; 3038 :       out[i * 4 + 0] = out[i * 4 + 1] = grey;

  0012e	8a 45 10	 mov	 al, BYTE PTR _r$[ebp]
  00131	88 44 b7 01	 mov	 BYTE PTR [edi+esi*4+1], al
  00135	88 04 b7	 mov	 BYTE PTR [edi+esi*4], al

; 3039 :       out[i * 4 + 2] = out[i * 4 + 3] = a;

  00138	8b 45 1c	 mov	 eax, DWORD PTR _a$[ebp]
  0013b	88 44 b7 03	 mov	 BYTE PTR [edi+esi*4+3], al
  0013f	88 44 b7 02	 mov	 BYTE PTR [edi+esi*4+2], al
  00143	5f		 pop	 edi
  00144	5e		 pop	 esi

; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/

  00145	33 c0		 xor	 eax, eax
  00147	5b		 pop	 ebx

; 3061 : }

  00148	5d		 pop	 ebp
  00149	c3		 ret	 0
$LN8@rgba8ToPix:

; 3040 :     }
; 3041 :   }
; 3042 :   else if(mode->colortype == LCT_RGBA)

  0014a	83 f8 06	 cmp	 eax, 6
  0014d	75 50		 jne	 SHORT $LN1@rgba8ToPix

; 3043 :   {
; 3044 :     if(mode->bitdepth == 8)

  0014f	83 7b 04 08	 cmp	 DWORD PTR [ebx+4], 8

; 3045 :     {
; 3046 :       out[i * 4 + 0] = r;

  00153	8a 45 10	 mov	 al, BYTE PTR _r$[ebp]
  00156	75 1f		 jne	 SHORT $LN2@rgba8ToPix
  00158	88 04 b7	 mov	 BYTE PTR [edi+esi*4], al

; 3047 :       out[i * 4 + 1] = g;

  0015b	8a 45 14	 mov	 al, BYTE PTR _g$[ebp]
  0015e	88 44 b7 01	 mov	 BYTE PTR [edi+esi*4+1], al

; 3048 :       out[i * 4 + 2] = b;

  00162	8a 45 18	 mov	 al, BYTE PTR _b$[ebp]
  00165	88 44 b7 02	 mov	 BYTE PTR [edi+esi*4+2], al

; 3049 :       out[i * 4 + 3] = a;

  00169	8a 45 1c	 mov	 al, BYTE PTR _a$[ebp]
  0016c	88 44 b7 03	 mov	 BYTE PTR [edi+esi*4+3], al
  00170	5f		 pop	 edi
  00171	5e		 pop	 esi

; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/

  00172	33 c0		 xor	 eax, eax
  00174	5b		 pop	 ebx

; 3061 : }

  00175	5d		 pop	 ebp
  00176	c3		 ret	 0
$LN2@rgba8ToPix:

; 3050 :     }
; 3051 :     else
; 3052 :     {
; 3053 :       out[i * 8 + 0] = out[i * 8 + 1] = r;

  00177	88 44 f7 01	 mov	 BYTE PTR [edi+esi*8+1], al
  0017b	88 04 f7	 mov	 BYTE PTR [edi+esi*8], al

; 3054 :       out[i * 8 + 2] = out[i * 8 + 3] = g;

  0017e	8b 45 14	 mov	 eax, DWORD PTR _g$[ebp]
  00181	88 44 f7 03	 mov	 BYTE PTR [edi+esi*8+3], al
  00185	88 44 f7 02	 mov	 BYTE PTR [edi+esi*8+2], al

; 3055 :       out[i * 8 + 4] = out[i * 8 + 5] = b;

  00189	8b 45 18	 mov	 eax, DWORD PTR _b$[ebp]
  0018c	88 44 f7 05	 mov	 BYTE PTR [edi+esi*8+5], al
  00190	88 44 f7 04	 mov	 BYTE PTR [edi+esi*8+4], al

; 3056 :       out[i * 8 + 6] = out[i * 8 + 7] = a;

  00194	8b 45 1c	 mov	 eax, DWORD PTR _a$[ebp]
  00197	88 44 f7 07	 mov	 BYTE PTR [edi+esi*8+7], al
  0019b	88 44 f7 06	 mov	 BYTE PTR [edi+esi*8+6], al
$LN1@rgba8ToPix:

; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/

  0019f	5f		 pop	 edi
  001a0	5e		 pop	 esi
  001a1	33 c0		 xor	 eax, eax
  001a3	5b		 pop	 ebx

; 3061 : }

  001a4	5d		 pop	 ebp
  001a5	c3		 ret	 0
?rgba8ToPixel@@YAIPAEIPBULodePNGColorMode@@PAUColorTree@@EEEE@Z ENDP ; rgba8ToPixel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?rgba16ToPixel@@YAIPAEIPBULodePNGColorMode@@GGGG@Z
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_r$ = 12						; size = 2
_g$ = 16						; size = 2
_b$ = 20						; size = 2
_a$ = 24						; size = 2
?rgba16ToPixel@@YAIPAEIPBULodePNGColorMode@@GGGG@Z PROC	; rgba16ToPixel, COMDAT
; _out$ = ecx
; _i$ = edx

; 3067 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3068 :   if(mode->bitdepth != 16) return 85; /*must be 16 for this function*/

  00003	8b 45 08	 mov	 eax, DWORD PTR _mode$[ebp]
  00006	56		 push	 esi
  00007	83 78 04 10	 cmp	 DWORD PTR [eax+4], 16	; 00000010H
  0000b	8b f1		 mov	 esi, ecx
  0000d	74 08		 je	 SHORT $LN8@rgba16ToPi
  0000f	b8 55 00 00 00	 mov	 eax, 85			; 00000055H
  00014	5e		 pop	 esi

; 3105 : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
$LN8@rgba16ToPi:

; 3069 :   if(mode->colortype == LCT_GREY)

  00017	8b 00		 mov	 eax, DWORD PTR [eax]
  00019	85 c0		 test	 eax, eax
  0001b	75 14		 jne	 SHORT $LN7@rgba16ToPi

; 3070 :   {
; 3071 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3072 :     out[i * 2 + 0] = (grey >> 8) & 255;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  00020	8b c1		 mov	 eax, ecx
  00022	c1 e8 08	 shr	 eax, 8
  00025	88 04 56	 mov	 BYTE PTR [esi+edx*2], al

; 3073 :     out[i * 2 + 1] = grey & 255;

  00028	88 4c 56 01	 mov	 BYTE PTR [esi+edx*2+1], cl

; 3102 :   }
; 3103 : 
; 3104 :   return 0; /*no error*/

  0002c	33 c0		 xor	 eax, eax
  0002e	5e		 pop	 esi

; 3105 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
$LN7@rgba16ToPi:

; 3074 :   }
; 3075 :   else if(mode->colortype == LCT_RGB)

  00031	83 f8 02	 cmp	 eax, 2
  00034	75 34		 jne	 SHORT $LN5@rgba16ToPi

; 3076 :   {
; 3077 :     out[i * 6 + 0] = (r >> 8) & 255;

  00036	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  00039	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  0003c	8d 14 46	 lea	 edx, DWORD PTR [esi+eax*2]
  0003f	8b c1		 mov	 eax, ecx
  00041	c1 e8 08	 shr	 eax, 8
  00044	88 02		 mov	 BYTE PTR [edx], al

; 3078 :     out[i * 6 + 1] = r & 255;

  00046	88 4a 01	 mov	 BYTE PTR [edx+1], cl

; 3079 :     out[i * 6 + 2] = (g >> 8) & 255;

  00049	8b 4d 10	 mov	 ecx, DWORD PTR _g$[ebp]
  0004c	8b c1		 mov	 eax, ecx
  0004e	c1 e8 08	 shr	 eax, 8
  00051	88 42 02	 mov	 BYTE PTR [edx+2], al

; 3080 :     out[i * 6 + 3] = g & 255;

  00054	88 4a 03	 mov	 BYTE PTR [edx+3], cl

; 3081 :     out[i * 6 + 4] = (b >> 8) & 255;

  00057	8b 4d 14	 mov	 ecx, DWORD PTR _b$[ebp]
  0005a	8b c1		 mov	 eax, ecx
  0005c	c1 e8 08	 shr	 eax, 8
  0005f	88 42 04	 mov	 BYTE PTR [edx+4], al

; 3082 :     out[i * 6 + 5] = b & 255;

  00062	88 4a 05	 mov	 BYTE PTR [edx+5], cl

; 3102 :   }
; 3103 : 
; 3104 :   return 0; /*no error*/

  00065	33 c0		 xor	 eax, eax
  00067	5e		 pop	 esi

; 3105 : }

  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
$LN5@rgba16ToPi:

; 3083 :   }
; 3084 :   else if(mode->colortype == LCT_GREY_ALPHA)

  0006a	83 f8 04	 cmp	 eax, 4
  0006d	75 24		 jne	 SHORT $LN3@rgba16ToPi

; 3085 :   {
; 3086 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3087 :     out[i * 4 + 0] = (grey >> 8) & 255;

  0006f	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  00072	8b c1		 mov	 eax, ecx
  00074	c1 e8 08	 shr	 eax, 8
  00077	88 04 96	 mov	 BYTE PTR [esi+edx*4], al

; 3088 :     out[i * 4 + 1] = grey & 255;

  0007a	88 4c 96 01	 mov	 BYTE PTR [esi+edx*4+1], cl

; 3089 :     out[i * 4 + 2] = (a >> 8) & 255;

  0007e	8b 4d 18	 mov	 ecx, DWORD PTR _a$[ebp]
  00081	8b c1		 mov	 eax, ecx
  00083	c1 e8 08	 shr	 eax, 8
  00086	88 44 96 02	 mov	 BYTE PTR [esi+edx*4+2], al

; 3090 :     out[i * 4 + 3] = a & 255;

  0008a	88 4c 96 03	 mov	 BYTE PTR [esi+edx*4+3], cl

; 3102 :   }
; 3103 : 
; 3104 :   return 0; /*no error*/

  0008e	33 c0		 xor	 eax, eax
  00090	5e		 pop	 esi

; 3105 : }

  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN3@rgba16ToPi:

; 3091 :   }
; 3092 :   else if(mode->colortype == LCT_RGBA)

  00093	83 f8 06	 cmp	 eax, 6
  00096	75 3f		 jne	 SHORT $LN1@rgba16ToPi

; 3093 :   {
; 3094 :     out[i * 8 + 0] = (r >> 8) & 255;

  00098	8b 4d 0c	 mov	 ecx, DWORD PTR _r$[ebp]
  0009b	8b c1		 mov	 eax, ecx
  0009d	c1 e8 08	 shr	 eax, 8
  000a0	88 04 d6	 mov	 BYTE PTR [esi+edx*8], al

; 3095 :     out[i * 8 + 1] = r & 255;

  000a3	88 4c d6 01	 mov	 BYTE PTR [esi+edx*8+1], cl

; 3096 :     out[i * 8 + 2] = (g >> 8) & 255;

  000a7	8b 4d 10	 mov	 ecx, DWORD PTR _g$[ebp]
  000aa	8b c1		 mov	 eax, ecx
  000ac	c1 e8 08	 shr	 eax, 8
  000af	88 44 d6 02	 mov	 BYTE PTR [esi+edx*8+2], al

; 3097 :     out[i * 8 + 3] = g & 255;

  000b3	88 4c d6 03	 mov	 BYTE PTR [esi+edx*8+3], cl

; 3098 :     out[i * 8 + 4] = (b >> 8) & 255;

  000b7	8b 4d 14	 mov	 ecx, DWORD PTR _b$[ebp]
  000ba	8b c1		 mov	 eax, ecx
  000bc	c1 e8 08	 shr	 eax, 8

; 3099 :     out[i * 8 + 5] = b & 255;

  000bf	88 4c d6 05	 mov	 BYTE PTR [esi+edx*8+5], cl

; 3100 :     out[i * 8 + 6] = (a >> 8) & 255;

  000c3	8b 4d 18	 mov	 ecx, DWORD PTR _a$[ebp]
  000c6	88 44 d6 04	 mov	 BYTE PTR [esi+edx*8+4], al
  000ca	8b c1		 mov	 eax, ecx
  000cc	c1 e8 08	 shr	 eax, 8
  000cf	88 44 d6 06	 mov	 BYTE PTR [esi+edx*8+6], al

; 3101 :     out[i * 8 + 7] = a & 255;

  000d3	88 4c d6 07	 mov	 BYTE PTR [esi+edx*8+7], cl
$LN1@rgba16ToPi:

; 3102 :   }
; 3103 : 
; 3104 :   return 0; /*no error*/

  000d7	33 c0		 xor	 eax, eax
  000d9	5e		 pop	 esi

; 3105 : }

  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
?rgba16ToPixel@@YAIPAEIPBULodePNGColorMode@@GGGG@Z ENDP	; rgba16ToPixel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?getPixelColorRGBA8@@YAIPAE000PBEIPBULodePNGColorMode@@I@Z
_TEXT	SEGMENT
_r$1$ = -4						; size = 4
_b$ = 8							; size = 4
_a$ = 12						; size = 4
_in$ = 16						; size = 4
_i$ = 20						; size = 4
_value$1$ = 24						; size = 4
_j$1 = 24						; size = 4
_j$2 = 24						; size = 4
_mode$ = 24						; size = 4
tv690 = 27						; size = 1
_fix_png$ = 28						; size = 4
?getPixelColorRGBA8@@YAIPAE000PBEIPBULodePNGColorMode@@I@Z PROC ; getPixelColorRGBA8, COMDAT
; _r$ = ecx
; _g$ = edx

; 3113 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 3114 :   if(mode->colortype == LCT_GREY)

  00007	8b 7d 18	 mov	 edi, DWORD PTR _mode$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	8b 07		 mov	 eax, DWORD PTR [edi]
  0000e	8b da		 mov	 ebx, edx
  00010	89 75 fc	 mov	 DWORD PTR _r$1$[ebp], esi
  00013	85 c0		 test	 eax, eax
  00015	0f 85 e7 00 00
	00		 jne	 $LN34@getPixelCo

; 3115 :   {
; 3116 :     if(mode->bitdepth == 8)

  0001b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001e	83 f9 08	 cmp	 ecx, 8
  00021	75 37		 jne	 SHORT $LN33@getPixelCo

; 3117 :     {
; 3118 :       *r = *g = *b = in[i];
; 3119 :       if(mode->key_defined && *r == mode->key_r) *a = 0;

  00023	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00027	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0002a	8b 4d 14	 mov	 ecx, DWORD PTR _i$[ebp]
  0002d	8a 0c 08	 mov	 cl, BYTE PTR [eax+ecx]
  00030	8b 45 08	 mov	 eax, DWORD PTR _b$[ebp]
  00033	88 0b		 mov	 BYTE PTR [ebx], cl
  00035	88 08		 mov	 BYTE PTR [eax], cl
  00037	88 0e		 mov	 BYTE PTR [esi], cl
  00039	0f 84 04 02 00
	00		 je	 $LN17@getPixelCo
  0003f	0f b6 c1	 movzx	 eax, cl
  00042	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00045	0f 85 f8 01 00
	00		 jne	 $LN17@getPixelCo
  0004b	8b 45 0c	 mov	 eax, DWORD PTR _a$[ebp]
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/

  00053	33 c0		 xor	 eax, eax
  00055	5b		 pop	 ebx

; 3214 : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
$LN33@getPixelCo:

; 3120 :       else *a = 255;
; 3121 :     }
; 3122 :     else if(mode->bitdepth == 16)

  0005a	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0005d	75 42		 jne	 SHORT $LN29@getPixelCo

; 3123 :     {
; 3124 :       *r = *g = *b = in[i * 2 + 0];
; 3125 :       if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;

  0005f	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00063	8b 4d 14	 mov	 ecx, DWORD PTR _i$[ebp]
  00066	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  00069	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0006c	8b 45 08	 mov	 eax, DWORD PTR _b$[ebp]
  0006f	8a 0a		 mov	 cl, BYTE PTR [edx]
  00071	88 08		 mov	 BYTE PTR [eax], cl
  00073	88 0b		 mov	 BYTE PTR [ebx], cl
  00075	88 0e		 mov	 BYTE PTR [esi], cl
  00077	0f 84 c6 01 00
	00		 je	 $LN17@getPixelCo
  0007d	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  00081	0f b6 c9	 movzx	 ecx, cl
  00084	c1 e1 08	 shl	 ecx, 8
  00087	03 c8		 add	 ecx, eax
  00089	3b 4f 14	 cmp	 ecx, DWORD PTR [edi+20]
  0008c	0f 85 b1 01 00
	00		 jne	 $LN17@getPixelCo
  00092	8b 45 0c	 mov	 eax, DWORD PTR _a$[ebp]
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/

  0009a	33 c0		 xor	 eax, eax
  0009c	5b		 pop	 ebx

; 3214 : }

  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
$LN29@getPixelCo:

; 3126 :       else *a = 255;
; 3127 :     }
; 3128 :     else
; 3129 :     {
; 3130 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
; 3131 :       size_t j = i * mode->bitdepth;
; 3132 :       unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);

  000a1	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  000a4	8b c1		 mov	 eax, ecx
  000a6	0f af 45 14	 imul	 eax, DWORD PTR _i$[ebp]
  000aa	51		 push	 ecx
  000ab	8d 4d 18	 lea	 ecx, DWORD PTR _j$2[ebp]
  000ae	89 45 18	 mov	 DWORD PTR _j$2[ebp], eax
  000b1	e8 00 00 00 00	 call	 ?readBitsFromReversedStream@@YAIPAIPBEI@Z ; readBitsFromReversedStream
  000b6	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000b9	89 45 18	 mov	 DWORD PTR _value$1$[ebp], eax

; 3133 :       *r = *g = *b = (value * 255) / highest;

  000bc	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  000c2	be 01 00 00 00	 mov	 esi, 1
  000c7	d3 e6		 shl	 esi, cl
  000c9	33 d2		 xor	 edx, edx
  000cb	8b 4d 08	 mov	 ecx, DWORD PTR _b$[ebp]
  000ce	83 c4 04	 add	 esp, 4
  000d1	4e		 dec	 esi
  000d2	f7 f6		 div	 esi

; 3134 :       if(mode->key_defined && value == mode->key_r) *a = 0;

  000d4	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  000d8	88 01		 mov	 BYTE PTR [ecx], al
  000da	8b 4d fc	 mov	 ecx, DWORD PTR _r$1$[ebp]
  000dd	88 03		 mov	 BYTE PTR [ebx], al
  000df	88 01		 mov	 BYTE PTR [ecx], al
  000e1	0f 84 5c 01 00
	00		 je	 $LN17@getPixelCo
  000e7	8b 45 18	 mov	 eax, DWORD PTR _value$1$[ebp]
  000ea	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  000ed	0f 85 50 01 00
	00		 jne	 $LN17@getPixelCo
  000f3	8b 45 0c	 mov	 eax, DWORD PTR _a$[ebp]
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/

  000fb	33 c0		 xor	 eax, eax
  000fd	5b		 pop	 ebx

; 3214 : }

  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c3		 ret	 0
$LN34@getPixelCo:

; 3135 :       else *a = 255;
; 3136 :     }
; 3137 :   }
; 3138 :   else if(mode->colortype == LCT_RGB)

  00102	83 f8 02	 cmp	 eax, 2
  00105	0f 85 d5 00 00
	00		 jne	 $LN22@getPixelCo

; 3139 :   {
; 3140 :     if(mode->bitdepth == 8)

  0010b	83 7f 04 08	 cmp	 DWORD PTR [edi+4], 8
  0010f	75 5a		 jne	 SHORT $LN21@getPixelCo

; 3141 :     {
; 3142 :       *r = in[i * 3 + 0]; *g = in[i * 3 + 1]; *b = in[i * 3 + 2];
; 3143 :       if(mode->key_defined && *r == mode->key_r && *g == mode->key_g && *b == mode->key_b) *a = 0;

  00111	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00115	8b 4d 14	 mov	 ecx, DWORD PTR _i$[ebp]
  00118	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0011b	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  0011e	8a 34 01	 mov	 dh, BYTE PTR [ecx+eax]
  00121	8a 54 01 01	 mov	 dl, BYTE PTR [ecx+eax+1]
  00125	8a 4c 01 02	 mov	 cl, BYTE PTR [ecx+eax+2]
  00129	8b 45 08	 mov	 eax, DWORD PTR _b$[ebp]
  0012c	88 36		 mov	 BYTE PTR [esi], dh
  0012e	88 13		 mov	 BYTE PTR [ebx], dl
  00130	88 08		 mov	 BYTE PTR [eax], cl
  00132	0f 84 0b 01 00
	00		 je	 $LN17@getPixelCo
  00138	0f b6 c6	 movzx	 eax, dh
  0013b	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  0013e	0f 85 ff 00 00
	00		 jne	 $LN17@getPixelCo
  00144	0f b6 c2	 movzx	 eax, dl
  00147	3b 47 18	 cmp	 eax, DWORD PTR [edi+24]
  0014a	0f 85 f3 00 00
	00		 jne	 $LN17@getPixelCo
  00150	0f b6 c1	 movzx	 eax, cl
  00153	3b 47 1c	 cmp	 eax, DWORD PTR [edi+28]
  00156	0f 85 e7 00 00
	00		 jne	 $LN17@getPixelCo
  0015c	8b 45 0c	 mov	 eax, DWORD PTR _a$[ebp]
  0015f	5f		 pop	 edi
  00160	5e		 pop	 esi
  00161	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/

  00164	33 c0		 xor	 eax, eax
  00166	5b		 pop	 ebx

; 3214 : }

  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN21@getPixelCo:

; 3144 :       else *a = 255;
; 3145 :     }
; 3146 :     else
; 3147 :     {
; 3148 :       *r = in[i * 6 + 0];
; 3149 :       *g = in[i * 6 + 2];
; 3150 :       *b = in[i * 6 + 4];
; 3151 :       if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3152 :          && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3153 :          && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;

  0016b	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0016f	8b 45 14	 mov	 eax, DWORD PTR _i$[ebp]
  00172	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00175	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  00178	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0017b	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  0017e	8a 0a		 mov	 cl, BYTE PTR [edx]
  00180	88 03		 mov	 BYTE PTR [ebx], al
  00182	8a 5a 04	 mov	 bl, BYTE PTR [edx+4]
  00185	88 45 1b	 mov	 BYTE PTR tv690[ebp], al
  00188	8b 45 08	 mov	 eax, DWORD PTR _b$[ebp]
  0018b	88 0e		 mov	 BYTE PTR [esi], cl
  0018d	88 18		 mov	 BYTE PTR [eax], bl
  0018f	0f 84 ae 00 00
	00		 je	 $LN17@getPixelCo
  00195	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  00199	0f b6 c9	 movzx	 ecx, cl
  0019c	c1 e1 08	 shl	 ecx, 8
  0019f	03 c8		 add	 ecx, eax
  001a1	3b 4f 14	 cmp	 ecx, DWORD PTR [edi+20]
  001a4	0f 85 99 00 00
	00		 jne	 $LN17@getPixelCo
  001aa	0f b6 4d 1b	 movzx	 ecx, BYTE PTR tv690[ebp]
  001ae	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  001b2	c1 e1 08	 shl	 ecx, 8
  001b5	03 c8		 add	 ecx, eax
  001b7	3b 4f 18	 cmp	 ecx, DWORD PTR [edi+24]
  001ba	0f 85 83 00 00
	00		 jne	 $LN17@getPixelCo
  001c0	0f b6 42 05	 movzx	 eax, BYTE PTR [edx+5]
  001c4	0f b6 cb	 movzx	 ecx, bl
  001c7	c1 e1 08	 shl	 ecx, 8
  001ca	03 c8		 add	 ecx, eax
  001cc	3b 4f 1c	 cmp	 ecx, DWORD PTR [edi+28]
  001cf	75 72		 jne	 SHORT $LN17@getPixelCo
  001d1	8b 45 0c	 mov	 eax, DWORD PTR _a$[ebp]
  001d4	5f		 pop	 edi
  001d5	5e		 pop	 esi
  001d6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/

  001d9	33 c0		 xor	 eax, eax
  001db	5b		 pop	 ebx

; 3214 : }

  001dc	8b e5		 mov	 esp, ebp
  001de	5d		 pop	 ebp
  001df	c3		 ret	 0
$LN22@getPixelCo:

; 3154 :       else *a = 255;
; 3155 :     }
; 3156 :   }
; 3157 :   else if(mode->colortype == LCT_PALETTE)

  001e0	83 f8 03	 cmp	 eax, 3
  001e3	0f 85 95 00 00
	00		 jne	 $LN14@getPixelCo

; 3158 :   {
; 3159 :     unsigned index;
; 3160 :     if(mode->bitdepth == 8) index = in[i];

  001e9	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  001ec	83 fa 08	 cmp	 edx, 8
  001ef	75 0c		 jne	 SHORT $LN13@getPixelCo
  001f1	8b 4d 14	 mov	 ecx, DWORD PTR _i$[ebp]
  001f4	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  001f7	0f b6 0c 08	 movzx	 ecx, BYTE PTR [eax+ecx]

; 3161 :     else

  001fb	eb 1d		 jmp	 SHORT $LN12@getPixelCo
$LN13@getPixelCo:

; 3162 :     {
; 3163 :       size_t j = i * mode->bitdepth;

  001fd	8b c2		 mov	 eax, edx
  001ff	0f af 45 14	 imul	 eax, DWORD PTR _i$[ebp]

; 3164 :       index = readBitsFromReversedStream(&j, in, mode->bitdepth);

  00203	52		 push	 edx
  00204	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00207	8d 4d 18	 lea	 ecx, DWORD PTR _j$1[ebp]
  0020a	89 45 18	 mov	 DWORD PTR _j$1[ebp], eax
  0020d	e8 00 00 00 00	 call	 ?readBitsFromReversedStream@@YAIPAIPBEI@Z ; readBitsFromReversedStream
  00212	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00215	83 c4 04	 add	 esp, 4
  00218	8b c8		 mov	 ecx, eax
$LN12@getPixelCo:

; 3165 :     }
; 3166 : 
; 3167 :     if(index >= mode->palettesize)

  0021a	3b 4f 0c	 cmp	 ecx, DWORD PTR [edi+12]
  0021d	72 33		 jb	 SHORT $LN11@getPixelCo

; 3168 :     {
; 3169 :       /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3170 :       if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/

  0021f	83 7d 1c 00	 cmp	 DWORD PTR _fix_png$[ebp], 0
  00223	75 12		 jne	 SHORT $LN10@getPixelCo
  00225	33 c0		 xor	 eax, eax
  00227	83 fa 08	 cmp	 edx, 8
  0022a	0f 95 c0	 setne	 al
  0022d	5f		 pop	 edi
  0022e	5e		 pop	 esi
  0022f	5b		 pop	 ebx
  00230	83 c0 2e	 add	 eax, 46			; 0000002eH

; 3214 : }

  00233	8b e5		 mov	 esp, ebp
  00235	5d		 pop	 ebp
  00236	c3		 ret	 0
$LN10@getPixelCo:

; 3171 :       *r = *g = *b = 0;

  00237	8b 45 08	 mov	 eax, DWORD PTR _b$[ebp]
  0023a	c6 03 00	 mov	 BYTE PTR [ebx], 0
  0023d	c6 00 00	 mov	 BYTE PTR [eax], 0
  00240	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN17@getPixelCo:

; 3172 :       *a = 255;

  00243	8b 45 0c	 mov	 eax, DWORD PTR _a$[ebp]
  00246	5f		 pop	 edi
  00247	5e		 pop	 esi
  00248	c6 00 ff	 mov	 BYTE PTR [eax], 255	; 000000ffH

; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/

  0024b	33 c0		 xor	 eax, eax
  0024d	5b		 pop	 ebx

; 3214 : }

  0024e	8b e5		 mov	 esp, ebp
  00250	5d		 pop	 ebp
  00251	c3		 ret	 0
$LN11@getPixelCo:

; 3173 :     }
; 3174 :     else
; 3175 :     {
; 3176 :       *r = mode->palette[index * 4 + 0];

  00252	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
$LN38@getPixelCo:
  00255	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00258	5f		 pop	 edi
  00259	0f b6 02	 movzx	 eax, BYTE PTR [edx]

; 3177 :       *g = mode->palette[index * 4 + 1];
; 3178 :       *b = mode->palette[index * 4 + 2];

  0025c	0f b6 4a 02	 movzx	 ecx, BYTE PTR [edx+2]
  00260	88 06		 mov	 BYTE PTR [esi], al
  00262	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  00266	88 03		 mov	 BYTE PTR [ebx], al
  00268	8b 45 08	 mov	 eax, DWORD PTR _b$[ebp]
  0026b	5e		 pop	 esi
  0026c	88 08		 mov	 BYTE PTR [eax], cl

; 3179 :       *a = mode->palette[index * 4 + 3];

  0026e	0f b6 4a 03	 movzx	 ecx, BYTE PTR [edx+3]

; 3209 :       *a = in[i * 8 + 6];

  00272	8b 45 0c	 mov	 eax, DWORD PTR _a$[ebp]
  00275	5b		 pop	 ebx
  00276	88 08		 mov	 BYTE PTR [eax], cl

; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/

  00278	33 c0		 xor	 eax, eax

; 3214 : }

  0027a	8b e5		 mov	 esp, ebp
  0027c	5d		 pop	 ebp
  0027d	c3		 ret	 0
$LN14@getPixelCo:

; 3180 :     }
; 3181 :   }
; 3182 :   else if(mode->colortype == LCT_GREY_ALPHA)

  0027e	83 f8 04	 cmp	 eax, 4
  00281	75 4c		 jne	 SHORT $LN7@getPixelCo

; 3183 :   {
; 3184 :     if(mode->bitdepth == 8)

  00283	83 7f 04 08	 cmp	 DWORD PTR [edi+4], 8

; 3185 :     {
; 3186 :       *r = *g = *b = in[i * 2 + 0];

  00287	8b 4d 14	 mov	 ecx, DWORD PTR _i$[ebp]
  0028a	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0028d	75 20		 jne	 SHORT $LN6@getPixelCo
  0028f	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  00292	8b 45 08	 mov	 eax, DWORD PTR _b$[ebp]
  00295	8a 0a		 mov	 cl, BYTE PTR [edx]
  00297	88 08		 mov	 BYTE PTR [eax], cl

; 3209 :       *a = in[i * 8 + 6];

  00299	8b 45 0c	 mov	 eax, DWORD PTR _a$[ebp]
  0029c	88 0b		 mov	 BYTE PTR [ebx], cl
  0029e	88 0e		 mov	 BYTE PTR [esi], cl
  002a0	0f b6 4a 01	 movzx	 ecx, BYTE PTR [edx+1]
  002a4	5f		 pop	 edi
  002a5	5e		 pop	 esi
  002a6	88 08		 mov	 BYTE PTR [eax], cl

; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/

  002a8	33 c0		 xor	 eax, eax
  002aa	5b		 pop	 ebx

; 3214 : }

  002ab	8b e5		 mov	 esp, ebp
  002ad	5d		 pop	 ebp
  002ae	c3		 ret	 0
$LN6@getPixelCo:

; 3187 :       *a = in[i * 2 + 1];
; 3188 :     }
; 3189 :     else
; 3190 :     {
; 3191 :       *r = *g = *b = in[i * 4 + 0];

  002af	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  002b2	8b 45 08	 mov	 eax, DWORD PTR _b$[ebp]
  002b5	8a 0a		 mov	 cl, BYTE PTR [edx]
  002b7	88 08		 mov	 BYTE PTR [eax], cl

; 3209 :       *a = in[i * 8 + 6];

  002b9	8b 45 0c	 mov	 eax, DWORD PTR _a$[ebp]
  002bc	88 0b		 mov	 BYTE PTR [ebx], cl
  002be	88 0e		 mov	 BYTE PTR [esi], cl
  002c0	0f b6 4a 02	 movzx	 ecx, BYTE PTR [edx+2]
  002c4	5f		 pop	 edi
  002c5	5e		 pop	 esi
  002c6	88 08		 mov	 BYTE PTR [eax], cl

; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/

  002c8	33 c0		 xor	 eax, eax
  002ca	5b		 pop	 ebx

; 3214 : }

  002cb	8b e5		 mov	 esp, ebp
  002cd	5d		 pop	 ebp
  002ce	c3		 ret	 0
$LN7@getPixelCo:

; 3192 :       *a = in[i * 4 + 2];
; 3193 :     }
; 3194 :   }
; 3195 :   else if(mode->colortype == LCT_RGBA)

  002cf	83 f8 06	 cmp	 eax, 6
  002d2	75 30		 jne	 SHORT $LN1@getPixelCo

; 3196 :   {
; 3197 :     if(mode->bitdepth == 8)

  002d4	83 7f 04 08	 cmp	 DWORD PTR [edi+4], 8

; 3198 :     {
; 3199 :       *r = in[i * 4 + 0];

  002d8	8b 4d 14	 mov	 ecx, DWORD PTR _i$[ebp]
  002db	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  002de	0f 84 71 ff ff
	ff		 je	 $LN38@getPixelCo

; 3200 :       *g = in[i * 4 + 1];
; 3201 :       *b = in[i * 4 + 2];
; 3202 :       *a = in[i * 4 + 3];
; 3203 :     }
; 3204 :     else
; 3205 :     {
; 3206 :       *r = in[i * 8 + 0];

  002e4	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
  002e7	0f b6 02	 movzx	 eax, BYTE PTR [edx]

; 3207 :       *g = in[i * 8 + 2];
; 3208 :       *b = in[i * 8 + 4];

  002ea	0f b6 4a 04	 movzx	 ecx, BYTE PTR [edx+4]
  002ee	88 06		 mov	 BYTE PTR [esi], al
  002f0	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  002f4	88 03		 mov	 BYTE PTR [ebx], al
  002f6	8b 45 08	 mov	 eax, DWORD PTR _b$[ebp]
  002f9	88 08		 mov	 BYTE PTR [eax], cl

; 3209 :       *a = in[i * 8 + 6];

  002fb	0f b6 4a 06	 movzx	 ecx, BYTE PTR [edx+6]
  002ff	8b 45 0c	 mov	 eax, DWORD PTR _a$[ebp]
  00302	88 08		 mov	 BYTE PTR [eax], cl
$LN1@getPixelCo:

; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/

  00304	5f		 pop	 edi
  00305	5e		 pop	 esi
  00306	33 c0		 xor	 eax, eax
  00308	5b		 pop	 ebx

; 3214 : }

  00309	8b e5		 mov	 esp, ebp
  0030b	5d		 pop	 ebp
  0030c	c3		 ret	 0
?getPixelColorRGBA8@@YAIPAE000PBEIPBULodePNGColorMode@@I@Z ENDP ; getPixelColorRGBA8
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?getPixelColorsRGBA8@@YAIPAEIIPBEPBULodePNGColorMode@@I@Z
_TEXT	SEGMENT
_j$1 = -20						; size = 4
tv2390 = -16						; size = 4
tv2369 = -16						; size = 4
_highest$1$ = -16					; size = 4
_index$1$ = -12						; size = 4
tv2384 = -12						; size = 4
_buffer$1$ = -12					; size = 4
_value$1$ = -8						; size = 4
_i$3$ = -8						; size = 4
_num_channels$1$ = -4					; size = 4
_i$1$ = 8						; size = 4
_has_alpha$ = 8						; size = 4
tv2386 = 11						; size = 1
_in$ = 12						; size = 4
tv2394 = 16						; size = 4
tv2377 = 16						; size = 4
tv2374 = 16						; size = 4
_i$2$ = 16						; size = 4
_j$2 = 16						; size = 4
_mode$ = 16						; size = 4
_fix_png$ = 20						; size = 4
?getPixelColorsRGBA8@@YAIPAEIIPBEPBULodePNGColorMode@@I@Z PROC ; getPixelColorsRGBA8, COMDAT
; _buffer$ = ecx
; _numpixels$ = edx

; 3225 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 3226 :   unsigned num_channels = has_alpha ? 4 : 3;
; 3227 :   size_t i;
; 3228 :   if(mode->colortype == LCT_GREY)

  00008	8b 75 10	 mov	 esi, DWORD PTR _mode$[ebp]
  0000b	57		 push	 edi
  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	33 db		 xor	 ebx, ebx
  00010	8b fa		 mov	 edi, edx
  00012	8b 55 08	 mov	 edx, DWORD PTR _has_alpha$[ebp]
  00015	85 d2		 test	 edx, edx
  00017	0f 95 c3	 setne	 bl
  0001a	89 4d f4	 mov	 DWORD PTR _buffer$1$[ebp], ecx
  0001d	83 c3 03	 add	 ebx, 3
  00020	89 5d fc	 mov	 DWORD PTR _num_channels$1$[ebp], ebx
  00023	85 c0		 test	 eax, eax
  00025	0f 85 50 01 00
	00		 jne	 $LN65@getPixelCo

; 3229 :   {
; 3230 :     if(mode->bitdepth == 8)

  0002b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002e	83 f8 08	 cmp	 eax, 8
  00031	75 58		 jne	 SHORT $LN64@getPixelCo

; 3231 :     {
; 3232 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  00033	33 c0		 xor	 eax, eax
  00035	89 45 08	 mov	 DWORD PTR _i$1$[ebp], eax
  00038	85 ff		 test	 edi, edi
  0003a	0f 84 47 04 00
	00		 je	 $LN2@getPixelCo
  00040	41		 inc	 ecx
$LL63@getPixelCo:
  00041	03 45 0c	 add	 eax, DWORD PTR _in$[ebp]

; 3233 :       {
; 3234 :         buffer[0] = buffer[1] = buffer[2] = in[i];
; 3235 :         if(has_alpha) buffer[3] = mode->key_defined && in[i] == mode->key_r ? 0 : 255;

  00044	8b 5d fc	 mov	 ebx, DWORD PTR _num_channels$1$[ebp]
  00047	89 45 10	 mov	 DWORD PTR tv2394[ebp], eax
  0004a	8a 00		 mov	 al, BYTE PTR [eax]
  0004c	88 41 01	 mov	 BYTE PTR [ecx+1], al
  0004f	88 01		 mov	 BYTE PTR [ecx], al
  00051	88 41 ff	 mov	 BYTE PTR [ecx-1], al
  00054	85 d2		 test	 edx, edx
  00056	74 1d		 je	 SHORT $LN62@getPixelCo
  00058	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0005c	74 0f		 je	 SHORT $LN68@getPixelCo
  0005e	8b 45 10	 mov	 eax, DWORD PTR tv2394[ebp]
  00061	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00064	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  00067	75 04		 jne	 SHORT $LN68@getPixelCo
  00069	33 c0		 xor	 eax, eax
  0006b	eb 05		 jmp	 SHORT $LN69@getPixelCo
$LN68@getPixelCo:
  0006d	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
$LN69@getPixelCo:
  00072	88 41 02	 mov	 BYTE PTR [ecx+2], al
$LN62@getPixelCo:

; 3231 :     {
; 3232 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  00075	8b 45 08	 mov	 eax, DWORD PTR _i$1$[ebp]
  00078	40		 inc	 eax
  00079	03 cb		 add	 ecx, ebx
  0007b	89 45 08	 mov	 DWORD PTR _i$1$[ebp], eax
  0007e	3b c7		 cmp	 eax, edi
  00080	72 bf		 jb	 SHORT $LL63@getPixelCo

; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	33 c0		 xor	 eax, eax
  00086	5b		 pop	 ebx

; 3354 : }

  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
$LN64@getPixelCo:

; 3236 :       }
; 3237 :     }
; 3238 :     else if(mode->bitdepth == 16)

  0008b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008e	75 6b		 jne	 SHORT $LN58@getPixelCo

; 3239 :     {
; 3240 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  00090	33 c0		 xor	 eax, eax
  00092	89 45 10	 mov	 DWORD PTR _i$2$[ebp], eax
  00095	85 ff		 test	 edi, edi
  00097	0f 84 ea 03 00
	00		 je	 $LN2@getPixelCo
  0009d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL57@getPixelCo:
  000a0	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  000a3	8b 45 0c	 mov	 eax, DWORD PTR _in$[ebp]
  000a6	03 c1		 add	 eax, ecx

; 3241 :       {
; 3242 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2];
; 3243 :         if(has_alpha) buffer[3] = mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r ? 0 : 255;

  000a8	83 7d 08 00	 cmp	 DWORD PTR _has_alpha$[ebp], 0
  000ac	89 45 f0	 mov	 DWORD PTR tv2390[ebp], eax
  000af	8a 00		 mov	 al, BYTE PTR [eax]
  000b1	88 42 01	 mov	 BYTE PTR [edx+1], al
  000b4	88 02		 mov	 BYTE PTR [edx], al
  000b6	88 42 ff	 mov	 BYTE PTR [edx-1], al
  000b9	74 2a		 je	 SHORT $LN56@getPixelCo
  000bb	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  000bf	74 1c		 je	 SHORT $LN70@getPixelCo
  000c1	8b 45 0c	 mov	 eax, DWORD PTR _in$[ebp]
  000c4	0f b6 4c 01 01	 movzx	 ecx, BYTE PTR [ecx+eax+1]
  000c9	8b 45 f0	 mov	 eax, DWORD PTR tv2390[ebp]
  000cc	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  000cf	c1 e0 08	 shl	 eax, 8
  000d2	03 c8		 add	 ecx, eax
  000d4	3b 4e 14	 cmp	 ecx, DWORD PTR [esi+20]
  000d7	75 04		 jne	 SHORT $LN70@getPixelCo
  000d9	33 c0		 xor	 eax, eax
  000db	eb 05		 jmp	 SHORT $LN71@getPixelCo
$LN70@getPixelCo:
  000dd	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
$LN71@getPixelCo:
  000e2	88 42 02	 mov	 BYTE PTR [edx+2], al
$LN56@getPixelCo:

; 3239 :     {
; 3240 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  000e5	8b 45 10	 mov	 eax, DWORD PTR _i$2$[ebp]
  000e8	40		 inc	 eax
  000e9	03 d3		 add	 edx, ebx
  000eb	89 45 10	 mov	 DWORD PTR _i$2$[ebp], eax
  000ee	3b c7		 cmp	 eax, edi
  000f0	72 ae		 jb	 SHORT $LL57@getPixelCo

; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/

  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	33 c0		 xor	 eax, eax
  000f6	5b		 pop	 ebx

; 3354 : }

  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c3		 ret	 0
$LN58@getPixelCo:

; 3244 :       }
; 3245 :     }
; 3246 :     else
; 3247 :     {
; 3248 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/

  000fb	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000fe	b8 01 00 00 00	 mov	 eax, 1
  00103	d3 e0		 shl	 eax, cl

; 3249 :       size_t j = 0;

  00105	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _j$2[ebp], 0
  0010c	48		 dec	 eax
  0010d	89 45 f0	 mov	 DWORD PTR _highest$1$[ebp], eax

; 3250 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  00110	85 ff		 test	 edi, edi
  00112	0f 84 6f 03 00
	00		 je	 $LN2@getPixelCo
  00118	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL52@getPixelCo:

; 3251 :       {
; 3252 :         unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);

  00120	ff 76 04	 push	 DWORD PTR [esi+4]
  00123	8b 55 0c	 mov	 edx, DWORD PTR _in$[ebp]
  00126	8d 4d 10	 lea	 ecx, DWORD PTR _j$2[ebp]
  00129	e8 00 00 00 00	 call	 ?readBitsFromReversedStream@@YAIPAIPBEI@Z ; readBitsFromReversedStream
  0012e	89 45 f8	 mov	 DWORD PTR _value$1$[ebp], eax

; 3253 :         buffer[0] = buffer[1] = buffer[2] = (value * 255) / highest;

  00131	69 c0 ff 00 00
	00		 imul	 eax, 255		; 000000ffH
  00137	33 d2		 xor	 edx, edx
  00139	f7 75 f0	 div	 DWORD PTR _highest$1$[ebp]
  0013c	8b 4d f4	 mov	 ecx, DWORD PTR _buffer$1$[ebp]
  0013f	83 c4 04	 add	 esp, 4

; 3254 :         if(has_alpha) buffer[3] = mode->key_defined && value == mode->key_r ? 0 : 255;

  00142	83 7d 08 00	 cmp	 DWORD PTR _has_alpha$[ebp], 0
  00146	88 41 02	 mov	 BYTE PTR [ecx+2], al
  00149	88 41 01	 mov	 BYTE PTR [ecx+1], al
  0014c	88 01		 mov	 BYTE PTR [ecx], al
  0014e	74 1a		 je	 SHORT $LN51@getPixelCo
  00150	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  00154	74 0c		 je	 SHORT $LN72@getPixelCo
  00156	8b 45 f8	 mov	 eax, DWORD PTR _value$1$[ebp]
  00159	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  0015c	75 04		 jne	 SHORT $LN72@getPixelCo
  0015e	33 c0		 xor	 eax, eax
  00160	eb 05		 jmp	 SHORT $LN73@getPixelCo
$LN72@getPixelCo:
  00162	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
$LN73@getPixelCo:
  00167	88 41 03	 mov	 BYTE PTR [ecx+3], al
$LN51@getPixelCo:

; 3250 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  0016a	03 cb		 add	 ecx, ebx
  0016c	89 4d f4	 mov	 DWORD PTR _buffer$1$[ebp], ecx
  0016f	4f		 dec	 edi
  00170	75 ae		 jne	 SHORT $LL52@getPixelCo

; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/

  00172	5f		 pop	 edi
  00173	5e		 pop	 esi
  00174	33 c0		 xor	 eax, eax
  00176	5b		 pop	 ebx

; 3354 : }

  00177	8b e5		 mov	 esp, ebp
  00179	5d		 pop	 ebp
  0017a	c3		 ret	 0
$LN65@getPixelCo:

; 3255 :       }
; 3256 :     }
; 3257 :   }
; 3258 :   else if(mode->colortype == LCT_RGB)

  0017b	83 f8 02	 cmp	 eax, 2
  0017e	0f 85 16 01 00
	00		 jne	 $LN47@getPixelCo

; 3259 :   {
; 3260 :     if(mode->bitdepth == 8)

  00184	83 7e 04 08	 cmp	 DWORD PTR [esi+4], 8
  00188	75 7b		 jne	 SHORT $LN46@getPixelCo

; 3261 :     {
; 3262 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  0018a	85 ff		 test	 edi, edi
  0018c	0f 84 f5 02 00
	00		 je	 $LN2@getPixelCo
  00192	8b 45 0c	 mov	 eax, DWORD PTR _in$[ebp]
  00195	41		 inc	 ecx
  00196	83 c0 02	 add	 eax, 2
  00199	89 45 10	 mov	 DWORD PTR tv2377[ebp], eax
  0019c	8d 64 24 00	 npad	 4
$LL45@getPixelCo:

; 3263 :       {
; 3264 :         buffer[0] = in[i * 3 + 0];

  001a0	0f b6 40 fe	 movzx	 eax, BYTE PTR [eax-2]
  001a4	88 41 ff	 mov	 BYTE PTR [ecx-1], al

; 3265 :         buffer[1] = in[i * 3 + 1];

  001a7	8b 45 10	 mov	 eax, DWORD PTR tv2377[ebp]
  001aa	0f b6 40 ff	 movzx	 eax, BYTE PTR [eax-1]
  001ae	88 01		 mov	 BYTE PTR [ecx], al

; 3266 :         buffer[2] = in[i * 3 + 2];

  001b0	8b 45 10	 mov	 eax, DWORD PTR tv2377[ebp]
  001b3	8a 18		 mov	 bl, BYTE PTR [eax]
  001b5	88 5d 0b	 mov	 BYTE PTR tv2386[ebp], bl
  001b8	88 59 01	 mov	 BYTE PTR [ecx+1], bl

; 3267 :         if(has_alpha) buffer[3] = mode->key_defined && buffer[0] == mode->key_r

  001bb	8b 5d fc	 mov	 ebx, DWORD PTR _num_channels$1$[ebp]
  001be	85 d2		 test	 edx, edx
  001c0	74 2f		 je	 SHORT $LN44@getPixelCo

; 3268 :            && buffer[1]== mode->key_g && buffer[2] == mode->key_b ? 0 : 255;

  001c2	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  001c6	74 1e		 je	 SHORT $LN74@getPixelCo
  001c8	0f b6 41 ff	 movzx	 eax, BYTE PTR [ecx-1]
  001cc	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  001cf	75 15		 jne	 SHORT $LN74@getPixelCo
  001d1	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  001d4	3b 46 18	 cmp	 eax, DWORD PTR [esi+24]
  001d7	75 0d		 jne	 SHORT $LN74@getPixelCo
  001d9	0f b6 45 0b	 movzx	 eax, BYTE PTR tv2386[ebp]
  001dd	3b 46 1c	 cmp	 eax, DWORD PTR [esi+28]
  001e0	75 04		 jne	 SHORT $LN74@getPixelCo
  001e2	33 c0		 xor	 eax, eax
  001e4	eb 05		 jmp	 SHORT $LN75@getPixelCo
$LN74@getPixelCo:
  001e6	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
$LN75@getPixelCo:
  001eb	88 41 02	 mov	 BYTE PTR [ecx+2], al
  001ee	8b 45 10	 mov	 eax, DWORD PTR tv2377[ebp]
$LN44@getPixelCo:

; 3261 :     {
; 3262 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  001f1	83 c0 03	 add	 eax, 3
  001f4	03 cb		 add	 ecx, ebx
  001f6	89 45 10	 mov	 DWORD PTR tv2377[ebp], eax
  001f9	4f		 dec	 edi
  001fa	75 a4		 jne	 SHORT $LL45@getPixelCo

; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/

  001fc	5f		 pop	 edi
  001fd	5e		 pop	 esi
  001fe	33 c0		 xor	 eax, eax
  00200	5b		 pop	 ebx

; 3354 : }

  00201	8b e5		 mov	 esp, ebp
  00203	5d		 pop	 ebp
  00204	c3		 ret	 0
$LN46@getPixelCo:

; 3269 :       }
; 3270 :     }
; 3271 :     else
; 3272 :     {
; 3273 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  00205	85 ff		 test	 edi, edi
  00207	0f 84 7a 02 00
	00		 je	 $LN2@getPixelCo
  0020d	8b 55 0c	 mov	 edx, DWORD PTR _in$[ebp]
  00210	83 c1 02	 add	 ecx, 2
  00213	89 4d 10	 mov	 DWORD PTR tv2374[ebp], ecx
  00216	83 c2 02	 add	 edx, 2
  00219	8d a4 24 00 00
	00 00		 npad	 7
$LL40@getPixelCo:

; 3274 :       {
; 3275 :         buffer[0] = in[i * 6 + 0];
; 3276 :         buffer[1] = in[i * 6 + 2];
; 3277 :         buffer[2] = in[i * 6 + 4];
; 3278 :         if(has_alpha) buffer[3] = mode->key_defined

  00220	83 7d 08 00	 cmp	 DWORD PTR _has_alpha$[ebp], 0
  00224	0f b6 42 fe	 movzx	 eax, BYTE PTR [edx-2]
  00228	88 41 fe	 mov	 BYTE PTR [ecx-2], al
  0022b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0022e	88 41 ff	 mov	 BYTE PTR [ecx-1], al
  00231	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  00235	88 01		 mov	 BYTE PTR [ecx], al
  00237	74 4d		 je	 SHORT $LN39@getPixelCo

; 3279 :            && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3280 :            && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3281 :            && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b ? 0 : 255;

  00239	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0023d	74 3f		 je	 SHORT $LN76@getPixelCo
  0023f	0f b6 4a fe	 movzx	 ecx, BYTE PTR [edx-2]
  00243	0f b6 42 ff	 movzx	 eax, BYTE PTR [edx-1]
  00247	c1 e1 08	 shl	 ecx, 8
  0024a	03 c8		 add	 ecx, eax
  0024c	3b 4e 14	 cmp	 ecx, DWORD PTR [esi+20]
  0024f	75 2a		 jne	 SHORT $LN112@getPixelCo
  00251	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00254	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  00258	c1 e1 08	 shl	 ecx, 8
  0025b	03 c8		 add	 ecx, eax
  0025d	3b 4e 18	 cmp	 ecx, DWORD PTR [esi+24]
  00260	75 19		 jne	 SHORT $LN112@getPixelCo
  00262	0f b6 4a 02	 movzx	 ecx, BYTE PTR [edx+2]
  00266	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  0026a	c1 e1 08	 shl	 ecx, 8
  0026d	03 c8		 add	 ecx, eax
  0026f	3b 4e 1c	 cmp	 ecx, DWORD PTR [esi+28]
  00272	8b 4d 10	 mov	 ecx, DWORD PTR tv2374[ebp]
  00275	75 07		 jne	 SHORT $LN76@getPixelCo
  00277	33 c0		 xor	 eax, eax
  00279	eb 08		 jmp	 SHORT $LN77@getPixelCo
$LN112@getPixelCo:
  0027b	8b 4d 10	 mov	 ecx, DWORD PTR tv2374[ebp]
$LN76@getPixelCo:
  0027e	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
$LN77@getPixelCo:
  00283	88 41 01	 mov	 BYTE PTR [ecx+1], al
$LN39@getPixelCo:

; 3269 :       }
; 3270 :     }
; 3271 :     else
; 3272 :     {
; 3273 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  00286	03 cb		 add	 ecx, ebx
  00288	83 c2 06	 add	 edx, 6
  0028b	89 4d 10	 mov	 DWORD PTR tv2374[ebp], ecx
  0028e	4f		 dec	 edi
  0028f	75 8f		 jne	 SHORT $LL40@getPixelCo

; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/

  00291	5f		 pop	 edi
  00292	5e		 pop	 esi
  00293	33 c0		 xor	 eax, eax
  00295	5b		 pop	 ebx

; 3354 : }

  00296	8b e5		 mov	 esp, ebp
  00298	5d		 pop	 ebp
  00299	c3		 ret	 0
$LN47@getPixelCo:

; 3282 :       }
; 3283 :     }
; 3284 :   }
; 3285 :   else if(mode->colortype == LCT_PALETTE)

  0029a	83 f8 03	 cmp	 eax, 3
  0029d	0f 85 e3 00 00
	00		 jne	 $LN35@getPixelCo

; 3289 :     for(i = 0; i < numpixels; i++, buffer += num_channels)

  002a3	33 c0		 xor	 eax, eax
  002a5	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _j$1[ebp], 0
  002ac	89 45 f8	 mov	 DWORD PTR _i$3$[ebp], eax
  002af	85 ff		 test	 edi, edi
  002b1	0f 84 d0 01 00
	00		 je	 $LN2@getPixelCo

; 3286 :   {
; 3287 :     unsigned index;
; 3288 :     size_t j = 0;

  002b7	83 c1 02	 add	 ecx, 2
  002ba	89 4d f0	 mov	 DWORD PTR tv2369[ebp], ecx
  002bd	8d 49 00	 npad	 3
$LL34@getPixelCo:

; 3290 :     {
; 3291 :       if(mode->bitdepth == 8) index = in[i];

  002c0	83 7e 04 08	 cmp	 DWORD PTR [esi+4], 8
  002c4	75 0c		 jne	 SHORT $LN31@getPixelCo
  002c6	8b 5d 0c	 mov	 ebx, DWORD PTR _in$[ebp]
  002c9	0f b6 1c 18	 movzx	 ebx, BYTE PTR [eax+ebx]
  002cd	89 5d f4	 mov	 DWORD PTR _index$1$[ebp], ebx
  002d0	eb 1d		 jmp	 SHORT $LN30@getPixelCo
$LN31@getPixelCo:

; 3292 :       else index = readBitsFromReversedStream(&j, in, mode->bitdepth);

  002d2	ff 76 04	 push	 DWORD PTR [esi+4]
  002d5	8b 55 0c	 mov	 edx, DWORD PTR _in$[ebp]
  002d8	8d 4d ec	 lea	 ecx, DWORD PTR _j$1[ebp]
  002db	e8 00 00 00 00	 call	 ?readBitsFromReversedStream@@YAIPAIPBEI@Z ; readBitsFromReversedStream
  002e0	8b 4d f0	 mov	 ecx, DWORD PTR tv2369[ebp]
  002e3	8b 55 08	 mov	 edx, DWORD PTR _has_alpha$[ebp]
  002e6	89 45 f4	 mov	 DWORD PTR _index$1$[ebp], eax
  002e9	8b 45 f8	 mov	 eax, DWORD PTR _i$3$[ebp]
  002ec	83 c4 04	 add	 esp, 4
$LN30@getPixelCo:

; 3293 : 
; 3294 :       if(index >= mode->palettesize)

  002ef	8b 5d f4	 mov	 ebx, DWORD PTR _index$1$[ebp]
  002f2	3b 5e 0c	 cmp	 ebx, DWORD PTR [esi+12]
  002f5	8b 5d fc	 mov	 ebx, DWORD PTR _num_channels$1$[ebp]
  002f8	72 1a		 jb	 SHORT $LN29@getPixelCo

; 3295 :       {
; 3296 :         /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3297 :         if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/

  002fa	83 7d 14 00	 cmp	 DWORD PTR _fix_png$[ebp], 0
  002fe	74 73		 je	 SHORT $LN88@getPixelCo

; 3298 :         buffer[0] = buffer[1] = buffer[2] = 0;

  00300	66 c7 41 ff 00
	00		 mov	 WORD PTR [ecx-1], 0
  00306	c6 41 fe 00	 mov	 BYTE PTR [ecx-2], 0

; 3299 :         if(has_alpha) buffer[3] = 255;

  0030a	85 d2		 test	 edx, edx
  0030c	74 4b		 je	 SHORT $LN33@getPixelCo
  0030e	c6 41 01 ff	 mov	 BYTE PTR [ecx+1], 255	; 000000ffH

; 3300 :       }
; 3301 :       else

  00312	eb 45		 jmp	 SHORT $LN33@getPixelCo
$LN29@getPixelCo:

; 3302 :       {
; 3303 :         buffer[0] = mode->palette[index * 4 + 0];

  00314	8b 45 f4	 mov	 eax, DWORD PTR _index$1$[ebp]
  00317	c1 e0 02	 shl	 eax, 2
  0031a	89 45 f4	 mov	 DWORD PTR tv2384[ebp], eax
  0031d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00320	8b 5d f4	 mov	 ebx, DWORD PTR tv2384[ebp]
  00323	0f b6 04 03	 movzx	 eax, BYTE PTR [ebx+eax]
  00327	88 41 fe	 mov	 BYTE PTR [ecx-2], al

; 3304 :         buffer[1] = mode->palette[index * 4 + 1];

  0032a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0032d	0f b6 44 03 01	 movzx	 eax, BYTE PTR [ebx+eax+1]
  00332	88 41 ff	 mov	 BYTE PTR [ecx-1], al

; 3305 :         buffer[2] = mode->palette[index * 4 + 2];

  00335	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00338	0f b6 44 03 02	 movzx	 eax, BYTE PTR [ebx+eax+2]

; 3306 :         if(has_alpha) buffer[3] = mode->palette[index * 4 + 3];

  0033d	8b 5d fc	 mov	 ebx, DWORD PTR _num_channels$1$[ebp]
  00340	88 01		 mov	 BYTE PTR [ecx], al
  00342	85 d2		 test	 edx, edx
  00344	74 10		 je	 SHORT $LN113@getPixelCo
  00346	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00349	8b 75 f4	 mov	 esi, DWORD PTR tv2384[ebp]
  0034c	8a 44 06 03	 mov	 al, BYTE PTR [esi+eax+3]
  00350	8b 75 10	 mov	 esi, DWORD PTR _mode$[ebp]
  00353	88 41 01	 mov	 BYTE PTR [ecx+1], al
$LN113@getPixelCo:
  00356	8b 45 f8	 mov	 eax, DWORD PTR _i$3$[ebp]
$LN33@getPixelCo:

; 3289 :     for(i = 0; i < numpixels; i++, buffer += num_channels)

  00359	40		 inc	 eax
  0035a	03 cb		 add	 ecx, ebx
  0035c	89 45 f8	 mov	 DWORD PTR _i$3$[ebp], eax
  0035f	89 4d f0	 mov	 DWORD PTR tv2369[ebp], ecx
  00362	3b c7		 cmp	 eax, edi
  00364	0f 82 56 ff ff
	ff		 jb	 $LL34@getPixelCo

; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/

  0036a	5f		 pop	 edi
  0036b	5e		 pop	 esi
  0036c	33 c0		 xor	 eax, eax
  0036e	5b		 pop	 ebx

; 3354 : }

  0036f	8b e5		 mov	 esp, ebp
  00371	5d		 pop	 ebp
  00372	c3		 ret	 0
$LN88@getPixelCo:

; 3295 :       {
; 3296 :         /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3297 :         if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/

  00373	33 c0		 xor	 eax, eax
  00375	83 7e 04 08	 cmp	 DWORD PTR [esi+4], 8
  00379	5f		 pop	 edi
  0037a	0f 95 c0	 setne	 al
  0037d	5e		 pop	 esi
  0037e	5b		 pop	 ebx
  0037f	83 c0 2e	 add	 eax, 46			; 0000002eH

; 3354 : }

  00382	8b e5		 mov	 esp, ebp
  00384	5d		 pop	 ebp
  00385	c3		 ret	 0
$LN35@getPixelCo:

; 3307 :       }
; 3308 :     }
; 3309 :   }
; 3310 :   else if(mode->colortype == LCT_GREY_ALPHA)

  00386	83 f8 04	 cmp	 eax, 4
  00389	75 78		 jne	 SHORT $LN23@getPixelCo

; 3311 :   {
; 3312 :     if(mode->bitdepth == 8)

  0038b	83 7e 04 08	 cmp	 DWORD PTR [esi+4], 8
  0038f	75 3b		 jne	 SHORT $LN22@getPixelCo

; 3313 :     {
; 3314 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  00391	33 f6		 xor	 esi, esi
  00393	85 ff		 test	 edi, edi
  00395	0f 84 ec 00 00
	00		 je	 $LN2@getPixelCo
  0039b	41		 inc	 ecx
  0039c	8d 64 24 00	 npad	 4
$LL21@getPixelCo:

; 3315 :       {
; 3316 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2 + 0];

  003a0	8b 45 0c	 mov	 eax, DWORD PTR _in$[ebp]
  003a3	8a 04 70	 mov	 al, BYTE PTR [eax+esi*2]
  003a6	88 41 01	 mov	 BYTE PTR [ecx+1], al
  003a9	88 01		 mov	 BYTE PTR [ecx], al
  003ab	88 41 ff	 mov	 BYTE PTR [ecx-1], al

; 3317 :         if(has_alpha) buffer[3] = in[i * 2 + 1];

  003ae	85 d2		 test	 edx, edx
  003b0	74 0a		 je	 SHORT $LN20@getPixelCo
  003b2	8b 45 0c	 mov	 eax, DWORD PTR _in$[ebp]
  003b5	8a 44 70 01	 mov	 al, BYTE PTR [eax+esi*2+1]
  003b9	88 41 02	 mov	 BYTE PTR [ecx+2], al
$LN20@getPixelCo:

; 3313 :     {
; 3314 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  003bc	46		 inc	 esi
  003bd	03 cb		 add	 ecx, ebx
  003bf	3b f7		 cmp	 esi, edi
  003c1	72 dd		 jb	 SHORT $LL21@getPixelCo

; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/

  003c3	5f		 pop	 edi
  003c4	5e		 pop	 esi
  003c5	33 c0		 xor	 eax, eax
  003c7	5b		 pop	 ebx

; 3354 : }

  003c8	8b e5		 mov	 esp, ebp
  003ca	5d		 pop	 ebp
  003cb	c3		 ret	 0
$LN22@getPixelCo:

; 3318 :       }
; 3319 :     }
; 3320 :     else
; 3321 :     {
; 3322 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  003cc	33 f6		 xor	 esi, esi
  003ce	85 ff		 test	 edi, edi
  003d0	0f 84 b1 00 00
	00		 je	 $LN2@getPixelCo
  003d6	41		 inc	 ecx
$LL16@getPixelCo:

; 3323 :       {
; 3324 :         buffer[0] = buffer[1] = buffer[2] = in[i * 4 + 0];

  003d7	8b 45 0c	 mov	 eax, DWORD PTR _in$[ebp]
  003da	8a 04 b0	 mov	 al, BYTE PTR [eax+esi*4]
  003dd	88 41 01	 mov	 BYTE PTR [ecx+1], al
  003e0	88 01		 mov	 BYTE PTR [ecx], al
  003e2	88 41 ff	 mov	 BYTE PTR [ecx-1], al

; 3325 :         if(has_alpha) buffer[3] = in[i * 4 + 2];

  003e5	85 d2		 test	 edx, edx
  003e7	74 0a		 je	 SHORT $LN15@getPixelCo
  003e9	8b 45 0c	 mov	 eax, DWORD PTR _in$[ebp]
  003ec	8a 44 b0 02	 mov	 al, BYTE PTR [eax+esi*4+2]
  003f0	88 41 02	 mov	 BYTE PTR [ecx+2], al
$LN15@getPixelCo:

; 3318 :       }
; 3319 :     }
; 3320 :     else
; 3321 :     {
; 3322 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  003f3	46		 inc	 esi
  003f4	03 cb		 add	 ecx, ebx
  003f6	3b f7		 cmp	 esi, edi
  003f8	72 dd		 jb	 SHORT $LL16@getPixelCo

; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/

  003fa	5f		 pop	 edi
  003fb	5e		 pop	 esi
  003fc	33 c0		 xor	 eax, eax
  003fe	5b		 pop	 ebx

; 3354 : }

  003ff	8b e5		 mov	 esp, ebp
  00401	5d		 pop	 ebp
  00402	c3		 ret	 0
$LN23@getPixelCo:

; 3326 :       }
; 3327 :     }
; 3328 :   }
; 3329 :   else if(mode->colortype == LCT_RGBA)

  00403	83 f8 06	 cmp	 eax, 6
  00406	75 7f		 jne	 SHORT $LN2@getPixelCo

; 3330 :   {
; 3331 :     if(mode->bitdepth == 8)

  00408	83 7e 04 08	 cmp	 DWORD PTR [esi+4], 8
  0040c	75 42		 jne	 SHORT $LN10@getPixelCo

; 3332 :     {
; 3333 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  0040e	85 ff		 test	 edi, edi
  00410	74 75		 je	 SHORT $LN2@getPixelCo
  00412	8b 55 0c	 mov	 edx, DWORD PTR _in$[ebp]
  00415	83 c1 02	 add	 ecx, 2
  00418	83 c2 02	 add	 edx, 2
  0041b	eb 03 8d 49 00	 npad	 5
$LL9@getPixelCo:

; 3334 :       {
; 3335 :         buffer[0] = in[i * 4 + 0];
; 3336 :         buffer[1] = in[i * 4 + 1];
; 3337 :         buffer[2] = in[i * 4 + 2];
; 3338 :         if(has_alpha) buffer[3] = in[i * 4 + 3];

  00420	83 7d 08 00	 cmp	 DWORD PTR _has_alpha$[ebp], 0
  00424	0f b6 42 fe	 movzx	 eax, BYTE PTR [edx-2]
  00428	88 41 fe	 mov	 BYTE PTR [ecx-2], al
  0042b	0f b6 42 ff	 movzx	 eax, BYTE PTR [edx-1]
  0042f	88 41 ff	 mov	 BYTE PTR [ecx-1], al
  00432	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00435	88 01		 mov	 BYTE PTR [ecx], al
  00437	74 06		 je	 SHORT $LN8@getPixelCo
  00439	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  0043c	88 41 01	 mov	 BYTE PTR [ecx+1], al
$LN8@getPixelCo:

; 3332 :     {
; 3333 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  0043f	83 c2 04	 add	 edx, 4
  00442	03 cb		 add	 ecx, ebx
  00444	4f		 dec	 edi
  00445	75 d9		 jne	 SHORT $LL9@getPixelCo

; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/

  00447	5f		 pop	 edi
  00448	5e		 pop	 esi
  00449	33 c0		 xor	 eax, eax
  0044b	5b		 pop	 ebx

; 3354 : }

  0044c	8b e5		 mov	 esp, ebp
  0044e	5d		 pop	 ebp
  0044f	c3		 ret	 0
$LN10@getPixelCo:

; 3339 :       }
; 3340 :     }
; 3341 :     else
; 3342 :     {
; 3343 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  00450	85 ff		 test	 edi, edi
  00452	74 33		 je	 SHORT $LN2@getPixelCo
  00454	8b 55 0c	 mov	 edx, DWORD PTR _in$[ebp]
  00457	83 c1 02	 add	 ecx, 2
  0045a	83 c2 04	 add	 edx, 4
  0045d	8d 49 00	 npad	 3
$LL4@getPixelCo:

; 3344 :       {
; 3345 :         buffer[0] = in[i * 8 + 0];
; 3346 :         buffer[1] = in[i * 8 + 2];
; 3347 :         buffer[2] = in[i * 8 + 4];
; 3348 :         if(has_alpha) buffer[3] = in[i * 8 + 6];

  00460	83 7d 08 00	 cmp	 DWORD PTR _has_alpha$[ebp], 0
  00464	0f b6 42 fc	 movzx	 eax, BYTE PTR [edx-4]
  00468	88 41 fe	 mov	 BYTE PTR [ecx-2], al
  0046b	0f b6 42 fe	 movzx	 eax, BYTE PTR [edx-2]
  0046f	88 41 ff	 mov	 BYTE PTR [ecx-1], al
  00472	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00475	88 01		 mov	 BYTE PTR [ecx], al
  00477	74 06		 je	 SHORT $LN3@getPixelCo
  00479	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  0047c	88 41 01	 mov	 BYTE PTR [ecx+1], al
$LN3@getPixelCo:

; 3339 :       }
; 3340 :     }
; 3341 :     else
; 3342 :     {
; 3343 :       for(i = 0; i < numpixels; i++, buffer += num_channels)

  0047f	83 c2 08	 add	 edx, 8
  00482	03 cb		 add	 ecx, ebx
  00484	4f		 dec	 edi
  00485	75 d9		 jne	 SHORT $LL4@getPixelCo
$LN2@getPixelCo:
  00487	5f		 pop	 edi
  00488	5e		 pop	 esi

; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/

  00489	33 c0		 xor	 eax, eax
  0048b	5b		 pop	 ebx

; 3354 : }

  0048c	8b e5		 mov	 esp, ebp
  0048e	5d		 pop	 ebp
  0048f	c3		 ret	 0
?getPixelColorsRGBA8@@YAIPAEIIPBEPBULodePNGColorMode@@I@Z ENDP ; getPixelColorsRGBA8
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?getPixelColorRGBA16@@YAIPAG000PBEIPBULodePNGColorMode@@@Z
_TEXT	SEGMENT
_r$1$ = -8						; size = 4
tv620 = -3						; size = 1
tv621 = -2						; size = 1
tv626 = -1						; size = 1
tv622 = -1						; size = 1
_b$ = 8							; size = 4
_a$ = 12						; size = 4
_in$ = 16						; size = 4
_i$ = 20						; size = 4
_mode$ = 24						; size = 4
tv627 = 27						; size = 1
tv623 = 27						; size = 1
?getPixelColorRGBA16@@YAIPAG000PBEIPBULodePNGColorMode@@@Z PROC ; getPixelColorRGBA16, COMDAT
; _r$ = ecx
; _g$ = edx

; 3360 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 3361 :   if(mode->bitdepth != 16) return 85; /*error: this function only supports 16-bit input*/

  00008	8b 75 18	 mov	 esi, DWORD PTR _mode$[ebp]
  0000b	8b da		 mov	 ebx, edx
  0000d	83 7e 04 10	 cmp	 DWORD PTR [esi+4], 16	; 00000010H
  00011	89 4d f8	 mov	 DWORD PTR _r$1$[ebp], ecx
  00014	74 0b		 je	 SHORT $LN13@getPixelCo
  00016	5e		 pop	 esi
  00017	b8 55 00 00 00	 mov	 eax, 85			; 00000055H
  0001c	5b		 pop	 ebx

; 3394 : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN13@getPixelCo:

; 3362 : 
; 3363 :   if(mode->colortype == LCT_GREY)

  00021	8b 06		 mov	 eax, DWORD PTR [esi]
  00023	57		 push	 edi
  00024	85 c0		 test	 eax, eax
  00026	75 72		 jne	 SHORT $LN12@getPixelCo

; 3364 :   {
; 3365 :     *r = *g = *b = 256 * in[i * 2 + 0] + in[i * 2 + 1];

  00028	8b 4d 14	 mov	 ecx, DWORD PTR _i$[ebp]
  0002b	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0002e	8a 14 48	 mov	 dl, BYTE PTR [eax+ecx*2]
  00031	88 55 1b	 mov	 BYTE PTR tv627[ebp], dl
  00034	8a 54 48 01	 mov	 dl, BYTE PTR [eax+ecx*2+1]
  00038	0f b6 4d 1b	 movzx	 ecx, BYTE PTR tv627[ebp]
  0003c	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00041	66 0f af c8	 imul	 cx, ax
  00045	0f b6 c2	 movzx	 eax, dl
  00048	66 03 c8	 add	 cx, ax

; 3366 :     if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;

  0004b	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0004f	8b 45 08	 mov	 eax, DWORD PTR _b$[ebp]
  00052	88 55 ff	 mov	 BYTE PTR tv626[ebp], dl
  00055	8b 55 f8	 mov	 edx, DWORD PTR _r$1$[ebp]
  00058	66 89 08	 mov	 WORD PTR [eax], cx
  0005b	66 89 0b	 mov	 WORD PTR [ebx], cx
  0005e	66 89 0a	 mov	 WORD PTR [edx], cx
  00061	74 23		 je	 SHORT $LN11@getPixelCo
  00063	0f b6 4d 1b	 movzx	 ecx, BYTE PTR tv627[ebp]
  00067	0f b6 45 ff	 movzx	 eax, BYTE PTR tv626[ebp]
  0006b	c1 e1 08	 shl	 ecx, 8
  0006e	03 c8		 add	 ecx, eax
  00070	3b 4e 14	 cmp	 ecx, DWORD PTR [esi+20]
$LN20@getPixelCo:
  00073	75 11		 jne	 SHORT $LN11@getPixelCo

; 3389 :     *a = 256 * in[i * 8 + 6] + in[i * 8 + 7];

  00075	8b 45 0c	 mov	 eax, DWORD PTR _a$[ebp]
  00078	5f		 pop	 edi
  00079	33 c9		 xor	 ecx, ecx
  0007b	5e		 pop	 esi
  0007c	66 89 08	 mov	 WORD PTR [eax], cx

; 3392 : 
; 3393 :   return 0; /*no error*/

  0007f	33 c0		 xor	 eax, eax
  00081	5b		 pop	 ebx

; 3394 : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
$LN11@getPixelCo:

; 3389 :     *a = 256 * in[i * 8 + 6] + in[i * 8 + 7];

  00086	8b 45 0c	 mov	 eax, DWORD PTR _a$[ebp]
  00089	5f		 pop	 edi
  0008a	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0008f	5e		 pop	 esi
  00090	66 89 08	 mov	 WORD PTR [eax], cx

; 3392 : 
; 3393 :   return 0; /*no error*/

  00093	33 c0		 xor	 eax, eax
  00095	5b		 pop	 ebx

; 3394 : }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
$LN12@getPixelCo:

; 3367 :     else *a = 65535;
; 3368 :   }
; 3369 :   else if(mode->colortype == LCT_RGB)

  0009a	83 f8 02	 cmp	 eax, 2
  0009d	0f 85 ad 00 00
	00		 jne	 $LN8@getPixelCo

; 3370 :   {
; 3371 :     *r = 256 * in[i * 6 + 0] + in[i * 6 + 1];

  000a3	8b 45 14	 mov	 eax, DWORD PTR _i$[ebp]
  000a6	bf 00 01 00 00	 mov	 edi, 256		; 00000100H
  000ab	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000ae	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  000b1	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  000b4	8a 02		 mov	 al, BYTE PTR [edx]
  000b6	8a 62 01	 mov	 ah, BYTE PTR [edx+1]
  000b9	0f b6 c8	 movzx	 ecx, al
  000bc	66 0f af cf	 imul	 cx, di
  000c0	88 45 1b	 mov	 BYTE PTR tv623[ebp], al
  000c3	88 65 ff	 mov	 BYTE PTR tv622[ebp], ah
  000c6	0f b6 c4	 movzx	 eax, ah
  000c9	66 03 c8	 add	 cx, ax
  000cc	8b 45 f8	 mov	 eax, DWORD PTR _r$1$[ebp]
  000cf	66 89 08	 mov	 WORD PTR [eax], cx

; 3372 :     *g = 256 * in[i * 6 + 2] + in[i * 6 + 3];

  000d2	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  000d5	8a 62 03	 mov	 ah, BYTE PTR [edx+3]
  000d8	0f b6 c8	 movzx	 ecx, al
  000db	66 0f af cf	 imul	 cx, di
  000df	88 45 fe	 mov	 BYTE PTR tv621[ebp], al
  000e2	88 65 fd	 mov	 BYTE PTR tv620[ebp], ah
  000e5	0f b6 c4	 movzx	 eax, ah
  000e8	66 03 c8	 add	 cx, ax
  000eb	66 89 0b	 mov	 WORD PTR [ebx], cx

; 3373 :     *b = 256 * in[i * 6 + 4] + in[i * 6 + 5];

  000ee	8a 5a 04	 mov	 bl, BYTE PTR [edx+4]
  000f1	8a 52 05	 mov	 dl, BYTE PTR [edx+5]
  000f4	0f b6 cb	 movzx	 ecx, bl
  000f7	66 0f af cf	 imul	 cx, di
  000fb	0f b6 c2	 movzx	 eax, dl
  000fe	66 03 c8	 add	 cx, ax

; 3374 :     if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3375 :        && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3376 :        && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;

  00101	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  00105	8b 45 08	 mov	 eax, DWORD PTR _b$[ebp]
  00108	66 89 08	 mov	 WORD PTR [eax], cx
  0010b	0f 84 75 ff ff
	ff		 je	 $LN11@getPixelCo
  00111	0f b6 4d 1b	 movzx	 ecx, BYTE PTR tv623[ebp]
  00115	0f b6 45 ff	 movzx	 eax, BYTE PTR tv622[ebp]
  00119	c1 e1 08	 shl	 ecx, 8
  0011c	03 c8		 add	 ecx, eax
  0011e	3b 4e 14	 cmp	 ecx, DWORD PTR [esi+20]
  00121	0f 85 5f ff ff
	ff		 jne	 $LN11@getPixelCo
  00127	0f b6 4d fe	 movzx	 ecx, BYTE PTR tv621[ebp]
  0012b	0f b6 45 fd	 movzx	 eax, BYTE PTR tv620[ebp]
  0012f	c1 e1 08	 shl	 ecx, 8
  00132	03 c8		 add	 ecx, eax
  00134	3b 4e 18	 cmp	 ecx, DWORD PTR [esi+24]
  00137	0f 85 49 ff ff
	ff		 jne	 $LN11@getPixelCo
  0013d	0f b6 cb	 movzx	 ecx, bl
  00140	0f b6 c2	 movzx	 eax, dl
  00143	c1 e1 08	 shl	 ecx, 8
  00146	03 c8		 add	 ecx, eax
  00148	3b 4e 1c	 cmp	 ecx, DWORD PTR [esi+28]
  0014b	e9 23 ff ff ff	 jmp	 $LN20@getPixelCo
$LN8@getPixelCo:

; 3377 :     else *a = 65535;
; 3378 :   }
; 3379 :   else if(mode->colortype == LCT_GREY_ALPHA)

  00150	83 f8 04	 cmp	 eax, 4
  00153	75 49		 jne	 SHORT $LN4@getPixelCo

; 3380 :   {
; 3381 :     *r = *g = *b = 256 * in[i * 4 + 0] + in[i * 4 + 1];

  00155	8b 4d 14	 mov	 ecx, DWORD PTR _i$[ebp]
  00158	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0015b	bf 00 01 00 00	 mov	 edi, 256		; 00000100H
  00160	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00163	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00166	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  0016a	66 0f af cf	 imul	 cx, di
  0016e	66 03 c8	 add	 cx, ax
  00171	8b 45 08	 mov	 eax, DWORD PTR _b$[ebp]
  00174	66 89 0b	 mov	 WORD PTR [ebx], cx
  00177	66 89 08	 mov	 WORD PTR [eax], cx
  0017a	8b 45 f8	 mov	 eax, DWORD PTR _r$1$[ebp]
  0017d	66 89 08	 mov	 WORD PTR [eax], cx

; 3382 :     *a = 256 * in[i * 4 + 2] + in[i * 4 + 3];

  00180	0f b6 4a 02	 movzx	 ecx, BYTE PTR [edx+2]
  00184	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]

; 3389 :     *a = 256 * in[i * 8 + 6] + in[i * 8 + 7];

  00188	66 0f af cf	 imul	 cx, di
  0018c	66 03 c8	 add	 cx, ax
  0018f	8b 45 0c	 mov	 eax, DWORD PTR _a$[ebp]
  00192	5f		 pop	 edi
  00193	5e		 pop	 esi
  00194	66 89 08	 mov	 WORD PTR [eax], cx

; 3392 : 
; 3393 :   return 0; /*no error*/

  00197	33 c0		 xor	 eax, eax
  00199	5b		 pop	 ebx

; 3394 : }

  0019a	8b e5		 mov	 esp, ebp
  0019c	5d		 pop	 ebp
  0019d	c3		 ret	 0
$LN4@getPixelCo:

; 3383 :   }
; 3384 :   else if(mode->colortype == LCT_RGBA)

  0019e	83 f8 06	 cmp	 eax, 6
  001a1	75 67		 jne	 SHORT $LN2@getPixelCo

; 3385 :   {
; 3386 :     *r = 256 * in[i * 8 + 0] + in[i * 8 + 1];

  001a3	8b 4d 14	 mov	 ecx, DWORD PTR _i$[ebp]
  001a6	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  001a9	bf 00 01 00 00	 mov	 edi, 256		; 00000100H
  001ae	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
  001b1	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  001b4	0f b6 4a 01	 movzx	 ecx, BYTE PTR [edx+1]
  001b8	66 0f af c7	 imul	 ax, di
  001bc	66 03 c8	 add	 cx, ax
  001bf	8b 45 f8	 mov	 eax, DWORD PTR _r$1$[ebp]
  001c2	66 89 08	 mov	 WORD PTR [eax], cx

; 3387 :     *g = 256 * in[i * 8 + 2] + in[i * 8 + 3];

  001c5	0f b6 4a 02	 movzx	 ecx, BYTE PTR [edx+2]
  001c9	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  001cd	66 0f af cf	 imul	 cx, di
  001d1	66 03 c8	 add	 cx, ax

; 3388 :     *b = 256 * in[i * 8 + 4] + in[i * 8 + 5];

  001d4	0f b6 42 05	 movzx	 eax, BYTE PTR [edx+5]
  001d8	66 89 0b	 mov	 WORD PTR [ebx], cx
  001db	0f b6 4a 04	 movzx	 ecx, BYTE PTR [edx+4]
  001df	66 0f af cf	 imul	 cx, di
  001e3	66 03 c8	 add	 cx, ax
  001e6	8b 45 08	 mov	 eax, DWORD PTR _b$[ebp]
  001e9	66 89 08	 mov	 WORD PTR [eax], cx

; 3389 :     *a = 256 * in[i * 8 + 6] + in[i * 8 + 7];

  001ec	0f b6 4a 06	 movzx	 ecx, BYTE PTR [edx+6]
  001f0	0f b6 42 07	 movzx	 eax, BYTE PTR [edx+7]
  001f4	66 0f af cf	 imul	 cx, di
  001f8	66 03 c8	 add	 cx, ax
  001fb	8b 45 0c	 mov	 eax, DWORD PTR _a$[ebp]
  001fe	5f		 pop	 edi
  001ff	5e		 pop	 esi
  00200	66 89 08	 mov	 WORD PTR [eax], cx

; 3392 : 
; 3393 :   return 0; /*no error*/

  00203	33 c0		 xor	 eax, eax
  00205	5b		 pop	 ebx

; 3394 : }

  00206	8b e5		 mov	 esp, ebp
  00208	5d		 pop	 ebp
  00209	c3		 ret	 0
$LN2@getPixelCo:
  0020a	5f		 pop	 edi
  0020b	5e		 pop	 esi

; 3390 :   }
; 3391 :   else return 85; /*error: this function only supports 16-bit input, not palettes*/

  0020c	b8 55 00 00 00	 mov	 eax, 85			; 00000055H
  00211	5b		 pop	 ebx

; 3394 : }

  00212	8b e5		 mov	 esp, ebp
  00214	5d		 pop	 ebp
  00215	c3		 ret	 0
?getPixelColorRGBA16@@YAIPAG000PBEIPBULodePNGColorMode@@@Z ENDP ; getPixelColorRGBA16
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_convert@@YAIPAEPBEPAULodePNGColorMode@@PBU1@III@Z
_TEXT	SEGMENT
_tree$ = -84						; size = 68
_out$1$ = -16						; size = 4
_g$1 = -16						; size = 1
_r$2 = -16						; size = 2
_r$3 = -12						; size = 1
_g$4 = -12						; size = 2
_numpixels$1$ = -8					; size = 4
_in$1$ = -4						; size = 4
_mode_out$ = 8						; size = 4
_mode_in$ = 12						; size = 4
_a$5 = 16						; size = 1
_a$6 = 16						; size = 2
_w$ = 16						; size = 4
_b$7 = 20						; size = 1
_b$8 = 20						; size = 2
_h$ = 20						; size = 4
_fix_png$ = 24						; size = 4
?lodepng_convert@@YAIPAEPBEPAULodePNGColorMode@@PBU1@III@Z PROC ; lodepng_convert, COMDAT
; _out$ = ecx
; _in$ = edx

; 3404 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H

; 3405 :   unsigned error = 0;
; 3406 :   size_t i;
; 3407 :   ColorTree tree;
; 3408 :   size_t numpixels = w * h;

  00006	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00009	0f af 45 14	 imul	 eax, DWORD PTR _h$[ebp]
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 3409 : 
; 3410 :   if(lodepng_color_mode_equal(mode_out, mode_in))

  00010	8b 7d 08	 mov	 edi, DWORD PTR _mode_out$[ebp]
  00013	8b f1		 mov	 esi, ecx
  00015	89 55 fc	 mov	 DWORD PTR _in$1$[ebp], edx
  00018	8b 55 0c	 mov	 edx, DWORD PTR _mode_in$[ebp]
  0001b	8b cf		 mov	 ecx, edi
  0001d	89 75 f0	 mov	 DWORD PTR _out$1$[ebp], esi
  00020	33 db		 xor	 ebx, ebx
  00022	89 45 f8	 mov	 DWORD PTR _numpixels$1$[ebp], eax
  00025	e8 00 00 00 00	 call	 ?lodepng_color_mode_equal@@YAHPBULodePNGColorMode@@0@Z ; lodepng_color_mode_equal
  0002a	85 c0		 test	 eax, eax
  0002c	74 3b		 je	 SHORT $LN26@lodepng_co

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
; 945  :     (*bp)++;
; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);
; 965  :   generateFixedDistanceTree(tree_d);
; 966  : }
; 967  : 
; 968  : /*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
; 969  : static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
; 970  :                                       const unsigned char* in, size_t* bp, size_t inlength)
; 971  : {
; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;
; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/
; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;
; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;
; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;
; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)
; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
; 1009 :     if(error) break;
; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;
; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;
; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;
; 1020 :     while(i < HLIT + HDIST)
; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
; 1023 :       if(code <= 15) /*a length code*/
; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;
; 1026 :         else bitlen_d[i - HLIT] = code;
; 1027 :         i++;
; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/
; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);
; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];
; 1040 :         else value = bitlen_d[i - HLIT - 1];
; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)
; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
; 1045 :           if(i < HLIT) bitlen_ll[i] = value;
; 1046 :           else bitlen_d[i - HLIT] = value;
; 1047 :           i++;
; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/
; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);
; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)
; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1063 :           else bitlen_d[i - HLIT] = 0;
; 1064 :           i++;
; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/
; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);
; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)
; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1080 :           else bitlen_d[i - HLIT] = 0;
; 1081 :           i++;
; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))
; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;
; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/
; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;
; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 1102 :     if(error) break;
; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
; 1104 : 
; 1105 :     break; /*end of error-while*/
; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;
; 1114 : }
; 1115 : 
; 1116 : /*inflate a block with dynamic of fixed Huffman tree*/
; 1117 : static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
; 1118 :                                     size_t* pos, size_t inlength, unsigned btype)
; 1119 : {
; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;
; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/
; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/
; 1136 :     {
; 1137 :       if((*pos) >= out->size)
; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);
; 1143 :       (*pos)++;
; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);
; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
; 1161 :       if(code_d > 29)
; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;
; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/
; 1170 :         break;
; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);
; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);
; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)
; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)
; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];
; 1193 :         (*pos)++;
; 1194 :         backward++;
; 1195 :         if(backward >= start) backward = start - distance;
; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)
; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;
; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;
; 1215 : }
; 1216 : 
; 1217 : static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
; 1218 : {
; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;
; 1223 :   p = (*bp) / 8; /*byte position*/
; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/
; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;
; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;
; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)
; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];
; 1241 : 
; 1242 :   (*bp) = p * 8;
; 1243 : 
; 1244 :   return error;
; 1245 : }
; 1246 : 
; 1247 : static unsigned lodepng_inflatev(ucvector* out,
; 1248 :                                  const unsigned char* in, size_t insize,
; 1249 :                                  const LodePNGDecompressSettings* settings)
; 1250 : {
; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;
; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/
; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)
; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
; 1264 :     BFINAL = readBitFromStream(&bp, in);
; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);
; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
; 1271 : 
; 1272 :     if(error) return error;
; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/
; 1277 : 
; 1278 :   return error;
; 1279 : }
; 1280 : 
; 1281 : unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
; 1282 :                          const unsigned char* in, size_t insize,
; 1283 :                          const LodePNGDecompressSettings* settings)
; 1284 : {
; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);
; 1289 :   *out = v.data;
; 1290 :   *outsize = v.size;
; 1291 :   return error;
; 1292 : }
; 1293 : 
; 1294 : static unsigned inflate(unsigned char** out, size_t* outsize,
; 1295 :                         const unsigned char* in, size_t insize,
; 1296 :                         const LodePNGDecompressSettings* settings)
; 1297 : {
; 1298 :   if(settings->custom_inflate)
; 1299 :   {
; 1300 :     return settings->custom_inflate(out, outsize, in, insize, settings);
; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }
; 1307 : 
; 1308 : #endif /*LODEPNG_COMPILE_DECODER*/
; 1309 : 
; 1310 : #ifdef LODEPNG_COMPILE_ENCODER
; 1311 : 
; 1312 : /* ////////////////////////////////////////////////////////////////////////// */
; 1313 : /* / Deflator (Compressor)                                                  / */
; 1314 : /* ////////////////////////////////////////////////////////////////////////// */
; 1315 : 
; 1316 : static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;
; 1317 : 
; 1318 : /*bitlen is the size in bits of the code*/
; 1319 : static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)
; 1320 : {
; 1321 :   addBitsToStreamReversed(bp, compressed, code, bitlen);
; 1322 : }
; 1323 : 
; 1324 : /*search the index in the array, that has the largest value smaller than or equal to the given value,
; 1325 : given array must be sorted (if no value is smaller, it returns the size of the given array)*/
; 1326 : static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)
; 1327 : {
; 1328 :   /*linear search implementation*/
; 1329 :   /*for(size_t i = 1; i < array_size; i++) if(array[i] > value) return i - 1;
; 1330 :   return array_size - 1;*/
; 1331 : 
; 1332 :   /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
; 1333 :   size_t left  = 1;
; 1334 :   size_t right = array_size - 1;
; 1335 :   while(left <= right)
; 1336 :   {
; 1337 :     size_t mid = (left + right) / 2;
; 1338 :     if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
; 1339 :     else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
; 1340 :     else return mid - 1;
; 1341 :   }
; 1342 :   return array_size - 1;
; 1343 : }
; 1344 : 
; 1345 : static void addLengthDistance(uivector* values, size_t length, size_t distance)
; 1346 : {
; 1347 :   /*values in encoded vector are those used by deflate:
; 1348 :   0-255: literal bytes
; 1349 :   256: end
; 1350 :   257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
; 1351 :   286-287: invalid*/
; 1352 : 
; 1353 :   unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
; 1354 :   unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
; 1355 :   unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
; 1356 :   unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);
; 1357 : 
; 1358 :   uivector_push_back(values, length_code + FIRST_LENGTH_CODE_INDEX);
; 1359 :   uivector_push_back(values, extra_length);
; 1360 :   uivector_push_back(values, dist_code);
; 1361 :   uivector_push_back(values, extra_distance);
; 1362 : }
; 1363 : 
; 1364 : static const unsigned HASH_NUM_VALUES = 65536;
; 1365 : static const unsigned HASH_NUM_CHARACTERS = 3;
; 1366 : static const unsigned HASH_SHIFT = 2;
; 1367 : /*
; 1368 : The HASH_NUM_CHARACTERS value is used to make encoding faster by using longer
; 1369 : sequences to generate a hash value from the stream bytes. Setting it to 3
; 1370 : gives exactly the same compression as the brute force method, since deflate's
; 1371 : run length encoding starts with lengths of 3. Setting it to higher values,
; 1372 : like 6, can make the encoding faster (not always though!), but will cause the
; 1373 : encoding to miss any length between 3 and this value, so that the compression
; 1374 : may be worse (but this can vary too depending on the image, sometimes it is
; 1375 : even a bit better instead).
; 1376 : The HASH_NUM_VALUES is the amount of unique possible hash values that
; 1377 : combinations of bytes can give, the higher it is the more memory is needed, but
; 1378 : if it's too low the advantage of hashing is gone.
; 1379 : */
; 1380 : 
; 1381 : typedef struct Hash
; 1382 : {
; 1383 :   int* head; /*hash value to head circular pos*/
; 1384 :   int* val; /*circular pos to hash value*/
; 1385 :   /*circular pos to prev circular pos*/
; 1386 :   unsigned short* chain;
; 1387 :   unsigned short* zeros;
; 1388 : } Hash;
; 1389 : 
; 1390 : static unsigned hash_init(Hash* hash, unsigned windowsize)
; 1391 : {
; 1392 :   unsigned i;
; 1393 :   hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
; 1394 :   hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
; 1395 :   hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1396 :   hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1397 : 
; 1398 :   if(!hash->head || !hash->val || !hash->chain || !hash->zeros) return 83; /*alloc fail*/
; 1399 : 
; 1400 :   /*initialize hash table*/
; 1401 :   for(i = 0; i < HASH_NUM_VALUES; i++) hash->head[i] = -1;
; 1402 :   for(i = 0; i < windowsize; i++) hash->val[i] = -1;
; 1403 :   for(i = 0; i < windowsize; i++) hash->chain[i] = i; /*same value as index indicates uninitialized*/
; 1404 : 
; 1405 :   return 0;
; 1406 : }
; 1407 : 
; 1408 : static void hash_cleanup(Hash* hash)
; 1409 : {
; 1410 :   lodepng_free(hash->head);
; 1411 :   lodepng_free(hash->val);
; 1412 :   lodepng_free(hash->chain);
; 1413 :   lodepng_free(hash->zeros);
; 1414 : }
; 1415 : 
; 1416 : static unsigned getHash(const unsigned char* data, size_t size, size_t pos)
; 1417 : {
; 1418 :   unsigned result = 0;
; 1419 :   size_t amount, i;
; 1420 :   if(pos >= size) return 0;
; 1421 :   amount = HASH_NUM_CHARACTERS;
; 1422 :   if(pos + amount >= size) amount = size - pos;
; 1423 :   for(i = 0; i < amount; i++) result ^= (data[pos + i] << (i * HASH_SHIFT));
; 1424 :   return result % HASH_NUM_VALUES;
; 1425 : }
; 1426 : 
; 1427 : static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)
; 1428 : {
; 1429 :   const unsigned char* start = data + pos;
; 1430 :   const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
; 1431 :   if(end > data + size) end = data + size;
; 1432 :   data = start;
; 1433 :   while (data != end && *data == 0) data++;
; 1434 :   /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
; 1435 :   return (unsigned)(data - start);
; 1436 : }
; 1437 : 
; 1438 : static void updateHashChain(Hash* hash, size_t pos, int hashval, unsigned windowsize)
; 1439 : {
; 1440 :   unsigned wpos = pos % windowsize;
; 1441 :   hash->val[wpos] = hashval;
; 1442 :   if(hash->head[hashval] != -1) hash->chain[wpos] = hash->head[hashval];
; 1443 :   hash->head[hashval] = wpos;
; 1444 : }
; 1445 : 
; 1446 : /*
; 1447 : LZ77-encode the data. Return value is error code. The input are raw bytes, the output
; 1448 : is in the form of unsigned integers with codes representing for example literal bytes, or
; 1449 : length/distance pairs.
; 1450 : It uses a hash table technique to let it encode faster. When doing LZ77 encoding, a
; 1451 : sliding window (of windowsize) is used, and all past bytes in that window can be used as
; 1452 : the "dictionary". A brute force search through all possible distances would be slow, and
; 1453 : this hash technique is one out of several ways to speed this up.
; 1454 : */
; 1455 : static unsigned encodeLZ77(uivector* out, Hash* hash,
; 1456 :                            const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
; 1457 :                            unsigned minmatch, unsigned nicematch, unsigned lazymatching)
; 1458 : {
; 1459 :   unsigned short numzeros = 0;
; 1460 :   int usezeros = windowsize >= 8192; /*for small window size, the 'max chain length' optimization does a better job*/
; 1461 :   unsigned pos, i, error = 0;
; 1462 :   /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
; 1463 :   unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8;
; 1464 :   unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;
; 1465 : 
; 1466 :   if(!error)
; 1467 :   {
; 1468 :     unsigned offset; /*the offset represents the distance in LZ77 terminology*/
; 1469 :     unsigned length;
; 1470 :     unsigned lazy = 0;
; 1471 :     unsigned lazylength = 0, lazyoffset = 0;
; 1472 :     unsigned hashval;
; 1473 :     unsigned current_offset, current_length;
; 1474 :     const unsigned char *lastptr, *foreptr, *backptr;
; 1475 :     unsigned short hashpos, prevpos;
; 1476 : 
; 1477 :     for(pos = inpos; pos < insize; pos++)
; 1478 :     {
; 1479 :       size_t wpos = pos % windowsize; /*position for in 'circular' hash buffers*/
; 1480 : 
; 1481 :       hashval = getHash(in, insize, pos);
; 1482 :       updateHashChain(hash, pos, hashval, windowsize);
; 1483 : 
; 1484 :       if(usezeros && hashval == 0)
; 1485 :       {
; 1486 :         numzeros = countZeros(in, insize, pos);
; 1487 :         hash->zeros[wpos] = numzeros;
; 1488 :       }
; 1489 : 
; 1490 :       /*the length and offset found for the current position*/
; 1491 :       length = 0;
; 1492 :       offset = 0;
; 1493 : 
; 1494 :       prevpos = hash->head[hashval];
; 1495 :       hashpos = hash->chain[prevpos];
; 1496 : 
; 1497 :       lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];
; 1498 : 
; 1499 :       /*search for the longest string*/
; 1500 :       if(hash->val[wpos] == (int)hashval)
; 1501 :       {
; 1502 :         unsigned chainlength = 0;
; 1503 :         for(;;)
; 1504 :         {
; 1505 :           /*stop when went completely around the circular buffer*/
; 1506 :           if(prevpos < wpos && hashpos > prevpos && hashpos <= wpos) break;
; 1507 :           if(prevpos > wpos && (hashpos <= wpos || hashpos > prevpos)) break;
; 1508 :           if(chainlength++ >= maxchainlength) break;
; 1509 : 
; 1510 :           current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;
; 1511 :           if(current_offset > 0)
; 1512 :           {
; 1513 :             /*test the next characters*/
; 1514 :             foreptr = &in[pos];
; 1515 :             backptr = &in[pos - current_offset];
; 1516 : 
; 1517 :             /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
; 1518 :             if(usezeros && hashval == 0 && hash->val[hashpos] == 0 /*hashval[hashpos] may be out of date*/)
; 1519 :             {
; 1520 :               unsigned short skip = hash->zeros[hashpos];
; 1521 :               if(skip > numzeros) skip = numzeros;
; 1522 :               backptr += skip;
; 1523 :               foreptr += skip;
; 1524 :             }
; 1525 : 
; 1526 :             /* multiple checks at once per array bounds check */
; 1527 :             while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
; 1528 :             {
; 1529 :               ++backptr;
; 1530 :               ++foreptr;
; 1531 :             }
; 1532 :             current_length = (unsigned)(foreptr - &in[pos]);
; 1533 : 
; 1534 :             if(current_length > length)
; 1535 :             {
; 1536 :               length = current_length; /*the longest length*/
; 1537 :               offset = current_offset; /*the offset that is related to this longest length*/
; 1538 :               /*jump out once a length of max length is found (speed gain)*/
; 1539 :               if(current_length >= nicematch || current_length == MAX_SUPPORTED_DEFLATE_LENGTH) break;
; 1540 :             }
; 1541 :           }
; 1542 : 
; 1543 :           if(hashpos == hash->chain[hashpos]) break;
; 1544 : 
; 1545 :           prevpos = hashpos;
; 1546 :           hashpos = hash->chain[hashpos];
; 1547 :         }
; 1548 :       }
; 1549 : 
; 1550 :       if(lazymatching)
; 1551 :       {
; 1552 :         if(!lazy && length >= 3 && length <= maxlazymatch && length < MAX_SUPPORTED_DEFLATE_LENGTH)
; 1553 :         {
; 1554 :           lazy = 1;
; 1555 :           lazylength = length;
; 1556 :           lazyoffset = offset;
; 1557 :           continue; /*try the next byte*/
; 1558 :         }
; 1559 :         if(lazy)
; 1560 :         {
; 1561 :           lazy = 0;
; 1562 :           if(pos == 0) ERROR_BREAK(81);
; 1563 :           if(length > lazylength + 1)
; 1564 :           {
; 1565 :             /*push the previous character as literal*/
; 1566 :             if(!uivector_push_back(out, in[pos - 1])) ERROR_BREAK(83 /*alloc fail*/);
; 1567 :           }
; 1568 :           else
; 1569 :           {
; 1570 :             length = lazylength;
; 1571 :             offset = lazyoffset;
; 1572 :             hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
; 1573 :             pos--;
; 1574 :           }
; 1575 :         }
; 1576 :       }
; 1577 :       if(length >= 3 && offset > windowsize) ERROR_BREAK(86 /*too big (or overflown negative) offset*/);
; 1578 : 
; 1579 :       /**encode it as length/distance pair or literal value**/
; 1580 :       if(length < 3) /*only lengths of 3 or higher are supported as length/distance pair*/
; 1581 :       {
; 1582 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1583 :       }
; 1584 :       else if(length < minmatch || (length == 3 && offset > 4096))
; 1585 :       {
; 1586 :         /*compensate for the fact that longer offsets have more extra bits, a
; 1587 :         length of only 3 may be not worth it then*/
; 1588 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1589 :       }
; 1590 :       else
; 1591 :       {
; 1592 :         addLengthDistance(out, length, offset);
; 1593 :         for(i = 1; i < length; i++)
; 1594 :         {
; 1595 :           pos++;
; 1596 :           hashval = getHash(in, insize, pos);
; 1597 :           updateHashChain(hash, pos, hashval, windowsize);
; 1598 :           if(usezeros && hashval == 0)
; 1599 :           {
; 1600 :             hash->zeros[pos % windowsize] = countZeros(in, insize, pos);
; 1601 :           }
; 1602 :         }
; 1603 :       }
; 1604 : 
; 1605 :     } /*end of the loop through each character of input*/
; 1606 :   } /*end of "if(!error)"*/
; 1607 : 
; 1608 :   return error;
; 1609 : }
; 1610 : 
; 1611 : /* /////////////////////////////////////////////////////////////////////////// */
; 1612 : 
; 1613 : static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)
; 1614 : {
; 1615 :   /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
; 1616 :   2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/
; 1617 : 
; 1618 :   size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
; 1619 :   unsigned datapos = 0;
; 1620 :   for(i = 0; i < numdeflateblocks; i++)
; 1621 :   {
; 1622 :     unsigned BFINAL, BTYPE, LEN, NLEN;
; 1623 :     unsigned char firstbyte;
; 1624 : 
; 1625 :     BFINAL = (i == numdeflateblocks - 1);
; 1626 :     BTYPE = 0;
; 1627 : 
; 1628 :     firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1) << 1) + ((BTYPE & 2) << 1));
; 1629 :     ucvector_push_back(out, firstbyte);
; 1630 : 
; 1631 :     LEN = 65535;
; 1632 :     if(datasize - datapos < 65535) LEN = (unsigned)datasize - datapos;
; 1633 :     NLEN = 65535 - LEN;
; 1634 : 
; 1635 :     ucvector_push_back(out, (unsigned char)(LEN % 256));
; 1636 :     ucvector_push_back(out, (unsigned char)(LEN / 256));
; 1637 :     ucvector_push_back(out, (unsigned char)(NLEN % 256));
; 1638 :     ucvector_push_back(out, (unsigned char)(NLEN / 256));
; 1639 : 
; 1640 :     /*Decompressed data*/
; 1641 :     for(j = 0; j < 65535 && datapos < datasize; j++)
; 1642 :     {
; 1643 :       ucvector_push_back(out, data[datapos++]);
; 1644 :     }
; 1645 :   }
; 1646 : 
; 1647 :   return 0;
; 1648 : }
; 1649 : 
; 1650 : /*
; 1651 : write the lz77-encoded data, which has lit, len and dist codes, to compressed stream using huffman trees.
; 1652 : tree_ll: the tree for lit and len codes.
; 1653 : tree_d: the tree for distance codes.
; 1654 : */
; 1655 : static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
; 1656 :                           const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
; 1657 : {
; 1658 :   size_t i = 0;
; 1659 :   for(i = 0; i < lz77_encoded->size; i++)
; 1660 :   {
; 1661 :     unsigned val = lz77_encoded->data[i];
; 1662 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_ll, val), HuffmanTree_getLength(tree_ll, val));
; 1663 :     if(val > 256) /*for a length code, 3 more things have to be added*/
; 1664 :     {
; 1665 :       unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
; 1666 :       unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
; 1667 :       unsigned length_extra_bits = lz77_encoded->data[++i];
; 1668 : 
; 1669 :       unsigned distance_code = lz77_encoded->data[++i];
; 1670 : 
; 1671 :       unsigned distance_index = distance_code;
; 1672 :       unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
; 1673 :       unsigned distance_extra_bits = lz77_encoded->data[++i];
; 1674 : 
; 1675 :       addBitsToStream(bp, out, length_extra_bits, n_length_extra_bits);
; 1676 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
; 1677 :                        HuffmanTree_getLength(tree_d, distance_code));
; 1678 :       addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
; 1679 :     }
; 1680 :   }
; 1681 : }
; 1682 : 
; 1683 : /*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
; 1684 : static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,
; 1685 :                                const unsigned char* data, size_t datapos, size_t dataend,
; 1686 :                                const LodePNGCompressSettings* settings, int final)
; 1687 : {
; 1688 :   unsigned error = 0;
; 1689 : 
; 1690 :   /*
; 1691 :   A block is compressed as follows: The PNG data is lz77 encoded, resulting in
; 1692 :   literal bytes and length/distance pairs. This is then huffman compressed with
; 1693 :   two huffman trees. One huffman tree is used for the lit and len values ("ll"),
; 1694 :   another huffman tree is used for the dist values ("d"). These two trees are
; 1695 :   stored using their code lengths, and to compress even more these code lengths
; 1696 :   are also run-length encoded and huffman compressed. This gives a huffman tree
; 1697 :   of code lengths "cl". The code lenghts used to describe this third tree are
; 1698 :   the code length code lengths ("clcl").
; 1699 :   */
; 1700 : 
; 1701 :   /*The lz77 encoded data, represented with integers since there will also be length and distance codes in it*/
; 1702 :   uivector lz77_encoded;
; 1703 :   HuffmanTree tree_ll; /*tree for lit,len values*/
; 1704 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1705 :   HuffmanTree tree_cl; /*tree for encoding the code lengths representing tree_ll and tree_d*/
; 1706 :   uivector frequencies_ll; /*frequency of lit,len codes*/
; 1707 :   uivector frequencies_d; /*frequency of dist codes*/
; 1708 :   uivector frequencies_cl; /*frequency of code length codes*/
; 1709 :   uivector bitlen_lld; /*lit,len,dist code lenghts (int bits), literally (without repeat codes).*/
; 1710 :   uivector bitlen_lld_e; /*bitlen_lld encoded with repeat codes (this is a rudemtary run length compression)*/
; 1711 :   /*bitlen_cl is the code length code lengths ("clcl"). The bit lengths of codes to represent tree_cl
; 1712 :   (these are written as is in the file, it would be crazy to compress these using yet another huffman
; 1713 :   tree that needs to be represented by yet another set of code lengths)*/
; 1714 :   uivector bitlen_cl;
; 1715 :   size_t datasize = dataend - datapos;
; 1716 : 
; 1717 :   /*
; 1718 :   Due to the huffman compression of huffman tree representations ("two levels"), there are some anologies:
; 1719 :   bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
; 1720 :   bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
; 1721 :   bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
; 1722 :   */
; 1723 : 
; 1724 :   unsigned BFINAL = final;
; 1725 :   size_t numcodes_ll, numcodes_d, i;
; 1726 :   unsigned HLIT, HDIST, HCLEN;
; 1727 : 
; 1728 :   uivector_init(&lz77_encoded);
; 1729 :   HuffmanTree_init(&tree_ll);
; 1730 :   HuffmanTree_init(&tree_d);
; 1731 :   HuffmanTree_init(&tree_cl);
; 1732 :   uivector_init(&frequencies_ll);
; 1733 :   uivector_init(&frequencies_d);
; 1734 :   uivector_init(&frequencies_cl);
; 1735 :   uivector_init(&bitlen_lld);
; 1736 :   uivector_init(&bitlen_lld_e);
; 1737 :   uivector_init(&bitlen_cl);
; 1738 : 
; 1739 :   /*This while loop never loops due to a break at the end, it is here to
; 1740 :   allow breaking out of it to the cleanup phase on error conditions.*/
; 1741 :   while(!error)
; 1742 :   {
; 1743 :     if(settings->use_lz77)
; 1744 :     {
; 1745 :       error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1746 :                          settings->minmatch, settings->nicematch, settings->lazymatching);
; 1747 :       if(error) break;
; 1748 :     }
; 1749 :     else
; 1750 :     {
; 1751 :       if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83 /*alloc fail*/);
; 1752 :       for(i = datapos; i < dataend; i++) lz77_encoded.data[i] = data[i]; /*no LZ77, but still will be Huffman compressed*/
; 1753 :     }
; 1754 : 
; 1755 :     if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1756 :     if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1757 : 
; 1758 :     /*Count the frequencies of lit, len and dist codes*/
; 1759 :     for(i = 0; i < lz77_encoded.size; i++)
; 1760 :     {
; 1761 :       unsigned symbol = lz77_encoded.data[i];
; 1762 :       frequencies_ll.data[symbol]++;
; 1763 :       if(symbol > 256)
; 1764 :       {
; 1765 :         unsigned dist = lz77_encoded.data[i + 2];
; 1766 :         frequencies_d.data[dist]++;
; 1767 :         i += 3;
; 1768 :       }
; 1769 :     }
; 1770 :     frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/
; 1771 : 
; 1772 :     /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
; 1773 :     error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
; 1774 :     if(error) break;
; 1775 :     /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
; 1776 :     error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
; 1777 :     if(error) break;
; 1778 : 
; 1779 :     numcodes_ll = tree_ll.numcodes; if(numcodes_ll > 286) numcodes_ll = 286;
; 1780 :     numcodes_d = tree_d.numcodes; if(numcodes_d > 30) numcodes_d = 30;
; 1781 :     /*store the code lengths of both generated trees in bitlen_lld*/
; 1782 :     for(i = 0; i < numcodes_ll; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
; 1783 :     for(i = 0; i < numcodes_d; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));
; 1784 : 
; 1785 :     /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
; 1786 :     17 (3-10 zeroes), 18 (11-138 zeroes)*/
; 1787 :     for(i = 0; i < (unsigned)bitlen_lld.size; i++)
; 1788 :     {
; 1789 :       unsigned j = 0; /*amount of repititions*/
; 1790 :       while(i + j + 1 < (unsigned)bitlen_lld.size && bitlen_lld.data[i + j + 1] == bitlen_lld.data[i]) j++;
; 1791 : 
; 1792 :       if(bitlen_lld.data[i] == 0 && j >= 2) /*repeat code for zeroes*/
; 1793 :       {
; 1794 :         j++; /*include the first zero*/
; 1795 :         if(j <= 10) /*repeat code 17 supports max 10 zeroes*/
; 1796 :         {
; 1797 :           uivector_push_back(&bitlen_lld_e, 17);
; 1798 :           uivector_push_back(&bitlen_lld_e, j - 3);
; 1799 :         }
; 1800 :         else /*repeat code 18 supports max 138 zeroes*/
; 1801 :         {
; 1802 :           if(j > 138) j = 138;
; 1803 :           uivector_push_back(&bitlen_lld_e, 18);
; 1804 :           uivector_push_back(&bitlen_lld_e, j - 11);
; 1805 :         }
; 1806 :         i += (j - 1);
; 1807 :       }
; 1808 :       else if(j >= 3) /*repeat code for value other than zero*/
; 1809 :       {
; 1810 :         size_t k;
; 1811 :         unsigned num = j / 6, rest = j % 6;
; 1812 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1813 :         for(k = 0; k < num; k++)
; 1814 :         {
; 1815 :           uivector_push_back(&bitlen_lld_e, 16);
; 1816 :           uivector_push_back(&bitlen_lld_e, 6 - 3);
; 1817 :         }
; 1818 :         if(rest >= 3)
; 1819 :         {
; 1820 :           uivector_push_back(&bitlen_lld_e, 16);
; 1821 :           uivector_push_back(&bitlen_lld_e, rest - 3);
; 1822 :         }
; 1823 :         else j -= rest;
; 1824 :         i += j;
; 1825 :       }
; 1826 :       else /*too short to benefit from repeat code*/
; 1827 :       {
; 1828 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1829 :       }
; 1830 :     }
; 1831 : 
; 1832 :     /*generate tree_cl, the huffmantree of huffmantrees*/
; 1833 : 
; 1834 :     if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1835 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1836 :     {
; 1837 :       frequencies_cl.data[bitlen_lld_e.data[i]]++;
; 1838 :       /*after a repeat code come the bits that specify the number of repetitions,
; 1839 :       those don't need to be in the frequencies_cl calculation*/
; 1840 :       if(bitlen_lld_e.data[i] >= 16) i++;
; 1841 :     }
; 1842 : 
; 1843 :     error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
; 1844 :                                             frequencies_cl.size, frequencies_cl.size, 7);
; 1845 :     if(error) break;
; 1846 : 
; 1847 :     if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
; 1848 :     for(i = 0; i < tree_cl.numcodes; i++)
; 1849 :     {
; 1850 :       /*lenghts of code length tree is in the order as specified by deflate*/
; 1851 :       bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
; 1852 :     }
; 1853 :     while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
; 1854 :     {
; 1855 :       /*remove zeros at the end, but minimum size must be 4*/
; 1856 :       if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
; 1857 :     }
; 1858 :     if(error) break;
; 1859 : 
; 1860 :     /*
; 1861 :     Write everything into the output
; 1862 : 
; 1863 :     After the BFINAL and BTYPE, the dynamic block consists out of the following:
; 1864 :     - 5 bits HLIT, 5 bits HDIST, 4 bits HCLEN
; 1865 :     - (HCLEN+4)*3 bits code lengths of code length alphabet
; 1866 :     - HLIT + 257 code lenghts of lit/length alphabet (encoded using the code length
; 1867 :       alphabet, + possible repetition codes 16, 17, 18)
; 1868 :     - HDIST + 1 code lengths of distance alphabet (encoded using the code length
; 1869 :       alphabet, + possible repetition codes 16, 17, 18)
; 1870 :     - compressed data
; 1871 :     - 256 (end code)
; 1872 :     */
; 1873 : 
; 1874 :     /*Write block type*/
; 1875 :     addBitToStream(bp, out, BFINAL);
; 1876 :     addBitToStream(bp, out, 0); /*first bit of BTYPE "dynamic"*/
; 1877 :     addBitToStream(bp, out, 1); /*second bit of BTYPE "dynamic"*/
; 1878 : 
; 1879 :     /*write the HLIT, HDIST and HCLEN values*/
; 1880 :     HLIT = (unsigned)(numcodes_ll - 257);
; 1881 :     HDIST = (unsigned)(numcodes_d - 1);
; 1882 :     HCLEN = (unsigned)bitlen_cl.size - 4;
; 1883 :     /*trim zeroes for HCLEN. HLIT and HDIST were already trimmed at tree creation*/
; 1884 :     while(!bitlen_cl.data[HCLEN + 4 - 1] && HCLEN > 0) HCLEN--;
; 1885 :     addBitsToStream(bp, out, HLIT, 5);
; 1886 :     addBitsToStream(bp, out, HDIST, 5);
; 1887 :     addBitsToStream(bp, out, HCLEN, 4);
; 1888 : 
; 1889 :     /*write the code lenghts of the code length alphabet*/
; 1890 :     for(i = 0; i < HCLEN + 4; i++) addBitsToStream(bp, out, bitlen_cl.data[i], 3);
; 1891 : 
; 1892 :     /*write the lenghts of the lit/len AND the dist alphabet*/
; 1893 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1894 :     {
; 1895 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
; 1896 :                        HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
; 1897 :       /*extra bits of repeat codes*/
; 1898 :       if(bitlen_lld_e.data[i] == 16) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 2);
; 1899 :       else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
; 1900 :       else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
; 1901 :     }
; 1902 : 
; 1903 :     /*write the compressed data symbols*/
; 1904 :     writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1905 :     /*error: the length of the end code 256 must be larger than 0*/
; 1906 :     if(HuffmanTree_getLength(&tree_ll, 256) == 0) ERROR_BREAK(64);
; 1907 : 
; 1908 :     /*write the end code*/
; 1909 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1910 : 
; 1911 :     break; /*end of error-while*/
; 1912 :   }
; 1913 : 
; 1914 :   /*cleanup*/
; 1915 :   uivector_cleanup(&lz77_encoded);
; 1916 :   HuffmanTree_cleanup(&tree_ll);
; 1917 :   HuffmanTree_cleanup(&tree_d);
; 1918 :   HuffmanTree_cleanup(&tree_cl);
; 1919 :   uivector_cleanup(&frequencies_ll);
; 1920 :   uivector_cleanup(&frequencies_d);
; 1921 :   uivector_cleanup(&frequencies_cl);
; 1922 :   uivector_cleanup(&bitlen_lld_e);
; 1923 :   uivector_cleanup(&bitlen_lld);
; 1924 :   uivector_cleanup(&bitlen_cl);
; 1925 : 
; 1926 :   return error;
; 1927 : }
; 1928 : 
; 1929 : static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,
; 1930 :                              const unsigned char* data,
; 1931 :                              size_t datapos, size_t dataend,
; 1932 :                              const LodePNGCompressSettings* settings, int final)
; 1933 : {
; 1934 :   HuffmanTree tree_ll; /*tree for literal values and length codes*/
; 1935 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1936 : 
; 1937 :   unsigned BFINAL = final;
; 1938 :   unsigned error = 0;
; 1939 :   size_t i;
; 1940 : 
; 1941 :   HuffmanTree_init(&tree_ll);
; 1942 :   HuffmanTree_init(&tree_d);
; 1943 : 
; 1944 :   generateFixedLitLenTree(&tree_ll);
; 1945 :   generateFixedDistanceTree(&tree_d);
; 1946 : 
; 1947 :   addBitToStream(bp, out, BFINAL);
; 1948 :   addBitToStream(bp, out, 1); /*first bit of BTYPE*/
; 1949 :   addBitToStream(bp, out, 0); /*second bit of BTYPE*/
; 1950 : 
; 1951 :   if(settings->use_lz77) /*LZ77 encoded*/
; 1952 :   {
; 1953 :     uivector lz77_encoded;
; 1954 :     uivector_init(&lz77_encoded);
; 1955 :     error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1956 :                        settings->minmatch, settings->nicematch, settings->lazymatching);
; 1957 :     if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1958 :     uivector_cleanup(&lz77_encoded);
; 1959 :   }
; 1960 :   else /*no LZ77, but still will be Huffman compressed*/
; 1961 :   {
; 1962 :     for(i = datapos; i < dataend; i++)
; 1963 :     {
; 1964 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
; 1965 :     }
; 1966 :   }
; 1967 :   /*add END code*/
; 1968 :   if(!error) addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1969 : 
; 1970 :   /*cleanup*/
; 1971 :   HuffmanTree_cleanup(&tree_ll);
; 1972 :   HuffmanTree_cleanup(&tree_d);
; 1973 : 
; 1974 :   return error;
; 1975 : }
; 1976 : 
; 1977 : static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
; 1978 :                                  const LodePNGCompressSettings* settings)
; 1979 : {
; 1980 :   unsigned error = 0;
; 1981 :   size_t i, blocksize, numdeflateblocks;
; 1982 :   size_t bp = 0; /*the bit pointer*/
; 1983 :   Hash hash;
; 1984 : 
; 1985 :   if(settings->btype > 2) return 61;
; 1986 :   else if(settings->btype == 0) return deflateNoCompression(out, in, insize);
; 1987 :   else if(settings->btype == 1) blocksize = insize;
; 1988 :   else /*if(settings->btype == 2)*/
; 1989 :   {
; 1990 :     blocksize = insize / 8 + 8;
; 1991 :     if(blocksize < 65535) blocksize = 65535;
; 1992 :   }
; 1993 : 
; 1994 :   numdeflateblocks = (insize + blocksize - 1) / blocksize;
; 1995 :   if(numdeflateblocks == 0) numdeflateblocks = 1;
; 1996 : 
; 1997 :   error = hash_init(&hash, settings->windowsize);
; 1998 :   if(error) return error;
; 1999 : 
; 2000 :   for(i = 0; i < numdeflateblocks && !error; i++)
; 2001 :   {
; 2002 :     int final = i == numdeflateblocks - 1;
; 2003 :     size_t start = i * blocksize;
; 2004 :     size_t end = start + blocksize;
; 2005 :     if(end > insize) end = insize;
; 2006 : 
; 2007 :     if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
; 2008 :     else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
; 2009 :   }
; 2010 : 
; 2011 :   hash_cleanup(&hash);
; 2012 : 
; 2013 :   return error;
; 2014 : }
; 2015 : 
; 2016 : unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
; 2017 :                          const unsigned char* in, size_t insize,
; 2018 :                          const LodePNGCompressSettings* settings)
; 2019 : {
; 2020 :   unsigned error;
; 2021 :   ucvector v;
; 2022 :   ucvector_init_buffer(&v, *out, *outsize);
; 2023 :   error = lodepng_deflatev(&v, in, insize, settings);
; 2024 :   *out = v.data;
; 2025 :   *outsize = v.size;
; 2026 :   return error;
; 2027 : }
; 2028 : 
; 2029 : static unsigned deflate(unsigned char** out, size_t* outsize,
; 2030 :                         const unsigned char* in, size_t insize,
; 2031 :                         const LodePNGCompressSettings* settings)
; 2032 : {
; 2033 :   if(settings->custom_deflate)
; 2034 :   {
; 2035 :     return settings->custom_deflate(out, outsize, in, insize, settings);
; 2036 :   }
; 2037 :   else
; 2038 :   {
; 2039 :     return lodepng_deflate(out, outsize, in, insize, settings);
; 2040 :   }
; 2041 : }
; 2042 : 
; 2043 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2044 : 
; 2045 : /* ////////////////////////////////////////////////////////////////////////// */
; 2046 : /* / Adler32                                                                  */
; 2047 : /* ////////////////////////////////////////////////////////////////////////// */
; 2048 : 
; 2049 : static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
; 2050 : {
; 2051 :    unsigned s1 = adler & 0xffff;
; 2052 :    unsigned s2 = (adler >> 16) & 0xffff;
; 2053 : 
; 2054 :   while(len > 0)
; 2055 :   {
; 2056 :     /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
; 2057 :     unsigned amount = len > 5550 ? 5550 : len;
; 2058 :     len -= amount;
; 2059 :     while(amount > 0)
; 2060 :     {
; 2061 :       s1 += (*data++);
; 2062 :       s2 += s1;
; 2063 :       amount--;
; 2064 :     }
; 2065 :     s1 %= 65521;
; 2066 :     s2 %= 65521;
; 2067 :   }
; 2068 : 
; 2069 :   return (s2 << 16) | s1;
; 2070 : }
; 2071 : 
; 2072 : /*Return the adler32 of the bytes data[0..len-1]*/
; 2073 : static unsigned adler32(const unsigned char* data, unsigned len)
; 2074 : {
; 2075 :   return update_adler32(1L, data, len);
; 2076 : }
; 2077 : 
; 2078 : /* ////////////////////////////////////////////////////////////////////////// */
; 2079 : /* / Zlib                                                                   / */
; 2080 : /* ////////////////////////////////////////////////////////////////////////// */
; 2081 : 
; 2082 : #ifdef LODEPNG_COMPILE_DECODER
; 2083 : 
; 2084 : unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2085 :                                  size_t insize, const LodePNGDecompressSettings* settings)
; 2086 : {
; 2087 :   unsigned error = 0;
; 2088 :   unsigned CM, CINFO, FDICT;
; 2089 : 
; 2090 :   if(insize < 2) return 53; /*error, size of zlib data too small*/
; 2091 :   /*read information from zlib header*/
; 2092 :   if((in[0] * 256 + in[1]) % 31 != 0)
; 2093 :   {
; 2094 :     /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
; 2095 :     return 24;
; 2096 :   }
; 2097 : 
; 2098 :   CM = in[0] & 15;
; 2099 :   CINFO = (in[0] >> 4) & 15;
; 2100 :   /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
; 2101 :   FDICT = (in[1] >> 5) & 1;
; 2102 :   /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/
; 2103 : 
; 2104 :   if(CM != 8 || CINFO > 7)
; 2105 :   {
; 2106 :     /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
; 2107 :     return 25;
; 2108 :   }
; 2109 :   if(FDICT != 0)
; 2110 :   {
; 2111 :     /*error: the specification of PNG says about the zlib stream:
; 2112 :       "The additional flags shall not specify a preset dictionary."*/
; 2113 :     return 26;
; 2114 :   }
; 2115 : 
; 2116 :   error = inflate(out, outsize, in + 2, insize - 2, settings);
; 2117 :   if(error) return error;
; 2118 : 
; 2119 :   if(!settings->ignore_adler32)
; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/
; 2124 :   }
; 2125 : 
; 2126 :   return 0; /*no error*/
; 2127 : }
; 2128 : 
; 2129 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2130 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2131 : {
; 2132 :   if(settings->custom_zlib)
; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2134 :   else
; 2135 :     return lodepng_zlib_decompress(out, outsize, in, insize, settings);
; 2136 : }
; 2137 : 
; 2138 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2139 : 
; 2140 : #ifdef LODEPNG_COMPILE_ENCODER
; 2141 : 
; 2142 : unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2143 :                                size_t insize, const LodePNGCompressSettings* settings)
; 2144 : {
; 2145 :   /*initially, *out must be NULL and outsize 0, if you just give some random *out
; 2146 :   that's pointing to a non allocated buffer, this'll crash*/
; 2147 :   ucvector outv;
; 2148 :   size_t i;
; 2149 :   unsigned error;
; 2150 :   unsigned char* deflatedata = 0;
; 2151 :   size_t deflatesize = 0;
; 2152 : 
; 2153 :   unsigned ADLER32;
; 2154 :   /*zlib data: 1 byte CMF (CM+CINFO), 1 byte FLG, deflate data, 4 byte ADLER32 checksum of the Decompressed data*/
; 2155 :   unsigned CMF = 120; /*0b01111000: CM 8, CINFO 7. With CINFO 7, any window size up to 32768 can be used.*/
; 2156 :   unsigned FLEVEL = 0;
; 2157 :   unsigned FDICT = 0;
; 2158 :   unsigned CMFFLG = 256 * CMF + FDICT * 32 + FLEVEL * 64;
; 2159 :   unsigned FCHECK = 31 - CMFFLG % 31;
; 2160 :   CMFFLG += FCHECK;
; 2161 : 
; 2162 :   /*ucvector-controlled version of the output buffer, for dynamic array*/
; 2163 :   ucvector_init_buffer(&outv, *out, *outsize);
; 2164 : 
; 2165 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG / 256));
; 2166 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG % 256));
; 2167 : 
; 2168 :   error = deflate(&deflatedata, &deflatesize, in, insize, settings);
; 2169 : 
; 2170 :   if(!error)
; 2171 :   {
; 2172 :     ADLER32 = adler32(in, (unsigned)insize);
; 2173 :     for(i = 0; i < deflatesize; i++) ucvector_push_back(&outv, deflatedata[i]);
; 2174 :     lodepng_free(deflatedata);
; 2175 :     lodepng_add32bitInt(&outv, ADLER32);
; 2176 :   }
; 2177 : 
; 2178 :   *out = outv.data;
; 2179 :   *outsize = outv.size;
; 2180 : 
; 2181 :   return error;
; 2182 : }
; 2183 : 
; 2184 : /* compress using the default or custom zlib function */
; 2185 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2186 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2187 : {
; 2188 :   if(settings->custom_zlib)
; 2189 :   {
; 2190 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2191 :   }
; 2192 :   else
; 2193 :   {
; 2194 :     return lodepng_zlib_compress(out, outsize, in, insize, settings);
; 2195 :   }
; 2196 : }
; 2197 : 
; 2198 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2199 : 
; 2200 : #else /*no LODEPNG_COMPILE_ZLIB*/
; 2201 : 
; 2202 : #ifdef LODEPNG_COMPILE_DECODER
; 2203 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2204 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2205 : {
; 2206 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2207 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2208 : }
; 2209 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2210 : #ifdef LODEPNG_COMPILE_ENCODER
; 2211 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2212 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2213 : {
; 2214 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2215 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2216 : }
; 2217 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2218 : 
; 2219 : #endif /*LODEPNG_COMPILE_ZLIB*/
; 2220 : 
; 2221 : /* ////////////////////////////////////////////////////////////////////////// */
; 2222 : 
; 2223 : #ifdef LODEPNG_COMPILE_ENCODER
; 2224 : 
; 2225 : /*this is a good tradeoff between speed and compression ratio*/
; 2226 : #define DEFAULT_WINDOWSIZE 2048
; 2227 : 
; 2228 : void lodepng_compress_settings_init(LodePNGCompressSettings* settings)
; 2229 : {
; 2230 :   /*compress with dynamic huffman tree (not in the mathematical sense, just not the predefined one)*/
; 2231 :   settings->btype = 2;
; 2232 :   settings->use_lz77 = 1;
; 2233 :   settings->windowsize = DEFAULT_WINDOWSIZE;
; 2234 :   settings->minmatch = 3;
; 2235 :   settings->nicematch = 128;
; 2236 :   settings->lazymatching = 1;
; 2237 : 
; 2238 :   settings->custom_zlib = 0;
; 2239 :   settings->custom_deflate = 0;
; 2240 :   settings->custom_context = 0;
; 2241 : }
; 2242 : 
; 2243 : const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 3, 128, 1, 0, 0, 0};
; 2244 : 
; 2245 : 
; 2246 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2247 : 
; 2248 : #ifdef LODEPNG_COMPILE_DECODER
; 2249 : 
; 2250 : void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings)
; 2251 : {
; 2252 :   settings->ignore_adler32 = 0;
; 2253 : 
; 2254 :   settings->custom_zlib = 0;
; 2255 :   settings->custom_inflate = 0;
; 2256 :   settings->custom_context = 0;
; 2257 : }
; 2258 : 
; 2259 : const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0, 0, 0};
; 2260 : 
; 2261 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2262 : 
; 2263 : /* ////////////////////////////////////////////////////////////////////////// */
; 2264 : /* ////////////////////////////////////////////////////////////////////////// */
; 2265 : /* // End of Zlib related code. Begin of PNG related code.                 // */
; 2266 : /* ////////////////////////////////////////////////////////////////////////// */
; 2267 : /* ////////////////////////////////////////////////////////////////////////// */
; 2268 : 
; 2269 : #ifdef LODEPNG_COMPILE_PNG
; 2270 : 
; 2271 : /* ////////////////////////////////////////////////////////////////////////// */
; 2272 : /* / CRC32                                                                  / */
; 2273 : /* ////////////////////////////////////////////////////////////////////////// */
; 2274 : 
; 2275 : /* CRC polynomial: 0xedb88320 */
; 2276 : static unsigned lodepng_crc32_table[256] = {
; 2277 :            0u, 1996959894u, 3993919788u, 2567524794u,  124634137u, 1886057615u, 3915621685u, 2657392035u,
; 2278 :    249268274u, 2044508324u, 3772115230u, 2547177864u,  162941995u, 2125561021u, 3887607047u, 2428444049u,
; 2279 :    498536548u, 1789927666u, 4089016648u, 2227061214u,  450548861u, 1843258603u, 4107580753u, 2211677639u,
; 2280 :    325883990u, 1684777152u, 4251122042u, 2321926636u,  335633487u, 1661365465u, 4195302755u, 2366115317u,
; 2281 :    997073096u, 1281953886u, 3579855332u, 2724688242u, 1006888145u, 1258607687u, 3524101629u, 2768942443u,
; 2282 :    901097722u, 1119000684u, 3686517206u, 2898065728u,  853044451u, 1172266101u, 3705015759u, 2882616665u,
; 2283 :    651767980u, 1373503546u, 3369554304u, 3218104598u,  565507253u, 1454621731u, 3485111705u, 3099436303u,
; 2284 :    671266974u, 1594198024u, 3322730930u, 2970347812u,  795835527u, 1483230225u, 3244367275u, 3060149565u,
; 2285 :   1994146192u,   31158534u, 2563907772u, 4023717930u, 1907459465u,  112637215u, 2680153253u, 3904427059u,
; 2286 :   2013776290u,  251722036u, 2517215374u, 3775830040u, 2137656763u,  141376813u, 2439277719u, 3865271297u,
; 2287 :   1802195444u,  476864866u, 2238001368u, 4066508878u, 1812370925u,  453092731u, 2181625025u, 4111451223u,
; 2288 :   1706088902u,  314042704u, 2344532202u, 4240017532u, 1658658271u,  366619977u, 2362670323u, 4224994405u,
; 2289 :   1303535960u,  984961486u, 2747007092u, 3569037538u, 1256170817u, 1037604311u, 2765210733u, 3554079995u,
; 2290 :   1131014506u,  879679996u, 2909243462u, 3663771856u, 1141124467u,  855842277u, 2852801631u, 3708648649u,
; 2291 :   1342533948u,  654459306u, 3188396048u, 3373015174u, 1466479909u,  544179635u, 3110523913u, 3462522015u,
; 2292 :   1591671054u,  702138776u, 2966460450u, 3352799412u, 1504918807u,  783551873u, 3082640443u, 3233442989u,
; 2293 :   3988292384u, 2596254646u,   62317068u, 1957810842u, 3939845945u, 2647816111u,   81470997u, 1943803523u,
; 2294 :   3814918930u, 2489596804u,  225274430u, 2053790376u, 3826175755u, 2466906013u,  167816743u, 2097651377u,
; 2295 :   4027552580u, 2265490386u,  503444072u, 1762050814u, 4150417245u, 2154129355u,  426522225u, 1852507879u,
; 2296 :   4275313526u, 2312317920u,  282753626u, 1742555852u, 4189708143u, 2394877945u,  397917763u, 1622183637u,
; 2297 :   3604390888u, 2714866558u,  953729732u, 1340076626u, 3518719985u, 2797360999u, 1068828381u, 1219638859u,
; 2298 :   3624741850u, 2936675148u,  906185462u, 1090812512u, 3747672003u, 2825379669u,  829329135u, 1181335161u,
; 2299 :   3412177804u, 3160834842u,  628085408u, 1382605366u, 3423369109u, 3138078467u,  570562233u, 1426400815u,
; 2300 :   3317316542u, 2998733608u,  733239954u, 1555261956u, 3268935591u, 3050360625u,  752459403u, 1541320221u,
; 2301 :   2607071920u, 3965973030u, 1969922972u,   40735498u, 2617837225u, 3943577151u, 1913087877u,   83908371u,
; 2302 :   2512341634u, 3803740692u, 2075208622u,  213261112u, 2463272603u, 3855990285u, 2094854071u,  198958881u,
; 2303 :   2262029012u, 4057260610u, 1759359992u,  534414190u, 2176718541u, 4139329115u, 1873836001u,  414664567u,
; 2304 :   2282248934u, 4279200368u, 1711684554u,  285281116u, 2405801727u, 4167216745u, 1634467795u,  376229701u,
; 2305 :   2685067896u, 3608007406u, 1308918612u,  956543938u, 2808555105u, 3495958263u, 1231636301u, 1047427035u,
; 2306 :   2932959818u, 3654703836u, 1088359270u,  936918000u, 2847714899u, 3736837829u, 1202900863u,  817233897u,
; 2307 :   3183342108u, 3401237130u, 1404277552u,  615818150u, 3134207493u, 3453421203u, 1423857449u,  601450431u,
; 2308 :   3009837614u, 3294710456u, 1567103746u,  711928724u, 3020668471u, 3272380065u, 1510334235u,  755167117u
; 2309 : };
; 2310 : 
; 2311 : /*Return the CRC of the bytes buf[0..len-1].*/
; 2312 : unsigned lodepng_crc32(const unsigned char* buf, size_t len)
; 2313 : {
; 2314 :   unsigned c = 0xffffffffL;
; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)
; 2318 :   {
; 2319 :     c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
; 2320 :   }
; 2321 :   return c ^ 0xffffffffL;
; 2322 : }
; 2323 : 
; 2324 : /* ////////////////////////////////////////////////////////////////////////// */
; 2325 : /* / Reading and writing single bits and bytes from/to stream for LodePNG   / */
; 2326 : /* ////////////////////////////////////////////////////////////////////////// */
; 2327 : 
; 2328 : static unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream)
; 2329 : {
; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);
; 2331 :   (*bitpointer)++;
; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)
; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
; 2354 :   }
; 2355 :   (*bitpointer)++;
; 2356 : }
; 2357 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2358 : 
; 2359 : static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2360 : {
; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));
; 2363 :   else         bitstream[(*bitpointer) >> 3] |=  (1 << (7 - ((*bitpointer) & 0x7)));
; 2364 :   (*bitpointer)++;
; 2365 : }
; 2366 : 
; 2367 : /* ////////////////////////////////////////////////////////////////////////// */
; 2368 : /* / PNG chunks                                                             / */
; 2369 : /* ////////////////////////////////////////////////////////////////////////// */
; 2370 : 
; 2371 : unsigned lodepng_chunk_length(const unsigned char* chunk)
; 2372 : {
; 2373 :   return lodepng_read32bitInt(&chunk[0]);
; 2374 : }
; 2375 : 
; 2376 : void lodepng_chunk_type(char type[5], const unsigned char* chunk)
; 2377 : {
; 2378 :   unsigned i;
; 2379 :   for(i = 0; i < 4; i++) type[i] = chunk[4 + i];
; 2380 :   type[4] = 0; /*null termination char*/
; 2381 : }
; 2382 : 
; 2383 : unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type)
; 2384 : {
; 2385 :   if(strlen(type) != 4) return 0;
; 2386 :   return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);
; 2387 : }
; 2388 : 
; 2389 : unsigned char lodepng_chunk_ancillary(const unsigned char* chunk)
; 2390 : {
; 2391 :   return((chunk[4] & 32) != 0);
; 2392 : }
; 2393 : 
; 2394 : unsigned char lodepng_chunk_private(const unsigned char* chunk)
; 2395 : {
; 2396 :   return((chunk[6] & 32) != 0);
; 2397 : }
; 2398 : 
; 2399 : unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk)
; 2400 : {
; 2401 :   return((chunk[7] & 32) != 0);
; 2402 : }
; 2403 : 
; 2404 : unsigned char* lodepng_chunk_data(unsigned char* chunk)
; 2405 : {
; 2406 :   return &chunk[8];
; 2407 : }
; 2408 : 
; 2409 : const unsigned char* lodepng_chunk_data_const(const unsigned char* chunk)
; 2410 : {
; 2411 :   return &chunk[8];
; 2412 : }
; 2413 : 
; 2414 : unsigned lodepng_chunk_check_crc(const unsigned char* chunk)
; 2415 : {
; 2416 :   unsigned length = lodepng_chunk_length(chunk);
; 2417 :   unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);
; 2418 :   /*the CRC is taken of the data and the 4 chunk type letters, not the length*/
; 2419 :   unsigned checksum = lodepng_crc32(&chunk[4], length + 4);
; 2420 :   if(CRC != checksum) return 1;
; 2421 :   else return 0;
; 2422 : }
; 2423 : 
; 2424 : void lodepng_chunk_generate_crc(unsigned char* chunk)
; 2425 : {
; 2426 :   unsigned length = lodepng_chunk_length(chunk);
; 2427 :   unsigned CRC = lodepng_crc32(&chunk[4], length + 4);
; 2428 :   lodepng_set32bitInt(chunk + 8 + length, CRC);
; 2429 : }
; 2430 : 
; 2431 : unsigned char* lodepng_chunk_next(unsigned char* chunk)
; 2432 : {
; 2433 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2434 :   return &chunk[total_chunk_length];
; 2435 : }
; 2436 : 
; 2437 : const unsigned char* lodepng_chunk_next_const(const unsigned char* chunk)
; 2438 : {
; 2439 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2440 :   return &chunk[total_chunk_length];
; 2441 : }
; 2442 : 
; 2443 : unsigned lodepng_chunk_append(unsigned char** out, size_t* outlength, const unsigned char* chunk)
; 2444 : {
; 2445 :   unsigned i;
; 2446 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2447 :   unsigned char *chunk_start, *new_buffer;
; 2448 :   size_t new_length = (*outlength) + total_chunk_length;
; 2449 :   if(new_length < total_chunk_length || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2450 : 
; 2451 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2452 :   if(!new_buffer) return 83; /*alloc fail*/
; 2453 :   (*out) = new_buffer;
; 2454 :   (*outlength) = new_length;
; 2455 :   chunk_start = &(*out)[new_length - total_chunk_length];
; 2456 : 
; 2457 :   for(i = 0; i < total_chunk_length; i++) chunk_start[i] = chunk[i];
; 2458 : 
; 2459 :   return 0;
; 2460 : }
; 2461 : 
; 2462 : unsigned lodepng_chunk_create(unsigned char** out, size_t* outlength, unsigned length,
; 2463 :                               const char* type, const unsigned char* data)
; 2464 : {
; 2465 :   unsigned i;
; 2466 :   unsigned char *chunk, *new_buffer;
; 2467 :   size_t new_length = (*outlength) + length + 12;
; 2468 :   if(new_length < length + 12 || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2469 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2470 :   if(!new_buffer) return 83; /*alloc fail*/
; 2471 :   (*out) = new_buffer;
; 2472 :   (*outlength) = new_length;
; 2473 :   chunk = &(*out)[(*outlength) - length - 12];
; 2474 : 
; 2475 :   /*1: length*/
; 2476 :   lodepng_set32bitInt(chunk, (unsigned)length);
; 2477 : 
; 2478 :   /*2: chunk name (4 letters)*/
; 2479 :   chunk[4] = type[0];
; 2480 :   chunk[5] = type[1];
; 2481 :   chunk[6] = type[2];
; 2482 :   chunk[7] = type[3];
; 2483 : 
; 2484 :   /*3: the data*/
; 2485 :   for(i = 0; i < length; i++) chunk[8 + i] = data[i];
; 2486 : 
; 2487 :   /*4: CRC (of the chunkname characters and the data)*/
; 2488 :   lodepng_chunk_generate_crc(chunk);
; 2489 : 
; 2490 :   return 0;
; 2491 : }
; 2492 : 
; 2493 : /* ////////////////////////////////////////////////////////////////////////// */
; 2494 : /* / Color types and such                                                   / */
; 2495 : /* ////////////////////////////////////////////////////////////////////////// */
; 2496 : 
; 2497 : /*return type is a LodePNG error code*/
; 2498 : static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) /*bd = bitdepth*/
; 2499 : {
; 2500 :   switch(colortype)
; 2501 :   {
; 2502 :     case 0: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)) return 37; break; /*grey*/
; 2503 :     case 2: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGB*/
; 2504 :     case 3: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )) return 37; break; /*palette*/
; 2505 :     case 4: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*grey + alpha*/
; 2506 :     case 6: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGBA*/
; 2507 :     default: return 31;
; 2508 :   }
; 2509 :   return 0; /*allowed color type / bits combination*/
; 2510 : }
; 2511 : 
; 2512 : static unsigned getNumColorChannels(LodePNGColorType colortype)
; 2513 : {
; 2514 :   switch(colortype)
; 2515 :   {
; 2516 :     case 0: return 1; /*grey*/
; 2517 :     case 2: return 3; /*RGB*/
; 2518 :     case 3: return 1; /*palette*/
; 2519 :     case 4: return 2; /*grey + alpha*/
; 2520 :     case 6: return 4; /*RGBA*/
; 2521 :   }
; 2522 :   return 0; /*unexisting color type*/
; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;
; 2529 : }
; 2530 : 
; 2531 : /* ////////////////////////////////////////////////////////////////////////// */
; 2532 : 
; 2533 : void lodepng_color_mode_init(LodePNGColorMode* info)
; 2534 : {
; 2535 :   info->key_defined = 0;
; 2536 :   info->key_r = info->key_g = info->key_b = 0;
; 2537 :   info->colortype = LCT_RGBA;
; 2538 :   info->bitdepth = 8;
; 2539 :   info->palette = 0;
; 2540 :   info->palettesize = 0;
; 2541 : }
; 2542 : 
; 2543 : void lodepng_color_mode_cleanup(LodePNGColorMode* info)
; 2544 : {
; 2545 :   lodepng_palette_clear(info);
; 2546 : }
; 2547 : 
; 2548 : unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
; 2549 : {
; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;
; 2553 :   if(source->palette)
; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);
; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];
; 2558 :   }
; 2559 :   return 0;
; 2560 : }
; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);
; 2585 :   info->palette = 0;
; 2586 :   info->palettesize = 0;
; 2587 : }
; 2588 : 
; 2589 : unsigned lodepng_palette_add(LodePNGColorMode* info,
; 2590 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2591 : {
; 2592 :   unsigned char* data;
; 2593 :   /*the same resize technique as C++ std::vectors is used, and here it's made so that for a palette with
; 2594 :   the max of 256 colors, it'll have the exact alloc size*/
; 2595 :   if(!info->palette) /*allocate palette if empty*/
; 2596 :   {
; 2597 :     /*room for 256 colors with 4 bytes each*/
; 2598 :     data = (unsigned char*)lodepng_realloc(info->palette, 1024);
; 2599 :     if(!data) return 83; /*alloc fail*/
; 2600 :     else info->palette = data;
; 2601 :   }
; 2602 :   info->palette[4 * info->palettesize + 0] = r;
; 2603 :   info->palette[4 * info->palettesize + 1] = g;
; 2604 :   info->palette[4 * info->palettesize + 2] = b;
; 2605 :   info->palette[4 * info->palettesize + 3] = a;
; 2606 :   info->palettesize++;
; 2607 :   return 0;
; 2608 : }
; 2609 : 
; 2610 : unsigned lodepng_get_bpp(const LodePNGColorMode* info)
; 2611 : {
; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }
; 2615 : 
; 2616 : unsigned lodepng_get_channels(const LodePNGColorMode* info)
; 2617 : {
; 2618 :   return getNumColorChannels(info->colortype);
; 2619 : }
; 2620 : 
; 2621 : unsigned lodepng_is_greyscale_type(const LodePNGColorMode* info)
; 2622 : {
; 2623 :   return info->colortype == LCT_GREY || info->colortype == LCT_GREY_ALPHA;
; 2624 : }
; 2625 : 
; 2626 : unsigned lodepng_is_alpha_type(const LodePNGColorMode* info)
; 2627 : {
; 2628 :   return (info->colortype & 4) != 0; /*4 or 6*/
; 2629 : }
; 2630 : 
; 2631 : unsigned lodepng_is_palette_type(const LodePNGColorMode* info)
; 2632 : {
; 2633 :   return info->colortype == LCT_PALETTE;
; 2634 : }
; 2635 : 
; 2636 : unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info)
; 2637 : {
; 2638 :   size_t i;
; 2639 :   for(i = 0; i < info->palettesize; i++)
; 2640 :   {
; 2641 :     if(info->palette[i * 4 + 3] < 255) return 1;
; 2642 :   }
; 2643 :   return 0;
; 2644 : }
; 2645 : 
; 2646 : unsigned lodepng_can_have_alpha(const LodePNGColorMode* info)
; 2647 : {
; 2648 :   return info->key_defined
; 2649 :       || lodepng_is_alpha_type(info)
; 2650 :       || lodepng_has_palette_alpha(info);
; 2651 : }
; 2652 : 
; 2653 : size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode* color)
; 2654 : {
; 2655 :   return (w * h * lodepng_get_bpp(color) + 7) / 8;

  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _mode_in$[ebp]
  00031	e8 00 00 00 00	 call	 ?lodepng_get_bpp@@YAIPBULodePNGColorMode@@@Z ; lodepng_get_bpp
  00036	8b c8		 mov	 ecx, eax
  00038	0f af 4d 10	 imul	 ecx, DWORD PTR _w$[ebp]
  0003c	0f af 4d 14	 imul	 ecx, DWORD PTR _h$[ebp]
  00040	83 c1 07	 add	 ecx, 7
  00043	c1 e9 03	 shr	 ecx, 3

; 3411 :   {
; 3412 :     size_t numbytes = lodepng_get_raw_size(w, h, mode_in);
; 3413 :     for(i = 0; i < numbytes; i++) out[i] = in[i];

  00046	85 c9		 test	 ecx, ecx
  00048	74 16		 je	 SHORT $LN23@lodepng_co
  0004a	8b 45 fc	 mov	 eax, DWORD PTR _in$1$[ebp]
  0004d	2b c6		 sub	 eax, esi
  0004f	89 45 fc	 mov	 DWORD PTR _in$1$[ebp], eax
$LL60@lodepng_co:
  00052	8a 04 30	 mov	 al, BYTE PTR [eax+esi]
  00055	88 06		 mov	 BYTE PTR [esi], al
  00057	8b 45 fc	 mov	 eax, DWORD PTR _in$1$[ebp]
  0005a	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  0005d	49		 dec	 ecx
  0005e	75 f2		 jne	 SHORT $LL60@lodepng_co
$LN23@lodepng_co:
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi

; 3414 :     return error;

  00062	33 c0		 xor	 eax, eax
  00064	5b		 pop	 ebx

; 3466 : }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
$LN26@lodepng_co:

; 3415 :   }
; 3416 : 
; 3417 :   if(mode_out->colortype == LCT_PALETTE)

  00069	83 3f 03	 cmp	 DWORD PTR [edi], 3
  0006c	0f 85 7c 00 00
	00		 jne	 $LN18@lodepng_co

; 3418 :   {
; 3419 :     size_t palsize = 1 << mode_out->bitdepth;

  00072	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00075	ba 01 00 00 00	 mov	 edx, 1
  0007a	d3 e2		 shl	 edx, cl
  0007c	0f 57 c0	 xorps	 xmm0, xmm0

; 2656 : }
; 2657 : 
; 2658 : size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)
; 2659 : {
; 2660 :   return (w * h * lodepng_get_bpp_lct(colortype, bitdepth) + 7) / 8;
; 2661 : }
; 2662 : 
; 2663 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2664 : 
; 2665 : static void LodePNGUnknownChunks_init(LodePNGInfo* info)
; 2666 : {
; 2667 :   unsigned i;
; 2668 :   for(i = 0; i < 3; i++) info->unknown_chunks_data[i] = 0;
; 2669 :   for(i = 0; i < 3; i++) info->unknown_chunks_size[i] = 0;
; 2670 : }
; 2671 : 
; 2672 : static void LodePNGUnknownChunks_cleanup(LodePNGInfo* info)
; 2673 : {
; 2674 :   unsigned i;
; 2675 :   for(i = 0; i < 3; i++) lodepng_free(info->unknown_chunks_data[i]);
; 2676 : }
; 2677 : 
; 2678 : static unsigned LodePNGUnknownChunks_copy(LodePNGInfo* dest, const LodePNGInfo* src)
; 2679 : {
; 2680 :   unsigned i;
; 2681 : 
; 2682 :   LodePNGUnknownChunks_cleanup(dest);
; 2683 : 
; 2684 :   for(i = 0; i < 3; i++)
; 2685 :   {
; 2686 :     size_t j;
; 2687 :     dest->unknown_chunks_size[i] = src->unknown_chunks_size[i];
; 2688 :     dest->unknown_chunks_data[i] = (unsigned char*)lodepng_malloc(src->unknown_chunks_size[i]);
; 2689 :     if(!dest->unknown_chunks_data[i] && dest->unknown_chunks_size[i]) return 83; /*alloc fail*/
; 2690 :     for(j = 0; j < src->unknown_chunks_size[i]; j++)
; 2691 :     {
; 2692 :       dest->unknown_chunks_data[i][j] = src->unknown_chunks_data[i][j];
; 2693 :     }
; 2694 :   }
; 2695 : 
; 2696 :   return 0;
; 2697 : }
; 2698 : 
; 2699 : /******************************************************************************/
; 2700 : 
; 2701 : static void LodePNGText_init(LodePNGInfo* info)
; 2702 : {
; 2703 :   info->text_num = 0;
; 2704 :   info->text_keys = NULL;
; 2705 :   info->text_strings = NULL;
; 2706 : }
; 2707 : 
; 2708 : static void LodePNGText_cleanup(LodePNGInfo* info)
; 2709 : {
; 2710 :   size_t i;
; 2711 :   for(i = 0; i < info->text_num; i++)
; 2712 :   {
; 2713 :     string_cleanup(&info->text_keys[i]);
; 2714 :     string_cleanup(&info->text_strings[i]);
; 2715 :   }
; 2716 :   lodepng_free(info->text_keys);
; 2717 :   lodepng_free(info->text_strings);
; 2718 : }
; 2719 : 
; 2720 : static unsigned LodePNGText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2721 : {
; 2722 :   size_t i = 0;
; 2723 :   dest->text_keys = 0;
; 2724 :   dest->text_strings = 0;
; 2725 :   dest->text_num = 0;
; 2726 :   for(i = 0; i < source->text_num; i++)
; 2727 :   {
; 2728 :     CERROR_TRY_RETURN(lodepng_add_text(dest, source->text_keys[i], source->text_strings[i]));
; 2729 :   }
; 2730 :   return 0;
; 2731 : }
; 2732 : 
; 2733 : void lodepng_clear_text(LodePNGInfo* info)
; 2734 : {
; 2735 :   LodePNGText_cleanup(info);
; 2736 : }
; 2737 : 
; 2738 : unsigned lodepng_add_text(LodePNGInfo* info, const char* key, const char* str)
; 2739 : {
; 2740 :   char** new_keys = (char**)(lodepng_realloc(info->text_keys, sizeof(char*) * (info->text_num + 1)));
; 2741 :   char** new_strings = (char**)(lodepng_realloc(info->text_strings, sizeof(char*) * (info->text_num + 1)));
; 2742 :   if(!new_keys || !new_strings)
; 2743 :   {
; 2744 :     lodepng_free(new_keys);
; 2745 :     lodepng_free(new_strings);
; 2746 :     return 83; /*alloc fail*/
; 2747 :   }
; 2748 : 
; 2749 :   info->text_num++;
; 2750 :   info->text_keys = new_keys;
; 2751 :   info->text_strings = new_strings;
; 2752 : 
; 2753 :   string_init(&info->text_keys[info->text_num - 1]);
; 2754 :   string_set(&info->text_keys[info->text_num - 1], key);
; 2755 : 
; 2756 :   string_init(&info->text_strings[info->text_num - 1]);
; 2757 :   string_set(&info->text_strings[info->text_num - 1], str);
; 2758 : 
; 2759 :   return 0;
; 2760 : }
; 2761 : 
; 2762 : /******************************************************************************/
; 2763 : 
; 2764 : static void LodePNGIText_init(LodePNGInfo* info)
; 2765 : {
; 2766 :   info->itext_num = 0;
; 2767 :   info->itext_keys = NULL;
; 2768 :   info->itext_langtags = NULL;
; 2769 :   info->itext_transkeys = NULL;
; 2770 :   info->itext_strings = NULL;
; 2771 : }
; 2772 : 
; 2773 : static void LodePNGIText_cleanup(LodePNGInfo* info)
; 2774 : {
; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)
; 2777 :   {
; 2778 :     string_cleanup(&info->itext_keys[i]);
; 2779 :     string_cleanup(&info->itext_langtags[i]);
; 2780 :     string_cleanup(&info->itext_transkeys[i]);
; 2781 :     string_cleanup(&info->itext_strings[i]);
; 2782 :   }
; 2783 :   lodepng_free(info->itext_keys);
; 2784 :   lodepng_free(info->itext_langtags);
; 2785 :   lodepng_free(info->itext_transkeys);
; 2786 :   lodepng_free(info->itext_strings);
; 2787 : }
; 2788 : 
; 2789 : static unsigned LodePNGIText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2790 : {
; 2791 :   size_t i = 0;
; 2792 :   dest->itext_keys = 0;
; 2793 :   dest->itext_langtags = 0;
; 2794 :   dest->itext_transkeys = 0;
; 2795 :   dest->itext_strings = 0;
; 2796 :   dest->itext_num = 0;
; 2797 :   for(i = 0; i < source->itext_num; i++)
; 2798 :   {
; 2799 :     CERROR_TRY_RETURN(lodepng_add_itext(dest, source->itext_keys[i], source->itext_langtags[i],
; 2800 :                                         source->itext_transkeys[i], source->itext_strings[i]));
; 2801 :   }
; 2802 :   return 0;
; 2803 : }
; 2804 : 
; 2805 : void lodepng_clear_itext(LodePNGInfo* info)
; 2806 : {
; 2807 :   LodePNGIText_cleanup(info);
; 2808 : }
; 2809 : 
; 2810 : unsigned lodepng_add_itext(LodePNGInfo* info, const char* key, const char* langtag,
; 2811 :                            const char* transkey, const char* str)
; 2812 : {
; 2813 :   char** new_keys = (char**)(lodepng_realloc(info->itext_keys, sizeof(char*) * (info->itext_num + 1)));
; 2814 :   char** new_langtags = (char**)(lodepng_realloc(info->itext_langtags, sizeof(char*) * (info->itext_num + 1)));
; 2815 :   char** new_transkeys = (char**)(lodepng_realloc(info->itext_transkeys, sizeof(char*) * (info->itext_num + 1)));
; 2816 :   char** new_strings = (char**)(lodepng_realloc(info->itext_strings, sizeof(char*) * (info->itext_num + 1)));
; 2817 :   if(!new_keys || !new_langtags || !new_transkeys || !new_strings)
; 2818 :   {
; 2819 :     lodepng_free(new_keys);
; 2820 :     lodepng_free(new_langtags);
; 2821 :     lodepng_free(new_transkeys);
; 2822 :     lodepng_free(new_strings);
; 2823 :     return 83; /*alloc fail*/
; 2824 :   }
; 2825 : 
; 2826 :   info->itext_num++;
; 2827 :   info->itext_keys = new_keys;
; 2828 :   info->itext_langtags = new_langtags;
; 2829 :   info->itext_transkeys = new_transkeys;
; 2830 :   info->itext_strings = new_strings;
; 2831 : 
; 2832 :   string_init(&info->itext_keys[info->itext_num - 1]);
; 2833 :   string_set(&info->itext_keys[info->itext_num - 1], key);
; 2834 : 
; 2835 :   string_init(&info->itext_langtags[info->itext_num - 1]);
; 2836 :   string_set(&info->itext_langtags[info->itext_num - 1], langtag);
; 2837 : 
; 2838 :   string_init(&info->itext_transkeys[info->itext_num - 1]);
; 2839 :   string_set(&info->itext_transkeys[info->itext_num - 1], transkey);
; 2840 : 
; 2841 :   string_init(&info->itext_strings[info->itext_num - 1]);
; 2842 :   string_set(&info->itext_strings[info->itext_num - 1], str);
; 2843 : 
; 2844 :   return 0;
; 2845 : }
; 2846 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2847 : 
; 2848 : void lodepng_info_init(LodePNGInfo* info)
; 2849 : {
; 2850 :   lodepng_color_mode_init(&info->color);
; 2851 :   info->interlace_method = 0;
; 2852 :   info->compression_method = 0;
; 2853 :   info->filter_method = 0;
; 2854 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2855 :   info->background_defined = 0;
; 2856 :   info->background_r = info->background_g = info->background_b = 0;
; 2857 : 
; 2858 :   LodePNGText_init(info);
; 2859 :   LodePNGIText_init(info);
; 2860 : 
; 2861 :   info->time_defined = 0;
; 2862 :   info->phys_defined = 0;
; 2863 : 
; 2864 :   LodePNGUnknownChunks_init(info);
; 2865 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2866 : }
; 2867 : 
; 2868 : void lodepng_info_cleanup(LodePNGInfo* info)
; 2869 : {
; 2870 :   lodepng_color_mode_cleanup(&info->color);
; 2871 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2872 :   LodePNGText_cleanup(info);
; 2873 :   LodePNGIText_cleanup(info);
; 2874 : 
; 2875 :   LodePNGUnknownChunks_cleanup(info);
; 2876 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2877 : }
; 2878 : 
; 2879 : unsigned lodepng_info_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2880 : {
; 2881 :   lodepng_info_cleanup(dest);
; 2882 :   *dest = *source;
; 2883 :   lodepng_color_mode_init(&dest->color);
; 2884 :   CERROR_TRY_RETURN(lodepng_color_mode_copy(&dest->color, &source->color));
; 2885 : 
; 2886 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2887 :   CERROR_TRY_RETURN(LodePNGText_copy(dest, source));
; 2888 :   CERROR_TRY_RETURN(LodePNGIText_copy(dest, source));
; 2889 : 
; 2890 :   LodePNGUnknownChunks_init(dest);
; 2891 :   CERROR_TRY_RETURN(LodePNGUnknownChunks_copy(dest, source));
; 2892 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2893 :   return 0;
; 2894 : }
; 2895 : 
; 2896 : void lodepng_info_swap(LodePNGInfo* a, LodePNGInfo* b)
; 2897 : {
; 2898 :   LodePNGInfo temp = *a;
; 2899 :   *a = *b;
; 2900 :   *b = temp;
; 2901 : }
; 2902 : 
; 2903 : /* ////////////////////////////////////////////////////////////////////////// */
; 2904 : 
; 2905 : /*index: bitgroup index, bits: bitgroup size(1, 2 or 4, in: bitgroup value, out: octet array to add bits to*/
; 2906 : static void addColorBits(unsigned char* out, size_t index, unsigned bits, unsigned in)
; 2907 : {
; 2908 :   /*p = the partial index in the byte, e.g. with 4 palettebits it is 0 for first half or 1 for second half*/
; 2909 :   unsigned p = index % (8 / bits);
; 2910 :   in &= (1 << bits) - 1; /*filter out any other bits of the input value*/
; 2911 :   in = in << (bits * (8 / bits - p - 1));
; 2912 :   if(p == 0) out[index * bits / 8] = in;
; 2913 :   else out[index * bits / 8] |= in;
; 2914 : }
; 2915 : 
; 2916 : typedef struct ColorTree ColorTree;
; 2917 : 
; 2918 : /*
; 2919 : One node of a color tree
; 2920 : This is the data structure used to count the number of unique colors and to get a palette
; 2921 : index for a color. It's like an octree, but because the alpha channel is used too, each
; 2922 : node has 16 instead of 8 children.
; 2923 : */
; 2924 : struct ColorTree
; 2925 : {
; 2926 :   ColorTree* children[16]; /*up to 16 pointers to ColorTree of next level*/
; 2927 :   int index; /*the payload. Only has a meaningful value if this is in the last level*/
; 2928 : };
; 2929 : 
; 2930 : static void color_tree_init(ColorTree* tree)
; 2931 : {
; 2932 :   int i;
; 2933 :   for(i = 0; i < 16; i++) tree->children[i] = 0;

  0007f	66 0f d6 45 ac	 movq	 QWORD PTR _tree$[ebp], xmm0
  00084	66 0f d6 45 b4	 movq	 QWORD PTR _tree$[ebp+8], xmm0

; 3420 :     if(mode_out->palettesize < palsize) palsize = mode_out->palettesize;

  00089	39 57 0c	 cmp	 DWORD PTR [edi+12], edx

; 2656 : }
; 2657 : 
; 2658 : size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)
; 2659 : {
; 2660 :   return (w * h * lodepng_get_bpp_lct(colortype, bitdepth) + 7) / 8;
; 2661 : }
; 2662 : 
; 2663 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2664 : 
; 2665 : static void LodePNGUnknownChunks_init(LodePNGInfo* info)
; 2666 : {
; 2667 :   unsigned i;
; 2668 :   for(i = 0; i < 3; i++) info->unknown_chunks_data[i] = 0;
; 2669 :   for(i = 0; i < 3; i++) info->unknown_chunks_size[i] = 0;
; 2670 : }
; 2671 : 
; 2672 : static void LodePNGUnknownChunks_cleanup(LodePNGInfo* info)
; 2673 : {
; 2674 :   unsigned i;
; 2675 :   for(i = 0; i < 3; i++) lodepng_free(info->unknown_chunks_data[i]);
; 2676 : }
; 2677 : 
; 2678 : static unsigned LodePNGUnknownChunks_copy(LodePNGInfo* dest, const LodePNGInfo* src)
; 2679 : {
; 2680 :   unsigned i;
; 2681 : 
; 2682 :   LodePNGUnknownChunks_cleanup(dest);
; 2683 : 
; 2684 :   for(i = 0; i < 3; i++)
; 2685 :   {
; 2686 :     size_t j;
; 2687 :     dest->unknown_chunks_size[i] = src->unknown_chunks_size[i];
; 2688 :     dest->unknown_chunks_data[i] = (unsigned char*)lodepng_malloc(src->unknown_chunks_size[i]);
; 2689 :     if(!dest->unknown_chunks_data[i] && dest->unknown_chunks_size[i]) return 83; /*alloc fail*/
; 2690 :     for(j = 0; j < src->unknown_chunks_size[i]; j++)
; 2691 :     {
; 2692 :       dest->unknown_chunks_data[i][j] = src->unknown_chunks_data[i][j];
; 2693 :     }
; 2694 :   }
; 2695 : 
; 2696 :   return 0;
; 2697 : }
; 2698 : 
; 2699 : /******************************************************************************/
; 2700 : 
; 2701 : static void LodePNGText_init(LodePNGInfo* info)
; 2702 : {
; 2703 :   info->text_num = 0;
; 2704 :   info->text_keys = NULL;
; 2705 :   info->text_strings = NULL;
; 2706 : }
; 2707 : 
; 2708 : static void LodePNGText_cleanup(LodePNGInfo* info)
; 2709 : {
; 2710 :   size_t i;
; 2711 :   for(i = 0; i < info->text_num; i++)
; 2712 :   {
; 2713 :     string_cleanup(&info->text_keys[i]);
; 2714 :     string_cleanup(&info->text_strings[i]);
; 2715 :   }
; 2716 :   lodepng_free(info->text_keys);
; 2717 :   lodepng_free(info->text_strings);
; 2718 : }
; 2719 : 
; 2720 : static unsigned LodePNGText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2721 : {
; 2722 :   size_t i = 0;
; 2723 :   dest->text_keys = 0;
; 2724 :   dest->text_strings = 0;
; 2725 :   dest->text_num = 0;
; 2726 :   for(i = 0; i < source->text_num; i++)
; 2727 :   {
; 2728 :     CERROR_TRY_RETURN(lodepng_add_text(dest, source->text_keys[i], source->text_strings[i]));
; 2729 :   }
; 2730 :   return 0;
; 2731 : }
; 2732 : 
; 2733 : void lodepng_clear_text(LodePNGInfo* info)
; 2734 : {
; 2735 :   LodePNGText_cleanup(info);
; 2736 : }
; 2737 : 
; 2738 : unsigned lodepng_add_text(LodePNGInfo* info, const char* key, const char* str)
; 2739 : {
; 2740 :   char** new_keys = (char**)(lodepng_realloc(info->text_keys, sizeof(char*) * (info->text_num + 1)));
; 2741 :   char** new_strings = (char**)(lodepng_realloc(info->text_strings, sizeof(char*) * (info->text_num + 1)));
; 2742 :   if(!new_keys || !new_strings)
; 2743 :   {
; 2744 :     lodepng_free(new_keys);
; 2745 :     lodepng_free(new_strings);
; 2746 :     return 83; /*alloc fail*/
; 2747 :   }
; 2748 : 
; 2749 :   info->text_num++;
; 2750 :   info->text_keys = new_keys;
; 2751 :   info->text_strings = new_strings;
; 2752 : 
; 2753 :   string_init(&info->text_keys[info->text_num - 1]);
; 2754 :   string_set(&info->text_keys[info->text_num - 1], key);
; 2755 : 
; 2756 :   string_init(&info->text_strings[info->text_num - 1]);
; 2757 :   string_set(&info->text_strings[info->text_num - 1], str);
; 2758 : 
; 2759 :   return 0;
; 2760 : }
; 2761 : 
; 2762 : /******************************************************************************/
; 2763 : 
; 2764 : static void LodePNGIText_init(LodePNGInfo* info)
; 2765 : {
; 2766 :   info->itext_num = 0;
; 2767 :   info->itext_keys = NULL;
; 2768 :   info->itext_langtags = NULL;
; 2769 :   info->itext_transkeys = NULL;
; 2770 :   info->itext_strings = NULL;
; 2771 : }
; 2772 : 
; 2773 : static void LodePNGIText_cleanup(LodePNGInfo* info)
; 2774 : {
; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)
; 2777 :   {
; 2778 :     string_cleanup(&info->itext_keys[i]);
; 2779 :     string_cleanup(&info->itext_langtags[i]);
; 2780 :     string_cleanup(&info->itext_transkeys[i]);
; 2781 :     string_cleanup(&info->itext_strings[i]);
; 2782 :   }
; 2783 :   lodepng_free(info->itext_keys);
; 2784 :   lodepng_free(info->itext_langtags);
; 2785 :   lodepng_free(info->itext_transkeys);
; 2786 :   lodepng_free(info->itext_strings);
; 2787 : }
; 2788 : 
; 2789 : static unsigned LodePNGIText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2790 : {
; 2791 :   size_t i = 0;
; 2792 :   dest->itext_keys = 0;
; 2793 :   dest->itext_langtags = 0;
; 2794 :   dest->itext_transkeys = 0;
; 2795 :   dest->itext_strings = 0;
; 2796 :   dest->itext_num = 0;
; 2797 :   for(i = 0; i < source->itext_num; i++)
; 2798 :   {
; 2799 :     CERROR_TRY_RETURN(lodepng_add_itext(dest, source->itext_keys[i], source->itext_langtags[i],
; 2800 :                                         source->itext_transkeys[i], source->itext_strings[i]));
; 2801 :   }
; 2802 :   return 0;
; 2803 : }
; 2804 : 
; 2805 : void lodepng_clear_itext(LodePNGInfo* info)
; 2806 : {
; 2807 :   LodePNGIText_cleanup(info);
; 2808 : }
; 2809 : 
; 2810 : unsigned lodepng_add_itext(LodePNGInfo* info, const char* key, const char* langtag,
; 2811 :                            const char* transkey, const char* str)
; 2812 : {
; 2813 :   char** new_keys = (char**)(lodepng_realloc(info->itext_keys, sizeof(char*) * (info->itext_num + 1)));
; 2814 :   char** new_langtags = (char**)(lodepng_realloc(info->itext_langtags, sizeof(char*) * (info->itext_num + 1)));
; 2815 :   char** new_transkeys = (char**)(lodepng_realloc(info->itext_transkeys, sizeof(char*) * (info->itext_num + 1)));
; 2816 :   char** new_strings = (char**)(lodepng_realloc(info->itext_strings, sizeof(char*) * (info->itext_num + 1)));
; 2817 :   if(!new_keys || !new_langtags || !new_transkeys || !new_strings)
; 2818 :   {
; 2819 :     lodepng_free(new_keys);
; 2820 :     lodepng_free(new_langtags);
; 2821 :     lodepng_free(new_transkeys);
; 2822 :     lodepng_free(new_strings);
; 2823 :     return 83; /*alloc fail*/
; 2824 :   }
; 2825 : 
; 2826 :   info->itext_num++;
; 2827 :   info->itext_keys = new_keys;
; 2828 :   info->itext_langtags = new_langtags;
; 2829 :   info->itext_transkeys = new_transkeys;
; 2830 :   info->itext_strings = new_strings;
; 2831 : 
; 2832 :   string_init(&info->itext_keys[info->itext_num - 1]);
; 2833 :   string_set(&info->itext_keys[info->itext_num - 1], key);
; 2834 : 
; 2835 :   string_init(&info->itext_langtags[info->itext_num - 1]);
; 2836 :   string_set(&info->itext_langtags[info->itext_num - 1], langtag);
; 2837 : 
; 2838 :   string_init(&info->itext_transkeys[info->itext_num - 1]);
; 2839 :   string_set(&info->itext_transkeys[info->itext_num - 1], transkey);
; 2840 : 
; 2841 :   string_init(&info->itext_strings[info->itext_num - 1]);
; 2842 :   string_set(&info->itext_strings[info->itext_num - 1], str);
; 2843 : 
; 2844 :   return 0;
; 2845 : }
; 2846 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2847 : 
; 2848 : void lodepng_info_init(LodePNGInfo* info)
; 2849 : {
; 2850 :   lodepng_color_mode_init(&info->color);
; 2851 :   info->interlace_method = 0;
; 2852 :   info->compression_method = 0;
; 2853 :   info->filter_method = 0;
; 2854 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2855 :   info->background_defined = 0;
; 2856 :   info->background_r = info->background_g = info->background_b = 0;
; 2857 : 
; 2858 :   LodePNGText_init(info);
; 2859 :   LodePNGIText_init(info);
; 2860 : 
; 2861 :   info->time_defined = 0;
; 2862 :   info->phys_defined = 0;
; 2863 : 
; 2864 :   LodePNGUnknownChunks_init(info);
; 2865 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2866 : }
; 2867 : 
; 2868 : void lodepng_info_cleanup(LodePNGInfo* info)
; 2869 : {
; 2870 :   lodepng_color_mode_cleanup(&info->color);
; 2871 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2872 :   LodePNGText_cleanup(info);
; 2873 :   LodePNGIText_cleanup(info);
; 2874 : 
; 2875 :   LodePNGUnknownChunks_cleanup(info);
; 2876 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2877 : }
; 2878 : 
; 2879 : unsigned lodepng_info_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2880 : {
; 2881 :   lodepng_info_cleanup(dest);
; 2882 :   *dest = *source;
; 2883 :   lodepng_color_mode_init(&dest->color);
; 2884 :   CERROR_TRY_RETURN(lodepng_color_mode_copy(&dest->color, &source->color));
; 2885 : 
; 2886 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2887 :   CERROR_TRY_RETURN(LodePNGText_copy(dest, source));
; 2888 :   CERROR_TRY_RETURN(LodePNGIText_copy(dest, source));
; 2889 : 
; 2890 :   LodePNGUnknownChunks_init(dest);
; 2891 :   CERROR_TRY_RETURN(LodePNGUnknownChunks_copy(dest, source));
; 2892 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2893 :   return 0;
; 2894 : }
; 2895 : 
; 2896 : void lodepng_info_swap(LodePNGInfo* a, LodePNGInfo* b)
; 2897 : {
; 2898 :   LodePNGInfo temp = *a;
; 2899 :   *a = *b;
; 2900 :   *b = temp;
; 2901 : }
; 2902 : 
; 2903 : /* ////////////////////////////////////////////////////////////////////////// */
; 2904 : 
; 2905 : /*index: bitgroup index, bits: bitgroup size(1, 2 or 4, in: bitgroup value, out: octet array to add bits to*/
; 2906 : static void addColorBits(unsigned char* out, size_t index, unsigned bits, unsigned in)
; 2907 : {
; 2908 :   /*p = the partial index in the byte, e.g. with 4 palettebits it is 0 for first half or 1 for second half*/
; 2909 :   unsigned p = index % (8 / bits);
; 2910 :   in &= (1 << bits) - 1; /*filter out any other bits of the input value*/
; 2911 :   in = in << (bits * (8 / bits - p - 1));
; 2912 :   if(p == 0) out[index * bits / 8] = in;
; 2913 :   else out[index * bits / 8] |= in;
; 2914 : }
; 2915 : 
; 2916 : typedef struct ColorTree ColorTree;
; 2917 : 
; 2918 : /*
; 2919 : One node of a color tree
; 2920 : This is the data structure used to count the number of unique colors and to get a palette
; 2921 : index for a color. It's like an octree, but because the alpha channel is used too, each
; 2922 : node has 16 instead of 8 children.
; 2923 : */
; 2924 : struct ColorTree
; 2925 : {
; 2926 :   ColorTree* children[16]; /*up to 16 pointers to ColorTree of next level*/
; 2927 :   int index; /*the payload. Only has a meaningful value if this is in the last level*/
; 2928 : };
; 2929 : 
; 2930 : static void color_tree_init(ColorTree* tree)
; 2931 : {
; 2932 :   int i;
; 2933 :   for(i = 0; i < 16; i++) tree->children[i] = 0;

  0008c	66 0f d6 45 bc	 movq	 QWORD PTR _tree$[ebp+16], xmm0

; 3420 :     if(mode_out->palettesize < palsize) palsize = mode_out->palettesize;

  00091	0f 42 57 0c	 cmovb	 edx, DWORD PTR [edi+12]

; 2656 : }
; 2657 : 
; 2658 : size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)
; 2659 : {
; 2660 :   return (w * h * lodepng_get_bpp_lct(colortype, bitdepth) + 7) / 8;
; 2661 : }
; 2662 : 
; 2663 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2664 : 
; 2665 : static void LodePNGUnknownChunks_init(LodePNGInfo* info)
; 2666 : {
; 2667 :   unsigned i;
; 2668 :   for(i = 0; i < 3; i++) info->unknown_chunks_data[i] = 0;
; 2669 :   for(i = 0; i < 3; i++) info->unknown_chunks_size[i] = 0;
; 2670 : }
; 2671 : 
; 2672 : static void LodePNGUnknownChunks_cleanup(LodePNGInfo* info)
; 2673 : {
; 2674 :   unsigned i;
; 2675 :   for(i = 0; i < 3; i++) lodepng_free(info->unknown_chunks_data[i]);
; 2676 : }
; 2677 : 
; 2678 : static unsigned LodePNGUnknownChunks_copy(LodePNGInfo* dest, const LodePNGInfo* src)
; 2679 : {
; 2680 :   unsigned i;
; 2681 : 
; 2682 :   LodePNGUnknownChunks_cleanup(dest);
; 2683 : 
; 2684 :   for(i = 0; i < 3; i++)
; 2685 :   {
; 2686 :     size_t j;
; 2687 :     dest->unknown_chunks_size[i] = src->unknown_chunks_size[i];
; 2688 :     dest->unknown_chunks_data[i] = (unsigned char*)lodepng_malloc(src->unknown_chunks_size[i]);
; 2689 :     if(!dest->unknown_chunks_data[i] && dest->unknown_chunks_size[i]) return 83; /*alloc fail*/
; 2690 :     for(j = 0; j < src->unknown_chunks_size[i]; j++)
; 2691 :     {
; 2692 :       dest->unknown_chunks_data[i][j] = src->unknown_chunks_data[i][j];
; 2693 :     }
; 2694 :   }
; 2695 : 
; 2696 :   return 0;
; 2697 : }
; 2698 : 
; 2699 : /******************************************************************************/
; 2700 : 
; 2701 : static void LodePNGText_init(LodePNGInfo* info)
; 2702 : {
; 2703 :   info->text_num = 0;
; 2704 :   info->text_keys = NULL;
; 2705 :   info->text_strings = NULL;
; 2706 : }
; 2707 : 
; 2708 : static void LodePNGText_cleanup(LodePNGInfo* info)
; 2709 : {
; 2710 :   size_t i;
; 2711 :   for(i = 0; i < info->text_num; i++)
; 2712 :   {
; 2713 :     string_cleanup(&info->text_keys[i]);
; 2714 :     string_cleanup(&info->text_strings[i]);
; 2715 :   }
; 2716 :   lodepng_free(info->text_keys);
; 2717 :   lodepng_free(info->text_strings);
; 2718 : }
; 2719 : 
; 2720 : static unsigned LodePNGText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2721 : {
; 2722 :   size_t i = 0;
; 2723 :   dest->text_keys = 0;
; 2724 :   dest->text_strings = 0;
; 2725 :   dest->text_num = 0;
; 2726 :   for(i = 0; i < source->text_num; i++)
; 2727 :   {
; 2728 :     CERROR_TRY_RETURN(lodepng_add_text(dest, source->text_keys[i], source->text_strings[i]));
; 2729 :   }
; 2730 :   return 0;
; 2731 : }
; 2732 : 
; 2733 : void lodepng_clear_text(LodePNGInfo* info)
; 2734 : {
; 2735 :   LodePNGText_cleanup(info);
; 2736 : }
; 2737 : 
; 2738 : unsigned lodepng_add_text(LodePNGInfo* info, const char* key, const char* str)
; 2739 : {
; 2740 :   char** new_keys = (char**)(lodepng_realloc(info->text_keys, sizeof(char*) * (info->text_num + 1)));
; 2741 :   char** new_strings = (char**)(lodepng_realloc(info->text_strings, sizeof(char*) * (info->text_num + 1)));
; 2742 :   if(!new_keys || !new_strings)
; 2743 :   {
; 2744 :     lodepng_free(new_keys);
; 2745 :     lodepng_free(new_strings);
; 2746 :     return 83; /*alloc fail*/
; 2747 :   }
; 2748 : 
; 2749 :   info->text_num++;
; 2750 :   info->text_keys = new_keys;
; 2751 :   info->text_strings = new_strings;
; 2752 : 
; 2753 :   string_init(&info->text_keys[info->text_num - 1]);
; 2754 :   string_set(&info->text_keys[info->text_num - 1], key);
; 2755 : 
; 2756 :   string_init(&info->text_strings[info->text_num - 1]);
; 2757 :   string_set(&info->text_strings[info->text_num - 1], str);
; 2758 : 
; 2759 :   return 0;
; 2760 : }
; 2761 : 
; 2762 : /******************************************************************************/
; 2763 : 
; 2764 : static void LodePNGIText_init(LodePNGInfo* info)
; 2765 : {
; 2766 :   info->itext_num = 0;
; 2767 :   info->itext_keys = NULL;
; 2768 :   info->itext_langtags = NULL;
; 2769 :   info->itext_transkeys = NULL;
; 2770 :   info->itext_strings = NULL;
; 2771 : }
; 2772 : 
; 2773 : static void LodePNGIText_cleanup(LodePNGInfo* info)
; 2774 : {
; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)
; 2777 :   {
; 2778 :     string_cleanup(&info->itext_keys[i]);
; 2779 :     string_cleanup(&info->itext_langtags[i]);
; 2780 :     string_cleanup(&info->itext_transkeys[i]);
; 2781 :     string_cleanup(&info->itext_strings[i]);
; 2782 :   }
; 2783 :   lodepng_free(info->itext_keys);
; 2784 :   lodepng_free(info->itext_langtags);
; 2785 :   lodepng_free(info->itext_transkeys);
; 2786 :   lodepng_free(info->itext_strings);
; 2787 : }
; 2788 : 
; 2789 : static unsigned LodePNGIText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2790 : {
; 2791 :   size_t i = 0;
; 2792 :   dest->itext_keys = 0;
; 2793 :   dest->itext_langtags = 0;
; 2794 :   dest->itext_transkeys = 0;
; 2795 :   dest->itext_strings = 0;
; 2796 :   dest->itext_num = 0;
; 2797 :   for(i = 0; i < source->itext_num; i++)
; 2798 :   {
; 2799 :     CERROR_TRY_RETURN(lodepng_add_itext(dest, source->itext_keys[i], source->itext_langtags[i],
; 2800 :                                         source->itext_transkeys[i], source->itext_strings[i]));
; 2801 :   }
; 2802 :   return 0;
; 2803 : }
; 2804 : 
; 2805 : void lodepng_clear_itext(LodePNGInfo* info)
; 2806 : {
; 2807 :   LodePNGIText_cleanup(info);
; 2808 : }
; 2809 : 
; 2810 : unsigned lodepng_add_itext(LodePNGInfo* info, const char* key, const char* langtag,
; 2811 :                            const char* transkey, const char* str)
; 2812 : {
; 2813 :   char** new_keys = (char**)(lodepng_realloc(info->itext_keys, sizeof(char*) * (info->itext_num + 1)));
; 2814 :   char** new_langtags = (char**)(lodepng_realloc(info->itext_langtags, sizeof(char*) * (info->itext_num + 1)));
; 2815 :   char** new_transkeys = (char**)(lodepng_realloc(info->itext_transkeys, sizeof(char*) * (info->itext_num + 1)));
; 2816 :   char** new_strings = (char**)(lodepng_realloc(info->itext_strings, sizeof(char*) * (info->itext_num + 1)));
; 2817 :   if(!new_keys || !new_langtags || !new_transkeys || !new_strings)
; 2818 :   {
; 2819 :     lodepng_free(new_keys);
; 2820 :     lodepng_free(new_langtags);
; 2821 :     lodepng_free(new_transkeys);
; 2822 :     lodepng_free(new_strings);
; 2823 :     return 83; /*alloc fail*/
; 2824 :   }
; 2825 : 
; 2826 :   info->itext_num++;
; 2827 :   info->itext_keys = new_keys;
; 2828 :   info->itext_langtags = new_langtags;
; 2829 :   info->itext_transkeys = new_transkeys;
; 2830 :   info->itext_strings = new_strings;
; 2831 : 
; 2832 :   string_init(&info->itext_keys[info->itext_num - 1]);
; 2833 :   string_set(&info->itext_keys[info->itext_num - 1], key);
; 2834 : 
; 2835 :   string_init(&info->itext_langtags[info->itext_num - 1]);
; 2836 :   string_set(&info->itext_langtags[info->itext_num - 1], langtag);
; 2837 : 
; 2838 :   string_init(&info->itext_transkeys[info->itext_num - 1]);
; 2839 :   string_set(&info->itext_transkeys[info->itext_num - 1], transkey);
; 2840 : 
; 2841 :   string_init(&info->itext_strings[info->itext_num - 1]);
; 2842 :   string_set(&info->itext_strings[info->itext_num - 1], str);
; 2843 : 
; 2844 :   return 0;
; 2845 : }
; 2846 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2847 : 
; 2848 : void lodepng_info_init(LodePNGInfo* info)
; 2849 : {
; 2850 :   lodepng_color_mode_init(&info->color);
; 2851 :   info->interlace_method = 0;
; 2852 :   info->compression_method = 0;
; 2853 :   info->filter_method = 0;
; 2854 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2855 :   info->background_defined = 0;
; 2856 :   info->background_r = info->background_g = info->background_b = 0;
; 2857 : 
; 2858 :   LodePNGText_init(info);
; 2859 :   LodePNGIText_init(info);
; 2860 : 
; 2861 :   info->time_defined = 0;
; 2862 :   info->phys_defined = 0;
; 2863 : 
; 2864 :   LodePNGUnknownChunks_init(info);
; 2865 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2866 : }
; 2867 : 
; 2868 : void lodepng_info_cleanup(LodePNGInfo* info)
; 2869 : {
; 2870 :   lodepng_color_mode_cleanup(&info->color);
; 2871 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2872 :   LodePNGText_cleanup(info);
; 2873 :   LodePNGIText_cleanup(info);
; 2874 : 
; 2875 :   LodePNGUnknownChunks_cleanup(info);
; 2876 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2877 : }
; 2878 : 
; 2879 : unsigned lodepng_info_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2880 : {
; 2881 :   lodepng_info_cleanup(dest);
; 2882 :   *dest = *source;
; 2883 :   lodepng_color_mode_init(&dest->color);
; 2884 :   CERROR_TRY_RETURN(lodepng_color_mode_copy(&dest->color, &source->color));
; 2885 : 
; 2886 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2887 :   CERROR_TRY_RETURN(LodePNGText_copy(dest, source));
; 2888 :   CERROR_TRY_RETURN(LodePNGIText_copy(dest, source));
; 2889 : 
; 2890 :   LodePNGUnknownChunks_init(dest);
; 2891 :   CERROR_TRY_RETURN(LodePNGUnknownChunks_copy(dest, source));
; 2892 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2893 :   return 0;
; 2894 : }
; 2895 : 
; 2896 : void lodepng_info_swap(LodePNGInfo* a, LodePNGInfo* b)
; 2897 : {
; 2898 :   LodePNGInfo temp = *a;
; 2899 :   *a = *b;
; 2900 :   *b = temp;
; 2901 : }
; 2902 : 
; 2903 : /* ////////////////////////////////////////////////////////////////////////// */
; 2904 : 
; 2905 : /*index: bitgroup index, bits: bitgroup size(1, 2 or 4, in: bitgroup value, out: octet array to add bits to*/
; 2906 : static void addColorBits(unsigned char* out, size_t index, unsigned bits, unsigned in)
; 2907 : {
; 2908 :   /*p = the partial index in the byte, e.g. with 4 palettebits it is 0 for first half or 1 for second half*/
; 2909 :   unsigned p = index % (8 / bits);
; 2910 :   in &= (1 << bits) - 1; /*filter out any other bits of the input value*/
; 2911 :   in = in << (bits * (8 / bits - p - 1));
; 2912 :   if(p == 0) out[index * bits / 8] = in;
; 2913 :   else out[index * bits / 8] |= in;
; 2914 : }
; 2915 : 
; 2916 : typedef struct ColorTree ColorTree;
; 2917 : 
; 2918 : /*
; 2919 : One node of a color tree
; 2920 : This is the data structure used to count the number of unique colors and to get a palette
; 2921 : index for a color. It's like an octree, but because the alpha channel is used too, each
; 2922 : node has 16 instead of 8 children.
; 2923 : */
; 2924 : struct ColorTree
; 2925 : {
; 2926 :   ColorTree* children[16]; /*up to 16 pointers to ColorTree of next level*/
; 2927 :   int index; /*the payload. Only has a meaningful value if this is in the last level*/
; 2928 : };
; 2929 : 
; 2930 : static void color_tree_init(ColorTree* tree)
; 2931 : {
; 2932 :   int i;
; 2933 :   for(i = 0; i < 16; i++) tree->children[i] = 0;

  00095	66 0f d6 45 c4	 movq	 QWORD PTR _tree$[ebp+24], xmm0
  0009a	66 0f d6 45 cc	 movq	 QWORD PTR _tree$[ebp+32], xmm0
  0009f	66 0f d6 45 d4	 movq	 QWORD PTR _tree$[ebp+40], xmm0
  000a4	66 0f d6 45 dc	 movq	 QWORD PTR _tree$[ebp+48], xmm0
  000a9	66 0f d6 45 e4	 movq	 QWORD PTR _tree$[ebp+56], xmm0

; 2934 :   tree->index = -1;

  000ae	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _tree$[ebp+64], -1

; 3421 :     color_tree_init(&tree);
; 3422 :     for(i = 0; i < palsize; i++)

  000b5	85 d2		 test	 edx, edx
  000b7	74 35		 je	 SHORT $LN18@lodepng_co
  000b9	33 f6		 xor	 esi, esi
  000bb	8b da		 mov	 ebx, edx
  000bd	8d 49 00	 npad	 3
$LL20@lodepng_co:
  000c0	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 3423 :     {
; 3424 :       unsigned char* p = &mode_out->palette[i * 4];
; 3425 :       color_tree_add(&tree, p[0], p[1], p[2], p[3], i);

  000c3	56		 push	 esi
  000c4	8a 14 b0	 mov	 dl, BYTE PTR [eax+esi*4]
  000c7	8d 0c b0	 lea	 ecx, DWORD PTR [eax+esi*4]
  000ca	0f b6 41 03	 movzx	 eax, BYTE PTR [ecx+3]
  000ce	50		 push	 eax
  000cf	0f b6 41 02	 movzx	 eax, BYTE PTR [ecx+2]
  000d3	50		 push	 eax
  000d4	0f b6 41 01	 movzx	 eax, BYTE PTR [ecx+1]
  000d8	50		 push	 eax
  000d9	8d 4d ac	 lea	 ecx, DWORD PTR _tree$[ebp]
  000dc	e8 00 00 00 00	 call	 ?color_tree_add@@YAXPAUColorTree@@EEEEH@Z ; color_tree_add
  000e1	46		 inc	 esi
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
  000e5	3b f3		 cmp	 esi, ebx
  000e7	72 d7		 jb	 SHORT $LL20@lodepng_co
  000e9	8b 75 f0	 mov	 esi, DWORD PTR _out$1$[ebp]
  000ec	33 db		 xor	 ebx, ebx
$LN18@lodepng_co:

; 3426 :     }
; 3427 :   }
; 3428 : 
; 3429 :   if(mode_in->bitdepth == 16 && mode_out->bitdepth == 16)

  000ee	8b 45 0c	 mov	 eax, DWORD PTR _mode_in$[ebp]
  000f1	83 78 04 10	 cmp	 DWORD PTR [eax+4], 16	; 00000010H
  000f5	0f 85 89 00 00
	00		 jne	 $LN17@lodepng_co
  000fb	83 7f 04 10	 cmp	 DWORD PTR [edi+4], 16	; 00000010H
  000ff	0f 85 7f 00 00
	00		 jne	 $LN17@lodepng_co

; 3430 :   {
; 3431 :     for(i = 0; i < numpixels; i++)

  00105	33 ff		 xor	 edi, edi
  00107	39 7d f8	 cmp	 DWORD PTR _numpixels$1$[ebp], edi
  0010a	0f 86 32 01 00
	00		 jbe	 $LN72@lodepng_co
$LL16@lodepng_co:

; 3432 :     {
; 3433 :       unsigned short r = 0, g = 0, b = 0, a = 0;
; 3434 :       error = getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode_in);

  00110	50		 push	 eax
  00111	57		 push	 edi
  00112	ff 75 fc	 push	 DWORD PTR _in$1$[ebp]
  00115	8d 45 10	 lea	 eax, DWORD PTR _a$6[ebp]
  00118	50		 push	 eax
  00119	8d 45 14	 lea	 eax, DWORD PTR _b$8[ebp]
  0011c	50		 push	 eax
  0011d	8d 55 f4	 lea	 edx, DWORD PTR _g$4[ebp]
  00120	8d 4d f0	 lea	 ecx, DWORD PTR _r$2[ebp]
  00123	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _r$2[ebp], 0
  0012a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _g$4[ebp], 0
  00131	c7 45 14 00 00
	00 00		 mov	 DWORD PTR _b$8[ebp], 0
  00138	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _a$6[ebp], 0
  0013f	e8 00 00 00 00	 call	 ?getPixelColorRGBA16@@YAIPAG000PBEIPBULodePNGColorMode@@@Z ; getPixelColorRGBA16
  00144	8b d8		 mov	 ebx, eax
  00146	83 c4 14	 add	 esp, 20			; 00000014H

; 3435 :       if(error) break;

  00149	85 db		 test	 ebx, ebx
  0014b	0f 85 f1 00 00
	00		 jne	 $LN72@lodepng_co

; 3436 :       error = rgba16ToPixel(out, i, mode_out, r, g, b, a);

  00151	ff 75 10	 push	 DWORD PTR _a$6[ebp]
  00154	8b d7		 mov	 edx, edi
  00156	ff 75 14	 push	 DWORD PTR _b$8[ebp]
  00159	8b ce		 mov	 ecx, esi
  0015b	ff 75 f4	 push	 DWORD PTR _g$4[ebp]
  0015e	ff 75 f0	 push	 DWORD PTR _r$2[ebp]
  00161	ff 75 08	 push	 DWORD PTR _mode_out$[ebp]
  00164	e8 00 00 00 00	 call	 ?rgba16ToPixel@@YAIPAEIPBULodePNGColorMode@@GGGG@Z ; rgba16ToPixel
  00169	8b d8		 mov	 ebx, eax
  0016b	83 c4 14	 add	 esp, 20			; 00000014H

; 3437 :       if(error) break;

  0016e	85 db		 test	 ebx, ebx
  00170	0f 85 cc 00 00
	00		 jne	 $LN72@lodepng_co

; 3430 :   {
; 3431 :     for(i = 0; i < numpixels; i++)

  00176	8b 45 0c	 mov	 eax, DWORD PTR _mode_in$[ebp]
  00179	47		 inc	 edi
  0017a	3b 7d f8	 cmp	 edi, DWORD PTR _numpixels$1$[ebp]
  0017d	72 91		 jb	 SHORT $LL16@lodepng_co

; 3438 :     }
; 3439 :   }
; 3440 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGBA)

  0017f	e9 be 00 00 00	 jmp	 $LN72@lodepng_co
$LN17@lodepng_co:
  00184	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00187	83 f9 08	 cmp	 ecx, 8
  0018a	75 46		 jne	 SHORT $LN8@lodepng_co
  0018c	83 3f 06	 cmp	 DWORD PTR [edi], 6
  0018f	75 1d		 jne	 SHORT $LN10@lodepng_co

; 3441 :   {
; 3442 :     error = getPixelColorsRGBA8(out, numpixels, 1, in, mode_in, fix_png);

  00191	ff 75 18	 push	 DWORD PTR _fix_png$[ebp]
  00194	8b 55 f8	 mov	 edx, DWORD PTR _numpixels$1$[ebp]
  00197	50		 push	 eax
  00198	ff 75 fc	 push	 DWORD PTR _in$1$[ebp]
  0019b	8b ce		 mov	 ecx, esi
  0019d	6a 01		 push	 1
  0019f	e8 00 00 00 00	 call	 ?getPixelColorsRGBA8@@YAIPAEIIPBEPBULodePNGColorMode@@I@Z ; getPixelColorsRGBA8
  001a4	83 c4 10	 add	 esp, 16			; 00000010H
  001a7	8b d8		 mov	 ebx, eax
  001a9	e9 97 00 00 00	 jmp	 $LN52@lodepng_co
$LN10@lodepng_co:

; 3443 :   }
; 3444 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGB)

  001ae	83 f9 08	 cmp	 ecx, 8
  001b1	75 1f		 jne	 SHORT $LN8@lodepng_co
  001b3	83 3f 02	 cmp	 DWORD PTR [edi], 2
  001b6	75 1a		 jne	 SHORT $LN8@lodepng_co

; 3445 :   {
; 3446 :     error = getPixelColorsRGBA8(out, numpixels, 0, in, mode_in, fix_png);

  001b8	ff 75 18	 push	 DWORD PTR _fix_png$[ebp]
  001bb	8b 55 f8	 mov	 edx, DWORD PTR _numpixels$1$[ebp]
  001be	50		 push	 eax
  001bf	ff 75 fc	 push	 DWORD PTR _in$1$[ebp]
  001c2	8b ce		 mov	 ecx, esi
  001c4	6a 00		 push	 0
  001c6	e8 00 00 00 00	 call	 ?getPixelColorsRGBA8@@YAIPAEIIPBEPBULodePNGColorMode@@I@Z ; getPixelColorsRGBA8
  001cb	83 c4 10	 add	 esp, 16			; 00000010H
  001ce	8b d8		 mov	 ebx, eax

; 3447 :   }
; 3448 :   else

  001d0	eb 73		 jmp	 SHORT $LN52@lodepng_co
$LN8@lodepng_co:

; 3449 :   {
; 3450 :     unsigned char r = 0, g = 0, b = 0, a = 0;
; 3451 :     for(i = 0; i < numpixels; i++)

  001d2	33 ff		 xor	 edi, edi
  001d4	c6 45 f4 00	 mov	 BYTE PTR _r$3[ebp], 0
  001d8	c6 45 f0 00	 mov	 BYTE PTR _g$1[ebp], 0
  001dc	c6 45 14 00	 mov	 BYTE PTR _b$7[ebp], 0
  001e0	c6 45 10 00	 mov	 BYTE PTR _a$5[ebp], 0
  001e4	39 7d f8	 cmp	 DWORD PTR _numpixels$1$[ebp], edi
  001e7	76 59		 jbe	 SHORT $LN72@lodepng_co
  001e9	8d a4 24 00 00
	00 00		 npad	 7
$LL6@lodepng_co:

; 3452 :     {
; 3453 :       error = getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode_in, fix_png);

  001f0	ff 75 18	 push	 DWORD PTR _fix_png$[ebp]
  001f3	8d 55 f0	 lea	 edx, DWORD PTR _g$1[ebp]
  001f6	50		 push	 eax
  001f7	57		 push	 edi
  001f8	ff 75 fc	 push	 DWORD PTR _in$1$[ebp]
  001fb	8d 45 10	 lea	 eax, DWORD PTR _a$5[ebp]
  001fe	50		 push	 eax
  001ff	8d 45 14	 lea	 eax, DWORD PTR _b$7[ebp]
  00202	50		 push	 eax
  00203	8d 4d f4	 lea	 ecx, DWORD PTR _r$3[ebp]
  00206	e8 00 00 00 00	 call	 ?getPixelColorRGBA8@@YAIPAE000PBEIPBULodePNGColorMode@@I@Z ; getPixelColorRGBA8
  0020b	8b d8		 mov	 ebx, eax
  0020d	83 c4 18	 add	 esp, 24			; 00000018H

; 3454 :       if(error) break;

  00210	85 db		 test	 ebx, ebx
  00212	75 2e		 jne	 SHORT $LN72@lodepng_co

; 3455 :       error = rgba8ToPixel(out, i, mode_out, &tree, r, g, b, a);

  00214	ff 75 10	 push	 DWORD PTR _a$5[ebp]
  00217	8d 45 ac	 lea	 eax, DWORD PTR _tree$[ebp]
  0021a	ff 75 14	 push	 DWORD PTR _b$7[ebp]
  0021d	8b d7		 mov	 edx, edi
  0021f	ff 75 f0	 push	 DWORD PTR _g$1[ebp]
  00222	8b ce		 mov	 ecx, esi
  00224	ff 75 f4	 push	 DWORD PTR _r$3[ebp]
  00227	50		 push	 eax
  00228	ff 75 08	 push	 DWORD PTR _mode_out$[ebp]
  0022b	e8 00 00 00 00	 call	 ?rgba8ToPixel@@YAIPAEIPBULodePNGColorMode@@PAUColorTree@@EEEE@Z ; rgba8ToPixel
  00230	8b d8		 mov	 ebx, eax
  00232	83 c4 18	 add	 esp, 24			; 00000018H

; 3456 :       if(error) break;

  00235	85 db		 test	 ebx, ebx
  00237	75 09		 jne	 SHORT $LN72@lodepng_co

; 3449 :   {
; 3450 :     unsigned char r = 0, g = 0, b = 0, a = 0;
; 3451 :     for(i = 0; i < numpixels; i++)

  00239	8b 45 0c	 mov	 eax, DWORD PTR _mode_in$[ebp]
  0023c	47		 inc	 edi
  0023d	3b 7d f8	 cmp	 edi, DWORD PTR _numpixels$1$[ebp]
  00240	72 ae		 jb	 SHORT $LL6@lodepng_co
$LN72@lodepng_co:
  00242	8b 7d 08	 mov	 edi, DWORD PTR _mode_out$[ebp]
$LN52@lodepng_co:

; 3457 :     }
; 3458 :   }
; 3459 : 
; 3460 :   if(mode_out->colortype == LCT_PALETTE)

  00245	83 3f 03	 cmp	 DWORD PTR [edi], 3
  00248	75 24		 jne	 SHORT $LN37@lodepng_co

; 2935 : }
; 2936 : 
; 2937 : static void color_tree_cleanup(ColorTree* tree)
; 2938 : {
; 2939 :   int i;
; 2940 :   for(i = 0; i < 16; i++)

  0024a	33 f6		 xor	 esi, esi
  0024c	8d 64 24 00	 npad	 4
$LL39@lodepng_co:

; 2941 :   {
; 2942 :     if(tree->children[i])

  00250	8b 7c b5 ac	 mov	 edi, DWORD PTR _tree$[ebp+esi*4]
  00254	85 ff		 test	 edi, edi
  00256	74 10		 je	 SHORT $LN38@lodepng_co

; 2943 :     {
; 2944 :       color_tree_cleanup(tree->children[i]);

  00258	8b cf		 mov	 ecx, edi
  0025a	e8 00 00 00 00	 call	 ?color_tree_cleanup@@YAXPAUColorTree@@@Z ; color_tree_cleanup

; 73   :   free(ptr);

  0025f	57		 push	 edi
  00260	e8 00 00 00 00	 call	 _free
  00265	83 c4 04	 add	 esp, 4
$LN38@lodepng_co:

; 2935 : }
; 2936 : 
; 2937 : static void color_tree_cleanup(ColorTree* tree)
; 2938 : {
; 2939 :   int i;
; 2940 :   for(i = 0; i < 16; i++)

  00268	46		 inc	 esi
  00269	83 fe 10	 cmp	 esi, 16			; 00000010H
  0026c	7c e2		 jl	 SHORT $LL39@lodepng_co
$LN37@lodepng_co:
  0026e	5f		 pop	 edi
  0026f	5e		 pop	 esi

; 3461 :   {
; 3462 :     color_tree_cleanup(&tree);
; 3463 :   }
; 3464 : 
; 3465 :   return error;

  00270	8b c3		 mov	 eax, ebx
  00272	5b		 pop	 ebx

; 3466 : }

  00273	8b e5		 mov	 esp, ebp
  00275	5d		 pop	 ebp
  00276	c3		 ret	 0
?lodepng_convert@@YAIPAEPBEPAULodePNGColorMode@@PBU1@III@Z ENDP ; lodepng_convert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?paethPredictor@@YAEFFF@Z
_TEXT	SEGMENT
_pa$1$ = -8						; size = 4
_b$1$ = -4						; size = 2
_a$1$ = -2						; size = 2
_c$ = 8							; size = 2
?paethPredictor@@YAEFFF@Z PROC				; paethPredictor, COMDAT
; _a$ = cx
; _b$ = dx

; 3892 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	66 8b c2	 mov	 ax, dx
  00009	66 89 45 fc	 mov	 WORD PTR _b$1$[ebp], ax
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	66 8b d9	 mov	 bx, cx

; 3893 :   short pa = abs(b - c);

  00012	0f bf 4d 08	 movsx	 ecx, WORD PTR _c$[ebp]
  00016	57		 push	 edi
  00017	0f bf f8	 movsx	 edi, ax
  0001a	8b c7		 mov	 eax, edi
  0001c	2b c1		 sub	 eax, ecx
  0001e	99		 cdq
  0001f	33 c2		 xor	 eax, edx
  00021	2b c2		 sub	 eax, edx
  00023	0f b7 c0	 movzx	 eax, ax
  00026	89 45 f8	 mov	 DWORD PTR _pa$1$[ebp], eax

; 3894 :   short pb = abs(a - c);

  00029	0f bf f3	 movsx	 esi, bx
  0002c	8b c6		 mov	 eax, esi
  0002e	2b c1		 sub	 eax, ecx
  00030	99		 cdq
  00031	33 c2		 xor	 eax, edx
  00033	2b c2		 sub	 eax, edx

; 3895 :   short pc = abs(a + b - c - c);

  00035	03 c9		 add	 ecx, ecx
  00037	2b f1		 sub	 esi, ecx
  00039	66 89 5d fe	 mov	 WORD PTR _a$1$[ebp], bx
  0003d	0f b7 d8	 movzx	 ebx, ax
  00040	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00043	99		 cdq
  00044	33 c2		 xor	 eax, edx
  00046	2b c2		 sub	 eax, edx

; 3896 : 
; 3897 :   if(pc < pa && pc < pb) return (unsigned char)c;

  00048	8b 55 f8	 mov	 edx, DWORD PTR _pa$1$[ebp]
  0004b	0f b7 c0	 movzx	 eax, ax
  0004e	66 3b c2	 cmp	 ax, dx
  00051	7d 0f		 jge	 SHORT $LN4@paethPredi
  00053	66 3b c3	 cmp	 ax, bx
  00056	7d 0a		 jge	 SHORT $LN4@paethPredi
  00058	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx

; 3899 :   else return (unsigned char)a;
; 3900 : }

  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
$LN4@paethPredi:

; 3898 :   else if(pb < pa) return (unsigned char)b;

  00062	66 8b 45 fe	 mov	 ax, WORD PTR _a$1$[ebp]
  00066	66 8b 4d fc	 mov	 cx, WORD PTR _b$1$[ebp]
  0006a	5f		 pop	 edi
  0006b	0f b6 c0	 movzx	 eax, al
  0006e	0f b6 c9	 movzx	 ecx, cl
  00071	66 3b da	 cmp	 bx, dx
  00074	5e		 pop	 esi
  00075	0f 4c c1	 cmovl	 eax, ecx
  00078	5b		 pop	 ebx

; 3899 :   else return (unsigned char)a;
; 3900 : }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
?paethPredictor@@YAEFFF@Z ENDP				; paethPredictor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?Adam7_getpassvalues@@YAXQAI0000III@Z
_TEXT	SEGMENT
tv3249 = -32						; size = 4
tv3245 = -32						; size = 4
tv3240 = -32						; size = 4
tv3236 = -32						; size = 4
tv3231 = -32						; size = 4
tv3228 = -32						; size = 4
tv3229 = -28						; size = 4
tv3221 = -28						; size = 4
tv3234 = -24						; size = 4
tv3217 = -24						; size = 4
tv3238 = -20						; size = 4
tv3233 = -20						; size = 4
tv3213 = -20						; size = 4
tv3276 = -16						; size = 4
tv3242 = -16						; size = 4
tv3237 = -16						; size = 4
tv3251 = -12						; size = 4
tv3246 = -12						; size = 4
tv3241 = -12						; size = 4
_passh$1$ = -12						; size = 4
tv3281 = -8						; size = 4
_passw$1$ = -4						; size = 4
_filter_passstart$ = 8					; size = 4
_padded_passstart$ = 12					; size = 4
tv3227 = 16						; size = 4
_passstart$ = 16					; size = 4
_w$ = 20						; size = 4
_h$ = 24						; size = 4
_bpp$ = 28						; size = 4
?Adam7_getpassvalues@@YAXQAI0000III@Z PROC		; Adam7_getpassvalues, COMDAT
; _passw$ = ecx
; _passh$ = edx

; 3926 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 3927 :   /*the passstart values have 8 values: the 8th one indicates the byte after the end of the 7th (= last) pass*/
; 3928 :   unsigned i;
; 3929 : 
; 3930 :   /*calculate width and height in pixels of each pass*/
; 3931 :   for(i = 0; i < 7; i++)
; 3932 :   {
; 3933 :     passw[i] = (w + ADAM7_DX[i] - ADAM7_IX[i] - 1) / ADAM7_DX[i];

  00009	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b fa		 mov	 edi, edx

; 3934 :     passh[i] = (h + ADAM7_DY[i] - ADAM7_IY[i] - 1) / ADAM7_DY[i];

  00010	8b 55 18	 mov	 edx, DWORD PTR _h$[ebp]
  00013	8d 41 07	 lea	 eax, DWORD PTR [ecx+7]
  00016	83 c2 07	 add	 edx, 7
  00019	c1 e8 03	 shr	 eax, 3
  0001c	c1 ea 03	 shr	 edx, 3
  0001f	89 7d f4	 mov	 DWORD PTR _passh$1$[ebp], edi
  00022	89 5d fc	 mov	 DWORD PTR _passw$1$[ebp], ebx
  00025	89 03		 mov	 DWORD PTR [ebx], eax
  00027	89 17		 mov	 DWORD PTR [edi], edx

; 3935 :     if(passw[i] == 0) passh[i] = 0;

  00029	85 c0		 test	 eax, eax
  0002b	75 04		 jne	 SHORT $LN5@Adam7_getp
  0002d	89 07		 mov	 DWORD PTR [edi], eax

; 3936 :     if(passh[i] == 0) passw[i] = 0;

  0002f	eb 04		 jmp	 SHORT $LN63@Adam7_getp
$LN5@Adam7_getp:
  00031	85 d2		 test	 edx, edx
  00033	75 06		 jne	 SHORT $LN7@Adam7_getp
$LN63@Adam7_getp:
  00035	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
$LN7@Adam7_getp:

; 3927 :   /*the passstart values have 8 values: the 8th one indicates the byte after the end of the 7th (= last) pass*/
; 3928 :   unsigned i;
; 3929 : 
; 3930 :   /*calculate width and height in pixels of each pass*/
; 3931 :   for(i = 0; i < 7; i++)
; 3932 :   {
; 3933 :     passw[i] = (w + ADAM7_DX[i] - ADAM7_IX[i] - 1) / ADAM7_DX[i];

  0003b	8d 71 03	 lea	 esi, DWORD PTR [ecx+3]
  0003e	8b ce		 mov	 ecx, esi
  00040	c1 e9 03	 shr	 ecx, 3

; 3935 :     if(passw[i] == 0) passh[i] = 0;

  00043	8b c2		 mov	 eax, edx
  00045	33 d2		 xor	 edx, edx
  00047	85 c9		 test	 ecx, ecx
  00049	0f 44 c2	 cmove	 eax, edx
  0004c	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0004f	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 3936 :     if(passh[i] == 0) passw[i] = 0;

  00052	8b c8		 mov	 ecx, eax
  00054	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00057	85 c9		 test	 ecx, ecx
  00059	0f 44 c2	 cmove	 eax, edx
  0005c	8b 55 18	 mov	 edx, DWORD PTR _h$[ebp]
  0005f	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00062	83 c2 03	 add	 edx, 3
  00065	c1 ee 02	 shr	 esi, 2
  00068	89 4d f8	 mov	 DWORD PTR tv3281[ebp], ecx
  0006b	33 c9		 xor	 ecx, ecx
  0006d	8b c2		 mov	 eax, edx
  0006f	c1 e8 03	 shr	 eax, 3
  00072	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00075	85 f6		 test	 esi, esi
  00077	0f 44 c1	 cmove	 eax, ecx
  0007a	8b c8		 mov	 ecx, eax
  0007c	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0007f	8b c6		 mov	 eax, esi
  00081	33 f6		 xor	 esi, esi
  00083	85 c9		 test	 ecx, ecx
  00085	0f 44 c6	 cmove	 eax, esi
  00088	8b 75 14	 mov	 esi, DWORD PTR _w$[ebp]
  0008b	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  0008e	46		 inc	 esi
  0008f	c1 ea 02	 shr	 edx, 2
  00092	89 4d f0	 mov	 DWORD PTR tv3276[ebp], ecx
  00095	8b ce		 mov	 ecx, esi
  00097	c1 e9 02	 shr	 ecx, 2
  0009a	8b c2		 mov	 eax, edx
  0009c	33 d2		 xor	 edx, edx
  0009e	85 c9		 test	 ecx, ecx
  000a0	0f 44 c2	 cmove	 eax, edx
  000a3	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  000a6	89 4b 0c	 mov	 DWORD PTR [ebx+12], ecx
  000a9	8b c8		 mov	 ecx, eax
  000ab	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  000ae	85 c9		 test	 ecx, ecx
  000b0	0f 44 c2	 cmove	 eax, edx
  000b3	8b 55 18	 mov	 edx, DWORD PTR _h$[ebp]
  000b6	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
  000b9	42		 inc	 edx
  000ba	d1 ee		 shr	 esi, 1
  000bc	89 4d ec	 mov	 DWORD PTR tv3213[ebp], ecx
  000bf	33 c9		 xor	 ecx, ecx
  000c1	8b c2		 mov	 eax, edx
  000c3	c1 e8 02	 shr	 eax, 2
  000c6	89 47 10	 mov	 DWORD PTR [edi+16], eax
  000c9	85 f6		 test	 esi, esi
  000cb	0f 44 c1	 cmove	 eax, ecx
  000ce	8b c8		 mov	 ecx, eax
  000d0	89 47 10	 mov	 DWORD PTR [edi+16], eax
  000d3	8b c6		 mov	 eax, esi
  000d5	33 f6		 xor	 esi, esi
  000d7	85 c9		 test	 ecx, ecx
  000d9	0f 44 c6	 cmove	 eax, esi
  000dc	8b 75 14	 mov	 esi, DWORD PTR _w$[ebp]
  000df	89 4d e8	 mov	 DWORD PTR tv3217[ebp], ecx
  000e2	d1 ea		 shr	 edx, 1
  000e4	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  000e7	8b ce		 mov	 ecx, esi
  000e9	d1 e9		 shr	 ecx, 1
  000eb	8b c2		 mov	 eax, edx
  000ed	33 d2		 xor	 edx, edx
  000ef	85 c9		 test	 ecx, ecx
  000f1	0f 44 c2	 cmove	 eax, edx
  000f4	89 4b 14	 mov	 DWORD PTR [ebx+20], ecx
  000f7	8b c8		 mov	 ecx, eax
  000f9	89 47 14	 mov	 DWORD PTR [edi+20], eax
  000fc	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  000ff	85 c9		 test	 ecx, ecx
  00101	89 4d e4	 mov	 DWORD PTR tv3221[ebp], ecx
  00104	0f 44 c2	 cmove	 eax, edx

; 3937 :   }
; 3938 : 
; 3939 :   filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
; 3940 :   for(i = 0; i < 7; i++)
; 3941 :   {
; 3942 :     /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
; 3943 :     filter_passstart[i + 1] = filter_passstart[i]
; 3944 :                             + ((passw[i] && passh[i]) ? passh[i] * (1 + (passw[i] * bpp + 7) / 8) : 0);

  00107	8b 13		 mov	 edx, DWORD PTR [ebx]
  00109	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  0010c	8b 45 18	 mov	 eax, DWORD PTR _h$[ebp]
  0010f	d1 e8		 shr	 eax, 1
  00111	33 c9		 xor	 ecx, ecx
  00113	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00116	85 f6		 test	 esi, esi
  00118	0f 44 c1	 cmove	 eax, ecx
  0011b	89 73 18	 mov	 DWORD PTR [ebx+24], esi
  0011e	8b f0		 mov	 esi, eax
  00120	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00123	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00126	8b 7d 08	 mov	 edi, DWORD PTR _filter_passstart$[ebp]
  00129	85 f6		 test	 esi, esi
  0012b	0f 44 c1	 cmove	 eax, ecx
  0012e	89 43 18	 mov	 DWORD PTR [ebx+24], eax
  00131	8b 45 10	 mov	 eax, DWORD PTR _passstart$[ebp]
  00134	8b 5d f4	 mov	 ebx, DWORD PTR _passh$1$[ebp]
  00137	89 08		 mov	 DWORD PTR [eax], ecx
  00139	8b 45 0c	 mov	 eax, DWORD PTR _padded_passstart$[ebp]
  0013c	89 0f		 mov	 DWORD PTR [edi], ecx
  0013e	89 08		 mov	 DWORD PTR [eax], ecx
  00140	8b 4d 1c	 mov	 ecx, DWORD PTR _bpp$[ebp]
  00143	85 d2		 test	 edx, edx
  00145	74 16		 je	 SHORT $LN11@Adam7_getp
  00147	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  0014a	74 11		 je	 SHORT $LN11@Adam7_getp
  0014c	8b c2		 mov	 eax, edx
  0014e	0f af c1	 imul	 eax, ecx
  00151	83 c0 07	 add	 eax, 7
  00154	c1 e8 03	 shr	 eax, 3
  00157	40		 inc	 eax
  00158	0f af 03	 imul	 eax, DWORD PTR [ebx]
  0015b	eb 02		 jmp	 SHORT $LN12@Adam7_getp
$LN11@Adam7_getp:
  0015d	33 c0		 xor	 eax, eax
$LN12@Adam7_getp:
  0015f	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 3945 :     /*bits padded if needed to fill full byte at end of each scanline*/
; 3946 :     padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7) / 8);

  00162	8b 03		 mov	 eax, DWORD PTR [ebx]
  00164	8b 7d 0c	 mov	 edi, DWORD PTR _padded_passstart$[ebp]
  00167	8b da		 mov	 ebx, edx

; 3947 :     /*only padded at end of reduced image*/
; 3948 :     passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7) / 8;

  00169	0f af d0	 imul	 edx, eax
  0016c	0f af d9	 imul	 ebx, ecx
  0016f	0f af d1	 imul	 edx, ecx
  00172	83 c3 07	 add	 ebx, 7
  00175	c1 eb 03	 shr	 ebx, 3
  00178	0f af d8	 imul	 ebx, eax
  0017b	8b 45 10	 mov	 eax, DWORD PTR _passstart$[ebp]
  0017e	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00181	8b 7d 08	 mov	 edi, DWORD PTR _filter_passstart$[ebp]
  00184	89 5d f4	 mov	 DWORD PTR tv3251[ebp], ebx
  00187	8b 5d fc	 mov	 ebx, DWORD PTR _passw$1$[ebp]
  0018a	83 c2 07	 add	 edx, 7
  0018d	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]
  00190	c1 ea 03	 shr	 edx, 3
  00193	89 55 e0	 mov	 DWORD PTR tv3249[ebp], edx
  00196	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00199	85 db		 test	 ebx, ebx
  0019b	74 18		 je	 SHORT $LN46@Adam7_getp

; 3937 :   }
; 3938 : 
; 3939 :   filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
; 3940 :   for(i = 0; i < 7; i++)
; 3941 :   {
; 3942 :     /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
; 3943 :     filter_passstart[i + 1] = filter_passstart[i]
; 3944 :                             + ((passw[i] && passh[i]) ? passh[i] * (1 + (passw[i] * bpp + 7) / 8) : 0);

  0019d	8b 45 f8	 mov	 eax, DWORD PTR tv3281[ebp]
  001a0	85 c0		 test	 eax, eax
  001a2	74 11		 je	 SHORT $LN46@Adam7_getp
  001a4	8b d3		 mov	 edx, ebx
  001a6	0f af d1	 imul	 edx, ecx
  001a9	83 c2 07	 add	 edx, 7
  001ac	c1 ea 03	 shr	 edx, 3
  001af	42		 inc	 edx
  001b0	0f af d0	 imul	 edx, eax
  001b3	eb 02		 jmp	 SHORT $LN47@Adam7_getp
$LN46@Adam7_getp:
  001b5	33 d2		 xor	 edx, edx
$LN47@Adam7_getp:
  001b7	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  001ba	03 c2		 add	 eax, edx
  001bc	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 3945 :     /*bits padded if needed to fill full byte at end of each scanline*/
; 3946 :     padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7) / 8);

  001bf	8b 55 f4	 mov	 edx, DWORD PTR tv3251[ebp]
  001c2	8b c3		 mov	 eax, ebx

; 3947 :     /*only padded at end of reduced image*/
; 3948 :     passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7) / 8;

  001c4	0f af 5d f8	 imul	 ebx, DWORD PTR tv3281[ebp]
  001c8	0f af c1	 imul	 eax, ecx
  001cb	0f af d9	 imul	 ebx, ecx
  001ce	83 c0 07	 add	 eax, 7
  001d1	c1 e8 03	 shr	 eax, 3
  001d4	0f af 45 f8	 imul	 eax, DWORD PTR tv3281[ebp]
  001d8	03 d0		 add	 edx, eax
  001da	8b 45 0c	 mov	 eax, DWORD PTR _padded_passstart$[ebp]
  001dd	89 55 f4	 mov	 DWORD PTR tv3246[ebp], edx
  001e0	89 50 08	 mov	 DWORD PTR [eax+8], edx
  001e3	8b 45 10	 mov	 eax, DWORD PTR _passstart$[ebp]
  001e6	8d 53 07	 lea	 edx, DWORD PTR [ebx+7]
  001e9	8b 5d fc	 mov	 ebx, DWORD PTR _passw$1$[ebp]
  001ec	c1 ea 03	 shr	 edx, 3
  001ef	03 55 e0	 add	 edx, DWORD PTR tv3249[ebp]
  001f2	8b 5b 08	 mov	 ebx, DWORD PTR [ebx+8]
  001f5	89 55 e0	 mov	 DWORD PTR tv3245[ebp], edx
  001f8	89 50 08	 mov	 DWORD PTR [eax+8], edx
  001fb	85 db		 test	 ebx, ebx
  001fd	74 18		 je	 SHORT $LN49@Adam7_getp

; 3937 :   }
; 3938 : 
; 3939 :   filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
; 3940 :   for(i = 0; i < 7; i++)
; 3941 :   {
; 3942 :     /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
; 3943 :     filter_passstart[i + 1] = filter_passstart[i]
; 3944 :                             + ((passw[i] && passh[i]) ? passh[i] * (1 + (passw[i] * bpp + 7) / 8) : 0);

  001ff	8b 45 f0	 mov	 eax, DWORD PTR tv3276[ebp]
  00202	85 c0		 test	 eax, eax
  00204	74 11		 je	 SHORT $LN49@Adam7_getp
  00206	8b d3		 mov	 edx, ebx
  00208	0f af d1	 imul	 edx, ecx
  0020b	83 c2 07	 add	 edx, 7
  0020e	c1 ea 03	 shr	 edx, 3
  00211	42		 inc	 edx
  00212	0f af d0	 imul	 edx, eax
  00215	eb 02		 jmp	 SHORT $LN50@Adam7_getp
$LN49@Adam7_getp:
  00217	33 d2		 xor	 edx, edx
$LN50@Adam7_getp:
  00219	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0021c	03 c2		 add	 eax, edx

; 3945 :     /*bits padded if needed to fill full byte at end of each scanline*/
; 3946 :     padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7) / 8);

  0021e	8b 55 f0	 mov	 edx, DWORD PTR tv3276[ebp]
  00221	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00224	8b c3		 mov	 eax, ebx
  00226	0f af c1	 imul	 eax, ecx
  00229	83 c0 07	 add	 eax, 7
  0022c	c1 e8 03	 shr	 eax, 3
  0022f	0f af c2	 imul	 eax, edx

; 3947 :     /*only padded at end of reduced image*/
; 3948 :     passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7) / 8;

  00232	0f af d3	 imul	 edx, ebx
  00235	03 45 f4	 add	 eax, DWORD PTR tv3246[ebp]
  00238	0f af d1	 imul	 edx, ecx
  0023b	8b 5d ec	 mov	 ebx, DWORD PTR tv3213[ebp]
  0023e	89 45 f0	 mov	 DWORD PTR tv3242[ebp], eax
  00241	8b 45 0c	 mov	 eax, DWORD PTR _padded_passstart$[ebp]
  00244	8b 7d f0	 mov	 edi, DWORD PTR tv3242[ebp]
  00247	83 c2 07	 add	 edx, 7
  0024a	89 78 0c	 mov	 DWORD PTR [eax+12], edi
  0024d	8b 45 10	 mov	 eax, DWORD PTR _passstart$[ebp]
  00250	8b 7d 08	 mov	 edi, DWORD PTR _filter_passstart$[ebp]
  00253	c1 ea 03	 shr	 edx, 3
  00256	03 55 e0	 add	 edx, DWORD PTR tv3245[ebp]
  00259	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0025c	8b 45 fc	 mov	 eax, DWORD PTR _passw$1$[ebp]
  0025f	89 55 f4	 mov	 DWORD PTR tv3241[ebp], edx
  00262	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00265	89 45 e0	 mov	 DWORD PTR tv3240[ebp], eax
  00268	85 c0		 test	 eax, eax
  0026a	74 15		 je	 SHORT $LN52@Adam7_getp

; 3937 :   }
; 3938 : 
; 3939 :   filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
; 3940 :   for(i = 0; i < 7; i++)
; 3941 :   {
; 3942 :     /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
; 3943 :     filter_passstart[i + 1] = filter_passstart[i]
; 3944 :                             + ((passw[i] && passh[i]) ? passh[i] * (1 + (passw[i] * bpp + 7) / 8) : 0);

  0026c	85 db		 test	 ebx, ebx
  0026e	74 11		 je	 SHORT $LN52@Adam7_getp
  00270	8b d0		 mov	 edx, eax
  00272	0f af d1	 imul	 edx, ecx
  00275	83 c2 07	 add	 edx, 7
  00278	c1 ea 03	 shr	 edx, 3
  0027b	42		 inc	 edx
  0027c	0f af d3	 imul	 edx, ebx
  0027f	eb 02		 jmp	 SHORT $LN53@Adam7_getp
$LN52@Adam7_getp:
  00281	33 d2		 xor	 edx, edx
$LN53@Adam7_getp:
  00283	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00286	03 c2		 add	 eax, edx

; 3945 :     /*bits padded if needed to fill full byte at end of each scanline*/
; 3946 :     padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7) / 8);

  00288	8b 55 e0	 mov	 edx, DWORD PTR tv3240[ebp]
  0028b	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0028e	8b c2		 mov	 eax, edx

; 3947 :     /*only padded at end of reduced image*/
; 3948 :     passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7) / 8;

  00290	0f af d3	 imul	 edx, ebx
  00293	0f af c1	 imul	 eax, ecx
  00296	0f af d1	 imul	 edx, ecx
  00299	83 c0 07	 add	 eax, 7
  0029c	c1 e8 03	 shr	 eax, 3
  0029f	0f af c3	 imul	 eax, ebx
  002a2	03 45 f0	 add	 eax, DWORD PTR tv3242[ebp]
  002a5	8b 5d e8	 mov	 ebx, DWORD PTR tv3217[ebp]
  002a8	89 45 ec	 mov	 DWORD PTR tv3238[ebp], eax
  002ab	8b 45 0c	 mov	 eax, DWORD PTR _padded_passstart$[ebp]
  002ae	8b 7d ec	 mov	 edi, DWORD PTR tv3238[ebp]
  002b1	83 c2 07	 add	 edx, 7
  002b4	89 78 10	 mov	 DWORD PTR [eax+16], edi
  002b7	8b 45 10	 mov	 eax, DWORD PTR _passstart$[ebp]
  002ba	8b 7d 08	 mov	 edi, DWORD PTR _filter_passstart$[ebp]
  002bd	c1 ea 03	 shr	 edx, 3
  002c0	03 55 f4	 add	 edx, DWORD PTR tv3241[ebp]
  002c3	89 50 10	 mov	 DWORD PTR [eax+16], edx
  002c6	8b 45 fc	 mov	 eax, DWORD PTR _passw$1$[ebp]
  002c9	89 55 f0	 mov	 DWORD PTR tv3237[ebp], edx
  002cc	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  002cf	89 45 e0	 mov	 DWORD PTR tv3236[ebp], eax
  002d2	85 c0		 test	 eax, eax
  002d4	74 15		 je	 SHORT $LN55@Adam7_getp

; 3937 :   }
; 3938 : 
; 3939 :   filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
; 3940 :   for(i = 0; i < 7; i++)
; 3941 :   {
; 3942 :     /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
; 3943 :     filter_passstart[i + 1] = filter_passstart[i]
; 3944 :                             + ((passw[i] && passh[i]) ? passh[i] * (1 + (passw[i] * bpp + 7) / 8) : 0);

  002d6	85 db		 test	 ebx, ebx
  002d8	74 11		 je	 SHORT $LN55@Adam7_getp
  002da	8b d0		 mov	 edx, eax
  002dc	0f af d1	 imul	 edx, ecx
  002df	83 c2 07	 add	 edx, 7
  002e2	c1 ea 03	 shr	 edx, 3
  002e5	42		 inc	 edx
  002e6	0f af d3	 imul	 edx, ebx
  002e9	eb 02		 jmp	 SHORT $LN56@Adam7_getp
$LN55@Adam7_getp:
  002eb	33 d2		 xor	 edx, edx
$LN56@Adam7_getp:
  002ed	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  002f0	03 c2		 add	 eax, edx

; 3945 :     /*bits padded if needed to fill full byte at end of each scanline*/
; 3946 :     padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7) / 8);

  002f2	8b 55 e0	 mov	 edx, DWORD PTR tv3236[ebp]
  002f5	89 47 14	 mov	 DWORD PTR [edi+20], eax
  002f8	8b c2		 mov	 eax, edx

; 3947 :     /*only padded at end of reduced image*/
; 3948 :     passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7) / 8;

  002fa	0f af d3	 imul	 edx, ebx
  002fd	0f af c1	 imul	 eax, ecx
  00300	0f af d1	 imul	 edx, ecx
  00303	83 c0 07	 add	 eax, 7
  00306	c1 e8 03	 shr	 eax, 3
  00309	0f af c3	 imul	 eax, ebx
  0030c	03 45 ec	 add	 eax, DWORD PTR tv3238[ebp]
  0030f	8b 5d e4	 mov	 ebx, DWORD PTR tv3221[ebp]
  00312	89 45 e8	 mov	 DWORD PTR tv3234[ebp], eax
  00315	8b 45 0c	 mov	 eax, DWORD PTR _padded_passstart$[ebp]
  00318	8b 7d e8	 mov	 edi, DWORD PTR tv3234[ebp]
  0031b	83 c2 07	 add	 edx, 7
  0031e	89 78 14	 mov	 DWORD PTR [eax+20], edi
  00321	8b 45 10	 mov	 eax, DWORD PTR _passstart$[ebp]
  00324	8b 7d 08	 mov	 edi, DWORD PTR _filter_passstart$[ebp]
  00327	c1 ea 03	 shr	 edx, 3
  0032a	03 55 f0	 add	 edx, DWORD PTR tv3237[ebp]
  0032d	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00330	8b 45 fc	 mov	 eax, DWORD PTR _passw$1$[ebp]
  00333	89 55 ec	 mov	 DWORD PTR tv3233[ebp], edx
  00336	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00339	89 45 e0	 mov	 DWORD PTR tv3231[ebp], eax
  0033c	85 c0		 test	 eax, eax
  0033e	74 15		 je	 SHORT $LN58@Adam7_getp

; 3937 :   }
; 3938 : 
; 3939 :   filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
; 3940 :   for(i = 0; i < 7; i++)
; 3941 :   {
; 3942 :     /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
; 3943 :     filter_passstart[i + 1] = filter_passstart[i]
; 3944 :                             + ((passw[i] && passh[i]) ? passh[i] * (1 + (passw[i] * bpp + 7) / 8) : 0);

  00340	85 db		 test	 ebx, ebx
  00342	74 11		 je	 SHORT $LN58@Adam7_getp
  00344	8b d0		 mov	 edx, eax
  00346	0f af d1	 imul	 edx, ecx
  00349	83 c2 07	 add	 edx, 7
  0034c	c1 ea 03	 shr	 edx, 3
  0034f	42		 inc	 edx
  00350	0f af d3	 imul	 edx, ebx
  00353	eb 02		 jmp	 SHORT $LN59@Adam7_getp
$LN58@Adam7_getp:
  00355	33 d2		 xor	 edx, edx
$LN59@Adam7_getp:
  00357	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0035a	03 c2		 add	 eax, edx
  0035c	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 3945 :     /*bits padded if needed to fill full byte at end of each scanline*/
; 3946 :     padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7) / 8);

  0035f	8b 45 e0	 mov	 eax, DWORD PTR tv3231[ebp]
  00362	0f af c1	 imul	 eax, ecx
  00365	83 c0 07	 add	 eax, 7
  00368	c1 e8 03	 shr	 eax, 3
  0036b	0f af c3	 imul	 eax, ebx

; 3947 :     /*only padded at end of reduced image*/
; 3948 :     passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7) / 8;

  0036e	0f af 5d e0	 imul	 ebx, DWORD PTR tv3231[ebp]
  00372	03 45 e8	 add	 eax, DWORD PTR tv3234[ebp]
  00375	0f af d9	 imul	 ebx, ecx
  00378	89 45 e4	 mov	 DWORD PTR tv3229[ebp], eax
  0037b	8b 45 0c	 mov	 eax, DWORD PTR _padded_passstart$[ebp]
  0037e	8b 7d e4	 mov	 edi, DWORD PTR tv3229[ebp]
  00381	89 78 18	 mov	 DWORD PTR [eax+24], edi
  00384	8b 45 ec	 mov	 eax, DWORD PTR tv3233[ebp]
  00387	8b 7d 08	 mov	 edi, DWORD PTR _filter_passstart$[ebp]
  0038a	83 c3 07	 add	 ebx, 7
  0038d	c1 eb 03	 shr	 ebx, 3
  00390	03 c3		 add	 eax, ebx
  00392	8b 5d 10	 mov	 ebx, DWORD PTR _passstart$[ebp]
  00395	89 45 e0	 mov	 DWORD PTR tv3228[ebp], eax
  00398	89 43 18	 mov	 DWORD PTR [ebx+24], eax
  0039b	8b 45 fc	 mov	 eax, DWORD PTR _passw$1$[ebp]
  0039e	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  003a1	89 45 10	 mov	 DWORD PTR tv3227[ebp], eax
  003a4	85 c0		 test	 eax, eax
  003a6	74 15		 je	 SHORT $LN61@Adam7_getp

; 3937 :   }
; 3938 : 
; 3939 :   filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
; 3940 :   for(i = 0; i < 7; i++)
; 3941 :   {
; 3942 :     /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
; 3943 :     filter_passstart[i + 1] = filter_passstart[i]
; 3944 :                             + ((passw[i] && passh[i]) ? passh[i] * (1 + (passw[i] * bpp + 7) / 8) : 0);

  003a8	85 f6		 test	 esi, esi
  003aa	74 11		 je	 SHORT $LN61@Adam7_getp
  003ac	8b d0		 mov	 edx, eax
  003ae	0f af d1	 imul	 edx, ecx
  003b1	83 c2 07	 add	 edx, 7
  003b4	c1 ea 03	 shr	 edx, 3
  003b7	42		 inc	 edx
  003b8	0f af d6	 imul	 edx, esi
  003bb	eb 02		 jmp	 SHORT $LN62@Adam7_getp
$LN61@Adam7_getp:
  003bd	33 d2		 xor	 edx, edx
$LN62@Adam7_getp:
  003bf	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  003c2	03 c2		 add	 eax, edx
  003c4	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 3945 :     /*bits padded if needed to fill full byte at end of each scanline*/
; 3946 :     padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7) / 8);

  003c7	8b 45 10	 mov	 eax, DWORD PTR tv3227[ebp]
  003ca	0f af c1	 imul	 eax, ecx
  003cd	83 c0 07	 add	 eax, 7
  003d0	c1 e8 03	 shr	 eax, 3
  003d3	0f af c6	 imul	 eax, esi

; 3947 :     /*only padded at end of reduced image*/
; 3948 :     passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7) / 8;

  003d6	0f af 75 10	 imul	 esi, DWORD PTR tv3227[ebp]
  003da	03 45 e4	 add	 eax, DWORD PTR tv3229[ebp]
  003dd	0f af f1	 imul	 esi, ecx
  003e0	8b 55 0c	 mov	 edx, DWORD PTR _padded_passstart$[ebp]
  003e3	83 c6 07	 add	 esi, 7
  003e6	c1 ee 03	 shr	 esi, 3
  003e9	03 75 e0	 add	 esi, DWORD PTR tv3228[ebp]
  003ec	5f		 pop	 edi
  003ed	89 73 1c	 mov	 DWORD PTR [ebx+28], esi
  003f0	5e		 pop	 esi
  003f1	89 42 1c	 mov	 DWORD PTR [edx+28], eax
  003f4	5b		 pop	 ebx

; 3949 :   }
; 3950 : }

  003f5	8b e5		 mov	 esp, ebp
  003f7	5d		 pop	 ebp
  003f8	c3		 ret	 0
?Adam7_getpassvalues@@YAXQAI0000III@Z ENDP		; Adam7_getpassvalues
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_inspect@@YAIPAI0PAULodePNGState@@PBEI@Z
_TEXT	SEGMENT
tv477 = -8						; size = 4
_h$1$ = -8						; size = 4
_w$1$ = -4						; size = 4
tv481 = 8						; size = 4
_state$ = 8						; size = 4
_in$ = 12						; size = 4
_CRC$1$ = 16						; size = 4
_insize$ = 16						; size = 4
?lodepng_inspect@@YAIPAI0PAULodePNGState@@PBEI@Z PROC	; lodepng_inspect, COMDAT
; _w$ = ecx
; _h$ = edx

; 3961 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3962 :   LodePNGInfo* info = &state->info_png;
; 3963 :   if(insize == 0 || in == 0)

  00006	8b 45 10	 mov	 eax, DWORD PTR _insize$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _state$[ebp]
  0000f	89 55 f8	 mov	 DWORD PTR _h$1$[ebp], edx
  00012	89 4d fc	 mov	 DWORD PTR _w$1$[ebp], ecx
  00015	8d 9f 88 00 00
	00		 lea	 ebx, DWORD PTR [edi+136]
  0001b	85 c0		 test	 eax, eax
  0001d	0f 84 df 01 00
	00		 je	 $LN11@lodepng_in
  00023	8b 75 0c	 mov	 esi, DWORD PTR _in$[ebp]
  00026	85 f6		 test	 esi, esi
  00028	0f 84 d4 01 00
	00		 je	 $LN11@lodepng_in

; 3966 :   }
; 3967 :   if(insize < 29)

  0002e	83 f8 1d	 cmp	 eax, 29			; 0000001dH
  00031	73 16		 jae	 SHORT $LN10@lodepng_in

; 3968 :   {
; 3969 :     CERROR_RETURN_ERROR(state->error, 27); /*error: the data length is smaller than the length of a PNG header*/

  00033	c7 87 28 01 00
	00 1b 00 00 00	 mov	 DWORD PTR [edi+296], 27	; 0000001bH
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	b8 1b 00 00 00	 mov	 eax, 27			; 0000001bH
  00044	5b		 pop	 ebx

; 4013 :   return state->error;
; 4014 : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN10@lodepng_in:

; 3970 :   }
; 3971 : 
; 3972 :   /*when decoding a new PNG image, make sure all parameters created after previous decoding are reset*/
; 3973 :   lodepng_info_cleanup(info);

  00049	8b cb		 mov	 ecx, ebx
  0004b	e8 00 00 00 00	 call	 ?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z ; lodepng_info_cleanup

; 3974 :   lodepng_info_init(info);

  00050	8b cb		 mov	 ecx, ebx
  00052	e8 00 00 00 00	 call	 ?lodepng_info_init@@YAXPAULodePNGInfo@@@Z ; lodepng_info_init

; 3975 : 
; 3976 :   if(in[0] != 137 || in[1] != 80 || in[2] != 78 || in[3] != 71
; 3977 :      || in[4] != 13 || in[5] != 10 || in[6] != 26 || in[7] != 10)

  00057	80 3e 89	 cmp	 BYTE PTR [esi], 137	; 00000089H
  0005a	0f 85 8c 01 00
	00		 jne	 $LN8@lodepng_in
  00060	80 7e 01 50	 cmp	 BYTE PTR [esi+1], 80	; 00000050H
  00064	0f 85 82 01 00
	00		 jne	 $LN8@lodepng_in
  0006a	80 7e 02 4e	 cmp	 BYTE PTR [esi+2], 78	; 0000004eH
  0006e	0f 85 78 01 00
	00		 jne	 $LN8@lodepng_in
  00074	80 7e 03 47	 cmp	 BYTE PTR [esi+3], 71	; 00000047H
  00078	0f 85 6e 01 00
	00		 jne	 $LN8@lodepng_in
  0007e	80 7e 04 0d	 cmp	 BYTE PTR [esi+4], 13	; 0000000dH
  00082	0f 85 64 01 00
	00		 jne	 $LN8@lodepng_in
  00088	80 7e 05 0a	 cmp	 BYTE PTR [esi+5], 10	; 0000000aH
  0008c	0f 85 5a 01 00
	00		 jne	 $LN8@lodepng_in
  00092	80 7e 06 1a	 cmp	 BYTE PTR [esi+6], 26	; 0000001aH
  00096	0f 85 50 01 00
	00		 jne	 $LN8@lodepng_in
  0009c	80 7e 07 0a	 cmp	 BYTE PTR [esi+7], 10	; 0000000aH
  000a0	0f 85 46 01 00
	00		 jne	 $LN8@lodepng_in

; 3980 :   }
; 3981 :   if(in[12] != 'I' || in[13] != 'H' || in[14] != 'D' || in[15] != 'R')

  000a6	80 7e 0c 49	 cmp	 BYTE PTR [esi+12], 73	; 00000049H
  000aa	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  000ad	89 45 08	 mov	 DWORD PTR tv481[ebp], eax
  000b0	0f 85 20 01 00
	00		 jne	 $LN6@lodepng_in
  000b6	80 7e 0d 48	 cmp	 BYTE PTR [esi+13], 72	; 00000048H
  000ba	0f 85 16 01 00
	00		 jne	 $LN6@lodepng_in
  000c0	80 7e 0e 44	 cmp	 BYTE PTR [esi+14], 68	; 00000044H
  000c4	0f 85 0c 01 00
	00		 jne	 $LN6@lodepng_in
  000ca	80 7e 0f 52	 cmp	 BYTE PTR [esi+15], 82	; 00000052H
  000ce	0f 85 02 01 00
	00		 jne	 $LN6@lodepng_in

; 3984 :   }
; 3985 : 
; 3986 :   /*read the values given in the header*/
; 3987 :   *w = lodepng_read32bitInt(&in[16]);

  000d4	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  000d7	e8 00 00 00 00	 call	 ?lodepng_read32bitInt@@YAIPBE@Z ; lodepng_read32bitInt
  000dc	8b 4d fc	 mov	 ecx, DWORD PTR _w$1$[ebp]
  000df	89 01		 mov	 DWORD PTR [ecx], eax

; 3988 :   *h = lodepng_read32bitInt(&in[20]);

  000e1	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  000e4	e8 00 00 00 00	 call	 ?lodepng_read32bitInt@@YAIPBE@Z ; lodepng_read32bitInt
  000e9	8b 4d f8	 mov	 ecx, DWORD PTR _h$1$[ebp]
  000ec	89 01		 mov	 DWORD PTR [ecx], eax

; 3989 :   info->color.bitdepth = in[24];

  000ee	0f b6 46 18	 movzx	 eax, BYTE PTR [esi+24]
  000f2	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 3990 :   info->color.colortype = (LodePNGColorType)in[25];

  000f5	0f b6 46 19	 movzx	 eax, BYTE PTR [esi+25]
  000f9	89 43 0c	 mov	 DWORD PTR [ebx+12], eax

; 3991 :   info->compression_method = in[26];

  000fc	0f b6 46 1a	 movzx	 eax, BYTE PTR [esi+26]
  00100	89 03		 mov	 DWORD PTR [ebx], eax

; 3992 :   info->filter_method = in[27];

  00102	0f b6 46 1b	 movzx	 eax, BYTE PTR [esi+27]
  00106	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 3993 :   info->interlace_method = in[28];

  00109	0f b6 46 1c	 movzx	 eax, BYTE PTR [esi+28]
  0010d	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 3994 : 
; 3995 :   if(!state->decoder.ignore_crc)

  00110	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0
  00114	89 45 f8	 mov	 DWORD PTR tv477[ebp], eax
  00117	75 53		 jne	 SHORT $LN4@lodepng_in

; 3996 :   {
; 3997 :     unsigned CRC = lodepng_read32bitInt(&in[29]);

  00119	8d 4e 1d	 lea	 ecx, DWORD PTR [esi+29]
  0011c	e8 00 00 00 00	 call	 ?lodepng_read32bitInt@@YAIPBE@Z ; lodepng_read32bitInt
  00121	89 45 10	 mov	 DWORD PTR _CRC$1$[ebp], eax
  00124	8b 45 08	 mov	 eax, DWORD PTR tv481[ebp]

; 2314 :   unsigned c = 0xffffffffL;

  00127	83 ca ff	 or	 edx, -1

; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)

  0012a	33 f6		 xor	 esi, esi
  0012c	8d 64 24 00	 npad	 4
$LL17@lodepng_in:

; 2318 :   {
; 2319 :     c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);

  00130	0f b6 0c 30	 movzx	 ecx, BYTE PTR [eax+esi]
  00134	33 ca		 xor	 ecx, edx
  00136	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0013c	c1 ea 08	 shr	 edx, 8
  0013f	33 14 8d 00 00
	00 00		 xor	 edx, DWORD PTR _lodepng_crc32_table[ecx*4]
  00146	46		 inc	 esi
  00147	83 fe 11	 cmp	 esi, 17			; 00000011H
  0014a	72 e4		 jb	 SHORT $LL17@lodepng_in

; 3998 :     unsigned checksum = lodepng_crc32(&in[12], 17);
; 3999 :     if(CRC != checksum)

  0014c	f7 d2		 not	 edx
  0014e	39 55 10	 cmp	 DWORD PTR _CRC$1$[ebp], edx
  00151	74 16		 je	 SHORT $LN23@lodepng_in

; 4000 :     {
; 4001 :       CERROR_RETURN_ERROR(state->error, 57); /*invalid CRC*/

  00153	c7 87 28 01 00
	00 39 00 00 00	 mov	 DWORD PTR [edi+296], 57	; 00000039H
  0015d	5f		 pop	 edi
  0015e	5e		 pop	 esi
  0015f	b8 39 00 00 00	 mov	 eax, 57			; 00000039H
  00164	5b		 pop	 ebx

; 4013 :   return state->error;
; 4014 : }

  00165	8b e5		 mov	 esp, ebp
  00167	5d		 pop	 ebp
  00168	c3		 ret	 0
$LN23@lodepng_in:
  00169	8b 45 f8	 mov	 eax, DWORD PTR tv477[ebp]
$LN4@lodepng_in:

; 4002 :     }
; 4003 :   }
; 4004 : 
; 4005 :   /*error: only compression method 0 is allowed in the specification*/
; 4006 :   if(info->compression_method != 0) CERROR_RETURN_ERROR(state->error, 32);

  0016c	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  0016f	74 16		 je	 SHORT $LN3@lodepng_in
  00171	c7 87 28 01 00
	00 20 00 00 00	 mov	 DWORD PTR [edi+296], 32	; 00000020H
  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi
  0017d	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00182	5b		 pop	 ebx

; 4013 :   return state->error;
; 4014 : }

  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c3		 ret	 0
$LN3@lodepng_in:

; 4007 :   /*error: only filter method 0 is allowed in the specification*/
; 4008 :   if(info->filter_method != 0) CERROR_RETURN_ERROR(state->error, 33);

  00187	83 7b 04 00	 cmp	 DWORD PTR [ebx+4], 0
  0018b	74 16		 je	 SHORT $LN2@lodepng_in
  0018d	c7 87 28 01 00
	00 21 00 00 00	 mov	 DWORD PTR [edi+296], 33	; 00000021H
  00197	5f		 pop	 edi
  00198	5e		 pop	 esi
  00199	b8 21 00 00 00	 mov	 eax, 33			; 00000021H
  0019e	5b		 pop	 ebx

; 4013 :   return state->error;
; 4014 : }

  0019f	8b e5		 mov	 esp, ebp
  001a1	5d		 pop	 ebp
  001a2	c3		 ret	 0
$LN2@lodepng_in:

; 4009 :   /*error: only interlace methods 0 and 1 exist in the specification*/
; 4010 :   if(info->interlace_method > 1) CERROR_RETURN_ERROR(state->error, 34);

  001a3	83 f8 01	 cmp	 eax, 1
  001a6	76 16		 jbe	 SHORT $LN1@lodepng_in
  001a8	c7 87 28 01 00
	00 22 00 00 00	 mov	 DWORD PTR [edi+296], 34	; 00000022H
  001b2	5f		 pop	 edi
  001b3	5e		 pop	 esi
  001b4	b8 22 00 00 00	 mov	 eax, 34			; 00000022H
  001b9	5b		 pop	 ebx

; 4013 :   return state->error;
; 4014 : }

  001ba	8b e5		 mov	 esp, ebp
  001bc	5d		 pop	 ebp
  001bd	c3		 ret	 0
$LN1@lodepng_in:

; 4011 : 
; 4012 :   state->error = checkColorValidity(info->color.colortype, info->color.bitdepth);

  001be	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  001c1	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  001c4	e8 00 00 00 00	 call	 ?checkColorValidity@@YAIW4LodePNGColorType@@I@Z ; checkColorValidity
  001c9	89 87 28 01 00
	00		 mov	 DWORD PTR [edi+296], eax
  001cf	5f		 pop	 edi
  001d0	5e		 pop	 esi
  001d1	5b		 pop	 ebx

; 4013 :   return state->error;
; 4014 : }

  001d2	8b e5		 mov	 esp, ebp
  001d4	5d		 pop	 ebp
  001d5	c3		 ret	 0
$LN6@lodepng_in:

; 3982 :   {
; 3983 :     CERROR_RETURN_ERROR(state->error, 29); /*error: it doesn't start with a IHDR chunk!*/

  001d6	c7 87 28 01 00
	00 1d 00 00 00	 mov	 DWORD PTR [edi+296], 29	; 0000001dH
  001e0	5f		 pop	 edi
  001e1	5e		 pop	 esi
  001e2	b8 1d 00 00 00	 mov	 eax, 29			; 0000001dH
  001e7	5b		 pop	 ebx

; 4013 :   return state->error;
; 4014 : }

  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c3		 ret	 0
$LN8@lodepng_in:

; 3978 :   {
; 3979 :     CERROR_RETURN_ERROR(state->error, 28); /*error: the first 8 bytes are not the correct PNG signature*/

  001ec	c7 87 28 01 00
	00 1c 00 00 00	 mov	 DWORD PTR [edi+296], 28	; 0000001cH
  001f6	5f		 pop	 edi
  001f7	5e		 pop	 esi
  001f8	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  001fd	5b		 pop	 ebx

; 4013 :   return state->error;
; 4014 : }

  001fe	8b e5		 mov	 esp, ebp
  00200	5d		 pop	 ebp
  00201	c3		 ret	 0
$LN11@lodepng_in:

; 3964 :   {
; 3965 :     CERROR_RETURN_ERROR(state->error, 48); /*error: the given data is empty*/

  00202	c7 87 28 01 00
	00 30 00 00 00	 mov	 DWORD PTR [edi+296], 48	; 00000030H
  0020c	5f		 pop	 edi
  0020d	5e		 pop	 esi
  0020e	b8 30 00 00 00	 mov	 eax, 48			; 00000030H
  00213	5b		 pop	 ebx

; 4013 :   return state->error;
; 4014 : }

  00214	8b e5		 mov	 esp, ebp
  00216	5d		 pop	 ebp
  00217	c3		 ret	 0
?lodepng_inspect@@YAIPAI0PAULodePNGState@@PBEI@Z ENDP	; lodepng_inspect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?unfilterScanline@@YAIPAEPBE1IEI@Z
_TEXT	SEGMENT
_precon$3$ = -32					; size = 4
$T1 = -28						; size = 4
_pa$1$ = -24						; size = 4
tv2027 = -20						; size = 4
tv2022 = -20						; size = 4
tv2020 = -20						; size = 4
tv2019 = -20						; size = 4
tv1997 = -20						; size = 4
_length$7$ = -20					; size = 4
tv2016 = -16						; size = 4
tv1998 = -16						; size = 4
$T2 = -12						; size = 4
$T3 = -8						; size = 4
_recon$1$ = -8						; size = 4
_pb$1$ = -4						; size = 4
_scanline$1$ = -4					; size = 4
tv2010 = -4						; size = 4
_precon$ = 8						; size = 4
_bytewidth$ = 12					; size = 4
_precon$2$ = 16						; size = 4
tv2039 = 16						; size = 4
tv2036 = 16						; size = 4
tv2033 = 16						; size = 4
tv2031 = 16						; size = 4
tv2023 = 16						; size = 4
tv2018 = 16						; size = 4
tv2012 = 16						; size = 4
tv1995 = 16						; size = 4
_filterType$ = 16					; size = 1
_length$ = 20						; size = 4
?unfilterScanline@@YAIPAEPBE1IEI@Z PROC			; unfilterScanline, COMDAT
; _recon$ = ecx
; _scanline$ = edx

; 4018 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 4019 :   /*
; 4020 :   For PNG filter method 0
; 4021 :   unfilter a PNG image scanline by scanline. when the pixels are smaller than 1 byte,
; 4022 :   the filter works byte per byte (bytewidth = 1)
; 4023 :   precon is the previous unfiltered scanline, recon the result, scanline the current one
; 4024 :   the incoming scanlines do NOT include the filtertype byte, that one is given in the parameter filterType instead
; 4025 :   recon and scanline MAY be the same memory address! precon must be disjoint.
; 4026 :   */
; 4027 : 
; 4028 :   size_t i;
; 4029 :   switch(filterType)

  00006	0f b6 45 10	 movzx	 eax, BYTE PTR _filterType$[ebp]
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	8b f2		 mov	 esi, edx
  0000e	57		 push	 edi
  0000f	89 75 fc	 mov	 DWORD PTR _scanline$1$[ebp], esi
  00012	89 4d f8	 mov	 DWORD PTR _recon$1$[ebp], ecx
  00015	83 f8 04	 cmp	 eax, 4
  00018	0f 87 dc 03 00
	00		 ja	 $LN1@unfilterSc
  0001e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN126@unfilterSc[eax*4]
$LN51@unfilterSc:

; 4030 :   {
; 4031 :     case 0:
; 4032 :       for(i = 0; i < length; i++) recon[i] = scanline[i];

  00025	8b 55 14	 mov	 edx, DWORD PTR _length$[ebp]
  00028	85 d2		 test	 edx, edx
  0002a	0f 84 c1 03 00
	00		 je	 $LN2@unfilterSc
  00030	2b f1		 sub	 esi, ecx
$LL88@unfilterSc:
  00032	8a 04 0e	 mov	 al, BYTE PTR [esi+ecx]
  00035	88 01		 mov	 BYTE PTR [ecx], al
  00037	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0003a	4a		 dec	 edx
  0003b	75 f5		 jne	 SHORT $LL88@unfilterSc

; 4086 :   }
; 4087 :   return 0;

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	33 c0		 xor	 eax, eax
  00041	5b		 pop	 ebx

; 4088 : }

  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
$LN47@unfilterSc:

; 4033 :       break;
; 4034 :     case 1:
; 4035 :       for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];

  00046	8b 7d 0c	 mov	 edi, DWORD PTR _bytewidth$[ebp]
  00049	85 ff		 test	 edi, edi
  0004b	74 14		 je	 SHORT $LN44@unfilterSc
  0004d	8b d1		 mov	 edx, ecx
  0004f	2b f1		 sub	 esi, ecx
  00051	8b df		 mov	 ebx, edi
$LL90@unfilterSc:
  00053	8a 04 32	 mov	 al, BYTE PTR [edx+esi]
  00056	88 02		 mov	 BYTE PTR [edx], al
  00058	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  0005b	4b		 dec	 ebx
  0005c	75 f5		 jne	 SHORT $LL90@unfilterSc
  0005e	8b 75 fc	 mov	 esi, DWORD PTR _scanline$1$[ebp]
$LN44@unfilterSc:

; 4036 :       for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth];

  00061	3b 7d 14	 cmp	 edi, DWORD PTR _length$[ebp]
  00064	0f 83 87 03 00
	00		 jae	 $LN2@unfilterSc
  0006a	8b d9		 mov	 ebx, ecx
  0006c	2b df		 sub	 ebx, edi
  0006e	2b f1		 sub	 esi, ecx
$LL43@unfilterSc:
  00070	8a 04 3b	 mov	 al, BYTE PTR [ebx+edi]
  00073	8d 14 0f	 lea	 edx, DWORD PTR [edi+ecx]
  00076	47		 inc	 edi
  00077	02 04 16	 add	 al, BYTE PTR [esi+edx]
  0007a	88 02		 mov	 BYTE PTR [edx], al
  0007c	3b 7d 14	 cmp	 edi, DWORD PTR _length$[ebp]
  0007f	72 ef		 jb	 SHORT $LL43@unfilterSc

; 4086 :   }
; 4087 :   return 0;

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	33 c0		 xor	 eax, eax
  00085	5b		 pop	 ebx

; 4088 : }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
$LN40@unfilterSc:

; 4037 :       break;
; 4038 :     case 2:
; 4039 :       if(precon)

  0008a	8b 45 08	 mov	 eax, DWORD PTR _precon$[ebp]
  0008d	85 c0		 test	 eax, eax
  0008f	0f 84 a9 00 00
	00		 je	 $LN39@unfilterSc

; 4040 :       {
; 4041 :         for(i = 0; i < length; i++) recon[i] = scanline[i] + precon[i];

  00095	8b 7d 14	 mov	 edi, DWORD PTR _length$[ebp]
  00098	33 db		 xor	 ebx, ebx
  0009a	85 ff		 test	 edi, edi
  0009c	0f 84 4f 03 00
	00		 je	 $LN2@unfilterSc
  000a2	83 ff 10	 cmp	 edi, 16			; 00000010H
  000a5	72 6e		 jb	 SHORT $LN93@unfilterSc
  000a7	48		 dec	 eax
  000a8	8d 51 ff	 lea	 edx, DWORD PTR [ecx-1]
  000ab	03 c7		 add	 eax, edi
  000ad	03 d7		 add	 edx, edi
  000af	3b c8		 cmp	 ecx, eax
  000b1	77 07		 ja	 SHORT $LN94@unfilterSc
  000b3	8b 45 08	 mov	 eax, DWORD PTR _precon$[ebp]
  000b6	3b d0		 cmp	 edx, eax
  000b8	73 5b		 jae	 SHORT $LN93@unfilterSc
$LN94@unfilterSc:
  000ba	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  000bd	03 c6		 add	 eax, esi
  000bf	3b c8		 cmp	 ecx, eax
  000c1	77 04		 ja	 SHORT $LN95@unfilterSc
  000c3	3b d6		 cmp	 edx, esi
  000c5	73 4b		 jae	 SHORT $LN123@unfilterSc
$LN95@unfilterSc:
  000c7	8b c7		 mov	 eax, edi
  000c9	8b d7		 mov	 edx, edi
  000cb	8b f9		 mov	 edi, ecx
  000cd	8b 4d 08	 mov	 ecx, DWORD PTR _precon$[ebp]
  000d0	83 e0 0f	 and	 eax, 15			; 0000000fH
  000d3	2b fe		 sub	 edi, esi
  000d5	2b d0		 sub	 edx, eax
  000d7	2b ce		 sub	 ecx, esi
  000d9	89 7d 10	 mov	 DWORD PTR tv2023[ebp], edi
  000dc	8b 7d 14	 mov	 edi, DWORD PTR _length$[ebp]
  000df	89 4d ec	 mov	 DWORD PTR tv2019[ebp], ecx
  000e2	8b 4d 10	 mov	 ecx, DWORD PTR tv2023[ebp]
  000e5	8b c6		 mov	 eax, esi
  000e7	8b 75 ec	 mov	 esi, DWORD PTR tv2019[ebp]
  000ea	8d 9b 00 00 00
	00		 npad	 6
$LL38@unfilterSc:
  000f0	f3 0f 6f 0c 30	 movdqu	 xmm1, XMMWORD PTR [eax+esi]
  000f5	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  000f9	83 c3 10	 add	 ebx, 16			; 00000010H
  000fc	66 0f fc c8	 paddb	 xmm1, xmm0
  00100	f3 0f 7f 0c 08	 movdqu	 XMMWORD PTR [eax+ecx], xmm1
  00105	8d 40 10	 lea	 eax, DWORD PTR [eax+16]
  00108	3b da		 cmp	 ebx, edx
  0010a	72 e4		 jb	 SHORT $LL38@unfilterSc
  0010c	8b 4d f8	 mov	 ecx, DWORD PTR _recon$1$[ebp]
  0010f	8b 75 fc	 mov	 esi, DWORD PTR _scanline$1$[ebp]
$LN123@unfilterSc:
  00112	8b 45 08	 mov	 eax, DWORD PTR _precon$[ebp]
$LN93@unfilterSc:
  00115	3b df		 cmp	 ebx, edi
  00117	0f 83 d4 02 00
	00		 jae	 $LN2@unfilterSc
  0011d	2b f0		 sub	 esi, eax
  0011f	2b c8		 sub	 ecx, eax
  00121	8d 14 03	 lea	 edx, DWORD PTR [ebx+eax]
  00124	2b fb		 sub	 edi, ebx
$LL92@unfilterSc:
  00126	8a 04 16	 mov	 al, BYTE PTR [esi+edx]
  00129	02 02		 add	 al, BYTE PTR [edx]
  0012b	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  0012e	88 44 11 ff	 mov	 BYTE PTR [ecx+edx-1], al
  00132	4f		 dec	 edi
  00133	75 f1		 jne	 SHORT $LL92@unfilterSc

; 4086 :   }
; 4087 :   return 0;

  00135	5f		 pop	 edi
  00136	5e		 pop	 esi
  00137	33 c0		 xor	 eax, eax
  00139	5b		 pop	 ebx

; 4088 : }

  0013a	8b e5		 mov	 esp, ebp
  0013c	5d		 pop	 ebp
  0013d	c3		 ret	 0
$LN39@unfilterSc:

; 4042 :       }
; 4043 :       else
; 4044 :       {
; 4045 :         for(i = 0; i < length; i++) recon[i] = scanline[i];

  0013e	8b 55 14	 mov	 edx, DWORD PTR _length$[ebp]
  00141	85 d2		 test	 edx, edx
  00143	0f 84 a8 02 00
	00		 je	 $LN2@unfilterSc
  00149	2b f1		 sub	 esi, ecx
  0014b	eb 03 8d 49 00	 npad	 5
$LL96@unfilterSc:
  00150	8a 04 0e	 mov	 al, BYTE PTR [esi+ecx]
  00153	88 01		 mov	 BYTE PTR [ecx], al
  00155	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00158	4a		 dec	 edx
  00159	75 f5		 jne	 SHORT $LL96@unfilterSc

; 4086 :   }
; 4087 :   return 0;

  0015b	5f		 pop	 edi
  0015c	5e		 pop	 esi
  0015d	33 c0		 xor	 eax, eax
  0015f	5b		 pop	 ebx

; 4088 : }

  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c3		 ret	 0
$LN31@unfilterSc:

; 4046 :       }
; 4047 :       break;
; 4048 :     case 3:
; 4049 :       if(precon)

  00164	8b 55 08	 mov	 edx, DWORD PTR _precon$[ebp]

; 4050 :       {
; 4051 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i] + precon[i] / 2;

  00167	8b 7d 0c	 mov	 edi, DWORD PTR _bytewidth$[ebp]
  0016a	85 d2		 test	 edx, edx
  0016c	74 7d		 je	 SHORT $LN30@unfilterSc
  0016e	85 ff		 test	 edi, edi
  00170	74 2f		 je	 SHORT $LN27@unfilterSc
  00172	8b 45 08	 mov	 eax, DWORD PTR _precon$[ebp]
  00175	2b c6		 sub	 eax, esi
  00177	89 45 10	 mov	 DWORD PTR tv2018[ebp], eax
  0017a	8b c1		 mov	 eax, ecx
  0017c	2b c6		 sub	 eax, esi
  0017e	8b d6		 mov	 edx, esi
  00180	8b 75 10	 mov	 esi, DWORD PTR tv2018[ebp]
  00183	8b df		 mov	 ebx, edi
  00185	8b c8		 mov	 ecx, eax
$LL98@unfilterSc:
  00187	8a 04 32	 mov	 al, BYTE PTR [edx+esi]
  0018a	d0 e8		 shr	 al, 1
  0018c	02 02		 add	 al, BYTE PTR [edx]
  0018e	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  00191	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  00195	4b		 dec	 ebx
  00196	75 ef		 jne	 SHORT $LL98@unfilterSc
  00198	8b 4d f8	 mov	 ecx, DWORD PTR _recon$1$[ebp]
  0019b	8b 75 fc	 mov	 esi, DWORD PTR _scanline$1$[ebp]
  0019e	8b 55 08	 mov	 edx, DWORD PTR _precon$[ebp]
$LN27@unfilterSc:

; 4052 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + ((recon[i - bytewidth] + precon[i]) / 2);

  001a1	3b 7d 14	 cmp	 edi, DWORD PTR _length$[ebp]
  001a4	0f 83 47 02 00
	00		 jae	 $LN2@unfilterSc
  001aa	8b c1		 mov	 eax, ecx
  001ac	2b d6		 sub	 edx, esi
  001ae	2b c7		 sub	 eax, edi
  001b0	8d 1c 3e	 lea	 ebx, DWORD PTR [esi+edi]
  001b3	2b ce		 sub	 ecx, esi
  001b5	8b 75 14	 mov	 esi, DWORD PTR _length$[ebp]
  001b8	89 45 ec	 mov	 DWORD PTR tv2027[ebp], eax
  001bb	89 55 10	 mov	 DWORD PTR _precon$2$[ebp], edx
  001be	8b ff		 npad	 2
$LL26@unfilterSc:
  001c0	0f b6 04 38	 movzx	 eax, BYTE PTR [eax+edi]
  001c4	0f b6 14 13	 movzx	 edx, BYTE PTR [ebx+edx]
  001c8	03 c2		 add	 eax, edx
  001ca	99		 cdq
  001cb	2b c2		 sub	 eax, edx
  001cd	8b 55 10	 mov	 edx, DWORD PTR _precon$2$[ebp]
  001d0	d1 f8		 sar	 eax, 1
  001d2	02 03		 add	 al, BYTE PTR [ebx]
  001d4	47		 inc	 edi
  001d5	88 04 0b	 mov	 BYTE PTR [ebx+ecx], al
  001d8	8b 45 ec	 mov	 eax, DWORD PTR tv2027[ebp]
  001db	8d 5b 01	 lea	 ebx, DWORD PTR [ebx+1]
  001de	3b fe		 cmp	 edi, esi
  001e0	72 de		 jb	 SHORT $LL26@unfilterSc

; 4086 :   }
; 4087 :   return 0;

  001e2	5f		 pop	 edi
  001e3	5e		 pop	 esi
  001e4	33 c0		 xor	 eax, eax
  001e6	5b		 pop	 ebx

; 4088 : }

  001e7	8b e5		 mov	 esp, ebp
  001e9	5d		 pop	 ebp
  001ea	c3		 ret	 0
$LN30@unfilterSc:

; 4053 :       }
; 4054 :       else
; 4055 :       {
; 4056 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];

  001eb	85 ff		 test	 edi, edi
  001ed	74 14		 je	 SHORT $LN20@unfilterSc
  001ef	8b d1		 mov	 edx, ecx
  001f1	2b f1		 sub	 esi, ecx
  001f3	8b df		 mov	 ebx, edi
$LL100@unfilterSc:
  001f5	8a 04 16	 mov	 al, BYTE PTR [esi+edx]
  001f8	88 02		 mov	 BYTE PTR [edx], al
  001fa	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  001fd	4b		 dec	 ebx
  001fe	75 f5		 jne	 SHORT $LL100@unfilterSc
  00200	8b 75 fc	 mov	 esi, DWORD PTR _scanline$1$[ebp]
$LN20@unfilterSc:

; 4057 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth] / 2;

  00203	3b 7d 14	 cmp	 edi, DWORD PTR _length$[ebp]
  00206	0f 83 e5 01 00
	00		 jae	 $LN2@unfilterSc
  0020c	8b d9		 mov	 ebx, ecx
  0020e	2b df		 sub	 ebx, edi
  00210	2b f1		 sub	 esi, ecx
$LL19@unfilterSc:
  00212	8a 04 3b	 mov	 al, BYTE PTR [ebx+edi]
  00215	8d 14 0f	 lea	 edx, DWORD PTR [edi+ecx]
  00218	d0 e8		 shr	 al, 1
  0021a	02 04 16	 add	 al, BYTE PTR [esi+edx]
  0021d	47		 inc	 edi
  0021e	88 02		 mov	 BYTE PTR [edx], al
  00220	3b 7d 14	 cmp	 edi, DWORD PTR _length$[ebp]
  00223	72 ed		 jb	 SHORT $LL19@unfilterSc

; 4086 :   }
; 4087 :   return 0;

  00225	5f		 pop	 edi
  00226	5e		 pop	 esi
  00227	33 c0		 xor	 eax, eax
  00229	5b		 pop	 ebx

; 4088 : }

  0022a	8b e5		 mov	 esp, ebp
  0022c	5d		 pop	 ebp
  0022d	c3		 ret	 0
$LN16@unfilterSc:

; 4058 :       }
; 4059 :       break;
; 4060 :     case 4:
; 4061 :       if(precon)

  0022e	8b 55 08	 mov	 edx, DWORD PTR _precon$[ebp]
  00231	85 d2		 test	 edx, edx
  00233	0f 84 78 01 00
	00		 je	 $LN15@unfilterSc

; 4062 :       {
; 4063 :         for(i = 0; i < bytewidth; i++)

  00239	8b 5d 0c	 mov	 ebx, DWORD PTR _bytewidth$[ebp]
  0023c	33 ff		 xor	 edi, edi
  0023e	85 db		 test	 ebx, ebx
  00240	0f 84 a8 00 00
	00		 je	 $LN12@unfilterSc
  00246	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00249	72 6b		 jb	 SHORT $LN103@unfilterSc

; 4064 :         {
; 4065 :           recon[i] = (scanline[i] + precon[i]); /*paethPredictor(0, precon[i], 0) is always precon[i]*/

  0024b	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0024e	03 c3		 add	 eax, ebx
  00250	3b c8		 cmp	 ecx, eax
  00252	77 09		 ja	 SHORT $LN104@unfilterSc
  00254	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00257	03 c3		 add	 eax, ebx
  00259	3b c2		 cmp	 eax, edx
  0025b	73 59		 jae	 SHORT $LN103@unfilterSc
$LN104@unfilterSc:
  0025d	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00260	03 c6		 add	 eax, esi
  00262	3b c8		 cmp	 ecx, eax
  00264	77 09		 ja	 SHORT $LN105@unfilterSc
  00266	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00269	03 c3		 add	 eax, ebx
  0026b	3b c6		 cmp	 eax, esi
  0026d	73 47		 jae	 SHORT $LN103@unfilterSc
$LN105@unfilterSc:

; 4040 :       {
; 4041 :         for(i = 0; i < length; i++) recon[i] = scanline[i] + precon[i];

  0026f	8b c3		 mov	 eax, ebx
  00271	89 5d 10	 mov	 DWORD PTR tv2039[ebp], ebx

; 4062 :       {
; 4063 :         for(i = 0; i < bytewidth; i++)

  00274	8b d9		 mov	 ebx, ecx
  00276	83 e0 0f	 and	 eax, 15			; 0000000fH
  00279	29 45 10	 sub	 DWORD PTR tv2039[ebp], eax
  0027c	2b de		 sub	 ebx, esi
  0027e	8b ca		 mov	 ecx, edx
  00280	2b ce		 sub	 ecx, esi
  00282	89 5d ec	 mov	 DWORD PTR tv2020[ebp], ebx
  00285	8b 5d 0c	 mov	 ebx, DWORD PTR _bytewidth$[ebp]
  00288	89 4d f0	 mov	 DWORD PTR tv2016[ebp], ecx
  0028b	8b 4d ec	 mov	 ecx, DWORD PTR tv2020[ebp]
  0028e	8b c6		 mov	 eax, esi
  00290	8b 75 f0	 mov	 esi, DWORD PTR tv2016[ebp]
$LL14@unfilterSc:

; 4064 :         {
; 4065 :           recon[i] = (scanline[i] + precon[i]); /*paethPredictor(0, precon[i], 0) is always precon[i]*/

  00293	f3 0f 6f 0c 30	 movdqu	 xmm1, XMMWORD PTR [eax+esi]
  00298	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [eax]
  0029c	83 c7 10	 add	 edi, 16			; 00000010H
  0029f	66 0f fc c8	 paddb	 xmm1, xmm0
  002a3	f3 0f 7f 0c 08	 movdqu	 XMMWORD PTR [eax+ecx], xmm1
  002a8	8d 40 10	 lea	 eax, DWORD PTR [eax+16]
  002ab	3b 7d 10	 cmp	 edi, DWORD PTR tv2039[ebp]
  002ae	72 e3		 jb	 SHORT $LL14@unfilterSc
  002b0	8b 4d f8	 mov	 ecx, DWORD PTR _recon$1$[ebp]
  002b3	8b 75 fc	 mov	 esi, DWORD PTR _scanline$1$[ebp]
$LN103@unfilterSc:

; 4062 :       {
; 4063 :         for(i = 0; i < bytewidth; i++)

  002b6	3b fb		 cmp	 edi, ebx
  002b8	73 34		 jae	 SHORT $LN12@unfilterSc
  002ba	8b 45 08	 mov	 eax, DWORD PTR _precon$[ebp]
  002bd	89 4d fc	 mov	 DWORD PTR tv2010[ebp], ecx
  002c0	29 45 fc	 sub	 DWORD PTR tv2010[ebp], eax
  002c3	89 75 10	 mov	 DWORD PTR tv2012[ebp], esi
  002c6	29 45 10	 sub	 DWORD PTR tv2012[ebp], eax
  002c9	8b 4d 10	 mov	 ecx, DWORD PTR tv2012[ebp]
  002cc	03 d7		 add	 edx, edi
  002ce	89 5d ec	 mov	 DWORD PTR tv1997[ebp], ebx
  002d1	2b df		 sub	 ebx, edi
  002d3	8b 7d fc	 mov	 edi, DWORD PTR tv2010[ebp]
$LL102@unfilterSc:

; 4040 :       {
; 4041 :         for(i = 0; i < length; i++) recon[i] = scanline[i] + precon[i];

  002d6	8a 04 0a	 mov	 al, BYTE PTR [edx+ecx]
  002d9	02 02		 add	 al, BYTE PTR [edx]

; 4062 :       {
; 4063 :         for(i = 0; i < bytewidth; i++)

  002db	8d 52 01	 lea	 edx, DWORD PTR [edx+1]

; 4064 :         {
; 4065 :           recon[i] = (scanline[i] + precon[i]); /*paethPredictor(0, precon[i], 0) is always precon[i]*/

  002de	88 44 3a ff	 mov	 BYTE PTR [edx+edi-1], al
  002e2	4b		 dec	 ebx
  002e3	75 f1		 jne	 SHORT $LL102@unfilterSc
  002e5	8b 4d f8	 mov	 ecx, DWORD PTR _recon$1$[ebp]
  002e8	8b 5d 0c	 mov	 ebx, DWORD PTR _bytewidth$[ebp]
  002eb	8b 55 08	 mov	 edx, DWORD PTR _precon$[ebp]
$LN12@unfilterSc:

; 4066 :         }
; 4067 :         for(i = bytewidth; i < length; i++)

  002ee	8b 45 14	 mov	 eax, DWORD PTR _length$[ebp]
  002f1	3b d8		 cmp	 ebx, eax
  002f3	0f 83 f8 00 00
	00		 jae	 $LN2@unfilterSc
  002f9	89 55 10	 mov	 DWORD PTR tv1995[ebp], edx
  002fc	29 4d 10	 sub	 DWORD PTR tv1995[ebp], ecx
  002ff	2b d6		 sub	 edx, esi
  00301	8d 3c 1e	 lea	 edi, DWORD PTR [esi+ebx]
  00304	2b c3		 sub	 eax, ebx
  00306	89 7d f0	 mov	 DWORD PTR tv1998[ebp], edi
  00309	89 55 e0	 mov	 DWORD PTR _precon$3$[ebp], edx
  0030c	89 45 ec	 mov	 DWORD PTR _length$7$[ebp], eax
  0030f	90		 npad	 1
$LL11@unfilterSc:

; 4068 :         {
; 4069 :           recon[i] = (scanline[i] + paethPredictor(recon[i - bytewidth], precon[i], precon[i - bytewidth]));

  00310	0f b6 14 17	 movzx	 edx, BYTE PTR [edi+edx]
  00314	8b 45 10	 mov	 eax, DWORD PTR tv1995[ebp]

; 3893 :   short pa = abs(b - c);

  00317	0f bf da	 movsx	 ebx, dx

; 4068 :         {
; 4069 :           recon[i] = (scanline[i] + paethPredictor(recon[i - bytewidth], precon[i], precon[i - bytewidth]));

  0031a	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  0031e	89 45 f8	 mov	 DWORD PTR $T3[ebp], eax
  00321	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00324	89 45 f4	 mov	 DWORD PTR $T2[ebp], eax

; 3893 :   short pa = abs(b - c);

  00327	8b 45 f8	 mov	 eax, DWORD PTR $T3[ebp]
  0032a	0f bf f8	 movsx	 edi, ax

; 4068 :         {
; 4069 :           recon[i] = (scanline[i] + paethPredictor(recon[i - bytewidth], precon[i], precon[i - bytewidth]));

  0032d	89 55 e4	 mov	 DWORD PTR $T1[ebp], edx

; 3893 :   short pa = abs(b - c);

  00330	8b c3		 mov	 eax, ebx
  00332	2b c7		 sub	 eax, edi
  00334	99		 cdq
  00335	33 c2		 xor	 eax, edx
  00337	2b c2		 sub	 eax, edx
  00339	0f b7 c0	 movzx	 eax, ax
  0033c	89 45 e8	 mov	 DWORD PTR _pa$1$[ebp], eax

; 3894 :   short pb = abs(a - c);

  0033f	8b 45 f4	 mov	 eax, DWORD PTR $T2[ebp]
  00342	0f bf f0	 movsx	 esi, ax
  00345	8b c6		 mov	 eax, esi
  00347	2b c7		 sub	 eax, edi
  00349	99		 cdq
  0034a	33 c2		 xor	 eax, edx
  0034c	2b c2		 sub	 eax, edx
  0034e	0f b7 c0	 movzx	 eax, ax

; 3895 :   short pc = abs(a + b - c - c);

  00351	8d 14 3f	 lea	 edx, DWORD PTR [edi+edi]

; 3896 : 
; 3897 :   if(pc < pa && pc < pb) return (unsigned char)c;

  00354	8b 7d e8	 mov	 edi, DWORD PTR _pa$1$[ebp]
  00357	2b f2		 sub	 esi, edx
  00359	89 45 fc	 mov	 DWORD PTR _pb$1$[ebp], eax
  0035c	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  0035f	8b 75 fc	 mov	 esi, DWORD PTR _pb$1$[ebp]
  00362	99		 cdq
  00363	33 c2		 xor	 eax, edx
  00365	2b c2		 sub	 eax, edx
  00367	0f b7 c0	 movzx	 eax, ax
  0036a	66 3b c7	 cmp	 ax, di
  0036d	7d 05		 jge	 SHORT $LN59@unfilterSc
  0036f	66 3b c6	 cmp	 ax, si
  00372	7c 15		 jl	 SHORT $LN57@unfilterSc
$LN59@unfilterSc:

; 3898 :   else if(pb < pa) return (unsigned char)b;

  00374	8b 45 f4	 mov	 eax, DWORD PTR $T2[ebp]
  00377	0f b6 d0	 movzx	 edx, al
  0037a	8b 45 e4	 mov	 eax, DWORD PTR $T1[ebp]
  0037d	0f b6 c0	 movzx	 eax, al
  00380	66 3b f7	 cmp	 si, di
  00383	0f 4c d0	 cmovl	 edx, eax
  00386	88 55 f8	 mov	 BYTE PTR $T3[ebp], dl
$LN57@unfilterSc:

; 4064 :         {
; 4065 :           recon[i] = (scanline[i] + precon[i]); /*paethPredictor(0, precon[i], 0) is always precon[i]*/

  00389	8b 7d f0	 mov	 edi, DWORD PTR tv1998[ebp]

; 4068 :         {
; 4069 :           recon[i] = (scanline[i] + paethPredictor(recon[i - bytewidth], precon[i], precon[i - bytewidth]));

  0038c	8b 55 0c	 mov	 edx, DWORD PTR _bytewidth$[ebp]
  0038f	8a 07		 mov	 al, BYTE PTR [edi]
  00391	02 45 f8	 add	 al, BYTE PTR $T3[ebp]
  00394	47		 inc	 edi
  00395	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  00398	8b 55 e0	 mov	 edx, DWORD PTR _precon$3$[ebp]
  0039b	41		 inc	 ecx
  0039c	ff 4d ec	 dec	 DWORD PTR _length$7$[ebp]
  0039f	89 7d f0	 mov	 DWORD PTR tv1998[ebp], edi
  003a2	0f 85 68 ff ff
	ff		 jne	 $LL11@unfilterSc

; 4086 :   }
; 4087 :   return 0;

  003a8	5f		 pop	 edi
  003a9	5e		 pop	 esi
  003aa	33 c0		 xor	 eax, eax
  003ac	5b		 pop	 ebx

; 4088 : }

  003ad	8b e5		 mov	 esp, ebp
  003af	5d		 pop	 ebp
  003b0	c3		 ret	 0
$LN15@unfilterSc:

; 4070 :         }
; 4071 :       }
; 4072 :       else
; 4073 :       {
; 4074 :         for(i = 0; i < bytewidth; i++)

  003b1	8b 7d 0c	 mov	 edi, DWORD PTR _bytewidth$[ebp]
  003b4	85 ff		 test	 edi, edi
  003b6	74 16		 je	 SHORT $LN5@unfilterSc
  003b8	8b d1		 mov	 edx, ecx
  003ba	2b f1		 sub	 esi, ecx
  003bc	8b df		 mov	 ebx, edi
  003be	8b ff		 npad	 2
$LL106@unfilterSc:

; 4075 :         {
; 4076 :           recon[i] = scanline[i];

  003c0	8a 04 32	 mov	 al, BYTE PTR [edx+esi]
  003c3	88 02		 mov	 BYTE PTR [edx], al
  003c5	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  003c8	4b		 dec	 ebx
  003c9	75 f5		 jne	 SHORT $LL106@unfilterSc
  003cb	8b 75 fc	 mov	 esi, DWORD PTR _scanline$1$[ebp]
$LN5@unfilterSc:

; 4077 :         }
; 4078 :         for(i = bytewidth; i < length; i++)

  003ce	3b 7d 14	 cmp	 edi, DWORD PTR _length$[ebp]
  003d1	73 1e		 jae	 SHORT $LN2@unfilterSc
  003d3	8b d9		 mov	 ebx, ecx
  003d5	2b df		 sub	 ebx, edi
  003d7	2b f1		 sub	 esi, ecx
  003d9	8d a4 24 00 00
	00 00		 npad	 7
$LL4@unfilterSc:

; 4064 :         {
; 4065 :           recon[i] = (scanline[i] + precon[i]); /*paethPredictor(0, precon[i], 0) is always precon[i]*/

  003e0	8a 04 3b	 mov	 al, BYTE PTR [ebx+edi]
  003e3	8d 14 0f	 lea	 edx, DWORD PTR [edi+ecx]

; 4077 :         }
; 4078 :         for(i = bytewidth; i < length; i++)

  003e6	47		 inc	 edi
  003e7	02 04 16	 add	 al, BYTE PTR [esi+edx]

; 4079 :         {
; 4080 :           /*paethPredictor(recon[i - bytewidth], 0, 0) is always recon[i - bytewidth]*/
; 4081 :           recon[i] = (scanline[i] + recon[i - bytewidth]);

  003ea	88 02		 mov	 BYTE PTR [edx], al
  003ec	3b 7d 14	 cmp	 edi, DWORD PTR _length$[ebp]
  003ef	72 ef		 jb	 SHORT $LL4@unfilterSc
$LN2@unfilterSc:
  003f1	5f		 pop	 edi
  003f2	5e		 pop	 esi

; 4086 :   }
; 4087 :   return 0;

  003f3	33 c0		 xor	 eax, eax
  003f5	5b		 pop	 ebx

; 4088 : }

  003f6	8b e5		 mov	 esp, ebp
  003f8	5d		 pop	 ebp
  003f9	c3		 ret	 0
$LN1@unfilterSc:
  003fa	5f		 pop	 edi
  003fb	5e		 pop	 esi

; 4082 :         }
; 4083 :       }
; 4084 :       break;
; 4085 :     default: return 36; /*error: unexisting filter type given*/

  003fc	b8 24 00 00 00	 mov	 eax, 36			; 00000024H
  00401	5b		 pop	 ebx

; 4088 : }

  00402	8b e5		 mov	 esp, ebp
  00404	5d		 pop	 ebp
  00405	c3		 ret	 0
  00406	8b ff		 npad	 2
$LN126@unfilterSc:
  00408	00 00 00 00	 DD	 $LN51@unfilterSc
  0040c	00 00 00 00	 DD	 $LN47@unfilterSc
  00410	00 00 00 00	 DD	 $LN40@unfilterSc
  00414	00 00 00 00	 DD	 $LN31@unfilterSc
  00418	00 00 00 00	 DD	 $LN16@unfilterSc
?unfilterScanline@@YAIPAEPBE1IEI@Z ENDP			; unfilterScanline
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?unfilter@@YAIPAEPBEIII@Z
_TEXT	SEGMENT
_bytewidth$1$ = -8					; size = 4
_in$1$ = -4						; size = 4
_w$ = 8							; size = 4
_h$ = 12						; size = 4
_filterType$1 = 16					; size = 1
_bpp$ = 16						; size = 4
?unfilter@@YAIPAEPBEIII@Z PROC				; unfilter, COMDAT
; _out$ = ecx
; _in$ = edx

; 4091 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 4092 :   /*
; 4093 :   For PNG filter method 0
; 4094 :   this function unfilters a single image (e.g. without interlacing this is called once, with Adam7 seven times)
; 4095 :   out must have enough bytes allocated already, in must have the scanlines + 1 filtertype byte per scanline
; 4096 :   w and h are image dimensions or dimensions of reduced image, bpp is bits per pixel
; 4097 :   in and out are allowed to be the same memory address (but aren't the same size since in has the extra filter bytes)
; 4098 :   */
; 4099 : 
; 4100 :   unsigned y;
; 4101 :   unsigned char* prevline = 0;
; 4102 : 
; 4103 :   /*bytewidth is used for filtering, is 1 when bpp < 8, number of bytes per pixel otherwise*/
; 4104 :   size_t bytewidth = (bpp + 7) / 8;

  00006	8b 45 10	 mov	 eax, DWORD PTR _bpp$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8d 48 07	 lea	 ecx, DWORD PTR [eax+7]
  00010	c1 e9 03	 shr	 ecx, 3
  00013	89 4d f8	 mov	 DWORD PTR _bytewidth$1$[ebp], ecx

; 4105 :   size_t linebytes = (w * bpp + 7) / 8;

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _w$[ebp]
  00019	0f af c8	 imul	 ecx, eax
  0001c	83 c1 07	 add	 ecx, 7
  0001f	89 55 fc	 mov	 DWORD PTR _in$1$[ebp], edx
  00022	33 d2		 xor	 edx, edx
  00024	c1 e9 03	 shr	 ecx, 3

; 4106 : 
; 4107 :   for(y = 0; y < h; y++)

  00027	33 db		 xor	 ebx, ebx
  00029	57		 push	 edi
  0002a	89 4d 08	 mov	 DWORD PTR _w$[ebp], ecx
  0002d	39 55 0c	 cmp	 DWORD PTR _h$[ebp], edx
  00030	76 41		 jbe	 SHORT $LN2@unfilter
  00032	8b 7d fc	 mov	 edi, DWORD PTR _in$1$[ebp]
  00035	8b 45 fc	 mov	 eax, DWORD PTR _in$1$[ebp]
  00038	47		 inc	 edi
  00039	2b c7		 sub	 eax, edi
  0003b	89 45 fc	 mov	 DWORD PTR _in$1$[ebp], eax
  0003e	8b ff		 npad	 2
$LL4@unfilter:

; 4108 :   {
; 4109 :     size_t outindex = linebytes * y;
; 4110 :     size_t inindex = (1 + linebytes) * y; /*the extra filterbyte added to each row*/
; 4111 :     unsigned char filterType = in[inindex];

  00040	8a 04 38	 mov	 al, BYTE PTR [eax+edi]

; 4112 : 
; 4113 :     CERROR_TRY_RETURN(unfilterScanline(&out[outindex], &in[inindex + 1], prevline, bytewidth, filterType, linebytes));

  00043	51		 push	 ecx
  00044	88 45 10	 mov	 BYTE PTR _filterType$1[ebp], al
  00047	ff 75 10	 push	 DWORD PTR _filterType$1[ebp]
  0004a	8b ce		 mov	 ecx, esi
  0004c	ff 75 f8	 push	 DWORD PTR _bytewidth$1$[ebp]
  0004f	52		 push	 edx
  00050	8b d7		 mov	 edx, edi
  00052	e8 00 00 00 00	 call	 ?unfilterScanline@@YAIPAEPBE1IEI@Z ; unfilterScanline
  00057	83 c4 10	 add	 esp, 16			; 00000010H
  0005a	85 c0		 test	 eax, eax
  0005c	75 17		 jne	 SHORT $LN5@unfilter

; 4114 : 
; 4115 :     prevline = &out[outindex];

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _w$[ebp]
  00061	8b d6		 mov	 edx, esi
  00063	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00066	43		 inc	 ebx
  00067	03 f8		 add	 edi, eax
  00069	8b 45 fc	 mov	 eax, DWORD PTR _in$1$[ebp]
  0006c	03 f1		 add	 esi, ecx
  0006e	3b 5d 0c	 cmp	 ebx, DWORD PTR _h$[ebp]
  00071	72 cd		 jb	 SHORT $LL4@unfilter
$LN2@unfilter:

; 4116 :   }
; 4117 : 
; 4118 :   return 0;

  00073	33 c0		 xor	 eax, eax
$LN5@unfilter:
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx

; 4119 : }

  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
?unfilter@@YAIPAEPBEIII@Z ENDP				; unfilter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?Adam7_deinterlace@@YAXPAEPBEIII@Z
_TEXT	SEGMENT
_ilinebits$1$ = -196					; size = 4
tv1056 = -192						; size = 4
_in$1$ = -188						; size = 4
_x$1$ = -184						; size = 4
_out$GSCopy$1$ = -180					; size = 4
tv1022 = -176						; size = 4
tv1061 = -172						; size = 4
tv1021 = -172						; size = 4
tv1063 = -168						; size = 4
tv1023 = -168						; size = 4
_y$1$ = -164						; size = 4
tv1064 = -164						; size = 4
_ibp$1$ = -160						; size = 4
_y$1$ = -160						; size = 4
_padded_passstart$ = -156				; size = 32
_filter_passstart$ = -124				; size = 32
_passstart$ = -92					; size = 32
_passh$ = -60						; size = 28
_passw$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_w$ = 8							; size = 4
_h$ = 12						; size = 4
_bpp$ = 16						; size = 4
?Adam7_deinterlace@@YAXPAEPBEIII@Z PROC			; Adam7_deinterlace, COMDAT
; _out$ = ecx
; _in$ = edx

; 4133 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx

; 4134 :   unsigned passw[7], passh[7];
; 4135 :   size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4136 :   unsigned i;
; 4137 : 
; 4138 :   Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);

  00014	8b 5d 08	 mov	 ebx, DWORD PTR _w$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 10	 mov	 edi, DWORD PTR _bpp$[ebp]
  0001c	57		 push	 edi
  0001d	ff 75 0c	 push	 DWORD PTR _h$[ebp]
  00020	8d 45 a4	 lea	 eax, DWORD PTR _passstart$[ebp]
  00023	53		 push	 ebx
  00024	50		 push	 eax
  00025	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _padded_passstart$[ebp]
  0002b	50		 push	 eax
  0002c	8d 45 84	 lea	 eax, DWORD PTR _filter_passstart$[ebp]
  0002f	89 95 44 ff ff
	ff		 mov	 DWORD PTR _in$1$[ebp], edx
  00035	89 8d 4c ff ff
	ff		 mov	 DWORD PTR _out$GSCopy$1$[ebp], ecx
  0003b	50		 push	 eax
  0003c	8d 55 c4	 lea	 edx, DWORD PTR _passh$[ebp]
  0003f	8d 4d e0	 lea	 ecx, DWORD PTR _passw$[ebp]
  00042	e8 00 00 00 00	 call	 ?Adam7_getpassvalues@@YAXQAI0000III@Z ; Adam7_getpassvalues
  00047	83 c4 18	 add	 esp, 24			; 00000018H

; 4139 : 
; 4140 :   if(bpp >= 8)

  0004a	83 ff 08	 cmp	 edi, 8
  0004d	0f 82 fa 00 00
	00		 jb	 $LN26@Adam7_dein

; 4141 :   {
; 4142 :     for(i = 0; i < 7; i++)

  00053	c1 ef 03	 shr	 edi, 3
  00056	33 f6		 xor	 esi, esi
  00058	89 b5 58 ff ff
	ff		 mov	 DWORD PTR tv1063[ebp], esi
  0005e	8b ff		 npad	 2
$LL25@Adam7_dein:

; 4146 :       for(y = 0; y < passh[i]; y++)

  00060	33 c0		 xor	 eax, eax
  00062	89 85 60 ff ff
	ff		 mov	 DWORD PTR _y$1$[ebp], eax
  00068	39 44 35 c4	 cmp	 DWORD PTR _passh$[ebp+esi], eax
  0006c	0f 86 b8 00 00
	00		 jbe	 $LN24@Adam7_dein

; 4143 :     {
; 4144 :       unsigned x, y, b;
; 4145 :       size_t bytewidth = bpp / 8;

  00072	8b 4c 35 e0	 mov	 ecx, DWORD PTR _passw$[ebp+esi]
  00076	33 d2		 xor	 edx, edx
  00078	8b d9		 mov	 ebx, ecx
  0007a	0f af df	 imul	 ebx, edi
  0007d	89 95 5c ff ff
	ff		 mov	 DWORD PTR tv1064[ebp], edx
  00083	89 9d 54 ff ff
	ff		 mov	 DWORD PTR tv1061[ebp], ebx
  00089	8d a4 24 00 00
	00 00		 npad	 7
$LL22@Adam7_dein:

; 4147 :       for(x = 0; x < passw[i]; x++)

  00090	33 db		 xor	 ebx, ebx
  00092	85 c9		 test	 ecx, ecx
  00094	74 77		 je	 SHORT $LN21@Adam7_dein
  00096	8b 54 35 a4	 mov	 edx, DWORD PTR _passstart$[ebp+esi]
  0009a	03 95 5c ff ff
	ff		 add	 edx, DWORD PTR tv1064[ebp]
  000a0	03 95 44 ff ff
	ff		 add	 edx, DWORD PTR _in$1$[ebp]
  000a6	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL19@Adam7_dein:

; 4148 :       {
; 4149 :         size_t pixelinstart = passstart[i] + (y * passw[i] + x) * bytewidth;
; 4150 :         size_t pixeloutstart = ((ADAM7_IY[i] + y * ADAM7_DY[i]) * w + ADAM7_IX[i] + x * ADAM7_DX[i]) * bytewidth;

  000b0	8b 8e 00 00 00
	00		 mov	 ecx, DWORD PTR _ADAM7_DY[esi]
  000b6	0f af c8	 imul	 ecx, eax
  000b9	03 8e 00 00 00
	00		 add	 ecx, DWORD PTR _ADAM7_IY[esi]
  000bf	8b 86 00 00 00
	00		 mov	 eax, DWORD PTR _ADAM7_DX[esi]
  000c5	0f af 4d 08	 imul	 ecx, DWORD PTR _w$[ebp]
  000c9	0f af c3	 imul	 eax, ebx
  000cc	03 c8		 add	 ecx, eax
  000ce	03 8e 00 00 00
	00		 add	 ecx, DWORD PTR _ADAM7_IX[esi]

; 4151 :         for(b = 0; b < bytewidth; b++)

  000d4	33 c0		 xor	 eax, eax
  000d6	0f af cf	 imul	 ecx, edi
  000d9	85 ff		 test	 edi, edi
  000db	74 19		 je	 SHORT $LN18@Adam7_dein
  000dd	8b b5 4c ff ff
	ff		 mov	 esi, DWORD PTR _out$GSCopy$1$[ebp]
  000e3	03 f1		 add	 esi, ecx
$LL16@Adam7_dein:

; 4152 :         {
; 4153 :           out[pixeloutstart + b] = in[pixelinstart + b];

  000e5	8a 0c 02	 mov	 cl, BYTE PTR [edx+eax]
  000e8	88 0c 06	 mov	 BYTE PTR [esi+eax], cl
  000eb	40		 inc	 eax
  000ec	3b c7		 cmp	 eax, edi
  000ee	72 f5		 jb	 SHORT $LL16@Adam7_dein
  000f0	8b b5 58 ff ff
	ff		 mov	 esi, DWORD PTR tv1063[ebp]
$LN18@Adam7_dein:

; 4147 :       for(x = 0; x < passw[i]; x++)

  000f6	8b 4c 35 e0	 mov	 ecx, DWORD PTR _passw$[ebp+esi]
  000fa	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _y$1$[ebp]
  00100	43		 inc	 ebx
  00101	03 d7		 add	 edx, edi
  00103	3b d9		 cmp	 ebx, ecx
  00105	72 a9		 jb	 SHORT $LL19@Adam7_dein
  00107	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR tv1064[ebp]
$LN21@Adam7_dein:

; 4146 :       for(y = 0; y < passh[i]; y++)

  0010d	03 95 54 ff ff
	ff		 add	 edx, DWORD PTR tv1061[ebp]
  00113	40		 inc	 eax
  00114	89 85 60 ff ff
	ff		 mov	 DWORD PTR _y$1$[ebp], eax
  0011a	89 95 5c ff ff
	ff		 mov	 DWORD PTR tv1064[ebp], edx
  00120	3b 44 35 c4	 cmp	 eax, DWORD PTR _passh$[ebp+esi]
  00124	0f 82 66 ff ff
	ff		 jb	 $LL22@Adam7_dein
$LN24@Adam7_dein:
  0012a	83 c6 04	 add	 esi, 4
  0012d	89 b5 58 ff ff
	ff		 mov	 DWORD PTR tv1063[ebp], esi

; 4141 :   {
; 4142 :     for(i = 0; i < 7; i++)

  00133	83 fe 1c	 cmp	 esi, 28			; 0000001cH
  00136	0f 82 24 ff ff
	ff		 jb	 $LL25@Adam7_dein
  0013c	5f		 pop	 edi
  0013d	5e		 pop	 esi
  0013e	5b		 pop	 ebx

; 4172 :         {
; 4173 :           unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4174 :           /*note that this function assumes the out buffer is completely 0, use setBitOfReversedStream otherwise*/
; 4175 :           setBitOfReversedStream0(&obp, out, bit);
; 4176 :         }
; 4177 :       }
; 4178 :     }
; 4179 :   }
; 4180 : }

  0013f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00142	33 cd		 xor	 ecx, ebp
  00144	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c3		 ret	 0
$LN26@Adam7_dein:
  0014d	0f af df	 imul	 ebx, edi
  00150	89 5d 08	 mov	 DWORD PTR _w$[ebp], ebx

; 4154 :         }
; 4155 :       }
; 4156 :     }
; 4157 :   }
; 4158 :   else /*bpp < 8: Adam7 with pixels < 8 bit is a bit trickier: with bit pointers*/
; 4159 :   {
; 4160 :     for(i = 0; i < 7; i++)

  00153	33 db		 xor	 ebx, ebx
  00155	89 9d 54 ff ff
	ff		 mov	 DWORD PTR tv1021[ebp], ebx
  0015b	eb 03 8d 49 00	 npad	 5
$LL12@Adam7_dein:

; 4161 :     {
; 4162 :       unsigned x, y, b;
; 4163 :       unsigned ilinebits = bpp * passw[i];

  00160	8b 4c 1d e0	 mov	 ecx, DWORD PTR _passw$[ebp+ebx]
  00164	8b c1		 mov	 eax, ecx
  00166	0f af c7	 imul	 eax, edi
  00169	89 85 3c ff ff
	ff		 mov	 DWORD PTR _ilinebits$1$[ebp], eax

; 4164 :       unsigned olinebits = bpp * w;
; 4165 :       size_t obp, ibp; /*bit pointers (for out and in buffer)*/
; 4166 :       for(y = 0; y < passh[i]; y++)

  0016f	33 c0		 xor	 eax, eax
  00171	89 85 5c ff ff
	ff		 mov	 DWORD PTR _y$1$[ebp], eax
  00177	39 44 1d c4	 cmp	 DWORD PTR _passh$[ebp+ebx], eax
  0017b	0f 86 27 01 00
	00		 jbe	 $LN11@Adam7_dein

; 4161 :     {
; 4162 :       unsigned x, y, b;
; 4163 :       unsigned ilinebits = bpp * passw[i];

  00181	33 f6		 xor	 esi, esi
  00183	89 b5 50 ff ff
	ff		 mov	 DWORD PTR tv1022[ebp], esi
  00189	8d a4 24 00 00
	00 00		 npad	 7
$LL9@Adam7_dein:

; 4167 :       for(x = 0; x < passw[i]; x++)

  00190	33 d2		 xor	 edx, edx
  00192	89 95 48 ff ff
	ff		 mov	 DWORD PTR _x$1$[ebp], edx
  00198	85 c9		 test	 ecx, ecx
  0019a	0f 84 eb 00 00
	00		 je	 $LN8@Adam7_dein
  001a0	8b 44 1d a4	 mov	 eax, DWORD PTR _passstart$[ebp+ebx]
  001a4	8d 04 c6	 lea	 eax, DWORD PTR [esi+eax*8]
  001a7	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv1056[ebp], eax
  001ad	8d 49 00	 npad	 3
$LL6@Adam7_dein:

; 4170 :         obp = (ADAM7_IY[i] + y * ADAM7_DY[i]) * olinebits + (ADAM7_IX[i] + x * ADAM7_DX[i]) * bpp;

  001b0	8b b3 00 00 00
	00		 mov	 esi, DWORD PTR _ADAM7_DY[ebx]
  001b6	0f af b5 5c ff
	ff ff		 imul	 esi, DWORD PTR _y$1$[ebp]
  001bd	03 b3 00 00 00
	00		 add	 esi, DWORD PTR _ADAM7_IY[ebx]
  001c3	8b c8		 mov	 ecx, eax
  001c5	8b 83 00 00 00
	00		 mov	 eax, DWORD PTR _ADAM7_DX[ebx]
  001cb	0f af 75 08	 imul	 esi, DWORD PTR _w$[ebp]
  001cf	0f af c2	 imul	 eax, edx
  001d2	03 83 00 00 00
	00		 add	 eax, DWORD PTR _ADAM7_IX[ebx]
  001d8	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _ibp$1$[ebp], ecx
  001de	0f af c7	 imul	 eax, edi
  001e1	03 f0		 add	 esi, eax

; 4171 :         for(b = 0; b < bpp; b++)

  001e3	85 ff		 test	 edi, edi
  001e5	74 77		 je	 SHORT $LN5@Adam7_dein

; 4168 :       {
; 4169 :         ibp = (8 * passstart[i]) + (y * ilinebits + x * bpp);

  001e7	8b d7		 mov	 edx, edi
  001e9	8b bd 4c ff ff
	ff		 mov	 edi, DWORD PTR _out$GSCopy$1$[ebp]
  001ef	89 95 58 ff ff
	ff		 mov	 DWORD PTR tv1023[ebp], edx
$LL3@Adam7_dein:

; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);

  001f5	8b 9d 44 ff ff
	ff		 mov	 ebx, DWORD PTR _in$1$[ebp]
  001fb	8a c1		 mov	 al, cl
  001fd	24 07		 and	 al, 7
  001ff	b1 07		 mov	 cl, 7
  00201	2a c8		 sub	 cl, al
  00203	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _ibp$1$[ebp]
  00209	c1 e8 03	 shr	 eax, 3
  0020c	8a 1c 18	 mov	 bl, BYTE PTR [eax+ebx]
  0020f	d2 eb		 shr	 bl, cl

; 2331 :   (*bitpointer)++;

  00211	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _ibp$1$[ebp]
  00217	41		 inc	 ecx
  00218	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _ibp$1$[ebp], ecx
  0021e	80 e3 01	 and	 bl, 1

; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)

  00221	74 22		 je	 SHORT $LN31@Adam7_dein

; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));

  00223	8b c6		 mov	 eax, esi
  00225	83 e0 07	 and	 eax, 7
  00228	b9 07 00 00 00	 mov	 ecx, 7
  0022d	2b c8		 sub	 ecx, eax
  0022f	d2 e3		 shl	 bl, cl
  00231	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _ibp$1$[ebp]
  00237	8b d6		 mov	 edx, esi
  00239	c1 ea 03	 shr	 edx, 3
  0023c	08 1c 3a	 or	 BYTE PTR [edx+edi], bl
  0023f	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv1023[ebp]
$LN31@Adam7_dein:

; 2354 :   }
; 2355 :   (*bitpointer)++;

  00245	46		 inc	 esi

; 4171 :         for(b = 0; b < bpp; b++)

  00246	4a		 dec	 edx
  00247	89 95 58 ff ff
	ff		 mov	 DWORD PTR tv1023[ebp], edx
  0024d	75 a6		 jne	 SHORT $LL3@Adam7_dein
  0024f	8b 7d 10	 mov	 edi, DWORD PTR _bpp$[ebp]
  00252	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _x$1$[ebp]
  00258	8b 9d 54 ff ff
	ff		 mov	 ebx, DWORD PTR tv1021[ebp]
$LN5@Adam7_dein:

; 4167 :       for(x = 0; x < passw[i]; x++)

  0025e	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv1056[ebp]
  00264	8b 4c 1d e0	 mov	 ecx, DWORD PTR _passw$[ebp+ebx]
  00268	42		 inc	 edx
  00269	03 c7		 add	 eax, edi
  0026b	89 95 48 ff ff
	ff		 mov	 DWORD PTR _x$1$[ebp], edx
  00271	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv1056[ebp], eax
  00277	3b d1		 cmp	 edx, ecx
  00279	0f 82 31 ff ff
	ff		 jb	 $LL6@Adam7_dein
  0027f	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _y$1$[ebp]
  00285	8b b5 50 ff ff
	ff		 mov	 esi, DWORD PTR tv1022[ebp]
$LN8@Adam7_dein:

; 4164 :       unsigned olinebits = bpp * w;
; 4165 :       size_t obp, ibp; /*bit pointers (for out and in buffer)*/
; 4166 :       for(y = 0; y < passh[i]; y++)

  0028b	03 b5 3c ff ff
	ff		 add	 esi, DWORD PTR _ilinebits$1$[ebp]
  00291	40		 inc	 eax
  00292	89 85 5c ff ff
	ff		 mov	 DWORD PTR _y$1$[ebp], eax
  00298	89 b5 50 ff ff
	ff		 mov	 DWORD PTR tv1022[ebp], esi
  0029e	3b 44 1d c4	 cmp	 eax, DWORD PTR _passh$[ebp+ebx]
  002a2	0f 82 e8 fe ff
	ff		 jb	 $LL9@Adam7_dein
$LN11@Adam7_dein:
  002a8	83 c3 04	 add	 ebx, 4
  002ab	89 9d 54 ff ff
	ff		 mov	 DWORD PTR tv1021[ebp], ebx

; 4154 :         }
; 4155 :       }
; 4156 :     }
; 4157 :   }
; 4158 :   else /*bpp < 8: Adam7 with pixels < 8 bit is a bit trickier: with bit pointers*/
; 4159 :   {
; 4160 :     for(i = 0; i < 7; i++)

  002b1	83 fb 1c	 cmp	 ebx, 28			; 0000001cH
  002b4	0f 82 a6 fe ff
	ff		 jb	 $LL12@Adam7_dein

; 4172 :         {
; 4173 :           unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4174 :           /*note that this function assumes the out buffer is completely 0, use setBitOfReversedStream otherwise*/
; 4175 :           setBitOfReversedStream0(&obp, out, bit);
; 4176 :         }
; 4177 :       }
; 4178 :     }
; 4179 :   }
; 4180 : }

  002ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002bd	5f		 pop	 edi
  002be	5e		 pop	 esi
  002bf	33 cd		 xor	 ecx, ebp
  002c1	5b		 pop	 ebx
  002c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c7	8b e5		 mov	 esp, ebp
  002c9	5d		 pop	 ebp
  002ca	c3		 ret	 0
?Adam7_deinterlace@@YAXPAEPBEIII@Z ENDP			; Adam7_deinterlace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?removePaddingBits@@YAXPAEPBEIII@Z
_TEXT	SEGMENT
_in$1$ = -8						; size = 4
_out$1$ = -4						; size = 4
_olinebits$ = 8						; size = 4
_ilinebits$ = 12					; size = 4
_h$ = 16						; size = 4
?removePaddingBits@@YAXPAEPBEIII@Z PROC			; removePaddingBits, COMDAT
; _out$ = ecx
; _in$ = edx

; 4184 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _out$1$[ebp], ecx

; 4185 :   /*
; 4186 :   After filtering there are still padding bits if scanlines have non multiple of 8 bit amounts. They need
; 4187 :   to be removed (except at last scanline of (Adam7-reduced) image) before working with pure image buffers
; 4188 :   for the Adam7 code, the color convert code and the output to the user.
; 4189 :   in and out are allowed to be the same buffer, in may also be higher but still overlapping; in must
; 4190 :   have >= ilinebits*h bits, out must have >= olinebits*h bits, olinebits must be <= ilinebits
; 4191 :   also used to move bits after earlier such operations happened, e.g. in a sequence of reduced images from Adam7
; 4192 :   only useful if (ilinebits - olinebits) is a value in the range 1..7
; 4193 :   */
; 4194 :   unsigned y;
; 4195 :   size_t diff = ilinebits - olinebits;

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _olinebits$[ebp]
  0000c	29 4d 0c	 sub	 DWORD PTR _ilinebits$[ebp], ecx
  0000f	53		 push	 ebx
  00010	89 55 f8	 mov	 DWORD PTR _in$1$[ebp], edx

; 4196 :   size_t ibp = 0, obp = 0; /*input and output bit pointers*/
; 4197 :   for(y = 0; y < h; y++)

  00013	8b 55 10	 mov	 edx, DWORD PTR _h$[ebp]
  00016	33 db		 xor	 ebx, ebx
  00018	33 c0		 xor	 eax, eax
  0001a	56		 push	 esi
  0001b	85 d2		 test	 edx, edx
  0001d	74 78		 je	 SHORT $LN4@removePadd
  0001f	57		 push	 edi
  00020	8b 7d 0c	 mov	 edi, DWORD PTR _ilinebits$[ebp]
$LL6@removePadd:

; 4198 :   {
; 4199 :     size_t x;
; 4200 :     for(x = 0; x < olinebits; x++)

  00023	85 c9		 test	 ecx, ecx
  00025	74 67		 je	 SHORT $LN1@removePadd
  00027	8b f9		 mov	 edi, ecx
  00029	8d a4 24 00 00
	00 00		 npad	 7
$LL3@removePadd:

; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);

  00030	8b 75 f8	 mov	 esi, DWORD PTR _in$1$[ebp]
  00033	8a d3		 mov	 dl, bl
  00035	80 e2 07	 and	 dl, 7
  00038	b1 07		 mov	 cl, 7
  0003a	2a ca		 sub	 cl, dl
  0003c	8b d3		 mov	 edx, ebx
  0003e	c1 ea 03	 shr	 edx, 3

; 2331 :   (*bitpointer)++;

  00041	43		 inc	 ebx
  00042	8a 14 32	 mov	 dl, BYTE PTR [edx+esi]

; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)
; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
; 2354 :   }
; 2355 :   (*bitpointer)++;
; 2356 : }
; 2357 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2358 : 
; 2359 : static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2360 : {
; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));

  00045	8b 75 fc	 mov	 esi, DWORD PTR _out$1$[ebp]

; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);

  00048	d2 ea		 shr	 dl, cl

; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)
; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
; 2354 :   }
; 2355 :   (*bitpointer)++;
; 2356 : }
; 2357 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2358 : 
; 2359 : static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2360 : {
; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));

  0004a	8b c8		 mov	 ecx, eax

; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);

  0004c	80 e2 01	 and	 dl, 1

; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)
; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
; 2354 :   }
; 2355 :   (*bitpointer)++;
; 2356 : }
; 2357 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2358 : 
; 2359 : static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2360 : {
; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));

  0004f	8b d0		 mov	 edx, eax
  00051	75 19		 jne	 SHORT $LN12@removePadd
  00053	c1 e9 03	 shr	 ecx, 3
  00056	83 e2 07	 and	 edx, 7
  00059	03 f1		 add	 esi, ecx
  0005b	b9 07 00 00 00	 mov	 ecx, 7
  00060	2b ca		 sub	 ecx, edx
  00062	b2 01		 mov	 dl, 1
  00064	d2 e2		 shl	 dl, cl
  00066	f6 d2		 not	 dl
  00068	20 16		 and	 BYTE PTR [esi], dl
  0006a	eb 15		 jmp	 SHORT $LN11@removePadd
$LN12@removePadd:

; 2363 :   else         bitstream[(*bitpointer) >> 3] |=  (1 << (7 - ((*bitpointer) & 0x7)));

  0006c	c1 e9 03	 shr	 ecx, 3
  0006f	03 f1		 add	 esi, ecx
  00071	83 e2 07	 and	 edx, 7
  00074	b9 07 00 00 00	 mov	 ecx, 7
  00079	2b ca		 sub	 ecx, edx
  0007b	b2 01		 mov	 dl, 1
  0007d	d2 e2		 shl	 dl, cl
  0007f	08 16		 or	 BYTE PTR [esi], dl
$LN11@removePadd:

; 2364 :   (*bitpointer)++;

  00081	40		 inc	 eax

; 4198 :   {
; 4199 :     size_t x;
; 4200 :     for(x = 0; x < olinebits; x++)

  00082	4f		 dec	 edi
  00083	75 ab		 jne	 SHORT $LL3@removePadd
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _olinebits$[ebp]
  00088	8b 55 10	 mov	 edx, DWORD PTR _h$[ebp]
  0008b	8b 7d 0c	 mov	 edi, DWORD PTR _ilinebits$[ebp]
$LN1@removePadd:

; 4201 :     {
; 4202 :       unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4203 :       setBitOfReversedStream(&obp, out, bit);
; 4204 :     }
; 4205 :     ibp += diff;

  0008e	03 df		 add	 ebx, edi
  00090	4a		 dec	 edx
  00091	89 55 10	 mov	 DWORD PTR _h$[ebp], edx
  00094	75 8d		 jne	 SHORT $LL6@removePadd
  00096	5f		 pop	 edi
$LN4@removePadd:
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx

; 4206 :   }
; 4207 : }

  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
?removePaddingBits@@YAXPAEPBEIII@Z ENDP			; removePaddingBits
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?postProcessScanlines@@YAIPAE0IIPBULodePNGInfo@@@Z
_TEXT	SEGMENT
tv389 = -168						; size = 4
_out$GSCopy$1$ = -164					; size = 4
tv394 = -160						; size = 4
_in$GSCopy$1$ = -160					; size = 4
_padded_passstart$1 = -156				; size = 32
_filter_passstart$2 = -124				; size = 32
_passstart$3 = -92					; size = 32
_passw$4 = -60						; size = 28
_passh$5 = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_w$ = 8							; size = 4
_h$ = 12						; size = 4
_info_png$ = 16						; size = 4
?postProcessScanlines@@YAIPAE0IIPBULodePNGInfo@@@Z PROC	; postProcessScanlines, COMDAT
; _out$ = ecx
; _in$ = edx

; 4214 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi

; 4215 :   /*
; 4216 :   This function converts the filtered-padded-interlaced data into pure 2D image buffer with the PNG's colortype.
; 4217 :   Steps:
; 4218 :   *) if no Adam7: 1) unfilter 2) remove padding bits (= posible extra bits per scanline if bpp < 8)
; 4219 :   *) if adam7: 1) 7x unfilter 2) 7x remove padding bits 3) Adam7_deinterlace
; 4220 :   NOTE: the in buffer will be overwritten with intermediate data!
; 4221 :   */
; 4222 :   unsigned bpp = lodepng_get_bpp(&info_png->color);

  00015	8b 75 10	 mov	 esi, DWORD PTR _info_png$[ebp]
  00018	8b da		 mov	 ebx, edx
  0001a	89 8d 5c ff ff
	ff		 mov	 DWORD PTR _out$GSCopy$1$[ebp], ecx
  00020	57		 push	 edi
  00021	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00024	89 9d 60 ff ff
	ff		 mov	 DWORD PTR _in$GSCopy$1$[ebp], ebx
  0002a	e8 00 00 00 00	 call	 ?lodepng_get_bpp@@YAIPBULodePNGColorMode@@@Z ; lodepng_get_bpp
  0002f	8b f8		 mov	 edi, eax

; 4223 :   if(bpp == 0) return 31; /*error: invalid colortype*/

  00031	85 ff		 test	 edi, edi
  00033	75 14		 jne	 SHORT $LN12@postProces
  00035	8d 47 1f	 lea	 eax, DWORD PTR [edi+31]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx

; 4260 : }

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003e	33 cd		 xor	 ecx, ebp
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN12@postProces:

; 4224 : 
; 4225 :   if(info_png->interlace_method == 0)

  00049	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  0004d	75 7d		 jne	 SHORT $LN11@postProces

; 4226 :   {
; 4227 :     if(bpp < 8 && w * bpp != ((w * bpp + 7) / 8) * 8)

  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _w$[ebp]
  00052	83 ff 08	 cmp	 edi, 8
  00055	73 47		 jae	 SHORT $LN10@postProces
  00057	0f af c1	 imul	 eax, ecx
  0005a	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv394[ebp], eax
  00060	8d 70 07	 lea	 esi, DWORD PTR [eax+7]
  00063	83 e6 f8	 and	 esi, -8			; fffffff8H
  00066	3b c6		 cmp	 eax, esi
  00068	74 34		 je	 SHORT $LN10@postProces

; 4228 :     {
; 4229 :       CERROR_TRY_RETURN(unfilter(in, in, w, h, bpp));

  0006a	57		 push	 edi
  0006b	8b 7d 0c	 mov	 edi, DWORD PTR _h$[ebp]
  0006e	57		 push	 edi
  0006f	51		 push	 ecx
  00070	8b d3		 mov	 edx, ebx
  00072	8b cb		 mov	 ecx, ebx
  00074	e8 00 00 00 00	 call	 ?unfilter@@YAIPAEPBEIII@Z ; unfilter
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007c	85 c0		 test	 eax, eax
  0007e	0f 85 fa 00 00
	00		 jne	 $LN13@postProces

; 4230 :       removePaddingBits(out, in, w * bpp, ((w * bpp + 7) / 8) * 8, h);

  00084	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _out$GSCopy$1$[ebp]
  0008a	57		 push	 edi
  0008b	56		 push	 esi
  0008c	ff b5 60 ff ff
	ff		 push	 DWORD PTR tv394[ebp]
  00092	8b d3		 mov	 edx, ebx
  00094	e8 00 00 00 00	 call	 ?removePaddingBits@@YAXPAEPBEIII@Z ; removePaddingBits
  00099	e9 db 00 00 00	 jmp	 $LN20@postProces
$LN10@postProces:

; 4231 :     }
; 4232 :     /*we can immediatly filter into the out buffer, no other steps needed*/
; 4233 :     else CERROR_TRY_RETURN(unfilter(out, in, w, h, bpp));

  0009e	57		 push	 edi
  0009f	ff 75 0c	 push	 DWORD PTR _h$[ebp]
  000a2	8b d3		 mov	 edx, ebx
  000a4	51		 push	 ecx
  000a5	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _out$GSCopy$1$[ebp]
  000ab	e8 00 00 00 00	 call	 ?unfilter@@YAIPAEPBEIII@Z ; unfilter
  000b0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b3	85 c0		 test	 eax, eax
  000b5	0f 84 c1 00 00
	00		 je	 $LN6@postProces
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx

; 4260 : }

  000be	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c1	33 cd		 xor	 ecx, ebp
  000c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
$LN11@postProces:

; 4234 :   }
; 4235 :   else /*interlace_method is 1 (Adam7)*/
; 4236 :   {
; 4237 :     unsigned passw[7], passh[7]; size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4238 :     unsigned i;
; 4239 : 
; 4240 :     Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);

  000cc	57		 push	 edi
  000cd	ff 75 0c	 push	 DWORD PTR _h$[ebp]
  000d0	8d 45 a4	 lea	 eax, DWORD PTR _passstart$3[ebp]
  000d3	ff 75 08	 push	 DWORD PTR _w$[ebp]
  000d6	8d 55 e0	 lea	 edx, DWORD PTR _passh$5[ebp]
  000d9	50		 push	 eax
  000da	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _padded_passstart$1[ebp]
  000e0	50		 push	 eax
  000e1	8d 45 84	 lea	 eax, DWORD PTR _filter_passstart$2[ebp]
  000e4	50		 push	 eax
  000e5	8d 4d c4	 lea	 ecx, DWORD PTR _passw$4[ebp]
  000e8	e8 00 00 00 00	 call	 ?Adam7_getpassvalues@@YAXQAI0000III@Z ; Adam7_getpassvalues
  000ed	83 c4 18	 add	 esp, 24			; 00000018H

; 4241 : 
; 4242 :     for(i = 0; i < 7; i++)

  000f0	33 f6		 xor	 esi, esi
$LL5@postProces:

; 4243 :     {
; 4244 :       CERROR_TRY_RETURN(unfilter(&in[padded_passstart[i]], &in[filter_passstart[i]], passw[i], passh[i], bpp));

  000f2	8b 84 35 64 ff
	ff ff		 mov	 eax, DWORD PTR _padded_passstart$1[ebp+esi]
  000f9	03 85 60 ff ff
	ff		 add	 eax, DWORD PTR _in$GSCopy$1$[ebp]
  000ff	8b 54 35 84	 mov	 edx, DWORD PTR _filter_passstart$2[ebp+esi]
  00103	8b 5c 35 c4	 mov	 ebx, DWORD PTR _passw$4[ebp+esi]
  00107	03 95 60 ff ff
	ff		 add	 edx, DWORD PTR _in$GSCopy$1$[ebp]
  0010d	57		 push	 edi
  0010e	ff 74 35 e0	 push	 DWORD PTR _passh$5[ebp+esi]
  00112	8b c8		 mov	 ecx, eax
  00114	53		 push	 ebx
  00115	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv389[ebp], eax
  0011b	e8 00 00 00 00	 call	 ?unfilter@@YAIPAEPBEIII@Z ; unfilter
  00120	83 c4 0c	 add	 esp, 12			; 0000000cH
  00123	85 c0		 test	 eax, eax
  00125	75 57		 jne	 SHORT $LN13@postProces

; 4245 :       /*TODO: possible efficiency improvement: if in this reduced image the bits fit nicely in 1 scanline,
; 4246 :       move bytes instead of bits or move not at all*/
; 4247 :       if(bpp < 8)

  00127	83 ff 08	 cmp	 edi, 8
  0012a	73 2b		 jae	 SHORT $LN19@postProces

; 4248 :       {
; 4249 :         /*remove padding bits in scanlines; after this there still may be padding
; 4250 :         bits between the different reduced images: each reduced image still starts nicely at a byte*/
; 4251 :         removePaddingBits(&in[passstart[i]], &in[padded_passstart[i]], passw[i] * bpp,
; 4252 :                           ((passw[i] * bpp + 7) / 8) * 8, passh[i]);

  0012c	ff 74 35 e0	 push	 DWORD PTR _passh$5[ebp+esi]
  00130	0f af df	 imul	 ebx, edi
  00133	8b 4c 35 a4	 mov	 ecx, DWORD PTR _passstart$3[ebp+esi]
  00137	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv389[ebp]
  0013d	8d 43 07	 lea	 eax, DWORD PTR [ebx+7]
  00140	83 e0 f8	 and	 eax, -8			; fffffff8H
  00143	50		 push	 eax
  00144	53		 push	 ebx
  00145	8b 9d 60 ff ff
	ff		 mov	 ebx, DWORD PTR _in$GSCopy$1$[ebp]
  0014b	03 cb		 add	 ecx, ebx
  0014d	e8 00 00 00 00	 call	 ?removePaddingBits@@YAXPAEPBEIII@Z ; removePaddingBits
  00152	83 c4 0c	 add	 esp, 12			; 0000000cH
  00155	eb 06		 jmp	 SHORT $LN4@postProces
$LN19@postProces:
  00157	8b 9d 60 ff ff
	ff		 mov	 ebx, DWORD PTR _in$GSCopy$1$[ebp]
$LN4@postProces:
  0015d	83 c6 04	 add	 esi, 4

; 4241 : 
; 4242 :     for(i = 0; i < 7; i++)

  00160	83 fe 1c	 cmp	 esi, 28			; 0000001cH
  00163	72 8d		 jb	 SHORT $LL5@postProces

; 4253 :       }
; 4254 :     }
; 4255 : 
; 4256 :     Adam7_deinterlace(out, in, w, h, bpp);

  00165	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _out$GSCopy$1$[ebp]
  0016b	57		 push	 edi
  0016c	ff 75 0c	 push	 DWORD PTR _h$[ebp]
  0016f	8b d3		 mov	 edx, ebx
  00171	ff 75 08	 push	 DWORD PTR _w$[ebp]
  00174	e8 00 00 00 00	 call	 ?Adam7_deinterlace@@YAXPAEPBEIII@Z ; Adam7_deinterlace
$LN20@postProces:
  00179	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@postProces:

; 4257 :   }
; 4258 : 
; 4259 :   return 0;

  0017c	33 c0		 xor	 eax, eax
$LN13@postProces:

; 4260 : }

  0017e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00181	5f		 pop	 edi
  00182	5e		 pop	 esi
  00183	33 cd		 xor	 ecx, ebp
  00185	5b		 pop	 ebx
  00186	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018b	8b e5		 mov	 esp, ebp
  0018d	5d		 pop	 ebp
  0018e	c3		 ret	 0
?postProcessScanlines@@YAIPAE0IIPBULodePNGInfo@@@Z ENDP	; postProcessScanlines
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?readChunk_PLTE@@YAIPAULodePNGColorMode@@PBEI@Z
_TEXT	SEGMENT
_chunkLength$ = 8					; size = 4
?readChunk_PLTE@@YAIPAULodePNGColorMode@@PBEI@Z PROC	; readChunk_PLTE, COMDAT
; _color$ = ecx
; _data$ = edx

; 4263 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	8b f2		 mov	 esi, edx

; 4264 :   unsigned pos = 0, i;
; 4265 :   if(color->palette) lodepng_free(color->palette);

  0000a	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0000d	85 c0		 test	 eax, eax
  0000f	74 09		 je	 SHORT $LN9@readChunk_

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _free
  00017	83 c4 04	 add	 esp, 4
$LN9@readChunk_:

; 4266 :   color->palettesize = chunkLength / 3;

  0001a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0001f	f7 65 08	 mul	 DWORD PTR _chunkLength$[ebp]
  00022	8b da		 mov	 ebx, edx
  00024	d1 eb		 shr	 ebx, 1
  00026	89 5f 0c	 mov	 DWORD PTR [edi+12], ebx

; 4267 :   color->palette = (unsigned char*)lodepng_malloc(4 * color->palettesize);

  00029	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]

; 63   :   return malloc(size);

  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _malloc
  00036	83 c4 04	 add	 esp, 4

; 4267 :   color->palette = (unsigned char*)lodepng_malloc(4 * color->palettesize);

  00039	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 4268 :   if(!color->palette && color->palettesize)

  0003c	85 c0		 test	 eax, eax
  0003e	75 11		 jne	 SHORT $LN5@readChunk_
  00040	85 db		 test	 ebx, ebx
  00042	74 0d		 je	 SHORT $LN5@readChunk_

; 4269 :   {
; 4270 :     color->palettesize = 0;

  00044	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 4271 :     return 83; /*alloc fail*/

  00049	b8 53 00 00 00	 mov	 eax, 83			; 00000053H
  0004e	5b		 pop	 ebx

; 4284 : }

  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
$LN5@readChunk_:

; 4272 :   }
; 4273 :   if(color->palettesize > 256) return 38; /*error: palette too big*/

  00051	81 fb 00 01 00
	00		 cmp	 ebx, 256		; 00000100H
  00057	76 0a		 jbe	 SHORT $LN4@readChunk_
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	b8 26 00 00 00	 mov	 eax, 38			; 00000026H
  00060	5b		 pop	 ebx

; 4284 : }

  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
$LN4@readChunk_:

; 4274 : 
; 4275 :   for(i = 0; i < color->palettesize; i++)

  00063	33 d2		 xor	 edx, edx
  00065	85 db		 test	 ebx, ebx
  00067	74 38		 je	 SHORT $LN1@readChunk_
  00069	8d a4 24 00 00
	00 00		 npad	 7
$LL3@readChunk_:

; 4276 :   {
; 4277 :     color->palette[4 * i + 0] = data[pos++]; /*R*/

  00070	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00073	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00076	42		 inc	 edx
  00077	88 44 91 fc	 mov	 BYTE PTR [ecx+edx*4-4], al

; 4278 :     color->palette[4 * i + 1] = data[pos++]; /*G*/

  0007b	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  0007f	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 4279 :     color->palette[4 * i + 2] = data[pos++]; /*B*/

  00082	8d 76 03	 lea	 esi, DWORD PTR [esi+3]
  00085	88 44 91 fd	 mov	 BYTE PTR [ecx+edx*4-3], al
  00089	0f b6 46 ff	 movzx	 eax, BYTE PTR [esi-1]
  0008d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00090	88 44 91 fe	 mov	 BYTE PTR [ecx+edx*4-2], al

; 4280 :     color->palette[4 * i + 3] = 255; /*alpha*/

  00094	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00097	c6 44 90 ff ff	 mov	 BYTE PTR [eax+edx*4-1], 255 ; 000000ffH
  0009c	3b 57 0c	 cmp	 edx, DWORD PTR [edi+12]
  0009f	72 cf		 jb	 SHORT $LL3@readChunk_
$LN1@readChunk_:
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi

; 4281 :   }
; 4282 : 
; 4283 :   return 0; /* OK */

  000a3	33 c0		 xor	 eax, eax
  000a5	5b		 pop	 ebx

; 4284 : }

  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
?readChunk_PLTE@@YAIPAULodePNGColorMode@@PBEI@Z ENDP	; readChunk_PLTE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?readChunk_tRNS@@YAIPAULodePNGColorMode@@PBEI@Z
_TEXT	SEGMENT
_chunkLength$ = 8					; size = 4
?readChunk_tRNS@@YAIPAULodePNGColorMode@@PBEI@Z PROC	; readChunk_tRNS, COMDAT
; _color$ = ecx
; _data$ = edx

; 4287 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 4288 :   unsigned i;
; 4289 :   if(color->colortype == LCT_PALETTE)

  00008	8b 06		 mov	 eax, DWORD PTR [esi]
  0000a	8b fa		 mov	 edi, edx
  0000c	83 f8 03	 cmp	 eax, 3
  0000f	75 35		 jne	 SHORT $LN12@readChunk_

; 4290 :   {
; 4291 :     /*error: more alpha values given than there are palette entries*/
; 4292 :     if(chunkLength > color->palettesize) return 38;

  00011	8b 5d 08	 mov	 ebx, DWORD PTR _chunkLength$[ebp]
  00014	3b 5e 0c	 cmp	 ebx, DWORD PTR [esi+12]
  00017	76 0a		 jbe	 SHORT $LN11@readChunk_
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	b8 26 00 00 00	 mov	 eax, 38			; 00000026H
  00020	5b		 pop	 ebx

; 4317 : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
$LN11@readChunk_:

; 4293 : 
; 4294 :     for(i = 0; i < chunkLength; i++) color->palette[4 * i + 3] = data[i];

  00023	33 d2		 xor	 edx, edx
  00025	85 db		 test	 ebx, ebx
  00027	0f 84 9b 00 00
	00		 je	 $LN1@readChunk_
  0002d	8d 49 00	 npad	 3
$LL10@readChunk_:
  00030	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00033	8a 04 3a	 mov	 al, BYTE PTR [edx+edi]
  00036	88 44 91 03	 mov	 BYTE PTR [ecx+edx*4+3], al
  0003a	42		 inc	 edx
  0003b	3b d3		 cmp	 edx, ebx
  0003d	72 f1		 jb	 SHORT $LL10@readChunk_

; 4315 : 
; 4316 :   return 0; /* OK */

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	33 c0		 xor	 eax, eax
  00043	5b		 pop	 ebx

; 4317 : }

  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
$LN12@readChunk_:

; 4295 :   }
; 4296 :   else if(color->colortype == LCT_GREY)

  00046	85 c0		 test	 eax, eax
  00048	75 33		 jne	 SHORT $LN6@readChunk_

; 4297 :   {
; 4298 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4299 :     if(chunkLength != 2) return 30;

  0004a	83 7d 08 02	 cmp	 DWORD PTR _chunkLength$[ebp], 2
  0004e	74 0a		 je	 SHORT $LN5@readChunk_
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	b8 1e 00 00 00	 mov	 eax, 30			; 0000001eH
  00057	5b		 pop	 ebx

; 4317 : }

  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
$LN5@readChunk_:

; 4300 : 
; 4301 :     color->key_defined = 1;

  0005a	c7 46 10 01 00
	00 00		 mov	 DWORD PTR [esi+16], 1

; 4302 :     color->key_r = color->key_g = color->key_b = 256 * data[0] + data[1];

  00061	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  00064	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  00068	c1 e1 08	 shl	 ecx, 8
  0006b	03 c1		 add	 eax, ecx
  0006d	5f		 pop	 edi
  0006e	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00071	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00074	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00077	5e		 pop	 esi

; 4315 : 
; 4316 :   return 0; /* OK */

  00078	33 c0		 xor	 eax, eax
  0007a	5b		 pop	 ebx

; 4317 : }

  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
$LN6@readChunk_:

; 4303 :   }
; 4304 :   else if(color->colortype == LCT_RGB)

  0007d	83 f8 02	 cmp	 eax, 2
  00080	75 4d		 jne	 SHORT $LN3@readChunk_

; 4305 :   {
; 4306 :     /*error: this chunk must be 6 bytes for RGB image*/
; 4307 :     if(chunkLength != 6) return 41;

  00082	83 7d 08 06	 cmp	 DWORD PTR _chunkLength$[ebp], 6
  00086	74 0a		 je	 SHORT $LN2@readChunk_
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	b8 29 00 00 00	 mov	 eax, 41			; 00000029H
  0008f	5b		 pop	 ebx

; 4317 : }

  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
$LN2@readChunk_:

; 4308 : 
; 4309 :     color->key_defined = 1;

  00092	c7 46 10 01 00
	00 00		 mov	 DWORD PTR [esi+16], 1

; 4310 :     color->key_r = 256 * data[0] + data[1];

  00099	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  0009c	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  000a0	c1 e1 08	 shl	 ecx, 8
  000a3	03 c8		 add	 ecx, eax
  000a5	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 4311 :     color->key_g = 256 * data[2] + data[3];

  000a8	0f b6 4f 02	 movzx	 ecx, BYTE PTR [edi+2]
  000ac	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  000b0	c1 e1 08	 shl	 ecx, 8
  000b3	03 c8		 add	 ecx, eax
  000b5	89 4e 18	 mov	 DWORD PTR [esi+24], ecx

; 4312 :     color->key_b = 256 * data[4] + data[5];

  000b8	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  000bc	0f b6 47 05	 movzx	 eax, BYTE PTR [edi+5]
  000c0	c1 e1 08	 shl	 ecx, 8
  000c3	03 c8		 add	 ecx, eax
  000c5	89 4e 1c	 mov	 DWORD PTR [esi+28], ecx
$LN1@readChunk_:

; 4315 : 
; 4316 :   return 0; /* OK */

  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	33 c0		 xor	 eax, eax
  000cc	5b		 pop	 ebx

; 4317 : }

  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
$LN3@readChunk_:
  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi

; 4313 :   }
; 4314 :   else return 42; /*error: tRNS chunk not allowed for other color models*/

  000d1	b8 2a 00 00 00	 mov	 eax, 42			; 0000002aH
  000d6	5b		 pop	 ebx

; 4317 : }

  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
?readChunk_tRNS@@YAIPAULodePNGColorMode@@PBEI@Z ENDP	; readChunk_tRNS
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?readChunk_bKGD@@YAIPAULodePNGInfo@@PBEI@Z
_TEXT	SEGMENT
_chunkLength$ = 8					; size = 4
?readChunk_bKGD@@YAIPAULodePNGInfo@@PBEI@Z PROC		; readChunk_bKGD, COMDAT
; _info$ = ecx
; _data$ = edx

; 4323 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 4324 :   if(info->color.colortype == LCT_PALETTE)

  00006	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00009	83 f8 03	 cmp	 eax, 3
  0000c	75 26		 jne	 SHORT $LN10@readChunk_

; 4325 :   {
; 4326 :     /*error: this chunk must be 1 byte for indexed color image*/
; 4327 :     if(chunkLength != 1) return 43;

  0000e	83 7d 08 01	 cmp	 DWORD PTR _chunkLength$[ebp], 1
  00012	74 08		 je	 SHORT $LN9@readChunk_
  00014	b8 2b 00 00 00	 mov	 eax, 43			; 0000002bH
  00019	5e		 pop	 esi

; 4353 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
$LN9@readChunk_:

; 4328 : 
; 4329 :     info->background_defined = 1;

  0001c	c7 46 2c 01 00
	00 00		 mov	 DWORD PTR [esi+44], 1

; 4330 :     info->background_r = info->background_g = info->background_b = data[0];

  00023	0f b6 02	 movzx	 eax, BYTE PTR [edx]

; 4338 :     info->background_r = info->background_g = info->background_b
; 4339 :                                  = 256 * data[0] + data[1];

  00026	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00029	89 46 34	 mov	 DWORD PTR [esi+52], eax
  0002c	89 46 38	 mov	 DWORD PTR [esi+56], eax

; 4350 :   }
; 4351 : 
; 4352 :   return 0; /* OK */

  0002f	33 c0		 xor	 eax, eax
  00031	5e		 pop	 esi

; 4353 : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
$LN10@readChunk_:

; 4331 :   }
; 4332 :   else if(info->color.colortype == LCT_GREY || info->color.colortype == LCT_GREY_ALPHA)

  00034	85 c0		 test	 eax, eax
  00036	74 58		 je	 SHORT $LN6@readChunk_
  00038	83 f8 04	 cmp	 eax, 4
  0003b	74 53		 je	 SHORT $LN6@readChunk_

; 4340 :   }
; 4341 :   else if(info->color.colortype == LCT_RGB || info->color.colortype == LCT_RGBA)

  0003d	83 f8 02	 cmp	 eax, 2
  00040	74 05		 je	 SHORT $LN2@readChunk_
  00042	83 f8 06	 cmp	 eax, 6
  00045	75 73		 jne	 SHORT $LN3@readChunk_
$LN2@readChunk_:

; 4342 :   {
; 4343 :     /*error: this chunk must be 6 bytes for greyscale image*/
; 4344 :     if(chunkLength != 6) return 45;

  00047	83 7d 08 06	 cmp	 DWORD PTR _chunkLength$[ebp], 6
  0004b	74 08		 je	 SHORT $LN1@readChunk_
  0004d	b8 2d 00 00 00	 mov	 eax, 45			; 0000002dH
  00052	5e		 pop	 esi

; 4353 : }

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN1@readChunk_:

; 4345 : 
; 4346 :     info->background_defined = 1;

  00055	c7 46 2c 01 00
	00 00		 mov	 DWORD PTR [esi+44], 1

; 4347 :     info->background_r = 256 * data[0] + data[1];

  0005c	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0005f	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  00063	c1 e1 08	 shl	 ecx, 8
  00066	03 c8		 add	 ecx, eax
  00068	89 4e 30	 mov	 DWORD PTR [esi+48], ecx

; 4348 :     info->background_g = 256 * data[2] + data[3];

  0006b	0f b6 4a 02	 movzx	 ecx, BYTE PTR [edx+2]
  0006f	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00073	c1 e1 08	 shl	 ecx, 8
  00076	03 c8		 add	 ecx, eax
  00078	89 4e 34	 mov	 DWORD PTR [esi+52], ecx

; 4349 :     info->background_b = 256 * data[4] + data[5];

  0007b	0f b6 4a 04	 movzx	 ecx, BYTE PTR [edx+4]
  0007f	0f b6 42 05	 movzx	 eax, BYTE PTR [edx+5]
  00083	c1 e1 08	 shl	 ecx, 8
  00086	03 c8		 add	 ecx, eax
  00088	89 4e 38	 mov	 DWORD PTR [esi+56], ecx

; 4350 :   }
; 4351 : 
; 4352 :   return 0; /* OK */

  0008b	33 c0		 xor	 eax, eax
  0008d	5e		 pop	 esi

; 4353 : }

  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
$LN6@readChunk_:

; 4333 :   {
; 4334 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4335 :     if(chunkLength != 2) return 44;

  00090	83 7d 08 02	 cmp	 DWORD PTR _chunkLength$[ebp], 2
  00094	74 08		 je	 SHORT $LN5@readChunk_
  00096	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  0009b	5e		 pop	 esi

; 4353 : }

  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
$LN5@readChunk_:

; 4336 : 
; 4337 :     info->background_defined = 1;

  0009e	c7 46 2c 01 00
	00 00		 mov	 DWORD PTR [esi+44], 1

; 4338 :     info->background_r = info->background_g = info->background_b
; 4339 :                                  = 256 * data[0] + data[1];

  000a5	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000a8	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  000ac	c1 e1 08	 shl	 ecx, 8
  000af	03 c1		 add	 eax, ecx
  000b1	89 46 30	 mov	 DWORD PTR [esi+48], eax
  000b4	89 46 34	 mov	 DWORD PTR [esi+52], eax
  000b7	89 46 38	 mov	 DWORD PTR [esi+56], eax
$LN3@readChunk_:

; 4350 :   }
; 4351 : 
; 4352 :   return 0; /* OK */

  000ba	33 c0		 xor	 eax, eax
  000bc	5e		 pop	 esi

; 4353 : }

  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
?readChunk_bKGD@@YAIPAULodePNGInfo@@PBEI@Z ENDP		; readChunk_bKGD
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?readChunk_tEXt@@YAIPAULodePNGInfo@@PBEI@Z
_TEXT	SEGMENT
_info$1$ = -16						; size = 4
_string2_begin$1$ = -12					; size = 4
_data$1$ = -8						; size = 4
_key$1$ = -4						; size = 4
_chunkLength$ = 8					; size = 4
?readChunk_tEXt@@YAIPAULodePNGInfo@@PBEI@Z PROC		; readChunk_tEXt, COMDAT
; _info$ = ecx
; _data$ = edx

; 4357 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4358 :   unsigned error = 0;
; 4359 :   char *key = 0, *str = 0;
; 4360 :   unsigned i;
; 4361 : 
; 4362 :   while(!error) /*not really a while loop, only used to break on error*/
; 4363 :   {
; 4364 :     unsigned length, string2_begin;
; 4365 : 
; 4366 :     length = 0;
; 4367 :     while(length < chunkLength && data[length] != 0) length++;

  00009	8b 7d 08	 mov	 edi, DWORD PTR _chunkLength$[ebp]
  0000c	8b c2		 mov	 eax, edx
  0000e	33 db		 xor	 ebx, ebx
  00010	33 f6		 xor	 esi, esi
  00012	89 45 f8	 mov	 DWORD PTR _data$1$[ebp], eax
  00015	89 4d f0	 mov	 DWORD PTR _info$1$[ebp], ecx
  00018	85 ff		 test	 edi, edi
  0001a	0f 84 a4 00 00
	00		 je	 $LN9@readChunk_
$LL12@readChunk_:
  00020	38 1c 06	 cmp	 BYTE PTR [esi+eax], bl
  00023	74 05		 je	 SHORT $LN11@readChunk_
  00025	46		 inc	 esi
  00026	3b f7		 cmp	 esi, edi
  00028	72 f6		 jb	 SHORT $LL12@readChunk_
$LN11@readChunk_:

; 4368 :     /*even though it's not allowed by the standard, no error is thrown if
; 4369 :     there's no null termination char, if the text is empty*/
; 4370 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/

  0002a	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  0002d	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  00030	0f 87 8e 00 00
	00		 ja	 $LN9@readChunk_

; 4371 : 
; 4372 :     key = (char*)lodepng_malloc(length + 1);

  00036	8d 46 01	 lea	 eax, DWORD PTR [esi+1]

; 63   :   return malloc(size);

  00039	50		 push	 eax

; 4371 : 
; 4372 :     key = (char*)lodepng_malloc(length + 1);

  0003a	89 45 f4	 mov	 DWORD PTR _string2_begin$1$[ebp], eax

; 63   :   return malloc(size);

  0003d	e8 00 00 00 00	 call	 _malloc
  00042	83 c4 04	 add	 esp, 4

; 4371 : 
; 4372 :     key = (char*)lodepng_malloc(length + 1);

  00045	89 45 fc	 mov	 DWORD PTR _key$1$[ebp], eax

; 4373 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/

  00048	85 c0		 test	 eax, eax
  0004a	75 08		 jne	 SHORT $LN8@readChunk_
  0004c	8d 70 53	 lea	 esi, DWORD PTR [eax+83]
  0004f	e9 77 00 00 00	 jmp	 $LN13@readChunk_
$LN8@readChunk_:

; 4374 : 
; 4375 :     key[length] = 0;

  00054	88 1c 06	 mov	 BYTE PTR [esi+eax], bl

; 4376 :     for(i = 0; i < length; i++) key[i] = data[i];

  00057	85 f6		 test	 esi, esi
  00059	74 12		 je	 SHORT $LN5@readChunk_
  0005b	8b 55 f8	 mov	 edx, DWORD PTR _data$1$[ebp]
  0005e	8b c8		 mov	 ecx, eax
  00060	2b d0		 sub	 edx, eax
$LL33@readChunk_:
  00062	8a 04 0a	 mov	 al, BYTE PTR [edx+ecx]
  00065	88 01		 mov	 BYTE PTR [ecx], al
  00067	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0006a	4e		 dec	 esi
  0006b	75 f5		 jne	 SHORT $LL33@readChunk_
$LN5@readChunk_:

; 4377 : 
; 4378 :     string2_begin = length + 1; /*skip keyword null terminator*/
; 4379 : 
; 4380 :     length = chunkLength < string2_begin ? 0 : chunkLength - string2_begin;

  0006d	8b 75 f4	 mov	 esi, DWORD PTR _string2_begin$1$[ebp]
  00070	3b fe		 cmp	 edi, esi
  00072	73 04		 jae	 SHORT $LN17@readChunk_
  00074	33 ff		 xor	 edi, edi
  00076	eb 02		 jmp	 SHORT $LN18@readChunk_
$LN17@readChunk_:
  00078	2b fe		 sub	 edi, esi
$LN18@readChunk_:

; 4381 :     str = (char*)lodepng_malloc(length + 1);

  0007a	8d 47 01	 lea	 eax, DWORD PTR [edi+1]

; 63   :   return malloc(size);

  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _malloc

; 4381 :     str = (char*)lodepng_malloc(length + 1);

  00083	8b d8		 mov	 ebx, eax

; 63   :   return malloc(size);

  00085	83 c4 04	 add	 esp, 4

; 4382 :     if(!str) CERROR_BREAK(error, 83); /*alloc fail*/

  00088	85 db		 test	 ebx, ebx
  0008a	75 08		 jne	 SHORT $LN4@readChunk_
  0008c	8d 70 53	 lea	 esi, DWORD PTR [eax+83]
  0008f	8b 45 fc	 mov	 eax, DWORD PTR _key$1$[ebp]
  00092	eb 37		 jmp	 SHORT $LN13@readChunk_
$LN4@readChunk_:

; 4383 : 
; 4384 :     str[length] = 0;
; 4385 :     for(i = 0; i < length; i++) str[i] = data[string2_begin + i];

  00094	33 c9		 xor	 ecx, ecx
  00096	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0
  0009a	85 ff		 test	 edi, edi
  0009c	74 10		 je	 SHORT $LN1@readChunk_
  0009e	8b 55 f8	 mov	 edx, DWORD PTR _data$1$[ebp]
  000a1	03 d6		 add	 edx, esi
$LL3@readChunk_:
  000a3	8a 04 0a	 mov	 al, BYTE PTR [edx+ecx]
  000a6	88 04 19	 mov	 BYTE PTR [ecx+ebx], al
  000a9	41		 inc	 ecx
  000aa	3b cf		 cmp	 ecx, edi
  000ac	72 f5		 jb	 SHORT $LL3@readChunk_
$LN1@readChunk_:

; 4386 : 
; 4387 :     error = lodepng_add_text(info, key, str);

  000ae	8b 55 fc	 mov	 edx, DWORD PTR _key$1$[ebp]
  000b1	8b 4d f0	 mov	 ecx, DWORD PTR _info$1$[ebp]
  000b4	53		 push	 ebx
  000b5	e8 00 00 00 00	 call	 ?lodepng_add_text@@YAIPAULodePNGInfo@@PBD1@Z ; lodepng_add_text
  000ba	8b f0		 mov	 esi, eax

; 4388 : 
; 4389 :     break;

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _key$1$[ebp]
  000bf	83 c4 04	 add	 esp, 4
  000c2	eb 07		 jmp	 SHORT $LN13@readChunk_
$LN9@readChunk_:

; 4368 :     /*even though it's not allowed by the standard, no error is thrown if
; 4369 :     there's no null termination char, if the text is empty*/
; 4370 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/

  000c4	be 59 00 00 00	 mov	 esi, 89			; 00000059H
  000c9	33 c0		 xor	 eax, eax
$LN13@readChunk_:

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 _free
  000d1	53		 push	 ebx
  000d2	e8 00 00 00 00	 call	 _free
  000d7	83 c4 08	 add	 esp, 8

; 4390 :   }
; 4391 : 
; 4392 :   lodepng_free(key);
; 4393 :   lodepng_free(str);
; 4394 : 
; 4395 :   return error;

  000da	8b c6		 mov	 eax, esi
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	5b		 pop	 ebx

; 4396 : }

  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
?readChunk_tEXt@@YAIPAULodePNGInfo@@PBEI@Z ENDP		; readChunk_tEXt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?readChunk_zTXt@@YAIPAULodePNGInfo@@PBULodePNGDecompressSettings@@PBEI@Z
_TEXT	SEGMENT
_decoded$ = -28						; size = 12
_info$1$ = -16						; size = 4
_zlibsettings$1$ = -12					; size = 4
_string2_begin$1$ = -8					; size = 4
_key$1$ = -4						; size = 4
_data$ = 8						; size = 4
_chunkLength$ = 12					; size = 4
?readChunk_zTXt@@YAIPAULodePNGInfo@@PBULodePNGDecompressSettings@@PBEI@Z PROC ; readChunk_zTXt, COMDAT
; _info$ = ecx
; _zlibsettings$ = edx

; 4401 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx

; 4402 :   unsigned error = 0;
; 4403 :   unsigned i;
; 4404 : 
; 4405 :   unsigned length, string2_begin;
; 4406 :   char *key = 0;
; 4407 :   ucvector decoded;
; 4408 : 
; 4409 :   ucvector_init(&decoded);
; 4410 : 
; 4411 :   while(!error) /*not really a while loop, only used to break on error*/
; 4412 :   {
; 4413 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _data$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR _chunkLength$[ebp]
  0000f	89 55 f4	 mov	 DWORD PTR _zlibsettings$1$[ebp], edx
  00012	33 d2		 xor	 edx, edx
  00014	33 f6		 xor	 esi, esi
  00016	89 4d f0	 mov	 DWORD PTR _info$1$[ebp], ecx

; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;

  00019	89 55 e4	 mov	 DWORD PTR _decoded$[ebp], edx

; 246  :   p->size = p->allocsize = 0;

  0001c	89 55 ec	 mov	 DWORD PTR _decoded$[ebp+8], edx
  0001f	89 55 e8	 mov	 DWORD PTR _decoded$[ebp+4], edx

; 4402 :   unsigned error = 0;
; 4403 :   unsigned i;
; 4404 : 
; 4405 :   unsigned length, string2_begin;
; 4406 :   char *key = 0;
; 4407 :   ucvector decoded;
; 4408 : 
; 4409 :   ucvector_init(&decoded);
; 4410 : 
; 4411 :   while(!error) /*not really a while loop, only used to break on error*/
; 4412 :   {
; 4413 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;

  00022	85 ff		 test	 edi, edi
  00024	74 0a		 je	 SHORT $LN40@readChunk_
$LL13@readChunk_:
  00026	38 14 1e	 cmp	 BYTE PTR [esi+ebx], dl
  00029	74 05		 je	 SHORT $LN40@readChunk_
  0002b	46		 inc	 esi
  0002c	3b f7		 cmp	 esi, edi
  0002e	72 f6		 jb	 SHORT $LL13@readChunk_
$LN40@readChunk_:

; 4414 :     if(length + 2 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/

  00030	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  00033	89 45 f8	 mov	 DWORD PTR _string2_begin$1$[ebp], eax
  00036	3b c7		 cmp	 eax, edi
  00038	72 0a		 jb	 SHORT $LN10@readChunk_
$LN43@readChunk_:
  0003a	be 4b 00 00 00	 mov	 esi, 75			; 0000004bH
  0003f	e9 b4 00 00 00	 jmp	 $LN14@readChunk_
$LN10@readChunk_:

; 4415 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/

  00044	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00047	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  0004a	0f 87 d0 00 00
	00		 ja	 $LN8@readChunk_

; 4416 : 
; 4417 :     key = (char*)lodepng_malloc(length + 1);

  00050	8d 46 01	 lea	 eax, DWORD PTR [esi+1]

; 63   :   return malloc(size);

  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _malloc

; 4416 : 
; 4417 :     key = (char*)lodepng_malloc(length + 1);

  00059	8b d0		 mov	 edx, eax

; 63   :   return malloc(size);

  0005b	83 c4 04	 add	 esp, 4

; 4416 : 
; 4417 :     key = (char*)lodepng_malloc(length + 1);

  0005e	89 55 fc	 mov	 DWORD PTR _key$1$[ebp], edx

; 4418 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/

  00061	85 d2		 test	 edx, edx
  00063	75 08		 jne	 SHORT $LN7@readChunk_
  00065	8d 70 53	 lea	 esi, DWORD PTR [eax+83]
  00068	e9 8b 00 00 00	 jmp	 $LN14@readChunk_
$LN7@readChunk_:

; 4419 : 
; 4420 :     key[length] = 0;

  0006d	c6 04 16 00	 mov	 BYTE PTR [esi+edx], 0

; 4421 :     for(i = 0; i < length; i++) key[i] = data[i];

  00071	85 f6		 test	 esi, esi
  00073	74 1c		 je	 SHORT $LN4@readChunk_
  00075	8b fb		 mov	 edi, ebx
  00077	8b ca		 mov	 ecx, edx
  00079	2b fa		 sub	 edi, edx
  0007b	8b d6		 mov	 edx, esi
  0007d	8d 49 00	 npad	 3
$LL36@readChunk_:
  00080	8a 04 0f	 mov	 al, BYTE PTR [edi+ecx]
  00083	88 01		 mov	 BYTE PTR [ecx], al
  00085	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00088	4a		 dec	 edx
  00089	75 f5		 jne	 SHORT $LL36@readChunk_
  0008b	8b 7d 0c	 mov	 edi, DWORD PTR _chunkLength$[ebp]
  0008e	8b 55 fc	 mov	 edx, DWORD PTR _key$1$[ebp]
$LN4@readChunk_:

; 4422 : 
; 4423 :     if(data[length + 1] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/

  00091	80 7c 1e 01 00	 cmp	 BYTE PTR [esi+ebx+1], 0
  00096	74 07		 je	 SHORT $LN3@readChunk_
  00098	be 48 00 00 00	 mov	 esi, 72			; 00000048H
  0009d	eb 59		 jmp	 SHORT $LN14@readChunk_
$LN3@readChunk_:

; 4424 : 
; 4425 :     string2_begin = length + 2;
; 4426 :     if(string2_begin > chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/

  0009f	8b 45 f8	 mov	 eax, DWORD PTR _string2_begin$1$[ebp]
  000a2	3b c7		 cmp	 eax, edi
  000a4	77 94		 ja	 SHORT $LN43@readChunk_

; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
; 945  :     (*bp)++;
; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);
; 965  :   generateFixedDistanceTree(tree_d);
; 966  : }
; 967  : 
; 968  : /*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
; 969  : static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
; 970  :                                       const unsigned char* in, size_t* bp, size_t inlength)
; 971  : {
; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;
; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/
; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;
; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;
; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;
; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)
; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
; 1009 :     if(error) break;
; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;
; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;
; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;
; 1020 :     while(i < HLIT + HDIST)
; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
; 1023 :       if(code <= 15) /*a length code*/
; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;
; 1026 :         else bitlen_d[i - HLIT] = code;
; 1027 :         i++;
; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/
; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);
; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];
; 1040 :         else value = bitlen_d[i - HLIT - 1];
; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)
; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
; 1045 :           if(i < HLIT) bitlen_ll[i] = value;
; 1046 :           else bitlen_d[i - HLIT] = value;
; 1047 :           i++;
; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/
; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);
; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)
; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1063 :           else bitlen_d[i - HLIT] = 0;
; 1064 :           i++;
; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/
; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);
; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)
; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1080 :           else bitlen_d[i - HLIT] = 0;
; 1081 :           i++;
; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))
; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;
; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/
; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;
; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 1102 :     if(error) break;
; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
; 1104 : 
; 1105 :     break; /*end of error-while*/
; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;
; 1114 : }
; 1115 : 
; 1116 : /*inflate a block with dynamic of fixed Huffman tree*/
; 1117 : static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
; 1118 :                                     size_t* pos, size_t inlength, unsigned btype)
; 1119 : {
; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;
; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/
; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/
; 1136 :     {
; 1137 :       if((*pos) >= out->size)
; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);
; 1143 :       (*pos)++;
; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);
; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
; 1161 :       if(code_d > 29)
; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;
; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/
; 1170 :         break;
; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);
; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);
; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)
; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)
; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];
; 1193 :         (*pos)++;
; 1194 :         backward++;
; 1195 :         if(backward >= start) backward = start - distance;
; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)
; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;
; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;
; 1215 : }
; 1216 : 
; 1217 : static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
; 1218 : {
; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;
; 1223 :   p = (*bp) / 8; /*byte position*/
; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/
; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;
; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;
; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)
; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];
; 1241 : 
; 1242 :   (*bp) = p * 8;
; 1243 : 
; 1244 :   return error;
; 1245 : }
; 1246 : 
; 1247 : static unsigned lodepng_inflatev(ucvector* out,
; 1248 :                                  const unsigned char* in, size_t insize,
; 1249 :                                  const LodePNGDecompressSettings* settings)
; 1250 : {
; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;
; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/
; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)
; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
; 1264 :     BFINAL = readBitFromStream(&bp, in);
; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);
; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
; 1271 : 
; 1272 :     if(error) return error;
; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/
; 1277 : 
; 1278 :   return error;
; 1279 : }
; 1280 : 
; 1281 : unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
; 1282 :                          const unsigned char* in, size_t insize,
; 1283 :                          const LodePNGDecompressSettings* settings)
; 1284 : {
; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);
; 1289 :   *out = v.data;
; 1290 :   *outsize = v.size;
; 1291 :   return error;
; 1292 : }
; 1293 : 
; 1294 : static unsigned inflate(unsigned char** out, size_t* outsize,
; 1295 :                         const unsigned char* in, size_t insize,
; 1296 :                         const LodePNGDecompressSettings* settings)
; 1297 : {
; 1298 :   if(settings->custom_inflate)
; 1299 :   {
; 1300 :     return settings->custom_inflate(out, outsize, in, insize, settings);
; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }
; 1307 : 
; 1308 : #endif /*LODEPNG_COMPILE_DECODER*/
; 1309 : 
; 1310 : #ifdef LODEPNG_COMPILE_ENCODER
; 1311 : 
; 1312 : /* ////////////////////////////////////////////////////////////////////////// */
; 1313 : /* / Deflator (Compressor)                                                  / */
; 1314 : /* ////////////////////////////////////////////////////////////////////////// */
; 1315 : 
; 1316 : static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;
; 1317 : 
; 1318 : /*bitlen is the size in bits of the code*/
; 1319 : static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)
; 1320 : {
; 1321 :   addBitsToStreamReversed(bp, compressed, code, bitlen);
; 1322 : }
; 1323 : 
; 1324 : /*search the index in the array, that has the largest value smaller than or equal to the given value,
; 1325 : given array must be sorted (if no value is smaller, it returns the size of the given array)*/
; 1326 : static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)
; 1327 : {
; 1328 :   /*linear search implementation*/
; 1329 :   /*for(size_t i = 1; i < array_size; i++) if(array[i] > value) return i - 1;
; 1330 :   return array_size - 1;*/
; 1331 : 
; 1332 :   /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
; 1333 :   size_t left  = 1;
; 1334 :   size_t right = array_size - 1;
; 1335 :   while(left <= right)
; 1336 :   {
; 1337 :     size_t mid = (left + right) / 2;
; 1338 :     if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
; 1339 :     else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
; 1340 :     else return mid - 1;
; 1341 :   }
; 1342 :   return array_size - 1;
; 1343 : }
; 1344 : 
; 1345 : static void addLengthDistance(uivector* values, size_t length, size_t distance)
; 1346 : {
; 1347 :   /*values in encoded vector are those used by deflate:
; 1348 :   0-255: literal bytes
; 1349 :   256: end
; 1350 :   257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
; 1351 :   286-287: invalid*/
; 1352 : 
; 1353 :   unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
; 1354 :   unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
; 1355 :   unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
; 1356 :   unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);
; 1357 : 
; 1358 :   uivector_push_back(values, length_code + FIRST_LENGTH_CODE_INDEX);
; 1359 :   uivector_push_back(values, extra_length);
; 1360 :   uivector_push_back(values, dist_code);
; 1361 :   uivector_push_back(values, extra_distance);
; 1362 : }
; 1363 : 
; 1364 : static const unsigned HASH_NUM_VALUES = 65536;
; 1365 : static const unsigned HASH_NUM_CHARACTERS = 3;
; 1366 : static const unsigned HASH_SHIFT = 2;
; 1367 : /*
; 1368 : The HASH_NUM_CHARACTERS value is used to make encoding faster by using longer
; 1369 : sequences to generate a hash value from the stream bytes. Setting it to 3
; 1370 : gives exactly the same compression as the brute force method, since deflate's
; 1371 : run length encoding starts with lengths of 3. Setting it to higher values,
; 1372 : like 6, can make the encoding faster (not always though!), but will cause the
; 1373 : encoding to miss any length between 3 and this value, so that the compression
; 1374 : may be worse (but this can vary too depending on the image, sometimes it is
; 1375 : even a bit better instead).
; 1376 : The HASH_NUM_VALUES is the amount of unique possible hash values that
; 1377 : combinations of bytes can give, the higher it is the more memory is needed, but
; 1378 : if it's too low the advantage of hashing is gone.
; 1379 : */
; 1380 : 
; 1381 : typedef struct Hash
; 1382 : {
; 1383 :   int* head; /*hash value to head circular pos*/
; 1384 :   int* val; /*circular pos to hash value*/
; 1385 :   /*circular pos to prev circular pos*/
; 1386 :   unsigned short* chain;
; 1387 :   unsigned short* zeros;
; 1388 : } Hash;
; 1389 : 
; 1390 : static unsigned hash_init(Hash* hash, unsigned windowsize)
; 1391 : {
; 1392 :   unsigned i;
; 1393 :   hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
; 1394 :   hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
; 1395 :   hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1396 :   hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1397 : 
; 1398 :   if(!hash->head || !hash->val || !hash->chain || !hash->zeros) return 83; /*alloc fail*/
; 1399 : 
; 1400 :   /*initialize hash table*/
; 1401 :   for(i = 0; i < HASH_NUM_VALUES; i++) hash->head[i] = -1;
; 1402 :   for(i = 0; i < windowsize; i++) hash->val[i] = -1;
; 1403 :   for(i = 0; i < windowsize; i++) hash->chain[i] = i; /*same value as index indicates uninitialized*/
; 1404 : 
; 1405 :   return 0;
; 1406 : }
; 1407 : 
; 1408 : static void hash_cleanup(Hash* hash)
; 1409 : {
; 1410 :   lodepng_free(hash->head);
; 1411 :   lodepng_free(hash->val);
; 1412 :   lodepng_free(hash->chain);
; 1413 :   lodepng_free(hash->zeros);
; 1414 : }
; 1415 : 
; 1416 : static unsigned getHash(const unsigned char* data, size_t size, size_t pos)
; 1417 : {
; 1418 :   unsigned result = 0;
; 1419 :   size_t amount, i;
; 1420 :   if(pos >= size) return 0;
; 1421 :   amount = HASH_NUM_CHARACTERS;
; 1422 :   if(pos + amount >= size) amount = size - pos;
; 1423 :   for(i = 0; i < amount; i++) result ^= (data[pos + i] << (i * HASH_SHIFT));
; 1424 :   return result % HASH_NUM_VALUES;
; 1425 : }
; 1426 : 
; 1427 : static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)
; 1428 : {
; 1429 :   const unsigned char* start = data + pos;
; 1430 :   const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
; 1431 :   if(end > data + size) end = data + size;
; 1432 :   data = start;
; 1433 :   while (data != end && *data == 0) data++;
; 1434 :   /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
; 1435 :   return (unsigned)(data - start);
; 1436 : }
; 1437 : 
; 1438 : static void updateHashChain(Hash* hash, size_t pos, int hashval, unsigned windowsize)
; 1439 : {
; 1440 :   unsigned wpos = pos % windowsize;
; 1441 :   hash->val[wpos] = hashval;
; 1442 :   if(hash->head[hashval] != -1) hash->chain[wpos] = hash->head[hashval];
; 1443 :   hash->head[hashval] = wpos;
; 1444 : }
; 1445 : 
; 1446 : /*
; 1447 : LZ77-encode the data. Return value is error code. The input are raw bytes, the output
; 1448 : is in the form of unsigned integers with codes representing for example literal bytes, or
; 1449 : length/distance pairs.
; 1450 : It uses a hash table technique to let it encode faster. When doing LZ77 encoding, a
; 1451 : sliding window (of windowsize) is used, and all past bytes in that window can be used as
; 1452 : the "dictionary". A brute force search through all possible distances would be slow, and
; 1453 : this hash technique is one out of several ways to speed this up.
; 1454 : */
; 1455 : static unsigned encodeLZ77(uivector* out, Hash* hash,
; 1456 :                            const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
; 1457 :                            unsigned minmatch, unsigned nicematch, unsigned lazymatching)
; 1458 : {
; 1459 :   unsigned short numzeros = 0;
; 1460 :   int usezeros = windowsize >= 8192; /*for small window size, the 'max chain length' optimization does a better job*/
; 1461 :   unsigned pos, i, error = 0;
; 1462 :   /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
; 1463 :   unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8;
; 1464 :   unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;
; 1465 : 
; 1466 :   if(!error)
; 1467 :   {
; 1468 :     unsigned offset; /*the offset represents the distance in LZ77 terminology*/
; 1469 :     unsigned length;
; 1470 :     unsigned lazy = 0;
; 1471 :     unsigned lazylength = 0, lazyoffset = 0;
; 1472 :     unsigned hashval;
; 1473 :     unsigned current_offset, current_length;
; 1474 :     const unsigned char *lastptr, *foreptr, *backptr;
; 1475 :     unsigned short hashpos, prevpos;
; 1476 : 
; 1477 :     for(pos = inpos; pos < insize; pos++)
; 1478 :     {
; 1479 :       size_t wpos = pos % windowsize; /*position for in 'circular' hash buffers*/
; 1480 : 
; 1481 :       hashval = getHash(in, insize, pos);
; 1482 :       updateHashChain(hash, pos, hashval, windowsize);
; 1483 : 
; 1484 :       if(usezeros && hashval == 0)
; 1485 :       {
; 1486 :         numzeros = countZeros(in, insize, pos);
; 1487 :         hash->zeros[wpos] = numzeros;
; 1488 :       }
; 1489 : 
; 1490 :       /*the length and offset found for the current position*/
; 1491 :       length = 0;
; 1492 :       offset = 0;
; 1493 : 
; 1494 :       prevpos = hash->head[hashval];
; 1495 :       hashpos = hash->chain[prevpos];
; 1496 : 
; 1497 :       lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];
; 1498 : 
; 1499 :       /*search for the longest string*/
; 1500 :       if(hash->val[wpos] == (int)hashval)
; 1501 :       {
; 1502 :         unsigned chainlength = 0;
; 1503 :         for(;;)
; 1504 :         {
; 1505 :           /*stop when went completely around the circular buffer*/
; 1506 :           if(prevpos < wpos && hashpos > prevpos && hashpos <= wpos) break;
; 1507 :           if(prevpos > wpos && (hashpos <= wpos || hashpos > prevpos)) break;
; 1508 :           if(chainlength++ >= maxchainlength) break;
; 1509 : 
; 1510 :           current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;
; 1511 :           if(current_offset > 0)
; 1512 :           {
; 1513 :             /*test the next characters*/
; 1514 :             foreptr = &in[pos];
; 1515 :             backptr = &in[pos - current_offset];
; 1516 : 
; 1517 :             /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
; 1518 :             if(usezeros && hashval == 0 && hash->val[hashpos] == 0 /*hashval[hashpos] may be out of date*/)
; 1519 :             {
; 1520 :               unsigned short skip = hash->zeros[hashpos];
; 1521 :               if(skip > numzeros) skip = numzeros;
; 1522 :               backptr += skip;
; 1523 :               foreptr += skip;
; 1524 :             }
; 1525 : 
; 1526 :             /* multiple checks at once per array bounds check */
; 1527 :             while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
; 1528 :             {
; 1529 :               ++backptr;
; 1530 :               ++foreptr;
; 1531 :             }
; 1532 :             current_length = (unsigned)(foreptr - &in[pos]);
; 1533 : 
; 1534 :             if(current_length > length)
; 1535 :             {
; 1536 :               length = current_length; /*the longest length*/
; 1537 :               offset = current_offset; /*the offset that is related to this longest length*/
; 1538 :               /*jump out once a length of max length is found (speed gain)*/
; 1539 :               if(current_length >= nicematch || current_length == MAX_SUPPORTED_DEFLATE_LENGTH) break;
; 1540 :             }
; 1541 :           }
; 1542 : 
; 1543 :           if(hashpos == hash->chain[hashpos]) break;
; 1544 : 
; 1545 :           prevpos = hashpos;
; 1546 :           hashpos = hash->chain[hashpos];
; 1547 :         }
; 1548 :       }
; 1549 : 
; 1550 :       if(lazymatching)
; 1551 :       {
; 1552 :         if(!lazy && length >= 3 && length <= maxlazymatch && length < MAX_SUPPORTED_DEFLATE_LENGTH)
; 1553 :         {
; 1554 :           lazy = 1;
; 1555 :           lazylength = length;
; 1556 :           lazyoffset = offset;
; 1557 :           continue; /*try the next byte*/
; 1558 :         }
; 1559 :         if(lazy)
; 1560 :         {
; 1561 :           lazy = 0;
; 1562 :           if(pos == 0) ERROR_BREAK(81);
; 1563 :           if(length > lazylength + 1)
; 1564 :           {
; 1565 :             /*push the previous character as literal*/
; 1566 :             if(!uivector_push_back(out, in[pos - 1])) ERROR_BREAK(83 /*alloc fail*/);
; 1567 :           }
; 1568 :           else
; 1569 :           {
; 1570 :             length = lazylength;
; 1571 :             offset = lazyoffset;
; 1572 :             hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
; 1573 :             pos--;
; 1574 :           }
; 1575 :         }
; 1576 :       }
; 1577 :       if(length >= 3 && offset > windowsize) ERROR_BREAK(86 /*too big (or overflown negative) offset*/);
; 1578 : 
; 1579 :       /**encode it as length/distance pair or literal value**/
; 1580 :       if(length < 3) /*only lengths of 3 or higher are supported as length/distance pair*/
; 1581 :       {
; 1582 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1583 :       }
; 1584 :       else if(length < minmatch || (length == 3 && offset > 4096))
; 1585 :       {
; 1586 :         /*compensate for the fact that longer offsets have more extra bits, a
; 1587 :         length of only 3 may be not worth it then*/
; 1588 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1589 :       }
; 1590 :       else
; 1591 :       {
; 1592 :         addLengthDistance(out, length, offset);
; 1593 :         for(i = 1; i < length; i++)
; 1594 :         {
; 1595 :           pos++;
; 1596 :           hashval = getHash(in, insize, pos);
; 1597 :           updateHashChain(hash, pos, hashval, windowsize);
; 1598 :           if(usezeros && hashval == 0)
; 1599 :           {
; 1600 :             hash->zeros[pos % windowsize] = countZeros(in, insize, pos);
; 1601 :           }
; 1602 :         }
; 1603 :       }
; 1604 : 
; 1605 :     } /*end of the loop through each character of input*/
; 1606 :   } /*end of "if(!error)"*/
; 1607 : 
; 1608 :   return error;
; 1609 : }
; 1610 : 
; 1611 : /* /////////////////////////////////////////////////////////////////////////// */
; 1612 : 
; 1613 : static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)
; 1614 : {
; 1615 :   /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
; 1616 :   2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/
; 1617 : 
; 1618 :   size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
; 1619 :   unsigned datapos = 0;
; 1620 :   for(i = 0; i < numdeflateblocks; i++)
; 1621 :   {
; 1622 :     unsigned BFINAL, BTYPE, LEN, NLEN;
; 1623 :     unsigned char firstbyte;
; 1624 : 
; 1625 :     BFINAL = (i == numdeflateblocks - 1);
; 1626 :     BTYPE = 0;
; 1627 : 
; 1628 :     firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1) << 1) + ((BTYPE & 2) << 1));
; 1629 :     ucvector_push_back(out, firstbyte);
; 1630 : 
; 1631 :     LEN = 65535;
; 1632 :     if(datasize - datapos < 65535) LEN = (unsigned)datasize - datapos;
; 1633 :     NLEN = 65535 - LEN;
; 1634 : 
; 1635 :     ucvector_push_back(out, (unsigned char)(LEN % 256));
; 1636 :     ucvector_push_back(out, (unsigned char)(LEN / 256));
; 1637 :     ucvector_push_back(out, (unsigned char)(NLEN % 256));
; 1638 :     ucvector_push_back(out, (unsigned char)(NLEN / 256));
; 1639 : 
; 1640 :     /*Decompressed data*/
; 1641 :     for(j = 0; j < 65535 && datapos < datasize; j++)
; 1642 :     {
; 1643 :       ucvector_push_back(out, data[datapos++]);
; 1644 :     }
; 1645 :   }
; 1646 : 
; 1647 :   return 0;
; 1648 : }
; 1649 : 
; 1650 : /*
; 1651 : write the lz77-encoded data, which has lit, len and dist codes, to compressed stream using huffman trees.
; 1652 : tree_ll: the tree for lit and len codes.
; 1653 : tree_d: the tree for distance codes.
; 1654 : */
; 1655 : static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
; 1656 :                           const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
; 1657 : {
; 1658 :   size_t i = 0;
; 1659 :   for(i = 0; i < lz77_encoded->size; i++)
; 1660 :   {
; 1661 :     unsigned val = lz77_encoded->data[i];
; 1662 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_ll, val), HuffmanTree_getLength(tree_ll, val));
; 1663 :     if(val > 256) /*for a length code, 3 more things have to be added*/
; 1664 :     {
; 1665 :       unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
; 1666 :       unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
; 1667 :       unsigned length_extra_bits = lz77_encoded->data[++i];
; 1668 : 
; 1669 :       unsigned distance_code = lz77_encoded->data[++i];
; 1670 : 
; 1671 :       unsigned distance_index = distance_code;
; 1672 :       unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
; 1673 :       unsigned distance_extra_bits = lz77_encoded->data[++i];
; 1674 : 
; 1675 :       addBitsToStream(bp, out, length_extra_bits, n_length_extra_bits);
; 1676 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
; 1677 :                        HuffmanTree_getLength(tree_d, distance_code));
; 1678 :       addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
; 1679 :     }
; 1680 :   }
; 1681 : }
; 1682 : 
; 1683 : /*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
; 1684 : static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,
; 1685 :                                const unsigned char* data, size_t datapos, size_t dataend,
; 1686 :                                const LodePNGCompressSettings* settings, int final)
; 1687 : {
; 1688 :   unsigned error = 0;
; 1689 : 
; 1690 :   /*
; 1691 :   A block is compressed as follows: The PNG data is lz77 encoded, resulting in
; 1692 :   literal bytes and length/distance pairs. This is then huffman compressed with
; 1693 :   two huffman trees. One huffman tree is used for the lit and len values ("ll"),
; 1694 :   another huffman tree is used for the dist values ("d"). These two trees are
; 1695 :   stored using their code lengths, and to compress even more these code lengths
; 1696 :   are also run-length encoded and huffman compressed. This gives a huffman tree
; 1697 :   of code lengths "cl". The code lenghts used to describe this third tree are
; 1698 :   the code length code lengths ("clcl").
; 1699 :   */
; 1700 : 
; 1701 :   /*The lz77 encoded data, represented with integers since there will also be length and distance codes in it*/
; 1702 :   uivector lz77_encoded;
; 1703 :   HuffmanTree tree_ll; /*tree for lit,len values*/
; 1704 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1705 :   HuffmanTree tree_cl; /*tree for encoding the code lengths representing tree_ll and tree_d*/
; 1706 :   uivector frequencies_ll; /*frequency of lit,len codes*/
; 1707 :   uivector frequencies_d; /*frequency of dist codes*/
; 1708 :   uivector frequencies_cl; /*frequency of code length codes*/
; 1709 :   uivector bitlen_lld; /*lit,len,dist code lenghts (int bits), literally (without repeat codes).*/
; 1710 :   uivector bitlen_lld_e; /*bitlen_lld encoded with repeat codes (this is a rudemtary run length compression)*/
; 1711 :   /*bitlen_cl is the code length code lengths ("clcl"). The bit lengths of codes to represent tree_cl
; 1712 :   (these are written as is in the file, it would be crazy to compress these using yet another huffman
; 1713 :   tree that needs to be represented by yet another set of code lengths)*/
; 1714 :   uivector bitlen_cl;
; 1715 :   size_t datasize = dataend - datapos;
; 1716 : 
; 1717 :   /*
; 1718 :   Due to the huffman compression of huffman tree representations ("two levels"), there are some anologies:
; 1719 :   bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
; 1720 :   bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
; 1721 :   bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
; 1722 :   */
; 1723 : 
; 1724 :   unsigned BFINAL = final;
; 1725 :   size_t numcodes_ll, numcodes_d, i;
; 1726 :   unsigned HLIT, HDIST, HCLEN;
; 1727 : 
; 1728 :   uivector_init(&lz77_encoded);
; 1729 :   HuffmanTree_init(&tree_ll);
; 1730 :   HuffmanTree_init(&tree_d);
; 1731 :   HuffmanTree_init(&tree_cl);
; 1732 :   uivector_init(&frequencies_ll);
; 1733 :   uivector_init(&frequencies_d);
; 1734 :   uivector_init(&frequencies_cl);
; 1735 :   uivector_init(&bitlen_lld);
; 1736 :   uivector_init(&bitlen_lld_e);
; 1737 :   uivector_init(&bitlen_cl);
; 1738 : 
; 1739 :   /*This while loop never loops due to a break at the end, it is here to
; 1740 :   allow breaking out of it to the cleanup phase on error conditions.*/
; 1741 :   while(!error)
; 1742 :   {
; 1743 :     if(settings->use_lz77)
; 1744 :     {
; 1745 :       error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1746 :                          settings->minmatch, settings->nicematch, settings->lazymatching);
; 1747 :       if(error) break;
; 1748 :     }
; 1749 :     else
; 1750 :     {
; 1751 :       if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83 /*alloc fail*/);
; 1752 :       for(i = datapos; i < dataend; i++) lz77_encoded.data[i] = data[i]; /*no LZ77, but still will be Huffman compressed*/
; 1753 :     }
; 1754 : 
; 1755 :     if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1756 :     if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1757 : 
; 1758 :     /*Count the frequencies of lit, len and dist codes*/
; 1759 :     for(i = 0; i < lz77_encoded.size; i++)
; 1760 :     {
; 1761 :       unsigned symbol = lz77_encoded.data[i];
; 1762 :       frequencies_ll.data[symbol]++;
; 1763 :       if(symbol > 256)
; 1764 :       {
; 1765 :         unsigned dist = lz77_encoded.data[i + 2];
; 1766 :         frequencies_d.data[dist]++;
; 1767 :         i += 3;
; 1768 :       }
; 1769 :     }
; 1770 :     frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/
; 1771 : 
; 1772 :     /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
; 1773 :     error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
; 1774 :     if(error) break;
; 1775 :     /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
; 1776 :     error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
; 1777 :     if(error) break;
; 1778 : 
; 1779 :     numcodes_ll = tree_ll.numcodes; if(numcodes_ll > 286) numcodes_ll = 286;
; 1780 :     numcodes_d = tree_d.numcodes; if(numcodes_d > 30) numcodes_d = 30;
; 1781 :     /*store the code lengths of both generated trees in bitlen_lld*/
; 1782 :     for(i = 0; i < numcodes_ll; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
; 1783 :     for(i = 0; i < numcodes_d; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));
; 1784 : 
; 1785 :     /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
; 1786 :     17 (3-10 zeroes), 18 (11-138 zeroes)*/
; 1787 :     for(i = 0; i < (unsigned)bitlen_lld.size; i++)
; 1788 :     {
; 1789 :       unsigned j = 0; /*amount of repititions*/
; 1790 :       while(i + j + 1 < (unsigned)bitlen_lld.size && bitlen_lld.data[i + j + 1] == bitlen_lld.data[i]) j++;
; 1791 : 
; 1792 :       if(bitlen_lld.data[i] == 0 && j >= 2) /*repeat code for zeroes*/
; 1793 :       {
; 1794 :         j++; /*include the first zero*/
; 1795 :         if(j <= 10) /*repeat code 17 supports max 10 zeroes*/
; 1796 :         {
; 1797 :           uivector_push_back(&bitlen_lld_e, 17);
; 1798 :           uivector_push_back(&bitlen_lld_e, j - 3);
; 1799 :         }
; 1800 :         else /*repeat code 18 supports max 138 zeroes*/
; 1801 :         {
; 1802 :           if(j > 138) j = 138;
; 1803 :           uivector_push_back(&bitlen_lld_e, 18);
; 1804 :           uivector_push_back(&bitlen_lld_e, j - 11);
; 1805 :         }
; 1806 :         i += (j - 1);
; 1807 :       }
; 1808 :       else if(j >= 3) /*repeat code for value other than zero*/
; 1809 :       {
; 1810 :         size_t k;
; 1811 :         unsigned num = j / 6, rest = j % 6;
; 1812 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1813 :         for(k = 0; k < num; k++)
; 1814 :         {
; 1815 :           uivector_push_back(&bitlen_lld_e, 16);
; 1816 :           uivector_push_back(&bitlen_lld_e, 6 - 3);
; 1817 :         }
; 1818 :         if(rest >= 3)
; 1819 :         {
; 1820 :           uivector_push_back(&bitlen_lld_e, 16);
; 1821 :           uivector_push_back(&bitlen_lld_e, rest - 3);
; 1822 :         }
; 1823 :         else j -= rest;
; 1824 :         i += j;
; 1825 :       }
; 1826 :       else /*too short to benefit from repeat code*/
; 1827 :       {
; 1828 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1829 :       }
; 1830 :     }
; 1831 : 
; 1832 :     /*generate tree_cl, the huffmantree of huffmantrees*/
; 1833 : 
; 1834 :     if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1835 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1836 :     {
; 1837 :       frequencies_cl.data[bitlen_lld_e.data[i]]++;
; 1838 :       /*after a repeat code come the bits that specify the number of repetitions,
; 1839 :       those don't need to be in the frequencies_cl calculation*/
; 1840 :       if(bitlen_lld_e.data[i] >= 16) i++;
; 1841 :     }
; 1842 : 
; 1843 :     error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
; 1844 :                                             frequencies_cl.size, frequencies_cl.size, 7);
; 1845 :     if(error) break;
; 1846 : 
; 1847 :     if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
; 1848 :     for(i = 0; i < tree_cl.numcodes; i++)
; 1849 :     {
; 1850 :       /*lenghts of code length tree is in the order as specified by deflate*/
; 1851 :       bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
; 1852 :     }
; 1853 :     while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
; 1854 :     {
; 1855 :       /*remove zeros at the end, but minimum size must be 4*/
; 1856 :       if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
; 1857 :     }
; 1858 :     if(error) break;
; 1859 : 
; 1860 :     /*
; 1861 :     Write everything into the output
; 1862 : 
; 1863 :     After the BFINAL and BTYPE, the dynamic block consists out of the following:
; 1864 :     - 5 bits HLIT, 5 bits HDIST, 4 bits HCLEN
; 1865 :     - (HCLEN+4)*3 bits code lengths of code length alphabet
; 1866 :     - HLIT + 257 code lenghts of lit/length alphabet (encoded using the code length
; 1867 :       alphabet, + possible repetition codes 16, 17, 18)
; 1868 :     - HDIST + 1 code lengths of distance alphabet (encoded using the code length
; 1869 :       alphabet, + possible repetition codes 16, 17, 18)
; 1870 :     - compressed data
; 1871 :     - 256 (end code)
; 1872 :     */
; 1873 : 
; 1874 :     /*Write block type*/
; 1875 :     addBitToStream(bp, out, BFINAL);
; 1876 :     addBitToStream(bp, out, 0); /*first bit of BTYPE "dynamic"*/
; 1877 :     addBitToStream(bp, out, 1); /*second bit of BTYPE "dynamic"*/
; 1878 : 
; 1879 :     /*write the HLIT, HDIST and HCLEN values*/
; 1880 :     HLIT = (unsigned)(numcodes_ll - 257);
; 1881 :     HDIST = (unsigned)(numcodes_d - 1);
; 1882 :     HCLEN = (unsigned)bitlen_cl.size - 4;
; 1883 :     /*trim zeroes for HCLEN. HLIT and HDIST were already trimmed at tree creation*/
; 1884 :     while(!bitlen_cl.data[HCLEN + 4 - 1] && HCLEN > 0) HCLEN--;
; 1885 :     addBitsToStream(bp, out, HLIT, 5);
; 1886 :     addBitsToStream(bp, out, HDIST, 5);
; 1887 :     addBitsToStream(bp, out, HCLEN, 4);
; 1888 : 
; 1889 :     /*write the code lenghts of the code length alphabet*/
; 1890 :     for(i = 0; i < HCLEN + 4; i++) addBitsToStream(bp, out, bitlen_cl.data[i], 3);
; 1891 : 
; 1892 :     /*write the lenghts of the lit/len AND the dist alphabet*/
; 1893 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1894 :     {
; 1895 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
; 1896 :                        HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
; 1897 :       /*extra bits of repeat codes*/
; 1898 :       if(bitlen_lld_e.data[i] == 16) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 2);
; 1899 :       else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
; 1900 :       else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
; 1901 :     }
; 1902 : 
; 1903 :     /*write the compressed data symbols*/
; 1904 :     writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1905 :     /*error: the length of the end code 256 must be larger than 0*/
; 1906 :     if(HuffmanTree_getLength(&tree_ll, 256) == 0) ERROR_BREAK(64);
; 1907 : 
; 1908 :     /*write the end code*/
; 1909 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1910 : 
; 1911 :     break; /*end of error-while*/
; 1912 :   }
; 1913 : 
; 1914 :   /*cleanup*/
; 1915 :   uivector_cleanup(&lz77_encoded);
; 1916 :   HuffmanTree_cleanup(&tree_ll);
; 1917 :   HuffmanTree_cleanup(&tree_d);
; 1918 :   HuffmanTree_cleanup(&tree_cl);
; 1919 :   uivector_cleanup(&frequencies_ll);
; 1920 :   uivector_cleanup(&frequencies_d);
; 1921 :   uivector_cleanup(&frequencies_cl);
; 1922 :   uivector_cleanup(&bitlen_lld_e);
; 1923 :   uivector_cleanup(&bitlen_lld);
; 1924 :   uivector_cleanup(&bitlen_cl);
; 1925 : 
; 1926 :   return error;
; 1927 : }
; 1928 : 
; 1929 : static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,
; 1930 :                              const unsigned char* data,
; 1931 :                              size_t datapos, size_t dataend,
; 1932 :                              const LodePNGCompressSettings* settings, int final)
; 1933 : {
; 1934 :   HuffmanTree tree_ll; /*tree for literal values and length codes*/
; 1935 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1936 : 
; 1937 :   unsigned BFINAL = final;
; 1938 :   unsigned error = 0;
; 1939 :   size_t i;
; 1940 : 
; 1941 :   HuffmanTree_init(&tree_ll);
; 1942 :   HuffmanTree_init(&tree_d);
; 1943 : 
; 1944 :   generateFixedLitLenTree(&tree_ll);
; 1945 :   generateFixedDistanceTree(&tree_d);
; 1946 : 
; 1947 :   addBitToStream(bp, out, BFINAL);
; 1948 :   addBitToStream(bp, out, 1); /*first bit of BTYPE*/
; 1949 :   addBitToStream(bp, out, 0); /*second bit of BTYPE*/
; 1950 : 
; 1951 :   if(settings->use_lz77) /*LZ77 encoded*/
; 1952 :   {
; 1953 :     uivector lz77_encoded;
; 1954 :     uivector_init(&lz77_encoded);
; 1955 :     error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1956 :                        settings->minmatch, settings->nicematch, settings->lazymatching);
; 1957 :     if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1958 :     uivector_cleanup(&lz77_encoded);
; 1959 :   }
; 1960 :   else /*no LZ77, but still will be Huffman compressed*/
; 1961 :   {
; 1962 :     for(i = datapos; i < dataend; i++)
; 1963 :     {
; 1964 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
; 1965 :     }
; 1966 :   }
; 1967 :   /*add END code*/
; 1968 :   if(!error) addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1969 : 
; 1970 :   /*cleanup*/
; 1971 :   HuffmanTree_cleanup(&tree_ll);
; 1972 :   HuffmanTree_cleanup(&tree_d);
; 1973 : 
; 1974 :   return error;
; 1975 : }
; 1976 : 
; 1977 : static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
; 1978 :                                  const LodePNGCompressSettings* settings)
; 1979 : {
; 1980 :   unsigned error = 0;
; 1981 :   size_t i, blocksize, numdeflateblocks;
; 1982 :   size_t bp = 0; /*the bit pointer*/
; 1983 :   Hash hash;
; 1984 : 
; 1985 :   if(settings->btype > 2) return 61;
; 1986 :   else if(settings->btype == 0) return deflateNoCompression(out, in, insize);
; 1987 :   else if(settings->btype == 1) blocksize = insize;
; 1988 :   else /*if(settings->btype == 2)*/
; 1989 :   {
; 1990 :     blocksize = insize / 8 + 8;
; 1991 :     if(blocksize < 65535) blocksize = 65535;
; 1992 :   }
; 1993 : 
; 1994 :   numdeflateblocks = (insize + blocksize - 1) / blocksize;
; 1995 :   if(numdeflateblocks == 0) numdeflateblocks = 1;
; 1996 : 
; 1997 :   error = hash_init(&hash, settings->windowsize);
; 1998 :   if(error) return error;
; 1999 : 
; 2000 :   for(i = 0; i < numdeflateblocks && !error; i++)
; 2001 :   {
; 2002 :     int final = i == numdeflateblocks - 1;
; 2003 :     size_t start = i * blocksize;
; 2004 :     size_t end = start + blocksize;
; 2005 :     if(end > insize) end = insize;
; 2006 : 
; 2007 :     if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
; 2008 :     else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
; 2009 :   }
; 2010 : 
; 2011 :   hash_cleanup(&hash);
; 2012 : 
; 2013 :   return error;
; 2014 : }
; 2015 : 
; 2016 : unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
; 2017 :                          const unsigned char* in, size_t insize,
; 2018 :                          const LodePNGCompressSettings* settings)
; 2019 : {
; 2020 :   unsigned error;
; 2021 :   ucvector v;
; 2022 :   ucvector_init_buffer(&v, *out, *outsize);
; 2023 :   error = lodepng_deflatev(&v, in, insize, settings);
; 2024 :   *out = v.data;
; 2025 :   *outsize = v.size;
; 2026 :   return error;
; 2027 : }
; 2028 : 
; 2029 : static unsigned deflate(unsigned char** out, size_t* outsize,
; 2030 :                         const unsigned char* in, size_t insize,
; 2031 :                         const LodePNGCompressSettings* settings)
; 2032 : {
; 2033 :   if(settings->custom_deflate)
; 2034 :   {
; 2035 :     return settings->custom_deflate(out, outsize, in, insize, settings);
; 2036 :   }
; 2037 :   else
; 2038 :   {
; 2039 :     return lodepng_deflate(out, outsize, in, insize, settings);
; 2040 :   }
; 2041 : }
; 2042 : 
; 2043 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2044 : 
; 2045 : /* ////////////////////////////////////////////////////////////////////////// */
; 2046 : /* / Adler32                                                                  */
; 2047 : /* ////////////////////////////////////////////////////////////////////////// */
; 2048 : 
; 2049 : static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
; 2050 : {
; 2051 :    unsigned s1 = adler & 0xffff;
; 2052 :    unsigned s2 = (adler >> 16) & 0xffff;
; 2053 : 
; 2054 :   while(len > 0)
; 2055 :   {
; 2056 :     /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
; 2057 :     unsigned amount = len > 5550 ? 5550 : len;
; 2058 :     len -= amount;
; 2059 :     while(amount > 0)
; 2060 :     {
; 2061 :       s1 += (*data++);
; 2062 :       s2 += s1;
; 2063 :       amount--;
; 2064 :     }
; 2065 :     s1 %= 65521;
; 2066 :     s2 %= 65521;
; 2067 :   }
; 2068 : 
; 2069 :   return (s2 << 16) | s1;
; 2070 : }
; 2071 : 
; 2072 : /*Return the adler32 of the bytes data[0..len-1]*/
; 2073 : static unsigned adler32(const unsigned char* data, unsigned len)
; 2074 : {
; 2075 :   return update_adler32(1L, data, len);
; 2076 : }
; 2077 : 
; 2078 : /* ////////////////////////////////////////////////////////////////////////// */
; 2079 : /* / Zlib                                                                   / */
; 2080 : /* ////////////////////////////////////////////////////////////////////////// */
; 2081 : 
; 2082 : #ifdef LODEPNG_COMPILE_DECODER
; 2083 : 
; 2084 : unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2085 :                                  size_t insize, const LodePNGDecompressSettings* settings)
; 2086 : {
; 2087 :   unsigned error = 0;
; 2088 :   unsigned CM, CINFO, FDICT;
; 2089 : 
; 2090 :   if(insize < 2) return 53; /*error, size of zlib data too small*/
; 2091 :   /*read information from zlib header*/
; 2092 :   if((in[0] * 256 + in[1]) % 31 != 0)
; 2093 :   {
; 2094 :     /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
; 2095 :     return 24;
; 2096 :   }
; 2097 : 
; 2098 :   CM = in[0] & 15;
; 2099 :   CINFO = (in[0] >> 4) & 15;
; 2100 :   /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
; 2101 :   FDICT = (in[1] >> 5) & 1;
; 2102 :   /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/
; 2103 : 
; 2104 :   if(CM != 8 || CINFO > 7)
; 2105 :   {
; 2106 :     /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
; 2107 :     return 25;
; 2108 :   }
; 2109 :   if(FDICT != 0)
; 2110 :   {
; 2111 :     /*error: the specification of PNG says about the zlib stream:
; 2112 :       "The additional flags shall not specify a preset dictionary."*/
; 2113 :     return 26;
; 2114 :   }
; 2115 : 
; 2116 :   error = inflate(out, outsize, in + 2, insize - 2, settings);
; 2117 :   if(error) return error;
; 2118 : 
; 2119 :   if(!settings->ignore_adler32)
; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/
; 2124 :   }
; 2125 : 
; 2126 :   return 0; /*no error*/
; 2127 : }
; 2128 : 
; 2129 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2130 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2131 : {
; 2132 :   if(settings->custom_zlib)

  000a6	8b 55 f4	 mov	 edx, DWORD PTR _zlibsettings$1$[ebp]

; 4427 : 
; 4428 :     length = chunkLength - string2_begin;

  000a9	2b f8		 sub	 edi, eax

; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
; 945  :     (*bp)++;
; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);
; 965  :   generateFixedDistanceTree(tree_d);
; 966  : }
; 967  : 
; 968  : /*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
; 969  : static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
; 970  :                                       const unsigned char* in, size_t* bp, size_t inlength)
; 971  : {
; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;
; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/
; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;
; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;
; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;
; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)
; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
; 1009 :     if(error) break;
; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;
; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;
; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;
; 1020 :     while(i < HLIT + HDIST)
; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
; 1023 :       if(code <= 15) /*a length code*/
; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;
; 1026 :         else bitlen_d[i - HLIT] = code;
; 1027 :         i++;
; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/
; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);
; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];
; 1040 :         else value = bitlen_d[i - HLIT - 1];
; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)
; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
; 1045 :           if(i < HLIT) bitlen_ll[i] = value;
; 1046 :           else bitlen_d[i - HLIT] = value;
; 1047 :           i++;
; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/
; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);
; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)
; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1063 :           else bitlen_d[i - HLIT] = 0;
; 1064 :           i++;
; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/
; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);
; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)
; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1080 :           else bitlen_d[i - HLIT] = 0;
; 1081 :           i++;
; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))
; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;
; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/
; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;
; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 1102 :     if(error) break;
; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
; 1104 : 
; 1105 :     break; /*end of error-while*/
; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;
; 1114 : }
; 1115 : 
; 1116 : /*inflate a block with dynamic of fixed Huffman tree*/
; 1117 : static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
; 1118 :                                     size_t* pos, size_t inlength, unsigned btype)
; 1119 : {
; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;
; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/
; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/
; 1136 :     {
; 1137 :       if((*pos) >= out->size)
; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);
; 1143 :       (*pos)++;
; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);
; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
; 1161 :       if(code_d > 29)
; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;
; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/
; 1170 :         break;
; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);
; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);
; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)
; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)
; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];
; 1193 :         (*pos)++;
; 1194 :         backward++;
; 1195 :         if(backward >= start) backward = start - distance;
; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)
; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;
; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;
; 1215 : }
; 1216 : 
; 1217 : static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
; 1218 : {
; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;
; 1223 :   p = (*bp) / 8; /*byte position*/
; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/
; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;
; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;
; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)
; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];
; 1241 : 
; 1242 :   (*bp) = p * 8;
; 1243 : 
; 1244 :   return error;
; 1245 : }
; 1246 : 
; 1247 : static unsigned lodepng_inflatev(ucvector* out,
; 1248 :                                  const unsigned char* in, size_t insize,
; 1249 :                                  const LodePNGDecompressSettings* settings)
; 1250 : {
; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;
; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/
; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)
; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
; 1264 :     BFINAL = readBitFromStream(&bp, in);
; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);
; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
; 1271 : 
; 1272 :     if(error) return error;
; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/
; 1277 : 
; 1278 :   return error;
; 1279 : }
; 1280 : 
; 1281 : unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
; 1282 :                          const unsigned char* in, size_t insize,
; 1283 :                          const LodePNGDecompressSettings* settings)
; 1284 : {
; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);
; 1289 :   *out = v.data;
; 1290 :   *outsize = v.size;
; 1291 :   return error;
; 1292 : }
; 1293 : 
; 1294 : static unsigned inflate(unsigned char** out, size_t* outsize,
; 1295 :                         const unsigned char* in, size_t insize,
; 1296 :                         const LodePNGDecompressSettings* settings)
; 1297 : {
; 1298 :   if(settings->custom_inflate)
; 1299 :   {
; 1300 :     return settings->custom_inflate(out, outsize, in, insize, settings);
; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }
; 1307 : 
; 1308 : #endif /*LODEPNG_COMPILE_DECODER*/
; 1309 : 
; 1310 : #ifdef LODEPNG_COMPILE_ENCODER
; 1311 : 
; 1312 : /* ////////////////////////////////////////////////////////////////////////// */
; 1313 : /* / Deflator (Compressor)                                                  / */
; 1314 : /* ////////////////////////////////////////////////////////////////////////// */
; 1315 : 
; 1316 : static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;
; 1317 : 
; 1318 : /*bitlen is the size in bits of the code*/
; 1319 : static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)
; 1320 : {
; 1321 :   addBitsToStreamReversed(bp, compressed, code, bitlen);
; 1322 : }
; 1323 : 
; 1324 : /*search the index in the array, that has the largest value smaller than or equal to the given value,
; 1325 : given array must be sorted (if no value is smaller, it returns the size of the given array)*/
; 1326 : static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)
; 1327 : {
; 1328 :   /*linear search implementation*/
; 1329 :   /*for(size_t i = 1; i < array_size; i++) if(array[i] > value) return i - 1;
; 1330 :   return array_size - 1;*/
; 1331 : 
; 1332 :   /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
; 1333 :   size_t left  = 1;
; 1334 :   size_t right = array_size - 1;
; 1335 :   while(left <= right)
; 1336 :   {
; 1337 :     size_t mid = (left + right) / 2;
; 1338 :     if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
; 1339 :     else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
; 1340 :     else return mid - 1;
; 1341 :   }
; 1342 :   return array_size - 1;
; 1343 : }
; 1344 : 
; 1345 : static void addLengthDistance(uivector* values, size_t length, size_t distance)
; 1346 : {
; 1347 :   /*values in encoded vector are those used by deflate:
; 1348 :   0-255: literal bytes
; 1349 :   256: end
; 1350 :   257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
; 1351 :   286-287: invalid*/
; 1352 : 
; 1353 :   unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
; 1354 :   unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
; 1355 :   unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
; 1356 :   unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);
; 1357 : 
; 1358 :   uivector_push_back(values, length_code + FIRST_LENGTH_CODE_INDEX);
; 1359 :   uivector_push_back(values, extra_length);
; 1360 :   uivector_push_back(values, dist_code);
; 1361 :   uivector_push_back(values, extra_distance);
; 1362 : }
; 1363 : 
; 1364 : static const unsigned HASH_NUM_VALUES = 65536;
; 1365 : static const unsigned HASH_NUM_CHARACTERS = 3;
; 1366 : static const unsigned HASH_SHIFT = 2;
; 1367 : /*
; 1368 : The HASH_NUM_CHARACTERS value is used to make encoding faster by using longer
; 1369 : sequences to generate a hash value from the stream bytes. Setting it to 3
; 1370 : gives exactly the same compression as the brute force method, since deflate's
; 1371 : run length encoding starts with lengths of 3. Setting it to higher values,
; 1372 : like 6, can make the encoding faster (not always though!), but will cause the
; 1373 : encoding to miss any length between 3 and this value, so that the compression
; 1374 : may be worse (but this can vary too depending on the image, sometimes it is
; 1375 : even a bit better instead).
; 1376 : The HASH_NUM_VALUES is the amount of unique possible hash values that
; 1377 : combinations of bytes can give, the higher it is the more memory is needed, but
; 1378 : if it's too low the advantage of hashing is gone.
; 1379 : */
; 1380 : 
; 1381 : typedef struct Hash
; 1382 : {
; 1383 :   int* head; /*hash value to head circular pos*/
; 1384 :   int* val; /*circular pos to hash value*/
; 1385 :   /*circular pos to prev circular pos*/
; 1386 :   unsigned short* chain;
; 1387 :   unsigned short* zeros;
; 1388 : } Hash;
; 1389 : 
; 1390 : static unsigned hash_init(Hash* hash, unsigned windowsize)
; 1391 : {
; 1392 :   unsigned i;
; 1393 :   hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
; 1394 :   hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
; 1395 :   hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1396 :   hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1397 : 
; 1398 :   if(!hash->head || !hash->val || !hash->chain || !hash->zeros) return 83; /*alloc fail*/
; 1399 : 
; 1400 :   /*initialize hash table*/
; 1401 :   for(i = 0; i < HASH_NUM_VALUES; i++) hash->head[i] = -1;
; 1402 :   for(i = 0; i < windowsize; i++) hash->val[i] = -1;
; 1403 :   for(i = 0; i < windowsize; i++) hash->chain[i] = i; /*same value as index indicates uninitialized*/
; 1404 : 
; 1405 :   return 0;
; 1406 : }
; 1407 : 
; 1408 : static void hash_cleanup(Hash* hash)
; 1409 : {
; 1410 :   lodepng_free(hash->head);
; 1411 :   lodepng_free(hash->val);
; 1412 :   lodepng_free(hash->chain);
; 1413 :   lodepng_free(hash->zeros);
; 1414 : }
; 1415 : 
; 1416 : static unsigned getHash(const unsigned char* data, size_t size, size_t pos)
; 1417 : {
; 1418 :   unsigned result = 0;
; 1419 :   size_t amount, i;
; 1420 :   if(pos >= size) return 0;
; 1421 :   amount = HASH_NUM_CHARACTERS;
; 1422 :   if(pos + amount >= size) amount = size - pos;
; 1423 :   for(i = 0; i < amount; i++) result ^= (data[pos + i] << (i * HASH_SHIFT));
; 1424 :   return result % HASH_NUM_VALUES;
; 1425 : }
; 1426 : 
; 1427 : static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)
; 1428 : {
; 1429 :   const unsigned char* start = data + pos;
; 1430 :   const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
; 1431 :   if(end > data + size) end = data + size;
; 1432 :   data = start;
; 1433 :   while (data != end && *data == 0) data++;
; 1434 :   /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
; 1435 :   return (unsigned)(data - start);
; 1436 : }
; 1437 : 
; 1438 : static void updateHashChain(Hash* hash, size_t pos, int hashval, unsigned windowsize)
; 1439 : {
; 1440 :   unsigned wpos = pos % windowsize;
; 1441 :   hash->val[wpos] = hashval;
; 1442 :   if(hash->head[hashval] != -1) hash->chain[wpos] = hash->head[hashval];
; 1443 :   hash->head[hashval] = wpos;
; 1444 : }
; 1445 : 
; 1446 : /*
; 1447 : LZ77-encode the data. Return value is error code. The input are raw bytes, the output
; 1448 : is in the form of unsigned integers with codes representing for example literal bytes, or
; 1449 : length/distance pairs.
; 1450 : It uses a hash table technique to let it encode faster. When doing LZ77 encoding, a
; 1451 : sliding window (of windowsize) is used, and all past bytes in that window can be used as
; 1452 : the "dictionary". A brute force search through all possible distances would be slow, and
; 1453 : this hash technique is one out of several ways to speed this up.
; 1454 : */
; 1455 : static unsigned encodeLZ77(uivector* out, Hash* hash,
; 1456 :                            const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
; 1457 :                            unsigned minmatch, unsigned nicematch, unsigned lazymatching)
; 1458 : {
; 1459 :   unsigned short numzeros = 0;
; 1460 :   int usezeros = windowsize >= 8192; /*for small window size, the 'max chain length' optimization does a better job*/
; 1461 :   unsigned pos, i, error = 0;
; 1462 :   /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
; 1463 :   unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8;
; 1464 :   unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;
; 1465 : 
; 1466 :   if(!error)
; 1467 :   {
; 1468 :     unsigned offset; /*the offset represents the distance in LZ77 terminology*/
; 1469 :     unsigned length;
; 1470 :     unsigned lazy = 0;
; 1471 :     unsigned lazylength = 0, lazyoffset = 0;
; 1472 :     unsigned hashval;
; 1473 :     unsigned current_offset, current_length;
; 1474 :     const unsigned char *lastptr, *foreptr, *backptr;
; 1475 :     unsigned short hashpos, prevpos;
; 1476 : 
; 1477 :     for(pos = inpos; pos < insize; pos++)
; 1478 :     {
; 1479 :       size_t wpos = pos % windowsize; /*position for in 'circular' hash buffers*/
; 1480 : 
; 1481 :       hashval = getHash(in, insize, pos);
; 1482 :       updateHashChain(hash, pos, hashval, windowsize);
; 1483 : 
; 1484 :       if(usezeros && hashval == 0)
; 1485 :       {
; 1486 :         numzeros = countZeros(in, insize, pos);
; 1487 :         hash->zeros[wpos] = numzeros;
; 1488 :       }
; 1489 : 
; 1490 :       /*the length and offset found for the current position*/
; 1491 :       length = 0;
; 1492 :       offset = 0;
; 1493 : 
; 1494 :       prevpos = hash->head[hashval];
; 1495 :       hashpos = hash->chain[prevpos];
; 1496 : 
; 1497 :       lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];
; 1498 : 
; 1499 :       /*search for the longest string*/
; 1500 :       if(hash->val[wpos] == (int)hashval)
; 1501 :       {
; 1502 :         unsigned chainlength = 0;
; 1503 :         for(;;)
; 1504 :         {
; 1505 :           /*stop when went completely around the circular buffer*/
; 1506 :           if(prevpos < wpos && hashpos > prevpos && hashpos <= wpos) break;
; 1507 :           if(prevpos > wpos && (hashpos <= wpos || hashpos > prevpos)) break;
; 1508 :           if(chainlength++ >= maxchainlength) break;
; 1509 : 
; 1510 :           current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;
; 1511 :           if(current_offset > 0)
; 1512 :           {
; 1513 :             /*test the next characters*/
; 1514 :             foreptr = &in[pos];
; 1515 :             backptr = &in[pos - current_offset];
; 1516 : 
; 1517 :             /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
; 1518 :             if(usezeros && hashval == 0 && hash->val[hashpos] == 0 /*hashval[hashpos] may be out of date*/)
; 1519 :             {
; 1520 :               unsigned short skip = hash->zeros[hashpos];
; 1521 :               if(skip > numzeros) skip = numzeros;
; 1522 :               backptr += skip;
; 1523 :               foreptr += skip;
; 1524 :             }
; 1525 : 
; 1526 :             /* multiple checks at once per array bounds check */
; 1527 :             while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
; 1528 :             {
; 1529 :               ++backptr;
; 1530 :               ++foreptr;
; 1531 :             }
; 1532 :             current_length = (unsigned)(foreptr - &in[pos]);
; 1533 : 
; 1534 :             if(current_length > length)
; 1535 :             {
; 1536 :               length = current_length; /*the longest length*/
; 1537 :               offset = current_offset; /*the offset that is related to this longest length*/
; 1538 :               /*jump out once a length of max length is found (speed gain)*/
; 1539 :               if(current_length >= nicematch || current_length == MAX_SUPPORTED_DEFLATE_LENGTH) break;
; 1540 :             }
; 1541 :           }
; 1542 : 
; 1543 :           if(hashpos == hash->chain[hashpos]) break;
; 1544 : 
; 1545 :           prevpos = hashpos;
; 1546 :           hashpos = hash->chain[hashpos];
; 1547 :         }
; 1548 :       }
; 1549 : 
; 1550 :       if(lazymatching)
; 1551 :       {
; 1552 :         if(!lazy && length >= 3 && length <= maxlazymatch && length < MAX_SUPPORTED_DEFLATE_LENGTH)
; 1553 :         {
; 1554 :           lazy = 1;
; 1555 :           lazylength = length;
; 1556 :           lazyoffset = offset;
; 1557 :           continue; /*try the next byte*/
; 1558 :         }
; 1559 :         if(lazy)
; 1560 :         {
; 1561 :           lazy = 0;
; 1562 :           if(pos == 0) ERROR_BREAK(81);
; 1563 :           if(length > lazylength + 1)
; 1564 :           {
; 1565 :             /*push the previous character as literal*/
; 1566 :             if(!uivector_push_back(out, in[pos - 1])) ERROR_BREAK(83 /*alloc fail*/);
; 1567 :           }
; 1568 :           else
; 1569 :           {
; 1570 :             length = lazylength;
; 1571 :             offset = lazyoffset;
; 1572 :             hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
; 1573 :             pos--;
; 1574 :           }
; 1575 :         }
; 1576 :       }
; 1577 :       if(length >= 3 && offset > windowsize) ERROR_BREAK(86 /*too big (or overflown negative) offset*/);
; 1578 : 
; 1579 :       /**encode it as length/distance pair or literal value**/
; 1580 :       if(length < 3) /*only lengths of 3 or higher are supported as length/distance pair*/
; 1581 :       {
; 1582 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1583 :       }
; 1584 :       else if(length < minmatch || (length == 3 && offset > 4096))
; 1585 :       {
; 1586 :         /*compensate for the fact that longer offsets have more extra bits, a
; 1587 :         length of only 3 may be not worth it then*/
; 1588 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1589 :       }
; 1590 :       else
; 1591 :       {
; 1592 :         addLengthDistance(out, length, offset);
; 1593 :         for(i = 1; i < length; i++)
; 1594 :         {
; 1595 :           pos++;
; 1596 :           hashval = getHash(in, insize, pos);
; 1597 :           updateHashChain(hash, pos, hashval, windowsize);
; 1598 :           if(usezeros && hashval == 0)
; 1599 :           {
; 1600 :             hash->zeros[pos % windowsize] = countZeros(in, insize, pos);
; 1601 :           }
; 1602 :         }
; 1603 :       }
; 1604 : 
; 1605 :     } /*end of the loop through each character of input*/
; 1606 :   } /*end of "if(!error)"*/
; 1607 : 
; 1608 :   return error;
; 1609 : }
; 1610 : 
; 1611 : /* /////////////////////////////////////////////////////////////////////////// */
; 1612 : 
; 1613 : static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)
; 1614 : {
; 1615 :   /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
; 1616 :   2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/
; 1617 : 
; 1618 :   size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
; 1619 :   unsigned datapos = 0;
; 1620 :   for(i = 0; i < numdeflateblocks; i++)
; 1621 :   {
; 1622 :     unsigned BFINAL, BTYPE, LEN, NLEN;
; 1623 :     unsigned char firstbyte;
; 1624 : 
; 1625 :     BFINAL = (i == numdeflateblocks - 1);
; 1626 :     BTYPE = 0;
; 1627 : 
; 1628 :     firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1) << 1) + ((BTYPE & 2) << 1));
; 1629 :     ucvector_push_back(out, firstbyte);
; 1630 : 
; 1631 :     LEN = 65535;
; 1632 :     if(datasize - datapos < 65535) LEN = (unsigned)datasize - datapos;
; 1633 :     NLEN = 65535 - LEN;
; 1634 : 
; 1635 :     ucvector_push_back(out, (unsigned char)(LEN % 256));
; 1636 :     ucvector_push_back(out, (unsigned char)(LEN / 256));
; 1637 :     ucvector_push_back(out, (unsigned char)(NLEN % 256));
; 1638 :     ucvector_push_back(out, (unsigned char)(NLEN / 256));
; 1639 : 
; 1640 :     /*Decompressed data*/
; 1641 :     for(j = 0; j < 65535 && datapos < datasize; j++)
; 1642 :     {
; 1643 :       ucvector_push_back(out, data[datapos++]);
; 1644 :     }
; 1645 :   }
; 1646 : 
; 1647 :   return 0;
; 1648 : }
; 1649 : 
; 1650 : /*
; 1651 : write the lz77-encoded data, which has lit, len and dist codes, to compressed stream using huffman trees.
; 1652 : tree_ll: the tree for lit and len codes.
; 1653 : tree_d: the tree for distance codes.
; 1654 : */
; 1655 : static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
; 1656 :                           const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
; 1657 : {
; 1658 :   size_t i = 0;
; 1659 :   for(i = 0; i < lz77_encoded->size; i++)
; 1660 :   {
; 1661 :     unsigned val = lz77_encoded->data[i];
; 1662 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_ll, val), HuffmanTree_getLength(tree_ll, val));
; 1663 :     if(val > 256) /*for a length code, 3 more things have to be added*/
; 1664 :     {
; 1665 :       unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
; 1666 :       unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
; 1667 :       unsigned length_extra_bits = lz77_encoded->data[++i];
; 1668 : 
; 1669 :       unsigned distance_code = lz77_encoded->data[++i];
; 1670 : 
; 1671 :       unsigned distance_index = distance_code;
; 1672 :       unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
; 1673 :       unsigned distance_extra_bits = lz77_encoded->data[++i];
; 1674 : 
; 1675 :       addBitsToStream(bp, out, length_extra_bits, n_length_extra_bits);
; 1676 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
; 1677 :                        HuffmanTree_getLength(tree_d, distance_code));
; 1678 :       addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
; 1679 :     }
; 1680 :   }
; 1681 : }
; 1682 : 
; 1683 : /*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
; 1684 : static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,
; 1685 :                                const unsigned char* data, size_t datapos, size_t dataend,
; 1686 :                                const LodePNGCompressSettings* settings, int final)
; 1687 : {
; 1688 :   unsigned error = 0;
; 1689 : 
; 1690 :   /*
; 1691 :   A block is compressed as follows: The PNG data is lz77 encoded, resulting in
; 1692 :   literal bytes and length/distance pairs. This is then huffman compressed with
; 1693 :   two huffman trees. One huffman tree is used for the lit and len values ("ll"),
; 1694 :   another huffman tree is used for the dist values ("d"). These two trees are
; 1695 :   stored using their code lengths, and to compress even more these code lengths
; 1696 :   are also run-length encoded and huffman compressed. This gives a huffman tree
; 1697 :   of code lengths "cl". The code lenghts used to describe this third tree are
; 1698 :   the code length code lengths ("clcl").
; 1699 :   */
; 1700 : 
; 1701 :   /*The lz77 encoded data, represented with integers since there will also be length and distance codes in it*/
; 1702 :   uivector lz77_encoded;
; 1703 :   HuffmanTree tree_ll; /*tree for lit,len values*/
; 1704 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1705 :   HuffmanTree tree_cl; /*tree for encoding the code lengths representing tree_ll and tree_d*/
; 1706 :   uivector frequencies_ll; /*frequency of lit,len codes*/
; 1707 :   uivector frequencies_d; /*frequency of dist codes*/
; 1708 :   uivector frequencies_cl; /*frequency of code length codes*/
; 1709 :   uivector bitlen_lld; /*lit,len,dist code lenghts (int bits), literally (without repeat codes).*/
; 1710 :   uivector bitlen_lld_e; /*bitlen_lld encoded with repeat codes (this is a rudemtary run length compression)*/
; 1711 :   /*bitlen_cl is the code length code lengths ("clcl"). The bit lengths of codes to represent tree_cl
; 1712 :   (these are written as is in the file, it would be crazy to compress these using yet another huffman
; 1713 :   tree that needs to be represented by yet another set of code lengths)*/
; 1714 :   uivector bitlen_cl;
; 1715 :   size_t datasize = dataend - datapos;
; 1716 : 
; 1717 :   /*
; 1718 :   Due to the huffman compression of huffman tree representations ("two levels"), there are some anologies:
; 1719 :   bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
; 1720 :   bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
; 1721 :   bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
; 1722 :   */
; 1723 : 
; 1724 :   unsigned BFINAL = final;
; 1725 :   size_t numcodes_ll, numcodes_d, i;
; 1726 :   unsigned HLIT, HDIST, HCLEN;
; 1727 : 
; 1728 :   uivector_init(&lz77_encoded);
; 1729 :   HuffmanTree_init(&tree_ll);
; 1730 :   HuffmanTree_init(&tree_d);
; 1731 :   HuffmanTree_init(&tree_cl);
; 1732 :   uivector_init(&frequencies_ll);
; 1733 :   uivector_init(&frequencies_d);
; 1734 :   uivector_init(&frequencies_cl);
; 1735 :   uivector_init(&bitlen_lld);
; 1736 :   uivector_init(&bitlen_lld_e);
; 1737 :   uivector_init(&bitlen_cl);
; 1738 : 
; 1739 :   /*This while loop never loops due to a break at the end, it is here to
; 1740 :   allow breaking out of it to the cleanup phase on error conditions.*/
; 1741 :   while(!error)
; 1742 :   {
; 1743 :     if(settings->use_lz77)
; 1744 :     {
; 1745 :       error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1746 :                          settings->minmatch, settings->nicematch, settings->lazymatching);
; 1747 :       if(error) break;
; 1748 :     }
; 1749 :     else
; 1750 :     {
; 1751 :       if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83 /*alloc fail*/);
; 1752 :       for(i = datapos; i < dataend; i++) lz77_encoded.data[i] = data[i]; /*no LZ77, but still will be Huffman compressed*/
; 1753 :     }
; 1754 : 
; 1755 :     if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1756 :     if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1757 : 
; 1758 :     /*Count the frequencies of lit, len and dist codes*/
; 1759 :     for(i = 0; i < lz77_encoded.size; i++)
; 1760 :     {
; 1761 :       unsigned symbol = lz77_encoded.data[i];
; 1762 :       frequencies_ll.data[symbol]++;
; 1763 :       if(symbol > 256)
; 1764 :       {
; 1765 :         unsigned dist = lz77_encoded.data[i + 2];
; 1766 :         frequencies_d.data[dist]++;
; 1767 :         i += 3;
; 1768 :       }
; 1769 :     }
; 1770 :     frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/
; 1771 : 
; 1772 :     /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
; 1773 :     error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
; 1774 :     if(error) break;
; 1775 :     /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
; 1776 :     error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
; 1777 :     if(error) break;
; 1778 : 
; 1779 :     numcodes_ll = tree_ll.numcodes; if(numcodes_ll > 286) numcodes_ll = 286;
; 1780 :     numcodes_d = tree_d.numcodes; if(numcodes_d > 30) numcodes_d = 30;
; 1781 :     /*store the code lengths of both generated trees in bitlen_lld*/
; 1782 :     for(i = 0; i < numcodes_ll; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
; 1783 :     for(i = 0; i < numcodes_d; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));
; 1784 : 
; 1785 :     /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
; 1786 :     17 (3-10 zeroes), 18 (11-138 zeroes)*/
; 1787 :     for(i = 0; i < (unsigned)bitlen_lld.size; i++)
; 1788 :     {
; 1789 :       unsigned j = 0; /*amount of repititions*/
; 1790 :       while(i + j + 1 < (unsigned)bitlen_lld.size && bitlen_lld.data[i + j + 1] == bitlen_lld.data[i]) j++;
; 1791 : 
; 1792 :       if(bitlen_lld.data[i] == 0 && j >= 2) /*repeat code for zeroes*/
; 1793 :       {
; 1794 :         j++; /*include the first zero*/
; 1795 :         if(j <= 10) /*repeat code 17 supports max 10 zeroes*/
; 1796 :         {
; 1797 :           uivector_push_back(&bitlen_lld_e, 17);
; 1798 :           uivector_push_back(&bitlen_lld_e, j - 3);
; 1799 :         }
; 1800 :         else /*repeat code 18 supports max 138 zeroes*/
; 1801 :         {
; 1802 :           if(j > 138) j = 138;
; 1803 :           uivector_push_back(&bitlen_lld_e, 18);
; 1804 :           uivector_push_back(&bitlen_lld_e, j - 11);
; 1805 :         }
; 1806 :         i += (j - 1);
; 1807 :       }
; 1808 :       else if(j >= 3) /*repeat code for value other than zero*/
; 1809 :       {
; 1810 :         size_t k;
; 1811 :         unsigned num = j / 6, rest = j % 6;
; 1812 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1813 :         for(k = 0; k < num; k++)
; 1814 :         {
; 1815 :           uivector_push_back(&bitlen_lld_e, 16);
; 1816 :           uivector_push_back(&bitlen_lld_e, 6 - 3);
; 1817 :         }
; 1818 :         if(rest >= 3)
; 1819 :         {
; 1820 :           uivector_push_back(&bitlen_lld_e, 16);
; 1821 :           uivector_push_back(&bitlen_lld_e, rest - 3);
; 1822 :         }
; 1823 :         else j -= rest;
; 1824 :         i += j;
; 1825 :       }
; 1826 :       else /*too short to benefit from repeat code*/
; 1827 :       {
; 1828 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1829 :       }
; 1830 :     }
; 1831 : 
; 1832 :     /*generate tree_cl, the huffmantree of huffmantrees*/
; 1833 : 
; 1834 :     if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1835 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1836 :     {
; 1837 :       frequencies_cl.data[bitlen_lld_e.data[i]]++;
; 1838 :       /*after a repeat code come the bits that specify the number of repetitions,
; 1839 :       those don't need to be in the frequencies_cl calculation*/
; 1840 :       if(bitlen_lld_e.data[i] >= 16) i++;
; 1841 :     }
; 1842 : 
; 1843 :     error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
; 1844 :                                             frequencies_cl.size, frequencies_cl.size, 7);
; 1845 :     if(error) break;
; 1846 : 
; 1847 :     if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
; 1848 :     for(i = 0; i < tree_cl.numcodes; i++)
; 1849 :     {
; 1850 :       /*lenghts of code length tree is in the order as specified by deflate*/
; 1851 :       bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
; 1852 :     }
; 1853 :     while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
; 1854 :     {
; 1855 :       /*remove zeros at the end, but minimum size must be 4*/
; 1856 :       if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
; 1857 :     }
; 1858 :     if(error) break;
; 1859 : 
; 1860 :     /*
; 1861 :     Write everything into the output
; 1862 : 
; 1863 :     After the BFINAL and BTYPE, the dynamic block consists out of the following:
; 1864 :     - 5 bits HLIT, 5 bits HDIST, 4 bits HCLEN
; 1865 :     - (HCLEN+4)*3 bits code lengths of code length alphabet
; 1866 :     - HLIT + 257 code lenghts of lit/length alphabet (encoded using the code length
; 1867 :       alphabet, + possible repetition codes 16, 17, 18)
; 1868 :     - HDIST + 1 code lengths of distance alphabet (encoded using the code length
; 1869 :       alphabet, + possible repetition codes 16, 17, 18)
; 1870 :     - compressed data
; 1871 :     - 256 (end code)
; 1872 :     */
; 1873 : 
; 1874 :     /*Write block type*/
; 1875 :     addBitToStream(bp, out, BFINAL);
; 1876 :     addBitToStream(bp, out, 0); /*first bit of BTYPE "dynamic"*/
; 1877 :     addBitToStream(bp, out, 1); /*second bit of BTYPE "dynamic"*/
; 1878 : 
; 1879 :     /*write the HLIT, HDIST and HCLEN values*/
; 1880 :     HLIT = (unsigned)(numcodes_ll - 257);
; 1881 :     HDIST = (unsigned)(numcodes_d - 1);
; 1882 :     HCLEN = (unsigned)bitlen_cl.size - 4;
; 1883 :     /*trim zeroes for HCLEN. HLIT and HDIST were already trimmed at tree creation*/
; 1884 :     while(!bitlen_cl.data[HCLEN + 4 - 1] && HCLEN > 0) HCLEN--;
; 1885 :     addBitsToStream(bp, out, HLIT, 5);
; 1886 :     addBitsToStream(bp, out, HDIST, 5);
; 1887 :     addBitsToStream(bp, out, HCLEN, 4);
; 1888 : 
; 1889 :     /*write the code lenghts of the code length alphabet*/
; 1890 :     for(i = 0; i < HCLEN + 4; i++) addBitsToStream(bp, out, bitlen_cl.data[i], 3);
; 1891 : 
; 1892 :     /*write the lenghts of the lit/len AND the dist alphabet*/
; 1893 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1894 :     {
; 1895 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
; 1896 :                        HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
; 1897 :       /*extra bits of repeat codes*/
; 1898 :       if(bitlen_lld_e.data[i] == 16) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 2);
; 1899 :       else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
; 1900 :       else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
; 1901 :     }
; 1902 : 
; 1903 :     /*write the compressed data symbols*/
; 1904 :     writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1905 :     /*error: the length of the end code 256 must be larger than 0*/
; 1906 :     if(HuffmanTree_getLength(&tree_ll, 256) == 0) ERROR_BREAK(64);
; 1907 : 
; 1908 :     /*write the end code*/
; 1909 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1910 : 
; 1911 :     break; /*end of error-while*/
; 1912 :   }
; 1913 : 
; 1914 :   /*cleanup*/
; 1915 :   uivector_cleanup(&lz77_encoded);
; 1916 :   HuffmanTree_cleanup(&tree_ll);
; 1917 :   HuffmanTree_cleanup(&tree_d);
; 1918 :   HuffmanTree_cleanup(&tree_cl);
; 1919 :   uivector_cleanup(&frequencies_ll);
; 1920 :   uivector_cleanup(&frequencies_d);
; 1921 :   uivector_cleanup(&frequencies_cl);
; 1922 :   uivector_cleanup(&bitlen_lld_e);
; 1923 :   uivector_cleanup(&bitlen_lld);
; 1924 :   uivector_cleanup(&bitlen_cl);
; 1925 : 
; 1926 :   return error;
; 1927 : }
; 1928 : 
; 1929 : static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,
; 1930 :                              const unsigned char* data,
; 1931 :                              size_t datapos, size_t dataend,
; 1932 :                              const LodePNGCompressSettings* settings, int final)
; 1933 : {
; 1934 :   HuffmanTree tree_ll; /*tree for literal values and length codes*/
; 1935 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1936 : 
; 1937 :   unsigned BFINAL = final;
; 1938 :   unsigned error = 0;
; 1939 :   size_t i;
; 1940 : 
; 1941 :   HuffmanTree_init(&tree_ll);
; 1942 :   HuffmanTree_init(&tree_d);
; 1943 : 
; 1944 :   generateFixedLitLenTree(&tree_ll);
; 1945 :   generateFixedDistanceTree(&tree_d);
; 1946 : 
; 1947 :   addBitToStream(bp, out, BFINAL);
; 1948 :   addBitToStream(bp, out, 1); /*first bit of BTYPE*/
; 1949 :   addBitToStream(bp, out, 0); /*second bit of BTYPE*/
; 1950 : 
; 1951 :   if(settings->use_lz77) /*LZ77 encoded*/
; 1952 :   {
; 1953 :     uivector lz77_encoded;
; 1954 :     uivector_init(&lz77_encoded);
; 1955 :     error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1956 :                        settings->minmatch, settings->nicematch, settings->lazymatching);
; 1957 :     if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1958 :     uivector_cleanup(&lz77_encoded);
; 1959 :   }
; 1960 :   else /*no LZ77, but still will be Huffman compressed*/
; 1961 :   {
; 1962 :     for(i = datapos; i < dataend; i++)
; 1963 :     {
; 1964 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
; 1965 :     }
; 1966 :   }
; 1967 :   /*add END code*/
; 1968 :   if(!error) addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1969 : 
; 1970 :   /*cleanup*/
; 1971 :   HuffmanTree_cleanup(&tree_ll);
; 1972 :   HuffmanTree_cleanup(&tree_d);
; 1973 : 
; 1974 :   return error;
; 1975 : }
; 1976 : 
; 1977 : static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
; 1978 :                                  const LodePNGCompressSettings* settings)
; 1979 : {
; 1980 :   unsigned error = 0;
; 1981 :   size_t i, blocksize, numdeflateblocks;
; 1982 :   size_t bp = 0; /*the bit pointer*/
; 1983 :   Hash hash;
; 1984 : 
; 1985 :   if(settings->btype > 2) return 61;
; 1986 :   else if(settings->btype == 0) return deflateNoCompression(out, in, insize);
; 1987 :   else if(settings->btype == 1) blocksize = insize;
; 1988 :   else /*if(settings->btype == 2)*/
; 1989 :   {
; 1990 :     blocksize = insize / 8 + 8;
; 1991 :     if(blocksize < 65535) blocksize = 65535;
; 1992 :   }
; 1993 : 
; 1994 :   numdeflateblocks = (insize + blocksize - 1) / blocksize;
; 1995 :   if(numdeflateblocks == 0) numdeflateblocks = 1;
; 1996 : 
; 1997 :   error = hash_init(&hash, settings->windowsize);
; 1998 :   if(error) return error;
; 1999 : 
; 2000 :   for(i = 0; i < numdeflateblocks && !error; i++)
; 2001 :   {
; 2002 :     int final = i == numdeflateblocks - 1;
; 2003 :     size_t start = i * blocksize;
; 2004 :     size_t end = start + blocksize;
; 2005 :     if(end > insize) end = insize;
; 2006 : 
; 2007 :     if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
; 2008 :     else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
; 2009 :   }
; 2010 : 
; 2011 :   hash_cleanup(&hash);
; 2012 : 
; 2013 :   return error;
; 2014 : }
; 2015 : 
; 2016 : unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
; 2017 :                          const unsigned char* in, size_t insize,
; 2018 :                          const LodePNGCompressSettings* settings)
; 2019 : {
; 2020 :   unsigned error;
; 2021 :   ucvector v;
; 2022 :   ucvector_init_buffer(&v, *out, *outsize);
; 2023 :   error = lodepng_deflatev(&v, in, insize, settings);
; 2024 :   *out = v.data;
; 2025 :   *outsize = v.size;
; 2026 :   return error;
; 2027 : }
; 2028 : 
; 2029 : static unsigned deflate(unsigned char** out, size_t* outsize,
; 2030 :                         const unsigned char* in, size_t insize,
; 2031 :                         const LodePNGCompressSettings* settings)
; 2032 : {
; 2033 :   if(settings->custom_deflate)
; 2034 :   {
; 2035 :     return settings->custom_deflate(out, outsize, in, insize, settings);
; 2036 :   }
; 2037 :   else
; 2038 :   {
; 2039 :     return lodepng_deflate(out, outsize, in, insize, settings);
; 2040 :   }
; 2041 : }
; 2042 : 
; 2043 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2044 : 
; 2045 : /* ////////////////////////////////////////////////////////////////////////// */
; 2046 : /* / Adler32                                                                  */
; 2047 : /* ////////////////////////////////////////////////////////////////////////// */
; 2048 : 
; 2049 : static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
; 2050 : {
; 2051 :    unsigned s1 = adler & 0xffff;
; 2052 :    unsigned s2 = (adler >> 16) & 0xffff;
; 2053 : 
; 2054 :   while(len > 0)
; 2055 :   {
; 2056 :     /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
; 2057 :     unsigned amount = len > 5550 ? 5550 : len;
; 2058 :     len -= amount;
; 2059 :     while(amount > 0)
; 2060 :     {
; 2061 :       s1 += (*data++);
; 2062 :       s2 += s1;
; 2063 :       amount--;
; 2064 :     }
; 2065 :     s1 %= 65521;
; 2066 :     s2 %= 65521;
; 2067 :   }
; 2068 : 
; 2069 :   return (s2 << 16) | s1;
; 2070 : }
; 2071 : 
; 2072 : /*Return the adler32 of the bytes data[0..len-1]*/
; 2073 : static unsigned adler32(const unsigned char* data, unsigned len)
; 2074 : {
; 2075 :   return update_adler32(1L, data, len);
; 2076 : }
; 2077 : 
; 2078 : /* ////////////////////////////////////////////////////////////////////////// */
; 2079 : /* / Zlib                                                                   / */
; 2080 : /* ////////////////////////////////////////////////////////////////////////// */
; 2081 : 
; 2082 : #ifdef LODEPNG_COMPILE_DECODER
; 2083 : 
; 2084 : unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2085 :                                  size_t insize, const LodePNGDecompressSettings* settings)
; 2086 : {
; 2087 :   unsigned error = 0;
; 2088 :   unsigned CM, CINFO, FDICT;
; 2089 : 
; 2090 :   if(insize < 2) return 53; /*error, size of zlib data too small*/
; 2091 :   /*read information from zlib header*/
; 2092 :   if((in[0] * 256 + in[1]) % 31 != 0)
; 2093 :   {
; 2094 :     /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
; 2095 :     return 24;
; 2096 :   }
; 2097 : 
; 2098 :   CM = in[0] & 15;
; 2099 :   CINFO = (in[0] >> 4) & 15;
; 2100 :   /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
; 2101 :   FDICT = (in[1] >> 5) & 1;
; 2102 :   /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/
; 2103 : 
; 2104 :   if(CM != 8 || CINFO > 7)
; 2105 :   {
; 2106 :     /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
; 2107 :     return 25;
; 2108 :   }
; 2109 :   if(FDICT != 0)
; 2110 :   {
; 2111 :     /*error: the specification of PNG says about the zlib stream:
; 2112 :       "The additional flags shall not specify a preset dictionary."*/
; 2113 :     return 26;
; 2114 :   }
; 2115 : 
; 2116 :   error = inflate(out, outsize, in + 2, insize - 2, settings);
; 2117 :   if(error) return error;
; 2118 : 
; 2119 :   if(!settings->ignore_adler32)
; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/
; 2124 :   }
; 2125 : 
; 2126 :   return 0; /*no error*/
; 2127 : }
; 2128 : 
; 2129 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2130 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2131 : {
; 2132 :   if(settings->custom_zlib)

  000ab	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);

  000ae	52		 push	 edx

; 4429 :     /*will fail if zlib error, e.g. if length is too small*/
; 4430 :     error = zlib_decompress(&decoded.data, &decoded.size,
; 4431 :                             (unsigned char*)(&data[string2_begin]),
; 4432 :                             length, zlibsettings);

  000af	03 c3		 add	 eax, ebx

; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);

  000b1	57		 push	 edi
  000b2	50		 push	 eax
  000b3	85 c9		 test	 ecx, ecx
  000b5	74 0f		 je	 SHORT $LN23@readChunk_
  000b7	8d 45 e8	 lea	 eax, DWORD PTR _decoded$[ebp+4]
  000ba	50		 push	 eax
  000bb	8d 45 e4	 lea	 eax, DWORD PTR _decoded$[ebp]
  000be	50		 push	 eax
  000bf	ff d1		 call	 ecx
  000c1	83 c4 14	 add	 esp, 20			; 00000014H
  000c4	eb 0e		 jmp	 SHORT $LN42@readChunk_
$LN23@readChunk_:

; 2134 :   else
; 2135 :     return lodepng_zlib_decompress(out, outsize, in, insize, settings);

  000c6	8d 55 e8	 lea	 edx, DWORD PTR _decoded$[ebp+4]
  000c9	8d 4d e4	 lea	 ecx, DWORD PTR _decoded$[ebp]
  000cc	e8 00 00 00 00	 call	 ?lodepng_zlib_decompress@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z ; lodepng_zlib_decompress
  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN42@readChunk_:
  000d4	8b f0		 mov	 esi, eax

; 4433 :     if(error) break;

  000d6	85 f6		 test	 esi, esi
  000d8	75 1b		 jne	 SHORT $LN41@readChunk_

; 4434 :     ucvector_push_back(&decoded, 0);

  000da	8d 4d e4	 lea	 ecx, DWORD PTR _decoded$[ebp]
  000dd	e8 00 00 00 00	 call	 ?ucvector_push_back@@YAIPAUucvector@@E@Z ; ucvector_push_back

; 4435 : 
; 4436 :     error = lodepng_add_text(info, key, (char*)decoded.data);

  000e2	ff 75 e4	 push	 DWORD PTR _decoded$[ebp]
  000e5	8b 55 fc	 mov	 edx, DWORD PTR _key$1$[ebp]
  000e8	8b 4d f0	 mov	 ecx, DWORD PTR _info$1$[ebp]
  000eb	e8 00 00 00 00	 call	 ?lodepng_add_text@@YAIPAULodePNGInfo@@PBD1@Z ; lodepng_add_text
  000f0	83 c4 04	 add	 esp, 4
  000f3	8b f0		 mov	 esi, eax
$LN41@readChunk_:
  000f5	8b 55 fc	 mov	 edx, DWORD PTR _key$1$[ebp]
$LN14@readChunk_:

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  000f8	52		 push	 edx
  000f9	e8 00 00 00 00	 call	 _free
  000fe	ff 75 e4	 push	 DWORD PTR _decoded$[ebp]

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;

  00101	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _decoded$[ebp+8], 0
  00108	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _decoded$[ebp+4], 0

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  0010f	e8 00 00 00 00	 call	 _free
  00114	83 c4 08	 add	 esp, 8

; 4437 : 
; 4438 :     break;
; 4439 :   }
; 4440 : 
; 4441 :   lodepng_free(key);
; 4442 :   ucvector_cleanup(&decoded);
; 4443 : 
; 4444 :   return error;

  00117	8b c6		 mov	 eax, esi
  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx

; 4445 : }

  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
$LN8@readChunk_:

; 4415 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/

  00120	be 59 00 00 00	 mov	 esi, 89			; 00000059H
  00125	eb d1		 jmp	 SHORT $LN14@readChunk_
?readChunk_zTXt@@YAIPAULodePNGInfo@@PBULodePNGDecompressSettings@@PBEI@Z ENDP ; readChunk_zTXt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?readChunk_iTXt@@YAIPAULodePNGInfo@@PBULodePNGDecompressSettings@@PBEI@Z
_TEXT	SEGMENT
_decoded$ = -40						; size = 12
_info$1$ = -28						; size = 4
_zlibsettings$1$ = -24					; size = 4
_compressed$1$ = -20					; size = 4
_begin$2$ = -16						; size = 4
_begin$1$ = -16						; size = 4
_transkey$1$ = -12					; size = 4
_langtag$1$ = -8					; size = 4
_key$1$ = -4						; size = 4
_data$ = 8						; size = 4
_chunkLength$ = 12					; size = 4
?readChunk_iTXt@@YAIPAULodePNGInfo@@PBULodePNGDecompressSettings@@PBEI@Z PROC ; readChunk_iTXt, COMDAT
; _info$ = ecx
; _zlibsettings$ = edx

; 4450 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 4451 :   unsigned error = 0;
; 4452 :   unsigned i;
; 4453 : 
; 4454 :   unsigned length, begin, compressed;
; 4455 :   char *key = 0, *langtag = 0, *transkey = 0;
; 4456 :   ucvector decoded;
; 4457 :   ucvector_init(&decoded);
; 4458 : 
; 4459 :   while(!error) /*not really a while loop, only used to break on error*/
; 4460 :   {
; 4461 :     /*Quick check if the chunk length isn't too small. Even without check
; 4462 :     it'd still fail with other error checks below if it's too short. This just gives a different error code.*/
; 4463 :     if(chunkLength < 5) CERROR_BREAK(error, 30); /*iTXt chunk too short*/

  00008	8b 7d 0c	 mov	 edi, DWORD PTR _chunkLength$[ebp]
  0000b	89 55 e8	 mov	 DWORD PTR _zlibsettings$1$[ebp], edx
  0000e	89 4d e4	 mov	 DWORD PTR _info$1$[ebp], ecx
  00011	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _langtag$1$[ebp], 0
  00018	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _transkey$1$[ebp], 0

; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;

  0001f	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _decoded$[ebp], 0

; 246  :   p->size = p->allocsize = 0;

  00026	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _decoded$[ebp+8], 0
  0002d	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _decoded$[ebp+4], 0

; 4451 :   unsigned error = 0;
; 4452 :   unsigned i;
; 4453 : 
; 4454 :   unsigned length, begin, compressed;
; 4455 :   char *key = 0, *langtag = 0, *transkey = 0;
; 4456 :   ucvector decoded;
; 4457 :   ucvector_init(&decoded);
; 4458 : 
; 4459 :   while(!error) /*not really a while loop, only used to break on error*/
; 4460 :   {
; 4461 :     /*Quick check if the chunk length isn't too small. Even without check
; 4462 :     it'd still fail with other error checks below if it's too short. This just gives a different error code.*/
; 4463 :     if(chunkLength < 5) CERROR_BREAK(error, 30); /*iTXt chunk too short*/

  00034	83 ff 05	 cmp	 edi, 5
  00037	73 09		 jae	 SHORT $LN34@readChunk_
  00039	be 1e 00 00 00	 mov	 esi, 30			; 0000001eH
  0003e	33 ff		 xor	 edi, edi
  00040	eb 54		 jmp	 SHORT $LN35@readChunk_
$LN34@readChunk_:

; 4464 : 
; 4465 :     /*read the key*/
; 4466 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;

  00042	33 f6		 xor	 esi, esi
  00044	53		 push	 ebx
  00045	8b 5d 08	 mov	 ebx, DWORD PTR _data$[ebp]
  00048	85 ff		 test	 edi, edi
  0004a	74 0f		 je	 SHORT $LN86@readChunk_
  0004c	8d 64 24 00	 npad	 4
$LL33@readChunk_:
  00050	80 3c 1e 00	 cmp	 BYTE PTR [esi+ebx], 0
  00054	74 05		 je	 SHORT $LN86@readChunk_
  00056	46		 inc	 esi
  00057	3b f7		 cmp	 esi, edi
  00059	72 f5		 jb	 SHORT $LL33@readChunk_
$LN86@readChunk_:

; 4467 :     if(length + 3 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination char, corrupt?*/

  0005b	8d 46 03	 lea	 eax, DWORD PTR [esi+3]
  0005e	89 45 f0	 mov	 DWORD PTR _begin$1$[ebp], eax
  00061	3b c7		 cmp	 eax, edi
  00063	72 09		 jb	 SHORT $LN30@readChunk_
  00065	be 4b 00 00 00	 mov	 esi, 75			; 0000004bH
  0006a	33 ff		 xor	 edi, edi
  0006c	eb 27		 jmp	 SHORT $LN90@readChunk_
$LN30@readChunk_:

; 4468 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/

  0006e	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00071	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  00074	0f 87 e5 01 00
	00		 ja	 $LN28@readChunk_

; 4469 : 
; 4470 :     key = (char*)lodepng_malloc(length + 1);

  0007a	8d 46 01	 lea	 eax, DWORD PTR [esi+1]

; 63   :   return malloc(size);

  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 _malloc
  00083	83 c4 04	 add	 esp, 4

; 4469 : 
; 4470 :     key = (char*)lodepng_malloc(length + 1);

  00086	89 45 fc	 mov	 DWORD PTR _key$1$[ebp], eax

; 4471 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/

  00089	85 c0		 test	 eax, eax
  0008b	75 40		 jne	 SHORT $LN27@readChunk_
$LN92@readChunk_:
  0008d	be 53 00 00 00	 mov	 esi, 83			; 00000053H
$LN89@readChunk_:
  00092	8b 7d fc	 mov	 edi, DWORD PTR _key$1$[ebp]
$LN90@readChunk_:
  00095	5b		 pop	 ebx
$LN35@readChunk_:

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  00096	57		 push	 edi
  00097	e8 00 00 00 00	 call	 _free
  0009c	ff 75 f8	 push	 DWORD PTR _langtag$1$[ebp]
  0009f	e8 00 00 00 00	 call	 _free
  000a4	ff 75 f4	 push	 DWORD PTR _transkey$1$[ebp]
  000a7	e8 00 00 00 00	 call	 _free
  000ac	ff 75 d8	 push	 DWORD PTR _decoded$[ebp]

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;

  000af	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _decoded$[ebp+8], 0
  000b6	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _decoded$[ebp+4], 0

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  000bd	e8 00 00 00 00	 call	 _free
  000c2	83 c4 10	 add	 esp, 16			; 00000010H

; 4531 :   }
; 4532 : 
; 4533 :   lodepng_free(key);
; 4534 :   lodepng_free(langtag);
; 4535 :   lodepng_free(transkey);
; 4536 :   ucvector_cleanup(&decoded);
; 4537 : 
; 4538 :   return error;

  000c5	8b c6		 mov	 eax, esi
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi

; 4539 : }

  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c3		 ret	 0
$LN27@readChunk_:

; 4472 : 
; 4473 :     key[length] = 0;

  000cd	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0

; 4474 :     for(i = 0; i < length; i++) key[i] = data[i];

  000d1	85 f6		 test	 esi, esi
  000d3	74 19		 je	 SHORT $LN24@readChunk_
  000d5	8b fb		 mov	 edi, ebx
  000d7	8b c8		 mov	 ecx, eax
  000d9	2b f8		 sub	 edi, eax
  000db	8b d6		 mov	 edx, esi
  000dd	8d 49 00	 npad	 3
$LL77@readChunk_:
  000e0	8a 04 0f	 mov	 al, BYTE PTR [edi+ecx]
  000e3	88 01		 mov	 BYTE PTR [ecx], al
  000e5	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000e8	4a		 dec	 edx
  000e9	75 f5		 jne	 SHORT $LL77@readChunk_
  000eb	8b 7d 0c	 mov	 edi, DWORD PTR _chunkLength$[ebp]
$LN24@readChunk_:

; 4475 : 
; 4476 :     /*read the compression method*/
; 4477 :     compressed = data[length + 1];
; 4478 :     if(data[length + 2] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/

  000ee	80 7c 1e 02 00	 cmp	 BYTE PTR [esi+ebx+2], 0
  000f3	0f b6 44 1e 01	 movzx	 eax, BYTE PTR [esi+ebx+1]
  000f8	89 45 ec	 mov	 DWORD PTR _compressed$1$[ebp], eax
  000fb	74 07		 je	 SHORT $LN23@readChunk_
  000fd	be 48 00 00 00	 mov	 esi, 72			; 00000048H
  00102	eb 8e		 jmp	 SHORT $LN89@readChunk_
$LN23@readChunk_:

; 4479 : 
; 4480 :     /*even though it's not allowed by the standard, no error is thrown if
; 4481 :     there's no null termination char, if the text is empty for the next 3 texts*/
; 4482 : 
; 4483 :     /*read the langtag*/
; 4484 :     begin = length + 3;
; 4485 :     length = 0;
; 4486 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;

  00104	8b 45 f0	 mov	 eax, DWORD PTR _begin$1$[ebp]
  00107	33 f6		 xor	 esi, esi
  00109	3b c7		 cmp	 eax, edi
  0010b	73 0f		 jae	 SHORT $LN87@readChunk_
  0010d	8d 49 00	 npad	 3
$LL22@readChunk_:
  00110	80 3c 18 00	 cmp	 BYTE PTR [eax+ebx], 0
  00114	74 06		 je	 SHORT $LN87@readChunk_
  00116	40		 inc	 eax
  00117	46		 inc	 esi
  00118	3b c7		 cmp	 eax, edi
  0011a	72 f4		 jb	 SHORT $LL22@readChunk_
$LN87@readChunk_:

; 4487 : 
; 4488 :     langtag = (char*)lodepng_malloc(length + 1);

  0011c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]

; 63   :   return malloc(size);

  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 _malloc
  00125	83 c4 04	 add	 esp, 4

; 4487 : 
; 4488 :     langtag = (char*)lodepng_malloc(length + 1);

  00128	89 45 f8	 mov	 DWORD PTR _langtag$1$[ebp], eax

; 4489 :     if(!langtag) CERROR_BREAK(error, 83); /*alloc fail*/

  0012b	85 c0		 test	 eax, eax
  0012d	0f 84 5a ff ff
	ff		 je	 $LN92@readChunk_

; 4490 : 
; 4491 :     langtag[length] = 0;
; 4492 :     for(i = 0; i < length; i++) langtag[i] = data[begin + i];

  00133	33 c9		 xor	 ecx, ecx
  00135	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0
  00139	85 f6		 test	 esi, esi
  0013b	74 15		 je	 SHORT $LN16@readChunk_
  0013d	8b 55 f0	 mov	 edx, DWORD PTR _begin$1$[ebp]
  00140	03 d3		 add	 edx, ebx
  00142	8b f8		 mov	 edi, eax
$LL18@readChunk_:
  00144	8a 04 0a	 mov	 al, BYTE PTR [edx+ecx]
  00147	88 04 39	 mov	 BYTE PTR [ecx+edi], al
  0014a	41		 inc	 ecx
  0014b	3b ce		 cmp	 ecx, esi
  0014d	72 f5		 jb	 SHORT $LL18@readChunk_
  0014f	8b 7d 0c	 mov	 edi, DWORD PTR _chunkLength$[ebp]
$LN16@readChunk_:

; 4493 : 
; 4494 :     /*read the transkey*/
; 4495 :     begin += length + 1;

  00152	8b 4d f0	 mov	 ecx, DWORD PTR _begin$1$[ebp]
  00155	41		 inc	 ecx
  00156	03 ce		 add	 ecx, esi

; 4496 :     length = 0;

  00158	33 f6		 xor	 esi, esi
  0015a	89 4d f0	 mov	 DWORD PTR _begin$2$[ebp], ecx

; 4497 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;

  0015d	8b c1		 mov	 eax, ecx
  0015f	3b cf		 cmp	 ecx, edi
  00161	73 0c		 jae	 SHORT $LN88@readChunk_
$LL15@readChunk_:
  00163	80 3c 18 00	 cmp	 BYTE PTR [eax+ebx], 0
  00167	74 06		 je	 SHORT $LN88@readChunk_
  00169	40		 inc	 eax
  0016a	46		 inc	 esi
  0016b	3b c7		 cmp	 eax, edi
  0016d	72 f4		 jb	 SHORT $LL15@readChunk_
$LN88@readChunk_:

; 4498 : 
; 4499 :     transkey = (char*)lodepng_malloc(length + 1);

  0016f	8d 46 01	 lea	 eax, DWORD PTR [esi+1]

; 63   :   return malloc(size);

  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 _malloc
  00178	83 c4 04	 add	 esp, 4

; 4498 : 
; 4499 :     transkey = (char*)lodepng_malloc(length + 1);

  0017b	89 45 f4	 mov	 DWORD PTR _transkey$1$[ebp], eax

; 4500 :     if(!transkey) CERROR_BREAK(error, 83); /*alloc fail*/

  0017e	85 c0		 test	 eax, eax
  00180	0f 84 07 ff ff
	ff		 je	 $LN92@readChunk_

; 4501 : 
; 4502 :     transkey[length] = 0;
; 4503 :     for(i = 0; i < length; i++) transkey[i] = data[begin + i];

  00186	33 c9		 xor	 ecx, ecx
  00188	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0
  0018c	85 f6		 test	 esi, esi
  0018e	74 15		 je	 SHORT $LN9@readChunk_
  00190	8b 55 f0	 mov	 edx, DWORD PTR _begin$2$[ebp]
  00193	03 d3		 add	 edx, ebx
  00195	8b d8		 mov	 ebx, eax
$LL11@readChunk_:
  00197	8a 04 0a	 mov	 al, BYTE PTR [edx+ecx]
  0019a	88 04 19	 mov	 BYTE PTR [ecx+ebx], al
  0019d	41		 inc	 ecx
  0019e	3b ce		 cmp	 ecx, esi
  001a0	72 f5		 jb	 SHORT $LL11@readChunk_
  001a2	8b 5d 08	 mov	 ebx, DWORD PTR _data$[ebp]
$LN9@readChunk_:

; 4504 : 
; 4505 :     /*read the actual text*/
; 4506 :     begin += length + 1;

  001a5	8b 45 f0	 mov	 eax, DWORD PTR _begin$2$[ebp]
  001a8	40		 inc	 eax
  001a9	03 f0		 add	 esi, eax

; 4507 : 
; 4508 :     length = chunkLength < begin ? 0 : chunkLength - begin;

  001ab	3b fe		 cmp	 edi, esi
  001ad	73 04		 jae	 SHORT $LN39@readChunk_
  001af	33 ff		 xor	 edi, edi
  001b1	eb 02		 jmp	 SHORT $LN40@readChunk_
$LN39@readChunk_:
  001b3	2b fe		 sub	 edi, esi
$LN40@readChunk_:

; 4509 : 
; 4510 :     if(compressed)

  001b5	83 7d ec 00	 cmp	 DWORD PTR _compressed$1$[ebp], 0
  001b9	74 4e		 je	 SHORT $LN8@readChunk_

; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
; 945  :     (*bp)++;
; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);
; 965  :   generateFixedDistanceTree(tree_d);
; 966  : }
; 967  : 
; 968  : /*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
; 969  : static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
; 970  :                                       const unsigned char* in, size_t* bp, size_t inlength)
; 971  : {
; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;
; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/
; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;
; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;
; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;
; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)
; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
; 1009 :     if(error) break;
; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;
; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;
; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;
; 1020 :     while(i < HLIT + HDIST)
; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
; 1023 :       if(code <= 15) /*a length code*/
; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;
; 1026 :         else bitlen_d[i - HLIT] = code;
; 1027 :         i++;
; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/
; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);
; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];
; 1040 :         else value = bitlen_d[i - HLIT - 1];
; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)
; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
; 1045 :           if(i < HLIT) bitlen_ll[i] = value;
; 1046 :           else bitlen_d[i - HLIT] = value;
; 1047 :           i++;
; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/
; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);
; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)
; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1063 :           else bitlen_d[i - HLIT] = 0;
; 1064 :           i++;
; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/
; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);
; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)
; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1080 :           else bitlen_d[i - HLIT] = 0;
; 1081 :           i++;
; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))
; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;
; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/
; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;
; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 1102 :     if(error) break;
; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
; 1104 : 
; 1105 :     break; /*end of error-while*/
; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;
; 1114 : }
; 1115 : 
; 1116 : /*inflate a block with dynamic of fixed Huffman tree*/
; 1117 : static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
; 1118 :                                     size_t* pos, size_t inlength, unsigned btype)
; 1119 : {
; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;
; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/
; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/
; 1136 :     {
; 1137 :       if((*pos) >= out->size)
; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);
; 1143 :       (*pos)++;
; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);
; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
; 1161 :       if(code_d > 29)
; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;
; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/
; 1170 :         break;
; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);
; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);
; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)
; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)
; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];
; 1193 :         (*pos)++;
; 1194 :         backward++;
; 1195 :         if(backward >= start) backward = start - distance;
; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)
; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;
; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;
; 1215 : }
; 1216 : 
; 1217 : static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
; 1218 : {
; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;
; 1223 :   p = (*bp) / 8; /*byte position*/
; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/
; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;
; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;
; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)
; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];
; 1241 : 
; 1242 :   (*bp) = p * 8;
; 1243 : 
; 1244 :   return error;
; 1245 : }
; 1246 : 
; 1247 : static unsigned lodepng_inflatev(ucvector* out,
; 1248 :                                  const unsigned char* in, size_t insize,
; 1249 :                                  const LodePNGDecompressSettings* settings)
; 1250 : {
; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;
; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/
; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)
; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
; 1264 :     BFINAL = readBitFromStream(&bp, in);
; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);
; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
; 1271 : 
; 1272 :     if(error) return error;
; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/
; 1277 : 
; 1278 :   return error;
; 1279 : }
; 1280 : 
; 1281 : unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
; 1282 :                          const unsigned char* in, size_t insize,
; 1283 :                          const LodePNGDecompressSettings* settings)
; 1284 : {
; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);
; 1289 :   *out = v.data;
; 1290 :   *outsize = v.size;
; 1291 :   return error;
; 1292 : }
; 1293 : 
; 1294 : static unsigned inflate(unsigned char** out, size_t* outsize,
; 1295 :                         const unsigned char* in, size_t insize,
; 1296 :                         const LodePNGDecompressSettings* settings)
; 1297 : {
; 1298 :   if(settings->custom_inflate)
; 1299 :   {
; 1300 :     return settings->custom_inflate(out, outsize, in, insize, settings);
; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }
; 1307 : 
; 1308 : #endif /*LODEPNG_COMPILE_DECODER*/
; 1309 : 
; 1310 : #ifdef LODEPNG_COMPILE_ENCODER
; 1311 : 
; 1312 : /* ////////////////////////////////////////////////////////////////////////// */
; 1313 : /* / Deflator (Compressor)                                                  / */
; 1314 : /* ////////////////////////////////////////////////////////////////////////// */
; 1315 : 
; 1316 : static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;
; 1317 : 
; 1318 : /*bitlen is the size in bits of the code*/
; 1319 : static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)
; 1320 : {
; 1321 :   addBitsToStreamReversed(bp, compressed, code, bitlen);
; 1322 : }
; 1323 : 
; 1324 : /*search the index in the array, that has the largest value smaller than or equal to the given value,
; 1325 : given array must be sorted (if no value is smaller, it returns the size of the given array)*/
; 1326 : static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)
; 1327 : {
; 1328 :   /*linear search implementation*/
; 1329 :   /*for(size_t i = 1; i < array_size; i++) if(array[i] > value) return i - 1;
; 1330 :   return array_size - 1;*/
; 1331 : 
; 1332 :   /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
; 1333 :   size_t left  = 1;
; 1334 :   size_t right = array_size - 1;
; 1335 :   while(left <= right)
; 1336 :   {
; 1337 :     size_t mid = (left + right) / 2;
; 1338 :     if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
; 1339 :     else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
; 1340 :     else return mid - 1;
; 1341 :   }
; 1342 :   return array_size - 1;
; 1343 : }
; 1344 : 
; 1345 : static void addLengthDistance(uivector* values, size_t length, size_t distance)
; 1346 : {
; 1347 :   /*values in encoded vector are those used by deflate:
; 1348 :   0-255: literal bytes
; 1349 :   256: end
; 1350 :   257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
; 1351 :   286-287: invalid*/
; 1352 : 
; 1353 :   unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
; 1354 :   unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
; 1355 :   unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
; 1356 :   unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);
; 1357 : 
; 1358 :   uivector_push_back(values, length_code + FIRST_LENGTH_CODE_INDEX);
; 1359 :   uivector_push_back(values, extra_length);
; 1360 :   uivector_push_back(values, dist_code);
; 1361 :   uivector_push_back(values, extra_distance);
; 1362 : }
; 1363 : 
; 1364 : static const unsigned HASH_NUM_VALUES = 65536;
; 1365 : static const unsigned HASH_NUM_CHARACTERS = 3;
; 1366 : static const unsigned HASH_SHIFT = 2;
; 1367 : /*
; 1368 : The HASH_NUM_CHARACTERS value is used to make encoding faster by using longer
; 1369 : sequences to generate a hash value from the stream bytes. Setting it to 3
; 1370 : gives exactly the same compression as the brute force method, since deflate's
; 1371 : run length encoding starts with lengths of 3. Setting it to higher values,
; 1372 : like 6, can make the encoding faster (not always though!), but will cause the
; 1373 : encoding to miss any length between 3 and this value, so that the compression
; 1374 : may be worse (but this can vary too depending on the image, sometimes it is
; 1375 : even a bit better instead).
; 1376 : The HASH_NUM_VALUES is the amount of unique possible hash values that
; 1377 : combinations of bytes can give, the higher it is the more memory is needed, but
; 1378 : if it's too low the advantage of hashing is gone.
; 1379 : */
; 1380 : 
; 1381 : typedef struct Hash
; 1382 : {
; 1383 :   int* head; /*hash value to head circular pos*/
; 1384 :   int* val; /*circular pos to hash value*/
; 1385 :   /*circular pos to prev circular pos*/
; 1386 :   unsigned short* chain;
; 1387 :   unsigned short* zeros;
; 1388 : } Hash;
; 1389 : 
; 1390 : static unsigned hash_init(Hash* hash, unsigned windowsize)
; 1391 : {
; 1392 :   unsigned i;
; 1393 :   hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
; 1394 :   hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
; 1395 :   hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1396 :   hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1397 : 
; 1398 :   if(!hash->head || !hash->val || !hash->chain || !hash->zeros) return 83; /*alloc fail*/
; 1399 : 
; 1400 :   /*initialize hash table*/
; 1401 :   for(i = 0; i < HASH_NUM_VALUES; i++) hash->head[i] = -1;
; 1402 :   for(i = 0; i < windowsize; i++) hash->val[i] = -1;
; 1403 :   for(i = 0; i < windowsize; i++) hash->chain[i] = i; /*same value as index indicates uninitialized*/
; 1404 : 
; 1405 :   return 0;
; 1406 : }
; 1407 : 
; 1408 : static void hash_cleanup(Hash* hash)
; 1409 : {
; 1410 :   lodepng_free(hash->head);
; 1411 :   lodepng_free(hash->val);
; 1412 :   lodepng_free(hash->chain);
; 1413 :   lodepng_free(hash->zeros);
; 1414 : }
; 1415 : 
; 1416 : static unsigned getHash(const unsigned char* data, size_t size, size_t pos)
; 1417 : {
; 1418 :   unsigned result = 0;
; 1419 :   size_t amount, i;
; 1420 :   if(pos >= size) return 0;
; 1421 :   amount = HASH_NUM_CHARACTERS;
; 1422 :   if(pos + amount >= size) amount = size - pos;
; 1423 :   for(i = 0; i < amount; i++) result ^= (data[pos + i] << (i * HASH_SHIFT));
; 1424 :   return result % HASH_NUM_VALUES;
; 1425 : }
; 1426 : 
; 1427 : static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)
; 1428 : {
; 1429 :   const unsigned char* start = data + pos;
; 1430 :   const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
; 1431 :   if(end > data + size) end = data + size;
; 1432 :   data = start;
; 1433 :   while (data != end && *data == 0) data++;
; 1434 :   /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
; 1435 :   return (unsigned)(data - start);
; 1436 : }
; 1437 : 
; 1438 : static void updateHashChain(Hash* hash, size_t pos, int hashval, unsigned windowsize)
; 1439 : {
; 1440 :   unsigned wpos = pos % windowsize;
; 1441 :   hash->val[wpos] = hashval;
; 1442 :   if(hash->head[hashval] != -1) hash->chain[wpos] = hash->head[hashval];
; 1443 :   hash->head[hashval] = wpos;
; 1444 : }
; 1445 : 
; 1446 : /*
; 1447 : LZ77-encode the data. Return value is error code. The input are raw bytes, the output
; 1448 : is in the form of unsigned integers with codes representing for example literal bytes, or
; 1449 : length/distance pairs.
; 1450 : It uses a hash table technique to let it encode faster. When doing LZ77 encoding, a
; 1451 : sliding window (of windowsize) is used, and all past bytes in that window can be used as
; 1452 : the "dictionary". A brute force search through all possible distances would be slow, and
; 1453 : this hash technique is one out of several ways to speed this up.
; 1454 : */
; 1455 : static unsigned encodeLZ77(uivector* out, Hash* hash,
; 1456 :                            const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
; 1457 :                            unsigned minmatch, unsigned nicematch, unsigned lazymatching)
; 1458 : {
; 1459 :   unsigned short numzeros = 0;
; 1460 :   int usezeros = windowsize >= 8192; /*for small window size, the 'max chain length' optimization does a better job*/
; 1461 :   unsigned pos, i, error = 0;
; 1462 :   /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
; 1463 :   unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8;
; 1464 :   unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;
; 1465 : 
; 1466 :   if(!error)
; 1467 :   {
; 1468 :     unsigned offset; /*the offset represents the distance in LZ77 terminology*/
; 1469 :     unsigned length;
; 1470 :     unsigned lazy = 0;
; 1471 :     unsigned lazylength = 0, lazyoffset = 0;
; 1472 :     unsigned hashval;
; 1473 :     unsigned current_offset, current_length;
; 1474 :     const unsigned char *lastptr, *foreptr, *backptr;
; 1475 :     unsigned short hashpos, prevpos;
; 1476 : 
; 1477 :     for(pos = inpos; pos < insize; pos++)
; 1478 :     {
; 1479 :       size_t wpos = pos % windowsize; /*position for in 'circular' hash buffers*/
; 1480 : 
; 1481 :       hashval = getHash(in, insize, pos);
; 1482 :       updateHashChain(hash, pos, hashval, windowsize);
; 1483 : 
; 1484 :       if(usezeros && hashval == 0)
; 1485 :       {
; 1486 :         numzeros = countZeros(in, insize, pos);
; 1487 :         hash->zeros[wpos] = numzeros;
; 1488 :       }
; 1489 : 
; 1490 :       /*the length and offset found for the current position*/
; 1491 :       length = 0;
; 1492 :       offset = 0;
; 1493 : 
; 1494 :       prevpos = hash->head[hashval];
; 1495 :       hashpos = hash->chain[prevpos];
; 1496 : 
; 1497 :       lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];
; 1498 : 
; 1499 :       /*search for the longest string*/
; 1500 :       if(hash->val[wpos] == (int)hashval)
; 1501 :       {
; 1502 :         unsigned chainlength = 0;
; 1503 :         for(;;)
; 1504 :         {
; 1505 :           /*stop when went completely around the circular buffer*/
; 1506 :           if(prevpos < wpos && hashpos > prevpos && hashpos <= wpos) break;
; 1507 :           if(prevpos > wpos && (hashpos <= wpos || hashpos > prevpos)) break;
; 1508 :           if(chainlength++ >= maxchainlength) break;
; 1509 : 
; 1510 :           current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;
; 1511 :           if(current_offset > 0)
; 1512 :           {
; 1513 :             /*test the next characters*/
; 1514 :             foreptr = &in[pos];
; 1515 :             backptr = &in[pos - current_offset];
; 1516 : 
; 1517 :             /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
; 1518 :             if(usezeros && hashval == 0 && hash->val[hashpos] == 0 /*hashval[hashpos] may be out of date*/)
; 1519 :             {
; 1520 :               unsigned short skip = hash->zeros[hashpos];
; 1521 :               if(skip > numzeros) skip = numzeros;
; 1522 :               backptr += skip;
; 1523 :               foreptr += skip;
; 1524 :             }
; 1525 : 
; 1526 :             /* multiple checks at once per array bounds check */
; 1527 :             while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
; 1528 :             {
; 1529 :               ++backptr;
; 1530 :               ++foreptr;
; 1531 :             }
; 1532 :             current_length = (unsigned)(foreptr - &in[pos]);
; 1533 : 
; 1534 :             if(current_length > length)
; 1535 :             {
; 1536 :               length = current_length; /*the longest length*/
; 1537 :               offset = current_offset; /*the offset that is related to this longest length*/
; 1538 :               /*jump out once a length of max length is found (speed gain)*/
; 1539 :               if(current_length >= nicematch || current_length == MAX_SUPPORTED_DEFLATE_LENGTH) break;
; 1540 :             }
; 1541 :           }
; 1542 : 
; 1543 :           if(hashpos == hash->chain[hashpos]) break;
; 1544 : 
; 1545 :           prevpos = hashpos;
; 1546 :           hashpos = hash->chain[hashpos];
; 1547 :         }
; 1548 :       }
; 1549 : 
; 1550 :       if(lazymatching)
; 1551 :       {
; 1552 :         if(!lazy && length >= 3 && length <= maxlazymatch && length < MAX_SUPPORTED_DEFLATE_LENGTH)
; 1553 :         {
; 1554 :           lazy = 1;
; 1555 :           lazylength = length;
; 1556 :           lazyoffset = offset;
; 1557 :           continue; /*try the next byte*/
; 1558 :         }
; 1559 :         if(lazy)
; 1560 :         {
; 1561 :           lazy = 0;
; 1562 :           if(pos == 0) ERROR_BREAK(81);
; 1563 :           if(length > lazylength + 1)
; 1564 :           {
; 1565 :             /*push the previous character as literal*/
; 1566 :             if(!uivector_push_back(out, in[pos - 1])) ERROR_BREAK(83 /*alloc fail*/);
; 1567 :           }
; 1568 :           else
; 1569 :           {
; 1570 :             length = lazylength;
; 1571 :             offset = lazyoffset;
; 1572 :             hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
; 1573 :             pos--;
; 1574 :           }
; 1575 :         }
; 1576 :       }
; 1577 :       if(length >= 3 && offset > windowsize) ERROR_BREAK(86 /*too big (or overflown negative) offset*/);
; 1578 : 
; 1579 :       /**encode it as length/distance pair or literal value**/
; 1580 :       if(length < 3) /*only lengths of 3 or higher are supported as length/distance pair*/
; 1581 :       {
; 1582 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1583 :       }
; 1584 :       else if(length < minmatch || (length == 3 && offset > 4096))
; 1585 :       {
; 1586 :         /*compensate for the fact that longer offsets have more extra bits, a
; 1587 :         length of only 3 may be not worth it then*/
; 1588 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1589 :       }
; 1590 :       else
; 1591 :       {
; 1592 :         addLengthDistance(out, length, offset);
; 1593 :         for(i = 1; i < length; i++)
; 1594 :         {
; 1595 :           pos++;
; 1596 :           hashval = getHash(in, insize, pos);
; 1597 :           updateHashChain(hash, pos, hashval, windowsize);
; 1598 :           if(usezeros && hashval == 0)
; 1599 :           {
; 1600 :             hash->zeros[pos % windowsize] = countZeros(in, insize, pos);
; 1601 :           }
; 1602 :         }
; 1603 :       }
; 1604 : 
; 1605 :     } /*end of the loop through each character of input*/
; 1606 :   } /*end of "if(!error)"*/
; 1607 : 
; 1608 :   return error;
; 1609 : }
; 1610 : 
; 1611 : /* /////////////////////////////////////////////////////////////////////////// */
; 1612 : 
; 1613 : static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)
; 1614 : {
; 1615 :   /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
; 1616 :   2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/
; 1617 : 
; 1618 :   size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
; 1619 :   unsigned datapos = 0;
; 1620 :   for(i = 0; i < numdeflateblocks; i++)
; 1621 :   {
; 1622 :     unsigned BFINAL, BTYPE, LEN, NLEN;
; 1623 :     unsigned char firstbyte;
; 1624 : 
; 1625 :     BFINAL = (i == numdeflateblocks - 1);
; 1626 :     BTYPE = 0;
; 1627 : 
; 1628 :     firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1) << 1) + ((BTYPE & 2) << 1));
; 1629 :     ucvector_push_back(out, firstbyte);
; 1630 : 
; 1631 :     LEN = 65535;
; 1632 :     if(datasize - datapos < 65535) LEN = (unsigned)datasize - datapos;
; 1633 :     NLEN = 65535 - LEN;
; 1634 : 
; 1635 :     ucvector_push_back(out, (unsigned char)(LEN % 256));
; 1636 :     ucvector_push_back(out, (unsigned char)(LEN / 256));
; 1637 :     ucvector_push_back(out, (unsigned char)(NLEN % 256));
; 1638 :     ucvector_push_back(out, (unsigned char)(NLEN / 256));
; 1639 : 
; 1640 :     /*Decompressed data*/
; 1641 :     for(j = 0; j < 65535 && datapos < datasize; j++)
; 1642 :     {
; 1643 :       ucvector_push_back(out, data[datapos++]);
; 1644 :     }
; 1645 :   }
; 1646 : 
; 1647 :   return 0;
; 1648 : }
; 1649 : 
; 1650 : /*
; 1651 : write the lz77-encoded data, which has lit, len and dist codes, to compressed stream using huffman trees.
; 1652 : tree_ll: the tree for lit and len codes.
; 1653 : tree_d: the tree for distance codes.
; 1654 : */
; 1655 : static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
; 1656 :                           const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
; 1657 : {
; 1658 :   size_t i = 0;
; 1659 :   for(i = 0; i < lz77_encoded->size; i++)
; 1660 :   {
; 1661 :     unsigned val = lz77_encoded->data[i];
; 1662 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_ll, val), HuffmanTree_getLength(tree_ll, val));
; 1663 :     if(val > 256) /*for a length code, 3 more things have to be added*/
; 1664 :     {
; 1665 :       unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
; 1666 :       unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
; 1667 :       unsigned length_extra_bits = lz77_encoded->data[++i];
; 1668 : 
; 1669 :       unsigned distance_code = lz77_encoded->data[++i];
; 1670 : 
; 1671 :       unsigned distance_index = distance_code;
; 1672 :       unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
; 1673 :       unsigned distance_extra_bits = lz77_encoded->data[++i];
; 1674 : 
; 1675 :       addBitsToStream(bp, out, length_extra_bits, n_length_extra_bits);
; 1676 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
; 1677 :                        HuffmanTree_getLength(tree_d, distance_code));
; 1678 :       addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
; 1679 :     }
; 1680 :   }
; 1681 : }
; 1682 : 
; 1683 : /*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
; 1684 : static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,
; 1685 :                                const unsigned char* data, size_t datapos, size_t dataend,
; 1686 :                                const LodePNGCompressSettings* settings, int final)
; 1687 : {
; 1688 :   unsigned error = 0;
; 1689 : 
; 1690 :   /*
; 1691 :   A block is compressed as follows: The PNG data is lz77 encoded, resulting in
; 1692 :   literal bytes and length/distance pairs. This is then huffman compressed with
; 1693 :   two huffman trees. One huffman tree is used for the lit and len values ("ll"),
; 1694 :   another huffman tree is used for the dist values ("d"). These two trees are
; 1695 :   stored using their code lengths, and to compress even more these code lengths
; 1696 :   are also run-length encoded and huffman compressed. This gives a huffman tree
; 1697 :   of code lengths "cl". The code lenghts used to describe this third tree are
; 1698 :   the code length code lengths ("clcl").
; 1699 :   */
; 1700 : 
; 1701 :   /*The lz77 encoded data, represented with integers since there will also be length and distance codes in it*/
; 1702 :   uivector lz77_encoded;
; 1703 :   HuffmanTree tree_ll; /*tree for lit,len values*/
; 1704 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1705 :   HuffmanTree tree_cl; /*tree for encoding the code lengths representing tree_ll and tree_d*/
; 1706 :   uivector frequencies_ll; /*frequency of lit,len codes*/
; 1707 :   uivector frequencies_d; /*frequency of dist codes*/
; 1708 :   uivector frequencies_cl; /*frequency of code length codes*/
; 1709 :   uivector bitlen_lld; /*lit,len,dist code lenghts (int bits), literally (without repeat codes).*/
; 1710 :   uivector bitlen_lld_e; /*bitlen_lld encoded with repeat codes (this is a rudemtary run length compression)*/
; 1711 :   /*bitlen_cl is the code length code lengths ("clcl"). The bit lengths of codes to represent tree_cl
; 1712 :   (these are written as is in the file, it would be crazy to compress these using yet another huffman
; 1713 :   tree that needs to be represented by yet another set of code lengths)*/
; 1714 :   uivector bitlen_cl;
; 1715 :   size_t datasize = dataend - datapos;
; 1716 : 
; 1717 :   /*
; 1718 :   Due to the huffman compression of huffman tree representations ("two levels"), there are some anologies:
; 1719 :   bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
; 1720 :   bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
; 1721 :   bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
; 1722 :   */
; 1723 : 
; 1724 :   unsigned BFINAL = final;
; 1725 :   size_t numcodes_ll, numcodes_d, i;
; 1726 :   unsigned HLIT, HDIST, HCLEN;
; 1727 : 
; 1728 :   uivector_init(&lz77_encoded);
; 1729 :   HuffmanTree_init(&tree_ll);
; 1730 :   HuffmanTree_init(&tree_d);
; 1731 :   HuffmanTree_init(&tree_cl);
; 1732 :   uivector_init(&frequencies_ll);
; 1733 :   uivector_init(&frequencies_d);
; 1734 :   uivector_init(&frequencies_cl);
; 1735 :   uivector_init(&bitlen_lld);
; 1736 :   uivector_init(&bitlen_lld_e);
; 1737 :   uivector_init(&bitlen_cl);
; 1738 : 
; 1739 :   /*This while loop never loops due to a break at the end, it is here to
; 1740 :   allow breaking out of it to the cleanup phase on error conditions.*/
; 1741 :   while(!error)
; 1742 :   {
; 1743 :     if(settings->use_lz77)
; 1744 :     {
; 1745 :       error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1746 :                          settings->minmatch, settings->nicematch, settings->lazymatching);
; 1747 :       if(error) break;
; 1748 :     }
; 1749 :     else
; 1750 :     {
; 1751 :       if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83 /*alloc fail*/);
; 1752 :       for(i = datapos; i < dataend; i++) lz77_encoded.data[i] = data[i]; /*no LZ77, but still will be Huffman compressed*/
; 1753 :     }
; 1754 : 
; 1755 :     if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1756 :     if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1757 : 
; 1758 :     /*Count the frequencies of lit, len and dist codes*/
; 1759 :     for(i = 0; i < lz77_encoded.size; i++)
; 1760 :     {
; 1761 :       unsigned symbol = lz77_encoded.data[i];
; 1762 :       frequencies_ll.data[symbol]++;
; 1763 :       if(symbol > 256)
; 1764 :       {
; 1765 :         unsigned dist = lz77_encoded.data[i + 2];
; 1766 :         frequencies_d.data[dist]++;
; 1767 :         i += 3;
; 1768 :       }
; 1769 :     }
; 1770 :     frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/
; 1771 : 
; 1772 :     /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
; 1773 :     error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
; 1774 :     if(error) break;
; 1775 :     /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
; 1776 :     error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
; 1777 :     if(error) break;
; 1778 : 
; 1779 :     numcodes_ll = tree_ll.numcodes; if(numcodes_ll > 286) numcodes_ll = 286;
; 1780 :     numcodes_d = tree_d.numcodes; if(numcodes_d > 30) numcodes_d = 30;
; 1781 :     /*store the code lengths of both generated trees in bitlen_lld*/
; 1782 :     for(i = 0; i < numcodes_ll; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
; 1783 :     for(i = 0; i < numcodes_d; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));
; 1784 : 
; 1785 :     /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
; 1786 :     17 (3-10 zeroes), 18 (11-138 zeroes)*/
; 1787 :     for(i = 0; i < (unsigned)bitlen_lld.size; i++)
; 1788 :     {
; 1789 :       unsigned j = 0; /*amount of repititions*/
; 1790 :       while(i + j + 1 < (unsigned)bitlen_lld.size && bitlen_lld.data[i + j + 1] == bitlen_lld.data[i]) j++;
; 1791 : 
; 1792 :       if(bitlen_lld.data[i] == 0 && j >= 2) /*repeat code for zeroes*/
; 1793 :       {
; 1794 :         j++; /*include the first zero*/
; 1795 :         if(j <= 10) /*repeat code 17 supports max 10 zeroes*/
; 1796 :         {
; 1797 :           uivector_push_back(&bitlen_lld_e, 17);
; 1798 :           uivector_push_back(&bitlen_lld_e, j - 3);
; 1799 :         }
; 1800 :         else /*repeat code 18 supports max 138 zeroes*/
; 1801 :         {
; 1802 :           if(j > 138) j = 138;
; 1803 :           uivector_push_back(&bitlen_lld_e, 18);
; 1804 :           uivector_push_back(&bitlen_lld_e, j - 11);
; 1805 :         }
; 1806 :         i += (j - 1);
; 1807 :       }
; 1808 :       else if(j >= 3) /*repeat code for value other than zero*/
; 1809 :       {
; 1810 :         size_t k;
; 1811 :         unsigned num = j / 6, rest = j % 6;
; 1812 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1813 :         for(k = 0; k < num; k++)
; 1814 :         {
; 1815 :           uivector_push_back(&bitlen_lld_e, 16);
; 1816 :           uivector_push_back(&bitlen_lld_e, 6 - 3);
; 1817 :         }
; 1818 :         if(rest >= 3)
; 1819 :         {
; 1820 :           uivector_push_back(&bitlen_lld_e, 16);
; 1821 :           uivector_push_back(&bitlen_lld_e, rest - 3);
; 1822 :         }
; 1823 :         else j -= rest;
; 1824 :         i += j;
; 1825 :       }
; 1826 :       else /*too short to benefit from repeat code*/
; 1827 :       {
; 1828 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1829 :       }
; 1830 :     }
; 1831 : 
; 1832 :     /*generate tree_cl, the huffmantree of huffmantrees*/
; 1833 : 
; 1834 :     if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1835 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1836 :     {
; 1837 :       frequencies_cl.data[bitlen_lld_e.data[i]]++;
; 1838 :       /*after a repeat code come the bits that specify the number of repetitions,
; 1839 :       those don't need to be in the frequencies_cl calculation*/
; 1840 :       if(bitlen_lld_e.data[i] >= 16) i++;
; 1841 :     }
; 1842 : 
; 1843 :     error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
; 1844 :                                             frequencies_cl.size, frequencies_cl.size, 7);
; 1845 :     if(error) break;
; 1846 : 
; 1847 :     if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
; 1848 :     for(i = 0; i < tree_cl.numcodes; i++)
; 1849 :     {
; 1850 :       /*lenghts of code length tree is in the order as specified by deflate*/
; 1851 :       bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
; 1852 :     }
; 1853 :     while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
; 1854 :     {
; 1855 :       /*remove zeros at the end, but minimum size must be 4*/
; 1856 :       if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
; 1857 :     }
; 1858 :     if(error) break;
; 1859 : 
; 1860 :     /*
; 1861 :     Write everything into the output
; 1862 : 
; 1863 :     After the BFINAL and BTYPE, the dynamic block consists out of the following:
; 1864 :     - 5 bits HLIT, 5 bits HDIST, 4 bits HCLEN
; 1865 :     - (HCLEN+4)*3 bits code lengths of code length alphabet
; 1866 :     - HLIT + 257 code lenghts of lit/length alphabet (encoded using the code length
; 1867 :       alphabet, + possible repetition codes 16, 17, 18)
; 1868 :     - HDIST + 1 code lengths of distance alphabet (encoded using the code length
; 1869 :       alphabet, + possible repetition codes 16, 17, 18)
; 1870 :     - compressed data
; 1871 :     - 256 (end code)
; 1872 :     */
; 1873 : 
; 1874 :     /*Write block type*/
; 1875 :     addBitToStream(bp, out, BFINAL);
; 1876 :     addBitToStream(bp, out, 0); /*first bit of BTYPE "dynamic"*/
; 1877 :     addBitToStream(bp, out, 1); /*second bit of BTYPE "dynamic"*/
; 1878 : 
; 1879 :     /*write the HLIT, HDIST and HCLEN values*/
; 1880 :     HLIT = (unsigned)(numcodes_ll - 257);
; 1881 :     HDIST = (unsigned)(numcodes_d - 1);
; 1882 :     HCLEN = (unsigned)bitlen_cl.size - 4;
; 1883 :     /*trim zeroes for HCLEN. HLIT and HDIST were already trimmed at tree creation*/
; 1884 :     while(!bitlen_cl.data[HCLEN + 4 - 1] && HCLEN > 0) HCLEN--;
; 1885 :     addBitsToStream(bp, out, HLIT, 5);
; 1886 :     addBitsToStream(bp, out, HDIST, 5);
; 1887 :     addBitsToStream(bp, out, HCLEN, 4);
; 1888 : 
; 1889 :     /*write the code lenghts of the code length alphabet*/
; 1890 :     for(i = 0; i < HCLEN + 4; i++) addBitsToStream(bp, out, bitlen_cl.data[i], 3);
; 1891 : 
; 1892 :     /*write the lenghts of the lit/len AND the dist alphabet*/
; 1893 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1894 :     {
; 1895 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
; 1896 :                        HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
; 1897 :       /*extra bits of repeat codes*/
; 1898 :       if(bitlen_lld_e.data[i] == 16) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 2);
; 1899 :       else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
; 1900 :       else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
; 1901 :     }
; 1902 : 
; 1903 :     /*write the compressed data symbols*/
; 1904 :     writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1905 :     /*error: the length of the end code 256 must be larger than 0*/
; 1906 :     if(HuffmanTree_getLength(&tree_ll, 256) == 0) ERROR_BREAK(64);
; 1907 : 
; 1908 :     /*write the end code*/
; 1909 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1910 : 
; 1911 :     break; /*end of error-while*/
; 1912 :   }
; 1913 : 
; 1914 :   /*cleanup*/
; 1915 :   uivector_cleanup(&lz77_encoded);
; 1916 :   HuffmanTree_cleanup(&tree_ll);
; 1917 :   HuffmanTree_cleanup(&tree_d);
; 1918 :   HuffmanTree_cleanup(&tree_cl);
; 1919 :   uivector_cleanup(&frequencies_ll);
; 1920 :   uivector_cleanup(&frequencies_d);
; 1921 :   uivector_cleanup(&frequencies_cl);
; 1922 :   uivector_cleanup(&bitlen_lld_e);
; 1923 :   uivector_cleanup(&bitlen_lld);
; 1924 :   uivector_cleanup(&bitlen_cl);
; 1925 : 
; 1926 :   return error;
; 1927 : }
; 1928 : 
; 1929 : static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,
; 1930 :                              const unsigned char* data,
; 1931 :                              size_t datapos, size_t dataend,
; 1932 :                              const LodePNGCompressSettings* settings, int final)
; 1933 : {
; 1934 :   HuffmanTree tree_ll; /*tree for literal values and length codes*/
; 1935 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1936 : 
; 1937 :   unsigned BFINAL = final;
; 1938 :   unsigned error = 0;
; 1939 :   size_t i;
; 1940 : 
; 1941 :   HuffmanTree_init(&tree_ll);
; 1942 :   HuffmanTree_init(&tree_d);
; 1943 : 
; 1944 :   generateFixedLitLenTree(&tree_ll);
; 1945 :   generateFixedDistanceTree(&tree_d);
; 1946 : 
; 1947 :   addBitToStream(bp, out, BFINAL);
; 1948 :   addBitToStream(bp, out, 1); /*first bit of BTYPE*/
; 1949 :   addBitToStream(bp, out, 0); /*second bit of BTYPE*/
; 1950 : 
; 1951 :   if(settings->use_lz77) /*LZ77 encoded*/
; 1952 :   {
; 1953 :     uivector lz77_encoded;
; 1954 :     uivector_init(&lz77_encoded);
; 1955 :     error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1956 :                        settings->minmatch, settings->nicematch, settings->lazymatching);
; 1957 :     if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1958 :     uivector_cleanup(&lz77_encoded);
; 1959 :   }
; 1960 :   else /*no LZ77, but still will be Huffman compressed*/
; 1961 :   {
; 1962 :     for(i = datapos; i < dataend; i++)
; 1963 :     {
; 1964 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
; 1965 :     }
; 1966 :   }
; 1967 :   /*add END code*/
; 1968 :   if(!error) addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1969 : 
; 1970 :   /*cleanup*/
; 1971 :   HuffmanTree_cleanup(&tree_ll);
; 1972 :   HuffmanTree_cleanup(&tree_d);
; 1973 : 
; 1974 :   return error;
; 1975 : }
; 1976 : 
; 1977 : static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
; 1978 :                                  const LodePNGCompressSettings* settings)
; 1979 : {
; 1980 :   unsigned error = 0;
; 1981 :   size_t i, blocksize, numdeflateblocks;
; 1982 :   size_t bp = 0; /*the bit pointer*/
; 1983 :   Hash hash;
; 1984 : 
; 1985 :   if(settings->btype > 2) return 61;
; 1986 :   else if(settings->btype == 0) return deflateNoCompression(out, in, insize);
; 1987 :   else if(settings->btype == 1) blocksize = insize;
; 1988 :   else /*if(settings->btype == 2)*/
; 1989 :   {
; 1990 :     blocksize = insize / 8 + 8;
; 1991 :     if(blocksize < 65535) blocksize = 65535;
; 1992 :   }
; 1993 : 
; 1994 :   numdeflateblocks = (insize + blocksize - 1) / blocksize;
; 1995 :   if(numdeflateblocks == 0) numdeflateblocks = 1;
; 1996 : 
; 1997 :   error = hash_init(&hash, settings->windowsize);
; 1998 :   if(error) return error;
; 1999 : 
; 2000 :   for(i = 0; i < numdeflateblocks && !error; i++)
; 2001 :   {
; 2002 :     int final = i == numdeflateblocks - 1;
; 2003 :     size_t start = i * blocksize;
; 2004 :     size_t end = start + blocksize;
; 2005 :     if(end > insize) end = insize;
; 2006 : 
; 2007 :     if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
; 2008 :     else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
; 2009 :   }
; 2010 : 
; 2011 :   hash_cleanup(&hash);
; 2012 : 
; 2013 :   return error;
; 2014 : }
; 2015 : 
; 2016 : unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
; 2017 :                          const unsigned char* in, size_t insize,
; 2018 :                          const LodePNGCompressSettings* settings)
; 2019 : {
; 2020 :   unsigned error;
; 2021 :   ucvector v;
; 2022 :   ucvector_init_buffer(&v, *out, *outsize);
; 2023 :   error = lodepng_deflatev(&v, in, insize, settings);
; 2024 :   *out = v.data;
; 2025 :   *outsize = v.size;
; 2026 :   return error;
; 2027 : }
; 2028 : 
; 2029 : static unsigned deflate(unsigned char** out, size_t* outsize,
; 2030 :                         const unsigned char* in, size_t insize,
; 2031 :                         const LodePNGCompressSettings* settings)
; 2032 : {
; 2033 :   if(settings->custom_deflate)
; 2034 :   {
; 2035 :     return settings->custom_deflate(out, outsize, in, insize, settings);
; 2036 :   }
; 2037 :   else
; 2038 :   {
; 2039 :     return lodepng_deflate(out, outsize, in, insize, settings);
; 2040 :   }
; 2041 : }
; 2042 : 
; 2043 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2044 : 
; 2045 : /* ////////////////////////////////////////////////////////////////////////// */
; 2046 : /* / Adler32                                                                  */
; 2047 : /* ////////////////////////////////////////////////////////////////////////// */
; 2048 : 
; 2049 : static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
; 2050 : {
; 2051 :    unsigned s1 = adler & 0xffff;
; 2052 :    unsigned s2 = (adler >> 16) & 0xffff;
; 2053 : 
; 2054 :   while(len > 0)
; 2055 :   {
; 2056 :     /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
; 2057 :     unsigned amount = len > 5550 ? 5550 : len;
; 2058 :     len -= amount;
; 2059 :     while(amount > 0)
; 2060 :     {
; 2061 :       s1 += (*data++);
; 2062 :       s2 += s1;
; 2063 :       amount--;
; 2064 :     }
; 2065 :     s1 %= 65521;
; 2066 :     s2 %= 65521;
; 2067 :   }
; 2068 : 
; 2069 :   return (s2 << 16) | s1;
; 2070 : }
; 2071 : 
; 2072 : /*Return the adler32 of the bytes data[0..len-1]*/
; 2073 : static unsigned adler32(const unsigned char* data, unsigned len)
; 2074 : {
; 2075 :   return update_adler32(1L, data, len);
; 2076 : }
; 2077 : 
; 2078 : /* ////////////////////////////////////////////////////////////////////////// */
; 2079 : /* / Zlib                                                                   / */
; 2080 : /* ////////////////////////////////////////////////////////////////////////// */
; 2081 : 
; 2082 : #ifdef LODEPNG_COMPILE_DECODER
; 2083 : 
; 2084 : unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2085 :                                  size_t insize, const LodePNGDecompressSettings* settings)
; 2086 : {
; 2087 :   unsigned error = 0;
; 2088 :   unsigned CM, CINFO, FDICT;
; 2089 : 
; 2090 :   if(insize < 2) return 53; /*error, size of zlib data too small*/
; 2091 :   /*read information from zlib header*/
; 2092 :   if((in[0] * 256 + in[1]) % 31 != 0)
; 2093 :   {
; 2094 :     /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
; 2095 :     return 24;
; 2096 :   }
; 2097 : 
; 2098 :   CM = in[0] & 15;
; 2099 :   CINFO = (in[0] >> 4) & 15;
; 2100 :   /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
; 2101 :   FDICT = (in[1] >> 5) & 1;
; 2102 :   /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/
; 2103 : 
; 2104 :   if(CM != 8 || CINFO > 7)
; 2105 :   {
; 2106 :     /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
; 2107 :     return 25;
; 2108 :   }
; 2109 :   if(FDICT != 0)
; 2110 :   {
; 2111 :     /*error: the specification of PNG says about the zlib stream:
; 2112 :       "The additional flags shall not specify a preset dictionary."*/
; 2113 :     return 26;
; 2114 :   }
; 2115 : 
; 2116 :   error = inflate(out, outsize, in + 2, insize - 2, settings);
; 2117 :   if(error) return error;
; 2118 : 
; 2119 :   if(!settings->ignore_adler32)
; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/
; 2124 :   }
; 2125 : 
; 2126 :   return 0; /*no error*/
; 2127 : }
; 2128 : 
; 2129 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2130 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2131 : {
; 2132 :   if(settings->custom_zlib)

  001bb	8b 55 e8	 mov	 edx, DWORD PTR _zlibsettings$1$[ebp]

; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);

  001be	52		 push	 edx
  001bf	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 4511 :     {
; 4512 :       /*will fail if zlib error, e.g. if length is too small*/
; 4513 :       error = zlib_decompress(&decoded.data, &decoded.size,
; 4514 :                               (unsigned char*)(&data[begin]),
; 4515 :                               length, zlibsettings);

  001c2	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]

; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);

  001c5	57		 push	 edi
  001c6	51		 push	 ecx
  001c7	85 c0		 test	 eax, eax
  001c9	74 0f		 je	 SHORT $LN50@readChunk_
  001cb	8d 4d dc	 lea	 ecx, DWORD PTR _decoded$[ebp+4]
  001ce	51		 push	 ecx
  001cf	8d 4d d8	 lea	 ecx, DWORD PTR _decoded$[ebp]
  001d2	51		 push	 ecx
  001d3	ff d0		 call	 eax
  001d5	83 c4 14	 add	 esp, 20			; 00000014H
  001d8	eb 0e		 jmp	 SHORT $LN91@readChunk_
$LN50@readChunk_:

; 2134 :   else
; 2135 :     return lodepng_zlib_decompress(out, outsize, in, insize, settings);

  001da	8d 55 dc	 lea	 edx, DWORD PTR _decoded$[ebp+4]
  001dd	8d 4d d8	 lea	 ecx, DWORD PTR _decoded$[ebp]
  001e0	e8 00 00 00 00	 call	 ?lodepng_zlib_decompress@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z ; lodepng_zlib_decompress
  001e5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN91@readChunk_:
  001e8	8b f0		 mov	 esi, eax

; 4516 :       if(error) break;

  001ea	85 f6		 test	 esi, esi
  001ec	0f 85 a0 fe ff
	ff		 jne	 $LN89@readChunk_

; 4517 :       if(decoded.allocsize < decoded.size) decoded.allocsize = decoded.size;

  001f2	8b 4d e0	 mov	 ecx, DWORD PTR _decoded$[ebp+8]
  001f5	3b 4d dc	 cmp	 ecx, DWORD PTR _decoded$[ebp+4]
  001f8	0f 42 4d dc	 cmovb	 ecx, DWORD PTR _decoded$[ebp+4]
  001fc	89 4d e0	 mov	 DWORD PTR _decoded$[ebp+8], ecx

; 4518 :       ucvector_push_back(&decoded, 0);

  001ff	8d 4d d8	 lea	 ecx, DWORD PTR _decoded$[ebp]
  00202	e8 00 00 00 00	 call	 ?ucvector_push_back@@YAIPAUucvector@@E@Z ; ucvector_push_back

; 4519 :     }
; 4520 :     else

  00207	eb 36		 jmp	 SHORT $LN1@readChunk_
$LN8@readChunk_:

; 4521 :     {
; 4522 :       if(!ucvector_resize(&decoded, length + 1)) CERROR_BREAK(error, 83 /*alloc fail*/);

  00209	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
  0020c	8d 4d d8	 lea	 ecx, DWORD PTR _decoded$[ebp]
  0020f	e8 00 00 00 00	 call	 ?ucvector_resize@@YAIPAUucvector@@I@Z ; ucvector_resize
  00214	85 c0		 test	 eax, eax
  00216	0f 84 71 fe ff
	ff		 je	 $LN92@readChunk_

; 4523 : 
; 4524 :       decoded.data[length] = 0;

  0021c	8b 45 d8	 mov	 eax, DWORD PTR _decoded$[ebp]

; 4525 :       for(i = 0; i < length; i++) decoded.data[i] = data[begin + i];

  0021f	33 d2		 xor	 edx, edx
  00221	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  00225	85 ff		 test	 edi, edi
  00227	74 16		 je	 SHORT $LN1@readChunk_
  00229	03 f3		 add	 esi, ebx
  0022b	eb 03 8d 49 00	 npad	 5
$LL3@readChunk_:
  00230	8a 0c 16	 mov	 cl, BYTE PTR [esi+edx]
  00233	8b 45 d8	 mov	 eax, DWORD PTR _decoded$[ebp]
  00236	42		 inc	 edx
  00237	88 4c 10 ff	 mov	 BYTE PTR [eax+edx-1], cl
  0023b	3b d7		 cmp	 edx, edi
  0023d	72 f1		 jb	 SHORT $LL3@readChunk_
$LN1@readChunk_:

; 4526 :     }
; 4527 : 
; 4528 :     error = lodepng_add_itext(info, key, langtag, transkey, (char*)decoded.data);

  0023f	ff 75 d8	 push	 DWORD PTR _decoded$[ebp]
  00242	8b 7d fc	 mov	 edi, DWORD PTR _key$1$[ebp]
  00245	ff 75 f4	 push	 DWORD PTR _transkey$1$[ebp]
  00248	8b 4d e4	 mov	 ecx, DWORD PTR _info$1$[ebp]
  0024b	ff 75 f8	 push	 DWORD PTR _langtag$1$[ebp]
  0024e	8b d7		 mov	 edx, edi
  00250	e8 00 00 00 00	 call	 ?lodepng_add_itext@@YAIPAULodePNGInfo@@PBD111@Z ; lodepng_add_itext
  00255	83 c4 0c	 add	 esp, 12			; 0000000cH
  00258	8b f0		 mov	 esi, eax

; 4529 : 
; 4530 :     break;

  0025a	e9 36 fe ff ff	 jmp	 $LN90@readChunk_
$LN28@readChunk_:

; 4468 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/

  0025f	be 59 00 00 00	 mov	 esi, 89			; 00000059H
  00264	33 ff		 xor	 edi, edi
  00266	e9 2a fe ff ff	 jmp	 $LN90@readChunk_
?readChunk_iTXt@@YAIPAULodePNGInfo@@PBULodePNGDecompressSettings@@PBEI@Z ENDP ; readChunk_iTXt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?readChunk_tIME@@YAIPAULodePNGInfo@@PBEI@Z
_TEXT	SEGMENT
?readChunk_tIME@@YAIPAULodePNGInfo@@PBEI@Z PROC		; readChunk_tIME, COMDAT
; _info$ = ecx
; _data$ = edx

; 4543 :   if(chunkLength != 7) return 73; /*invalid tIME chunk size*/
; 4544 : 
; 4545 :   info->time_defined = 1;

  00000	c7 41 5c 01 00
	00 00		 mov	 DWORD PTR [ecx+92], 1

; 4546 :   info->time.year = 256 * data[0] + data[+ 1];

  00007	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  0000b	56		 push	 esi
  0000c	0f b6 32	 movzx	 esi, BYTE PTR [edx]
  0000f	c1 e6 08	 shl	 esi, 8
  00012	03 f0		 add	 esi, eax
  00014	89 71 60	 mov	 DWORD PTR [ecx+96], esi

; 4547 :   info->time.month = data[2];

  00017	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  0001b	89 41 64	 mov	 DWORD PTR [ecx+100], eax

; 4548 :   info->time.day = data[3];

  0001e	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00022	89 41 68	 mov	 DWORD PTR [ecx+104], eax

; 4549 :   info->time.hour = data[4];

  00025	0f b6 42 04	 movzx	 eax, BYTE PTR [edx+4]
  00029	89 41 6c	 mov	 DWORD PTR [ecx+108], eax

; 4550 :   info->time.minute = data[5];

  0002c	0f b6 42 05	 movzx	 eax, BYTE PTR [edx+5]
  00030	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 4551 :   info->time.second = data[6];

  00033	0f b6 42 06	 movzx	 eax, BYTE PTR [edx+6]
  00037	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 4552 : 
; 4553 :   return 0; /* OK */

  0003a	33 c0		 xor	 eax, eax
  0003c	5e		 pop	 esi

; 4554 : }

  0003d	c3		 ret	 0
?readChunk_tIME@@YAIPAULodePNGInfo@@PBEI@Z ENDP		; readChunk_tIME
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?readChunk_pHYs@@YAIPAULodePNGInfo@@PBEI@Z
_TEXT	SEGMENT
?readChunk_pHYs@@YAIPAULodePNGInfo@@PBEI@Z PROC		; readChunk_pHYs, COMDAT
; _info$ = ecx
; _data$ = edx

; 4557 : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 4558 :   if(chunkLength != 9) return 74; /*invalid pHYs chunk size*/
; 4559 : 
; 4560 :   info->phys_defined = 1;

  00004	c7 47 78 01 00
	00 00		 mov	 DWORD PTR [edi+120], 1

; 4561 :   info->phys_x = 16777216 * data[0] + 65536 * data[1] + 256 * data[2] + data[3];

  0000b	0f b6 32	 movzx	 esi, BYTE PTR [edx]
  0000e	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  00012	c1 e6 08	 shl	 esi, 8
  00015	03 f0		 add	 esi, eax
  00017	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  0001b	c1 e6 08	 shl	 esi, 8
  0001e	03 f0		 add	 esi, eax
  00020	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00024	c1 e6 08	 shl	 esi, 8
  00027	03 f0		 add	 esi, eax
  00029	89 77 7c	 mov	 DWORD PTR [edi+124], esi

; 4562 :   info->phys_y = 16777216 * data[4] + 65536 * data[5] + 256 * data[6] + data[7];

  0002c	0f b6 4a 04	 movzx	 ecx, BYTE PTR [edx+4]
  00030	0f b6 42 05	 movzx	 eax, BYTE PTR [edx+5]
  00034	c1 e1 08	 shl	 ecx, 8
  00037	03 c8		 add	 ecx, eax
  00039	0f b6 42 06	 movzx	 eax, BYTE PTR [edx+6]
  0003d	c1 e1 08	 shl	 ecx, 8
  00040	03 c8		 add	 ecx, eax
  00042	0f b6 42 07	 movzx	 eax, BYTE PTR [edx+7]
  00046	c1 e1 08	 shl	 ecx, 8
  00049	03 c8		 add	 ecx, eax
  0004b	89 8f 80 00 00
	00		 mov	 DWORD PTR [edi+128], ecx

; 4563 :   info->phys_unit = data[8];

  00051	0f b6 42 08	 movzx	 eax, BYTE PTR [edx+8]
  00055	89 87 84 00 00
	00		 mov	 DWORD PTR [edi+132], eax
  0005b	5f		 pop	 edi

; 4564 : 
; 4565 :   return 0; /* OK */

  0005c	33 c0		 xor	 eax, eax
  0005e	5e		 pop	 esi

; 4566 : }

  0005f	c3		 ret	 0
?readChunk_pHYs@@YAIPAULodePNGInfo@@PBEI@Z ENDP		; readChunk_pHYs
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?decodeGeneric@@YAXPAPAEPAI1PAULodePNGState@@PBEI@Z
_TEXT	SEGMENT
_idat$ = -44						; size = 12
_scanlines$1 = -32					; size = 12
_out$1$ = -20						; size = 4
_w$1$ = -16						; size = 4
_critical_pos$1$ = -12					; size = 4
_unknown$1$ = -8					; size = 4
_IEND$1$ = -1						; size = 1
_h$ = 8							; size = 4
_oldsize$1$ = 12					; size = 4
_state$ = 12						; size = 4
_in$ = 16						; size = 4
_insize$ = 20						; size = 4
?decodeGeneric@@YAXPAPAEPAI1PAULodePNGState@@PBEI@Z PROC ; decodeGeneric, COMDAT
; _out$ = ecx
; _w$ = edx

; 4573 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 4574 :   unsigned char IEND = 0;
; 4575 :   const unsigned char* chunk;
; 4576 :   size_t i;
; 4577 :   ucvector idat; /*the data from idat chunks*/
; 4578 : 
; 4579 :   /*for unknown chunk order*/
; 4580 :   unsigned unknown = 0;
; 4581 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4582 :   unsigned critical_pos = 1; /*1 = after IHDR, 2 = after PLTE, 3 = after IDAT*/
; 4583 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4584 : 
; 4585 :   /*provide some proper output values if error will happen*/
; 4586 :   *out = 0;
; 4587 : 
; 4588 :   state->error = lodepng_inspect(w, h, state, in, insize); /*reads header and resets other parameters in state->info_png*/

  00008	ff 75 14	 push	 DWORD PTR _insize$[ebp]
  0000b	8b 75 0c	 mov	 esi, DWORD PTR _state$[ebp]
  0000e	ff 75 10	 push	 DWORD PTR _in$[ebp]
  00011	8b da		 mov	 ebx, edx
  00013	8b 55 08	 mov	 edx, DWORD PTR _h$[ebp]
  00016	89 4d ec	 mov	 DWORD PTR _out$1$[ebp], ecx
  00019	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0001f	56		 push	 esi
  00020	8b cb		 mov	 ecx, ebx
  00022	89 5d f0	 mov	 DWORD PTR _w$1$[ebp], ebx
  00025	c6 45 ff 00	 mov	 BYTE PTR _IEND$1$[ebp], 0
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _unknown$1$[ebp], 0
  00030	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _critical_pos$1$[ebp], 1
  00037	e8 00 00 00 00	 call	 ?lodepng_inspect@@YAIPAI0PAULodePNGState@@PBEI@Z ; lodepng_inspect
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003f	89 86 28 01 00
	00		 mov	 DWORD PTR [esi+296], eax

; 4589 :   if(state->error) return;

  00045	85 c0		 test	 eax, eax
  00047	0f 85 be 04 00
	00		 jne	 $LN139@decodeGene

; 4590 : 
; 4591 :   ucvector_init(&idat);
; 4592 :   chunk = &in[33]; /*first byte of the first chunk after the header*/

  0004d	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00050	57		 push	 edi

; 246  :   p->size = p->allocsize = 0;

  00051	33 ff		 xor	 edi, edi
  00053	89 45 d4	 mov	 DWORD PTR _idat$[ebp], eax
  00056	89 45 dc	 mov	 DWORD PTR _idat$[ebp+8], eax
  00059	89 7d 0c	 mov	 DWORD PTR _oldsize$1$[ebp], edi
  0005c	89 7d d8	 mov	 DWORD PTR _idat$[ebp+4], edi

; 4590 : 
; 4591 :   ucvector_init(&idat);
; 4592 :   chunk = &in[33]; /*first byte of the first chunk after the header*/

  0005f	8d 59 21	 lea	 ebx, DWORD PTR [ecx+33]
$LL54@decodeGene:

; 4593 : 
; 4594 :   /*loop through the chunks, ignoring unknown chunks and stopping at IEND chunk.
; 4595 :   IDAT data is put at the start of the in buffer*/
; 4596 :   while(!IEND && !state->error)

  00062	83 be 28 01 00
	00 00		 cmp	 DWORD PTR [esi+296], 0
  00069	0f 85 90 04 00
	00		 jne	 $LN135@decodeGene

; 4597 :   {
; 4598 :     unsigned chunkLength;
; 4599 :     const unsigned char* data; /*the data in the chunk*/
; 4600 : 
; 4601 :     /*error: size of the in buffer too small to contain next chunk*/
; 4602 :     if((size_t)((chunk - in) + 12) > insize || chunk < in) CERROR_BREAK(state->error, 30);

  0006f	8b 55 14	 mov	 edx, DWORD PTR _insize$[ebp]
  00072	8b c3		 mov	 eax, ebx
  00074	2b c1		 sub	 eax, ecx
  00076	83 c0 0c	 add	 eax, 12			; 0000000cH
  00079	3b c2		 cmp	 eax, edx
  0007b	0f 87 f6 02 00
	00		 ja	 $LN51@decodeGene
  00081	3b d9		 cmp	 ebx, ecx
  00083	0f 82 ee 02 00
	00		 jb	 $LN51@decodeGene

; 4603 : 
; 4604 :     /*length of the data of the chunk, excluding the length bytes, chunk type and CRC bytes*/
; 4605 :     chunkLength = lodepng_chunk_length(chunk);

  00089	0f b6 3b	 movzx	 edi, BYTE PTR [ebx]
  0008c	0f b6 43 01	 movzx	 eax, BYTE PTR [ebx+1]
  00090	c1 e7 08	 shl	 edi, 8
  00093	0b f8		 or	 edi, eax
  00095	0f b6 43 02	 movzx	 eax, BYTE PTR [ebx+2]

; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];

  00099	c1 e7 08	 shl	 edi, 8

; 4603 : 
; 4604 :     /*length of the data of the chunk, excluding the length bytes, chunk type and CRC bytes*/
; 4605 :     chunkLength = lodepng_chunk_length(chunk);

  0009c	0b f8		 or	 edi, eax
  0009e	0f b6 43 03	 movzx	 eax, BYTE PTR [ebx+3]

; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];

  000a2	c1 e7 08	 shl	 edi, 8
  000a5	0b f8		 or	 edi, eax

; 4606 :     /*error: chunk length larger than the max PNG chunk size*/
; 4607 :     if(chunkLength > 2147483647) CERROR_BREAK(state->error, 63);

  000a7	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  000ad	0f 87 b8 02 00
	00		 ja	 $LN147@decodeGene

; 4608 : 
; 4609 :     if((size_t)((chunk - in) + chunkLength + 12) > insize || (chunk + chunkLength + 12) < in)

  000b3	8b c7		 mov	 eax, edi
  000b5	2b c1		 sub	 eax, ecx
  000b7	83 c0 0c	 add	 eax, 12			; 0000000cH
  000ba	03 c3		 add	 eax, ebx
  000bc	3b c2		 cmp	 eax, edx
  000be	0f 87 9b 02 00
	00		 ja	 $LN48@decodeGene
  000c4	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  000c7	03 c7		 add	 eax, edi
  000c9	3b c1		 cmp	 eax, ecx
  000cb	0f 82 8e 02 00
	00		 jb	 $LN48@decodeGene

; 4612 :     }
; 4613 : 
; 4614 :     data = lodepng_chunk_data_const(chunk);
; 4615 : 
; 4616 :     /*IDAT chunk, containing compressed image data*/
; 4617 :     if(lodepng_chunk_type_equals(chunk, "IDAT"))

  000d1	ba 00 00 00 00	 mov	 edx, OFFSET $SG4294943842
  000d6	8b cb		 mov	 ecx, ebx
  000d8	e8 00 00 00 00	 call	 ?lodepng_chunk_type_equals@@YAEPBEPBD@Z ; lodepng_chunk_type_equals
  000dd	84 c0		 test	 al, al
  000df	74 40		 je	 SHORT $LN47@decodeGene

; 4618 :     {
; 4619 :       size_t oldsize = idat.size;
; 4620 :       if(!ucvector_resize(&idat, oldsize + chunkLength)) CERROR_BREAK(state->error, 83 /*alloc fail*/);

  000e1	8b 55 0c	 mov	 edx, DWORD PTR _oldsize$1$[ebp]
  000e4	8d 4d d4	 lea	 ecx, DWORD PTR _idat$[ebp]
  000e7	8d 14 3a	 lea	 edx, DWORD PTR [edx+edi]
  000ea	e8 00 00 00 00	 call	 ?ucvector_resize@@YAIPAUucvector@@I@Z ; ucvector_resize
  000ef	85 c0		 test	 eax, eax
  000f1	0f 84 3e 02 00
	00		 je	 $LN149@decodeGene

; 4621 :       for(i = 0; i < chunkLength; i++) idat.data[oldsize + i] = data[i];

  000f7	33 c9		 xor	 ecx, ecx
  000f9	85 ff		 test	 edi, edi
  000fb	74 12		 je	 SHORT $LN43@decodeGene
  000fd	8b 55 d4	 mov	 edx, DWORD PTR _idat$[ebp]
  00100	03 55 0c	 add	 edx, DWORD PTR _oldsize$1$[ebp]
$LL45@decodeGene:
  00103	8a 44 19 08	 mov	 al, BYTE PTR [ecx+ebx+8]
  00107	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0010a	41		 inc	 ecx
  0010b	3b cf		 cmp	 ecx, edi
  0010d	72 f4		 jb	 SHORT $LL45@decodeGene
$LN43@decodeGene:

; 4622 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4623 :       critical_pos = 3;

  0010f	8b 45 d8	 mov	 eax, DWORD PTR _idat$[ebp+4]
  00112	c7 45 f4 03 00
	00 00		 mov	 DWORD PTR _critical_pos$1$[ebp], 3
  00119	89 45 0c	 mov	 DWORD PTR _oldsize$1$[ebp], eax
  0011c	e9 cb 01 00 00	 jmp	 $LN172@decodeGene
$LN47@decodeGene:

; 4624 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4625 :     }
; 4626 :     /*IEND chunk*/
; 4627 :     else if(lodepng_chunk_type_equals(chunk, "IEND"))

  00121	ba 00 00 00 00	 mov	 edx, OFFSET $SG4294943841
  00126	8b cb		 mov	 ecx, ebx
  00128	e8 00 00 00 00	 call	 ?lodepng_chunk_type_equals@@YAEPBEPBD@Z ; lodepng_chunk_type_equals
  0012d	84 c0		 test	 al, al
  0012f	74 09		 je	 SHORT $LN41@decodeGene

; 4628 :     {
; 4629 :       IEND = 1;

  00131	c6 45 ff 01	 mov	 BYTE PTR _IEND$1$[ebp], 1
  00135	e9 b2 01 00 00	 jmp	 $LN172@decodeGene
$LN41@decodeGene:

; 4630 :     }
; 4631 :     /*palette chunk (PLTE)*/
; 4632 :     else if(lodepng_chunk_type_equals(chunk, "PLTE"))

  0013a	ba 00 00 00 00	 mov	 edx, OFFSET $SG4294943840
  0013f	8b cb		 mov	 ecx, ebx
  00141	e8 00 00 00 00	 call	 ?lodepng_chunk_type_equals@@YAEPBEPBD@Z ; lodepng_chunk_type_equals
  00146	84 c0		 test	 al, al
  00148	74 2c		 je	 SHORT $LN39@decodeGene

; 4633 :     {
; 4634 :       state->error = readChunk_PLTE(&state->info_png.color, data, chunkLength);

  0014a	8d 8e 94 00 00
	00		 lea	 ecx, DWORD PTR [esi+148]
  00150	57		 push	 edi
  00151	8d 53 08	 lea	 edx, DWORD PTR [ebx+8]
  00154	e8 00 00 00 00	 call	 ?readChunk_PLTE@@YAIPAULodePNGColorMode@@PBEI@Z ; readChunk_PLTE
  00159	83 c4 04	 add	 esp, 4
  0015c	89 86 28 01 00
	00		 mov	 DWORD PTR [esi+296], eax

; 4635 :       if(state->error) break;

  00162	85 c0		 test	 eax, eax
  00164	0f 85 17 02 00
	00		 jne	 $LN53@decodeGene

; 4636 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4637 :       critical_pos = 2;

  0016a	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _critical_pos$1$[ebp], 2
  00171	e9 76 01 00 00	 jmp	 $LN172@decodeGene
$LN39@decodeGene:

; 4638 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4639 :     }
; 4640 :     /*palette transparency chunk (tRNS)*/
; 4641 :     else if(lodepng_chunk_type_equals(chunk, "tRNS"))

  00176	ba 00 00 00 00	 mov	 edx, OFFSET $SG4294943839
  0017b	8b cb		 mov	 ecx, ebx
  0017d	e8 00 00 00 00	 call	 ?lodepng_chunk_type_equals@@YAEPBEPBD@Z ; lodepng_chunk_type_equals
  00182	84 c0		 test	 al, al
  00184	74 14		 je	 SHORT $LN36@decodeGene

; 4642 :     {
; 4643 :       state->error = readChunk_tRNS(&state->info_png.color, data, chunkLength);

  00186	8d 8e 94 00 00
	00		 lea	 ecx, DWORD PTR [esi+148]
  0018c	57		 push	 edi
  0018d	8d 53 08	 lea	 edx, DWORD PTR [ebx+8]
  00190	e8 00 00 00 00	 call	 ?readChunk_tRNS@@YAIPAULodePNGColorMode@@PBEI@Z ; readChunk_tRNS

; 4644 :       if(state->error) break;
; 4645 :     }

  00195	e9 41 01 00 00	 jmp	 $LN174@decodeGene
$LN36@decodeGene:

; 4646 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4647 :     /*background color chunk (bKGD)*/
; 4648 :     else if(lodepng_chunk_type_equals(chunk, "bKGD"))

  0019a	ba 00 00 00 00	 mov	 edx, OFFSET $SG4294943838
  0019f	8b cb		 mov	 ecx, ebx
  001a1	e8 00 00 00 00	 call	 ?lodepng_chunk_type_equals@@YAEPBEPBD@Z ; lodepng_chunk_type_equals
  001a6	84 c0		 test	 al, al
  001a8	74 14		 je	 SHORT $LN33@decodeGene

; 4649 :     {
; 4650 :       state->error = readChunk_bKGD(&state->info_png, data, chunkLength);

  001aa	57		 push	 edi
  001ab	8d 8e 88 00 00
	00		 lea	 ecx, DWORD PTR [esi+136]
  001b1	8d 53 08	 lea	 edx, DWORD PTR [ebx+8]
  001b4	e8 00 00 00 00	 call	 ?readChunk_bKGD@@YAIPAULodePNGInfo@@PBEI@Z ; readChunk_bKGD

; 4651 :       if(state->error) break;
; 4652 :     }

  001b9	e9 1d 01 00 00	 jmp	 $LN174@decodeGene
$LN33@decodeGene:

; 4653 :     /*text chunk (tEXt)*/
; 4654 :     else if(lodepng_chunk_type_equals(chunk, "tEXt"))

  001be	ba 00 00 00 00	 mov	 edx, OFFSET $SG4294943837
  001c3	8b cb		 mov	 ecx, ebx
  001c5	e8 00 00 00 00	 call	 ?lodepng_chunk_type_equals@@YAEPBEPBD@Z ; lodepng_chunk_type_equals
  001ca	84 c0		 test	 al, al
  001cc	74 1e		 je	 SHORT $LN30@decodeGene

; 4655 :     {
; 4656 :       if(state->decoder.read_text_chunks)

  001ce	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  001d2	0f 84 14 01 00
	00		 je	 $LN172@decodeGene

; 4657 :       {
; 4658 :         state->error = readChunk_tEXt(&state->info_png, data, chunkLength);

  001d8	57		 push	 edi
  001d9	8d 8e 88 00 00
	00		 lea	 ecx, DWORD PTR [esi+136]
  001df	8d 53 08	 lea	 edx, DWORD PTR [ebx+8]
  001e2	e8 00 00 00 00	 call	 ?readChunk_tEXt@@YAIPAULodePNGInfo@@PBEI@Z ; readChunk_tEXt

; 4659 :         if(state->error) break;
; 4660 :       }
; 4661 :     }

  001e7	e9 ef 00 00 00	 jmp	 $LN174@decodeGene
$LN30@decodeGene:

; 4662 :     /*compressed text chunk (zTXt)*/
; 4663 :     else if(lodepng_chunk_type_equals(chunk, "zTXt"))

  001ec	ba 00 00 00 00	 mov	 edx, OFFSET $SG4294943836
  001f1	8b cb		 mov	 ecx, ebx
  001f3	e8 00 00 00 00	 call	 ?lodepng_chunk_type_equals@@YAEPBEPBD@Z ; lodepng_chunk_type_equals
  001f8	84 c0		 test	 al, al
  001fa	74 25		 je	 SHORT $LN26@decodeGene

; 4664 :     {
; 4665 :       if(state->decoder.read_text_chunks)

  001fc	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  00200	0f 84 e6 00 00
	00		 je	 $LN172@decodeGene

; 4666 :       {
; 4667 :         state->error = readChunk_zTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);

  00206	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  00209	57		 push	 edi
  0020a	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  0020d	50		 push	 eax
  0020e	8d 8e 88 00 00
	00		 lea	 ecx, DWORD PTR [esi+136]
  00214	e8 00 00 00 00	 call	 ?readChunk_zTXt@@YAIPAULodePNGInfo@@PBULodePNGDecompressSettings@@PBEI@Z ; readChunk_zTXt
  00219	83 c4 08	 add	 esp, 8

; 4668 :         if(state->error) break;
; 4669 :       }
; 4670 :     }

  0021c	e9 bd 00 00 00	 jmp	 $LN175@decodeGene
$LN26@decodeGene:

; 4671 :     /*international text chunk (iTXt)*/
; 4672 :     else if(lodepng_chunk_type_equals(chunk, "iTXt"))

  00221	ba 00 00 00 00	 mov	 edx, OFFSET $SG4294943835
  00226	8b cb		 mov	 ecx, ebx
  00228	e8 00 00 00 00	 call	 ?lodepng_chunk_type_equals@@YAEPBEPBD@Z ; lodepng_chunk_type_equals
  0022d	84 c0		 test	 al, al
  0022f	74 25		 je	 SHORT $LN22@decodeGene

; 4673 :     {
; 4674 :       if(state->decoder.read_text_chunks)

  00231	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  00235	0f 84 b1 00 00
	00		 je	 $LN172@decodeGene

; 4675 :       {
; 4676 :         state->error = readChunk_iTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);

  0023b	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  0023e	57		 push	 edi
  0023f	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00242	50		 push	 eax
  00243	8d 8e 88 00 00
	00		 lea	 ecx, DWORD PTR [esi+136]
  00249	e8 00 00 00 00	 call	 ?readChunk_iTXt@@YAIPAULodePNGInfo@@PBULodePNGDecompressSettings@@PBEI@Z ; readChunk_iTXt
  0024e	83 c4 08	 add	 esp, 8

; 4677 :         if(state->error) break;
; 4678 :       }
; 4679 :     }

  00251	e9 88 00 00 00	 jmp	 $LN175@decodeGene
$LN22@decodeGene:

; 4680 :     else if(lodepng_chunk_type_equals(chunk, "tIME"))

  00256	ba 00 00 00 00	 mov	 edx, OFFSET $SG4294943834
  0025b	8b cb		 mov	 ecx, ebx
  0025d	e8 00 00 00 00	 call	 ?lodepng_chunk_type_equals@@YAEPBEPBD@Z ; lodepng_chunk_type_equals
  00262	84 c0		 test	 al, al
  00264	74 1c		 je	 SHORT $LN18@decodeGene

; 2656 : }
; 2657 : 
; 2658 : size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)
; 2659 : {
; 2660 :   return (w * h * lodepng_get_bpp_lct(colortype, bitdepth) + 7) / 8;
; 2661 : }
; 2662 : 
; 2663 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2664 : 
; 2665 : static void LodePNGUnknownChunks_init(LodePNGInfo* info)
; 2666 : {
; 2667 :   unsigned i;
; 2668 :   for(i = 0; i < 3; i++) info->unknown_chunks_data[i] = 0;
; 2669 :   for(i = 0; i < 3; i++) info->unknown_chunks_size[i] = 0;
; 2670 : }
; 2671 : 
; 2672 : static void LodePNGUnknownChunks_cleanup(LodePNGInfo* info)
; 2673 : {
; 2674 :   unsigned i;
; 2675 :   for(i = 0; i < 3; i++) lodepng_free(info->unknown_chunks_data[i]);
; 2676 : }
; 2677 : 
; 2678 : static unsigned LodePNGUnknownChunks_copy(LodePNGInfo* dest, const LodePNGInfo* src)
; 2679 : {
; 2680 :   unsigned i;
; 2681 : 
; 2682 :   LodePNGUnknownChunks_cleanup(dest);
; 2683 : 
; 2684 :   for(i = 0; i < 3; i++)
; 2685 :   {
; 2686 :     size_t j;
; 2687 :     dest->unknown_chunks_size[i] = src->unknown_chunks_size[i];
; 2688 :     dest->unknown_chunks_data[i] = (unsigned char*)lodepng_malloc(src->unknown_chunks_size[i]);
; 2689 :     if(!dest->unknown_chunks_data[i] && dest->unknown_chunks_size[i]) return 83; /*alloc fail*/
; 2690 :     for(j = 0; j < src->unknown_chunks_size[i]; j++)
; 2691 :     {
; 2692 :       dest->unknown_chunks_data[i][j] = src->unknown_chunks_data[i][j];
; 2693 :     }
; 2694 :   }
; 2695 : 
; 2696 :   return 0;
; 2697 : }
; 2698 : 
; 2699 : /******************************************************************************/
; 2700 : 
; 2701 : static void LodePNGText_init(LodePNGInfo* info)
; 2702 : {
; 2703 :   info->text_num = 0;
; 2704 :   info->text_keys = NULL;
; 2705 :   info->text_strings = NULL;
; 2706 : }
; 2707 : 
; 2708 : static void LodePNGText_cleanup(LodePNGInfo* info)
; 2709 : {
; 2710 :   size_t i;
; 2711 :   for(i = 0; i < info->text_num; i++)
; 2712 :   {
; 2713 :     string_cleanup(&info->text_keys[i]);
; 2714 :     string_cleanup(&info->text_strings[i]);
; 2715 :   }
; 2716 :   lodepng_free(info->text_keys);
; 2717 :   lodepng_free(info->text_strings);
; 2718 : }
; 2719 : 
; 2720 : static unsigned LodePNGText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2721 : {
; 2722 :   size_t i = 0;
; 2723 :   dest->text_keys = 0;
; 2724 :   dest->text_strings = 0;
; 2725 :   dest->text_num = 0;
; 2726 :   for(i = 0; i < source->text_num; i++)
; 2727 :   {
; 2728 :     CERROR_TRY_RETURN(lodepng_add_text(dest, source->text_keys[i], source->text_strings[i]));
; 2729 :   }
; 2730 :   return 0;
; 2731 : }
; 2732 : 
; 2733 : void lodepng_clear_text(LodePNGInfo* info)
; 2734 : {
; 2735 :   LodePNGText_cleanup(info);
; 2736 : }
; 2737 : 
; 2738 : unsigned lodepng_add_text(LodePNGInfo* info, const char* key, const char* str)
; 2739 : {
; 2740 :   char** new_keys = (char**)(lodepng_realloc(info->text_keys, sizeof(char*) * (info->text_num + 1)));
; 2741 :   char** new_strings = (char**)(lodepng_realloc(info->text_strings, sizeof(char*) * (info->text_num + 1)));
; 2742 :   if(!new_keys || !new_strings)
; 2743 :   {
; 2744 :     lodepng_free(new_keys);
; 2745 :     lodepng_free(new_strings);
; 2746 :     return 83; /*alloc fail*/
; 2747 :   }
; 2748 : 
; 2749 :   info->text_num++;
; 2750 :   info->text_keys = new_keys;
; 2751 :   info->text_strings = new_strings;
; 2752 : 
; 2753 :   string_init(&info->text_keys[info->text_num - 1]);
; 2754 :   string_set(&info->text_keys[info->text_num - 1], key);
; 2755 : 
; 2756 :   string_init(&info->text_strings[info->text_num - 1]);
; 2757 :   string_set(&info->text_strings[info->text_num - 1], str);
; 2758 : 
; 2759 :   return 0;
; 2760 : }
; 2761 : 
; 2762 : /******************************************************************************/
; 2763 : 
; 2764 : static void LodePNGIText_init(LodePNGInfo* info)
; 2765 : {
; 2766 :   info->itext_num = 0;
; 2767 :   info->itext_keys = NULL;
; 2768 :   info->itext_langtags = NULL;
; 2769 :   info->itext_transkeys = NULL;
; 2770 :   info->itext_strings = NULL;
; 2771 : }
; 2772 : 
; 2773 : static void LodePNGIText_cleanup(LodePNGInfo* info)
; 2774 : {
; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)
; 2777 :   {
; 2778 :     string_cleanup(&info->itext_keys[i]);
; 2779 :     string_cleanup(&info->itext_langtags[i]);
; 2780 :     string_cleanup(&info->itext_transkeys[i]);
; 2781 :     string_cleanup(&info->itext_strings[i]);
; 2782 :   }
; 2783 :   lodepng_free(info->itext_keys);
; 2784 :   lodepng_free(info->itext_langtags);
; 2785 :   lodepng_free(info->itext_transkeys);
; 2786 :   lodepng_free(info->itext_strings);
; 2787 : }
; 2788 : 
; 2789 : static unsigned LodePNGIText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2790 : {
; 2791 :   size_t i = 0;
; 2792 :   dest->itext_keys = 0;
; 2793 :   dest->itext_langtags = 0;
; 2794 :   dest->itext_transkeys = 0;
; 2795 :   dest->itext_strings = 0;
; 2796 :   dest->itext_num = 0;
; 2797 :   for(i = 0; i < source->itext_num; i++)
; 2798 :   {
; 2799 :     CERROR_TRY_RETURN(lodepng_add_itext(dest, source->itext_keys[i], source->itext_langtags[i],
; 2800 :                                         source->itext_transkeys[i], source->itext_strings[i]));
; 2801 :   }
; 2802 :   return 0;
; 2803 : }
; 2804 : 
; 2805 : void lodepng_clear_itext(LodePNGInfo* info)
; 2806 : {
; 2807 :   LodePNGIText_cleanup(info);
; 2808 : }
; 2809 : 
; 2810 : unsigned lodepng_add_itext(LodePNGInfo* info, const char* key, const char* langtag,
; 2811 :                            const char* transkey, const char* str)
; 2812 : {
; 2813 :   char** new_keys = (char**)(lodepng_realloc(info->itext_keys, sizeof(char*) * (info->itext_num + 1)));
; 2814 :   char** new_langtags = (char**)(lodepng_realloc(info->itext_langtags, sizeof(char*) * (info->itext_num + 1)));
; 2815 :   char** new_transkeys = (char**)(lodepng_realloc(info->itext_transkeys, sizeof(char*) * (info->itext_num + 1)));
; 2816 :   char** new_strings = (char**)(lodepng_realloc(info->itext_strings, sizeof(char*) * (info->itext_num + 1)));
; 2817 :   if(!new_keys || !new_langtags || !new_transkeys || !new_strings)
; 2818 :   {
; 2819 :     lodepng_free(new_keys);
; 2820 :     lodepng_free(new_langtags);
; 2821 :     lodepng_free(new_transkeys);
; 2822 :     lodepng_free(new_strings);
; 2823 :     return 83; /*alloc fail*/
; 2824 :   }
; 2825 : 
; 2826 :   info->itext_num++;
; 2827 :   info->itext_keys = new_keys;
; 2828 :   info->itext_langtags = new_langtags;
; 2829 :   info->itext_transkeys = new_transkeys;
; 2830 :   info->itext_strings = new_strings;
; 2831 : 
; 2832 :   string_init(&info->itext_keys[info->itext_num - 1]);
; 2833 :   string_set(&info->itext_keys[info->itext_num - 1], key);
; 2834 : 
; 2835 :   string_init(&info->itext_langtags[info->itext_num - 1]);
; 2836 :   string_set(&info->itext_langtags[info->itext_num - 1], langtag);
; 2837 : 
; 2838 :   string_init(&info->itext_transkeys[info->itext_num - 1]);
; 2839 :   string_set(&info->itext_transkeys[info->itext_num - 1], transkey);
; 2840 : 
; 2841 :   string_init(&info->itext_strings[info->itext_num - 1]);
; 2842 :   string_set(&info->itext_strings[info->itext_num - 1], str);
; 2843 : 
; 2844 :   return 0;
; 2845 : }
; 2846 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2847 : 
; 2848 : void lodepng_info_init(LodePNGInfo* info)
; 2849 : {
; 2850 :   lodepng_color_mode_init(&info->color);
; 2851 :   info->interlace_method = 0;
; 2852 :   info->compression_method = 0;
; 2853 :   info->filter_method = 0;
; 2854 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2855 :   info->background_defined = 0;
; 2856 :   info->background_r = info->background_g = info->background_b = 0;
; 2857 : 
; 2858 :   LodePNGText_init(info);
; 2859 :   LodePNGIText_init(info);
; 2860 : 
; 2861 :   info->time_defined = 0;
; 2862 :   info->phys_defined = 0;
; 2863 : 
; 2864 :   LodePNGUnknownChunks_init(info);
; 2865 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2866 : }
; 2867 : 
; 2868 : void lodepng_info_cleanup(LodePNGInfo* info)
; 2869 : {
; 2870 :   lodepng_color_mode_cleanup(&info->color);
; 2871 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2872 :   LodePNGText_cleanup(info);
; 2873 :   LodePNGIText_cleanup(info);
; 2874 : 
; 2875 :   LodePNGUnknownChunks_cleanup(info);
; 2876 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2877 : }
; 2878 : 
; 2879 : unsigned lodepng_info_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2880 : {
; 2881 :   lodepng_info_cleanup(dest);
; 2882 :   *dest = *source;
; 2883 :   lodepng_color_mode_init(&dest->color);
; 2884 :   CERROR_TRY_RETURN(lodepng_color_mode_copy(&dest->color, &source->color));
; 2885 : 
; 2886 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2887 :   CERROR_TRY_RETURN(LodePNGText_copy(dest, source));
; 2888 :   CERROR_TRY_RETURN(LodePNGIText_copy(dest, source));
; 2889 : 
; 2890 :   LodePNGUnknownChunks_init(dest);
; 2891 :   CERROR_TRY_RETURN(LodePNGUnknownChunks_copy(dest, source));
; 2892 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2893 :   return 0;
; 2894 : }
; 2895 : 
; 2896 : void lodepng_info_swap(LodePNGInfo* a, LodePNGInfo* b)
; 2897 : {
; 2898 :   LodePNGInfo temp = *a;
; 2899 :   *a = *b;
; 2900 :   *b = temp;
; 2901 : }
; 2902 : 
; 2903 : /* ////////////////////////////////////////////////////////////////////////// */
; 2904 : 
; 2905 : /*index: bitgroup index, bits: bitgroup size(1, 2 or 4, in: bitgroup value, out: octet array to add bits to*/
; 2906 : static void addColorBits(unsigned char* out, size_t index, unsigned bits, unsigned in)
; 2907 : {
; 2908 :   /*p = the partial index in the byte, e.g. with 4 palettebits it is 0 for first half or 1 for second half*/
; 2909 :   unsigned p = index % (8 / bits);
; 2910 :   in &= (1 << bits) - 1; /*filter out any other bits of the input value*/
; 2911 :   in = in << (bits * (8 / bits - p - 1));
; 2912 :   if(p == 0) out[index * bits / 8] = in;
; 2913 :   else out[index * bits / 8] |= in;
; 2914 : }
; 2915 : 
; 2916 : typedef struct ColorTree ColorTree;
; 2917 : 
; 2918 : /*
; 2919 : One node of a color tree
; 2920 : This is the data structure used to count the number of unique colors and to get a palette
; 2921 : index for a color. It's like an octree, but because the alpha channel is used too, each
; 2922 : node has 16 instead of 8 children.
; 2923 : */
; 2924 : struct ColorTree
; 2925 : {
; 2926 :   ColorTree* children[16]; /*up to 16 pointers to ColorTree of next level*/
; 2927 :   int index; /*the payload. Only has a meaningful value if this is in the last level*/
; 2928 : };
; 2929 : 
; 2930 : static void color_tree_init(ColorTree* tree)
; 2931 : {
; 2932 :   int i;
; 2933 :   for(i = 0; i < 16; i++) tree->children[i] = 0;
; 2934 :   tree->index = -1;
; 2935 : }
; 2936 : 
; 2937 : static void color_tree_cleanup(ColorTree* tree)
; 2938 : {
; 2939 :   int i;
; 2940 :   for(i = 0; i < 16; i++)
; 2941 :   {
; 2942 :     if(tree->children[i])
; 2943 :     {
; 2944 :       color_tree_cleanup(tree->children[i]);
; 2945 :       lodepng_free(tree->children[i]);
; 2946 :     }
; 2947 :   }
; 2948 : }
; 2949 : 
; 2950 : /*returns -1 if color not present, its index otherwise*/
; 2951 : static int color_tree_get(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2952 : {
; 2953 :   int bit = 0;
; 2954 :   for(bit = 0; bit < 8; bit++)
; 2955 :   {
; 2956 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
; 2957 :     if(!tree->children[i]) return -1;
; 2958 :     else tree = tree->children[i];
; 2959 :   }
; 2960 :   return tree ? tree->index : -1;
; 2961 : }
; 2962 : 
; 2963 : #ifdef LODEPNG_COMPILE_ENCODER
; 2964 : static int color_tree_has(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2965 : {
; 2966 :   return color_tree_get(tree, r, g, b, a) >= 0;
; 2967 : }
; 2968 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2969 : 
; 2970 : /*color is not allowed to already exist.
; 2971 : Index should be >= 0 (it's signed to be compatible with using -1 for "doesn't exist")*/
; 2972 : static void color_tree_add(ColorTree* tree,
; 2973 :                            unsigned char r, unsigned char g, unsigned char b, unsigned char a, int index)
; 2974 : {
; 2975 :   int bit;
; 2976 :   for(bit = 0; bit < 8; bit++)
; 2977 :   {
; 2978 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
; 2979 :     if(!tree->children[i])
; 2980 :     {
; 2981 :       tree->children[i] = (ColorTree*)lodepng_malloc(sizeof(ColorTree));
; 2982 :       color_tree_init(tree->children[i]);
; 2983 :     }
; 2984 :     tree = tree->children[i];
; 2985 :   }
; 2986 :   tree->index = index;
; 2987 : }
; 2988 : 
; 2989 : /*put a pixel, given its RGBA color, into image of any color type*/
; 2990 : static unsigned rgba8ToPixel(unsigned char* out, size_t i,
; 2991 :                              const LodePNGColorMode* mode, ColorTree* tree /*for palette*/,
; 2992 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2993 : {
; 2994 :   if(mode->colortype == LCT_GREY)
; 2995 :   {
; 2996 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 2997 :     if(mode->bitdepth == 8) out[i] = grey;
; 2998 :     else if(mode->bitdepth == 16) out[i * 2 + 0] = out[i * 2 + 1] = grey;
; 2999 :     else
; 3000 :     {
; 3001 :       /*take the most significant bits of grey*/
; 3002 :       grey = (grey >> (8 - mode->bitdepth)) & ((1 << mode->bitdepth) - 1);
; 3003 :       addColorBits(out, i, mode->bitdepth, grey);
; 3004 :     }
; 3005 :   }
; 3006 :   else if(mode->colortype == LCT_RGB)
; 3007 :   {
; 3008 :     if(mode->bitdepth == 8)
; 3009 :     {
; 3010 :       out[i * 3 + 0] = r;
; 3011 :       out[i * 3 + 1] = g;
; 3012 :       out[i * 3 + 2] = b;
; 3013 :     }
; 3014 :     else
; 3015 :     {
; 3016 :       out[i * 6 + 0] = out[i * 6 + 1] = r;
; 3017 :       out[i * 6 + 2] = out[i * 6 + 3] = g;
; 3018 :       out[i * 6 + 4] = out[i * 6 + 5] = b;
; 3019 :     }
; 3020 :   }
; 3021 :   else if(mode->colortype == LCT_PALETTE)
; 3022 :   {
; 3023 :     int index = color_tree_get(tree, r, g, b, a);
; 3024 :     if(index < 0) return 82; /*color not in palette*/
; 3025 :     if(mode->bitdepth == 8) out[i] = index;
; 3026 :     else addColorBits(out, i, mode->bitdepth, index);
; 3027 :   }
; 3028 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3029 :   {
; 3030 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 3031 :     if(mode->bitdepth == 8)
; 3032 :     {
; 3033 :       out[i * 2 + 0] = grey;
; 3034 :       out[i * 2 + 1] = a;
; 3035 :     }
; 3036 :     else if(mode->bitdepth == 16)
; 3037 :     {
; 3038 :       out[i * 4 + 0] = out[i * 4 + 1] = grey;
; 3039 :       out[i * 4 + 2] = out[i * 4 + 3] = a;
; 3040 :     }
; 3041 :   }
; 3042 :   else if(mode->colortype == LCT_RGBA)
; 3043 :   {
; 3044 :     if(mode->bitdepth == 8)
; 3045 :     {
; 3046 :       out[i * 4 + 0] = r;
; 3047 :       out[i * 4 + 1] = g;
; 3048 :       out[i * 4 + 2] = b;
; 3049 :       out[i * 4 + 3] = a;
; 3050 :     }
; 3051 :     else
; 3052 :     {
; 3053 :       out[i * 8 + 0] = out[i * 8 + 1] = r;
; 3054 :       out[i * 8 + 2] = out[i * 8 + 3] = g;
; 3055 :       out[i * 8 + 4] = out[i * 8 + 5] = b;
; 3056 :       out[i * 8 + 6] = out[i * 8 + 7] = a;
; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/
; 3061 : }
; 3062 : 
; 3063 : /*put a pixel, given its RGBA16 color, into image of any color 16-bitdepth type*/
; 3064 : static unsigned rgba16ToPixel(unsigned char* out, size_t i,
; 3065 :                               const LodePNGColorMode* mode,
; 3066 :                               unsigned short r, unsigned short g, unsigned short b, unsigned short a)
; 3067 : {
; 3068 :   if(mode->bitdepth != 16) return 85; /*must be 16 for this function*/
; 3069 :   if(mode->colortype == LCT_GREY)
; 3070 :   {
; 3071 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3072 :     out[i * 2 + 0] = (grey >> 8) & 255;
; 3073 :     out[i * 2 + 1] = grey & 255;
; 3074 :   }
; 3075 :   else if(mode->colortype == LCT_RGB)
; 3076 :   {
; 3077 :     out[i * 6 + 0] = (r >> 8) & 255;
; 3078 :     out[i * 6 + 1] = r & 255;
; 3079 :     out[i * 6 + 2] = (g >> 8) & 255;
; 3080 :     out[i * 6 + 3] = g & 255;
; 3081 :     out[i * 6 + 4] = (b >> 8) & 255;
; 3082 :     out[i * 6 + 5] = b & 255;
; 3083 :   }
; 3084 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3085 :   {
; 3086 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3087 :     out[i * 4 + 0] = (grey >> 8) & 255;
; 3088 :     out[i * 4 + 1] = grey & 255;
; 3089 :     out[i * 4 + 2] = (a >> 8) & 255;
; 3090 :     out[i * 4 + 3] = a & 255;
; 3091 :   }
; 3092 :   else if(mode->colortype == LCT_RGBA)
; 3093 :   {
; 3094 :     out[i * 8 + 0] = (r >> 8) & 255;
; 3095 :     out[i * 8 + 1] = r & 255;
; 3096 :     out[i * 8 + 2] = (g >> 8) & 255;
; 3097 :     out[i * 8 + 3] = g & 255;
; 3098 :     out[i * 8 + 4] = (b >> 8) & 255;
; 3099 :     out[i * 8 + 5] = b & 255;
; 3100 :     out[i * 8 + 6] = (a >> 8) & 255;
; 3101 :     out[i * 8 + 7] = a & 255;
; 3102 :   }
; 3103 : 
; 3104 :   return 0; /*no error*/
; 3105 : }
; 3106 : 
; 3107 : /*Get RGBA8 color of pixel with index i (y * width + x) from the raw image with given color type.*/
; 3108 : static unsigned getPixelColorRGBA8(unsigned char* r, unsigned char* g,
; 3109 :                                    unsigned char* b, unsigned char* a,
; 3110 :                                    const unsigned char* in, size_t i,
; 3111 :                                    const LodePNGColorMode* mode,
; 3112 :                                    unsigned fix_png)
; 3113 : {
; 3114 :   if(mode->colortype == LCT_GREY)
; 3115 :   {
; 3116 :     if(mode->bitdepth == 8)
; 3117 :     {
; 3118 :       *r = *g = *b = in[i];
; 3119 :       if(mode->key_defined && *r == mode->key_r) *a = 0;
; 3120 :       else *a = 255;
; 3121 :     }
; 3122 :     else if(mode->bitdepth == 16)
; 3123 :     {
; 3124 :       *r = *g = *b = in[i * 2 + 0];
; 3125 :       if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
; 3126 :       else *a = 255;
; 3127 :     }
; 3128 :     else
; 3129 :     {
; 3130 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
; 3131 :       size_t j = i * mode->bitdepth;
; 3132 :       unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3133 :       *r = *g = *b = (value * 255) / highest;
; 3134 :       if(mode->key_defined && value == mode->key_r) *a = 0;
; 3135 :       else *a = 255;
; 3136 :     }
; 3137 :   }
; 3138 :   else if(mode->colortype == LCT_RGB)
; 3139 :   {
; 3140 :     if(mode->bitdepth == 8)
; 3141 :     {
; 3142 :       *r = in[i * 3 + 0]; *g = in[i * 3 + 1]; *b = in[i * 3 + 2];
; 3143 :       if(mode->key_defined && *r == mode->key_r && *g == mode->key_g && *b == mode->key_b) *a = 0;
; 3144 :       else *a = 255;
; 3145 :     }
; 3146 :     else
; 3147 :     {
; 3148 :       *r = in[i * 6 + 0];
; 3149 :       *g = in[i * 6 + 2];
; 3150 :       *b = in[i * 6 + 4];
; 3151 :       if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3152 :          && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3153 :          && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
; 3154 :       else *a = 255;
; 3155 :     }
; 3156 :   }
; 3157 :   else if(mode->colortype == LCT_PALETTE)
; 3158 :   {
; 3159 :     unsigned index;
; 3160 :     if(mode->bitdepth == 8) index = in[i];
; 3161 :     else
; 3162 :     {
; 3163 :       size_t j = i * mode->bitdepth;
; 3164 :       index = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3165 :     }
; 3166 : 
; 3167 :     if(index >= mode->palettesize)
; 3168 :     {
; 3169 :       /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3170 :       if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/
; 3171 :       *r = *g = *b = 0;
; 3172 :       *a = 255;
; 3173 :     }
; 3174 :     else
; 3175 :     {
; 3176 :       *r = mode->palette[index * 4 + 0];
; 3177 :       *g = mode->palette[index * 4 + 1];
; 3178 :       *b = mode->palette[index * 4 + 2];
; 3179 :       *a = mode->palette[index * 4 + 3];
; 3180 :     }
; 3181 :   }
; 3182 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3183 :   {
; 3184 :     if(mode->bitdepth == 8)
; 3185 :     {
; 3186 :       *r = *g = *b = in[i * 2 + 0];
; 3187 :       *a = in[i * 2 + 1];
; 3188 :     }
; 3189 :     else
; 3190 :     {
; 3191 :       *r = *g = *b = in[i * 4 + 0];
; 3192 :       *a = in[i * 4 + 2];
; 3193 :     }
; 3194 :   }
; 3195 :   else if(mode->colortype == LCT_RGBA)
; 3196 :   {
; 3197 :     if(mode->bitdepth == 8)
; 3198 :     {
; 3199 :       *r = in[i * 4 + 0];
; 3200 :       *g = in[i * 4 + 1];
; 3201 :       *b = in[i * 4 + 2];
; 3202 :       *a = in[i * 4 + 3];
; 3203 :     }
; 3204 :     else
; 3205 :     {
; 3206 :       *r = in[i * 8 + 0];
; 3207 :       *g = in[i * 8 + 2];
; 3208 :       *b = in[i * 8 + 4];
; 3209 :       *a = in[i * 8 + 6];
; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/
; 3214 : }
; 3215 : 
; 3216 : /*Similar to getPixelColorRGBA8, but with all the for loops inside of the color
; 3217 : mode test cases, optimized to convert the colors much faster, when converting
; 3218 : to RGBA or RGB with 8 bit per cannel. buffer must be RGBA or RGB output with
; 3219 : enough memory, if has_alpha is true the output is RGBA. mode has the color mode
; 3220 : of the input buffer.*/
; 3221 : static unsigned getPixelColorsRGBA8(unsigned char* buffer, size_t numpixels,
; 3222 :                                     unsigned has_alpha, const unsigned char* in,
; 3223 :                                     const LodePNGColorMode* mode,
; 3224 :                                     unsigned fix_png)
; 3225 : {
; 3226 :   unsigned num_channels = has_alpha ? 4 : 3;
; 3227 :   size_t i;
; 3228 :   if(mode->colortype == LCT_GREY)
; 3229 :   {
; 3230 :     if(mode->bitdepth == 8)
; 3231 :     {
; 3232 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3233 :       {
; 3234 :         buffer[0] = buffer[1] = buffer[2] = in[i];
; 3235 :         if(has_alpha) buffer[3] = mode->key_defined && in[i] == mode->key_r ? 0 : 255;
; 3236 :       }
; 3237 :     }
; 3238 :     else if(mode->bitdepth == 16)
; 3239 :     {
; 3240 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3241 :       {
; 3242 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2];
; 3243 :         if(has_alpha) buffer[3] = mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r ? 0 : 255;
; 3244 :       }
; 3245 :     }
; 3246 :     else
; 3247 :     {
; 3248 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
; 3249 :       size_t j = 0;
; 3250 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3251 :       {
; 3252 :         unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3253 :         buffer[0] = buffer[1] = buffer[2] = (value * 255) / highest;
; 3254 :         if(has_alpha) buffer[3] = mode->key_defined && value == mode->key_r ? 0 : 255;
; 3255 :       }
; 3256 :     }
; 3257 :   }
; 3258 :   else if(mode->colortype == LCT_RGB)
; 3259 :   {
; 3260 :     if(mode->bitdepth == 8)
; 3261 :     {
; 3262 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3263 :       {
; 3264 :         buffer[0] = in[i * 3 + 0];
; 3265 :         buffer[1] = in[i * 3 + 1];
; 3266 :         buffer[2] = in[i * 3 + 2];
; 3267 :         if(has_alpha) buffer[3] = mode->key_defined && buffer[0] == mode->key_r
; 3268 :            && buffer[1]== mode->key_g && buffer[2] == mode->key_b ? 0 : 255;
; 3269 :       }
; 3270 :     }
; 3271 :     else
; 3272 :     {
; 3273 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3274 :       {
; 3275 :         buffer[0] = in[i * 6 + 0];
; 3276 :         buffer[1] = in[i * 6 + 2];
; 3277 :         buffer[2] = in[i * 6 + 4];
; 3278 :         if(has_alpha) buffer[3] = mode->key_defined
; 3279 :            && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3280 :            && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3281 :            && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b ? 0 : 255;
; 3282 :       }
; 3283 :     }
; 3284 :   }
; 3285 :   else if(mode->colortype == LCT_PALETTE)
; 3286 :   {
; 3287 :     unsigned index;
; 3288 :     size_t j = 0;
; 3289 :     for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3290 :     {
; 3291 :       if(mode->bitdepth == 8) index = in[i];
; 3292 :       else index = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3293 : 
; 3294 :       if(index >= mode->palettesize)
; 3295 :       {
; 3296 :         /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3297 :         if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/
; 3298 :         buffer[0] = buffer[1] = buffer[2] = 0;
; 3299 :         if(has_alpha) buffer[3] = 255;
; 3300 :       }
; 3301 :       else
; 3302 :       {
; 3303 :         buffer[0] = mode->palette[index * 4 + 0];
; 3304 :         buffer[1] = mode->palette[index * 4 + 1];
; 3305 :         buffer[2] = mode->palette[index * 4 + 2];
; 3306 :         if(has_alpha) buffer[3] = mode->palette[index * 4 + 3];
; 3307 :       }
; 3308 :     }
; 3309 :   }
; 3310 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3311 :   {
; 3312 :     if(mode->bitdepth == 8)
; 3313 :     {
; 3314 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3315 :       {
; 3316 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2 + 0];
; 3317 :         if(has_alpha) buffer[3] = in[i * 2 + 1];
; 3318 :       }
; 3319 :     }
; 3320 :     else
; 3321 :     {
; 3322 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3323 :       {
; 3324 :         buffer[0] = buffer[1] = buffer[2] = in[i * 4 + 0];
; 3325 :         if(has_alpha) buffer[3] = in[i * 4 + 2];
; 3326 :       }
; 3327 :     }
; 3328 :   }
; 3329 :   else if(mode->colortype == LCT_RGBA)
; 3330 :   {
; 3331 :     if(mode->bitdepth == 8)
; 3332 :     {
; 3333 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3334 :       {
; 3335 :         buffer[0] = in[i * 4 + 0];
; 3336 :         buffer[1] = in[i * 4 + 1];
; 3337 :         buffer[2] = in[i * 4 + 2];
; 3338 :         if(has_alpha) buffer[3] = in[i * 4 + 3];
; 3339 :       }
; 3340 :     }
; 3341 :     else
; 3342 :     {
; 3343 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3344 :       {
; 3345 :         buffer[0] = in[i * 8 + 0];
; 3346 :         buffer[1] = in[i * 8 + 2];
; 3347 :         buffer[2] = in[i * 8 + 4];
; 3348 :         if(has_alpha) buffer[3] = in[i * 8 + 6];
; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/
; 3354 : }
; 3355 : 
; 3356 : /*Get RGBA16 color of pixel with index i (y * width + x) from the raw image with
; 3357 : given color type, but the given color type must be 16-bit itself.*/
; 3358 : static unsigned getPixelColorRGBA16(unsigned short* r, unsigned short* g, unsigned short* b, unsigned short* a,
; 3359 :                                     const unsigned char* in, size_t i, const LodePNGColorMode* mode)
; 3360 : {
; 3361 :   if(mode->bitdepth != 16) return 85; /*error: this function only supports 16-bit input*/
; 3362 : 
; 3363 :   if(mode->colortype == LCT_GREY)
; 3364 :   {
; 3365 :     *r = *g = *b = 256 * in[i * 2 + 0] + in[i * 2 + 1];
; 3366 :     if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
; 3367 :     else *a = 65535;
; 3368 :   }
; 3369 :   else if(mode->colortype == LCT_RGB)
; 3370 :   {
; 3371 :     *r = 256 * in[i * 6 + 0] + in[i * 6 + 1];
; 3372 :     *g = 256 * in[i * 6 + 2] + in[i * 6 + 3];
; 3373 :     *b = 256 * in[i * 6 + 4] + in[i * 6 + 5];
; 3374 :     if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3375 :        && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3376 :        && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
; 3377 :     else *a = 65535;
; 3378 :   }
; 3379 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3380 :   {
; 3381 :     *r = *g = *b = 256 * in[i * 4 + 0] + in[i * 4 + 1];
; 3382 :     *a = 256 * in[i * 4 + 2] + in[i * 4 + 3];
; 3383 :   }
; 3384 :   else if(mode->colortype == LCT_RGBA)
; 3385 :   {
; 3386 :     *r = 256 * in[i * 8 + 0] + in[i * 8 + 1];
; 3387 :     *g = 256 * in[i * 8 + 2] + in[i * 8 + 3];
; 3388 :     *b = 256 * in[i * 8 + 4] + in[i * 8 + 5];
; 3389 :     *a = 256 * in[i * 8 + 6] + in[i * 8 + 7];
; 3390 :   }
; 3391 :   else return 85; /*error: this function only supports 16-bit input, not palettes*/
; 3392 : 
; 3393 :   return 0; /*no error*/
; 3394 : }
; 3395 : 
; 3396 : /*
; 3397 : converts from any color type to 24-bit or 32-bit (later maybe more supported). return value = LodePNG error code
; 3398 : the out buffer must have (w * h * bpp + 7) / 8 bytes, where bpp is the bits per pixel of the output color type
; 3399 : (lodepng_get_bpp) for < 8 bpp images, there may _not_ be padding bits at the end of scanlines.
; 3400 : */
; 3401 : unsigned lodepng_convert(unsigned char* out, const unsigned char* in,
; 3402 :                          LodePNGColorMode* mode_out, const LodePNGColorMode* mode_in,
; 3403 :                          unsigned w, unsigned h, unsigned fix_png)
; 3404 : {
; 3405 :   unsigned error = 0;
; 3406 :   size_t i;
; 3407 :   ColorTree tree;
; 3408 :   size_t numpixels = w * h;
; 3409 : 
; 3410 :   if(lodepng_color_mode_equal(mode_out, mode_in))
; 3411 :   {
; 3412 :     size_t numbytes = lodepng_get_raw_size(w, h, mode_in);
; 3413 :     for(i = 0; i < numbytes; i++) out[i] = in[i];
; 3414 :     return error;
; 3415 :   }
; 3416 : 
; 3417 :   if(mode_out->colortype == LCT_PALETTE)
; 3418 :   {
; 3419 :     size_t palsize = 1 << mode_out->bitdepth;
; 3420 :     if(mode_out->palettesize < palsize) palsize = mode_out->palettesize;
; 3421 :     color_tree_init(&tree);
; 3422 :     for(i = 0; i < palsize; i++)
; 3423 :     {
; 3424 :       unsigned char* p = &mode_out->palette[i * 4];
; 3425 :       color_tree_add(&tree, p[0], p[1], p[2], p[3], i);
; 3426 :     }
; 3427 :   }
; 3428 : 
; 3429 :   if(mode_in->bitdepth == 16 && mode_out->bitdepth == 16)
; 3430 :   {
; 3431 :     for(i = 0; i < numpixels; i++)
; 3432 :     {
; 3433 :       unsigned short r = 0, g = 0, b = 0, a = 0;
; 3434 :       error = getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode_in);
; 3435 :       if(error) break;
; 3436 :       error = rgba16ToPixel(out, i, mode_out, r, g, b, a);
; 3437 :       if(error) break;
; 3438 :     }
; 3439 :   }
; 3440 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGBA)
; 3441 :   {
; 3442 :     error = getPixelColorsRGBA8(out, numpixels, 1, in, mode_in, fix_png);
; 3443 :   }
; 3444 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGB)
; 3445 :   {
; 3446 :     error = getPixelColorsRGBA8(out, numpixels, 0, in, mode_in, fix_png);
; 3447 :   }
; 3448 :   else
; 3449 :   {
; 3450 :     unsigned char r = 0, g = 0, b = 0, a = 0;
; 3451 :     for(i = 0; i < numpixels; i++)
; 3452 :     {
; 3453 :       error = getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode_in, fix_png);
; 3454 :       if(error) break;
; 3455 :       error = rgba8ToPixel(out, i, mode_out, &tree, r, g, b, a);
; 3456 :       if(error) break;
; 3457 :     }
; 3458 :   }
; 3459 : 
; 3460 :   if(mode_out->colortype == LCT_PALETTE)
; 3461 :   {
; 3462 :     color_tree_cleanup(&tree);
; 3463 :   }
; 3464 : 
; 3465 :   return error;
; 3466 : }
; 3467 : 
; 3468 : #ifdef LODEPNG_COMPILE_ENCODER
; 3469 : 
; 3470 : typedef struct ColorProfile
; 3471 : {
; 3472 :   unsigned char sixteenbit; /*needs more than 8 bits per channel*/
; 3473 :   unsigned char sixteenbit_done;
; 3474 : 
; 3475 : 
; 3476 :   unsigned char colored; /*not greyscale*/
; 3477 :   unsigned char colored_done;
; 3478 : 
; 3479 :   unsigned char key; /*a color key is required, or more*/
; 3480 :   unsigned short key_r; /*these values are always in 16-bit bitdepth in the profile*/
; 3481 :   unsigned short key_g;
; 3482 :   unsigned short key_b;
; 3483 :   unsigned char alpha; /*alpha channel, or alpha palette, required*/
; 3484 :   unsigned char alpha_done;
; 3485 : 
; 3486 :   unsigned numcolors;
; 3487 :   ColorTree tree; /*for listing the counted colors, up to 256*/
; 3488 :   unsigned char* palette; /*size 1024. Remember up to the first 256 RGBA colors*/
; 3489 :   unsigned maxnumcolors; /*if more than that amount counted*/
; 3490 :   unsigned char numcolors_done;
; 3491 : 
; 3492 :   unsigned greybits; /*amount of bits required for greyscale (1, 2, 4, 8). Does not take 16 bit into account.*/
; 3493 :   unsigned char greybits_done;
; 3494 : 
; 3495 : } ColorProfile;
; 3496 : 
; 3497 : static void color_profile_init(ColorProfile* profile, const LodePNGColorMode* mode)
; 3498 : {
; 3499 :   profile->sixteenbit = 0;
; 3500 :   profile->sixteenbit_done = mode->bitdepth == 16 ? 0 : 1;
; 3501 : 
; 3502 :   profile->colored = 0;
; 3503 :   profile->colored_done = lodepng_is_greyscale_type(mode) ? 1 : 0;
; 3504 : 
; 3505 :   profile->key = 0;
; 3506 :   profile->alpha = 0;
; 3507 :   profile->alpha_done = lodepng_can_have_alpha(mode) ? 0 : 1;
; 3508 : 
; 3509 :   profile->numcolors = 0;
; 3510 :   color_tree_init(&profile->tree);
; 3511 :   profile->palette = (unsigned char*)lodepng_malloc(1024);
; 3512 :   profile->maxnumcolors = 257;
; 3513 :   if(lodepng_get_bpp(mode) <= 8)
; 3514 :   {
; 3515 :     int bpp = lodepng_get_bpp(mode);
; 3516 :     profile->maxnumcolors = bpp == 1 ? 2 : (bpp == 2 ? 4 : (bpp == 4 ? 16 : 256));
; 3517 :   }
; 3518 :   profile->numcolors_done = 0;
; 3519 : 
; 3520 :   profile->greybits = 1;
; 3521 :   profile->greybits_done = lodepng_get_bpp(mode) == 1 ? 1 : 0;
; 3522 : }
; 3523 : 
; 3524 : static void color_profile_cleanup(ColorProfile* profile)
; 3525 : {
; 3526 :   color_tree_cleanup(&profile->tree);
; 3527 :   lodepng_free(profile->palette);
; 3528 : }
; 3529 : 
; 3530 : /*function used for debug purposes with C++*/
; 3531 : /*void printColorProfile(ColorProfile* p)
; 3532 : {
; 3533 :   std::cout << "sixteenbit: " << (int)p->sixteenbit << std::endl;
; 3534 :   std::cout << "sixteenbit_done: " << (int)p->sixteenbit_done << std::endl;
; 3535 :   std::cout << "colored: " << (int)p->colored << std::endl;
; 3536 :   std::cout << "colored_done: " << (int)p->colored_done << std::endl;
; 3537 :   std::cout << "key: " << (int)p->key << std::endl;
; 3538 :   std::cout << "key_r: " << (int)p->key_r << std::endl;
; 3539 :   std::cout << "key_g: " << (int)p->key_g << std::endl;
; 3540 :   std::cout << "key_b: " << (int)p->key_b << std::endl;
; 3541 :   std::cout << "alpha: " << (int)p->alpha << std::endl;
; 3542 :   std::cout << "alpha_done: " << (int)p->alpha_done << std::endl;
; 3543 :   std::cout << "numcolors: " << (int)p->numcolors << std::endl;
; 3544 :   std::cout << "maxnumcolors: " << (int)p->maxnumcolors << std::endl;
; 3545 :   std::cout << "numcolors_done: " << (int)p->numcolors_done << std::endl;
; 3546 :   std::cout << "greybits: " << (int)p->greybits << std::endl;
; 3547 :   std::cout << "greybits_done: " << (int)p->greybits_done << std::endl;
; 3548 : }*/
; 3549 : 
; 3550 : /*Returns how many bits needed to represent given value (max 8 bit)*/
; 3551 : unsigned getValueRequiredBits(unsigned short value)
; 3552 : {
; 3553 :   if(value == 0 || value == 255) return 1;
; 3554 :   /*The scaling of 2-bit and 4-bit values uses multiples of 85 and 17*/
; 3555 :   if(value % 17 == 0) return value % 85 == 0 ? 2 : 4;
; 3556 :   return 8;
; 3557 : }
; 3558 : 
; 3559 : /*profile must already have been inited with mode.
; 3560 : It's ok to set some parameters of profile to done already.*/
; 3561 : static unsigned get_color_profile(ColorProfile* profile,
; 3562 :                                   const unsigned char* in,
; 3563 :                                   size_t numpixels /*must be full image size, for certain filesize based choices*/,
; 3564 :                                   const LodePNGColorMode* mode,
; 3565 :                                   unsigned fix_png)
; 3566 : {
; 3567 :   unsigned error = 0;
; 3568 :   size_t i;
; 3569 : 
; 3570 :   if(mode->bitdepth == 16)
; 3571 :   {
; 3572 :     for(i = 0; i < numpixels; i++)
; 3573 :     {
; 3574 :       unsigned short r, g, b, a;
; 3575 :       error = getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode);
; 3576 :       if(error) break;
; 3577 : 
; 3578 :       /*a color is considered good for 8-bit if the first byte and the second byte are equal,
; 3579 :         (so if it's divisible through 257), NOT necessarily if the second byte is 0*/
; 3580 :       if(!profile->sixteenbit_done
; 3581 :           && (((r & 255) != ((r >> 8) & 255))
; 3582 :            || ((g & 255) != ((g >> 8) & 255))
; 3583 :            || ((b & 255) != ((b >> 8) & 255))))
; 3584 :       {
; 3585 :         profile->sixteenbit = 1;
; 3586 :         profile->sixteenbit_done = 1;
; 3587 :         profile->greybits_done = 1; /*greybits is not applicable anymore at 16-bit*/
; 3588 :         profile->numcolors_done = 1; /*counting colors no longer useful, palette doesn't support 16-bit*/
; 3589 :       }
; 3590 : 
; 3591 :       if(!profile->colored_done && (r != g || r != b))
; 3592 :       {
; 3593 :         profile->colored = 1;
; 3594 :         profile->colored_done = 1;
; 3595 :         profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3596 :       }
; 3597 : 
; 3598 :       if(!profile->alpha_done && a != 65535)
; 3599 :       {
; 3600 :         /*only use color key if numpixels large enough to justify tRNS chunk size*/
; 3601 :         if(a == 0 && numpixels > 16 && !(profile->key && (r != profile->key_r || g != profile->key_g || b != profile->key_b)))
; 3602 :         {
; 3603 :           if(!profile->alpha && !profile->key)
; 3604 :           {
; 3605 :             profile->key = 1;
; 3606 :             profile->key_r = r;
; 3607 :             profile->key_g = g;
; 3608 :             profile->key_b = b;
; 3609 :           }
; 3610 :         }
; 3611 :         else
; 3612 :         {
; 3613 :           profile->alpha = 1;
; 3614 :           profile->alpha_done = 1;
; 3615 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3616 :         }
; 3617 :       }
; 3618 : 
; 3619 :       /* Color key cannot be used if an opaque pixel also has that RGB color. */
; 3620 :       if(!profile->alpha_done && a == 65535 && profile->key
; 3621 :           && r == profile->key_r && g == profile->key_g && b == profile->key_b)
; 3622 :       {
; 3623 :           profile->alpha = 1;
; 3624 :           profile->alpha_done = 1;
; 3625 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3626 :       }
; 3627 : 
; 3628 :       if(!profile->greybits_done)
; 3629 :       {
; 3630 :         /*assuming 8-bit r, this test does not care about 16-bit*/
; 3631 :         unsigned bits = getValueRequiredBits(r);
; 3632 :         if(bits > profile->greybits) profile->greybits = bits;
; 3633 :         if(profile->greybits >= 8) profile->greybits_done = 1;
; 3634 :       }
; 3635 : 
; 3636 :       if(!profile->numcolors_done)
; 3637 :       {
; 3638 :         /*assuming 8-bit rgba, this test does not care about 16-bit*/
; 3639 :         if(!color_tree_has(&profile->tree, (unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a))
; 3640 :         {
; 3641 :           color_tree_add(&profile->tree, (unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a,
; 3642 :             profile->numcolors);
; 3643 :           if(profile->numcolors < 256)
; 3644 :           {
; 3645 :             unsigned char* p = profile->palette;
; 3646 :             unsigned i = profile->numcolors;
; 3647 :             p[i * 4 + 0] = (unsigned char)r;
; 3648 :             p[i * 4 + 1] = (unsigned char)g;
; 3649 :             p[i * 4 + 2] = (unsigned char)b;
; 3650 :             p[i * 4 + 3] = (unsigned char)a;
; 3651 :           }
; 3652 :           profile->numcolors++;
; 3653 :           if(profile->numcolors >= profile->maxnumcolors) profile->numcolors_done = 1;
; 3654 :         }
; 3655 :       }
; 3656 : 
; 3657 :       if(profile->alpha_done && profile->numcolors_done
; 3658 :       && profile->colored_done && profile->sixteenbit_done && profile->greybits_done)
; 3659 :       {
; 3660 :         break;
; 3661 :       }
; 3662 :     };
; 3663 :   }
; 3664 :   else /* < 16-bit */
; 3665 :   {
; 3666 :     for(i = 0; i < numpixels; i++)
; 3667 :     {
; 3668 :       unsigned char r = 0, g = 0, b = 0, a = 0;
; 3669 :       error = getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode, fix_png);
; 3670 :       if(error) break;
; 3671 : 
; 3672 :       if(!profile->colored_done && (r != g || r != b))
; 3673 :       {
; 3674 :         profile->colored = 1;
; 3675 :         profile->colored_done = 1;
; 3676 :         profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3677 :       }
; 3678 : 
; 3679 :       if(!profile->alpha_done && a != 255)
; 3680 :       {
; 3681 :         if(a == 0 && !(profile->key && (r != profile->key_r || g != profile->key_g || b != profile->key_b)))
; 3682 :         {
; 3683 :           if(!profile->key)
; 3684 :           {
; 3685 :             profile->key = 1;
; 3686 :             profile->key_r = r;
; 3687 :             profile->key_g = g;
; 3688 :             profile->key_b = b;
; 3689 :           }
; 3690 :         }
; 3691 :         else
; 3692 :         {
; 3693 :           profile->alpha = 1;
; 3694 :           profile->alpha_done = 1;
; 3695 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3696 :         }
; 3697 :       }
; 3698 : 
; 3699 :       /* Color key cannot be used if an opaque pixel also has that RGB color. */
; 3700 :       if(!profile->alpha_done && a == 255 && profile->key
; 3701 :           && r == profile->key_r && g == profile->key_g && b == profile->key_b)
; 3702 :       {
; 3703 :           profile->alpha = 1;
; 3704 :           profile->alpha_done = 1;
; 3705 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3706 :       }
; 3707 : 
; 3708 :       if(!profile->greybits_done)
; 3709 :       {
; 3710 :         unsigned bits = getValueRequiredBits(r);
; 3711 :         if(bits > profile->greybits) profile->greybits = bits;
; 3712 :         if(profile->greybits >= 8) profile->greybits_done = 1;
; 3713 :       }
; 3714 : 
; 3715 :       if(!profile->numcolors_done)
; 3716 :       {
; 3717 :         if(!color_tree_has(&profile->tree, r, g, b, a))
; 3718 :         {
; 3719 : 
; 3720 :           color_tree_add(&profile->tree, r, g, b, a, profile->numcolors);
; 3721 :           if(profile->numcolors < 256)
; 3722 :           {
; 3723 :             unsigned char* p = profile->palette;
; 3724 :             unsigned i = profile->numcolors;
; 3725 :             p[i * 4 + 0] = r;
; 3726 :             p[i * 4 + 1] = g;
; 3727 :             p[i * 4 + 2] = b;
; 3728 :             p[i * 4 + 3] = a;
; 3729 :           }
; 3730 :           profile->numcolors++;
; 3731 :           if(profile->numcolors >= profile->maxnumcolors) profile->numcolors_done = 1;
; 3732 :         }
; 3733 :       }
; 3734 : 
; 3735 :       if(profile->alpha_done && profile->numcolors_done && profile->colored_done && profile->greybits_done)
; 3736 :       {
; 3737 :         break;
; 3738 :       }
; 3739 :     };
; 3740 :   }
; 3741 : 
; 3742 :   /*make the profile's key always 16-bit for consistency*/
; 3743 :   if(mode->bitdepth < 16)
; 3744 :   {
; 3745 :     /*repeat each byte twice*/
; 3746 :     profile->key_r *= 257;
; 3747 :     profile->key_g *= 257;
; 3748 :     profile->key_b *= 257;
; 3749 :   }
; 3750 : 
; 3751 :   return error;
; 3752 : }
; 3753 : 
; 3754 : static void setColorKeyFrom16bit(LodePNGColorMode* mode_out, unsigned r, unsigned g, unsigned b, unsigned bitdepth)
; 3755 : {
; 3756 :   unsigned mask = (1 << bitdepth) - 1;
; 3757 :   mode_out->key_defined = 1;
; 3758 :   mode_out->key_r = r & mask;
; 3759 :   mode_out->key_g = g & mask;
; 3760 :   mode_out->key_b = b & mask;
; 3761 : }
; 3762 : 
; 3763 : /*updates values of mode with a potentially smaller color model. mode_out should
; 3764 : contain the user chosen color model, but will be overwritten with the new chosen one.*/
; 3765 : unsigned lodepng_auto_choose_color(LodePNGColorMode* mode_out,
; 3766 :                                    const unsigned char* image, unsigned w, unsigned h,
; 3767 :                                    const LodePNGColorMode* mode_in,
; 3768 :                                    LodePNGAutoConvert auto_convert)
; 3769 : {
; 3770 :   ColorProfile profile;
; 3771 :   unsigned error = 0;
; 3772 :   int no_nibbles = auto_convert == LAC_AUTO_NO_NIBBLES || auto_convert == LAC_AUTO_NO_NIBBLES_NO_PALETTE;
; 3773 :   int no_palette = auto_convert == LAC_AUTO_NO_PALETTE || auto_convert == LAC_AUTO_NO_NIBBLES_NO_PALETTE;
; 3774 : 
; 3775 :   if(auto_convert == LAC_ALPHA)
; 3776 :   {
; 3777 :     if(mode_out->colortype != LCT_RGBA && mode_out->colortype != LCT_GREY_ALPHA) return 0;
; 3778 :   }
; 3779 : 
; 3780 :   color_profile_init(&profile, mode_in);
; 3781 :   if(auto_convert == LAC_ALPHA)
; 3782 :   {
; 3783 :     profile.colored_done = 1;
; 3784 :     profile.greybits_done = 1;
; 3785 :     profile.numcolors_done = 1;
; 3786 :     profile.sixteenbit_done = 1;
; 3787 :   }
; 3788 :   error = get_color_profile(&profile, image, w * h, mode_in, 0 /*fix_png*/);
; 3789 :   if(!error && auto_convert == LAC_ALPHA)
; 3790 :   {
; 3791 :     if(!profile.alpha)
; 3792 :     {
; 3793 :       mode_out->colortype = (mode_out->colortype == LCT_RGBA ? LCT_RGB : LCT_GREY);
; 3794 :       if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3795 :     }
; 3796 :   }
; 3797 :   else if(!error && auto_convert != LAC_ALPHA)
; 3798 :   {
; 3799 :     mode_out->key_defined = 0;
; 3800 : 
; 3801 :     if(profile.sixteenbit)
; 3802 :     {
; 3803 :       mode_out->bitdepth = 16;
; 3804 :       if(profile.alpha)
; 3805 :       {
; 3806 :         mode_out->colortype = profile.colored ? LCT_RGBA : LCT_GREY_ALPHA;
; 3807 :       }
; 3808 :       else
; 3809 :       {
; 3810 :         mode_out->colortype = profile.colored ? LCT_RGB : LCT_GREY;
; 3811 :         if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3812 :       }
; 3813 :     }
; 3814 :     else /*less than 16 bits per channel*/
; 3815 :     {
; 3816 :       /*don't add palette overhead if image hasn't got a lot of pixels*/
; 3817 :       unsigned n = profile.numcolors;
; 3818 :       int palette_ok = !no_palette && n <= 256 && (n * 2 < w * h);
; 3819 :       unsigned palettebits = n <= 2 ? 1 : (n <= 4 ? 2 : (n <= 16 ? 4 : 8));
; 3820 :       int grey_ok = !profile.colored && !profile.alpha; /*grey without alpha, with potentially low bits*/
; 3821 :       if(palette_ok || grey_ok)
; 3822 :       {
; 3823 :         if(!palette_ok || (grey_ok && profile.greybits <= palettebits))
; 3824 :         {
; 3825 :           unsigned grey = profile.key_r;
; 3826 :           mode_out->colortype = LCT_GREY;
; 3827 :           mode_out->bitdepth = profile.greybits;
; 3828 :           if(profile.key) setColorKeyFrom16bit(mode_out, grey, grey, grey, mode_out->bitdepth);
; 3829 :         }
; 3830 :         else
; 3831 :         {
; 3832 :           /*fill in the palette*/
; 3833 :           unsigned i;
; 3834 :           unsigned char* p = profile.palette;
; 3835 :           /*remove potential earlier palette*/
; 3836 :           lodepng_palette_clear(mode_out);
; 3837 :           for(i = 0; i < profile.numcolors; i++)
; 3838 :           {
; 3839 :             error = lodepng_palette_add(mode_out, p[i * 4 + 0], p[i * 4 + 1], p[i * 4 + 2], p[i * 4 + 3]);
; 3840 :             if(error) break;
; 3841 :           }
; 3842 : 
; 3843 :           mode_out->colortype = LCT_PALETTE;
; 3844 :           mode_out->bitdepth = palettebits;
; 3845 :         }
; 3846 :       }
; 3847 :       else /*8-bit per channel*/
; 3848 :       {
; 3849 :         mode_out->bitdepth = 8;
; 3850 :         if(profile.alpha)
; 3851 :         {
; 3852 :           mode_out->colortype = profile.colored ? LCT_RGBA : LCT_GREY_ALPHA;
; 3853 :         }
; 3854 :         else
; 3855 :         {
; 3856 :           mode_out->colortype = profile.colored ? LCT_RGB : LCT_GREY /*LCT_GREY normally won't occur, already done earlier*/;
; 3857 :           if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3858 :         }
; 3859 :       }
; 3860 :     }
; 3861 :   }
; 3862 : 
; 3863 :   color_profile_cleanup(&profile);
; 3864 : 
; 3865 :   if(mode_out->colortype == LCT_PALETTE && mode_in->palettesize == mode_out->palettesize)
; 3866 :   {
; 3867 :     /*In this case keep the palette order of the input, so that the user can choose an optimal one*/
; 3868 :     size_t i;
; 3869 :     for(i = 0; i < mode_in->palettesize * 4; i++)
; 3870 :     {
; 3871 :       mode_out->palette[i] = mode_in->palette[i];
; 3872 :     }
; 3873 :   }
; 3874 : 
; 3875 :   if(no_nibbles && mode_out->bitdepth < 8)
; 3876 :   {
; 3877 :     /*palette can keep its small amount of colors, as long as no indices use it*/
; 3878 :     mode_out->bitdepth = 8;
; 3879 :   }
; 3880 : 
; 3881 :   return error;
; 3882 : }
; 3883 : 
; 3884 : #endif /* #ifdef LODEPNG_COMPILE_ENCODER */
; 3885 : 
; 3886 : /*
; 3887 : Paeth predicter, used by PNG filter type 4
; 3888 : The parameters are of type short, but should come from unsigned chars, the shorts
; 3889 : are only needed to make the paeth calculation correct.
; 3890 : */
; 3891 : static unsigned char paethPredictor(short a, short b, short c)
; 3892 : {
; 3893 :   short pa = abs(b - c);
; 3894 :   short pb = abs(a - c);
; 3895 :   short pc = abs(a + b - c - c);
; 3896 : 
; 3897 :   if(pc < pa && pc < pb) return (unsigned char)c;
; 3898 :   else if(pb < pa) return (unsigned char)b;
; 3899 :   else return (unsigned char)a;
; 3900 : }
; 3901 : 
; 3902 : /*shared values used by multiple Adam7 related functions*/
; 3903 : 
; 3904 : static const unsigned ADAM7_IX[7] = { 0, 4, 0, 2, 0, 1, 0 }; /*x start values*/
; 3905 : static const unsigned ADAM7_IY[7] = { 0, 0, 4, 0, 2, 0, 1 }; /*y start values*/
; 3906 : static const unsigned ADAM7_DX[7] = { 8, 8, 4, 4, 2, 2, 1 }; /*x delta values*/
; 3907 : static const unsigned ADAM7_DY[7] = { 8, 8, 8, 4, 4, 2, 2 }; /*y delta values*/
; 3908 : 
; 3909 : /*
; 3910 : Outputs various dimensions and positions in the image related to the Adam7 reduced images.
; 3911 : passw: output containing the width of the 7 passes
; 3912 : passh: output containing the height of the 7 passes
; 3913 : filter_passstart: output containing the index of the start and end of each
; 3914 :  reduced image with filter bytes
; 3915 : padded_passstart output containing the index of the start and end of each
; 3916 :  reduced image when without filter bytes but with padded scanlines
; 3917 : passstart: output containing the index of the start and end of each reduced
; 3918 :  image without padding between scanlines, but still padding between the images
; 3919 : w, h: width and height of non-interlaced image
; 3920 : bpp: bits per pixel
; 3921 : "padded" is only relevant if bpp is less than 8 and a scanline or image does not
; 3922 :  end at a full byte
; 3923 : */
; 3924 : static void Adam7_getpassvalues(unsigned passw[7], unsigned passh[7], size_t filter_passstart[8],
; 3925 :                                 size_t padded_passstart[8], size_t passstart[8], unsigned w, unsigned h, unsigned bpp)
; 3926 : {
; 3927 :   /*the passstart values have 8 values: the 8th one indicates the byte after the end of the 7th (= last) pass*/
; 3928 :   unsigned i;
; 3929 : 
; 3930 :   /*calculate width and height in pixels of each pass*/
; 3931 :   for(i = 0; i < 7; i++)
; 3932 :   {
; 3933 :     passw[i] = (w + ADAM7_DX[i] - ADAM7_IX[i] - 1) / ADAM7_DX[i];
; 3934 :     passh[i] = (h + ADAM7_DY[i] - ADAM7_IY[i] - 1) / ADAM7_DY[i];
; 3935 :     if(passw[i] == 0) passh[i] = 0;
; 3936 :     if(passh[i] == 0) passw[i] = 0;
; 3937 :   }
; 3938 : 
; 3939 :   filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
; 3940 :   for(i = 0; i < 7; i++)
; 3941 :   {
; 3942 :     /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
; 3943 :     filter_passstart[i + 1] = filter_passstart[i]
; 3944 :                             + ((passw[i] && passh[i]) ? passh[i] * (1 + (passw[i] * bpp + 7) / 8) : 0);
; 3945 :     /*bits padded if needed to fill full byte at end of each scanline*/
; 3946 :     padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7) / 8);
; 3947 :     /*only padded at end of reduced image*/
; 3948 :     passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7) / 8;
; 3949 :   }
; 3950 : }
; 3951 : 
; 3952 : #ifdef LODEPNG_COMPILE_DECODER
; 3953 : 
; 3954 : /* ////////////////////////////////////////////////////////////////////////// */
; 3955 : /* / PNG Decoder                                                            / */
; 3956 : /* ////////////////////////////////////////////////////////////////////////// */
; 3957 : 
; 3958 : /*read the information from the header and store it in the LodePNGInfo. return value is error*/
; 3959 : unsigned lodepng_inspect(unsigned* w, unsigned* h, LodePNGState* state,
; 3960 :                          const unsigned char* in, size_t insize)
; 3961 : {
; 3962 :   LodePNGInfo* info = &state->info_png;
; 3963 :   if(insize == 0 || in == 0)
; 3964 :   {
; 3965 :     CERROR_RETURN_ERROR(state->error, 48); /*error: the given data is empty*/
; 3966 :   }
; 3967 :   if(insize < 29)
; 3968 :   {
; 3969 :     CERROR_RETURN_ERROR(state->error, 27); /*error: the data length is smaller than the length of a PNG header*/
; 3970 :   }
; 3971 : 
; 3972 :   /*when decoding a new PNG image, make sure all parameters created after previous decoding are reset*/
; 3973 :   lodepng_info_cleanup(info);
; 3974 :   lodepng_info_init(info);
; 3975 : 
; 3976 :   if(in[0] != 137 || in[1] != 80 || in[2] != 78 || in[3] != 71
; 3977 :      || in[4] != 13 || in[5] != 10 || in[6] != 26 || in[7] != 10)
; 3978 :   {
; 3979 :     CERROR_RETURN_ERROR(state->error, 28); /*error: the first 8 bytes are not the correct PNG signature*/
; 3980 :   }
; 3981 :   if(in[12] != 'I' || in[13] != 'H' || in[14] != 'D' || in[15] != 'R')
; 3982 :   {
; 3983 :     CERROR_RETURN_ERROR(state->error, 29); /*error: it doesn't start with a IHDR chunk!*/
; 3984 :   }
; 3985 : 
; 3986 :   /*read the values given in the header*/
; 3987 :   *w = lodepng_read32bitInt(&in[16]);
; 3988 :   *h = lodepng_read32bitInt(&in[20]);
; 3989 :   info->color.bitdepth = in[24];
; 3990 :   info->color.colortype = (LodePNGColorType)in[25];
; 3991 :   info->compression_method = in[26];
; 3992 :   info->filter_method = in[27];
; 3993 :   info->interlace_method = in[28];
; 3994 : 
; 3995 :   if(!state->decoder.ignore_crc)
; 3996 :   {
; 3997 :     unsigned CRC = lodepng_read32bitInt(&in[29]);
; 3998 :     unsigned checksum = lodepng_crc32(&in[12], 17);
; 3999 :     if(CRC != checksum)
; 4000 :     {
; 4001 :       CERROR_RETURN_ERROR(state->error, 57); /*invalid CRC*/
; 4002 :     }
; 4003 :   }
; 4004 : 
; 4005 :   /*error: only compression method 0 is allowed in the specification*/
; 4006 :   if(info->compression_method != 0) CERROR_RETURN_ERROR(state->error, 32);
; 4007 :   /*error: only filter method 0 is allowed in the specification*/
; 4008 :   if(info->filter_method != 0) CERROR_RETURN_ERROR(state->error, 33);
; 4009 :   /*error: only interlace methods 0 and 1 exist in the specification*/
; 4010 :   if(info->interlace_method > 1) CERROR_RETURN_ERROR(state->error, 34);
; 4011 : 
; 4012 :   state->error = checkColorValidity(info->color.colortype, info->color.bitdepth);
; 4013 :   return state->error;
; 4014 : }
; 4015 : 
; 4016 : static unsigned unfilterScanline(unsigned char* recon, const unsigned char* scanline, const unsigned char* precon,
; 4017 :                                  size_t bytewidth, unsigned char filterType, size_t length)
; 4018 : {
; 4019 :   /*
; 4020 :   For PNG filter method 0
; 4021 :   unfilter a PNG image scanline by scanline. when the pixels are smaller than 1 byte,
; 4022 :   the filter works byte per byte (bytewidth = 1)
; 4023 :   precon is the previous unfiltered scanline, recon the result, scanline the current one
; 4024 :   the incoming scanlines do NOT include the filtertype byte, that one is given in the parameter filterType instead
; 4025 :   recon and scanline MAY be the same memory address! precon must be disjoint.
; 4026 :   */
; 4027 : 
; 4028 :   size_t i;
; 4029 :   switch(filterType)
; 4030 :   {
; 4031 :     case 0:
; 4032 :       for(i = 0; i < length; i++) recon[i] = scanline[i];
; 4033 :       break;
; 4034 :     case 1:
; 4035 :       for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];
; 4036 :       for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth];
; 4037 :       break;
; 4038 :     case 2:
; 4039 :       if(precon)
; 4040 :       {
; 4041 :         for(i = 0; i < length; i++) recon[i] = scanline[i] + precon[i];
; 4042 :       }
; 4043 :       else
; 4044 :       {
; 4045 :         for(i = 0; i < length; i++) recon[i] = scanline[i];
; 4046 :       }
; 4047 :       break;
; 4048 :     case 3:
; 4049 :       if(precon)
; 4050 :       {
; 4051 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i] + precon[i] / 2;
; 4052 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + ((recon[i - bytewidth] + precon[i]) / 2);
; 4053 :       }
; 4054 :       else
; 4055 :       {
; 4056 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];
; 4057 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth] / 2;
; 4058 :       }
; 4059 :       break;
; 4060 :     case 4:
; 4061 :       if(precon)
; 4062 :       {
; 4063 :         for(i = 0; i < bytewidth; i++)
; 4064 :         {
; 4065 :           recon[i] = (scanline[i] + precon[i]); /*paethPredictor(0, precon[i], 0) is always precon[i]*/
; 4066 :         }
; 4067 :         for(i = bytewidth; i < length; i++)
; 4068 :         {
; 4069 :           recon[i] = (scanline[i] + paethPredictor(recon[i - bytewidth], precon[i], precon[i - bytewidth]));
; 4070 :         }
; 4071 :       }
; 4072 :       else
; 4073 :       {
; 4074 :         for(i = 0; i < bytewidth; i++)
; 4075 :         {
; 4076 :           recon[i] = scanline[i];
; 4077 :         }
; 4078 :         for(i = bytewidth; i < length; i++)
; 4079 :         {
; 4080 :           /*paethPredictor(recon[i - bytewidth], 0, 0) is always recon[i - bytewidth]*/
; 4081 :           recon[i] = (scanline[i] + recon[i - bytewidth]);
; 4082 :         }
; 4083 :       }
; 4084 :       break;
; 4085 :     default: return 36; /*error: unexisting filter type given*/
; 4086 :   }
; 4087 :   return 0;
; 4088 : }
; 4089 : 
; 4090 : static unsigned unfilter(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
; 4091 : {
; 4092 :   /*
; 4093 :   For PNG filter method 0
; 4094 :   this function unfilters a single image (e.g. without interlacing this is called once, with Adam7 seven times)
; 4095 :   out must have enough bytes allocated already, in must have the scanlines + 1 filtertype byte per scanline
; 4096 :   w and h are image dimensions or dimensions of reduced image, bpp is bits per pixel
; 4097 :   in and out are allowed to be the same memory address (but aren't the same size since in has the extra filter bytes)
; 4098 :   */
; 4099 : 
; 4100 :   unsigned y;
; 4101 :   unsigned char* prevline = 0;
; 4102 : 
; 4103 :   /*bytewidth is used for filtering, is 1 when bpp < 8, number of bytes per pixel otherwise*/
; 4104 :   size_t bytewidth = (bpp + 7) / 8;
; 4105 :   size_t linebytes = (w * bpp + 7) / 8;
; 4106 : 
; 4107 :   for(y = 0; y < h; y++)
; 4108 :   {
; 4109 :     size_t outindex = linebytes * y;
; 4110 :     size_t inindex = (1 + linebytes) * y; /*the extra filterbyte added to each row*/
; 4111 :     unsigned char filterType = in[inindex];
; 4112 : 
; 4113 :     CERROR_TRY_RETURN(unfilterScanline(&out[outindex], &in[inindex + 1], prevline, bytewidth, filterType, linebytes));
; 4114 : 
; 4115 :     prevline = &out[outindex];
; 4116 :   }
; 4117 : 
; 4118 :   return 0;
; 4119 : }
; 4120 : 
; 4121 : /*
; 4122 : in: Adam7 interlaced image, with no padding bits between scanlines, but between
; 4123 :  reduced images so that each reduced image starts at a byte.
; 4124 : out: the same pixels, but re-ordered so that they're now a non-interlaced image with size w*h
; 4125 : bpp: bits per pixel
; 4126 : out has the following size in bits: w * h * bpp.
; 4127 : in is possibly bigger due to padding bits between reduced images.
; 4128 : out must be big enough AND must be 0 everywhere if bpp < 8 in the current implementation
; 4129 : (because that's likely a little bit faster)
; 4130 : NOTE: comments about padding bits are only relevant if bpp < 8
; 4131 : */
; 4132 : static void Adam7_deinterlace(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
; 4133 : {
; 4134 :   unsigned passw[7], passh[7];
; 4135 :   size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4136 :   unsigned i;
; 4137 : 
; 4138 :   Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 4139 : 
; 4140 :   if(bpp >= 8)
; 4141 :   {
; 4142 :     for(i = 0; i < 7; i++)
; 4143 :     {
; 4144 :       unsigned x, y, b;
; 4145 :       size_t bytewidth = bpp / 8;
; 4146 :       for(y = 0; y < passh[i]; y++)
; 4147 :       for(x = 0; x < passw[i]; x++)
; 4148 :       {
; 4149 :         size_t pixelinstart = passstart[i] + (y * passw[i] + x) * bytewidth;
; 4150 :         size_t pixeloutstart = ((ADAM7_IY[i] + y * ADAM7_DY[i]) * w + ADAM7_IX[i] + x * ADAM7_DX[i]) * bytewidth;
; 4151 :         for(b = 0; b < bytewidth; b++)
; 4152 :         {
; 4153 :           out[pixeloutstart + b] = in[pixelinstart + b];
; 4154 :         }
; 4155 :       }
; 4156 :     }
; 4157 :   }
; 4158 :   else /*bpp < 8: Adam7 with pixels < 8 bit is a bit trickier: with bit pointers*/
; 4159 :   {
; 4160 :     for(i = 0; i < 7; i++)
; 4161 :     {
; 4162 :       unsigned x, y, b;
; 4163 :       unsigned ilinebits = bpp * passw[i];
; 4164 :       unsigned olinebits = bpp * w;
; 4165 :       size_t obp, ibp; /*bit pointers (for out and in buffer)*/
; 4166 :       for(y = 0; y < passh[i]; y++)
; 4167 :       for(x = 0; x < passw[i]; x++)
; 4168 :       {
; 4169 :         ibp = (8 * passstart[i]) + (y * ilinebits + x * bpp);
; 4170 :         obp = (ADAM7_IY[i] + y * ADAM7_DY[i]) * olinebits + (ADAM7_IX[i] + x * ADAM7_DX[i]) * bpp;
; 4171 :         for(b = 0; b < bpp; b++)
; 4172 :         {
; 4173 :           unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4174 :           /*note that this function assumes the out buffer is completely 0, use setBitOfReversedStream otherwise*/
; 4175 :           setBitOfReversedStream0(&obp, out, bit);
; 4176 :         }
; 4177 :       }
; 4178 :     }
; 4179 :   }
; 4180 : }
; 4181 : 
; 4182 : static void removePaddingBits(unsigned char* out, const unsigned char* in,
; 4183 :                               size_t olinebits, size_t ilinebits, unsigned h)
; 4184 : {
; 4185 :   /*
; 4186 :   After filtering there are still padding bits if scanlines have non multiple of 8 bit amounts. They need
; 4187 :   to be removed (except at last scanline of (Adam7-reduced) image) before working with pure image buffers
; 4188 :   for the Adam7 code, the color convert code and the output to the user.
; 4189 :   in and out are allowed to be the same buffer, in may also be higher but still overlapping; in must
; 4190 :   have >= ilinebits*h bits, out must have >= olinebits*h bits, olinebits must be <= ilinebits
; 4191 :   also used to move bits after earlier such operations happened, e.g. in a sequence of reduced images from Adam7
; 4192 :   only useful if (ilinebits - olinebits) is a value in the range 1..7
; 4193 :   */
; 4194 :   unsigned y;
; 4195 :   size_t diff = ilinebits - olinebits;
; 4196 :   size_t ibp = 0, obp = 0; /*input and output bit pointers*/
; 4197 :   for(y = 0; y < h; y++)
; 4198 :   {
; 4199 :     size_t x;
; 4200 :     for(x = 0; x < olinebits; x++)
; 4201 :     {
; 4202 :       unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4203 :       setBitOfReversedStream(&obp, out, bit);
; 4204 :     }
; 4205 :     ibp += diff;
; 4206 :   }
; 4207 : }
; 4208 : 
; 4209 : /*out must be buffer big enough to contain full image, and in must contain the full decompressed data from
; 4210 : the IDAT chunks (with filter index bytes and possible padding bits)
; 4211 : return value is error*/
; 4212 : static unsigned postProcessScanlines(unsigned char* out, unsigned char* in,
; 4213 :                                      unsigned w, unsigned h, const LodePNGInfo* info_png)
; 4214 : {
; 4215 :   /*
; 4216 :   This function converts the filtered-padded-interlaced data into pure 2D image buffer with the PNG's colortype.
; 4217 :   Steps:
; 4218 :   *) if no Adam7: 1) unfilter 2) remove padding bits (= posible extra bits per scanline if bpp < 8)
; 4219 :   *) if adam7: 1) 7x unfilter 2) 7x remove padding bits 3) Adam7_deinterlace
; 4220 :   NOTE: the in buffer will be overwritten with intermediate data!
; 4221 :   */
; 4222 :   unsigned bpp = lodepng_get_bpp(&info_png->color);
; 4223 :   if(bpp == 0) return 31; /*error: invalid colortype*/
; 4224 : 
; 4225 :   if(info_png->interlace_method == 0)
; 4226 :   {
; 4227 :     if(bpp < 8 && w * bpp != ((w * bpp + 7) / 8) * 8)
; 4228 :     {
; 4229 :       CERROR_TRY_RETURN(unfilter(in, in, w, h, bpp));
; 4230 :       removePaddingBits(out, in, w * bpp, ((w * bpp + 7) / 8) * 8, h);
; 4231 :     }
; 4232 :     /*we can immediatly filter into the out buffer, no other steps needed*/
; 4233 :     else CERROR_TRY_RETURN(unfilter(out, in, w, h, bpp));
; 4234 :   }
; 4235 :   else /*interlace_method is 1 (Adam7)*/
; 4236 :   {
; 4237 :     unsigned passw[7], passh[7]; size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4238 :     unsigned i;
; 4239 : 
; 4240 :     Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 4241 : 
; 4242 :     for(i = 0; i < 7; i++)
; 4243 :     {
; 4244 :       CERROR_TRY_RETURN(unfilter(&in[padded_passstart[i]], &in[filter_passstart[i]], passw[i], passh[i], bpp));
; 4245 :       /*TODO: possible efficiency improvement: if in this reduced image the bits fit nicely in 1 scanline,
; 4246 :       move bytes instead of bits or move not at all*/
; 4247 :       if(bpp < 8)
; 4248 :       {
; 4249 :         /*remove padding bits in scanlines; after this there still may be padding
; 4250 :         bits between the different reduced images: each reduced image still starts nicely at a byte*/
; 4251 :         removePaddingBits(&in[passstart[i]], &in[padded_passstart[i]], passw[i] * bpp,
; 4252 :                           ((passw[i] * bpp + 7) / 8) * 8, passh[i]);
; 4253 :       }
; 4254 :     }
; 4255 : 
; 4256 :     Adam7_deinterlace(out, in, w, h, bpp);
; 4257 :   }
; 4258 : 
; 4259 :   return 0;
; 4260 : }
; 4261 : 
; 4262 : static unsigned readChunk_PLTE(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
; 4263 : {
; 4264 :   unsigned pos = 0, i;
; 4265 :   if(color->palette) lodepng_free(color->palette);
; 4266 :   color->palettesize = chunkLength / 3;
; 4267 :   color->palette = (unsigned char*)lodepng_malloc(4 * color->palettesize);
; 4268 :   if(!color->palette && color->palettesize)
; 4269 :   {
; 4270 :     color->palettesize = 0;
; 4271 :     return 83; /*alloc fail*/
; 4272 :   }
; 4273 :   if(color->palettesize > 256) return 38; /*error: palette too big*/
; 4274 : 
; 4275 :   for(i = 0; i < color->palettesize; i++)
; 4276 :   {
; 4277 :     color->palette[4 * i + 0] = data[pos++]; /*R*/
; 4278 :     color->palette[4 * i + 1] = data[pos++]; /*G*/
; 4279 :     color->palette[4 * i + 2] = data[pos++]; /*B*/
; 4280 :     color->palette[4 * i + 3] = 255; /*alpha*/
; 4281 :   }
; 4282 : 
; 4283 :   return 0; /* OK */
; 4284 : }
; 4285 : 
; 4286 : static unsigned readChunk_tRNS(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
; 4287 : {
; 4288 :   unsigned i;
; 4289 :   if(color->colortype == LCT_PALETTE)
; 4290 :   {
; 4291 :     /*error: more alpha values given than there are palette entries*/
; 4292 :     if(chunkLength > color->palettesize) return 38;
; 4293 : 
; 4294 :     for(i = 0; i < chunkLength; i++) color->palette[4 * i + 3] = data[i];
; 4295 :   }
; 4296 :   else if(color->colortype == LCT_GREY)
; 4297 :   {
; 4298 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4299 :     if(chunkLength != 2) return 30;
; 4300 : 
; 4301 :     color->key_defined = 1;
; 4302 :     color->key_r = color->key_g = color->key_b = 256 * data[0] + data[1];
; 4303 :   }
; 4304 :   else if(color->colortype == LCT_RGB)
; 4305 :   {
; 4306 :     /*error: this chunk must be 6 bytes for RGB image*/
; 4307 :     if(chunkLength != 6) return 41;
; 4308 : 
; 4309 :     color->key_defined = 1;
; 4310 :     color->key_r = 256 * data[0] + data[1];
; 4311 :     color->key_g = 256 * data[2] + data[3];
; 4312 :     color->key_b = 256 * data[4] + data[5];
; 4313 :   }
; 4314 :   else return 42; /*error: tRNS chunk not allowed for other color models*/
; 4315 : 
; 4316 :   return 0; /* OK */
; 4317 : }
; 4318 : 
; 4319 : 
; 4320 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4321 : /*background color chunk (bKGD)*/
; 4322 : static unsigned readChunk_bKGD(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4323 : {
; 4324 :   if(info->color.colortype == LCT_PALETTE)
; 4325 :   {
; 4326 :     /*error: this chunk must be 1 byte for indexed color image*/
; 4327 :     if(chunkLength != 1) return 43;
; 4328 : 
; 4329 :     info->background_defined = 1;
; 4330 :     info->background_r = info->background_g = info->background_b = data[0];
; 4331 :   }
; 4332 :   else if(info->color.colortype == LCT_GREY || info->color.colortype == LCT_GREY_ALPHA)
; 4333 :   {
; 4334 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4335 :     if(chunkLength != 2) return 44;
; 4336 : 
; 4337 :     info->background_defined = 1;
; 4338 :     info->background_r = info->background_g = info->background_b
; 4339 :                                  = 256 * data[0] + data[1];
; 4340 :   }
; 4341 :   else if(info->color.colortype == LCT_RGB || info->color.colortype == LCT_RGBA)
; 4342 :   {
; 4343 :     /*error: this chunk must be 6 bytes for greyscale image*/
; 4344 :     if(chunkLength != 6) return 45;
; 4345 : 
; 4346 :     info->background_defined = 1;
; 4347 :     info->background_r = 256 * data[0] + data[1];
; 4348 :     info->background_g = 256 * data[2] + data[3];
; 4349 :     info->background_b = 256 * data[4] + data[5];
; 4350 :   }
; 4351 : 
; 4352 :   return 0; /* OK */
; 4353 : }
; 4354 : 
; 4355 : /*text chunk (tEXt)*/
; 4356 : static unsigned readChunk_tEXt(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4357 : {
; 4358 :   unsigned error = 0;
; 4359 :   char *key = 0, *str = 0;
; 4360 :   unsigned i;
; 4361 : 
; 4362 :   while(!error) /*not really a while loop, only used to break on error*/
; 4363 :   {
; 4364 :     unsigned length, string2_begin;
; 4365 : 
; 4366 :     length = 0;
; 4367 :     while(length < chunkLength && data[length] != 0) length++;
; 4368 :     /*even though it's not allowed by the standard, no error is thrown if
; 4369 :     there's no null termination char, if the text is empty*/
; 4370 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4371 : 
; 4372 :     key = (char*)lodepng_malloc(length + 1);
; 4373 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4374 : 
; 4375 :     key[length] = 0;
; 4376 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4377 : 
; 4378 :     string2_begin = length + 1; /*skip keyword null terminator*/
; 4379 : 
; 4380 :     length = chunkLength < string2_begin ? 0 : chunkLength - string2_begin;
; 4381 :     str = (char*)lodepng_malloc(length + 1);
; 4382 :     if(!str) CERROR_BREAK(error, 83); /*alloc fail*/
; 4383 : 
; 4384 :     str[length] = 0;
; 4385 :     for(i = 0; i < length; i++) str[i] = data[string2_begin + i];
; 4386 : 
; 4387 :     error = lodepng_add_text(info, key, str);
; 4388 : 
; 4389 :     break;
; 4390 :   }
; 4391 : 
; 4392 :   lodepng_free(key);
; 4393 :   lodepng_free(str);
; 4394 : 
; 4395 :   return error;
; 4396 : }
; 4397 : 
; 4398 : /*compressed text chunk (zTXt)*/
; 4399 : static unsigned readChunk_zTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
; 4400 :                                const unsigned char* data, size_t chunkLength)
; 4401 : {
; 4402 :   unsigned error = 0;
; 4403 :   unsigned i;
; 4404 : 
; 4405 :   unsigned length, string2_begin;
; 4406 :   char *key = 0;
; 4407 :   ucvector decoded;
; 4408 : 
; 4409 :   ucvector_init(&decoded);
; 4410 : 
; 4411 :   while(!error) /*not really a while loop, only used to break on error*/
; 4412 :   {
; 4413 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;
; 4414 :     if(length + 2 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
; 4415 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4416 : 
; 4417 :     key = (char*)lodepng_malloc(length + 1);
; 4418 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4419 : 
; 4420 :     key[length] = 0;
; 4421 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4422 : 
; 4423 :     if(data[length + 1] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
; 4424 : 
; 4425 :     string2_begin = length + 2;
; 4426 :     if(string2_begin > chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
; 4427 : 
; 4428 :     length = chunkLength - string2_begin;
; 4429 :     /*will fail if zlib error, e.g. if length is too small*/
; 4430 :     error = zlib_decompress(&decoded.data, &decoded.size,
; 4431 :                             (unsigned char*)(&data[string2_begin]),
; 4432 :                             length, zlibsettings);
; 4433 :     if(error) break;
; 4434 :     ucvector_push_back(&decoded, 0);
; 4435 : 
; 4436 :     error = lodepng_add_text(info, key, (char*)decoded.data);
; 4437 : 
; 4438 :     break;
; 4439 :   }
; 4440 : 
; 4441 :   lodepng_free(key);
; 4442 :   ucvector_cleanup(&decoded);
; 4443 : 
; 4444 :   return error;
; 4445 : }
; 4446 : 
; 4447 : /*international text chunk (iTXt)*/
; 4448 : static unsigned readChunk_iTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
; 4449 :                                const unsigned char* data, size_t chunkLength)
; 4450 : {
; 4451 :   unsigned error = 0;
; 4452 :   unsigned i;
; 4453 : 
; 4454 :   unsigned length, begin, compressed;
; 4455 :   char *key = 0, *langtag = 0, *transkey = 0;
; 4456 :   ucvector decoded;
; 4457 :   ucvector_init(&decoded);
; 4458 : 
; 4459 :   while(!error) /*not really a while loop, only used to break on error*/
; 4460 :   {
; 4461 :     /*Quick check if the chunk length isn't too small. Even without check
; 4462 :     it'd still fail with other error checks below if it's too short. This just gives a different error code.*/
; 4463 :     if(chunkLength < 5) CERROR_BREAK(error, 30); /*iTXt chunk too short*/
; 4464 : 
; 4465 :     /*read the key*/
; 4466 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;
; 4467 :     if(length + 3 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination char, corrupt?*/
; 4468 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4469 : 
; 4470 :     key = (char*)lodepng_malloc(length + 1);
; 4471 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4472 : 
; 4473 :     key[length] = 0;
; 4474 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4475 : 
; 4476 :     /*read the compression method*/
; 4477 :     compressed = data[length + 1];
; 4478 :     if(data[length + 2] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
; 4479 : 
; 4480 :     /*even though it's not allowed by the standard, no error is thrown if
; 4481 :     there's no null termination char, if the text is empty for the next 3 texts*/
; 4482 : 
; 4483 :     /*read the langtag*/
; 4484 :     begin = length + 3;
; 4485 :     length = 0;
; 4486 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;
; 4487 : 
; 4488 :     langtag = (char*)lodepng_malloc(length + 1);
; 4489 :     if(!langtag) CERROR_BREAK(error, 83); /*alloc fail*/
; 4490 : 
; 4491 :     langtag[length] = 0;
; 4492 :     for(i = 0; i < length; i++) langtag[i] = data[begin + i];
; 4493 : 
; 4494 :     /*read the transkey*/
; 4495 :     begin += length + 1;
; 4496 :     length = 0;
; 4497 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;
; 4498 : 
; 4499 :     transkey = (char*)lodepng_malloc(length + 1);
; 4500 :     if(!transkey) CERROR_BREAK(error, 83); /*alloc fail*/
; 4501 : 
; 4502 :     transkey[length] = 0;
; 4503 :     for(i = 0; i < length; i++) transkey[i] = data[begin + i];
; 4504 : 
; 4505 :     /*read the actual text*/
; 4506 :     begin += length + 1;
; 4507 : 
; 4508 :     length = chunkLength < begin ? 0 : chunkLength - begin;
; 4509 : 
; 4510 :     if(compressed)
; 4511 :     {
; 4512 :       /*will fail if zlib error, e.g. if length is too small*/
; 4513 :       error = zlib_decompress(&decoded.data, &decoded.size,
; 4514 :                               (unsigned char*)(&data[begin]),
; 4515 :                               length, zlibsettings);
; 4516 :       if(error) break;
; 4517 :       if(decoded.allocsize < decoded.size) decoded.allocsize = decoded.size;
; 4518 :       ucvector_push_back(&decoded, 0);
; 4519 :     }
; 4520 :     else
; 4521 :     {
; 4522 :       if(!ucvector_resize(&decoded, length + 1)) CERROR_BREAK(error, 83 /*alloc fail*/);
; 4523 : 
; 4524 :       decoded.data[length] = 0;
; 4525 :       for(i = 0; i < length; i++) decoded.data[i] = data[begin + i];
; 4526 :     }
; 4527 : 
; 4528 :     error = lodepng_add_itext(info, key, langtag, transkey, (char*)decoded.data);
; 4529 : 
; 4530 :     break;
; 4531 :   }
; 4532 : 
; 4533 :   lodepng_free(key);
; 4534 :   lodepng_free(langtag);
; 4535 :   lodepng_free(transkey);
; 4536 :   ucvector_cleanup(&decoded);
; 4537 : 
; 4538 :   return error;
; 4539 : }
; 4540 : 
; 4541 : static unsigned readChunk_tIME(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4542 : {
; 4543 :   if(chunkLength != 7) return 73; /*invalid tIME chunk size*/

  00266	83 ff 07	 cmp	 edi, 7
  00269	74 07		 je	 SHORT $LN72@decodeGene
  0026b	b8 49 00 00 00	 mov	 eax, 73			; 00000049H
  00270	eb 6c		 jmp	 SHORT $LN175@decodeGene
$LN72@decodeGene:

; 4681 :     {
; 4682 :       state->error = readChunk_tIME(&state->info_png, data, chunkLength);

  00272	8d 8e 88 00 00
	00		 lea	 ecx, DWORD PTR [esi+136]
  00278	8d 53 08	 lea	 edx, DWORD PTR [ebx+8]
  0027b	e8 00 00 00 00	 call	 ?readChunk_tIME@@YAIPAULodePNGInfo@@PBEI@Z ; readChunk_tIME

; 4683 :       if(state->error) break;
; 4684 :     }

  00280	eb 5c		 jmp	 SHORT $LN175@decodeGene
$LN18@decodeGene:

; 4685 :     else if(lodepng_chunk_type_equals(chunk, "pHYs"))

  00282	ba 00 00 00 00	 mov	 edx, OFFSET $SG4294943833
  00287	8b cb		 mov	 ecx, ebx
  00289	e8 00 00 00 00	 call	 ?lodepng_chunk_type_equals@@YAEPBEPBD@Z ; lodepng_chunk_type_equals
  0028e	84 c0		 test	 al, al
  00290	74 1c		 je	 SHORT $LN15@decodeGene

; 4544 : 
; 4545 :   info->time_defined = 1;
; 4546 :   info->time.year = 256 * data[0] + data[+ 1];
; 4547 :   info->time.month = data[2];
; 4548 :   info->time.day = data[3];
; 4549 :   info->time.hour = data[4];
; 4550 :   info->time.minute = data[5];
; 4551 :   info->time.second = data[6];
; 4552 : 
; 4553 :   return 0; /* OK */
; 4554 : }
; 4555 : 
; 4556 : static unsigned readChunk_pHYs(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4557 : {
; 4558 :   if(chunkLength != 9) return 74; /*invalid pHYs chunk size*/

  00292	83 ff 09	 cmp	 edi, 9
  00295	74 07		 je	 SHORT $LN79@decodeGene
  00297	b8 4a 00 00 00	 mov	 eax, 74			; 0000004aH
  0029c	eb 40		 jmp	 SHORT $LN175@decodeGene
$LN79@decodeGene:

; 4686 :     {
; 4687 :       state->error = readChunk_pHYs(&state->info_png, data, chunkLength);

  0029e	8d 8e 88 00 00
	00		 lea	 ecx, DWORD PTR [esi+136]
  002a4	8d 53 08	 lea	 edx, DWORD PTR [ebx+8]
  002a7	e8 00 00 00 00	 call	 ?readChunk_pHYs@@YAIPAULodePNGInfo@@PBEI@Z ; readChunk_pHYs

; 4688 :       if(state->error) break;
; 4689 :     }
; 4690 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4691 :     else /*it's not an implemented chunk type, so ignore it: skip over the data*/

  002ac	eb 30		 jmp	 SHORT $LN175@decodeGene
$LN15@decodeGene:

; 4692 :     {
; 4693 :       /*error: unknown critical chunk (5th bit of first byte of chunk type is 0)*/
; 4694 :       if(!lodepng_chunk_ancillary(chunk)) CERROR_BREAK(state->error, 69);

  002ae	f6 43 04 20	 test	 BYTE PTR [ebx+4], 32	; 00000020H
  002b2	0f 84 9b 00 00
	00		 je	 $LN158@decodeGene

; 4695 : 
; 4696 :       unknown = 1;
; 4697 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4698 :       if(state->decoder.remember_unknown_chunks)

  002b8	83 7e 24 00	 cmp	 DWORD PTR [esi+36], 0
  002bc	b8 01 00 00 00	 mov	 eax, 1
  002c1	89 45 f8	 mov	 DWORD PTR _unknown$1$[ebp], eax
  002c4	74 29		 je	 SHORT $LN10@decodeGene

; 4699 :       {
; 4700 :         state->error = lodepng_chunk_append(&state->info_png.unknown_chunks_data[critical_pos - 1],
; 4701 :                                             &state->info_png.unknown_chunks_size[critical_pos - 1], chunk);

  002c6	8b 7d f4	 mov	 edi, DWORD PTR _critical_pos$1$[ebp]
  002c9	53		 push	 ebx
  002ca	8d 57 46	 lea	 edx, DWORD PTR [edi+70]
  002cd	8d 4f 43	 lea	 ecx, DWORD PTR [edi+67]
  002d0	8d 14 96	 lea	 edx, DWORD PTR [esi+edx*4]
  002d3	8d 0c 8e	 lea	 ecx, DWORD PTR [esi+ecx*4]
  002d6	e8 00 00 00 00	 call	 ?lodepng_chunk_append@@YAIPAPAEPAIPBE@Z ; lodepng_chunk_append
$LN174@decodeGene:
  002db	83 c4 04	 add	 esp, 4
$LN175@decodeGene:
  002de	89 86 28 01 00
	00		 mov	 DWORD PTR [esi+296], eax

; 4702 :         if(state->error) break;

  002e4	85 c0		 test	 eax, eax
  002e6	0f 85 95 00 00
	00		 jne	 $LN53@decodeGene
$LN172@decodeGene:
  002ec	8b 45 f8	 mov	 eax, DWORD PTR _unknown$1$[ebp]
$LN10@decodeGene:

; 4703 :       }
; 4704 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4705 :     }
; 4706 : 
; 4707 :     if(!state->decoder.ignore_crc && !unknown) /*check CRC if wanted, only on known chunk types*/

  002ef	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  002f3	75 0f		 jne	 SHORT $LN8@decodeGene
  002f5	85 c0		 test	 eax, eax
  002f7	75 0b		 jne	 SHORT $LN8@decodeGene

; 4708 :     {
; 4709 :       if(lodepng_chunk_check_crc(chunk)) CERROR_BREAK(state->error, 57); /*invalid CRC*/

  002f9	8b cb		 mov	 ecx, ebx
  002fb	e8 00 00 00 00	 call	 ?lodepng_chunk_check_crc@@YAIPBE@Z ; lodepng_chunk_check_crc
  00300	85 c0		 test	 eax, eax
  00302	75 43		 jne	 SHORT $LN160@decodeGene
$LN8@decodeGene:

; 4710 :     }
; 4711 : 
; 4712 :     if(!IEND) chunk = lodepng_chunk_next_const(chunk);

  00304	80 7d ff 00	 cmp	 BYTE PTR _IEND$1$[ebp], 0
  00308	75 77		 jne	 SHORT $LN53@decodeGene
  0030a	0f b6 0b	 movzx	 ecx, BYTE PTR [ebx]
  0030d	0f b6 43 01	 movzx	 eax, BYTE PTR [ebx+1]
  00311	c1 e1 08	 shl	 ecx, 8
  00314	0b c8		 or	 ecx, eax
  00316	0f b6 43 02	 movzx	 eax, BYTE PTR [ebx+2]

; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];

  0031a	c1 e1 08	 shl	 ecx, 8

; 4710 :     }
; 4711 : 
; 4712 :     if(!IEND) chunk = lodepng_chunk_next_const(chunk);

  0031d	0b c8		 or	 ecx, eax
  0031f	0f b6 43 03	 movzx	 eax, BYTE PTR [ebx+3]

; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];

  00323	c1 e1 08	 shl	 ecx, 8
  00326	0b c8		 or	 ecx, eax

; 4710 :     }
; 4711 : 
; 4712 :     if(!IEND) chunk = lodepng_chunk_next_const(chunk);

  00328	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0032b	03 d9		 add	 ebx, ecx
  0032d	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00330	e9 2d fd ff ff	 jmp	 $LL54@decodeGene
$LN149@decodeGene:

; 4618 :     {
; 4619 :       size_t oldsize = idat.size;
; 4620 :       if(!ucvector_resize(&idat, oldsize + chunkLength)) CERROR_BREAK(state->error, 83 /*alloc fail*/);

  00335	8b 45 d8	 mov	 eax, DWORD PTR _idat$[ebp+4]
  00338	c7 86 28 01 00
	00 53 00 00 00	 mov	 DWORD PTR [esi+296], 83	; 00000053H
  00342	89 45 0c	 mov	 DWORD PTR _oldsize$1$[ebp], eax
  00345	eb 3a		 jmp	 SHORT $LN53@decodeGene
$LN160@decodeGene:

; 4708 :     {
; 4709 :       if(lodepng_chunk_check_crc(chunk)) CERROR_BREAK(state->error, 57); /*invalid CRC*/

  00347	c7 86 28 01 00
	00 39 00 00 00	 mov	 DWORD PTR [esi+296], 57	; 00000039H
  00351	eb 2e		 jmp	 SHORT $LN53@decodeGene
$LN158@decodeGene:

; 4692 :     {
; 4693 :       /*error: unknown critical chunk (5th bit of first byte of chunk type is 0)*/
; 4694 :       if(!lodepng_chunk_ancillary(chunk)) CERROR_BREAK(state->error, 69);

  00353	c7 86 28 01 00
	00 45 00 00 00	 mov	 DWORD PTR [esi+296], 69	; 00000045H
  0035d	eb 22		 jmp	 SHORT $LN53@decodeGene
$LN48@decodeGene:

; 4610 :     {
; 4611 :       CERROR_BREAK(state->error, 64); /*error: size of the in buffer too small to contain next chunk*/

  0035f	c7 86 28 01 00
	00 40 00 00 00	 mov	 DWORD PTR [esi+296], 64	; 00000040H
  00369	eb 16		 jmp	 SHORT $LN53@decodeGene
$LN147@decodeGene:

; 4606 :     /*error: chunk length larger than the max PNG chunk size*/
; 4607 :     if(chunkLength > 2147483647) CERROR_BREAK(state->error, 63);

  0036b	c7 86 28 01 00
	00 3f 00 00 00	 mov	 DWORD PTR [esi+296], 63	; 0000003fH
  00375	eb 0a		 jmp	 SHORT $LN53@decodeGene
$LN51@decodeGene:

; 4597 :   {
; 4598 :     unsigned chunkLength;
; 4599 :     const unsigned char* data; /*the data in the chunk*/
; 4600 : 
; 4601 :     /*error: size of the in buffer too small to contain next chunk*/
; 4602 :     if((size_t)((chunk - in) + 12) > insize || chunk < in) CERROR_BREAK(state->error, 30);

  00377	c7 86 28 01 00
	00 1e 00 00 00	 mov	 DWORD PTR [esi+296], 30	; 0000001eH
$LN53@decodeGene:

; 4713 :   }
; 4714 : 
; 4715 :   if(!state->error)

  00381	83 be 28 01 00
	00 00		 cmp	 DWORD PTR [esi+296], 0
  00388	0f 85 71 01 00
	00		 jne	 $LN135@decodeGene

; 2136 : }
; 2137 : 
; 2138 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2139 : 
; 2140 : #ifdef LODEPNG_COMPILE_ENCODER
; 2141 : 
; 2142 : unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2143 :                                size_t insize, const LodePNGCompressSettings* settings)
; 2144 : {
; 2145 :   /*initially, *out must be NULL and outsize 0, if you just give some random *out
; 2146 :   that's pointing to a non allocated buffer, this'll crash*/
; 2147 :   ucvector outv;
; 2148 :   size_t i;
; 2149 :   unsigned error;
; 2150 :   unsigned char* deflatedata = 0;
; 2151 :   size_t deflatesize = 0;
; 2152 : 
; 2153 :   unsigned ADLER32;
; 2154 :   /*zlib data: 1 byte CMF (CM+CINFO), 1 byte FLG, deflate data, 4 byte ADLER32 checksum of the Decompressed data*/
; 2155 :   unsigned CMF = 120; /*0b01111000: CM 8, CINFO 7. With CINFO 7, any window size up to 32768 can be used.*/
; 2156 :   unsigned FLEVEL = 0;
; 2157 :   unsigned FDICT = 0;
; 2158 :   unsigned CMFFLG = 256 * CMF + FDICT * 32 + FLEVEL * 64;
; 2159 :   unsigned FCHECK = 31 - CMFFLG % 31;
; 2160 :   CMFFLG += FCHECK;
; 2161 : 
; 2162 :   /*ucvector-controlled version of the output buffer, for dynamic array*/
; 2163 :   ucvector_init_buffer(&outv, *out, *outsize);
; 2164 : 
; 2165 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG / 256));
; 2166 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG % 256));
; 2167 : 
; 2168 :   error = deflate(&deflatedata, &deflatesize, in, insize, settings);
; 2169 : 
; 2170 :   if(!error)
; 2171 :   {
; 2172 :     ADLER32 = adler32(in, (unsigned)insize);
; 2173 :     for(i = 0; i < deflatesize; i++) ucvector_push_back(&outv, deflatedata[i]);
; 2174 :     lodepng_free(deflatedata);
; 2175 :     lodepng_add32bitInt(&outv, ADLER32);
; 2176 :   }
; 2177 : 
; 2178 :   *out = outv.data;
; 2179 :   *outsize = outv.size;
; 2180 : 
; 2181 :   return error;
; 2182 : }
; 2183 : 
; 2184 : /* compress using the default or custom zlib function */
; 2185 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2186 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2187 : {
; 2188 :   if(settings->custom_zlib)
; 2189 :   {
; 2190 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2191 :   }
; 2192 :   else
; 2193 :   {
; 2194 :     return lodepng_zlib_compress(out, outsize, in, insize, settings);
; 2195 :   }
; 2196 : }
; 2197 : 
; 2198 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2199 : 
; 2200 : #else /*no LODEPNG_COMPILE_ZLIB*/
; 2201 : 
; 2202 : #ifdef LODEPNG_COMPILE_DECODER
; 2203 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2204 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2205 : {
; 2206 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2207 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2208 : }
; 2209 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2210 : #ifdef LODEPNG_COMPILE_ENCODER
; 2211 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2212 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2213 : {
; 2214 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2215 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2216 : }
; 2217 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2218 : 
; 2219 : #endif /*LODEPNG_COMPILE_ZLIB*/
; 2220 : 
; 2221 : /* ////////////////////////////////////////////////////////////////////////// */
; 2222 : 
; 2223 : #ifdef LODEPNG_COMPILE_ENCODER
; 2224 : 
; 2225 : /*this is a good tradeoff between speed and compression ratio*/
; 2226 : #define DEFAULT_WINDOWSIZE 2048
; 2227 : 
; 2228 : void lodepng_compress_settings_init(LodePNGCompressSettings* settings)
; 2229 : {
; 2230 :   /*compress with dynamic huffman tree (not in the mathematical sense, just not the predefined one)*/
; 2231 :   settings->btype = 2;
; 2232 :   settings->use_lz77 = 1;
; 2233 :   settings->windowsize = DEFAULT_WINDOWSIZE;
; 2234 :   settings->minmatch = 3;
; 2235 :   settings->nicematch = 128;
; 2236 :   settings->lazymatching = 1;
; 2237 : 
; 2238 :   settings->custom_zlib = 0;
; 2239 :   settings->custom_deflate = 0;
; 2240 :   settings->custom_context = 0;
; 2241 : }
; 2242 : 
; 2243 : const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 3, 128, 1, 0, 0, 0};
; 2244 : 
; 2245 : 
; 2246 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2247 : 
; 2248 : #ifdef LODEPNG_COMPILE_DECODER
; 2249 : 
; 2250 : void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings)
; 2251 : {
; 2252 :   settings->ignore_adler32 = 0;
; 2253 : 
; 2254 :   settings->custom_zlib = 0;
; 2255 :   settings->custom_inflate = 0;
; 2256 :   settings->custom_context = 0;
; 2257 : }
; 2258 : 
; 2259 : const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0, 0, 0};
; 2260 : 
; 2261 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2262 : 
; 2263 : /* ////////////////////////////////////////////////////////////////////////// */
; 2264 : /* ////////////////////////////////////////////////////////////////////////// */
; 2265 : /* // End of Zlib related code. Begin of PNG related code.                 // */
; 2266 : /* ////////////////////////////////////////////////////////////////////////// */
; 2267 : /* ////////////////////////////////////////////////////////////////////////// */
; 2268 : 
; 2269 : #ifdef LODEPNG_COMPILE_PNG
; 2270 : 
; 2271 : /* ////////////////////////////////////////////////////////////////////////// */
; 2272 : /* / CRC32                                                                  / */
; 2273 : /* ////////////////////////////////////////////////////////////////////////// */
; 2274 : 
; 2275 : /* CRC polynomial: 0xedb88320 */
; 2276 : static unsigned lodepng_crc32_table[256] = {
; 2277 :            0u, 1996959894u, 3993919788u, 2567524794u,  124634137u, 1886057615u, 3915621685u, 2657392035u,
; 2278 :    249268274u, 2044508324u, 3772115230u, 2547177864u,  162941995u, 2125561021u, 3887607047u, 2428444049u,
; 2279 :    498536548u, 1789927666u, 4089016648u, 2227061214u,  450548861u, 1843258603u, 4107580753u, 2211677639u,
; 2280 :    325883990u, 1684777152u, 4251122042u, 2321926636u,  335633487u, 1661365465u, 4195302755u, 2366115317u,
; 2281 :    997073096u, 1281953886u, 3579855332u, 2724688242u, 1006888145u, 1258607687u, 3524101629u, 2768942443u,
; 2282 :    901097722u, 1119000684u, 3686517206u, 2898065728u,  853044451u, 1172266101u, 3705015759u, 2882616665u,
; 2283 :    651767980u, 1373503546u, 3369554304u, 3218104598u,  565507253u, 1454621731u, 3485111705u, 3099436303u,
; 2284 :    671266974u, 1594198024u, 3322730930u, 2970347812u,  795835527u, 1483230225u, 3244367275u, 3060149565u,
; 2285 :   1994146192u,   31158534u, 2563907772u, 4023717930u, 1907459465u,  112637215u, 2680153253u, 3904427059u,
; 2286 :   2013776290u,  251722036u, 2517215374u, 3775830040u, 2137656763u,  141376813u, 2439277719u, 3865271297u,
; 2287 :   1802195444u,  476864866u, 2238001368u, 4066508878u, 1812370925u,  453092731u, 2181625025u, 4111451223u,
; 2288 :   1706088902u,  314042704u, 2344532202u, 4240017532u, 1658658271u,  366619977u, 2362670323u, 4224994405u,
; 2289 :   1303535960u,  984961486u, 2747007092u, 3569037538u, 1256170817u, 1037604311u, 2765210733u, 3554079995u,
; 2290 :   1131014506u,  879679996u, 2909243462u, 3663771856u, 1141124467u,  855842277u, 2852801631u, 3708648649u,
; 2291 :   1342533948u,  654459306u, 3188396048u, 3373015174u, 1466479909u,  544179635u, 3110523913u, 3462522015u,
; 2292 :   1591671054u,  702138776u, 2966460450u, 3352799412u, 1504918807u,  783551873u, 3082640443u, 3233442989u,
; 2293 :   3988292384u, 2596254646u,   62317068u, 1957810842u, 3939845945u, 2647816111u,   81470997u, 1943803523u,
; 2294 :   3814918930u, 2489596804u,  225274430u, 2053790376u, 3826175755u, 2466906013u,  167816743u, 2097651377u,
; 2295 :   4027552580u, 2265490386u,  503444072u, 1762050814u, 4150417245u, 2154129355u,  426522225u, 1852507879u,
; 2296 :   4275313526u, 2312317920u,  282753626u, 1742555852u, 4189708143u, 2394877945u,  397917763u, 1622183637u,
; 2297 :   3604390888u, 2714866558u,  953729732u, 1340076626u, 3518719985u, 2797360999u, 1068828381u, 1219638859u,
; 2298 :   3624741850u, 2936675148u,  906185462u, 1090812512u, 3747672003u, 2825379669u,  829329135u, 1181335161u,
; 2299 :   3412177804u, 3160834842u,  628085408u, 1382605366u, 3423369109u, 3138078467u,  570562233u, 1426400815u,
; 2300 :   3317316542u, 2998733608u,  733239954u, 1555261956u, 3268935591u, 3050360625u,  752459403u, 1541320221u,
; 2301 :   2607071920u, 3965973030u, 1969922972u,   40735498u, 2617837225u, 3943577151u, 1913087877u,   83908371u,
; 2302 :   2512341634u, 3803740692u, 2075208622u,  213261112u, 2463272603u, 3855990285u, 2094854071u,  198958881u,
; 2303 :   2262029012u, 4057260610u, 1759359992u,  534414190u, 2176718541u, 4139329115u, 1873836001u,  414664567u,
; 2304 :   2282248934u, 4279200368u, 1711684554u,  285281116u, 2405801727u, 4167216745u, 1634467795u,  376229701u,
; 2305 :   2685067896u, 3608007406u, 1308918612u,  956543938u, 2808555105u, 3495958263u, 1231636301u, 1047427035u,
; 2306 :   2932959818u, 3654703836u, 1088359270u,  936918000u, 2847714899u, 3736837829u, 1202900863u,  817233897u,
; 2307 :   3183342108u, 3401237130u, 1404277552u,  615818150u, 3134207493u, 3453421203u, 1423857449u,  601450431u,
; 2308 :   3009837614u, 3294710456u, 1567103746u,  711928724u, 3020668471u, 3272380065u, 1510334235u,  755167117u
; 2309 : };
; 2310 : 
; 2311 : /*Return the CRC of the bytes buf[0..len-1].*/
; 2312 : unsigned lodepng_crc32(const unsigned char* buf, size_t len)
; 2313 : {
; 2314 :   unsigned c = 0xffffffffL;
; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)
; 2318 :   {
; 2319 :     c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
; 2320 :   }
; 2321 :   return c ^ 0xffffffffL;
; 2322 : }
; 2323 : 
; 2324 : /* ////////////////////////////////////////////////////////////////////////// */
; 2325 : /* / Reading and writing single bits and bytes from/to stream for LodePNG   / */
; 2326 : /* ////////////////////////////////////////////////////////////////////////// */
; 2327 : 
; 2328 : static unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream)
; 2329 : {
; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);
; 2331 :   (*bitpointer)++;
; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)
; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
; 2354 :   }
; 2355 :   (*bitpointer)++;
; 2356 : }
; 2357 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2358 : 
; 2359 : static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2360 : {
; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));
; 2363 :   else         bitstream[(*bitpointer) >> 3] |=  (1 << (7 - ((*bitpointer) & 0x7)));
; 2364 :   (*bitpointer)++;
; 2365 : }
; 2366 : 
; 2367 : /* ////////////////////////////////////////////////////////////////////////// */
; 2368 : /* / PNG chunks                                                             / */
; 2369 : /* ////////////////////////////////////////////////////////////////////////// */
; 2370 : 
; 2371 : unsigned lodepng_chunk_length(const unsigned char* chunk)
; 2372 : {
; 2373 :   return lodepng_read32bitInt(&chunk[0]);
; 2374 : }
; 2375 : 
; 2376 : void lodepng_chunk_type(char type[5], const unsigned char* chunk)
; 2377 : {
; 2378 :   unsigned i;
; 2379 :   for(i = 0; i < 4; i++) type[i] = chunk[4 + i];
; 2380 :   type[4] = 0; /*null termination char*/
; 2381 : }
; 2382 : 
; 2383 : unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type)
; 2384 : {
; 2385 :   if(strlen(type) != 4) return 0;
; 2386 :   return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);
; 2387 : }
; 2388 : 
; 2389 : unsigned char lodepng_chunk_ancillary(const unsigned char* chunk)
; 2390 : {
; 2391 :   return((chunk[4] & 32) != 0);
; 2392 : }
; 2393 : 
; 2394 : unsigned char lodepng_chunk_private(const unsigned char* chunk)
; 2395 : {
; 2396 :   return((chunk[6] & 32) != 0);
; 2397 : }
; 2398 : 
; 2399 : unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk)
; 2400 : {
; 2401 :   return((chunk[7] & 32) != 0);
; 2402 : }
; 2403 : 
; 2404 : unsigned char* lodepng_chunk_data(unsigned char* chunk)
; 2405 : {
; 2406 :   return &chunk[8];
; 2407 : }
; 2408 : 
; 2409 : const unsigned char* lodepng_chunk_data_const(const unsigned char* chunk)
; 2410 : {
; 2411 :   return &chunk[8];
; 2412 : }
; 2413 : 
; 2414 : unsigned lodepng_chunk_check_crc(const unsigned char* chunk)
; 2415 : {
; 2416 :   unsigned length = lodepng_chunk_length(chunk);
; 2417 :   unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);
; 2418 :   /*the CRC is taken of the data and the 4 chunk type letters, not the length*/
; 2419 :   unsigned checksum = lodepng_crc32(&chunk[4], length + 4);
; 2420 :   if(CRC != checksum) return 1;
; 2421 :   else return 0;
; 2422 : }
; 2423 : 
; 2424 : void lodepng_chunk_generate_crc(unsigned char* chunk)
; 2425 : {
; 2426 :   unsigned length = lodepng_chunk_length(chunk);
; 2427 :   unsigned CRC = lodepng_crc32(&chunk[4], length + 4);
; 2428 :   lodepng_set32bitInt(chunk + 8 + length, CRC);
; 2429 : }
; 2430 : 
; 2431 : unsigned char* lodepng_chunk_next(unsigned char* chunk)
; 2432 : {
; 2433 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2434 :   return &chunk[total_chunk_length];
; 2435 : }
; 2436 : 
; 2437 : const unsigned char* lodepng_chunk_next_const(const unsigned char* chunk)
; 2438 : {
; 2439 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2440 :   return &chunk[total_chunk_length];
; 2441 : }
; 2442 : 
; 2443 : unsigned lodepng_chunk_append(unsigned char** out, size_t* outlength, const unsigned char* chunk)
; 2444 : {
; 2445 :   unsigned i;
; 2446 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2447 :   unsigned char *chunk_start, *new_buffer;
; 2448 :   size_t new_length = (*outlength) + total_chunk_length;
; 2449 :   if(new_length < total_chunk_length || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2450 : 
; 2451 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2452 :   if(!new_buffer) return 83; /*alloc fail*/
; 2453 :   (*out) = new_buffer;
; 2454 :   (*outlength) = new_length;
; 2455 :   chunk_start = &(*out)[new_length - total_chunk_length];
; 2456 : 
; 2457 :   for(i = 0; i < total_chunk_length; i++) chunk_start[i] = chunk[i];
; 2458 : 
; 2459 :   return 0;
; 2460 : }
; 2461 : 
; 2462 : unsigned lodepng_chunk_create(unsigned char** out, size_t* outlength, unsigned length,
; 2463 :                               const char* type, const unsigned char* data)
; 2464 : {
; 2465 :   unsigned i;
; 2466 :   unsigned char *chunk, *new_buffer;
; 2467 :   size_t new_length = (*outlength) + length + 12;
; 2468 :   if(new_length < length + 12 || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2469 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2470 :   if(!new_buffer) return 83; /*alloc fail*/
; 2471 :   (*out) = new_buffer;
; 2472 :   (*outlength) = new_length;
; 2473 :   chunk = &(*out)[(*outlength) - length - 12];
; 2474 : 
; 2475 :   /*1: length*/
; 2476 :   lodepng_set32bitInt(chunk, (unsigned)length);
; 2477 : 
; 2478 :   /*2: chunk name (4 letters)*/
; 2479 :   chunk[4] = type[0];
; 2480 :   chunk[5] = type[1];
; 2481 :   chunk[6] = type[2];
; 2482 :   chunk[7] = type[3];
; 2483 : 
; 2484 :   /*3: the data*/
; 2485 :   for(i = 0; i < length; i++) chunk[8 + i] = data[i];
; 2486 : 
; 2487 :   /*4: CRC (of the chunkname characters and the data)*/
; 2488 :   lodepng_chunk_generate_crc(chunk);
; 2489 : 
; 2490 :   return 0;
; 2491 : }
; 2492 : 
; 2493 : /* ////////////////////////////////////////////////////////////////////////// */
; 2494 : /* / Color types and such                                                   / */
; 2495 : /* ////////////////////////////////////////////////////////////////////////// */
; 2496 : 
; 2497 : /*return type is a LodePNG error code*/
; 2498 : static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) /*bd = bitdepth*/
; 2499 : {
; 2500 :   switch(colortype)
; 2501 :   {
; 2502 :     case 0: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)) return 37; break; /*grey*/
; 2503 :     case 2: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGB*/
; 2504 :     case 3: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )) return 37; break; /*palette*/
; 2505 :     case 4: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*grey + alpha*/
; 2506 :     case 6: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGBA*/
; 2507 :     default: return 31;
; 2508 :   }
; 2509 :   return 0; /*allowed color type / bits combination*/
; 2510 : }
; 2511 : 
; 2512 : static unsigned getNumColorChannels(LodePNGColorType colortype)
; 2513 : {
; 2514 :   switch(colortype)

  0038e	8b 86 94 00 00
	00		 mov	 eax, DWORD PTR [esi+148]

; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;

  00394	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _scanlines$1[ebp], 0

; 246  :   p->size = p->allocsize = 0;

  0039b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _scanlines$1[ebp+8], 0
  003a2	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _scanlines$1[ebp+4], 0

; 2136 : }
; 2137 : 
; 2138 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2139 : 
; 2140 : #ifdef LODEPNG_COMPILE_ENCODER
; 2141 : 
; 2142 : unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2143 :                                size_t insize, const LodePNGCompressSettings* settings)
; 2144 : {
; 2145 :   /*initially, *out must be NULL and outsize 0, if you just give some random *out
; 2146 :   that's pointing to a non allocated buffer, this'll crash*/
; 2147 :   ucvector outv;
; 2148 :   size_t i;
; 2149 :   unsigned error;
; 2150 :   unsigned char* deflatedata = 0;
; 2151 :   size_t deflatesize = 0;
; 2152 : 
; 2153 :   unsigned ADLER32;
; 2154 :   /*zlib data: 1 byte CMF (CM+CINFO), 1 byte FLG, deflate data, 4 byte ADLER32 checksum of the Decompressed data*/
; 2155 :   unsigned CMF = 120; /*0b01111000: CM 8, CINFO 7. With CINFO 7, any window size up to 32768 can be used.*/
; 2156 :   unsigned FLEVEL = 0;
; 2157 :   unsigned FDICT = 0;
; 2158 :   unsigned CMFFLG = 256 * CMF + FDICT * 32 + FLEVEL * 64;
; 2159 :   unsigned FCHECK = 31 - CMFFLG % 31;
; 2160 :   CMFFLG += FCHECK;
; 2161 : 
; 2162 :   /*ucvector-controlled version of the output buffer, for dynamic array*/
; 2163 :   ucvector_init_buffer(&outv, *out, *outsize);
; 2164 : 
; 2165 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG / 256));
; 2166 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG % 256));
; 2167 : 
; 2168 :   error = deflate(&deflatedata, &deflatesize, in, insize, settings);
; 2169 : 
; 2170 :   if(!error)
; 2171 :   {
; 2172 :     ADLER32 = adler32(in, (unsigned)insize);
; 2173 :     for(i = 0; i < deflatesize; i++) ucvector_push_back(&outv, deflatedata[i]);
; 2174 :     lodepng_free(deflatedata);
; 2175 :     lodepng_add32bitInt(&outv, ADLER32);
; 2176 :   }
; 2177 : 
; 2178 :   *out = outv.data;
; 2179 :   *outsize = outv.size;
; 2180 : 
; 2181 :   return error;
; 2182 : }
; 2183 : 
; 2184 : /* compress using the default or custom zlib function */
; 2185 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2186 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2187 : {
; 2188 :   if(settings->custom_zlib)
; 2189 :   {
; 2190 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2191 :   }
; 2192 :   else
; 2193 :   {
; 2194 :     return lodepng_zlib_compress(out, outsize, in, insize, settings);
; 2195 :   }
; 2196 : }
; 2197 : 
; 2198 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2199 : 
; 2200 : #else /*no LODEPNG_COMPILE_ZLIB*/
; 2201 : 
; 2202 : #ifdef LODEPNG_COMPILE_DECODER
; 2203 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2204 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2205 : {
; 2206 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2207 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2208 : }
; 2209 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2210 : #ifdef LODEPNG_COMPILE_ENCODER
; 2211 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2212 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2213 : {
; 2214 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2215 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2216 : }
; 2217 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2218 : 
; 2219 : #endif /*LODEPNG_COMPILE_ZLIB*/
; 2220 : 
; 2221 : /* ////////////////////////////////////////////////////////////////////////// */
; 2222 : 
; 2223 : #ifdef LODEPNG_COMPILE_ENCODER
; 2224 : 
; 2225 : /*this is a good tradeoff between speed and compression ratio*/
; 2226 : #define DEFAULT_WINDOWSIZE 2048
; 2227 : 
; 2228 : void lodepng_compress_settings_init(LodePNGCompressSettings* settings)
; 2229 : {
; 2230 :   /*compress with dynamic huffman tree (not in the mathematical sense, just not the predefined one)*/
; 2231 :   settings->btype = 2;
; 2232 :   settings->use_lz77 = 1;
; 2233 :   settings->windowsize = DEFAULT_WINDOWSIZE;
; 2234 :   settings->minmatch = 3;
; 2235 :   settings->nicematch = 128;
; 2236 :   settings->lazymatching = 1;
; 2237 : 
; 2238 :   settings->custom_zlib = 0;
; 2239 :   settings->custom_deflate = 0;
; 2240 :   settings->custom_context = 0;
; 2241 : }
; 2242 : 
; 2243 : const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 3, 128, 1, 0, 0, 0};
; 2244 : 
; 2245 : 
; 2246 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2247 : 
; 2248 : #ifdef LODEPNG_COMPILE_DECODER
; 2249 : 
; 2250 : void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings)
; 2251 : {
; 2252 :   settings->ignore_adler32 = 0;
; 2253 : 
; 2254 :   settings->custom_zlib = 0;
; 2255 :   settings->custom_inflate = 0;
; 2256 :   settings->custom_context = 0;
; 2257 : }
; 2258 : 
; 2259 : const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0, 0, 0};
; 2260 : 
; 2261 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2262 : 
; 2263 : /* ////////////////////////////////////////////////////////////////////////// */
; 2264 : /* ////////////////////////////////////////////////////////////////////////// */
; 2265 : /* // End of Zlib related code. Begin of PNG related code.                 // */
; 2266 : /* ////////////////////////////////////////////////////////////////////////// */
; 2267 : /* ////////////////////////////////////////////////////////////////////////// */
; 2268 : 
; 2269 : #ifdef LODEPNG_COMPILE_PNG
; 2270 : 
; 2271 : /* ////////////////////////////////////////////////////////////////////////// */
; 2272 : /* / CRC32                                                                  / */
; 2273 : /* ////////////////////////////////////////////////////////////////////////// */
; 2274 : 
; 2275 : /* CRC polynomial: 0xedb88320 */
; 2276 : static unsigned lodepng_crc32_table[256] = {
; 2277 :            0u, 1996959894u, 3993919788u, 2567524794u,  124634137u, 1886057615u, 3915621685u, 2657392035u,
; 2278 :    249268274u, 2044508324u, 3772115230u, 2547177864u,  162941995u, 2125561021u, 3887607047u, 2428444049u,
; 2279 :    498536548u, 1789927666u, 4089016648u, 2227061214u,  450548861u, 1843258603u, 4107580753u, 2211677639u,
; 2280 :    325883990u, 1684777152u, 4251122042u, 2321926636u,  335633487u, 1661365465u, 4195302755u, 2366115317u,
; 2281 :    997073096u, 1281953886u, 3579855332u, 2724688242u, 1006888145u, 1258607687u, 3524101629u, 2768942443u,
; 2282 :    901097722u, 1119000684u, 3686517206u, 2898065728u,  853044451u, 1172266101u, 3705015759u, 2882616665u,
; 2283 :    651767980u, 1373503546u, 3369554304u, 3218104598u,  565507253u, 1454621731u, 3485111705u, 3099436303u,
; 2284 :    671266974u, 1594198024u, 3322730930u, 2970347812u,  795835527u, 1483230225u, 3244367275u, 3060149565u,
; 2285 :   1994146192u,   31158534u, 2563907772u, 4023717930u, 1907459465u,  112637215u, 2680153253u, 3904427059u,
; 2286 :   2013776290u,  251722036u, 2517215374u, 3775830040u, 2137656763u,  141376813u, 2439277719u, 3865271297u,
; 2287 :   1802195444u,  476864866u, 2238001368u, 4066508878u, 1812370925u,  453092731u, 2181625025u, 4111451223u,
; 2288 :   1706088902u,  314042704u, 2344532202u, 4240017532u, 1658658271u,  366619977u, 2362670323u, 4224994405u,
; 2289 :   1303535960u,  984961486u, 2747007092u, 3569037538u, 1256170817u, 1037604311u, 2765210733u, 3554079995u,
; 2290 :   1131014506u,  879679996u, 2909243462u, 3663771856u, 1141124467u,  855842277u, 2852801631u, 3708648649u,
; 2291 :   1342533948u,  654459306u, 3188396048u, 3373015174u, 1466479909u,  544179635u, 3110523913u, 3462522015u,
; 2292 :   1591671054u,  702138776u, 2966460450u, 3352799412u, 1504918807u,  783551873u, 3082640443u, 3233442989u,
; 2293 :   3988292384u, 2596254646u,   62317068u, 1957810842u, 3939845945u, 2647816111u,   81470997u, 1943803523u,
; 2294 :   3814918930u, 2489596804u,  225274430u, 2053790376u, 3826175755u, 2466906013u,  167816743u, 2097651377u,
; 2295 :   4027552580u, 2265490386u,  503444072u, 1762050814u, 4150417245u, 2154129355u,  426522225u, 1852507879u,
; 2296 :   4275313526u, 2312317920u,  282753626u, 1742555852u, 4189708143u, 2394877945u,  397917763u, 1622183637u,
; 2297 :   3604390888u, 2714866558u,  953729732u, 1340076626u, 3518719985u, 2797360999u, 1068828381u, 1219638859u,
; 2298 :   3624741850u, 2936675148u,  906185462u, 1090812512u, 3747672003u, 2825379669u,  829329135u, 1181335161u,
; 2299 :   3412177804u, 3160834842u,  628085408u, 1382605366u, 3423369109u, 3138078467u,  570562233u, 1426400815u,
; 2300 :   3317316542u, 2998733608u,  733239954u, 1555261956u, 3268935591u, 3050360625u,  752459403u, 1541320221u,
; 2301 :   2607071920u, 3965973030u, 1969922972u,   40735498u, 2617837225u, 3943577151u, 1913087877u,   83908371u,
; 2302 :   2512341634u, 3803740692u, 2075208622u,  213261112u, 2463272603u, 3855990285u, 2094854071u,  198958881u,
; 2303 :   2262029012u, 4057260610u, 1759359992u,  534414190u, 2176718541u, 4139329115u, 1873836001u,  414664567u,
; 2304 :   2282248934u, 4279200368u, 1711684554u,  285281116u, 2405801727u, 4167216745u, 1634467795u,  376229701u,
; 2305 :   2685067896u, 3608007406u, 1308918612u,  956543938u, 2808555105u, 3495958263u, 1231636301u, 1047427035u,
; 2306 :   2932959818u, 3654703836u, 1088359270u,  936918000u, 2847714899u, 3736837829u, 1202900863u,  817233897u,
; 2307 :   3183342108u, 3401237130u, 1404277552u,  615818150u, 3134207493u, 3453421203u, 1423857449u,  601450431u,
; 2308 :   3009837614u, 3294710456u, 1567103746u,  711928724u, 3020668471u, 3272380065u, 1510334235u,  755167117u
; 2309 : };
; 2310 : 
; 2311 : /*Return the CRC of the bytes buf[0..len-1].*/
; 2312 : unsigned lodepng_crc32(const unsigned char* buf, size_t len)
; 2313 : {
; 2314 :   unsigned c = 0xffffffffL;
; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)
; 2318 :   {
; 2319 :     c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
; 2320 :   }
; 2321 :   return c ^ 0xffffffffL;
; 2322 : }
; 2323 : 
; 2324 : /* ////////////////////////////////////////////////////////////////////////// */
; 2325 : /* / Reading and writing single bits and bytes from/to stream for LodePNG   / */
; 2326 : /* ////////////////////////////////////////////////////////////////////////// */
; 2327 : 
; 2328 : static unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream)
; 2329 : {
; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);
; 2331 :   (*bitpointer)++;
; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)
; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
; 2354 :   }
; 2355 :   (*bitpointer)++;
; 2356 : }
; 2357 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2358 : 
; 2359 : static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2360 : {
; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));
; 2363 :   else         bitstream[(*bitpointer) >> 3] |=  (1 << (7 - ((*bitpointer) & 0x7)));
; 2364 :   (*bitpointer)++;
; 2365 : }
; 2366 : 
; 2367 : /* ////////////////////////////////////////////////////////////////////////// */
; 2368 : /* / PNG chunks                                                             / */
; 2369 : /* ////////////////////////////////////////////////////////////////////////// */
; 2370 : 
; 2371 : unsigned lodepng_chunk_length(const unsigned char* chunk)
; 2372 : {
; 2373 :   return lodepng_read32bitInt(&chunk[0]);
; 2374 : }
; 2375 : 
; 2376 : void lodepng_chunk_type(char type[5], const unsigned char* chunk)
; 2377 : {
; 2378 :   unsigned i;
; 2379 :   for(i = 0; i < 4; i++) type[i] = chunk[4 + i];
; 2380 :   type[4] = 0; /*null termination char*/
; 2381 : }
; 2382 : 
; 2383 : unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type)
; 2384 : {
; 2385 :   if(strlen(type) != 4) return 0;
; 2386 :   return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);
; 2387 : }
; 2388 : 
; 2389 : unsigned char lodepng_chunk_ancillary(const unsigned char* chunk)
; 2390 : {
; 2391 :   return((chunk[4] & 32) != 0);
; 2392 : }
; 2393 : 
; 2394 : unsigned char lodepng_chunk_private(const unsigned char* chunk)
; 2395 : {
; 2396 :   return((chunk[6] & 32) != 0);
; 2397 : }
; 2398 : 
; 2399 : unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk)
; 2400 : {
; 2401 :   return((chunk[7] & 32) != 0);
; 2402 : }
; 2403 : 
; 2404 : unsigned char* lodepng_chunk_data(unsigned char* chunk)
; 2405 : {
; 2406 :   return &chunk[8];
; 2407 : }
; 2408 : 
; 2409 : const unsigned char* lodepng_chunk_data_const(const unsigned char* chunk)
; 2410 : {
; 2411 :   return &chunk[8];
; 2412 : }
; 2413 : 
; 2414 : unsigned lodepng_chunk_check_crc(const unsigned char* chunk)
; 2415 : {
; 2416 :   unsigned length = lodepng_chunk_length(chunk);
; 2417 :   unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);
; 2418 :   /*the CRC is taken of the data and the 4 chunk type letters, not the length*/
; 2419 :   unsigned checksum = lodepng_crc32(&chunk[4], length + 4);
; 2420 :   if(CRC != checksum) return 1;
; 2421 :   else return 0;
; 2422 : }
; 2423 : 
; 2424 : void lodepng_chunk_generate_crc(unsigned char* chunk)
; 2425 : {
; 2426 :   unsigned length = lodepng_chunk_length(chunk);
; 2427 :   unsigned CRC = lodepng_crc32(&chunk[4], length + 4);
; 2428 :   lodepng_set32bitInt(chunk + 8 + length, CRC);
; 2429 : }
; 2430 : 
; 2431 : unsigned char* lodepng_chunk_next(unsigned char* chunk)
; 2432 : {
; 2433 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2434 :   return &chunk[total_chunk_length];
; 2435 : }
; 2436 : 
; 2437 : const unsigned char* lodepng_chunk_next_const(const unsigned char* chunk)
; 2438 : {
; 2439 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2440 :   return &chunk[total_chunk_length];
; 2441 : }
; 2442 : 
; 2443 : unsigned lodepng_chunk_append(unsigned char** out, size_t* outlength, const unsigned char* chunk)
; 2444 : {
; 2445 :   unsigned i;
; 2446 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2447 :   unsigned char *chunk_start, *new_buffer;
; 2448 :   size_t new_length = (*outlength) + total_chunk_length;
; 2449 :   if(new_length < total_chunk_length || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2450 : 
; 2451 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2452 :   if(!new_buffer) return 83; /*alloc fail*/
; 2453 :   (*out) = new_buffer;
; 2454 :   (*outlength) = new_length;
; 2455 :   chunk_start = &(*out)[new_length - total_chunk_length];
; 2456 : 
; 2457 :   for(i = 0; i < total_chunk_length; i++) chunk_start[i] = chunk[i];
; 2458 : 
; 2459 :   return 0;
; 2460 : }
; 2461 : 
; 2462 : unsigned lodepng_chunk_create(unsigned char** out, size_t* outlength, unsigned length,
; 2463 :                               const char* type, const unsigned char* data)
; 2464 : {
; 2465 :   unsigned i;
; 2466 :   unsigned char *chunk, *new_buffer;
; 2467 :   size_t new_length = (*outlength) + length + 12;
; 2468 :   if(new_length < length + 12 || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2469 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2470 :   if(!new_buffer) return 83; /*alloc fail*/
; 2471 :   (*out) = new_buffer;
; 2472 :   (*outlength) = new_length;
; 2473 :   chunk = &(*out)[(*outlength) - length - 12];
; 2474 : 
; 2475 :   /*1: length*/
; 2476 :   lodepng_set32bitInt(chunk, (unsigned)length);
; 2477 : 
; 2478 :   /*2: chunk name (4 letters)*/
; 2479 :   chunk[4] = type[0];
; 2480 :   chunk[5] = type[1];
; 2481 :   chunk[6] = type[2];
; 2482 :   chunk[7] = type[3];
; 2483 : 
; 2484 :   /*3: the data*/
; 2485 :   for(i = 0; i < length; i++) chunk[8 + i] = data[i];
; 2486 : 
; 2487 :   /*4: CRC (of the chunkname characters and the data)*/
; 2488 :   lodepng_chunk_generate_crc(chunk);
; 2489 : 
; 2490 :   return 0;
; 2491 : }
; 2492 : 
; 2493 : /* ////////////////////////////////////////////////////////////////////////// */
; 2494 : /* / Color types and such                                                   / */
; 2495 : /* ////////////////////////////////////////////////////////////////////////// */
; 2496 : 
; 2497 : /*return type is a LodePNG error code*/
; 2498 : static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) /*bd = bitdepth*/
; 2499 : {
; 2500 :   switch(colortype)
; 2501 :   {
; 2502 :     case 0: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)) return 37; break; /*grey*/
; 2503 :     case 2: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGB*/
; 2504 :     case 3: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )) return 37; break; /*palette*/
; 2505 :     case 4: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*grey + alpha*/
; 2506 :     case 6: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGBA*/
; 2507 :     default: return 31;
; 2508 :   }
; 2509 :   return 0; /*allowed color type / bits combination*/
; 2510 : }
; 2511 : 
; 2512 : static unsigned getNumColorChannels(LodePNGColorType colortype)
; 2513 : {
; 2514 :   switch(colortype)

  003a9	83 f8 06	 cmp	 eax, 6
  003ac	77 23		 ja	 SHORT $LN101@decodeGene
  003ae	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN180@decodeGene[eax*4]
$LN100@decodeGene:

; 2515 :   {
; 2516 :     case 0: return 1; /*grey*/

  003b5	b9 01 00 00 00	 mov	 ecx, 1
  003ba	eb 17		 jmp	 SHORT $LN103@decodeGene
$LN99@decodeGene:

; 2517 :     case 2: return 3; /*RGB*/

  003bc	b9 03 00 00 00	 mov	 ecx, 3
  003c1	eb 10		 jmp	 SHORT $LN103@decodeGene
$LN97@decodeGene:

; 2518 :     case 3: return 1; /*palette*/
; 2519 :     case 4: return 2; /*grey + alpha*/

  003c3	b9 02 00 00 00	 mov	 ecx, 2
  003c8	eb 09		 jmp	 SHORT $LN103@decodeGene
$LN96@decodeGene:

; 2520 :     case 6: return 4; /*RGBA*/

  003ca	b9 04 00 00 00	 mov	 ecx, 4
  003cf	eb 02		 jmp	 SHORT $LN103@decodeGene
$LN101@decodeGene:

; 2521 :   }
; 2522 :   return 0; /*unexisting color type*/

  003d1	33 c9		 xor	 ecx, ecx
$LN103@decodeGene:

; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;
; 2529 : }
; 2530 : 
; 2531 : /* ////////////////////////////////////////////////////////////////////////// */
; 2532 : 
; 2533 : void lodepng_color_mode_init(LodePNGColorMode* info)
; 2534 : {
; 2535 :   info->key_defined = 0;
; 2536 :   info->key_r = info->key_g = info->key_b = 0;
; 2537 :   info->colortype = LCT_RGBA;
; 2538 :   info->bitdepth = 8;
; 2539 :   info->palette = 0;
; 2540 :   info->palettesize = 0;
; 2541 : }
; 2542 : 
; 2543 : void lodepng_color_mode_cleanup(LodePNGColorMode* info)
; 2544 : {
; 2545 :   lodepng_palette_clear(info);
; 2546 : }
; 2547 : 
; 2548 : unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
; 2549 : {
; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;
; 2553 :   if(source->palette)
; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);
; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];
; 2558 :   }
; 2559 :   return 0;
; 2560 : }
; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);
; 2585 :   info->palette = 0;
; 2586 :   info->palettesize = 0;
; 2587 : }
; 2588 : 
; 2589 : unsigned lodepng_palette_add(LodePNGColorMode* info,
; 2590 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2591 : {
; 2592 :   unsigned char* data;
; 2593 :   /*the same resize technique as C++ std::vectors is used, and here it's made so that for a palette with
; 2594 :   the max of 256 colors, it'll have the exact alloc size*/
; 2595 :   if(!info->palette) /*allocate palette if empty*/
; 2596 :   {
; 2597 :     /*room for 256 colors with 4 bytes each*/
; 2598 :     data = (unsigned char*)lodepng_realloc(info->palette, 1024);
; 2599 :     if(!data) return 83; /*alloc fail*/
; 2600 :     else info->palette = data;
; 2601 :   }
; 2602 :   info->palette[4 * info->palettesize + 0] = r;
; 2603 :   info->palette[4 * info->palettesize + 1] = g;
; 2604 :   info->palette[4 * info->palettesize + 2] = b;
; 2605 :   info->palette[4 * info->palettesize + 3] = a;
; 2606 :   info->palettesize++;
; 2607 :   return 0;
; 2608 : }
; 2609 : 
; 2610 : unsigned lodepng_get_bpp(const LodePNGColorMode* info)
; 2611 : {
; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }
; 2615 : 
; 2616 : unsigned lodepng_get_channels(const LodePNGColorMode* info)
; 2617 : {
; 2618 :   return getNumColorChannels(info->colortype);
; 2619 : }
; 2620 : 
; 2621 : unsigned lodepng_is_greyscale_type(const LodePNGColorMode* info)
; 2622 : {
; 2623 :   return info->colortype == LCT_GREY || info->colortype == LCT_GREY_ALPHA;
; 2624 : }
; 2625 : 
; 2626 : unsigned lodepng_is_alpha_type(const LodePNGColorMode* info)
; 2627 : {
; 2628 :   return (info->colortype & 4) != 0; /*4 or 6*/
; 2629 : }
; 2630 : 
; 2631 : unsigned lodepng_is_palette_type(const LodePNGColorMode* info)
; 2632 : {
; 2633 :   return info->colortype == LCT_PALETTE;
; 2634 : }
; 2635 : 
; 2636 : unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info)
; 2637 : {
; 2638 :   size_t i;
; 2639 :   for(i = 0; i < info->palettesize; i++)
; 2640 :   {
; 2641 :     if(info->palette[i * 4 + 3] < 255) return 1;
; 2642 :   }
; 2643 :   return 0;
; 2644 : }
; 2645 : 
; 2646 : unsigned lodepng_can_have_alpha(const LodePNGColorMode* info)
; 2647 : {
; 2648 :   return info->key_defined
; 2649 :       || lodepng_is_alpha_type(info)
; 2650 :       || lodepng_has_palette_alpha(info);
; 2651 : }
; 2652 : 
; 2653 : size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode* color)
; 2654 : {
; 2655 :   return (w * h * lodepng_get_bpp(color) + 7) / 8;

  003d3	8b 45 08	 mov	 eax, DWORD PTR _h$[ebp]
  003d6	8b be 98 00 00
	00		 mov	 edi, DWORD PTR [esi+152]
  003dc	8b 00		 mov	 eax, DWORD PTR [eax]
  003de	8b 55 f0	 mov	 edx, DWORD PTR _w$1$[ebp]
  003e1	0f af f8	 imul	 edi, eax
  003e4	0f af 3a	 imul	 edi, DWORD PTR [edx]
  003e7	0f af f9	 imul	 edi, ecx
  003ea	83 c7 07	 add	 edi, 7
  003ed	c1 ef 03	 shr	 edi, 3

; 4716 :   {
; 4717 :     ucvector scanlines;
; 4718 :     ucvector_init(&scanlines);
; 4719 : 
; 4720 :     /*maximum final image length is already reserved in the vector's length - this is not really necessary*/
; 4721 :     if(!ucvector_resize(&scanlines, lodepng_get_raw_size(*w, *h, &state->info_png.color) + *h))

  003f0	03 f8		 add	 edi, eax

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)

  003f2	74 18		 je	 SHORT $LN108@decodeGene

; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;

  003f4	8d 1c 3f	 lea	 ebx, DWORD PTR [edi+edi]

; 68   :   return realloc(ptr, new_size);

  003f7	53		 push	 ebx
  003f8	6a 00		 push	 0
  003fa	e8 00 00 00 00	 call	 _realloc
  003ff	83 c4 08	 add	 esp, 8

; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)

  00402	85 c0		 test	 eax, eax
  00404	74 36		 je	 SHORT $LN167@decodeGene

; 223  :     {
; 224  :       p->allocsize = newsize;

  00406	89 5d e8	 mov	 DWORD PTR _scanlines$1[ebp+8], ebx

; 225  :       p->data = (unsigned char*)data;

  00409	89 45 e0	 mov	 DWORD PTR _scanlines$1[ebp], eax
$LN108@decodeGene:

; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;

  0040c	89 7d e4	 mov	 DWORD PTR _scanlines$1[ebp+4], edi
$LN5@decodeGene:

; 4724 :     }
; 4725 :     if(!state->error)

  0040f	83 be 28 01 00
	00 00		 cmp	 DWORD PTR [esi+296], 0
  00416	0f 85 ca 00 00
	00		 jne	 $LN3@decodeGene

; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
; 945  :     (*bp)++;
; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);
; 965  :   generateFixedDistanceTree(tree_d);
; 966  : }
; 967  : 
; 968  : /*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
; 969  : static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
; 970  :                                       const unsigned char* in, size_t* bp, size_t inlength)
; 971  : {
; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;
; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/
; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;
; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;
; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;
; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)
; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
; 1009 :     if(error) break;
; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;
; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;
; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;
; 1020 :     while(i < HLIT + HDIST)
; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
; 1023 :       if(code <= 15) /*a length code*/
; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;
; 1026 :         else bitlen_d[i - HLIT] = code;
; 1027 :         i++;
; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/
; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);
; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];
; 1040 :         else value = bitlen_d[i - HLIT - 1];
; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)
; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
; 1045 :           if(i < HLIT) bitlen_ll[i] = value;
; 1046 :           else bitlen_d[i - HLIT] = value;
; 1047 :           i++;
; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/
; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);
; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)
; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1063 :           else bitlen_d[i - HLIT] = 0;
; 1064 :           i++;
; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/
; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);
; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)
; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1080 :           else bitlen_d[i - HLIT] = 0;
; 1081 :           i++;
; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))
; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;
; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/
; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;
; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 1102 :     if(error) break;
; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
; 1104 : 
; 1105 :     break; /*end of error-while*/
; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;
; 1114 : }
; 1115 : 
; 1116 : /*inflate a block with dynamic of fixed Huffman tree*/
; 1117 : static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
; 1118 :                                     size_t* pos, size_t inlength, unsigned btype)
; 1119 : {
; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;
; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/
; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/
; 1136 :     {
; 1137 :       if((*pos) >= out->size)
; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);
; 1143 :       (*pos)++;
; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);
; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
; 1161 :       if(code_d > 29)
; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;
; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/
; 1170 :         break;
; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);
; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);
; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)
; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)
; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];
; 1193 :         (*pos)++;
; 1194 :         backward++;
; 1195 :         if(backward >= start) backward = start - distance;
; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)
; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;
; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;
; 1215 : }
; 1216 : 
; 1217 : static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
; 1218 : {
; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;
; 1223 :   p = (*bp) / 8; /*byte position*/
; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/
; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;
; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;
; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)
; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];
; 1241 : 
; 1242 :   (*bp) = p * 8;
; 1243 : 
; 1244 :   return error;
; 1245 : }
; 1246 : 
; 1247 : static unsigned lodepng_inflatev(ucvector* out,
; 1248 :                                  const unsigned char* in, size_t insize,
; 1249 :                                  const LodePNGDecompressSettings* settings)
; 1250 : {
; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;
; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/
; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)
; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
; 1264 :     BFINAL = readBitFromStream(&bp, in);
; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);
; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
; 1271 : 
; 1272 :     if(error) return error;
; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/
; 1277 : 
; 1278 :   return error;
; 1279 : }
; 1280 : 
; 1281 : unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
; 1282 :                          const unsigned char* in, size_t insize,
; 1283 :                          const LodePNGDecompressSettings* settings)
; 1284 : {
; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);
; 1289 :   *out = v.data;
; 1290 :   *outsize = v.size;
; 1291 :   return error;
; 1292 : }
; 1293 : 
; 1294 : static unsigned inflate(unsigned char** out, size_t* outsize,
; 1295 :                         const unsigned char* in, size_t insize,
; 1296 :                         const LodePNGDecompressSettings* settings)
; 1297 : {
; 1298 :   if(settings->custom_inflate)
; 1299 :   {
; 1300 :     return settings->custom_inflate(out, outsize, in, insize, settings);
; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }
; 1307 : 
; 1308 : #endif /*LODEPNG_COMPILE_DECODER*/
; 1309 : 
; 1310 : #ifdef LODEPNG_COMPILE_ENCODER
; 1311 : 
; 1312 : /* ////////////////////////////////////////////////////////////////////////// */
; 1313 : /* / Deflator (Compressor)                                                  / */
; 1314 : /* ////////////////////////////////////////////////////////////////////////// */
; 1315 : 
; 1316 : static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;
; 1317 : 
; 1318 : /*bitlen is the size in bits of the code*/
; 1319 : static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)
; 1320 : {
; 1321 :   addBitsToStreamReversed(bp, compressed, code, bitlen);
; 1322 : }
; 1323 : 
; 1324 : /*search the index in the array, that has the largest value smaller than or equal to the given value,
; 1325 : given array must be sorted (if no value is smaller, it returns the size of the given array)*/
; 1326 : static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)
; 1327 : {
; 1328 :   /*linear search implementation*/
; 1329 :   /*for(size_t i = 1; i < array_size; i++) if(array[i] > value) return i - 1;
; 1330 :   return array_size - 1;*/
; 1331 : 
; 1332 :   /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
; 1333 :   size_t left  = 1;
; 1334 :   size_t right = array_size - 1;
; 1335 :   while(left <= right)
; 1336 :   {
; 1337 :     size_t mid = (left + right) / 2;
; 1338 :     if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
; 1339 :     else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
; 1340 :     else return mid - 1;
; 1341 :   }
; 1342 :   return array_size - 1;
; 1343 : }
; 1344 : 
; 1345 : static void addLengthDistance(uivector* values, size_t length, size_t distance)
; 1346 : {
; 1347 :   /*values in encoded vector are those used by deflate:
; 1348 :   0-255: literal bytes
; 1349 :   256: end
; 1350 :   257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
; 1351 :   286-287: invalid*/
; 1352 : 
; 1353 :   unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
; 1354 :   unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
; 1355 :   unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
; 1356 :   unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);
; 1357 : 
; 1358 :   uivector_push_back(values, length_code + FIRST_LENGTH_CODE_INDEX);
; 1359 :   uivector_push_back(values, extra_length);
; 1360 :   uivector_push_back(values, dist_code);
; 1361 :   uivector_push_back(values, extra_distance);
; 1362 : }
; 1363 : 
; 1364 : static const unsigned HASH_NUM_VALUES = 65536;
; 1365 : static const unsigned HASH_NUM_CHARACTERS = 3;
; 1366 : static const unsigned HASH_SHIFT = 2;
; 1367 : /*
; 1368 : The HASH_NUM_CHARACTERS value is used to make encoding faster by using longer
; 1369 : sequences to generate a hash value from the stream bytes. Setting it to 3
; 1370 : gives exactly the same compression as the brute force method, since deflate's
; 1371 : run length encoding starts with lengths of 3. Setting it to higher values,
; 1372 : like 6, can make the encoding faster (not always though!), but will cause the
; 1373 : encoding to miss any length between 3 and this value, so that the compression
; 1374 : may be worse (but this can vary too depending on the image, sometimes it is
; 1375 : even a bit better instead).
; 1376 : The HASH_NUM_VALUES is the amount of unique possible hash values that
; 1377 : combinations of bytes can give, the higher it is the more memory is needed, but
; 1378 : if it's too low the advantage of hashing is gone.
; 1379 : */
; 1380 : 
; 1381 : typedef struct Hash
; 1382 : {
; 1383 :   int* head; /*hash value to head circular pos*/
; 1384 :   int* val; /*circular pos to hash value*/
; 1385 :   /*circular pos to prev circular pos*/
; 1386 :   unsigned short* chain;
; 1387 :   unsigned short* zeros;
; 1388 : } Hash;
; 1389 : 
; 1390 : static unsigned hash_init(Hash* hash, unsigned windowsize)
; 1391 : {
; 1392 :   unsigned i;
; 1393 :   hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
; 1394 :   hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
; 1395 :   hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1396 :   hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1397 : 
; 1398 :   if(!hash->head || !hash->val || !hash->chain || !hash->zeros) return 83; /*alloc fail*/
; 1399 : 
; 1400 :   /*initialize hash table*/
; 1401 :   for(i = 0; i < HASH_NUM_VALUES; i++) hash->head[i] = -1;
; 1402 :   for(i = 0; i < windowsize; i++) hash->val[i] = -1;
; 1403 :   for(i = 0; i < windowsize; i++) hash->chain[i] = i; /*same value as index indicates uninitialized*/
; 1404 : 
; 1405 :   return 0;
; 1406 : }
; 1407 : 
; 1408 : static void hash_cleanup(Hash* hash)
; 1409 : {
; 1410 :   lodepng_free(hash->head);
; 1411 :   lodepng_free(hash->val);
; 1412 :   lodepng_free(hash->chain);
; 1413 :   lodepng_free(hash->zeros);
; 1414 : }
; 1415 : 
; 1416 : static unsigned getHash(const unsigned char* data, size_t size, size_t pos)
; 1417 : {
; 1418 :   unsigned result = 0;
; 1419 :   size_t amount, i;
; 1420 :   if(pos >= size) return 0;
; 1421 :   amount = HASH_NUM_CHARACTERS;
; 1422 :   if(pos + amount >= size) amount = size - pos;
; 1423 :   for(i = 0; i < amount; i++) result ^= (data[pos + i] << (i * HASH_SHIFT));
; 1424 :   return result % HASH_NUM_VALUES;
; 1425 : }
; 1426 : 
; 1427 : static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)
; 1428 : {
; 1429 :   const unsigned char* start = data + pos;
; 1430 :   const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
; 1431 :   if(end > data + size) end = data + size;
; 1432 :   data = start;
; 1433 :   while (data != end && *data == 0) data++;
; 1434 :   /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
; 1435 :   return (unsigned)(data - start);
; 1436 : }
; 1437 : 
; 1438 : static void updateHashChain(Hash* hash, size_t pos, int hashval, unsigned windowsize)
; 1439 : {
; 1440 :   unsigned wpos = pos % windowsize;
; 1441 :   hash->val[wpos] = hashval;
; 1442 :   if(hash->head[hashval] != -1) hash->chain[wpos] = hash->head[hashval];
; 1443 :   hash->head[hashval] = wpos;
; 1444 : }
; 1445 : 
; 1446 : /*
; 1447 : LZ77-encode the data. Return value is error code. The input are raw bytes, the output
; 1448 : is in the form of unsigned integers with codes representing for example literal bytes, or
; 1449 : length/distance pairs.
; 1450 : It uses a hash table technique to let it encode faster. When doing LZ77 encoding, a
; 1451 : sliding window (of windowsize) is used, and all past bytes in that window can be used as
; 1452 : the "dictionary". A brute force search through all possible distances would be slow, and
; 1453 : this hash technique is one out of several ways to speed this up.
; 1454 : */
; 1455 : static unsigned encodeLZ77(uivector* out, Hash* hash,
; 1456 :                            const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
; 1457 :                            unsigned minmatch, unsigned nicematch, unsigned lazymatching)
; 1458 : {
; 1459 :   unsigned short numzeros = 0;
; 1460 :   int usezeros = windowsize >= 8192; /*for small window size, the 'max chain length' optimization does a better job*/
; 1461 :   unsigned pos, i, error = 0;
; 1462 :   /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
; 1463 :   unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8;
; 1464 :   unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;
; 1465 : 
; 1466 :   if(!error)
; 1467 :   {
; 1468 :     unsigned offset; /*the offset represents the distance in LZ77 terminology*/
; 1469 :     unsigned length;
; 1470 :     unsigned lazy = 0;
; 1471 :     unsigned lazylength = 0, lazyoffset = 0;
; 1472 :     unsigned hashval;
; 1473 :     unsigned current_offset, current_length;
; 1474 :     const unsigned char *lastptr, *foreptr, *backptr;
; 1475 :     unsigned short hashpos, prevpos;
; 1476 : 
; 1477 :     for(pos = inpos; pos < insize; pos++)
; 1478 :     {
; 1479 :       size_t wpos = pos % windowsize; /*position for in 'circular' hash buffers*/
; 1480 : 
; 1481 :       hashval = getHash(in, insize, pos);
; 1482 :       updateHashChain(hash, pos, hashval, windowsize);
; 1483 : 
; 1484 :       if(usezeros && hashval == 0)
; 1485 :       {
; 1486 :         numzeros = countZeros(in, insize, pos);
; 1487 :         hash->zeros[wpos] = numzeros;
; 1488 :       }
; 1489 : 
; 1490 :       /*the length and offset found for the current position*/
; 1491 :       length = 0;
; 1492 :       offset = 0;
; 1493 : 
; 1494 :       prevpos = hash->head[hashval];
; 1495 :       hashpos = hash->chain[prevpos];
; 1496 : 
; 1497 :       lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];
; 1498 : 
; 1499 :       /*search for the longest string*/
; 1500 :       if(hash->val[wpos] == (int)hashval)
; 1501 :       {
; 1502 :         unsigned chainlength = 0;
; 1503 :         for(;;)
; 1504 :         {
; 1505 :           /*stop when went completely around the circular buffer*/
; 1506 :           if(prevpos < wpos && hashpos > prevpos && hashpos <= wpos) break;
; 1507 :           if(prevpos > wpos && (hashpos <= wpos || hashpos > prevpos)) break;
; 1508 :           if(chainlength++ >= maxchainlength) break;
; 1509 : 
; 1510 :           current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;
; 1511 :           if(current_offset > 0)
; 1512 :           {
; 1513 :             /*test the next characters*/
; 1514 :             foreptr = &in[pos];
; 1515 :             backptr = &in[pos - current_offset];
; 1516 : 
; 1517 :             /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
; 1518 :             if(usezeros && hashval == 0 && hash->val[hashpos] == 0 /*hashval[hashpos] may be out of date*/)
; 1519 :             {
; 1520 :               unsigned short skip = hash->zeros[hashpos];
; 1521 :               if(skip > numzeros) skip = numzeros;
; 1522 :               backptr += skip;
; 1523 :               foreptr += skip;
; 1524 :             }
; 1525 : 
; 1526 :             /* multiple checks at once per array bounds check */
; 1527 :             while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
; 1528 :             {
; 1529 :               ++backptr;
; 1530 :               ++foreptr;
; 1531 :             }
; 1532 :             current_length = (unsigned)(foreptr - &in[pos]);
; 1533 : 
; 1534 :             if(current_length > length)
; 1535 :             {
; 1536 :               length = current_length; /*the longest length*/
; 1537 :               offset = current_offset; /*the offset that is related to this longest length*/
; 1538 :               /*jump out once a length of max length is found (speed gain)*/
; 1539 :               if(current_length >= nicematch || current_length == MAX_SUPPORTED_DEFLATE_LENGTH) break;
; 1540 :             }
; 1541 :           }
; 1542 : 
; 1543 :           if(hashpos == hash->chain[hashpos]) break;
; 1544 : 
; 1545 :           prevpos = hashpos;
; 1546 :           hashpos = hash->chain[hashpos];
; 1547 :         }
; 1548 :       }
; 1549 : 
; 1550 :       if(lazymatching)
; 1551 :       {
; 1552 :         if(!lazy && length >= 3 && length <= maxlazymatch && length < MAX_SUPPORTED_DEFLATE_LENGTH)
; 1553 :         {
; 1554 :           lazy = 1;
; 1555 :           lazylength = length;
; 1556 :           lazyoffset = offset;
; 1557 :           continue; /*try the next byte*/
; 1558 :         }
; 1559 :         if(lazy)
; 1560 :         {
; 1561 :           lazy = 0;
; 1562 :           if(pos == 0) ERROR_BREAK(81);
; 1563 :           if(length > lazylength + 1)
; 1564 :           {
; 1565 :             /*push the previous character as literal*/
; 1566 :             if(!uivector_push_back(out, in[pos - 1])) ERROR_BREAK(83 /*alloc fail*/);
; 1567 :           }
; 1568 :           else
; 1569 :           {
; 1570 :             length = lazylength;
; 1571 :             offset = lazyoffset;
; 1572 :             hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
; 1573 :             pos--;
; 1574 :           }
; 1575 :         }
; 1576 :       }
; 1577 :       if(length >= 3 && offset > windowsize) ERROR_BREAK(86 /*too big (or overflown negative) offset*/);
; 1578 : 
; 1579 :       /**encode it as length/distance pair or literal value**/
; 1580 :       if(length < 3) /*only lengths of 3 or higher are supported as length/distance pair*/
; 1581 :       {
; 1582 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1583 :       }
; 1584 :       else if(length < minmatch || (length == 3 && offset > 4096))
; 1585 :       {
; 1586 :         /*compensate for the fact that longer offsets have more extra bits, a
; 1587 :         length of only 3 may be not worth it then*/
; 1588 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1589 :       }
; 1590 :       else
; 1591 :       {
; 1592 :         addLengthDistance(out, length, offset);
; 1593 :         for(i = 1; i < length; i++)
; 1594 :         {
; 1595 :           pos++;
; 1596 :           hashval = getHash(in, insize, pos);
; 1597 :           updateHashChain(hash, pos, hashval, windowsize);
; 1598 :           if(usezeros && hashval == 0)
; 1599 :           {
; 1600 :             hash->zeros[pos % windowsize] = countZeros(in, insize, pos);
; 1601 :           }
; 1602 :         }
; 1603 :       }
; 1604 : 
; 1605 :     } /*end of the loop through each character of input*/
; 1606 :   } /*end of "if(!error)"*/
; 1607 : 
; 1608 :   return error;
; 1609 : }
; 1610 : 
; 1611 : /* /////////////////////////////////////////////////////////////////////////// */
; 1612 : 
; 1613 : static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)
; 1614 : {
; 1615 :   /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
; 1616 :   2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/
; 1617 : 
; 1618 :   size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
; 1619 :   unsigned datapos = 0;
; 1620 :   for(i = 0; i < numdeflateblocks; i++)
; 1621 :   {
; 1622 :     unsigned BFINAL, BTYPE, LEN, NLEN;
; 1623 :     unsigned char firstbyte;
; 1624 : 
; 1625 :     BFINAL = (i == numdeflateblocks - 1);
; 1626 :     BTYPE = 0;
; 1627 : 
; 1628 :     firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1) << 1) + ((BTYPE & 2) << 1));
; 1629 :     ucvector_push_back(out, firstbyte);
; 1630 : 
; 1631 :     LEN = 65535;
; 1632 :     if(datasize - datapos < 65535) LEN = (unsigned)datasize - datapos;
; 1633 :     NLEN = 65535 - LEN;
; 1634 : 
; 1635 :     ucvector_push_back(out, (unsigned char)(LEN % 256));
; 1636 :     ucvector_push_back(out, (unsigned char)(LEN / 256));
; 1637 :     ucvector_push_back(out, (unsigned char)(NLEN % 256));
; 1638 :     ucvector_push_back(out, (unsigned char)(NLEN / 256));
; 1639 : 
; 1640 :     /*Decompressed data*/
; 1641 :     for(j = 0; j < 65535 && datapos < datasize; j++)
; 1642 :     {
; 1643 :       ucvector_push_back(out, data[datapos++]);
; 1644 :     }
; 1645 :   }
; 1646 : 
; 1647 :   return 0;
; 1648 : }
; 1649 : 
; 1650 : /*
; 1651 : write the lz77-encoded data, which has lit, len and dist codes, to compressed stream using huffman trees.
; 1652 : tree_ll: the tree for lit and len codes.
; 1653 : tree_d: the tree for distance codes.
; 1654 : */
; 1655 : static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
; 1656 :                           const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
; 1657 : {
; 1658 :   size_t i = 0;
; 1659 :   for(i = 0; i < lz77_encoded->size; i++)
; 1660 :   {
; 1661 :     unsigned val = lz77_encoded->data[i];
; 1662 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_ll, val), HuffmanTree_getLength(tree_ll, val));
; 1663 :     if(val > 256) /*for a length code, 3 more things have to be added*/
; 1664 :     {
; 1665 :       unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
; 1666 :       unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
; 1667 :       unsigned length_extra_bits = lz77_encoded->data[++i];
; 1668 : 
; 1669 :       unsigned distance_code = lz77_encoded->data[++i];
; 1670 : 
; 1671 :       unsigned distance_index = distance_code;
; 1672 :       unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
; 1673 :       unsigned distance_extra_bits = lz77_encoded->data[++i];
; 1674 : 
; 1675 :       addBitsToStream(bp, out, length_extra_bits, n_length_extra_bits);
; 1676 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
; 1677 :                        HuffmanTree_getLength(tree_d, distance_code));
; 1678 :       addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
; 1679 :     }
; 1680 :   }
; 1681 : }
; 1682 : 
; 1683 : /*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
; 1684 : static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,
; 1685 :                                const unsigned char* data, size_t datapos, size_t dataend,
; 1686 :                                const LodePNGCompressSettings* settings, int final)
; 1687 : {
; 1688 :   unsigned error = 0;
; 1689 : 
; 1690 :   /*
; 1691 :   A block is compressed as follows: The PNG data is lz77 encoded, resulting in
; 1692 :   literal bytes and length/distance pairs. This is then huffman compressed with
; 1693 :   two huffman trees. One huffman tree is used for the lit and len values ("ll"),
; 1694 :   another huffman tree is used for the dist values ("d"). These two trees are
; 1695 :   stored using their code lengths, and to compress even more these code lengths
; 1696 :   are also run-length encoded and huffman compressed. This gives a huffman tree
; 1697 :   of code lengths "cl". The code lenghts used to describe this third tree are
; 1698 :   the code length code lengths ("clcl").
; 1699 :   */
; 1700 : 
; 1701 :   /*The lz77 encoded data, represented with integers since there will also be length and distance codes in it*/
; 1702 :   uivector lz77_encoded;
; 1703 :   HuffmanTree tree_ll; /*tree for lit,len values*/
; 1704 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1705 :   HuffmanTree tree_cl; /*tree for encoding the code lengths representing tree_ll and tree_d*/
; 1706 :   uivector frequencies_ll; /*frequency of lit,len codes*/
; 1707 :   uivector frequencies_d; /*frequency of dist codes*/
; 1708 :   uivector frequencies_cl; /*frequency of code length codes*/
; 1709 :   uivector bitlen_lld; /*lit,len,dist code lenghts (int bits), literally (without repeat codes).*/
; 1710 :   uivector bitlen_lld_e; /*bitlen_lld encoded with repeat codes (this is a rudemtary run length compression)*/
; 1711 :   /*bitlen_cl is the code length code lengths ("clcl"). The bit lengths of codes to represent tree_cl
; 1712 :   (these are written as is in the file, it would be crazy to compress these using yet another huffman
; 1713 :   tree that needs to be represented by yet another set of code lengths)*/
; 1714 :   uivector bitlen_cl;
; 1715 :   size_t datasize = dataend - datapos;
; 1716 : 
; 1717 :   /*
; 1718 :   Due to the huffman compression of huffman tree representations ("two levels"), there are some anologies:
; 1719 :   bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
; 1720 :   bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
; 1721 :   bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
; 1722 :   */
; 1723 : 
; 1724 :   unsigned BFINAL = final;
; 1725 :   size_t numcodes_ll, numcodes_d, i;
; 1726 :   unsigned HLIT, HDIST, HCLEN;
; 1727 : 
; 1728 :   uivector_init(&lz77_encoded);
; 1729 :   HuffmanTree_init(&tree_ll);
; 1730 :   HuffmanTree_init(&tree_d);
; 1731 :   HuffmanTree_init(&tree_cl);
; 1732 :   uivector_init(&frequencies_ll);
; 1733 :   uivector_init(&frequencies_d);
; 1734 :   uivector_init(&frequencies_cl);
; 1735 :   uivector_init(&bitlen_lld);
; 1736 :   uivector_init(&bitlen_lld_e);
; 1737 :   uivector_init(&bitlen_cl);
; 1738 : 
; 1739 :   /*This while loop never loops due to a break at the end, it is here to
; 1740 :   allow breaking out of it to the cleanup phase on error conditions.*/
; 1741 :   while(!error)
; 1742 :   {
; 1743 :     if(settings->use_lz77)
; 1744 :     {
; 1745 :       error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1746 :                          settings->minmatch, settings->nicematch, settings->lazymatching);
; 1747 :       if(error) break;
; 1748 :     }
; 1749 :     else
; 1750 :     {
; 1751 :       if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83 /*alloc fail*/);
; 1752 :       for(i = datapos; i < dataend; i++) lz77_encoded.data[i] = data[i]; /*no LZ77, but still will be Huffman compressed*/
; 1753 :     }
; 1754 : 
; 1755 :     if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1756 :     if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1757 : 
; 1758 :     /*Count the frequencies of lit, len and dist codes*/
; 1759 :     for(i = 0; i < lz77_encoded.size; i++)
; 1760 :     {
; 1761 :       unsigned symbol = lz77_encoded.data[i];
; 1762 :       frequencies_ll.data[symbol]++;
; 1763 :       if(symbol > 256)
; 1764 :       {
; 1765 :         unsigned dist = lz77_encoded.data[i + 2];
; 1766 :         frequencies_d.data[dist]++;
; 1767 :         i += 3;
; 1768 :       }
; 1769 :     }
; 1770 :     frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/
; 1771 : 
; 1772 :     /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
; 1773 :     error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
; 1774 :     if(error) break;
; 1775 :     /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
; 1776 :     error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
; 1777 :     if(error) break;
; 1778 : 
; 1779 :     numcodes_ll = tree_ll.numcodes; if(numcodes_ll > 286) numcodes_ll = 286;
; 1780 :     numcodes_d = tree_d.numcodes; if(numcodes_d > 30) numcodes_d = 30;
; 1781 :     /*store the code lengths of both generated trees in bitlen_lld*/
; 1782 :     for(i = 0; i < numcodes_ll; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
; 1783 :     for(i = 0; i < numcodes_d; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));
; 1784 : 
; 1785 :     /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
; 1786 :     17 (3-10 zeroes), 18 (11-138 zeroes)*/
; 1787 :     for(i = 0; i < (unsigned)bitlen_lld.size; i++)
; 1788 :     {
; 1789 :       unsigned j = 0; /*amount of repititions*/
; 1790 :       while(i + j + 1 < (unsigned)bitlen_lld.size && bitlen_lld.data[i + j + 1] == bitlen_lld.data[i]) j++;
; 1791 : 
; 1792 :       if(bitlen_lld.data[i] == 0 && j >= 2) /*repeat code for zeroes*/
; 1793 :       {
; 1794 :         j++; /*include the first zero*/
; 1795 :         if(j <= 10) /*repeat code 17 supports max 10 zeroes*/
; 1796 :         {
; 1797 :           uivector_push_back(&bitlen_lld_e, 17);
; 1798 :           uivector_push_back(&bitlen_lld_e, j - 3);
; 1799 :         }
; 1800 :         else /*repeat code 18 supports max 138 zeroes*/
; 1801 :         {
; 1802 :           if(j > 138) j = 138;
; 1803 :           uivector_push_back(&bitlen_lld_e, 18);
; 1804 :           uivector_push_back(&bitlen_lld_e, j - 11);
; 1805 :         }
; 1806 :         i += (j - 1);
; 1807 :       }
; 1808 :       else if(j >= 3) /*repeat code for value other than zero*/
; 1809 :       {
; 1810 :         size_t k;
; 1811 :         unsigned num = j / 6, rest = j % 6;
; 1812 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1813 :         for(k = 0; k < num; k++)
; 1814 :         {
; 1815 :           uivector_push_back(&bitlen_lld_e, 16);
; 1816 :           uivector_push_back(&bitlen_lld_e, 6 - 3);
; 1817 :         }
; 1818 :         if(rest >= 3)
; 1819 :         {
; 1820 :           uivector_push_back(&bitlen_lld_e, 16);
; 1821 :           uivector_push_back(&bitlen_lld_e, rest - 3);
; 1822 :         }
; 1823 :         else j -= rest;
; 1824 :         i += j;
; 1825 :       }
; 1826 :       else /*too short to benefit from repeat code*/
; 1827 :       {
; 1828 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1829 :       }
; 1830 :     }
; 1831 : 
; 1832 :     /*generate tree_cl, the huffmantree of huffmantrees*/
; 1833 : 
; 1834 :     if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1835 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1836 :     {
; 1837 :       frequencies_cl.data[bitlen_lld_e.data[i]]++;
; 1838 :       /*after a repeat code come the bits that specify the number of repetitions,
; 1839 :       those don't need to be in the frequencies_cl calculation*/
; 1840 :       if(bitlen_lld_e.data[i] >= 16) i++;
; 1841 :     }
; 1842 : 
; 1843 :     error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
; 1844 :                                             frequencies_cl.size, frequencies_cl.size, 7);
; 1845 :     if(error) break;
; 1846 : 
; 1847 :     if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
; 1848 :     for(i = 0; i < tree_cl.numcodes; i++)
; 1849 :     {
; 1850 :       /*lenghts of code length tree is in the order as specified by deflate*/
; 1851 :       bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
; 1852 :     }
; 1853 :     while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
; 1854 :     {
; 1855 :       /*remove zeros at the end, but minimum size must be 4*/
; 1856 :       if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
; 1857 :     }
; 1858 :     if(error) break;
; 1859 : 
; 1860 :     /*
; 1861 :     Write everything into the output
; 1862 : 
; 1863 :     After the BFINAL and BTYPE, the dynamic block consists out of the following:
; 1864 :     - 5 bits HLIT, 5 bits HDIST, 4 bits HCLEN
; 1865 :     - (HCLEN+4)*3 bits code lengths of code length alphabet
; 1866 :     - HLIT + 257 code lenghts of lit/length alphabet (encoded using the code length
; 1867 :       alphabet, + possible repetition codes 16, 17, 18)
; 1868 :     - HDIST + 1 code lengths of distance alphabet (encoded using the code length
; 1869 :       alphabet, + possible repetition codes 16, 17, 18)
; 1870 :     - compressed data
; 1871 :     - 256 (end code)
; 1872 :     */
; 1873 : 
; 1874 :     /*Write block type*/
; 1875 :     addBitToStream(bp, out, BFINAL);
; 1876 :     addBitToStream(bp, out, 0); /*first bit of BTYPE "dynamic"*/
; 1877 :     addBitToStream(bp, out, 1); /*second bit of BTYPE "dynamic"*/
; 1878 : 
; 1879 :     /*write the HLIT, HDIST and HCLEN values*/
; 1880 :     HLIT = (unsigned)(numcodes_ll - 257);
; 1881 :     HDIST = (unsigned)(numcodes_d - 1);
; 1882 :     HCLEN = (unsigned)bitlen_cl.size - 4;
; 1883 :     /*trim zeroes for HCLEN. HLIT and HDIST were already trimmed at tree creation*/
; 1884 :     while(!bitlen_cl.data[HCLEN + 4 - 1] && HCLEN > 0) HCLEN--;
; 1885 :     addBitsToStream(bp, out, HLIT, 5);
; 1886 :     addBitsToStream(bp, out, HDIST, 5);
; 1887 :     addBitsToStream(bp, out, HCLEN, 4);
; 1888 : 
; 1889 :     /*write the code lenghts of the code length alphabet*/
; 1890 :     for(i = 0; i < HCLEN + 4; i++) addBitsToStream(bp, out, bitlen_cl.data[i], 3);
; 1891 : 
; 1892 :     /*write the lenghts of the lit/len AND the dist alphabet*/
; 1893 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1894 :     {
; 1895 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
; 1896 :                        HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
; 1897 :       /*extra bits of repeat codes*/
; 1898 :       if(bitlen_lld_e.data[i] == 16) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 2);
; 1899 :       else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
; 1900 :       else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
; 1901 :     }
; 1902 : 
; 1903 :     /*write the compressed data symbols*/
; 1904 :     writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1905 :     /*error: the length of the end code 256 must be larger than 0*/
; 1906 :     if(HuffmanTree_getLength(&tree_ll, 256) == 0) ERROR_BREAK(64);
; 1907 : 
; 1908 :     /*write the end code*/
; 1909 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1910 : 
; 1911 :     break; /*end of error-while*/
; 1912 :   }
; 1913 : 
; 1914 :   /*cleanup*/
; 1915 :   uivector_cleanup(&lz77_encoded);
; 1916 :   HuffmanTree_cleanup(&tree_ll);
; 1917 :   HuffmanTree_cleanup(&tree_d);
; 1918 :   HuffmanTree_cleanup(&tree_cl);
; 1919 :   uivector_cleanup(&frequencies_ll);
; 1920 :   uivector_cleanup(&frequencies_d);
; 1921 :   uivector_cleanup(&frequencies_cl);
; 1922 :   uivector_cleanup(&bitlen_lld_e);
; 1923 :   uivector_cleanup(&bitlen_lld);
; 1924 :   uivector_cleanup(&bitlen_cl);
; 1925 : 
; 1926 :   return error;
; 1927 : }
; 1928 : 
; 1929 : static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,
; 1930 :                              const unsigned char* data,
; 1931 :                              size_t datapos, size_t dataend,
; 1932 :                              const LodePNGCompressSettings* settings, int final)
; 1933 : {
; 1934 :   HuffmanTree tree_ll; /*tree for literal values and length codes*/
; 1935 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1936 : 
; 1937 :   unsigned BFINAL = final;
; 1938 :   unsigned error = 0;
; 1939 :   size_t i;
; 1940 : 
; 1941 :   HuffmanTree_init(&tree_ll);
; 1942 :   HuffmanTree_init(&tree_d);
; 1943 : 
; 1944 :   generateFixedLitLenTree(&tree_ll);
; 1945 :   generateFixedDistanceTree(&tree_d);
; 1946 : 
; 1947 :   addBitToStream(bp, out, BFINAL);
; 1948 :   addBitToStream(bp, out, 1); /*first bit of BTYPE*/
; 1949 :   addBitToStream(bp, out, 0); /*second bit of BTYPE*/
; 1950 : 
; 1951 :   if(settings->use_lz77) /*LZ77 encoded*/
; 1952 :   {
; 1953 :     uivector lz77_encoded;
; 1954 :     uivector_init(&lz77_encoded);
; 1955 :     error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1956 :                        settings->minmatch, settings->nicematch, settings->lazymatching);
; 1957 :     if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1958 :     uivector_cleanup(&lz77_encoded);
; 1959 :   }
; 1960 :   else /*no LZ77, but still will be Huffman compressed*/
; 1961 :   {
; 1962 :     for(i = datapos; i < dataend; i++)
; 1963 :     {
; 1964 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
; 1965 :     }
; 1966 :   }
; 1967 :   /*add END code*/
; 1968 :   if(!error) addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1969 : 
; 1970 :   /*cleanup*/
; 1971 :   HuffmanTree_cleanup(&tree_ll);
; 1972 :   HuffmanTree_cleanup(&tree_d);
; 1973 : 
; 1974 :   return error;
; 1975 : }
; 1976 : 
; 1977 : static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
; 1978 :                                  const LodePNGCompressSettings* settings)
; 1979 : {
; 1980 :   unsigned error = 0;
; 1981 :   size_t i, blocksize, numdeflateblocks;
; 1982 :   size_t bp = 0; /*the bit pointer*/
; 1983 :   Hash hash;
; 1984 : 
; 1985 :   if(settings->btype > 2) return 61;
; 1986 :   else if(settings->btype == 0) return deflateNoCompression(out, in, insize);
; 1987 :   else if(settings->btype == 1) blocksize = insize;
; 1988 :   else /*if(settings->btype == 2)*/
; 1989 :   {
; 1990 :     blocksize = insize / 8 + 8;
; 1991 :     if(blocksize < 65535) blocksize = 65535;
; 1992 :   }
; 1993 : 
; 1994 :   numdeflateblocks = (insize + blocksize - 1) / blocksize;
; 1995 :   if(numdeflateblocks == 0) numdeflateblocks = 1;
; 1996 : 
; 1997 :   error = hash_init(&hash, settings->windowsize);
; 1998 :   if(error) return error;
; 1999 : 
; 2000 :   for(i = 0; i < numdeflateblocks && !error; i++)
; 2001 :   {
; 2002 :     int final = i == numdeflateblocks - 1;
; 2003 :     size_t start = i * blocksize;
; 2004 :     size_t end = start + blocksize;
; 2005 :     if(end > insize) end = insize;
; 2006 : 
; 2007 :     if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
; 2008 :     else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
; 2009 :   }
; 2010 : 
; 2011 :   hash_cleanup(&hash);
; 2012 : 
; 2013 :   return error;
; 2014 : }
; 2015 : 
; 2016 : unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
; 2017 :                          const unsigned char* in, size_t insize,
; 2018 :                          const LodePNGCompressSettings* settings)
; 2019 : {
; 2020 :   unsigned error;
; 2021 :   ucvector v;
; 2022 :   ucvector_init_buffer(&v, *out, *outsize);
; 2023 :   error = lodepng_deflatev(&v, in, insize, settings);
; 2024 :   *out = v.data;
; 2025 :   *outsize = v.size;
; 2026 :   return error;
; 2027 : }
; 2028 : 
; 2029 : static unsigned deflate(unsigned char** out, size_t* outsize,
; 2030 :                         const unsigned char* in, size_t insize,
; 2031 :                         const LodePNGCompressSettings* settings)
; 2032 : {
; 2033 :   if(settings->custom_deflate)
; 2034 :   {
; 2035 :     return settings->custom_deflate(out, outsize, in, insize, settings);
; 2036 :   }
; 2037 :   else
; 2038 :   {
; 2039 :     return lodepng_deflate(out, outsize, in, insize, settings);
; 2040 :   }
; 2041 : }
; 2042 : 
; 2043 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2044 : 
; 2045 : /* ////////////////////////////////////////////////////////////////////////// */
; 2046 : /* / Adler32                                                                  */
; 2047 : /* ////////////////////////////////////////////////////////////////////////// */
; 2048 : 
; 2049 : static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
; 2050 : {
; 2051 :    unsigned s1 = adler & 0xffff;
; 2052 :    unsigned s2 = (adler >> 16) & 0xffff;
; 2053 : 
; 2054 :   while(len > 0)
; 2055 :   {
; 2056 :     /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
; 2057 :     unsigned amount = len > 5550 ? 5550 : len;
; 2058 :     len -= amount;
; 2059 :     while(amount > 0)
; 2060 :     {
; 2061 :       s1 += (*data++);
; 2062 :       s2 += s1;
; 2063 :       amount--;
; 2064 :     }
; 2065 :     s1 %= 65521;
; 2066 :     s2 %= 65521;
; 2067 :   }
; 2068 : 
; 2069 :   return (s2 << 16) | s1;
; 2070 : }
; 2071 : 
; 2072 : /*Return the adler32 of the bytes data[0..len-1]*/
; 2073 : static unsigned adler32(const unsigned char* data, unsigned len)
; 2074 : {
; 2075 :   return update_adler32(1L, data, len);
; 2076 : }
; 2077 : 
; 2078 : /* ////////////////////////////////////////////////////////////////////////// */
; 2079 : /* / Zlib                                                                   / */
; 2080 : /* ////////////////////////////////////////////////////////////////////////// */
; 2081 : 
; 2082 : #ifdef LODEPNG_COMPILE_DECODER
; 2083 : 
; 2084 : unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2085 :                                  size_t insize, const LodePNGDecompressSettings* settings)
; 2086 : {
; 2087 :   unsigned error = 0;
; 2088 :   unsigned CM, CINFO, FDICT;
; 2089 : 
; 2090 :   if(insize < 2) return 53; /*error, size of zlib data too small*/
; 2091 :   /*read information from zlib header*/
; 2092 :   if((in[0] * 256 + in[1]) % 31 != 0)
; 2093 :   {
; 2094 :     /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
; 2095 :     return 24;
; 2096 :   }
; 2097 : 
; 2098 :   CM = in[0] & 15;
; 2099 :   CINFO = (in[0] >> 4) & 15;
; 2100 :   /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
; 2101 :   FDICT = (in[1] >> 5) & 1;
; 2102 :   /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/
; 2103 : 
; 2104 :   if(CM != 8 || CINFO > 7)
; 2105 :   {
; 2106 :     /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
; 2107 :     return 25;
; 2108 :   }
; 2109 :   if(FDICT != 0)
; 2110 :   {
; 2111 :     /*error: the specification of PNG says about the zlib stream:
; 2112 :       "The additional flags shall not specify a preset dictionary."*/
; 2113 :     return 26;
; 2114 :   }
; 2115 : 
; 2116 :   error = inflate(out, outsize, in + 2, insize - 2, settings);
; 2117 :   if(error) return error;
; 2118 : 
; 2119 :   if(!settings->ignore_adler32)
; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/
; 2124 :   }
; 2125 : 
; 2126 :   return 0; /*no error*/
; 2127 : }
; 2128 : 
; 2129 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2130 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2131 : {
; 2132 :   if(settings->custom_zlib)

  0041c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 4726 :     {
; 4727 :       /*decompress with the Zlib decompressor*/
; 4728 :       state->error = zlib_decompress(&scanlines.data, &scanlines.size, idat.data,
; 4729 :                                      idat.size, &state->decoder.zlibsettings);

  0041f	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);

  00422	50		 push	 eax
  00423	ff 75 0c	 push	 DWORD PTR _oldsize$1$[ebp]
  00426	ff 75 d4	 push	 DWORD PTR _idat$[ebp]
  00429	85 c9		 test	 ecx, ecx
  0042b	74 1b		 je	 SHORT $LN114@decodeGene
  0042d	8d 45 e4	 lea	 eax, DWORD PTR _scanlines$1[ebp+4]
  00430	50		 push	 eax
  00431	8d 45 e0	 lea	 eax, DWORD PTR _scanlines$1[ebp]
  00434	50		 push	 eax
  00435	ff d1		 call	 ecx
  00437	83 c4 14	 add	 esp, 20			; 00000014H
  0043a	eb 1a		 jmp	 SHORT $LN113@decodeGene
$LN167@decodeGene:

; 4722 :     {
; 4723 :       state->error = 83; /*alloc fail*/

  0043c	c7 86 28 01 00
	00 53 00 00 00	 mov	 DWORD PTR [esi+296], 83	; 00000053H
  00446	eb c7		 jmp	 SHORT $LN5@decodeGene
$LN114@decodeGene:

; 2134 :   else
; 2135 :     return lodepng_zlib_decompress(out, outsize, in, insize, settings);

  00448	8d 55 e4	 lea	 edx, DWORD PTR _scanlines$1[ebp+4]
  0044b	8d 4d e0	 lea	 ecx, DWORD PTR _scanlines$1[ebp]
  0044e	e8 00 00 00 00	 call	 ?lodepng_zlib_decompress@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z ; lodepng_zlib_decompress
  00453	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN113@decodeGene:

; 4726 :     {
; 4727 :       /*decompress with the Zlib decompressor*/
; 4728 :       state->error = zlib_decompress(&scanlines.data, &scanlines.size, idat.data,
; 4729 :                                      idat.size, &state->decoder.zlibsettings);

  00456	89 86 28 01 00
	00		 mov	 DWORD PTR [esi+296], eax

; 4730 :     }
; 4731 : 
; 4732 :     if(!state->error)

  0045c	85 c0		 test	 eax, eax
  0045e	0f 85 82 00 00
	00		 jne	 $LN3@decodeGene

; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;
; 2529 : }
; 2530 : 
; 2531 : /* ////////////////////////////////////////////////////////////////////////// */
; 2532 : 
; 2533 : void lodepng_color_mode_init(LodePNGColorMode* info)
; 2534 : {
; 2535 :   info->key_defined = 0;
; 2536 :   info->key_r = info->key_g = info->key_b = 0;
; 2537 :   info->colortype = LCT_RGBA;
; 2538 :   info->bitdepth = 8;
; 2539 :   info->palette = 0;
; 2540 :   info->palettesize = 0;
; 2541 : }
; 2542 : 
; 2543 : void lodepng_color_mode_cleanup(LodePNGColorMode* info)
; 2544 : {
; 2545 :   lodepng_palette_clear(info);
; 2546 : }
; 2547 : 
; 2548 : unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
; 2549 : {
; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;
; 2553 :   if(source->palette)
; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);
; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];
; 2558 :   }
; 2559 :   return 0;
; 2560 : }
; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);
; 2585 :   info->palette = 0;
; 2586 :   info->palettesize = 0;
; 2587 : }
; 2588 : 
; 2589 : unsigned lodepng_palette_add(LodePNGColorMode* info,
; 2590 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2591 : {
; 2592 :   unsigned char* data;
; 2593 :   /*the same resize technique as C++ std::vectors is used, and here it's made so that for a palette with
; 2594 :   the max of 256 colors, it'll have the exact alloc size*/
; 2595 :   if(!info->palette) /*allocate palette if empty*/
; 2596 :   {
; 2597 :     /*room for 256 colors with 4 bytes each*/
; 2598 :     data = (unsigned char*)lodepng_realloc(info->palette, 1024);
; 2599 :     if(!data) return 83; /*alloc fail*/
; 2600 :     else info->palette = data;
; 2601 :   }
; 2602 :   info->palette[4 * info->palettesize + 0] = r;
; 2603 :   info->palette[4 * info->palettesize + 1] = g;
; 2604 :   info->palette[4 * info->palettesize + 2] = b;
; 2605 :   info->palette[4 * info->palettesize + 3] = a;
; 2606 :   info->palettesize++;
; 2607 :   return 0;
; 2608 : }
; 2609 : 
; 2610 : unsigned lodepng_get_bpp(const LodePNGColorMode* info)
; 2611 : {
; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }
; 2615 : 
; 2616 : unsigned lodepng_get_channels(const LodePNGColorMode* info)
; 2617 : {
; 2618 :   return getNumColorChannels(info->colortype);
; 2619 : }
; 2620 : 
; 2621 : unsigned lodepng_is_greyscale_type(const LodePNGColorMode* info)
; 2622 : {
; 2623 :   return info->colortype == LCT_GREY || info->colortype == LCT_GREY_ALPHA;
; 2624 : }
; 2625 : 
; 2626 : unsigned lodepng_is_alpha_type(const LodePNGColorMode* info)
; 2627 : {
; 2628 :   return (info->colortype & 4) != 0; /*4 or 6*/
; 2629 : }
; 2630 : 
; 2631 : unsigned lodepng_is_palette_type(const LodePNGColorMode* info)
; 2632 : {
; 2633 :   return info->colortype == LCT_PALETTE;
; 2634 : }
; 2635 : 
; 2636 : unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info)
; 2637 : {
; 2638 :   size_t i;
; 2639 :   for(i = 0; i < info->palettesize; i++)
; 2640 :   {
; 2641 :     if(info->palette[i * 4 + 3] < 255) return 1;
; 2642 :   }
; 2643 :   return 0;
; 2644 : }
; 2645 : 
; 2646 : unsigned lodepng_can_have_alpha(const LodePNGColorMode* info)
; 2647 : {
; 2648 :   return info->key_defined
; 2649 :       || lodepng_is_alpha_type(info)
; 2650 :       || lodepng_has_palette_alpha(info);
; 2651 : }
; 2652 : 
; 2653 : size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode* color)
; 2654 : {
; 2655 :   return (w * h * lodepng_get_bpp(color) + 7) / 8;

  00464	8d 8e 94 00 00
	00		 lea	 ecx, DWORD PTR [esi+148]

; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;

  0046a	33 db		 xor	 ebx, ebx

; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;
; 2529 : }
; 2530 : 
; 2531 : /* ////////////////////////////////////////////////////////////////////////// */
; 2532 : 
; 2533 : void lodepng_color_mode_init(LodePNGColorMode* info)
; 2534 : {
; 2535 :   info->key_defined = 0;
; 2536 :   info->key_r = info->key_g = info->key_b = 0;
; 2537 :   info->colortype = LCT_RGBA;
; 2538 :   info->bitdepth = 8;
; 2539 :   info->palette = 0;
; 2540 :   info->palettesize = 0;
; 2541 : }
; 2542 : 
; 2543 : void lodepng_color_mode_cleanup(LodePNGColorMode* info)
; 2544 : {
; 2545 :   lodepng_palette_clear(info);
; 2546 : }
; 2547 : 
; 2548 : unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
; 2549 : {
; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;
; 2553 :   if(source->palette)
; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);
; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];
; 2558 :   }
; 2559 :   return 0;
; 2560 : }
; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);
; 2585 :   info->palette = 0;
; 2586 :   info->palettesize = 0;
; 2587 : }
; 2588 : 
; 2589 : unsigned lodepng_palette_add(LodePNGColorMode* info,
; 2590 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2591 : {
; 2592 :   unsigned char* data;
; 2593 :   /*the same resize technique as C++ std::vectors is used, and here it's made so that for a palette with
; 2594 :   the max of 256 colors, it'll have the exact alloc size*/
; 2595 :   if(!info->palette) /*allocate palette if empty*/
; 2596 :   {
; 2597 :     /*room for 256 colors with 4 bytes each*/
; 2598 :     data = (unsigned char*)lodepng_realloc(info->palette, 1024);
; 2599 :     if(!data) return 83; /*alloc fail*/
; 2600 :     else info->palette = data;
; 2601 :   }
; 2602 :   info->palette[4 * info->palettesize + 0] = r;
; 2603 :   info->palette[4 * info->palettesize + 1] = g;
; 2604 :   info->palette[4 * info->palettesize + 2] = b;
; 2605 :   info->palette[4 * info->palettesize + 3] = a;
; 2606 :   info->palettesize++;
; 2607 :   return 0;
; 2608 : }
; 2609 : 
; 2610 : unsigned lodepng_get_bpp(const LodePNGColorMode* info)
; 2611 : {
; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }
; 2615 : 
; 2616 : unsigned lodepng_get_channels(const LodePNGColorMode* info)
; 2617 : {
; 2618 :   return getNumColorChannels(info->colortype);
; 2619 : }
; 2620 : 
; 2621 : unsigned lodepng_is_greyscale_type(const LodePNGColorMode* info)
; 2622 : {
; 2623 :   return info->colortype == LCT_GREY || info->colortype == LCT_GREY_ALPHA;
; 2624 : }
; 2625 : 
; 2626 : unsigned lodepng_is_alpha_type(const LodePNGColorMode* info)
; 2627 : {
; 2628 :   return (info->colortype & 4) != 0; /*4 or 6*/
; 2629 : }
; 2630 : 
; 2631 : unsigned lodepng_is_palette_type(const LodePNGColorMode* info)
; 2632 : {
; 2633 :   return info->colortype == LCT_PALETTE;
; 2634 : }
; 2635 : 
; 2636 : unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info)
; 2637 : {
; 2638 :   size_t i;
; 2639 :   for(i = 0; i < info->palettesize; i++)
; 2640 :   {
; 2641 :     if(info->palette[i * 4 + 3] < 255) return 1;
; 2642 :   }
; 2643 :   return 0;
; 2644 : }
; 2645 : 
; 2646 : unsigned lodepng_can_have_alpha(const LodePNGColorMode* info)
; 2647 : {
; 2648 :   return info->key_defined
; 2649 :       || lodepng_is_alpha_type(info)
; 2650 :       || lodepng_has_palette_alpha(info);
; 2651 : }
; 2652 : 
; 2653 : size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode* color)
; 2654 : {
; 2655 :   return (w * h * lodepng_get_bpp(color) + 7) / 8;

  0046c	e8 00 00 00 00	 call	 ?lodepng_get_bpp@@YAIPBULodePNGColorMode@@@Z ; lodepng_get_bpp
  00471	8b f8		 mov	 edi, eax
  00473	8b 45 f0	 mov	 eax, DWORD PTR _w$1$[ebp]
  00476	0f af 38	 imul	 edi, DWORD PTR [eax]
  00479	8b 45 08	 mov	 eax, DWORD PTR _h$[ebp]
  0047c	0f af 38	 imul	 edi, DWORD PTR [eax]
  0047f	83 c7 07	 add	 edi, 7
  00482	c1 ef 03	 shr	 edi, 3

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)

  00485	85 ff		 test	 edi, edi
  00487	74 2b		 je	 SHORT $LN2@decodeGene

; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;

  00489	8d 04 3f	 lea	 eax, DWORD PTR [edi+edi]

; 68   :   return realloc(ptr, new_size);

  0048c	50		 push	 eax
  0048d	53		 push	 ebx
  0048e	e8 00 00 00 00	 call	 _realloc
  00493	83 c4 08	 add	 esp, 8

; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)

  00496	85 c0		 test	 eax, eax
  00498	74 77		 je	 SHORT $LN169@decodeGene

; 225  :       p->data = (unsigned char*)data;

  0049a	8b d8		 mov	 ebx, eax

; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;

  0049c	85 ff		 test	 edi, edi
  0049e	74 14		 je	 SHORT $LN2@decodeGene
  004a0	8b cf		 mov	 ecx, edi
  004a2	8b d1		 mov	 edx, ecx
  004a4	c1 e9 02	 shr	 ecx, 2
  004a7	33 c0		 xor	 eax, eax
  004a9	8b fb		 mov	 edi, ebx
  004ab	f3 ab		 rep stosd
  004ad	8b ca		 mov	 ecx, edx
  004af	83 e1 03	 and	 ecx, 3
  004b2	f3 aa		 rep stosb
$LN2@decodeGene:

; 4738 :       if(!state->error) state->error = postProcessScanlines(outv.data, scanlines.data, *w, *h, &state->info_png);

  004b4	83 be 28 01 00
	00 00		 cmp	 DWORD PTR [esi+296], 0
  004bb	75 24		 jne	 SHORT $LN1@decodeGene
  004bd	8b 55 e0	 mov	 edx, DWORD PTR _scanlines$1[ebp]
  004c0	8d 86 88 00 00
	00		 lea	 eax, DWORD PTR [esi+136]
  004c6	50		 push	 eax
  004c7	8b 45 08	 mov	 eax, DWORD PTR _h$[ebp]
  004ca	8b cb		 mov	 ecx, ebx
  004cc	ff 30		 push	 DWORD PTR [eax]
  004ce	8b 45 f0	 mov	 eax, DWORD PTR _w$1$[ebp]
  004d1	ff 30		 push	 DWORD PTR [eax]
  004d3	e8 00 00 00 00	 call	 ?postProcessScanlines@@YAIPAE0IIPBULodePNGInfo@@@Z ; postProcessScanlines
  004d8	83 c4 0c	 add	 esp, 12			; 0000000cH
  004db	89 86 28 01 00
	00		 mov	 DWORD PTR [esi+296], eax
$LN1@decodeGene:

; 4739 :       *out = outv.data;

  004e1	8b 45 ec	 mov	 eax, DWORD PTR _out$1$[ebp]
  004e4	89 18		 mov	 DWORD PTR [eax], ebx
$LN3@decodeGene:

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  004e6	ff 75 e0	 push	 DWORD PTR _scanlines$1[ebp]

; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;

  004e9	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _scanlines$1[ebp+8], 0
  004f0	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _scanlines$1[ebp+4], 0

; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  004f7	e8 00 00 00 00	 call	 _free
  004fc	83 c4 04	 add	 esp, 4
$LN135@decodeGene:
  004ff	ff 75 d4	 push	 DWORD PTR _idat$[ebp]
  00502	e8 00 00 00 00	 call	 _free
  00507	83 c4 04	 add	 esp, 4
  0050a	5f		 pop	 edi
$LN139@decodeGene:
  0050b	5e		 pop	 esi
  0050c	5b		 pop	 ebx

; 4740 :     }
; 4741 :     ucvector_cleanup(&scanlines);
; 4742 :   }
; 4743 : 
; 4744 :   ucvector_cleanup(&idat);
; 4745 : }

  0050d	8b e5		 mov	 esp, ebp
  0050f	5d		 pop	 ebp
  00510	c3		 ret	 0
$LN169@decodeGene:

; 4733 :     {
; 4734 :       ucvector outv;
; 4735 :       ucvector_init(&outv);
; 4736 :       if(!ucvector_resizev(&outv,
; 4737 :           lodepng_get_raw_size(*w, *h, &state->info_png.color), 0)) state->error = 83; /*alloc fail*/

  00511	c7 86 28 01 00
	00 53 00 00 00	 mov	 DWORD PTR [esi+296], 83	; 00000053H
  0051b	eb 97		 jmp	 SHORT $LN2@decodeGene
  0051d	8d 49 00	 npad	 3
$LN180@decodeGene:

; 4740 :     }
; 4741 :     ucvector_cleanup(&scanlines);
; 4742 :   }
; 4743 : 
; 4744 :   ucvector_cleanup(&idat);
; 4745 : }

  00520	00 00 00 00	 DD	 $LN100@decodeGene
  00524	00 00 00 00	 DD	 $LN101@decodeGene
  00528	00 00 00 00	 DD	 $LN99@decodeGene
  0052c	00 00 00 00	 DD	 $LN100@decodeGene
  00530	00 00 00 00	 DD	 $LN97@decodeGene
  00534	00 00 00 00	 DD	 $LN101@decodeGene
  00538	00 00 00 00	 DD	 $LN96@decodeGene
?decodeGeneric@@YAXPAPAEPAI1PAULodePNGState@@PBEI@Z ENDP ; decodeGeneric
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_decode@@YAIPAPAEPAI1PAULodePNGState@@PBEI@Z
_TEXT	SEGMENT
_out$1$ = -8						; size = 4
_w$1$ = -4						; size = 4
_h$ = 8							; size = 4
_data$1$ = 12						; size = 4
_state$ = 12						; size = 4
_in$ = 16						; size = 4
_insize$ = 20						; size = 4
?lodepng_decode@@YAIPAPAEPAI1PAULodePNGState@@PBEI@Z PROC ; lodepng_decode, COMDAT
; _out$ = ecx
; _w$ = edx

; 4750 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 4751 :   *out = 0;
; 4752 :   decodeGeneric(out, w, h, state, in, insize);

  00007	ff 75 14	 push	 DWORD PTR _insize$[ebp]
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _state$[ebp]
  0000d	ff 75 10	 push	 DWORD PTR _in$[ebp]
  00010	8b c1		 mov	 eax, ecx
  00012	56		 push	 esi
  00013	ff 75 08	 push	 DWORD PTR _h$[ebp]
  00016	89 55 fc	 mov	 DWORD PTR _w$1$[ebp], edx
  00019	89 45 f8	 mov	 DWORD PTR _out$1$[ebp], eax
  0001c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00022	e8 00 00 00 00	 call	 ?decodeGeneric@@YAXPAPAEPAI1PAULodePNGState@@PBEI@Z ; decodeGeneric

; 4753 :   if(state->error) return state->error;

  00027	8b 86 28 01 00
	00		 mov	 eax, DWORD PTR [esi+296]
  0002d	83 c4 10	 add	 esp, 16			; 00000010H
  00030	85 c0		 test	 eax, eax
  00032	0f 85 f7 00 00
	00		 jne	 $LN10@lodepng_de

; 4754 :   if(!state->decoder.color_convert || lodepng_color_mode_equal(&state->info_raw, &state->info_png.color))

  00038	53		 push	 ebx
  00039	57		 push	 edi
  0003a	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  0003d	85 ff		 test	 edi, edi
  0003f	0f 84 ca 00 00
	00		 je	 $LN21@lodepng_de
  00045	8d 5e 68	 lea	 ebx, DWORD PTR [esi+104]
  00048	8d 96 94 00 00
	00		 lea	 edx, DWORD PTR [esi+148]
  0004e	8b cb		 mov	 ecx, ebx
  00050	e8 00 00 00 00	 call	 ?lodepng_color_mode_equal@@YAHPBULodePNGColorMode@@0@Z ; lodepng_color_mode_equal
  00055	85 c0		 test	 eax, eax
  00057	0f 85 ae 00 00
	00		 jne	 $LN7@lodepng_de

; 4763 :     }
; 4764 :   }
; 4765 :   else
; 4766 :   {
; 4767 :     /*color conversion needed; sort of copy of the data*/
; 4768 :     unsigned char* data = *out;

  0005d	8b 7d f8	 mov	 edi, DWORD PTR _out$1$[ebp]
  00060	8b 07		 mov	 eax, DWORD PTR [edi]
  00062	89 45 0c	 mov	 DWORD PTR _data$1$[ebp], eax

; 4769 :     size_t outsize;
; 4770 : 
; 4771 :     /*TODO: check if this works according to the statement in the documentation: "The converter can convert
; 4772 :     from greyscale input color type, to 8-bit greyscale or greyscale with alpha"*/
; 4773 :     if(!(state->info_raw.colortype == LCT_RGB || state->info_raw.colortype == LCT_RGBA)
; 4774 :        && !(state->info_raw.bitdepth == 8))

  00065	8b 03		 mov	 eax, DWORD PTR [ebx]
  00067	83 f8 02	 cmp	 eax, 2
  0006a	74 17		 je	 SHORT $LN3@lodepng_de
  0006c	83 f8 06	 cmp	 eax, 6
  0006f	74 12		 je	 SHORT $LN3@lodepng_de
  00071	83 7e 6c 08	 cmp	 DWORD PTR [esi+108], 8
  00075	74 0c		 je	 SHORT $LN3@lodepng_de

; 4775 :     {
; 4776 :       return 56; /*unsupported color mode conversion*/

  00077	5f		 pop	 edi
  00078	5b		 pop	 ebx
  00079	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  0007e	5e		 pop	 esi

; 4789 : }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
$LN3@lodepng_de:

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
; 945  :     (*bp)++;
; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);
; 965  :   generateFixedDistanceTree(tree_d);
; 966  : }
; 967  : 
; 968  : /*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
; 969  : static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
; 970  :                                       const unsigned char* in, size_t* bp, size_t inlength)
; 971  : {
; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;
; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/
; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;
; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;
; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;
; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)
; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
; 1009 :     if(error) break;
; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;
; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;
; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;
; 1020 :     while(i < HLIT + HDIST)
; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
; 1023 :       if(code <= 15) /*a length code*/
; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;
; 1026 :         else bitlen_d[i - HLIT] = code;
; 1027 :         i++;
; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/
; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);
; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];
; 1040 :         else value = bitlen_d[i - HLIT - 1];
; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)
; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
; 1045 :           if(i < HLIT) bitlen_ll[i] = value;
; 1046 :           else bitlen_d[i - HLIT] = value;
; 1047 :           i++;
; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/
; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);
; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)
; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1063 :           else bitlen_d[i - HLIT] = 0;
; 1064 :           i++;
; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/
; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);
; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)
; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1080 :           else bitlen_d[i - HLIT] = 0;
; 1081 :           i++;
; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))
; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;
; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/
; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;
; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 1102 :     if(error) break;
; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
; 1104 : 
; 1105 :     break; /*end of error-while*/
; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;
; 1114 : }
; 1115 : 
; 1116 : /*inflate a block with dynamic of fixed Huffman tree*/
; 1117 : static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
; 1118 :                                     size_t* pos, size_t inlength, unsigned btype)
; 1119 : {
; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;
; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/
; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/
; 1136 :     {
; 1137 :       if((*pos) >= out->size)
; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);
; 1143 :       (*pos)++;
; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);
; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
; 1161 :       if(code_d > 29)
; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;
; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/
; 1170 :         break;
; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);
; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);
; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)
; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)
; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];
; 1193 :         (*pos)++;
; 1194 :         backward++;
; 1195 :         if(backward >= start) backward = start - distance;
; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)
; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;
; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;
; 1215 : }
; 1216 : 
; 1217 : static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
; 1218 : {
; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;
; 1223 :   p = (*bp) / 8; /*byte position*/
; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/
; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;
; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;
; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)
; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];
; 1241 : 
; 1242 :   (*bp) = p * 8;
; 1243 : 
; 1244 :   return error;
; 1245 : }
; 1246 : 
; 1247 : static unsigned lodepng_inflatev(ucvector* out,
; 1248 :                                  const unsigned char* in, size_t insize,
; 1249 :                                  const LodePNGDecompressSettings* settings)
; 1250 : {
; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;
; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/
; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)
; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
; 1264 :     BFINAL = readBitFromStream(&bp, in);
; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);
; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
; 1271 : 
; 1272 :     if(error) return error;
; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/
; 1277 : 
; 1278 :   return error;
; 1279 : }
; 1280 : 
; 1281 : unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
; 1282 :                          const unsigned char* in, size_t insize,
; 1283 :                          const LodePNGDecompressSettings* settings)
; 1284 : {
; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);
; 1289 :   *out = v.data;
; 1290 :   *outsize = v.size;
; 1291 :   return error;
; 1292 : }
; 1293 : 
; 1294 : static unsigned inflate(unsigned char** out, size_t* outsize,
; 1295 :                         const unsigned char* in, size_t insize,
; 1296 :                         const LodePNGDecompressSettings* settings)
; 1297 : {
; 1298 :   if(settings->custom_inflate)
; 1299 :   {
; 1300 :     return settings->custom_inflate(out, outsize, in, insize, settings);
; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }
; 1307 : 
; 1308 : #endif /*LODEPNG_COMPILE_DECODER*/
; 1309 : 
; 1310 : #ifdef LODEPNG_COMPILE_ENCODER
; 1311 : 
; 1312 : /* ////////////////////////////////////////////////////////////////////////// */
; 1313 : /* / Deflator (Compressor)                                                  / */
; 1314 : /* ////////////////////////////////////////////////////////////////////////// */
; 1315 : 
; 1316 : static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;
; 1317 : 
; 1318 : /*bitlen is the size in bits of the code*/
; 1319 : static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)
; 1320 : {
; 1321 :   addBitsToStreamReversed(bp, compressed, code, bitlen);
; 1322 : }
; 1323 : 
; 1324 : /*search the index in the array, that has the largest value smaller than or equal to the given value,
; 1325 : given array must be sorted (if no value is smaller, it returns the size of the given array)*/
; 1326 : static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)
; 1327 : {
; 1328 :   /*linear search implementation*/
; 1329 :   /*for(size_t i = 1; i < array_size; i++) if(array[i] > value) return i - 1;
; 1330 :   return array_size - 1;*/
; 1331 : 
; 1332 :   /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
; 1333 :   size_t left  = 1;
; 1334 :   size_t right = array_size - 1;
; 1335 :   while(left <= right)
; 1336 :   {
; 1337 :     size_t mid = (left + right) / 2;
; 1338 :     if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
; 1339 :     else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
; 1340 :     else return mid - 1;
; 1341 :   }
; 1342 :   return array_size - 1;
; 1343 : }
; 1344 : 
; 1345 : static void addLengthDistance(uivector* values, size_t length, size_t distance)
; 1346 : {
; 1347 :   /*values in encoded vector are those used by deflate:
; 1348 :   0-255: literal bytes
; 1349 :   256: end
; 1350 :   257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
; 1351 :   286-287: invalid*/
; 1352 : 
; 1353 :   unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
; 1354 :   unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
; 1355 :   unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
; 1356 :   unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);
; 1357 : 
; 1358 :   uivector_push_back(values, length_code + FIRST_LENGTH_CODE_INDEX);
; 1359 :   uivector_push_back(values, extra_length);
; 1360 :   uivector_push_back(values, dist_code);
; 1361 :   uivector_push_back(values, extra_distance);
; 1362 : }
; 1363 : 
; 1364 : static const unsigned HASH_NUM_VALUES = 65536;
; 1365 : static const unsigned HASH_NUM_CHARACTERS = 3;
; 1366 : static const unsigned HASH_SHIFT = 2;
; 1367 : /*
; 1368 : The HASH_NUM_CHARACTERS value is used to make encoding faster by using longer
; 1369 : sequences to generate a hash value from the stream bytes. Setting it to 3
; 1370 : gives exactly the same compression as the brute force method, since deflate's
; 1371 : run length encoding starts with lengths of 3. Setting it to higher values,
; 1372 : like 6, can make the encoding faster (not always though!), but will cause the
; 1373 : encoding to miss any length between 3 and this value, so that the compression
; 1374 : may be worse (but this can vary too depending on the image, sometimes it is
; 1375 : even a bit better instead).
; 1376 : The HASH_NUM_VALUES is the amount of unique possible hash values that
; 1377 : combinations of bytes can give, the higher it is the more memory is needed, but
; 1378 : if it's too low the advantage of hashing is gone.
; 1379 : */
; 1380 : 
; 1381 : typedef struct Hash
; 1382 : {
; 1383 :   int* head; /*hash value to head circular pos*/
; 1384 :   int* val; /*circular pos to hash value*/
; 1385 :   /*circular pos to prev circular pos*/
; 1386 :   unsigned short* chain;
; 1387 :   unsigned short* zeros;
; 1388 : } Hash;
; 1389 : 
; 1390 : static unsigned hash_init(Hash* hash, unsigned windowsize)
; 1391 : {
; 1392 :   unsigned i;
; 1393 :   hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
; 1394 :   hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
; 1395 :   hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1396 :   hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1397 : 
; 1398 :   if(!hash->head || !hash->val || !hash->chain || !hash->zeros) return 83; /*alloc fail*/
; 1399 : 
; 1400 :   /*initialize hash table*/
; 1401 :   for(i = 0; i < HASH_NUM_VALUES; i++) hash->head[i] = -1;
; 1402 :   for(i = 0; i < windowsize; i++) hash->val[i] = -1;
; 1403 :   for(i = 0; i < windowsize; i++) hash->chain[i] = i; /*same value as index indicates uninitialized*/
; 1404 : 
; 1405 :   return 0;
; 1406 : }
; 1407 : 
; 1408 : static void hash_cleanup(Hash* hash)
; 1409 : {
; 1410 :   lodepng_free(hash->head);
; 1411 :   lodepng_free(hash->val);
; 1412 :   lodepng_free(hash->chain);
; 1413 :   lodepng_free(hash->zeros);
; 1414 : }
; 1415 : 
; 1416 : static unsigned getHash(const unsigned char* data, size_t size, size_t pos)
; 1417 : {
; 1418 :   unsigned result = 0;
; 1419 :   size_t amount, i;
; 1420 :   if(pos >= size) return 0;
; 1421 :   amount = HASH_NUM_CHARACTERS;
; 1422 :   if(pos + amount >= size) amount = size - pos;
; 1423 :   for(i = 0; i < amount; i++) result ^= (data[pos + i] << (i * HASH_SHIFT));
; 1424 :   return result % HASH_NUM_VALUES;
; 1425 : }
; 1426 : 
; 1427 : static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)
; 1428 : {
; 1429 :   const unsigned char* start = data + pos;
; 1430 :   const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
; 1431 :   if(end > data + size) end = data + size;
; 1432 :   data = start;
; 1433 :   while (data != end && *data == 0) data++;
; 1434 :   /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
; 1435 :   return (unsigned)(data - start);
; 1436 : }
; 1437 : 
; 1438 : static void updateHashChain(Hash* hash, size_t pos, int hashval, unsigned windowsize)
; 1439 : {
; 1440 :   unsigned wpos = pos % windowsize;
; 1441 :   hash->val[wpos] = hashval;
; 1442 :   if(hash->head[hashval] != -1) hash->chain[wpos] = hash->head[hashval];
; 1443 :   hash->head[hashval] = wpos;
; 1444 : }
; 1445 : 
; 1446 : /*
; 1447 : LZ77-encode the data. Return value is error code. The input are raw bytes, the output
; 1448 : is in the form of unsigned integers with codes representing for example literal bytes, or
; 1449 : length/distance pairs.
; 1450 : It uses a hash table technique to let it encode faster. When doing LZ77 encoding, a
; 1451 : sliding window (of windowsize) is used, and all past bytes in that window can be used as
; 1452 : the "dictionary". A brute force search through all possible distances would be slow, and
; 1453 : this hash technique is one out of several ways to speed this up.
; 1454 : */
; 1455 : static unsigned encodeLZ77(uivector* out, Hash* hash,
; 1456 :                            const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
; 1457 :                            unsigned minmatch, unsigned nicematch, unsigned lazymatching)
; 1458 : {
; 1459 :   unsigned short numzeros = 0;
; 1460 :   int usezeros = windowsize >= 8192; /*for small window size, the 'max chain length' optimization does a better job*/
; 1461 :   unsigned pos, i, error = 0;
; 1462 :   /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
; 1463 :   unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8;
; 1464 :   unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;
; 1465 : 
; 1466 :   if(!error)
; 1467 :   {
; 1468 :     unsigned offset; /*the offset represents the distance in LZ77 terminology*/
; 1469 :     unsigned length;
; 1470 :     unsigned lazy = 0;
; 1471 :     unsigned lazylength = 0, lazyoffset = 0;
; 1472 :     unsigned hashval;
; 1473 :     unsigned current_offset, current_length;
; 1474 :     const unsigned char *lastptr, *foreptr, *backptr;
; 1475 :     unsigned short hashpos, prevpos;
; 1476 : 
; 1477 :     for(pos = inpos; pos < insize; pos++)
; 1478 :     {
; 1479 :       size_t wpos = pos % windowsize; /*position for in 'circular' hash buffers*/
; 1480 : 
; 1481 :       hashval = getHash(in, insize, pos);
; 1482 :       updateHashChain(hash, pos, hashval, windowsize);
; 1483 : 
; 1484 :       if(usezeros && hashval == 0)
; 1485 :       {
; 1486 :         numzeros = countZeros(in, insize, pos);
; 1487 :         hash->zeros[wpos] = numzeros;
; 1488 :       }
; 1489 : 
; 1490 :       /*the length and offset found for the current position*/
; 1491 :       length = 0;
; 1492 :       offset = 0;
; 1493 : 
; 1494 :       prevpos = hash->head[hashval];
; 1495 :       hashpos = hash->chain[prevpos];
; 1496 : 
; 1497 :       lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];
; 1498 : 
; 1499 :       /*search for the longest string*/
; 1500 :       if(hash->val[wpos] == (int)hashval)
; 1501 :       {
; 1502 :         unsigned chainlength = 0;
; 1503 :         for(;;)
; 1504 :         {
; 1505 :           /*stop when went completely around the circular buffer*/
; 1506 :           if(prevpos < wpos && hashpos > prevpos && hashpos <= wpos) break;
; 1507 :           if(prevpos > wpos && (hashpos <= wpos || hashpos > prevpos)) break;
; 1508 :           if(chainlength++ >= maxchainlength) break;
; 1509 : 
; 1510 :           current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;
; 1511 :           if(current_offset > 0)
; 1512 :           {
; 1513 :             /*test the next characters*/
; 1514 :             foreptr = &in[pos];
; 1515 :             backptr = &in[pos - current_offset];
; 1516 : 
; 1517 :             /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
; 1518 :             if(usezeros && hashval == 0 && hash->val[hashpos] == 0 /*hashval[hashpos] may be out of date*/)
; 1519 :             {
; 1520 :               unsigned short skip = hash->zeros[hashpos];
; 1521 :               if(skip > numzeros) skip = numzeros;
; 1522 :               backptr += skip;
; 1523 :               foreptr += skip;
; 1524 :             }
; 1525 : 
; 1526 :             /* multiple checks at once per array bounds check */
; 1527 :             while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
; 1528 :             {
; 1529 :               ++backptr;
; 1530 :               ++foreptr;
; 1531 :             }
; 1532 :             current_length = (unsigned)(foreptr - &in[pos]);
; 1533 : 
; 1534 :             if(current_length > length)
; 1535 :             {
; 1536 :               length = current_length; /*the longest length*/
; 1537 :               offset = current_offset; /*the offset that is related to this longest length*/
; 1538 :               /*jump out once a length of max length is found (speed gain)*/
; 1539 :               if(current_length >= nicematch || current_length == MAX_SUPPORTED_DEFLATE_LENGTH) break;
; 1540 :             }
; 1541 :           }
; 1542 : 
; 1543 :           if(hashpos == hash->chain[hashpos]) break;
; 1544 : 
; 1545 :           prevpos = hashpos;
; 1546 :           hashpos = hash->chain[hashpos];
; 1547 :         }
; 1548 :       }
; 1549 : 
; 1550 :       if(lazymatching)
; 1551 :       {
; 1552 :         if(!lazy && length >= 3 && length <= maxlazymatch && length < MAX_SUPPORTED_DEFLATE_LENGTH)
; 1553 :         {
; 1554 :           lazy = 1;
; 1555 :           lazylength = length;
; 1556 :           lazyoffset = offset;
; 1557 :           continue; /*try the next byte*/
; 1558 :         }
; 1559 :         if(lazy)
; 1560 :         {
; 1561 :           lazy = 0;
; 1562 :           if(pos == 0) ERROR_BREAK(81);
; 1563 :           if(length > lazylength + 1)
; 1564 :           {
; 1565 :             /*push the previous character as literal*/
; 1566 :             if(!uivector_push_back(out, in[pos - 1])) ERROR_BREAK(83 /*alloc fail*/);
; 1567 :           }
; 1568 :           else
; 1569 :           {
; 1570 :             length = lazylength;
; 1571 :             offset = lazyoffset;
; 1572 :             hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
; 1573 :             pos--;
; 1574 :           }
; 1575 :         }
; 1576 :       }
; 1577 :       if(length >= 3 && offset > windowsize) ERROR_BREAK(86 /*too big (or overflown negative) offset*/);
; 1578 : 
; 1579 :       /**encode it as length/distance pair or literal value**/
; 1580 :       if(length < 3) /*only lengths of 3 or higher are supported as length/distance pair*/
; 1581 :       {
; 1582 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1583 :       }
; 1584 :       else if(length < minmatch || (length == 3 && offset > 4096))
; 1585 :       {
; 1586 :         /*compensate for the fact that longer offsets have more extra bits, a
; 1587 :         length of only 3 may be not worth it then*/
; 1588 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1589 :       }
; 1590 :       else
; 1591 :       {
; 1592 :         addLengthDistance(out, length, offset);
; 1593 :         for(i = 1; i < length; i++)
; 1594 :         {
; 1595 :           pos++;
; 1596 :           hashval = getHash(in, insize, pos);
; 1597 :           updateHashChain(hash, pos, hashval, windowsize);
; 1598 :           if(usezeros && hashval == 0)
; 1599 :           {
; 1600 :             hash->zeros[pos % windowsize] = countZeros(in, insize, pos);
; 1601 :           }
; 1602 :         }
; 1603 :       }
; 1604 : 
; 1605 :     } /*end of the loop through each character of input*/
; 1606 :   } /*end of "if(!error)"*/
; 1607 : 
; 1608 :   return error;
; 1609 : }
; 1610 : 
; 1611 : /* /////////////////////////////////////////////////////////////////////////// */
; 1612 : 
; 1613 : static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)
; 1614 : {
; 1615 :   /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
; 1616 :   2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/
; 1617 : 
; 1618 :   size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
; 1619 :   unsigned datapos = 0;
; 1620 :   for(i = 0; i < numdeflateblocks; i++)
; 1621 :   {
; 1622 :     unsigned BFINAL, BTYPE, LEN, NLEN;
; 1623 :     unsigned char firstbyte;
; 1624 : 
; 1625 :     BFINAL = (i == numdeflateblocks - 1);
; 1626 :     BTYPE = 0;
; 1627 : 
; 1628 :     firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1) << 1) + ((BTYPE & 2) << 1));
; 1629 :     ucvector_push_back(out, firstbyte);
; 1630 : 
; 1631 :     LEN = 65535;
; 1632 :     if(datasize - datapos < 65535) LEN = (unsigned)datasize - datapos;
; 1633 :     NLEN = 65535 - LEN;
; 1634 : 
; 1635 :     ucvector_push_back(out, (unsigned char)(LEN % 256));
; 1636 :     ucvector_push_back(out, (unsigned char)(LEN / 256));
; 1637 :     ucvector_push_back(out, (unsigned char)(NLEN % 256));
; 1638 :     ucvector_push_back(out, (unsigned char)(NLEN / 256));
; 1639 : 
; 1640 :     /*Decompressed data*/
; 1641 :     for(j = 0; j < 65535 && datapos < datasize; j++)
; 1642 :     {
; 1643 :       ucvector_push_back(out, data[datapos++]);
; 1644 :     }
; 1645 :   }
; 1646 : 
; 1647 :   return 0;
; 1648 : }
; 1649 : 
; 1650 : /*
; 1651 : write the lz77-encoded data, which has lit, len and dist codes, to compressed stream using huffman trees.
; 1652 : tree_ll: the tree for lit and len codes.
; 1653 : tree_d: the tree for distance codes.
; 1654 : */
; 1655 : static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
; 1656 :                           const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
; 1657 : {
; 1658 :   size_t i = 0;
; 1659 :   for(i = 0; i < lz77_encoded->size; i++)
; 1660 :   {
; 1661 :     unsigned val = lz77_encoded->data[i];
; 1662 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_ll, val), HuffmanTree_getLength(tree_ll, val));
; 1663 :     if(val > 256) /*for a length code, 3 more things have to be added*/
; 1664 :     {
; 1665 :       unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
; 1666 :       unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
; 1667 :       unsigned length_extra_bits = lz77_encoded->data[++i];
; 1668 : 
; 1669 :       unsigned distance_code = lz77_encoded->data[++i];
; 1670 : 
; 1671 :       unsigned distance_index = distance_code;
; 1672 :       unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
; 1673 :       unsigned distance_extra_bits = lz77_encoded->data[++i];
; 1674 : 
; 1675 :       addBitsToStream(bp, out, length_extra_bits, n_length_extra_bits);
; 1676 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
; 1677 :                        HuffmanTree_getLength(tree_d, distance_code));
; 1678 :       addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
; 1679 :     }
; 1680 :   }
; 1681 : }
; 1682 : 
; 1683 : /*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
; 1684 : static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,
; 1685 :                                const unsigned char* data, size_t datapos, size_t dataend,
; 1686 :                                const LodePNGCompressSettings* settings, int final)
; 1687 : {
; 1688 :   unsigned error = 0;
; 1689 : 
; 1690 :   /*
; 1691 :   A block is compressed as follows: The PNG data is lz77 encoded, resulting in
; 1692 :   literal bytes and length/distance pairs. This is then huffman compressed with
; 1693 :   two huffman trees. One huffman tree is used for the lit and len values ("ll"),
; 1694 :   another huffman tree is used for the dist values ("d"). These two trees are
; 1695 :   stored using their code lengths, and to compress even more these code lengths
; 1696 :   are also run-length encoded and huffman compressed. This gives a huffman tree
; 1697 :   of code lengths "cl". The code lenghts used to describe this third tree are
; 1698 :   the code length code lengths ("clcl").
; 1699 :   */
; 1700 : 
; 1701 :   /*The lz77 encoded data, represented with integers since there will also be length and distance codes in it*/
; 1702 :   uivector lz77_encoded;
; 1703 :   HuffmanTree tree_ll; /*tree for lit,len values*/
; 1704 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1705 :   HuffmanTree tree_cl; /*tree for encoding the code lengths representing tree_ll and tree_d*/
; 1706 :   uivector frequencies_ll; /*frequency of lit,len codes*/
; 1707 :   uivector frequencies_d; /*frequency of dist codes*/
; 1708 :   uivector frequencies_cl; /*frequency of code length codes*/
; 1709 :   uivector bitlen_lld; /*lit,len,dist code lenghts (int bits), literally (without repeat codes).*/
; 1710 :   uivector bitlen_lld_e; /*bitlen_lld encoded with repeat codes (this is a rudemtary run length compression)*/
; 1711 :   /*bitlen_cl is the code length code lengths ("clcl"). The bit lengths of codes to represent tree_cl
; 1712 :   (these are written as is in the file, it would be crazy to compress these using yet another huffman
; 1713 :   tree that needs to be represented by yet another set of code lengths)*/
; 1714 :   uivector bitlen_cl;
; 1715 :   size_t datasize = dataend - datapos;
; 1716 : 
; 1717 :   /*
; 1718 :   Due to the huffman compression of huffman tree representations ("two levels"), there are some anologies:
; 1719 :   bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
; 1720 :   bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
; 1721 :   bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
; 1722 :   */
; 1723 : 
; 1724 :   unsigned BFINAL = final;
; 1725 :   size_t numcodes_ll, numcodes_d, i;
; 1726 :   unsigned HLIT, HDIST, HCLEN;
; 1727 : 
; 1728 :   uivector_init(&lz77_encoded);
; 1729 :   HuffmanTree_init(&tree_ll);
; 1730 :   HuffmanTree_init(&tree_d);
; 1731 :   HuffmanTree_init(&tree_cl);
; 1732 :   uivector_init(&frequencies_ll);
; 1733 :   uivector_init(&frequencies_d);
; 1734 :   uivector_init(&frequencies_cl);
; 1735 :   uivector_init(&bitlen_lld);
; 1736 :   uivector_init(&bitlen_lld_e);
; 1737 :   uivector_init(&bitlen_cl);
; 1738 : 
; 1739 :   /*This while loop never loops due to a break at the end, it is here to
; 1740 :   allow breaking out of it to the cleanup phase on error conditions.*/
; 1741 :   while(!error)
; 1742 :   {
; 1743 :     if(settings->use_lz77)
; 1744 :     {
; 1745 :       error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1746 :                          settings->minmatch, settings->nicematch, settings->lazymatching);
; 1747 :       if(error) break;
; 1748 :     }
; 1749 :     else
; 1750 :     {
; 1751 :       if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83 /*alloc fail*/);
; 1752 :       for(i = datapos; i < dataend; i++) lz77_encoded.data[i] = data[i]; /*no LZ77, but still will be Huffman compressed*/
; 1753 :     }
; 1754 : 
; 1755 :     if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1756 :     if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1757 : 
; 1758 :     /*Count the frequencies of lit, len and dist codes*/
; 1759 :     for(i = 0; i < lz77_encoded.size; i++)
; 1760 :     {
; 1761 :       unsigned symbol = lz77_encoded.data[i];
; 1762 :       frequencies_ll.data[symbol]++;
; 1763 :       if(symbol > 256)
; 1764 :       {
; 1765 :         unsigned dist = lz77_encoded.data[i + 2];
; 1766 :         frequencies_d.data[dist]++;
; 1767 :         i += 3;
; 1768 :       }
; 1769 :     }
; 1770 :     frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/
; 1771 : 
; 1772 :     /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
; 1773 :     error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
; 1774 :     if(error) break;
; 1775 :     /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
; 1776 :     error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
; 1777 :     if(error) break;
; 1778 : 
; 1779 :     numcodes_ll = tree_ll.numcodes; if(numcodes_ll > 286) numcodes_ll = 286;
; 1780 :     numcodes_d = tree_d.numcodes; if(numcodes_d > 30) numcodes_d = 30;
; 1781 :     /*store the code lengths of both generated trees in bitlen_lld*/
; 1782 :     for(i = 0; i < numcodes_ll; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
; 1783 :     for(i = 0; i < numcodes_d; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));
; 1784 : 
; 1785 :     /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
; 1786 :     17 (3-10 zeroes), 18 (11-138 zeroes)*/
; 1787 :     for(i = 0; i < (unsigned)bitlen_lld.size; i++)
; 1788 :     {
; 1789 :       unsigned j = 0; /*amount of repititions*/
; 1790 :       while(i + j + 1 < (unsigned)bitlen_lld.size && bitlen_lld.data[i + j + 1] == bitlen_lld.data[i]) j++;
; 1791 : 
; 1792 :       if(bitlen_lld.data[i] == 0 && j >= 2) /*repeat code for zeroes*/
; 1793 :       {
; 1794 :         j++; /*include the first zero*/
; 1795 :         if(j <= 10) /*repeat code 17 supports max 10 zeroes*/
; 1796 :         {
; 1797 :           uivector_push_back(&bitlen_lld_e, 17);
; 1798 :           uivector_push_back(&bitlen_lld_e, j - 3);
; 1799 :         }
; 1800 :         else /*repeat code 18 supports max 138 zeroes*/
; 1801 :         {
; 1802 :           if(j > 138) j = 138;
; 1803 :           uivector_push_back(&bitlen_lld_e, 18);
; 1804 :           uivector_push_back(&bitlen_lld_e, j - 11);
; 1805 :         }
; 1806 :         i += (j - 1);
; 1807 :       }
; 1808 :       else if(j >= 3) /*repeat code for value other than zero*/
; 1809 :       {
; 1810 :         size_t k;
; 1811 :         unsigned num = j / 6, rest = j % 6;
; 1812 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1813 :         for(k = 0; k < num; k++)
; 1814 :         {
; 1815 :           uivector_push_back(&bitlen_lld_e, 16);
; 1816 :           uivector_push_back(&bitlen_lld_e, 6 - 3);
; 1817 :         }
; 1818 :         if(rest >= 3)
; 1819 :         {
; 1820 :           uivector_push_back(&bitlen_lld_e, 16);
; 1821 :           uivector_push_back(&bitlen_lld_e, rest - 3);
; 1822 :         }
; 1823 :         else j -= rest;
; 1824 :         i += j;
; 1825 :       }
; 1826 :       else /*too short to benefit from repeat code*/
; 1827 :       {
; 1828 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1829 :       }
; 1830 :     }
; 1831 : 
; 1832 :     /*generate tree_cl, the huffmantree of huffmantrees*/
; 1833 : 
; 1834 :     if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1835 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1836 :     {
; 1837 :       frequencies_cl.data[bitlen_lld_e.data[i]]++;
; 1838 :       /*after a repeat code come the bits that specify the number of repetitions,
; 1839 :       those don't need to be in the frequencies_cl calculation*/
; 1840 :       if(bitlen_lld_e.data[i] >= 16) i++;
; 1841 :     }
; 1842 : 
; 1843 :     error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
; 1844 :                                             frequencies_cl.size, frequencies_cl.size, 7);
; 1845 :     if(error) break;
; 1846 : 
; 1847 :     if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
; 1848 :     for(i = 0; i < tree_cl.numcodes; i++)
; 1849 :     {
; 1850 :       /*lenghts of code length tree is in the order as specified by deflate*/
; 1851 :       bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
; 1852 :     }
; 1853 :     while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
; 1854 :     {
; 1855 :       /*remove zeros at the end, but minimum size must be 4*/
; 1856 :       if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
; 1857 :     }
; 1858 :     if(error) break;
; 1859 : 
; 1860 :     /*
; 1861 :     Write everything into the output
; 1862 : 
; 1863 :     After the BFINAL and BTYPE, the dynamic block consists out of the following:
; 1864 :     - 5 bits HLIT, 5 bits HDIST, 4 bits HCLEN
; 1865 :     - (HCLEN+4)*3 bits code lengths of code length alphabet
; 1866 :     - HLIT + 257 code lenghts of lit/length alphabet (encoded using the code length
; 1867 :       alphabet, + possible repetition codes 16, 17, 18)
; 1868 :     - HDIST + 1 code lengths of distance alphabet (encoded using the code length
; 1869 :       alphabet, + possible repetition codes 16, 17, 18)
; 1870 :     - compressed data
; 1871 :     - 256 (end code)
; 1872 :     */
; 1873 : 
; 1874 :     /*Write block type*/
; 1875 :     addBitToStream(bp, out, BFINAL);
; 1876 :     addBitToStream(bp, out, 0); /*first bit of BTYPE "dynamic"*/
; 1877 :     addBitToStream(bp, out, 1); /*second bit of BTYPE "dynamic"*/
; 1878 : 
; 1879 :     /*write the HLIT, HDIST and HCLEN values*/
; 1880 :     HLIT = (unsigned)(numcodes_ll - 257);
; 1881 :     HDIST = (unsigned)(numcodes_d - 1);
; 1882 :     HCLEN = (unsigned)bitlen_cl.size - 4;
; 1883 :     /*trim zeroes for HCLEN. HLIT and HDIST were already trimmed at tree creation*/
; 1884 :     while(!bitlen_cl.data[HCLEN + 4 - 1] && HCLEN > 0) HCLEN--;
; 1885 :     addBitsToStream(bp, out, HLIT, 5);
; 1886 :     addBitsToStream(bp, out, HDIST, 5);
; 1887 :     addBitsToStream(bp, out, HCLEN, 4);
; 1888 : 
; 1889 :     /*write the code lenghts of the code length alphabet*/
; 1890 :     for(i = 0; i < HCLEN + 4; i++) addBitsToStream(bp, out, bitlen_cl.data[i], 3);
; 1891 : 
; 1892 :     /*write the lenghts of the lit/len AND the dist alphabet*/
; 1893 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1894 :     {
; 1895 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
; 1896 :                        HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
; 1897 :       /*extra bits of repeat codes*/
; 1898 :       if(bitlen_lld_e.data[i] == 16) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 2);
; 1899 :       else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
; 1900 :       else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
; 1901 :     }
; 1902 : 
; 1903 :     /*write the compressed data symbols*/
; 1904 :     writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1905 :     /*error: the length of the end code 256 must be larger than 0*/
; 1906 :     if(HuffmanTree_getLength(&tree_ll, 256) == 0) ERROR_BREAK(64);
; 1907 : 
; 1908 :     /*write the end code*/
; 1909 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1910 : 
; 1911 :     break; /*end of error-while*/
; 1912 :   }
; 1913 : 
; 1914 :   /*cleanup*/
; 1915 :   uivector_cleanup(&lz77_encoded);
; 1916 :   HuffmanTree_cleanup(&tree_ll);
; 1917 :   HuffmanTree_cleanup(&tree_d);
; 1918 :   HuffmanTree_cleanup(&tree_cl);
; 1919 :   uivector_cleanup(&frequencies_ll);
; 1920 :   uivector_cleanup(&frequencies_d);
; 1921 :   uivector_cleanup(&frequencies_cl);
; 1922 :   uivector_cleanup(&bitlen_lld_e);
; 1923 :   uivector_cleanup(&bitlen_lld);
; 1924 :   uivector_cleanup(&bitlen_cl);
; 1925 : 
; 1926 :   return error;
; 1927 : }
; 1928 : 
; 1929 : static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,
; 1930 :                              const unsigned char* data,
; 1931 :                              size_t datapos, size_t dataend,
; 1932 :                              const LodePNGCompressSettings* settings, int final)
; 1933 : {
; 1934 :   HuffmanTree tree_ll; /*tree for literal values and length codes*/
; 1935 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1936 : 
; 1937 :   unsigned BFINAL = final;
; 1938 :   unsigned error = 0;
; 1939 :   size_t i;
; 1940 : 
; 1941 :   HuffmanTree_init(&tree_ll);
; 1942 :   HuffmanTree_init(&tree_d);
; 1943 : 
; 1944 :   generateFixedLitLenTree(&tree_ll);
; 1945 :   generateFixedDistanceTree(&tree_d);
; 1946 : 
; 1947 :   addBitToStream(bp, out, BFINAL);
; 1948 :   addBitToStream(bp, out, 1); /*first bit of BTYPE*/
; 1949 :   addBitToStream(bp, out, 0); /*second bit of BTYPE*/
; 1950 : 
; 1951 :   if(settings->use_lz77) /*LZ77 encoded*/
; 1952 :   {
; 1953 :     uivector lz77_encoded;
; 1954 :     uivector_init(&lz77_encoded);
; 1955 :     error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1956 :                        settings->minmatch, settings->nicematch, settings->lazymatching);
; 1957 :     if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1958 :     uivector_cleanup(&lz77_encoded);
; 1959 :   }
; 1960 :   else /*no LZ77, but still will be Huffman compressed*/
; 1961 :   {
; 1962 :     for(i = datapos; i < dataend; i++)
; 1963 :     {
; 1964 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
; 1965 :     }
; 1966 :   }
; 1967 :   /*add END code*/
; 1968 :   if(!error) addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1969 : 
; 1970 :   /*cleanup*/
; 1971 :   HuffmanTree_cleanup(&tree_ll);
; 1972 :   HuffmanTree_cleanup(&tree_d);
; 1973 : 
; 1974 :   return error;
; 1975 : }
; 1976 : 
; 1977 : static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
; 1978 :                                  const LodePNGCompressSettings* settings)
; 1979 : {
; 1980 :   unsigned error = 0;
; 1981 :   size_t i, blocksize, numdeflateblocks;
; 1982 :   size_t bp = 0; /*the bit pointer*/
; 1983 :   Hash hash;
; 1984 : 
; 1985 :   if(settings->btype > 2) return 61;
; 1986 :   else if(settings->btype == 0) return deflateNoCompression(out, in, insize);
; 1987 :   else if(settings->btype == 1) blocksize = insize;
; 1988 :   else /*if(settings->btype == 2)*/
; 1989 :   {
; 1990 :     blocksize = insize / 8 + 8;
; 1991 :     if(blocksize < 65535) blocksize = 65535;
; 1992 :   }
; 1993 : 
; 1994 :   numdeflateblocks = (insize + blocksize - 1) / blocksize;
; 1995 :   if(numdeflateblocks == 0) numdeflateblocks = 1;
; 1996 : 
; 1997 :   error = hash_init(&hash, settings->windowsize);
; 1998 :   if(error) return error;
; 1999 : 
; 2000 :   for(i = 0; i < numdeflateblocks && !error; i++)
; 2001 :   {
; 2002 :     int final = i == numdeflateblocks - 1;
; 2003 :     size_t start = i * blocksize;
; 2004 :     size_t end = start + blocksize;
; 2005 :     if(end > insize) end = insize;
; 2006 : 
; 2007 :     if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
; 2008 :     else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
; 2009 :   }
; 2010 : 
; 2011 :   hash_cleanup(&hash);
; 2012 : 
; 2013 :   return error;
; 2014 : }
; 2015 : 
; 2016 : unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
; 2017 :                          const unsigned char* in, size_t insize,
; 2018 :                          const LodePNGCompressSettings* settings)
; 2019 : {
; 2020 :   unsigned error;
; 2021 :   ucvector v;
; 2022 :   ucvector_init_buffer(&v, *out, *outsize);
; 2023 :   error = lodepng_deflatev(&v, in, insize, settings);
; 2024 :   *out = v.data;
; 2025 :   *outsize = v.size;
; 2026 :   return error;
; 2027 : }
; 2028 : 
; 2029 : static unsigned deflate(unsigned char** out, size_t* outsize,
; 2030 :                         const unsigned char* in, size_t insize,
; 2031 :                         const LodePNGCompressSettings* settings)
; 2032 : {
; 2033 :   if(settings->custom_deflate)
; 2034 :   {
; 2035 :     return settings->custom_deflate(out, outsize, in, insize, settings);
; 2036 :   }
; 2037 :   else
; 2038 :   {
; 2039 :     return lodepng_deflate(out, outsize, in, insize, settings);
; 2040 :   }
; 2041 : }
; 2042 : 
; 2043 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2044 : 
; 2045 : /* ////////////////////////////////////////////////////////////////////////// */
; 2046 : /* / Adler32                                                                  */
; 2047 : /* ////////////////////////////////////////////////////////////////////////// */
; 2048 : 
; 2049 : static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
; 2050 : {
; 2051 :    unsigned s1 = adler & 0xffff;
; 2052 :    unsigned s2 = (adler >> 16) & 0xffff;
; 2053 : 
; 2054 :   while(len > 0)
; 2055 :   {
; 2056 :     /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
; 2057 :     unsigned amount = len > 5550 ? 5550 : len;
; 2058 :     len -= amount;
; 2059 :     while(amount > 0)
; 2060 :     {
; 2061 :       s1 += (*data++);
; 2062 :       s2 += s1;
; 2063 :       amount--;
; 2064 :     }
; 2065 :     s1 %= 65521;
; 2066 :     s2 %= 65521;
; 2067 :   }
; 2068 : 
; 2069 :   return (s2 << 16) | s1;
; 2070 : }
; 2071 : 
; 2072 : /*Return the adler32 of the bytes data[0..len-1]*/
; 2073 : static unsigned adler32(const unsigned char* data, unsigned len)
; 2074 : {
; 2075 :   return update_adler32(1L, data, len);
; 2076 : }
; 2077 : 
; 2078 : /* ////////////////////////////////////////////////////////////////////////// */
; 2079 : /* / Zlib                                                                   / */
; 2080 : /* ////////////////////////////////////////////////////////////////////////// */
; 2081 : 
; 2082 : #ifdef LODEPNG_COMPILE_DECODER
; 2083 : 
; 2084 : unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2085 :                                  size_t insize, const LodePNGDecompressSettings* settings)
; 2086 : {
; 2087 :   unsigned error = 0;
; 2088 :   unsigned CM, CINFO, FDICT;
; 2089 : 
; 2090 :   if(insize < 2) return 53; /*error, size of zlib data too small*/
; 2091 :   /*read information from zlib header*/
; 2092 :   if((in[0] * 256 + in[1]) % 31 != 0)
; 2093 :   {
; 2094 :     /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
; 2095 :     return 24;
; 2096 :   }
; 2097 : 
; 2098 :   CM = in[0] & 15;
; 2099 :   CINFO = (in[0] >> 4) & 15;
; 2100 :   /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
; 2101 :   FDICT = (in[1] >> 5) & 1;
; 2102 :   /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/
; 2103 : 
; 2104 :   if(CM != 8 || CINFO > 7)
; 2105 :   {
; 2106 :     /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
; 2107 :     return 25;
; 2108 :   }
; 2109 :   if(FDICT != 0)
; 2110 :   {
; 2111 :     /*error: the specification of PNG says about the zlib stream:
; 2112 :       "The additional flags shall not specify a preset dictionary."*/
; 2113 :     return 26;
; 2114 :   }
; 2115 : 
; 2116 :   error = inflate(out, outsize, in + 2, insize - 2, settings);
; 2117 :   if(error) return error;
; 2118 : 
; 2119 :   if(!settings->ignore_adler32)
; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/
; 2124 :   }
; 2125 : 
; 2126 :   return 0; /*no error*/
; 2127 : }
; 2128 : 
; 2129 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2130 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2131 : {
; 2132 :   if(settings->custom_zlib)
; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2134 :   else
; 2135 :     return lodepng_zlib_decompress(out, outsize, in, insize, settings);
; 2136 : }
; 2137 : 
; 2138 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2139 : 
; 2140 : #ifdef LODEPNG_COMPILE_ENCODER
; 2141 : 
; 2142 : unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2143 :                                size_t insize, const LodePNGCompressSettings* settings)
; 2144 : {
; 2145 :   /*initially, *out must be NULL and outsize 0, if you just give some random *out
; 2146 :   that's pointing to a non allocated buffer, this'll crash*/
; 2147 :   ucvector outv;
; 2148 :   size_t i;
; 2149 :   unsigned error;
; 2150 :   unsigned char* deflatedata = 0;
; 2151 :   size_t deflatesize = 0;
; 2152 : 
; 2153 :   unsigned ADLER32;
; 2154 :   /*zlib data: 1 byte CMF (CM+CINFO), 1 byte FLG, deflate data, 4 byte ADLER32 checksum of the Decompressed data*/
; 2155 :   unsigned CMF = 120; /*0b01111000: CM 8, CINFO 7. With CINFO 7, any window size up to 32768 can be used.*/
; 2156 :   unsigned FLEVEL = 0;
; 2157 :   unsigned FDICT = 0;
; 2158 :   unsigned CMFFLG = 256 * CMF + FDICT * 32 + FLEVEL * 64;
; 2159 :   unsigned FCHECK = 31 - CMFFLG % 31;
; 2160 :   CMFFLG += FCHECK;
; 2161 : 
; 2162 :   /*ucvector-controlled version of the output buffer, for dynamic array*/
; 2163 :   ucvector_init_buffer(&outv, *out, *outsize);
; 2164 : 
; 2165 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG / 256));
; 2166 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG % 256));
; 2167 : 
; 2168 :   error = deflate(&deflatedata, &deflatesize, in, insize, settings);
; 2169 : 
; 2170 :   if(!error)
; 2171 :   {
; 2172 :     ADLER32 = adler32(in, (unsigned)insize);
; 2173 :     for(i = 0; i < deflatesize; i++) ucvector_push_back(&outv, deflatedata[i]);
; 2174 :     lodepng_free(deflatedata);
; 2175 :     lodepng_add32bitInt(&outv, ADLER32);
; 2176 :   }
; 2177 : 
; 2178 :   *out = outv.data;
; 2179 :   *outsize = outv.size;
; 2180 : 
; 2181 :   return error;
; 2182 : }
; 2183 : 
; 2184 : /* compress using the default or custom zlib function */
; 2185 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2186 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2187 : {
; 2188 :   if(settings->custom_zlib)
; 2189 :   {
; 2190 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2191 :   }
; 2192 :   else
; 2193 :   {
; 2194 :     return lodepng_zlib_compress(out, outsize, in, insize, settings);
; 2195 :   }
; 2196 : }
; 2197 : 
; 2198 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2199 : 
; 2200 : #else /*no LODEPNG_COMPILE_ZLIB*/
; 2201 : 
; 2202 : #ifdef LODEPNG_COMPILE_DECODER
; 2203 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2204 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2205 : {
; 2206 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2207 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2208 : }
; 2209 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2210 : #ifdef LODEPNG_COMPILE_ENCODER
; 2211 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2212 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2213 : {
; 2214 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2215 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2216 : }
; 2217 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2218 : 
; 2219 : #endif /*LODEPNG_COMPILE_ZLIB*/
; 2220 : 
; 2221 : /* ////////////////////////////////////////////////////////////////////////// */
; 2222 : 
; 2223 : #ifdef LODEPNG_COMPILE_ENCODER
; 2224 : 
; 2225 : /*this is a good tradeoff between speed and compression ratio*/
; 2226 : #define DEFAULT_WINDOWSIZE 2048
; 2227 : 
; 2228 : void lodepng_compress_settings_init(LodePNGCompressSettings* settings)
; 2229 : {
; 2230 :   /*compress with dynamic huffman tree (not in the mathematical sense, just not the predefined one)*/
; 2231 :   settings->btype = 2;
; 2232 :   settings->use_lz77 = 1;
; 2233 :   settings->windowsize = DEFAULT_WINDOWSIZE;
; 2234 :   settings->minmatch = 3;
; 2235 :   settings->nicematch = 128;
; 2236 :   settings->lazymatching = 1;
; 2237 : 
; 2238 :   settings->custom_zlib = 0;
; 2239 :   settings->custom_deflate = 0;
; 2240 :   settings->custom_context = 0;
; 2241 : }
; 2242 : 
; 2243 : const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 3, 128, 1, 0, 0, 0};
; 2244 : 
; 2245 : 
; 2246 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2247 : 
; 2248 : #ifdef LODEPNG_COMPILE_DECODER
; 2249 : 
; 2250 : void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings)
; 2251 : {
; 2252 :   settings->ignore_adler32 = 0;
; 2253 : 
; 2254 :   settings->custom_zlib = 0;
; 2255 :   settings->custom_inflate = 0;
; 2256 :   settings->custom_context = 0;
; 2257 : }
; 2258 : 
; 2259 : const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0, 0, 0};
; 2260 : 
; 2261 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2262 : 
; 2263 : /* ////////////////////////////////////////////////////////////////////////// */
; 2264 : /* ////////////////////////////////////////////////////////////////////////// */
; 2265 : /* // End of Zlib related code. Begin of PNG related code.                 // */
; 2266 : /* ////////////////////////////////////////////////////////////////////////// */
; 2267 : /* ////////////////////////////////////////////////////////////////////////// */
; 2268 : 
; 2269 : #ifdef LODEPNG_COMPILE_PNG
; 2270 : 
; 2271 : /* ////////////////////////////////////////////////////////////////////////// */
; 2272 : /* / CRC32                                                                  / */
; 2273 : /* ////////////////////////////////////////////////////////////////////////// */
; 2274 : 
; 2275 : /* CRC polynomial: 0xedb88320 */
; 2276 : static unsigned lodepng_crc32_table[256] = {
; 2277 :            0u, 1996959894u, 3993919788u, 2567524794u,  124634137u, 1886057615u, 3915621685u, 2657392035u,
; 2278 :    249268274u, 2044508324u, 3772115230u, 2547177864u,  162941995u, 2125561021u, 3887607047u, 2428444049u,
; 2279 :    498536548u, 1789927666u, 4089016648u, 2227061214u,  450548861u, 1843258603u, 4107580753u, 2211677639u,
; 2280 :    325883990u, 1684777152u, 4251122042u, 2321926636u,  335633487u, 1661365465u, 4195302755u, 2366115317u,
; 2281 :    997073096u, 1281953886u, 3579855332u, 2724688242u, 1006888145u, 1258607687u, 3524101629u, 2768942443u,
; 2282 :    901097722u, 1119000684u, 3686517206u, 2898065728u,  853044451u, 1172266101u, 3705015759u, 2882616665u,
; 2283 :    651767980u, 1373503546u, 3369554304u, 3218104598u,  565507253u, 1454621731u, 3485111705u, 3099436303u,
; 2284 :    671266974u, 1594198024u, 3322730930u, 2970347812u,  795835527u, 1483230225u, 3244367275u, 3060149565u,
; 2285 :   1994146192u,   31158534u, 2563907772u, 4023717930u, 1907459465u,  112637215u, 2680153253u, 3904427059u,
; 2286 :   2013776290u,  251722036u, 2517215374u, 3775830040u, 2137656763u,  141376813u, 2439277719u, 3865271297u,
; 2287 :   1802195444u,  476864866u, 2238001368u, 4066508878u, 1812370925u,  453092731u, 2181625025u, 4111451223u,
; 2288 :   1706088902u,  314042704u, 2344532202u, 4240017532u, 1658658271u,  366619977u, 2362670323u, 4224994405u,
; 2289 :   1303535960u,  984961486u, 2747007092u, 3569037538u, 1256170817u, 1037604311u, 2765210733u, 3554079995u,
; 2290 :   1131014506u,  879679996u, 2909243462u, 3663771856u, 1141124467u,  855842277u, 2852801631u, 3708648649u,
; 2291 :   1342533948u,  654459306u, 3188396048u, 3373015174u, 1466479909u,  544179635u, 3110523913u, 3462522015u,
; 2292 :   1591671054u,  702138776u, 2966460450u, 3352799412u, 1504918807u,  783551873u, 3082640443u, 3233442989u,
; 2293 :   3988292384u, 2596254646u,   62317068u, 1957810842u, 3939845945u, 2647816111u,   81470997u, 1943803523u,
; 2294 :   3814918930u, 2489596804u,  225274430u, 2053790376u, 3826175755u, 2466906013u,  167816743u, 2097651377u,
; 2295 :   4027552580u, 2265490386u,  503444072u, 1762050814u, 4150417245u, 2154129355u,  426522225u, 1852507879u,
; 2296 :   4275313526u, 2312317920u,  282753626u, 1742555852u, 4189708143u, 2394877945u,  397917763u, 1622183637u,
; 2297 :   3604390888u, 2714866558u,  953729732u, 1340076626u, 3518719985u, 2797360999u, 1068828381u, 1219638859u,
; 2298 :   3624741850u, 2936675148u,  906185462u, 1090812512u, 3747672003u, 2825379669u,  829329135u, 1181335161u,
; 2299 :   3412177804u, 3160834842u,  628085408u, 1382605366u, 3423369109u, 3138078467u,  570562233u, 1426400815u,
; 2300 :   3317316542u, 2998733608u,  733239954u, 1555261956u, 3268935591u, 3050360625u,  752459403u, 1541320221u,
; 2301 :   2607071920u, 3965973030u, 1969922972u,   40735498u, 2617837225u, 3943577151u, 1913087877u,   83908371u,
; 2302 :   2512341634u, 3803740692u, 2075208622u,  213261112u, 2463272603u, 3855990285u, 2094854071u,  198958881u,
; 2303 :   2262029012u, 4057260610u, 1759359992u,  534414190u, 2176718541u, 4139329115u, 1873836001u,  414664567u,
; 2304 :   2282248934u, 4279200368u, 1711684554u,  285281116u, 2405801727u, 4167216745u, 1634467795u,  376229701u,
; 2305 :   2685067896u, 3608007406u, 1308918612u,  956543938u, 2808555105u, 3495958263u, 1231636301u, 1047427035u,
; 2306 :   2932959818u, 3654703836u, 1088359270u,  936918000u, 2847714899u, 3736837829u, 1202900863u,  817233897u,
; 2307 :   3183342108u, 3401237130u, 1404277552u,  615818150u, 3134207493u, 3453421203u, 1423857449u,  601450431u,
; 2308 :   3009837614u, 3294710456u, 1567103746u,  711928724u, 3020668471u, 3272380065u, 1510334235u,  755167117u
; 2309 : };
; 2310 : 
; 2311 : /*Return the CRC of the bytes buf[0..len-1].*/
; 2312 : unsigned lodepng_crc32(const unsigned char* buf, size_t len)
; 2313 : {
; 2314 :   unsigned c = 0xffffffffL;
; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)
; 2318 :   {
; 2319 :     c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
; 2320 :   }
; 2321 :   return c ^ 0xffffffffL;
; 2322 : }
; 2323 : 
; 2324 : /* ////////////////////////////////////////////////////////////////////////// */
; 2325 : /* / Reading and writing single bits and bytes from/to stream for LodePNG   / */
; 2326 : /* ////////////////////////////////////////////////////////////////////////// */
; 2327 : 
; 2328 : static unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream)
; 2329 : {
; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);
; 2331 :   (*bitpointer)++;
; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)
; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
; 2354 :   }
; 2355 :   (*bitpointer)++;
; 2356 : }
; 2357 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2358 : 
; 2359 : static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2360 : {
; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));
; 2363 :   else         bitstream[(*bitpointer) >> 3] |=  (1 << (7 - ((*bitpointer) & 0x7)));
; 2364 :   (*bitpointer)++;
; 2365 : }
; 2366 : 
; 2367 : /* ////////////////////////////////////////////////////////////////////////// */
; 2368 : /* / PNG chunks                                                             / */
; 2369 : /* ////////////////////////////////////////////////////////////////////////// */
; 2370 : 
; 2371 : unsigned lodepng_chunk_length(const unsigned char* chunk)
; 2372 : {
; 2373 :   return lodepng_read32bitInt(&chunk[0]);
; 2374 : }
; 2375 : 
; 2376 : void lodepng_chunk_type(char type[5], const unsigned char* chunk)
; 2377 : {
; 2378 :   unsigned i;
; 2379 :   for(i = 0; i < 4; i++) type[i] = chunk[4 + i];
; 2380 :   type[4] = 0; /*null termination char*/
; 2381 : }
; 2382 : 
; 2383 : unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type)
; 2384 : {
; 2385 :   if(strlen(type) != 4) return 0;
; 2386 :   return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);
; 2387 : }
; 2388 : 
; 2389 : unsigned char lodepng_chunk_ancillary(const unsigned char* chunk)
; 2390 : {
; 2391 :   return((chunk[4] & 32) != 0);
; 2392 : }
; 2393 : 
; 2394 : unsigned char lodepng_chunk_private(const unsigned char* chunk)
; 2395 : {
; 2396 :   return((chunk[6] & 32) != 0);
; 2397 : }
; 2398 : 
; 2399 : unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk)
; 2400 : {
; 2401 :   return((chunk[7] & 32) != 0);
; 2402 : }
; 2403 : 
; 2404 : unsigned char* lodepng_chunk_data(unsigned char* chunk)
; 2405 : {
; 2406 :   return &chunk[8];
; 2407 : }
; 2408 : 
; 2409 : const unsigned char* lodepng_chunk_data_const(const unsigned char* chunk)
; 2410 : {
; 2411 :   return &chunk[8];
; 2412 : }
; 2413 : 
; 2414 : unsigned lodepng_chunk_check_crc(const unsigned char* chunk)
; 2415 : {
; 2416 :   unsigned length = lodepng_chunk_length(chunk);
; 2417 :   unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);
; 2418 :   /*the CRC is taken of the data and the 4 chunk type letters, not the length*/
; 2419 :   unsigned checksum = lodepng_crc32(&chunk[4], length + 4);
; 2420 :   if(CRC != checksum) return 1;
; 2421 :   else return 0;
; 2422 : }
; 2423 : 
; 2424 : void lodepng_chunk_generate_crc(unsigned char* chunk)
; 2425 : {
; 2426 :   unsigned length = lodepng_chunk_length(chunk);
; 2427 :   unsigned CRC = lodepng_crc32(&chunk[4], length + 4);
; 2428 :   lodepng_set32bitInt(chunk + 8 + length, CRC);
; 2429 : }
; 2430 : 
; 2431 : unsigned char* lodepng_chunk_next(unsigned char* chunk)
; 2432 : {
; 2433 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2434 :   return &chunk[total_chunk_length];
; 2435 : }
; 2436 : 
; 2437 : const unsigned char* lodepng_chunk_next_const(const unsigned char* chunk)
; 2438 : {
; 2439 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2440 :   return &chunk[total_chunk_length];
; 2441 : }
; 2442 : 
; 2443 : unsigned lodepng_chunk_append(unsigned char** out, size_t* outlength, const unsigned char* chunk)
; 2444 : {
; 2445 :   unsigned i;
; 2446 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2447 :   unsigned char *chunk_start, *new_buffer;
; 2448 :   size_t new_length = (*outlength) + total_chunk_length;
; 2449 :   if(new_length < total_chunk_length || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2450 : 
; 2451 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2452 :   if(!new_buffer) return 83; /*alloc fail*/
; 2453 :   (*out) = new_buffer;
; 2454 :   (*outlength) = new_length;
; 2455 :   chunk_start = &(*out)[new_length - total_chunk_length];
; 2456 : 
; 2457 :   for(i = 0; i < total_chunk_length; i++) chunk_start[i] = chunk[i];
; 2458 : 
; 2459 :   return 0;
; 2460 : }
; 2461 : 
; 2462 : unsigned lodepng_chunk_create(unsigned char** out, size_t* outlength, unsigned length,
; 2463 :                               const char* type, const unsigned char* data)
; 2464 : {
; 2465 :   unsigned i;
; 2466 :   unsigned char *chunk, *new_buffer;
; 2467 :   size_t new_length = (*outlength) + length + 12;
; 2468 :   if(new_length < length + 12 || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2469 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2470 :   if(!new_buffer) return 83; /*alloc fail*/
; 2471 :   (*out) = new_buffer;
; 2472 :   (*outlength) = new_length;
; 2473 :   chunk = &(*out)[(*outlength) - length - 12];
; 2474 : 
; 2475 :   /*1: length*/
; 2476 :   lodepng_set32bitInt(chunk, (unsigned)length);
; 2477 : 
; 2478 :   /*2: chunk name (4 letters)*/
; 2479 :   chunk[4] = type[0];
; 2480 :   chunk[5] = type[1];
; 2481 :   chunk[6] = type[2];
; 2482 :   chunk[7] = type[3];
; 2483 : 
; 2484 :   /*3: the data*/
; 2485 :   for(i = 0; i < length; i++) chunk[8 + i] = data[i];
; 2486 : 
; 2487 :   /*4: CRC (of the chunkname characters and the data)*/
; 2488 :   lodepng_chunk_generate_crc(chunk);
; 2489 : 
; 2490 :   return 0;
; 2491 : }
; 2492 : 
; 2493 : /* ////////////////////////////////////////////////////////////////////////// */
; 2494 : /* / Color types and such                                                   / */
; 2495 : /* ////////////////////////////////////////////////////////////////////////// */
; 2496 : 
; 2497 : /*return type is a LodePNG error code*/
; 2498 : static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) /*bd = bitdepth*/
; 2499 : {
; 2500 :   switch(colortype)
; 2501 :   {
; 2502 :     case 0: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)) return 37; break; /*grey*/
; 2503 :     case 2: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGB*/
; 2504 :     case 3: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )) return 37; break; /*palette*/
; 2505 :     case 4: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*grey + alpha*/
; 2506 :     case 6: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGBA*/
; 2507 :     default: return 31;
; 2508 :   }
; 2509 :   return 0; /*allowed color type / bits combination*/
; 2510 : }
; 2511 : 
; 2512 : static unsigned getNumColorChannels(LodePNGColorType colortype)
; 2513 : {
; 2514 :   switch(colortype)
; 2515 :   {
; 2516 :     case 0: return 1; /*grey*/
; 2517 :     case 2: return 3; /*RGB*/
; 2518 :     case 3: return 1; /*palette*/
; 2519 :     case 4: return 2; /*grey + alpha*/
; 2520 :     case 6: return 4; /*RGBA*/
; 2521 :   }
; 2522 :   return 0; /*unexisting color type*/
; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;
; 2529 : }
; 2530 : 
; 2531 : /* ////////////////////////////////////////////////////////////////////////// */
; 2532 : 
; 2533 : void lodepng_color_mode_init(LodePNGColorMode* info)
; 2534 : {
; 2535 :   info->key_defined = 0;
; 2536 :   info->key_r = info->key_g = info->key_b = 0;
; 2537 :   info->colortype = LCT_RGBA;
; 2538 :   info->bitdepth = 8;
; 2539 :   info->palette = 0;
; 2540 :   info->palettesize = 0;
; 2541 : }
; 2542 : 
; 2543 : void lodepng_color_mode_cleanup(LodePNGColorMode* info)
; 2544 : {
; 2545 :   lodepng_palette_clear(info);
; 2546 : }
; 2547 : 
; 2548 : unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
; 2549 : {
; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;
; 2553 :   if(source->palette)
; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);
; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];
; 2558 :   }
; 2559 :   return 0;
; 2560 : }
; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);
; 2585 :   info->palette = 0;
; 2586 :   info->palettesize = 0;
; 2587 : }
; 2588 : 
; 2589 : unsigned lodepng_palette_add(LodePNGColorMode* info,
; 2590 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2591 : {
; 2592 :   unsigned char* data;
; 2593 :   /*the same resize technique as C++ std::vectors is used, and here it's made so that for a palette with
; 2594 :   the max of 256 colors, it'll have the exact alloc size*/
; 2595 :   if(!info->palette) /*allocate palette if empty*/
; 2596 :   {
; 2597 :     /*room for 256 colors with 4 bytes each*/
; 2598 :     data = (unsigned char*)lodepng_realloc(info->palette, 1024);
; 2599 :     if(!data) return 83; /*alloc fail*/
; 2600 :     else info->palette = data;
; 2601 :   }
; 2602 :   info->palette[4 * info->palettesize + 0] = r;
; 2603 :   info->palette[4 * info->palettesize + 1] = g;
; 2604 :   info->palette[4 * info->palettesize + 2] = b;
; 2605 :   info->palette[4 * info->palettesize + 3] = a;
; 2606 :   info->palettesize++;
; 2607 :   return 0;
; 2608 : }
; 2609 : 
; 2610 : unsigned lodepng_get_bpp(const LodePNGColorMode* info)
; 2611 : {
; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }
; 2615 : 
; 2616 : unsigned lodepng_get_channels(const LodePNGColorMode* info)
; 2617 : {
; 2618 :   return getNumColorChannels(info->colortype);
; 2619 : }
; 2620 : 
; 2621 : unsigned lodepng_is_greyscale_type(const LodePNGColorMode* info)
; 2622 : {
; 2623 :   return info->colortype == LCT_GREY || info->colortype == LCT_GREY_ALPHA;
; 2624 : }
; 2625 : 
; 2626 : unsigned lodepng_is_alpha_type(const LodePNGColorMode* info)
; 2627 : {
; 2628 :   return (info->colortype & 4) != 0; /*4 or 6*/
; 2629 : }
; 2630 : 
; 2631 : unsigned lodepng_is_palette_type(const LodePNGColorMode* info)
; 2632 : {
; 2633 :   return info->colortype == LCT_PALETTE;
; 2634 : }
; 2635 : 
; 2636 : unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info)
; 2637 : {
; 2638 :   size_t i;
; 2639 :   for(i = 0; i < info->palettesize; i++)
; 2640 :   {
; 2641 :     if(info->palette[i * 4 + 3] < 255) return 1;
; 2642 :   }
; 2643 :   return 0;
; 2644 : }
; 2645 : 
; 2646 : unsigned lodepng_can_have_alpha(const LodePNGColorMode* info)
; 2647 : {
; 2648 :   return info->key_defined
; 2649 :       || lodepng_is_alpha_type(info)
; 2650 :       || lodepng_has_palette_alpha(info);
; 2651 : }
; 2652 : 
; 2653 : size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode* color)
; 2654 : {
; 2655 :   return (w * h * lodepng_get_bpp(color) + 7) / 8;

  00083	8b cb		 mov	 ecx, ebx
  00085	e8 00 00 00 00	 call	 ?lodepng_get_bpp@@YAIPBULodePNGColorMode@@@Z ; lodepng_get_bpp
  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _w$1$[ebp]
  0008d	0f af 01	 imul	 eax, DWORD PTR [ecx]
  00090	8b 4d 08	 mov	 ecx, DWORD PTR _h$[ebp]
  00093	0f af 01	 imul	 eax, DWORD PTR [ecx]
  00096	83 c0 07	 add	 eax, 7
  00099	c1 e8 03	 shr	 eax, 3

; 63   :   return malloc(size);

  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 _malloc
  000a2	83 c4 04	 add	 esp, 4

; 4777 :     }
; 4778 : 
; 4779 :     outsize = lodepng_get_raw_size(*w, *h, &state->info_raw);
; 4780 :     *out = (unsigned char*)lodepng_malloc(outsize);

  000a5	89 07		 mov	 DWORD PTR [edi], eax

; 4781 :     if(!(*out))
; 4782 :     {
; 4783 :       state->error = 83; /*alloc fail*/

  000a7	8b 7d 0c	 mov	 edi, DWORD PTR _data$1$[ebp]
  000aa	85 c0		 test	 eax, eax
  000ac	75 20		 jne	 SHORT $LN2@lodepng_de

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  000ae	57		 push	 edi

; 4781 :     if(!(*out))
; 4782 :     {
; 4783 :       state->error = 83; /*alloc fail*/

  000af	c7 86 28 01 00
	00 53 00 00 00	 mov	 DWORD PTR [esi+296], 83	; 00000053H

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  000b9	e8 00 00 00 00	 call	 _free

; 4786 :     lodepng_free(data);
; 4787 :   }
; 4788 :   return state->error;

  000be	8b 86 28 01 00
	00		 mov	 eax, DWORD PTR [esi+296]

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  000c4	83 c4 04	 add	 esp, 4
  000c7	5f		 pop	 edi
  000c8	5b		 pop	 ebx
  000c9	5e		 pop	 esi

; 4789 : }

  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
$LN2@lodepng_de:

; 4784 :     }
; 4785 :     else state->error = lodepng_convert(*out, data, &state->info_raw, &state->info_png.color, *w, *h, state->decoder.fix_png);

  000ce	ff 76 18	 push	 DWORD PTR [esi+24]
  000d1	8b 4d 08	 mov	 ecx, DWORD PTR _h$[ebp]
  000d4	8b d7		 mov	 edx, edi
  000d6	ff 31		 push	 DWORD PTR [ecx]
  000d8	8b 4d fc	 mov	 ecx, DWORD PTR _w$1$[ebp]
  000db	ff 31		 push	 DWORD PTR [ecx]
  000dd	8d 8e 94 00 00
	00		 lea	 ecx, DWORD PTR [esi+148]
  000e3	51		 push	 ecx
  000e4	53		 push	 ebx
  000e5	8b c8		 mov	 ecx, eax
  000e7	e8 00 00 00 00	 call	 ?lodepng_convert@@YAIPAEPBEPAULodePNGColorMode@@PBU1@III@Z ; lodepng_convert
  000ec	83 c4 14	 add	 esp, 20			; 00000014H
  000ef	89 86 28 01 00
	00		 mov	 DWORD PTR [esi+296], eax

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  000f5	57		 push	 edi
  000f6	e8 00 00 00 00	 call	 _free

; 4786 :     lodepng_free(data);
; 4787 :   }
; 4788 :   return state->error;

  000fb	8b 86 28 01 00
	00		 mov	 eax, DWORD PTR [esi+296]

; 64   : }
; 65   : 
; 66   : static void* lodepng_realloc(void* ptr, size_t new_size)
; 67   : {
; 68   :   return realloc(ptr, new_size);
; 69   : }
; 70   : 
; 71   : static void lodepng_free(void* ptr)
; 72   : {
; 73   :   free(ptr);

  00101	83 c4 04	 add	 esp, 4
  00104	5f		 pop	 edi
  00105	5b		 pop	 ebx
  00106	5e		 pop	 esi

; 4789 : }

  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
$LN7@lodepng_de:

; 4755 :   {
; 4756 :     /*same color type, no copying or converting of data needed*/
; 4757 :     /*store the info_png color settings on the info_raw so that the info_raw still reflects what colortype
; 4758 :     the raw image has to the end user*/
; 4759 :     if(!state->decoder.color_convert)

  0010b	85 ff		 test	 edi, edi
  0010d	75 18		 jne	 SHORT $LN5@lodepng_de
$LN21@lodepng_de:

; 4760 :     {
; 4761 :       state->error = lodepng_color_mode_copy(&state->info_raw, &state->info_png.color);

  0010f	8d 96 94 00 00
	00		 lea	 edx, DWORD PTR [esi+148]
  00115	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  00118	e8 00 00 00 00	 call	 ?lodepng_color_mode_copy@@YAIPAULodePNGColorMode@@PBU1@@Z ; lodepng_color_mode_copy
  0011d	89 86 28 01 00
	00		 mov	 DWORD PTR [esi+296], eax

; 4762 :       if(state->error) return state->error;

  00123	85 c0		 test	 eax, eax
  00125	75 06		 jne	 SHORT $LN18@lodepng_de
$LN5@lodepng_de:

; 4786 :     lodepng_free(data);
; 4787 :   }
; 4788 :   return state->error;

  00127	8b 86 28 01 00
	00		 mov	 eax, DWORD PTR [esi+296]
$LN18@lodepng_de:
  0012d	5f		 pop	 edi
  0012e	5b		 pop	 ebx
$LN10@lodepng_de:
  0012f	5e		 pop	 esi

; 4789 : }

  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c3		 ret	 0
?lodepng_decode@@YAIPAPAEPAI1PAULodePNGState@@PBEI@Z ENDP ; lodepng_decode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z
_TEXT	SEGMENT
_state$ = -316						; size = 300
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_h$ = 8							; size = 4
_in$ = 12						; size = 4
_insize$ = 16						; size = 4
_colortype$dead$ = 20					; size = 4
_bitdepth$dead$ = 24					; size = 4
?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z PROC ; lodepng_decode_memory, COMDAT
; _out$ = ecx
; _w$ = edx

; 4793 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b d9		 mov	 ebx, ecx
  00030	8b 7d 08	 mov	 edi, DWORD PTR _h$[ebp]
  00033	8b 75 0c	 mov	 esi, DWORD PTR _in$[ebp]
  00036	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _state$[ebp], OFFSET ??_7LodePNGState@@6B@

; 4794 :   unsigned error;
; 4795 :   LodePNGState state;
; 4796 :   lodepng_state_init(&state);

  00040	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp]
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	e8 00 00 00 00	 call	 ?lodepng_state_init@@YAXPAULodePNGState@@@Z ; lodepng_state_init

; 4797 :   state.info_raw.colortype = colortype;
; 4798 :   state.info_raw.bitdepth = bitdepth;
; 4799 :   error = lodepng_decode(out, w, h, &state, in, insize);

  00052	ff 75 10	 push	 DWORD PTR _insize$[ebp]
  00055	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _state$[ebp]
  0005b	56		 push	 esi
  0005c	50		 push	 eax
  0005d	57		 push	 edi
  0005e	8b cb		 mov	 ecx, ebx
  00060	c7 85 2c ff ff
	ff 06 00 00 00	 mov	 DWORD PTR _state$[ebp+104], 6
  0006a	c7 85 30 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR _state$[ebp+108], 8
  00074	e8 00 00 00 00	 call	 ?lodepng_decode@@YAIPAPAEPAI1PAULodePNGState@@PBEI@Z ; lodepng_decode

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
; 945  :     (*bp)++;
; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);
; 965  :   generateFixedDistanceTree(tree_d);
; 966  : }
; 967  : 
; 968  : /*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
; 969  : static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
; 970  :                                       const unsigned char* in, size_t* bp, size_t inlength)
; 971  : {
; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;
; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/
; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;
; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;
; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;
; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)
; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
; 1009 :     if(error) break;
; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;
; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;
; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;
; 1020 :     while(i < HLIT + HDIST)
; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
; 1023 :       if(code <= 15) /*a length code*/
; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;
; 1026 :         else bitlen_d[i - HLIT] = code;
; 1027 :         i++;
; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/
; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);
; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];
; 1040 :         else value = bitlen_d[i - HLIT - 1];
; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)
; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
; 1045 :           if(i < HLIT) bitlen_ll[i] = value;
; 1046 :           else bitlen_d[i - HLIT] = value;
; 1047 :           i++;
; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/
; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);
; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)
; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1063 :           else bitlen_d[i - HLIT] = 0;
; 1064 :           i++;
; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/
; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);
; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)
; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1080 :           else bitlen_d[i - HLIT] = 0;
; 1081 :           i++;
; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))
; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;
; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/
; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;
; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 1102 :     if(error) break;
; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
; 1104 : 
; 1105 :     break; /*end of error-while*/
; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;
; 1114 : }
; 1115 : 
; 1116 : /*inflate a block with dynamic of fixed Huffman tree*/
; 1117 : static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
; 1118 :                                     size_t* pos, size_t inlength, unsigned btype)
; 1119 : {
; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;
; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/
; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/
; 1136 :     {
; 1137 :       if((*pos) >= out->size)
; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);
; 1143 :       (*pos)++;
; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);
; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
; 1161 :       if(code_d > 29)
; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;
; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/
; 1170 :         break;
; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);
; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);
; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)
; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)
; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];
; 1193 :         (*pos)++;
; 1194 :         backward++;
; 1195 :         if(backward >= start) backward = start - distance;
; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)
; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;
; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;
; 1215 : }
; 1216 : 
; 1217 : static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
; 1218 : {
; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;
; 1223 :   p = (*bp) / 8; /*byte position*/
; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/
; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;
; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;
; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)
; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];
; 1241 : 
; 1242 :   (*bp) = p * 8;
; 1243 : 
; 1244 :   return error;
; 1245 : }
; 1246 : 
; 1247 : static unsigned lodepng_inflatev(ucvector* out,
; 1248 :                                  const unsigned char* in, size_t insize,
; 1249 :                                  const LodePNGDecompressSettings* settings)
; 1250 : {
; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;
; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/
; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)
; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
; 1264 :     BFINAL = readBitFromStream(&bp, in);
; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);
; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
; 1271 : 
; 1272 :     if(error) return error;
; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/
; 1277 : 
; 1278 :   return error;
; 1279 : }
; 1280 : 
; 1281 : unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
; 1282 :                          const unsigned char* in, size_t insize,
; 1283 :                          const LodePNGDecompressSettings* settings)
; 1284 : {
; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);
; 1289 :   *out = v.data;
; 1290 :   *outsize = v.size;
; 1291 :   return error;
; 1292 : }
; 1293 : 
; 1294 : static unsigned inflate(unsigned char** out, size_t* outsize,
; 1295 :                         const unsigned char* in, size_t insize,
; 1296 :                         const LodePNGDecompressSettings* settings)
; 1297 : {
; 1298 :   if(settings->custom_inflate)
; 1299 :   {
; 1300 :     return settings->custom_inflate(out, outsize, in, insize, settings);
; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }
; 1307 : 
; 1308 : #endif /*LODEPNG_COMPILE_DECODER*/
; 1309 : 
; 1310 : #ifdef LODEPNG_COMPILE_ENCODER
; 1311 : 
; 1312 : /* ////////////////////////////////////////////////////////////////////////// */
; 1313 : /* / Deflator (Compressor)                                                  / */
; 1314 : /* ////////////////////////////////////////////////////////////////////////// */
; 1315 : 
; 1316 : static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;
; 1317 : 
; 1318 : /*bitlen is the size in bits of the code*/
; 1319 : static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)
; 1320 : {
; 1321 :   addBitsToStreamReversed(bp, compressed, code, bitlen);
; 1322 : }
; 1323 : 
; 1324 : /*search the index in the array, that has the largest value smaller than or equal to the given value,
; 1325 : given array must be sorted (if no value is smaller, it returns the size of the given array)*/
; 1326 : static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)
; 1327 : {
; 1328 :   /*linear search implementation*/
; 1329 :   /*for(size_t i = 1; i < array_size; i++) if(array[i] > value) return i - 1;
; 1330 :   return array_size - 1;*/
; 1331 : 
; 1332 :   /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
; 1333 :   size_t left  = 1;
; 1334 :   size_t right = array_size - 1;
; 1335 :   while(left <= right)
; 1336 :   {
; 1337 :     size_t mid = (left + right) / 2;
; 1338 :     if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
; 1339 :     else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
; 1340 :     else return mid - 1;
; 1341 :   }
; 1342 :   return array_size - 1;
; 1343 : }
; 1344 : 
; 1345 : static void addLengthDistance(uivector* values, size_t length, size_t distance)
; 1346 : {
; 1347 :   /*values in encoded vector are those used by deflate:
; 1348 :   0-255: literal bytes
; 1349 :   256: end
; 1350 :   257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
; 1351 :   286-287: invalid*/
; 1352 : 
; 1353 :   unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
; 1354 :   unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
; 1355 :   unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
; 1356 :   unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);
; 1357 : 
; 1358 :   uivector_push_back(values, length_code + FIRST_LENGTH_CODE_INDEX);
; 1359 :   uivector_push_back(values, extra_length);
; 1360 :   uivector_push_back(values, dist_code);
; 1361 :   uivector_push_back(values, extra_distance);
; 1362 : }
; 1363 : 
; 1364 : static const unsigned HASH_NUM_VALUES = 65536;
; 1365 : static const unsigned HASH_NUM_CHARACTERS = 3;
; 1366 : static const unsigned HASH_SHIFT = 2;
; 1367 : /*
; 1368 : The HASH_NUM_CHARACTERS value is used to make encoding faster by using longer
; 1369 : sequences to generate a hash value from the stream bytes. Setting it to 3
; 1370 : gives exactly the same compression as the brute force method, since deflate's
; 1371 : run length encoding starts with lengths of 3. Setting it to higher values,
; 1372 : like 6, can make the encoding faster (not always though!), but will cause the
; 1373 : encoding to miss any length between 3 and this value, so that the compression
; 1374 : may be worse (but this can vary too depending on the image, sometimes it is
; 1375 : even a bit better instead).
; 1376 : The HASH_NUM_VALUES is the amount of unique possible hash values that
; 1377 : combinations of bytes can give, the higher it is the more memory is needed, but
; 1378 : if it's too low the advantage of hashing is gone.
; 1379 : */
; 1380 : 
; 1381 : typedef struct Hash
; 1382 : {
; 1383 :   int* head; /*hash value to head circular pos*/
; 1384 :   int* val; /*circular pos to hash value*/
; 1385 :   /*circular pos to prev circular pos*/
; 1386 :   unsigned short* chain;
; 1387 :   unsigned short* zeros;
; 1388 : } Hash;
; 1389 : 
; 1390 : static unsigned hash_init(Hash* hash, unsigned windowsize)
; 1391 : {
; 1392 :   unsigned i;
; 1393 :   hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
; 1394 :   hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
; 1395 :   hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1396 :   hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1397 : 
; 1398 :   if(!hash->head || !hash->val || !hash->chain || !hash->zeros) return 83; /*alloc fail*/
; 1399 : 
; 1400 :   /*initialize hash table*/
; 1401 :   for(i = 0; i < HASH_NUM_VALUES; i++) hash->head[i] = -1;
; 1402 :   for(i = 0; i < windowsize; i++) hash->val[i] = -1;
; 1403 :   for(i = 0; i < windowsize; i++) hash->chain[i] = i; /*same value as index indicates uninitialized*/
; 1404 : 
; 1405 :   return 0;
; 1406 : }
; 1407 : 
; 1408 : static void hash_cleanup(Hash* hash)
; 1409 : {
; 1410 :   lodepng_free(hash->head);
; 1411 :   lodepng_free(hash->val);
; 1412 :   lodepng_free(hash->chain);
; 1413 :   lodepng_free(hash->zeros);
; 1414 : }
; 1415 : 
; 1416 : static unsigned getHash(const unsigned char* data, size_t size, size_t pos)
; 1417 : {
; 1418 :   unsigned result = 0;
; 1419 :   size_t amount, i;
; 1420 :   if(pos >= size) return 0;
; 1421 :   amount = HASH_NUM_CHARACTERS;
; 1422 :   if(pos + amount >= size) amount = size - pos;
; 1423 :   for(i = 0; i < amount; i++) result ^= (data[pos + i] << (i * HASH_SHIFT));
; 1424 :   return result % HASH_NUM_VALUES;
; 1425 : }
; 1426 : 
; 1427 : static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)
; 1428 : {
; 1429 :   const unsigned char* start = data + pos;
; 1430 :   const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
; 1431 :   if(end > data + size) end = data + size;
; 1432 :   data = start;
; 1433 :   while (data != end && *data == 0) data++;
; 1434 :   /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
; 1435 :   return (unsigned)(data - start);
; 1436 : }
; 1437 : 
; 1438 : static void updateHashChain(Hash* hash, size_t pos, int hashval, unsigned windowsize)
; 1439 : {
; 1440 :   unsigned wpos = pos % windowsize;
; 1441 :   hash->val[wpos] = hashval;
; 1442 :   if(hash->head[hashval] != -1) hash->chain[wpos] = hash->head[hashval];
; 1443 :   hash->head[hashval] = wpos;
; 1444 : }
; 1445 : 
; 1446 : /*
; 1447 : LZ77-encode the data. Return value is error code. The input are raw bytes, the output
; 1448 : is in the form of unsigned integers with codes representing for example literal bytes, or
; 1449 : length/distance pairs.
; 1450 : It uses a hash table technique to let it encode faster. When doing LZ77 encoding, a
; 1451 : sliding window (of windowsize) is used, and all past bytes in that window can be used as
; 1452 : the "dictionary". A brute force search through all possible distances would be slow, and
; 1453 : this hash technique is one out of several ways to speed this up.
; 1454 : */
; 1455 : static unsigned encodeLZ77(uivector* out, Hash* hash,
; 1456 :                            const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
; 1457 :                            unsigned minmatch, unsigned nicematch, unsigned lazymatching)
; 1458 : {
; 1459 :   unsigned short numzeros = 0;
; 1460 :   int usezeros = windowsize >= 8192; /*for small window size, the 'max chain length' optimization does a better job*/
; 1461 :   unsigned pos, i, error = 0;
; 1462 :   /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
; 1463 :   unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8;
; 1464 :   unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;
; 1465 : 
; 1466 :   if(!error)
; 1467 :   {
; 1468 :     unsigned offset; /*the offset represents the distance in LZ77 terminology*/
; 1469 :     unsigned length;
; 1470 :     unsigned lazy = 0;
; 1471 :     unsigned lazylength = 0, lazyoffset = 0;
; 1472 :     unsigned hashval;
; 1473 :     unsigned current_offset, current_length;
; 1474 :     const unsigned char *lastptr, *foreptr, *backptr;
; 1475 :     unsigned short hashpos, prevpos;
; 1476 : 
; 1477 :     for(pos = inpos; pos < insize; pos++)
; 1478 :     {
; 1479 :       size_t wpos = pos % windowsize; /*position for in 'circular' hash buffers*/
; 1480 : 
; 1481 :       hashval = getHash(in, insize, pos);
; 1482 :       updateHashChain(hash, pos, hashval, windowsize);
; 1483 : 
; 1484 :       if(usezeros && hashval == 0)
; 1485 :       {
; 1486 :         numzeros = countZeros(in, insize, pos);
; 1487 :         hash->zeros[wpos] = numzeros;
; 1488 :       }
; 1489 : 
; 1490 :       /*the length and offset found for the current position*/
; 1491 :       length = 0;
; 1492 :       offset = 0;
; 1493 : 
; 1494 :       prevpos = hash->head[hashval];
; 1495 :       hashpos = hash->chain[prevpos];
; 1496 : 
; 1497 :       lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];
; 1498 : 
; 1499 :       /*search for the longest string*/
; 1500 :       if(hash->val[wpos] == (int)hashval)
; 1501 :       {
; 1502 :         unsigned chainlength = 0;
; 1503 :         for(;;)
; 1504 :         {
; 1505 :           /*stop when went completely around the circular buffer*/
; 1506 :           if(prevpos < wpos && hashpos > prevpos && hashpos <= wpos) break;
; 1507 :           if(prevpos > wpos && (hashpos <= wpos || hashpos > prevpos)) break;
; 1508 :           if(chainlength++ >= maxchainlength) break;
; 1509 : 
; 1510 :           current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;
; 1511 :           if(current_offset > 0)
; 1512 :           {
; 1513 :             /*test the next characters*/
; 1514 :             foreptr = &in[pos];
; 1515 :             backptr = &in[pos - current_offset];
; 1516 : 
; 1517 :             /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
; 1518 :             if(usezeros && hashval == 0 && hash->val[hashpos] == 0 /*hashval[hashpos] may be out of date*/)
; 1519 :             {
; 1520 :               unsigned short skip = hash->zeros[hashpos];
; 1521 :               if(skip > numzeros) skip = numzeros;
; 1522 :               backptr += skip;
; 1523 :               foreptr += skip;
; 1524 :             }
; 1525 : 
; 1526 :             /* multiple checks at once per array bounds check */
; 1527 :             while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
; 1528 :             {
; 1529 :               ++backptr;
; 1530 :               ++foreptr;
; 1531 :             }
; 1532 :             current_length = (unsigned)(foreptr - &in[pos]);
; 1533 : 
; 1534 :             if(current_length > length)
; 1535 :             {
; 1536 :               length = current_length; /*the longest length*/
; 1537 :               offset = current_offset; /*the offset that is related to this longest length*/
; 1538 :               /*jump out once a length of max length is found (speed gain)*/
; 1539 :               if(current_length >= nicematch || current_length == MAX_SUPPORTED_DEFLATE_LENGTH) break;
; 1540 :             }
; 1541 :           }
; 1542 : 
; 1543 :           if(hashpos == hash->chain[hashpos]) break;
; 1544 : 
; 1545 :           prevpos = hashpos;
; 1546 :           hashpos = hash->chain[hashpos];
; 1547 :         }
; 1548 :       }
; 1549 : 
; 1550 :       if(lazymatching)
; 1551 :       {
; 1552 :         if(!lazy && length >= 3 && length <= maxlazymatch && length < MAX_SUPPORTED_DEFLATE_LENGTH)
; 1553 :         {
; 1554 :           lazy = 1;
; 1555 :           lazylength = length;
; 1556 :           lazyoffset = offset;
; 1557 :           continue; /*try the next byte*/
; 1558 :         }
; 1559 :         if(lazy)
; 1560 :         {
; 1561 :           lazy = 0;
; 1562 :           if(pos == 0) ERROR_BREAK(81);
; 1563 :           if(length > lazylength + 1)
; 1564 :           {
; 1565 :             /*push the previous character as literal*/
; 1566 :             if(!uivector_push_back(out, in[pos - 1])) ERROR_BREAK(83 /*alloc fail*/);
; 1567 :           }
; 1568 :           else
; 1569 :           {
; 1570 :             length = lazylength;
; 1571 :             offset = lazyoffset;
; 1572 :             hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
; 1573 :             pos--;
; 1574 :           }
; 1575 :         }
; 1576 :       }
; 1577 :       if(length >= 3 && offset > windowsize) ERROR_BREAK(86 /*too big (or overflown negative) offset*/);
; 1578 : 
; 1579 :       /**encode it as length/distance pair or literal value**/
; 1580 :       if(length < 3) /*only lengths of 3 or higher are supported as length/distance pair*/
; 1581 :       {
; 1582 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1583 :       }
; 1584 :       else if(length < minmatch || (length == 3 && offset > 4096))
; 1585 :       {
; 1586 :         /*compensate for the fact that longer offsets have more extra bits, a
; 1587 :         length of only 3 may be not worth it then*/
; 1588 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1589 :       }
; 1590 :       else
; 1591 :       {
; 1592 :         addLengthDistance(out, length, offset);
; 1593 :         for(i = 1; i < length; i++)
; 1594 :         {
; 1595 :           pos++;
; 1596 :           hashval = getHash(in, insize, pos);
; 1597 :           updateHashChain(hash, pos, hashval, windowsize);
; 1598 :           if(usezeros && hashval == 0)
; 1599 :           {
; 1600 :             hash->zeros[pos % windowsize] = countZeros(in, insize, pos);
; 1601 :           }
; 1602 :         }
; 1603 :       }
; 1604 : 
; 1605 :     } /*end of the loop through each character of input*/
; 1606 :   } /*end of "if(!error)"*/
; 1607 : 
; 1608 :   return error;
; 1609 : }
; 1610 : 
; 1611 : /* /////////////////////////////////////////////////////////////////////////// */
; 1612 : 
; 1613 : static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)
; 1614 : {
; 1615 :   /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
; 1616 :   2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/
; 1617 : 
; 1618 :   size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
; 1619 :   unsigned datapos = 0;
; 1620 :   for(i = 0; i < numdeflateblocks; i++)
; 1621 :   {
; 1622 :     unsigned BFINAL, BTYPE, LEN, NLEN;
; 1623 :     unsigned char firstbyte;
; 1624 : 
; 1625 :     BFINAL = (i == numdeflateblocks - 1);
; 1626 :     BTYPE = 0;
; 1627 : 
; 1628 :     firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1) << 1) + ((BTYPE & 2) << 1));
; 1629 :     ucvector_push_back(out, firstbyte);
; 1630 : 
; 1631 :     LEN = 65535;
; 1632 :     if(datasize - datapos < 65535) LEN = (unsigned)datasize - datapos;
; 1633 :     NLEN = 65535 - LEN;
; 1634 : 
; 1635 :     ucvector_push_back(out, (unsigned char)(LEN % 256));
; 1636 :     ucvector_push_back(out, (unsigned char)(LEN / 256));
; 1637 :     ucvector_push_back(out, (unsigned char)(NLEN % 256));
; 1638 :     ucvector_push_back(out, (unsigned char)(NLEN / 256));
; 1639 : 
; 1640 :     /*Decompressed data*/
; 1641 :     for(j = 0; j < 65535 && datapos < datasize; j++)
; 1642 :     {
; 1643 :       ucvector_push_back(out, data[datapos++]);
; 1644 :     }
; 1645 :   }
; 1646 : 
; 1647 :   return 0;
; 1648 : }
; 1649 : 
; 1650 : /*
; 1651 : write the lz77-encoded data, which has lit, len and dist codes, to compressed stream using huffman trees.
; 1652 : tree_ll: the tree for lit and len codes.
; 1653 : tree_d: the tree for distance codes.
; 1654 : */
; 1655 : static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
; 1656 :                           const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
; 1657 : {
; 1658 :   size_t i = 0;
; 1659 :   for(i = 0; i < lz77_encoded->size; i++)
; 1660 :   {
; 1661 :     unsigned val = lz77_encoded->data[i];
; 1662 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_ll, val), HuffmanTree_getLength(tree_ll, val));
; 1663 :     if(val > 256) /*for a length code, 3 more things have to be added*/
; 1664 :     {
; 1665 :       unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
; 1666 :       unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
; 1667 :       unsigned length_extra_bits = lz77_encoded->data[++i];
; 1668 : 
; 1669 :       unsigned distance_code = lz77_encoded->data[++i];
; 1670 : 
; 1671 :       unsigned distance_index = distance_code;
; 1672 :       unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
; 1673 :       unsigned distance_extra_bits = lz77_encoded->data[++i];
; 1674 : 
; 1675 :       addBitsToStream(bp, out, length_extra_bits, n_length_extra_bits);
; 1676 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
; 1677 :                        HuffmanTree_getLength(tree_d, distance_code));
; 1678 :       addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
; 1679 :     }
; 1680 :   }
; 1681 : }
; 1682 : 
; 1683 : /*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
; 1684 : static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,
; 1685 :                                const unsigned char* data, size_t datapos, size_t dataend,
; 1686 :                                const LodePNGCompressSettings* settings, int final)
; 1687 : {
; 1688 :   unsigned error = 0;
; 1689 : 
; 1690 :   /*
; 1691 :   A block is compressed as follows: The PNG data is lz77 encoded, resulting in
; 1692 :   literal bytes and length/distance pairs. This is then huffman compressed with
; 1693 :   two huffman trees. One huffman tree is used for the lit and len values ("ll"),
; 1694 :   another huffman tree is used for the dist values ("d"). These two trees are
; 1695 :   stored using their code lengths, and to compress even more these code lengths
; 1696 :   are also run-length encoded and huffman compressed. This gives a huffman tree
; 1697 :   of code lengths "cl". The code lenghts used to describe this third tree are
; 1698 :   the code length code lengths ("clcl").
; 1699 :   */
; 1700 : 
; 1701 :   /*The lz77 encoded data, represented with integers since there will also be length and distance codes in it*/
; 1702 :   uivector lz77_encoded;
; 1703 :   HuffmanTree tree_ll; /*tree for lit,len values*/
; 1704 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1705 :   HuffmanTree tree_cl; /*tree for encoding the code lengths representing tree_ll and tree_d*/
; 1706 :   uivector frequencies_ll; /*frequency of lit,len codes*/
; 1707 :   uivector frequencies_d; /*frequency of dist codes*/
; 1708 :   uivector frequencies_cl; /*frequency of code length codes*/
; 1709 :   uivector bitlen_lld; /*lit,len,dist code lenghts (int bits), literally (without repeat codes).*/
; 1710 :   uivector bitlen_lld_e; /*bitlen_lld encoded with repeat codes (this is a rudemtary run length compression)*/
; 1711 :   /*bitlen_cl is the code length code lengths ("clcl"). The bit lengths of codes to represent tree_cl
; 1712 :   (these are written as is in the file, it would be crazy to compress these using yet another huffman
; 1713 :   tree that needs to be represented by yet another set of code lengths)*/
; 1714 :   uivector bitlen_cl;
; 1715 :   size_t datasize = dataend - datapos;
; 1716 : 
; 1717 :   /*
; 1718 :   Due to the huffman compression of huffman tree representations ("two levels"), there are some anologies:
; 1719 :   bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
; 1720 :   bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
; 1721 :   bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
; 1722 :   */
; 1723 : 
; 1724 :   unsigned BFINAL = final;
; 1725 :   size_t numcodes_ll, numcodes_d, i;
; 1726 :   unsigned HLIT, HDIST, HCLEN;
; 1727 : 
; 1728 :   uivector_init(&lz77_encoded);
; 1729 :   HuffmanTree_init(&tree_ll);
; 1730 :   HuffmanTree_init(&tree_d);
; 1731 :   HuffmanTree_init(&tree_cl);
; 1732 :   uivector_init(&frequencies_ll);
; 1733 :   uivector_init(&frequencies_d);
; 1734 :   uivector_init(&frequencies_cl);
; 1735 :   uivector_init(&bitlen_lld);
; 1736 :   uivector_init(&bitlen_lld_e);
; 1737 :   uivector_init(&bitlen_cl);
; 1738 : 
; 1739 :   /*This while loop never loops due to a break at the end, it is here to
; 1740 :   allow breaking out of it to the cleanup phase on error conditions.*/
; 1741 :   while(!error)
; 1742 :   {
; 1743 :     if(settings->use_lz77)
; 1744 :     {
; 1745 :       error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1746 :                          settings->minmatch, settings->nicematch, settings->lazymatching);
; 1747 :       if(error) break;
; 1748 :     }
; 1749 :     else
; 1750 :     {
; 1751 :       if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83 /*alloc fail*/);
; 1752 :       for(i = datapos; i < dataend; i++) lz77_encoded.data[i] = data[i]; /*no LZ77, but still will be Huffman compressed*/
; 1753 :     }
; 1754 : 
; 1755 :     if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1756 :     if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1757 : 
; 1758 :     /*Count the frequencies of lit, len and dist codes*/
; 1759 :     for(i = 0; i < lz77_encoded.size; i++)
; 1760 :     {
; 1761 :       unsigned symbol = lz77_encoded.data[i];
; 1762 :       frequencies_ll.data[symbol]++;
; 1763 :       if(symbol > 256)
; 1764 :       {
; 1765 :         unsigned dist = lz77_encoded.data[i + 2];
; 1766 :         frequencies_d.data[dist]++;
; 1767 :         i += 3;
; 1768 :       }
; 1769 :     }
; 1770 :     frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/
; 1771 : 
; 1772 :     /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
; 1773 :     error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
; 1774 :     if(error) break;
; 1775 :     /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
; 1776 :     error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
; 1777 :     if(error) break;
; 1778 : 
; 1779 :     numcodes_ll = tree_ll.numcodes; if(numcodes_ll > 286) numcodes_ll = 286;
; 1780 :     numcodes_d = tree_d.numcodes; if(numcodes_d > 30) numcodes_d = 30;
; 1781 :     /*store the code lengths of both generated trees in bitlen_lld*/
; 1782 :     for(i = 0; i < numcodes_ll; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
; 1783 :     for(i = 0; i < numcodes_d; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));
; 1784 : 
; 1785 :     /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
; 1786 :     17 (3-10 zeroes), 18 (11-138 zeroes)*/
; 1787 :     for(i = 0; i < (unsigned)bitlen_lld.size; i++)
; 1788 :     {
; 1789 :       unsigned j = 0; /*amount of repititions*/
; 1790 :       while(i + j + 1 < (unsigned)bitlen_lld.size && bitlen_lld.data[i + j + 1] == bitlen_lld.data[i]) j++;
; 1791 : 
; 1792 :       if(bitlen_lld.data[i] == 0 && j >= 2) /*repeat code for zeroes*/
; 1793 :       {
; 1794 :         j++; /*include the first zero*/
; 1795 :         if(j <= 10) /*repeat code 17 supports max 10 zeroes*/
; 1796 :         {
; 1797 :           uivector_push_back(&bitlen_lld_e, 17);
; 1798 :           uivector_push_back(&bitlen_lld_e, j - 3);
; 1799 :         }
; 1800 :         else /*repeat code 18 supports max 138 zeroes*/
; 1801 :         {
; 1802 :           if(j > 138) j = 138;
; 1803 :           uivector_push_back(&bitlen_lld_e, 18);
; 1804 :           uivector_push_back(&bitlen_lld_e, j - 11);
; 1805 :         }
; 1806 :         i += (j - 1);
; 1807 :       }
; 1808 :       else if(j >= 3) /*repeat code for value other than zero*/
; 1809 :       {
; 1810 :         size_t k;
; 1811 :         unsigned num = j / 6, rest = j % 6;
; 1812 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1813 :         for(k = 0; k < num; k++)
; 1814 :         {
; 1815 :           uivector_push_back(&bitlen_lld_e, 16);
; 1816 :           uivector_push_back(&bitlen_lld_e, 6 - 3);
; 1817 :         }
; 1818 :         if(rest >= 3)
; 1819 :         {
; 1820 :           uivector_push_back(&bitlen_lld_e, 16);
; 1821 :           uivector_push_back(&bitlen_lld_e, rest - 3);
; 1822 :         }
; 1823 :         else j -= rest;
; 1824 :         i += j;
; 1825 :       }
; 1826 :       else /*too short to benefit from repeat code*/
; 1827 :       {
; 1828 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1829 :       }
; 1830 :     }
; 1831 : 
; 1832 :     /*generate tree_cl, the huffmantree of huffmantrees*/
; 1833 : 
; 1834 :     if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1835 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1836 :     {
; 1837 :       frequencies_cl.data[bitlen_lld_e.data[i]]++;
; 1838 :       /*after a repeat code come the bits that specify the number of repetitions,
; 1839 :       those don't need to be in the frequencies_cl calculation*/
; 1840 :       if(bitlen_lld_e.data[i] >= 16) i++;
; 1841 :     }
; 1842 : 
; 1843 :     error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
; 1844 :                                             frequencies_cl.size, frequencies_cl.size, 7);
; 1845 :     if(error) break;
; 1846 : 
; 1847 :     if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
; 1848 :     for(i = 0; i < tree_cl.numcodes; i++)
; 1849 :     {
; 1850 :       /*lenghts of code length tree is in the order as specified by deflate*/
; 1851 :       bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
; 1852 :     }
; 1853 :     while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
; 1854 :     {
; 1855 :       /*remove zeros at the end, but minimum size must be 4*/
; 1856 :       if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
; 1857 :     }
; 1858 :     if(error) break;
; 1859 : 
; 1860 :     /*
; 1861 :     Write everything into the output
; 1862 : 
; 1863 :     After the BFINAL and BTYPE, the dynamic block consists out of the following:
; 1864 :     - 5 bits HLIT, 5 bits HDIST, 4 bits HCLEN
; 1865 :     - (HCLEN+4)*3 bits code lengths of code length alphabet
; 1866 :     - HLIT + 257 code lenghts of lit/length alphabet (encoded using the code length
; 1867 :       alphabet, + possible repetition codes 16, 17, 18)
; 1868 :     - HDIST + 1 code lengths of distance alphabet (encoded using the code length
; 1869 :       alphabet, + possible repetition codes 16, 17, 18)
; 1870 :     - compressed data
; 1871 :     - 256 (end code)
; 1872 :     */
; 1873 : 
; 1874 :     /*Write block type*/
; 1875 :     addBitToStream(bp, out, BFINAL);
; 1876 :     addBitToStream(bp, out, 0); /*first bit of BTYPE "dynamic"*/
; 1877 :     addBitToStream(bp, out, 1); /*second bit of BTYPE "dynamic"*/
; 1878 : 
; 1879 :     /*write the HLIT, HDIST and HCLEN values*/
; 1880 :     HLIT = (unsigned)(numcodes_ll - 257);
; 1881 :     HDIST = (unsigned)(numcodes_d - 1);
; 1882 :     HCLEN = (unsigned)bitlen_cl.size - 4;
; 1883 :     /*trim zeroes for HCLEN. HLIT and HDIST were already trimmed at tree creation*/
; 1884 :     while(!bitlen_cl.data[HCLEN + 4 - 1] && HCLEN > 0) HCLEN--;
; 1885 :     addBitsToStream(bp, out, HLIT, 5);
; 1886 :     addBitsToStream(bp, out, HDIST, 5);
; 1887 :     addBitsToStream(bp, out, HCLEN, 4);
; 1888 : 
; 1889 :     /*write the code lenghts of the code length alphabet*/
; 1890 :     for(i = 0; i < HCLEN + 4; i++) addBitsToStream(bp, out, bitlen_cl.data[i], 3);
; 1891 : 
; 1892 :     /*write the lenghts of the lit/len AND the dist alphabet*/
; 1893 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1894 :     {
; 1895 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
; 1896 :                        HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
; 1897 :       /*extra bits of repeat codes*/
; 1898 :       if(bitlen_lld_e.data[i] == 16) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 2);
; 1899 :       else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
; 1900 :       else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
; 1901 :     }
; 1902 : 
; 1903 :     /*write the compressed data symbols*/
; 1904 :     writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1905 :     /*error: the length of the end code 256 must be larger than 0*/
; 1906 :     if(HuffmanTree_getLength(&tree_ll, 256) == 0) ERROR_BREAK(64);
; 1907 : 
; 1908 :     /*write the end code*/
; 1909 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1910 : 
; 1911 :     break; /*end of error-while*/
; 1912 :   }
; 1913 : 
; 1914 :   /*cleanup*/
; 1915 :   uivector_cleanup(&lz77_encoded);
; 1916 :   HuffmanTree_cleanup(&tree_ll);
; 1917 :   HuffmanTree_cleanup(&tree_d);
; 1918 :   HuffmanTree_cleanup(&tree_cl);
; 1919 :   uivector_cleanup(&frequencies_ll);
; 1920 :   uivector_cleanup(&frequencies_d);
; 1921 :   uivector_cleanup(&frequencies_cl);
; 1922 :   uivector_cleanup(&bitlen_lld_e);
; 1923 :   uivector_cleanup(&bitlen_lld);
; 1924 :   uivector_cleanup(&bitlen_cl);
; 1925 : 
; 1926 :   return error;
; 1927 : }
; 1928 : 
; 1929 : static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,
; 1930 :                              const unsigned char* data,
; 1931 :                              size_t datapos, size_t dataend,
; 1932 :                              const LodePNGCompressSettings* settings, int final)
; 1933 : {
; 1934 :   HuffmanTree tree_ll; /*tree for literal values and length codes*/
; 1935 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1936 : 
; 1937 :   unsigned BFINAL = final;
; 1938 :   unsigned error = 0;
; 1939 :   size_t i;
; 1940 : 
; 1941 :   HuffmanTree_init(&tree_ll);
; 1942 :   HuffmanTree_init(&tree_d);
; 1943 : 
; 1944 :   generateFixedLitLenTree(&tree_ll);
; 1945 :   generateFixedDistanceTree(&tree_d);
; 1946 : 
; 1947 :   addBitToStream(bp, out, BFINAL);
; 1948 :   addBitToStream(bp, out, 1); /*first bit of BTYPE*/
; 1949 :   addBitToStream(bp, out, 0); /*second bit of BTYPE*/
; 1950 : 
; 1951 :   if(settings->use_lz77) /*LZ77 encoded*/
; 1952 :   {
; 1953 :     uivector lz77_encoded;
; 1954 :     uivector_init(&lz77_encoded);
; 1955 :     error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1956 :                        settings->minmatch, settings->nicematch, settings->lazymatching);
; 1957 :     if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1958 :     uivector_cleanup(&lz77_encoded);
; 1959 :   }
; 1960 :   else /*no LZ77, but still will be Huffman compressed*/
; 1961 :   {
; 1962 :     for(i = datapos; i < dataend; i++)
; 1963 :     {
; 1964 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
; 1965 :     }
; 1966 :   }
; 1967 :   /*add END code*/
; 1968 :   if(!error) addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1969 : 
; 1970 :   /*cleanup*/
; 1971 :   HuffmanTree_cleanup(&tree_ll);
; 1972 :   HuffmanTree_cleanup(&tree_d);
; 1973 : 
; 1974 :   return error;
; 1975 : }
; 1976 : 
; 1977 : static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
; 1978 :                                  const LodePNGCompressSettings* settings)
; 1979 : {
; 1980 :   unsigned error = 0;
; 1981 :   size_t i, blocksize, numdeflateblocks;
; 1982 :   size_t bp = 0; /*the bit pointer*/
; 1983 :   Hash hash;
; 1984 : 
; 1985 :   if(settings->btype > 2) return 61;
; 1986 :   else if(settings->btype == 0) return deflateNoCompression(out, in, insize);
; 1987 :   else if(settings->btype == 1) blocksize = insize;
; 1988 :   else /*if(settings->btype == 2)*/
; 1989 :   {
; 1990 :     blocksize = insize / 8 + 8;
; 1991 :     if(blocksize < 65535) blocksize = 65535;
; 1992 :   }
; 1993 : 
; 1994 :   numdeflateblocks = (insize + blocksize - 1) / blocksize;
; 1995 :   if(numdeflateblocks == 0) numdeflateblocks = 1;
; 1996 : 
; 1997 :   error = hash_init(&hash, settings->windowsize);
; 1998 :   if(error) return error;
; 1999 : 
; 2000 :   for(i = 0; i < numdeflateblocks && !error; i++)
; 2001 :   {
; 2002 :     int final = i == numdeflateblocks - 1;
; 2003 :     size_t start = i * blocksize;
; 2004 :     size_t end = start + blocksize;
; 2005 :     if(end > insize) end = insize;
; 2006 : 
; 2007 :     if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
; 2008 :     else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
; 2009 :   }
; 2010 : 
; 2011 :   hash_cleanup(&hash);
; 2012 : 
; 2013 :   return error;
; 2014 : }
; 2015 : 
; 2016 : unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
; 2017 :                          const unsigned char* in, size_t insize,
; 2018 :                          const LodePNGCompressSettings* settings)
; 2019 : {
; 2020 :   unsigned error;
; 2021 :   ucvector v;
; 2022 :   ucvector_init_buffer(&v, *out, *outsize);
; 2023 :   error = lodepng_deflatev(&v, in, insize, settings);
; 2024 :   *out = v.data;
; 2025 :   *outsize = v.size;
; 2026 :   return error;
; 2027 : }
; 2028 : 
; 2029 : static unsigned deflate(unsigned char** out, size_t* outsize,
; 2030 :                         const unsigned char* in, size_t insize,
; 2031 :                         const LodePNGCompressSettings* settings)
; 2032 : {
; 2033 :   if(settings->custom_deflate)
; 2034 :   {
; 2035 :     return settings->custom_deflate(out, outsize, in, insize, settings);
; 2036 :   }
; 2037 :   else
; 2038 :   {
; 2039 :     return lodepng_deflate(out, outsize, in, insize, settings);
; 2040 :   }
; 2041 : }
; 2042 : 
; 2043 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2044 : 
; 2045 : /* ////////////////////////////////////////////////////////////////////////// */
; 2046 : /* / Adler32                                                                  */
; 2047 : /* ////////////////////////////////////////////////////////////////////////// */
; 2048 : 
; 2049 : static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
; 2050 : {
; 2051 :    unsigned s1 = adler & 0xffff;
; 2052 :    unsigned s2 = (adler >> 16) & 0xffff;
; 2053 : 
; 2054 :   while(len > 0)
; 2055 :   {
; 2056 :     /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
; 2057 :     unsigned amount = len > 5550 ? 5550 : len;
; 2058 :     len -= amount;
; 2059 :     while(amount > 0)
; 2060 :     {
; 2061 :       s1 += (*data++);
; 2062 :       s2 += s1;
; 2063 :       amount--;
; 2064 :     }
; 2065 :     s1 %= 65521;
; 2066 :     s2 %= 65521;
; 2067 :   }
; 2068 : 
; 2069 :   return (s2 << 16) | s1;
; 2070 : }
; 2071 : 
; 2072 : /*Return the adler32 of the bytes data[0..len-1]*/
; 2073 : static unsigned adler32(const unsigned char* data, unsigned len)
; 2074 : {
; 2075 :   return update_adler32(1L, data, len);
; 2076 : }
; 2077 : 
; 2078 : /* ////////////////////////////////////////////////////////////////////////// */
; 2079 : /* / Zlib                                                                   / */
; 2080 : /* ////////////////////////////////////////////////////////////////////////// */
; 2081 : 
; 2082 : #ifdef LODEPNG_COMPILE_DECODER
; 2083 : 
; 2084 : unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2085 :                                  size_t insize, const LodePNGDecompressSettings* settings)
; 2086 : {
; 2087 :   unsigned error = 0;
; 2088 :   unsigned CM, CINFO, FDICT;
; 2089 : 
; 2090 :   if(insize < 2) return 53; /*error, size of zlib data too small*/
; 2091 :   /*read information from zlib header*/
; 2092 :   if((in[0] * 256 + in[1]) % 31 != 0)
; 2093 :   {
; 2094 :     /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
; 2095 :     return 24;
; 2096 :   }
; 2097 : 
; 2098 :   CM = in[0] & 15;
; 2099 :   CINFO = (in[0] >> 4) & 15;
; 2100 :   /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
; 2101 :   FDICT = (in[1] >> 5) & 1;
; 2102 :   /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/
; 2103 : 
; 2104 :   if(CM != 8 || CINFO > 7)
; 2105 :   {
; 2106 :     /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
; 2107 :     return 25;
; 2108 :   }
; 2109 :   if(FDICT != 0)
; 2110 :   {
; 2111 :     /*error: the specification of PNG says about the zlib stream:
; 2112 :       "The additional flags shall not specify a preset dictionary."*/
; 2113 :     return 26;
; 2114 :   }
; 2115 : 
; 2116 :   error = inflate(out, outsize, in + 2, insize - 2, settings);
; 2117 :   if(error) return error;
; 2118 : 
; 2119 :   if(!settings->ignore_adler32)
; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/
; 2124 :   }
; 2125 : 
; 2126 :   return 0; /*no error*/
; 2127 : }
; 2128 : 
; 2129 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2130 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2131 : {
; 2132 :   if(settings->custom_zlib)
; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2134 :   else
; 2135 :     return lodepng_zlib_decompress(out, outsize, in, insize, settings);
; 2136 : }
; 2137 : 
; 2138 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2139 : 
; 2140 : #ifdef LODEPNG_COMPILE_ENCODER
; 2141 : 
; 2142 : unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2143 :                                size_t insize, const LodePNGCompressSettings* settings)
; 2144 : {
; 2145 :   /*initially, *out must be NULL and outsize 0, if you just give some random *out
; 2146 :   that's pointing to a non allocated buffer, this'll crash*/
; 2147 :   ucvector outv;
; 2148 :   size_t i;
; 2149 :   unsigned error;
; 2150 :   unsigned char* deflatedata = 0;
; 2151 :   size_t deflatesize = 0;
; 2152 : 
; 2153 :   unsigned ADLER32;
; 2154 :   /*zlib data: 1 byte CMF (CM+CINFO), 1 byte FLG, deflate data, 4 byte ADLER32 checksum of the Decompressed data*/
; 2155 :   unsigned CMF = 120; /*0b01111000: CM 8, CINFO 7. With CINFO 7, any window size up to 32768 can be used.*/
; 2156 :   unsigned FLEVEL = 0;
; 2157 :   unsigned FDICT = 0;
; 2158 :   unsigned CMFFLG = 256 * CMF + FDICT * 32 + FLEVEL * 64;
; 2159 :   unsigned FCHECK = 31 - CMFFLG % 31;
; 2160 :   CMFFLG += FCHECK;
; 2161 : 
; 2162 :   /*ucvector-controlled version of the output buffer, for dynamic array*/
; 2163 :   ucvector_init_buffer(&outv, *out, *outsize);
; 2164 : 
; 2165 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG / 256));
; 2166 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG % 256));
; 2167 : 
; 2168 :   error = deflate(&deflatedata, &deflatesize, in, insize, settings);
; 2169 : 
; 2170 :   if(!error)
; 2171 :   {
; 2172 :     ADLER32 = adler32(in, (unsigned)insize);
; 2173 :     for(i = 0; i < deflatesize; i++) ucvector_push_back(&outv, deflatedata[i]);
; 2174 :     lodepng_free(deflatedata);
; 2175 :     lodepng_add32bitInt(&outv, ADLER32);
; 2176 :   }
; 2177 : 
; 2178 :   *out = outv.data;
; 2179 :   *outsize = outv.size;
; 2180 : 
; 2181 :   return error;
; 2182 : }
; 2183 : 
; 2184 : /* compress using the default or custom zlib function */
; 2185 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2186 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2187 : {
; 2188 :   if(settings->custom_zlib)
; 2189 :   {
; 2190 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2191 :   }
; 2192 :   else
; 2193 :   {
; 2194 :     return lodepng_zlib_compress(out, outsize, in, insize, settings);
; 2195 :   }
; 2196 : }
; 2197 : 
; 2198 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2199 : 
; 2200 : #else /*no LODEPNG_COMPILE_ZLIB*/
; 2201 : 
; 2202 : #ifdef LODEPNG_COMPILE_DECODER
; 2203 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2204 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2205 : {
; 2206 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2207 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2208 : }
; 2209 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2210 : #ifdef LODEPNG_COMPILE_ENCODER
; 2211 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2212 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2213 : {
; 2214 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2215 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2216 : }
; 2217 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2218 : 
; 2219 : #endif /*LODEPNG_COMPILE_ZLIB*/
; 2220 : 
; 2221 : /* ////////////////////////////////////////////////////////////////////////// */
; 2222 : 
; 2223 : #ifdef LODEPNG_COMPILE_ENCODER
; 2224 : 
; 2225 : /*this is a good tradeoff between speed and compression ratio*/
; 2226 : #define DEFAULT_WINDOWSIZE 2048
; 2227 : 
; 2228 : void lodepng_compress_settings_init(LodePNGCompressSettings* settings)
; 2229 : {
; 2230 :   /*compress with dynamic huffman tree (not in the mathematical sense, just not the predefined one)*/
; 2231 :   settings->btype = 2;
; 2232 :   settings->use_lz77 = 1;
; 2233 :   settings->windowsize = DEFAULT_WINDOWSIZE;
; 2234 :   settings->minmatch = 3;
; 2235 :   settings->nicematch = 128;
; 2236 :   settings->lazymatching = 1;
; 2237 : 
; 2238 :   settings->custom_zlib = 0;
; 2239 :   settings->custom_deflate = 0;
; 2240 :   settings->custom_context = 0;
; 2241 : }
; 2242 : 
; 2243 : const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 3, 128, 1, 0, 0, 0};
; 2244 : 
; 2245 : 
; 2246 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2247 : 
; 2248 : #ifdef LODEPNG_COMPILE_DECODER
; 2249 : 
; 2250 : void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings)
; 2251 : {
; 2252 :   settings->ignore_adler32 = 0;
; 2253 : 
; 2254 :   settings->custom_zlib = 0;
; 2255 :   settings->custom_inflate = 0;
; 2256 :   settings->custom_context = 0;
; 2257 : }
; 2258 : 
; 2259 : const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0, 0, 0};
; 2260 : 
; 2261 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2262 : 
; 2263 : /* ////////////////////////////////////////////////////////////////////////// */
; 2264 : /* ////////////////////////////////////////////////////////////////////////// */
; 2265 : /* // End of Zlib related code. Begin of PNG related code.                 // */
; 2266 : /* ////////////////////////////////////////////////////////////////////////// */
; 2267 : /* ////////////////////////////////////////////////////////////////////////// */
; 2268 : 
; 2269 : #ifdef LODEPNG_COMPILE_PNG
; 2270 : 
; 2271 : /* ////////////////////////////////////////////////////////////////////////// */
; 2272 : /* / CRC32                                                                  / */
; 2273 : /* ////////////////////////////////////////////////////////////////////////// */
; 2274 : 
; 2275 : /* CRC polynomial: 0xedb88320 */
; 2276 : static unsigned lodepng_crc32_table[256] = {
; 2277 :            0u, 1996959894u, 3993919788u, 2567524794u,  124634137u, 1886057615u, 3915621685u, 2657392035u,
; 2278 :    249268274u, 2044508324u, 3772115230u, 2547177864u,  162941995u, 2125561021u, 3887607047u, 2428444049u,
; 2279 :    498536548u, 1789927666u, 4089016648u, 2227061214u,  450548861u, 1843258603u, 4107580753u, 2211677639u,
; 2280 :    325883990u, 1684777152u, 4251122042u, 2321926636u,  335633487u, 1661365465u, 4195302755u, 2366115317u,
; 2281 :    997073096u, 1281953886u, 3579855332u, 2724688242u, 1006888145u, 1258607687u, 3524101629u, 2768942443u,
; 2282 :    901097722u, 1119000684u, 3686517206u, 2898065728u,  853044451u, 1172266101u, 3705015759u, 2882616665u,
; 2283 :    651767980u, 1373503546u, 3369554304u, 3218104598u,  565507253u, 1454621731u, 3485111705u, 3099436303u,
; 2284 :    671266974u, 1594198024u, 3322730930u, 2970347812u,  795835527u, 1483230225u, 3244367275u, 3060149565u,
; 2285 :   1994146192u,   31158534u, 2563907772u, 4023717930u, 1907459465u,  112637215u, 2680153253u, 3904427059u,
; 2286 :   2013776290u,  251722036u, 2517215374u, 3775830040u, 2137656763u,  141376813u, 2439277719u, 3865271297u,
; 2287 :   1802195444u,  476864866u, 2238001368u, 4066508878u, 1812370925u,  453092731u, 2181625025u, 4111451223u,
; 2288 :   1706088902u,  314042704u, 2344532202u, 4240017532u, 1658658271u,  366619977u, 2362670323u, 4224994405u,
; 2289 :   1303535960u,  984961486u, 2747007092u, 3569037538u, 1256170817u, 1037604311u, 2765210733u, 3554079995u,
; 2290 :   1131014506u,  879679996u, 2909243462u, 3663771856u, 1141124467u,  855842277u, 2852801631u, 3708648649u,
; 2291 :   1342533948u,  654459306u, 3188396048u, 3373015174u, 1466479909u,  544179635u, 3110523913u, 3462522015u,
; 2292 :   1591671054u,  702138776u, 2966460450u, 3352799412u, 1504918807u,  783551873u, 3082640443u, 3233442989u,
; 2293 :   3988292384u, 2596254646u,   62317068u, 1957810842u, 3939845945u, 2647816111u,   81470997u, 1943803523u,
; 2294 :   3814918930u, 2489596804u,  225274430u, 2053790376u, 3826175755u, 2466906013u,  167816743u, 2097651377u,
; 2295 :   4027552580u, 2265490386u,  503444072u, 1762050814u, 4150417245u, 2154129355u,  426522225u, 1852507879u,
; 2296 :   4275313526u, 2312317920u,  282753626u, 1742555852u, 4189708143u, 2394877945u,  397917763u, 1622183637u,
; 2297 :   3604390888u, 2714866558u,  953729732u, 1340076626u, 3518719985u, 2797360999u, 1068828381u, 1219638859u,
; 2298 :   3624741850u, 2936675148u,  906185462u, 1090812512u, 3747672003u, 2825379669u,  829329135u, 1181335161u,
; 2299 :   3412177804u, 3160834842u,  628085408u, 1382605366u, 3423369109u, 3138078467u,  570562233u, 1426400815u,
; 2300 :   3317316542u, 2998733608u,  733239954u, 1555261956u, 3268935591u, 3050360625u,  752459403u, 1541320221u,
; 2301 :   2607071920u, 3965973030u, 1969922972u,   40735498u, 2617837225u, 3943577151u, 1913087877u,   83908371u,
; 2302 :   2512341634u, 3803740692u, 2075208622u,  213261112u, 2463272603u, 3855990285u, 2094854071u,  198958881u,
; 2303 :   2262029012u, 4057260610u, 1759359992u,  534414190u, 2176718541u, 4139329115u, 1873836001u,  414664567u,
; 2304 :   2282248934u, 4279200368u, 1711684554u,  285281116u, 2405801727u, 4167216745u, 1634467795u,  376229701u,
; 2305 :   2685067896u, 3608007406u, 1308918612u,  956543938u, 2808555105u, 3495958263u, 1231636301u, 1047427035u,
; 2306 :   2932959818u, 3654703836u, 1088359270u,  936918000u, 2847714899u, 3736837829u, 1202900863u,  817233897u,
; 2307 :   3183342108u, 3401237130u, 1404277552u,  615818150u, 3134207493u, 3453421203u, 1423857449u,  601450431u,
; 2308 :   3009837614u, 3294710456u, 1567103746u,  711928724u, 3020668471u, 3272380065u, 1510334235u,  755167117u
; 2309 : };
; 2310 : 
; 2311 : /*Return the CRC of the bytes buf[0..len-1].*/
; 2312 : unsigned lodepng_crc32(const unsigned char* buf, size_t len)
; 2313 : {
; 2314 :   unsigned c = 0xffffffffL;
; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)
; 2318 :   {
; 2319 :     c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
; 2320 :   }
; 2321 :   return c ^ 0xffffffffL;
; 2322 : }
; 2323 : 
; 2324 : /* ////////////////////////////////////////////////////////////////////////// */
; 2325 : /* / Reading and writing single bits and bytes from/to stream for LodePNG   / */
; 2326 : /* ////////////////////////////////////////////////////////////////////////// */
; 2327 : 
; 2328 : static unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream)
; 2329 : {
; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);
; 2331 :   (*bitpointer)++;
; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)
; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
; 2354 :   }
; 2355 :   (*bitpointer)++;
; 2356 : }
; 2357 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2358 : 
; 2359 : static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2360 : {
; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));
; 2363 :   else         bitstream[(*bitpointer) >> 3] |=  (1 << (7 - ((*bitpointer) & 0x7)));
; 2364 :   (*bitpointer)++;
; 2365 : }
; 2366 : 
; 2367 : /* ////////////////////////////////////////////////////////////////////////// */
; 2368 : /* / PNG chunks                                                             / */
; 2369 : /* ////////////////////////////////////////////////////////////////////////// */
; 2370 : 
; 2371 : unsigned lodepng_chunk_length(const unsigned char* chunk)
; 2372 : {
; 2373 :   return lodepng_read32bitInt(&chunk[0]);
; 2374 : }
; 2375 : 
; 2376 : void lodepng_chunk_type(char type[5], const unsigned char* chunk)
; 2377 : {
; 2378 :   unsigned i;
; 2379 :   for(i = 0; i < 4; i++) type[i] = chunk[4 + i];
; 2380 :   type[4] = 0; /*null termination char*/
; 2381 : }
; 2382 : 
; 2383 : unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type)
; 2384 : {
; 2385 :   if(strlen(type) != 4) return 0;
; 2386 :   return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);
; 2387 : }
; 2388 : 
; 2389 : unsigned char lodepng_chunk_ancillary(const unsigned char* chunk)
; 2390 : {
; 2391 :   return((chunk[4] & 32) != 0);
; 2392 : }
; 2393 : 
; 2394 : unsigned char lodepng_chunk_private(const unsigned char* chunk)
; 2395 : {
; 2396 :   return((chunk[6] & 32) != 0);
; 2397 : }
; 2398 : 
; 2399 : unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk)
; 2400 : {
; 2401 :   return((chunk[7] & 32) != 0);
; 2402 : }
; 2403 : 
; 2404 : unsigned char* lodepng_chunk_data(unsigned char* chunk)
; 2405 : {
; 2406 :   return &chunk[8];
; 2407 : }
; 2408 : 
; 2409 : const unsigned char* lodepng_chunk_data_const(const unsigned char* chunk)
; 2410 : {
; 2411 :   return &chunk[8];
; 2412 : }
; 2413 : 
; 2414 : unsigned lodepng_chunk_check_crc(const unsigned char* chunk)
; 2415 : {
; 2416 :   unsigned length = lodepng_chunk_length(chunk);
; 2417 :   unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);
; 2418 :   /*the CRC is taken of the data and the 4 chunk type letters, not the length*/
; 2419 :   unsigned checksum = lodepng_crc32(&chunk[4], length + 4);
; 2420 :   if(CRC != checksum) return 1;
; 2421 :   else return 0;
; 2422 : }
; 2423 : 
; 2424 : void lodepng_chunk_generate_crc(unsigned char* chunk)
; 2425 : {
; 2426 :   unsigned length = lodepng_chunk_length(chunk);
; 2427 :   unsigned CRC = lodepng_crc32(&chunk[4], length + 4);
; 2428 :   lodepng_set32bitInt(chunk + 8 + length, CRC);
; 2429 : }
; 2430 : 
; 2431 : unsigned char* lodepng_chunk_next(unsigned char* chunk)
; 2432 : {
; 2433 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2434 :   return &chunk[total_chunk_length];
; 2435 : }
; 2436 : 
; 2437 : const unsigned char* lodepng_chunk_next_const(const unsigned char* chunk)
; 2438 : {
; 2439 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2440 :   return &chunk[total_chunk_length];
; 2441 : }
; 2442 : 
; 2443 : unsigned lodepng_chunk_append(unsigned char** out, size_t* outlength, const unsigned char* chunk)
; 2444 : {
; 2445 :   unsigned i;
; 2446 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2447 :   unsigned char *chunk_start, *new_buffer;
; 2448 :   size_t new_length = (*outlength) + total_chunk_length;
; 2449 :   if(new_length < total_chunk_length || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2450 : 
; 2451 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2452 :   if(!new_buffer) return 83; /*alloc fail*/
; 2453 :   (*out) = new_buffer;
; 2454 :   (*outlength) = new_length;
; 2455 :   chunk_start = &(*out)[new_length - total_chunk_length];
; 2456 : 
; 2457 :   for(i = 0; i < total_chunk_length; i++) chunk_start[i] = chunk[i];
; 2458 : 
; 2459 :   return 0;
; 2460 : }
; 2461 : 
; 2462 : unsigned lodepng_chunk_create(unsigned char** out, size_t* outlength, unsigned length,
; 2463 :                               const char* type, const unsigned char* data)
; 2464 : {
; 2465 :   unsigned i;
; 2466 :   unsigned char *chunk, *new_buffer;
; 2467 :   size_t new_length = (*outlength) + length + 12;
; 2468 :   if(new_length < length + 12 || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2469 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2470 :   if(!new_buffer) return 83; /*alloc fail*/
; 2471 :   (*out) = new_buffer;
; 2472 :   (*outlength) = new_length;
; 2473 :   chunk = &(*out)[(*outlength) - length - 12];
; 2474 : 
; 2475 :   /*1: length*/
; 2476 :   lodepng_set32bitInt(chunk, (unsigned)length);
; 2477 : 
; 2478 :   /*2: chunk name (4 letters)*/
; 2479 :   chunk[4] = type[0];
; 2480 :   chunk[5] = type[1];
; 2481 :   chunk[6] = type[2];
; 2482 :   chunk[7] = type[3];
; 2483 : 
; 2484 :   /*3: the data*/
; 2485 :   for(i = 0; i < length; i++) chunk[8 + i] = data[i];
; 2486 : 
; 2487 :   /*4: CRC (of the chunkname characters and the data)*/
; 2488 :   lodepng_chunk_generate_crc(chunk);
; 2489 : 
; 2490 :   return 0;
; 2491 : }
; 2492 : 
; 2493 : /* ////////////////////////////////////////////////////////////////////////// */
; 2494 : /* / Color types and such                                                   / */
; 2495 : /* ////////////////////////////////////////////////////////////////////////// */
; 2496 : 
; 2497 : /*return type is a LodePNG error code*/
; 2498 : static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) /*bd = bitdepth*/
; 2499 : {
; 2500 :   switch(colortype)
; 2501 :   {
; 2502 :     case 0: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)) return 37; break; /*grey*/
; 2503 :     case 2: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGB*/
; 2504 :     case 3: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )) return 37; break; /*palette*/
; 2505 :     case 4: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*grey + alpha*/
; 2506 :     case 6: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGBA*/
; 2507 :     default: return 31;
; 2508 :   }
; 2509 :   return 0; /*allowed color type / bits combination*/
; 2510 : }
; 2511 : 
; 2512 : static unsigned getNumColorChannels(LodePNGColorType colortype)
; 2513 : {
; 2514 :   switch(colortype)
; 2515 :   {
; 2516 :     case 0: return 1; /*grey*/
; 2517 :     case 2: return 3; /*RGB*/
; 2518 :     case 3: return 1; /*palette*/
; 2519 :     case 4: return 2; /*grey + alpha*/
; 2520 :     case 6: return 4; /*RGBA*/
; 2521 :   }
; 2522 :   return 0; /*unexisting color type*/
; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;
; 2529 : }
; 2530 : 
; 2531 : /* ////////////////////////////////////////////////////////////////////////// */
; 2532 : 
; 2533 : void lodepng_color_mode_init(LodePNGColorMode* info)
; 2534 : {
; 2535 :   info->key_defined = 0;
; 2536 :   info->key_r = info->key_g = info->key_b = 0;
; 2537 :   info->colortype = LCT_RGBA;
; 2538 :   info->bitdepth = 8;
; 2539 :   info->palette = 0;
; 2540 :   info->palettesize = 0;
; 2541 : }
; 2542 : 
; 2543 : void lodepng_color_mode_cleanup(LodePNGColorMode* info)
; 2544 : {
; 2545 :   lodepng_palette_clear(info);
; 2546 : }
; 2547 : 
; 2548 : unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
; 2549 : {
; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;
; 2553 :   if(source->palette)
; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);
; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];
; 2558 :   }
; 2559 :   return 0;
; 2560 : }
; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);

  00079	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR _state$[ebp+112]

; 4797 :   state.info_raw.colortype = colortype;
; 4798 :   state.info_raw.bitdepth = bitdepth;
; 4799 :   error = lodepng_decode(out, w, h, &state, in, insize);

  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	8b f0		 mov	 esi, eax

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
; 945  :     (*bp)++;
; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);
; 965  :   generateFixedDistanceTree(tree_d);
; 966  : }
; 967  : 
; 968  : /*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
; 969  : static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
; 970  :                                       const unsigned char* in, size_t* bp, size_t inlength)
; 971  : {
; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;
; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/
; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;
; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;
; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;
; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)
; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
; 1009 :     if(error) break;
; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;
; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;
; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;
; 1020 :     while(i < HLIT + HDIST)
; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
; 1023 :       if(code <= 15) /*a length code*/
; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;
; 1026 :         else bitlen_d[i - HLIT] = code;
; 1027 :         i++;
; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/
; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);
; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];
; 1040 :         else value = bitlen_d[i - HLIT - 1];
; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)
; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
; 1045 :           if(i < HLIT) bitlen_ll[i] = value;
; 1046 :           else bitlen_d[i - HLIT] = value;
; 1047 :           i++;
; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/
; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);
; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)
; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1063 :           else bitlen_d[i - HLIT] = 0;
; 1064 :           i++;
; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/
; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);
; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)
; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1080 :           else bitlen_d[i - HLIT] = 0;
; 1081 :           i++;
; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))
; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;
; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/
; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;
; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 1102 :     if(error) break;
; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
; 1104 : 
; 1105 :     break; /*end of error-while*/
; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;
; 1114 : }
; 1115 : 
; 1116 : /*inflate a block with dynamic of fixed Huffman tree*/
; 1117 : static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
; 1118 :                                     size_t* pos, size_t inlength, unsigned btype)
; 1119 : {
; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;
; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/
; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/
; 1136 :     {
; 1137 :       if((*pos) >= out->size)
; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);
; 1143 :       (*pos)++;
; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);
; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
; 1161 :       if(code_d > 29)
; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;
; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/
; 1170 :         break;
; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);
; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);
; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)
; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)
; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];
; 1193 :         (*pos)++;
; 1194 :         backward++;
; 1195 :         if(backward >= start) backward = start - distance;
; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)
; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;
; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;
; 1215 : }
; 1216 : 
; 1217 : static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
; 1218 : {
; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;
; 1223 :   p = (*bp) / 8; /*byte position*/
; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/
; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;
; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;
; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)
; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];
; 1241 : 
; 1242 :   (*bp) = p * 8;
; 1243 : 
; 1244 :   return error;
; 1245 : }
; 1246 : 
; 1247 : static unsigned lodepng_inflatev(ucvector* out,
; 1248 :                                  const unsigned char* in, size_t insize,
; 1249 :                                  const LodePNGDecompressSettings* settings)
; 1250 : {
; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;
; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/
; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)
; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
; 1264 :     BFINAL = readBitFromStream(&bp, in);
; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);
; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
; 1271 : 
; 1272 :     if(error) return error;
; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/
; 1277 : 
; 1278 :   return error;
; 1279 : }
; 1280 : 
; 1281 : unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
; 1282 :                          const unsigned char* in, size_t insize,
; 1283 :                          const LodePNGDecompressSettings* settings)
; 1284 : {
; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);
; 1289 :   *out = v.data;
; 1290 :   *outsize = v.size;
; 1291 :   return error;
; 1292 : }
; 1293 : 
; 1294 : static unsigned inflate(unsigned char** out, size_t* outsize,
; 1295 :                         const unsigned char* in, size_t insize,
; 1296 :                         const LodePNGDecompressSettings* settings)
; 1297 : {
; 1298 :   if(settings->custom_inflate)
; 1299 :   {
; 1300 :     return settings->custom_inflate(out, outsize, in, insize, settings);
; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }
; 1307 : 
; 1308 : #endif /*LODEPNG_COMPILE_DECODER*/
; 1309 : 
; 1310 : #ifdef LODEPNG_COMPILE_ENCODER
; 1311 : 
; 1312 : /* ////////////////////////////////////////////////////////////////////////// */
; 1313 : /* / Deflator (Compressor)                                                  / */
; 1314 : /* ////////////////////////////////////////////////////////////////////////// */
; 1315 : 
; 1316 : static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;
; 1317 : 
; 1318 : /*bitlen is the size in bits of the code*/
; 1319 : static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)
; 1320 : {
; 1321 :   addBitsToStreamReversed(bp, compressed, code, bitlen);
; 1322 : }
; 1323 : 
; 1324 : /*search the index in the array, that has the largest value smaller than or equal to the given value,
; 1325 : given array must be sorted (if no value is smaller, it returns the size of the given array)*/
; 1326 : static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)
; 1327 : {
; 1328 :   /*linear search implementation*/
; 1329 :   /*for(size_t i = 1; i < array_size; i++) if(array[i] > value) return i - 1;
; 1330 :   return array_size - 1;*/
; 1331 : 
; 1332 :   /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
; 1333 :   size_t left  = 1;
; 1334 :   size_t right = array_size - 1;
; 1335 :   while(left <= right)
; 1336 :   {
; 1337 :     size_t mid = (left + right) / 2;
; 1338 :     if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
; 1339 :     else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
; 1340 :     else return mid - 1;
; 1341 :   }
; 1342 :   return array_size - 1;
; 1343 : }
; 1344 : 
; 1345 : static void addLengthDistance(uivector* values, size_t length, size_t distance)
; 1346 : {
; 1347 :   /*values in encoded vector are those used by deflate:
; 1348 :   0-255: literal bytes
; 1349 :   256: end
; 1350 :   257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
; 1351 :   286-287: invalid*/
; 1352 : 
; 1353 :   unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
; 1354 :   unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
; 1355 :   unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
; 1356 :   unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);
; 1357 : 
; 1358 :   uivector_push_back(values, length_code + FIRST_LENGTH_CODE_INDEX);
; 1359 :   uivector_push_back(values, extra_length);
; 1360 :   uivector_push_back(values, dist_code);
; 1361 :   uivector_push_back(values, extra_distance);
; 1362 : }
; 1363 : 
; 1364 : static const unsigned HASH_NUM_VALUES = 65536;
; 1365 : static const unsigned HASH_NUM_CHARACTERS = 3;
; 1366 : static const unsigned HASH_SHIFT = 2;
; 1367 : /*
; 1368 : The HASH_NUM_CHARACTERS value is used to make encoding faster by using longer
; 1369 : sequences to generate a hash value from the stream bytes. Setting it to 3
; 1370 : gives exactly the same compression as the brute force method, since deflate's
; 1371 : run length encoding starts with lengths of 3. Setting it to higher values,
; 1372 : like 6, can make the encoding faster (not always though!), but will cause the
; 1373 : encoding to miss any length between 3 and this value, so that the compression
; 1374 : may be worse (but this can vary too depending on the image, sometimes it is
; 1375 : even a bit better instead).
; 1376 : The HASH_NUM_VALUES is the amount of unique possible hash values that
; 1377 : combinations of bytes can give, the higher it is the more memory is needed, but
; 1378 : if it's too low the advantage of hashing is gone.
; 1379 : */
; 1380 : 
; 1381 : typedef struct Hash
; 1382 : {
; 1383 :   int* head; /*hash value to head circular pos*/
; 1384 :   int* val; /*circular pos to hash value*/
; 1385 :   /*circular pos to prev circular pos*/
; 1386 :   unsigned short* chain;
; 1387 :   unsigned short* zeros;
; 1388 : } Hash;
; 1389 : 
; 1390 : static unsigned hash_init(Hash* hash, unsigned windowsize)
; 1391 : {
; 1392 :   unsigned i;
; 1393 :   hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
; 1394 :   hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
; 1395 :   hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1396 :   hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1397 : 
; 1398 :   if(!hash->head || !hash->val || !hash->chain || !hash->zeros) return 83; /*alloc fail*/
; 1399 : 
; 1400 :   /*initialize hash table*/
; 1401 :   for(i = 0; i < HASH_NUM_VALUES; i++) hash->head[i] = -1;
; 1402 :   for(i = 0; i < windowsize; i++) hash->val[i] = -1;
; 1403 :   for(i = 0; i < windowsize; i++) hash->chain[i] = i; /*same value as index indicates uninitialized*/
; 1404 : 
; 1405 :   return 0;
; 1406 : }
; 1407 : 
; 1408 : static void hash_cleanup(Hash* hash)
; 1409 : {
; 1410 :   lodepng_free(hash->head);
; 1411 :   lodepng_free(hash->val);
; 1412 :   lodepng_free(hash->chain);
; 1413 :   lodepng_free(hash->zeros);
; 1414 : }
; 1415 : 
; 1416 : static unsigned getHash(const unsigned char* data, size_t size, size_t pos)
; 1417 : {
; 1418 :   unsigned result = 0;
; 1419 :   size_t amount, i;
; 1420 :   if(pos >= size) return 0;
; 1421 :   amount = HASH_NUM_CHARACTERS;
; 1422 :   if(pos + amount >= size) amount = size - pos;
; 1423 :   for(i = 0; i < amount; i++) result ^= (data[pos + i] << (i * HASH_SHIFT));
; 1424 :   return result % HASH_NUM_VALUES;
; 1425 : }
; 1426 : 
; 1427 : static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)
; 1428 : {
; 1429 :   const unsigned char* start = data + pos;
; 1430 :   const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
; 1431 :   if(end > data + size) end = data + size;
; 1432 :   data = start;
; 1433 :   while (data != end && *data == 0) data++;
; 1434 :   /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
; 1435 :   return (unsigned)(data - start);
; 1436 : }
; 1437 : 
; 1438 : static void updateHashChain(Hash* hash, size_t pos, int hashval, unsigned windowsize)
; 1439 : {
; 1440 :   unsigned wpos = pos % windowsize;
; 1441 :   hash->val[wpos] = hashval;
; 1442 :   if(hash->head[hashval] != -1) hash->chain[wpos] = hash->head[hashval];
; 1443 :   hash->head[hashval] = wpos;
; 1444 : }
; 1445 : 
; 1446 : /*
; 1447 : LZ77-encode the data. Return value is error code. The input are raw bytes, the output
; 1448 : is in the form of unsigned integers with codes representing for example literal bytes, or
; 1449 : length/distance pairs.
; 1450 : It uses a hash table technique to let it encode faster. When doing LZ77 encoding, a
; 1451 : sliding window (of windowsize) is used, and all past bytes in that window can be used as
; 1452 : the "dictionary". A brute force search through all possible distances would be slow, and
; 1453 : this hash technique is one out of several ways to speed this up.
; 1454 : */
; 1455 : static unsigned encodeLZ77(uivector* out, Hash* hash,
; 1456 :                            const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
; 1457 :                            unsigned minmatch, unsigned nicematch, unsigned lazymatching)
; 1458 : {
; 1459 :   unsigned short numzeros = 0;
; 1460 :   int usezeros = windowsize >= 8192; /*for small window size, the 'max chain length' optimization does a better job*/
; 1461 :   unsigned pos, i, error = 0;
; 1462 :   /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
; 1463 :   unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8;
; 1464 :   unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;
; 1465 : 
; 1466 :   if(!error)
; 1467 :   {
; 1468 :     unsigned offset; /*the offset represents the distance in LZ77 terminology*/
; 1469 :     unsigned length;
; 1470 :     unsigned lazy = 0;
; 1471 :     unsigned lazylength = 0, lazyoffset = 0;
; 1472 :     unsigned hashval;
; 1473 :     unsigned current_offset, current_length;
; 1474 :     const unsigned char *lastptr, *foreptr, *backptr;
; 1475 :     unsigned short hashpos, prevpos;
; 1476 : 
; 1477 :     for(pos = inpos; pos < insize; pos++)
; 1478 :     {
; 1479 :       size_t wpos = pos % windowsize; /*position for in 'circular' hash buffers*/
; 1480 : 
; 1481 :       hashval = getHash(in, insize, pos);
; 1482 :       updateHashChain(hash, pos, hashval, windowsize);
; 1483 : 
; 1484 :       if(usezeros && hashval == 0)
; 1485 :       {
; 1486 :         numzeros = countZeros(in, insize, pos);
; 1487 :         hash->zeros[wpos] = numzeros;
; 1488 :       }
; 1489 : 
; 1490 :       /*the length and offset found for the current position*/
; 1491 :       length = 0;
; 1492 :       offset = 0;
; 1493 : 
; 1494 :       prevpos = hash->head[hashval];
; 1495 :       hashpos = hash->chain[prevpos];
; 1496 : 
; 1497 :       lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];
; 1498 : 
; 1499 :       /*search for the longest string*/
; 1500 :       if(hash->val[wpos] == (int)hashval)
; 1501 :       {
; 1502 :         unsigned chainlength = 0;
; 1503 :         for(;;)
; 1504 :         {
; 1505 :           /*stop when went completely around the circular buffer*/
; 1506 :           if(prevpos < wpos && hashpos > prevpos && hashpos <= wpos) break;
; 1507 :           if(prevpos > wpos && (hashpos <= wpos || hashpos > prevpos)) break;
; 1508 :           if(chainlength++ >= maxchainlength) break;
; 1509 : 
; 1510 :           current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;
; 1511 :           if(current_offset > 0)
; 1512 :           {
; 1513 :             /*test the next characters*/
; 1514 :             foreptr = &in[pos];
; 1515 :             backptr = &in[pos - current_offset];
; 1516 : 
; 1517 :             /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
; 1518 :             if(usezeros && hashval == 0 && hash->val[hashpos] == 0 /*hashval[hashpos] may be out of date*/)
; 1519 :             {
; 1520 :               unsigned short skip = hash->zeros[hashpos];
; 1521 :               if(skip > numzeros) skip = numzeros;
; 1522 :               backptr += skip;
; 1523 :               foreptr += skip;
; 1524 :             }
; 1525 : 
; 1526 :             /* multiple checks at once per array bounds check */
; 1527 :             while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
; 1528 :             {
; 1529 :               ++backptr;
; 1530 :               ++foreptr;
; 1531 :             }
; 1532 :             current_length = (unsigned)(foreptr - &in[pos]);
; 1533 : 
; 1534 :             if(current_length > length)
; 1535 :             {
; 1536 :               length = current_length; /*the longest length*/
; 1537 :               offset = current_offset; /*the offset that is related to this longest length*/
; 1538 :               /*jump out once a length of max length is found (speed gain)*/
; 1539 :               if(current_length >= nicematch || current_length == MAX_SUPPORTED_DEFLATE_LENGTH) break;
; 1540 :             }
; 1541 :           }
; 1542 : 
; 1543 :           if(hashpos == hash->chain[hashpos]) break;
; 1544 : 
; 1545 :           prevpos = hashpos;
; 1546 :           hashpos = hash->chain[hashpos];
; 1547 :         }
; 1548 :       }
; 1549 : 
; 1550 :       if(lazymatching)
; 1551 :       {
; 1552 :         if(!lazy && length >= 3 && length <= maxlazymatch && length < MAX_SUPPORTED_DEFLATE_LENGTH)
; 1553 :         {
; 1554 :           lazy = 1;
; 1555 :           lazylength = length;
; 1556 :           lazyoffset = offset;
; 1557 :           continue; /*try the next byte*/
; 1558 :         }
; 1559 :         if(lazy)
; 1560 :         {
; 1561 :           lazy = 0;
; 1562 :           if(pos == 0) ERROR_BREAK(81);
; 1563 :           if(length > lazylength + 1)
; 1564 :           {
; 1565 :             /*push the previous character as literal*/
; 1566 :             if(!uivector_push_back(out, in[pos - 1])) ERROR_BREAK(83 /*alloc fail*/);
; 1567 :           }
; 1568 :           else
; 1569 :           {
; 1570 :             length = lazylength;
; 1571 :             offset = lazyoffset;
; 1572 :             hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
; 1573 :             pos--;
; 1574 :           }
; 1575 :         }
; 1576 :       }
; 1577 :       if(length >= 3 && offset > windowsize) ERROR_BREAK(86 /*too big (or overflown negative) offset*/);
; 1578 : 
; 1579 :       /**encode it as length/distance pair or literal value**/
; 1580 :       if(length < 3) /*only lengths of 3 or higher are supported as length/distance pair*/
; 1581 :       {
; 1582 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1583 :       }
; 1584 :       else if(length < minmatch || (length == 3 && offset > 4096))
; 1585 :       {
; 1586 :         /*compensate for the fact that longer offsets have more extra bits, a
; 1587 :         length of only 3 may be not worth it then*/
; 1588 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1589 :       }
; 1590 :       else
; 1591 :       {
; 1592 :         addLengthDistance(out, length, offset);
; 1593 :         for(i = 1; i < length; i++)
; 1594 :         {
; 1595 :           pos++;
; 1596 :           hashval = getHash(in, insize, pos);
; 1597 :           updateHashChain(hash, pos, hashval, windowsize);
; 1598 :           if(usezeros && hashval == 0)
; 1599 :           {
; 1600 :             hash->zeros[pos % windowsize] = countZeros(in, insize, pos);
; 1601 :           }
; 1602 :         }
; 1603 :       }
; 1604 : 
; 1605 :     } /*end of the loop through each character of input*/
; 1606 :   } /*end of "if(!error)"*/
; 1607 : 
; 1608 :   return error;
; 1609 : }
; 1610 : 
; 1611 : /* /////////////////////////////////////////////////////////////////////////// */
; 1612 : 
; 1613 : static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)
; 1614 : {
; 1615 :   /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
; 1616 :   2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/
; 1617 : 
; 1618 :   size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
; 1619 :   unsigned datapos = 0;
; 1620 :   for(i = 0; i < numdeflateblocks; i++)
; 1621 :   {
; 1622 :     unsigned BFINAL, BTYPE, LEN, NLEN;
; 1623 :     unsigned char firstbyte;
; 1624 : 
; 1625 :     BFINAL = (i == numdeflateblocks - 1);
; 1626 :     BTYPE = 0;
; 1627 : 
; 1628 :     firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1) << 1) + ((BTYPE & 2) << 1));
; 1629 :     ucvector_push_back(out, firstbyte);
; 1630 : 
; 1631 :     LEN = 65535;
; 1632 :     if(datasize - datapos < 65535) LEN = (unsigned)datasize - datapos;
; 1633 :     NLEN = 65535 - LEN;
; 1634 : 
; 1635 :     ucvector_push_back(out, (unsigned char)(LEN % 256));
; 1636 :     ucvector_push_back(out, (unsigned char)(LEN / 256));
; 1637 :     ucvector_push_back(out, (unsigned char)(NLEN % 256));
; 1638 :     ucvector_push_back(out, (unsigned char)(NLEN / 256));
; 1639 : 
; 1640 :     /*Decompressed data*/
; 1641 :     for(j = 0; j < 65535 && datapos < datasize; j++)
; 1642 :     {
; 1643 :       ucvector_push_back(out, data[datapos++]);
; 1644 :     }
; 1645 :   }
; 1646 : 
; 1647 :   return 0;
; 1648 : }
; 1649 : 
; 1650 : /*
; 1651 : write the lz77-encoded data, which has lit, len and dist codes, to compressed stream using huffman trees.
; 1652 : tree_ll: the tree for lit and len codes.
; 1653 : tree_d: the tree for distance codes.
; 1654 : */
; 1655 : static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
; 1656 :                           const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
; 1657 : {
; 1658 :   size_t i = 0;
; 1659 :   for(i = 0; i < lz77_encoded->size; i++)
; 1660 :   {
; 1661 :     unsigned val = lz77_encoded->data[i];
; 1662 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_ll, val), HuffmanTree_getLength(tree_ll, val));
; 1663 :     if(val > 256) /*for a length code, 3 more things have to be added*/
; 1664 :     {
; 1665 :       unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
; 1666 :       unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
; 1667 :       unsigned length_extra_bits = lz77_encoded->data[++i];
; 1668 : 
; 1669 :       unsigned distance_code = lz77_encoded->data[++i];
; 1670 : 
; 1671 :       unsigned distance_index = distance_code;
; 1672 :       unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
; 1673 :       unsigned distance_extra_bits = lz77_encoded->data[++i];
; 1674 : 
; 1675 :       addBitsToStream(bp, out, length_extra_bits, n_length_extra_bits);
; 1676 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
; 1677 :                        HuffmanTree_getLength(tree_d, distance_code));
; 1678 :       addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
; 1679 :     }
; 1680 :   }
; 1681 : }
; 1682 : 
; 1683 : /*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
; 1684 : static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,
; 1685 :                                const unsigned char* data, size_t datapos, size_t dataend,
; 1686 :                                const LodePNGCompressSettings* settings, int final)
; 1687 : {
; 1688 :   unsigned error = 0;
; 1689 : 
; 1690 :   /*
; 1691 :   A block is compressed as follows: The PNG data is lz77 encoded, resulting in
; 1692 :   literal bytes and length/distance pairs. This is then huffman compressed with
; 1693 :   two huffman trees. One huffman tree is used for the lit and len values ("ll"),
; 1694 :   another huffman tree is used for the dist values ("d"). These two trees are
; 1695 :   stored using their code lengths, and to compress even more these code lengths
; 1696 :   are also run-length encoded and huffman compressed. This gives a huffman tree
; 1697 :   of code lengths "cl". The code lenghts used to describe this third tree are
; 1698 :   the code length code lengths ("clcl").
; 1699 :   */
; 1700 : 
; 1701 :   /*The lz77 encoded data, represented with integers since there will also be length and distance codes in it*/
; 1702 :   uivector lz77_encoded;
; 1703 :   HuffmanTree tree_ll; /*tree for lit,len values*/
; 1704 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1705 :   HuffmanTree tree_cl; /*tree for encoding the code lengths representing tree_ll and tree_d*/
; 1706 :   uivector frequencies_ll; /*frequency of lit,len codes*/
; 1707 :   uivector frequencies_d; /*frequency of dist codes*/
; 1708 :   uivector frequencies_cl; /*frequency of code length codes*/
; 1709 :   uivector bitlen_lld; /*lit,len,dist code lenghts (int bits), literally (without repeat codes).*/
; 1710 :   uivector bitlen_lld_e; /*bitlen_lld encoded with repeat codes (this is a rudemtary run length compression)*/
; 1711 :   /*bitlen_cl is the code length code lengths ("clcl"). The bit lengths of codes to represent tree_cl
; 1712 :   (these are written as is in the file, it would be crazy to compress these using yet another huffman
; 1713 :   tree that needs to be represented by yet another set of code lengths)*/
; 1714 :   uivector bitlen_cl;
; 1715 :   size_t datasize = dataend - datapos;
; 1716 : 
; 1717 :   /*
; 1718 :   Due to the huffman compression of huffman tree representations ("two levels"), there are some anologies:
; 1719 :   bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
; 1720 :   bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
; 1721 :   bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
; 1722 :   */
; 1723 : 
; 1724 :   unsigned BFINAL = final;
; 1725 :   size_t numcodes_ll, numcodes_d, i;
; 1726 :   unsigned HLIT, HDIST, HCLEN;
; 1727 : 
; 1728 :   uivector_init(&lz77_encoded);
; 1729 :   HuffmanTree_init(&tree_ll);
; 1730 :   HuffmanTree_init(&tree_d);
; 1731 :   HuffmanTree_init(&tree_cl);
; 1732 :   uivector_init(&frequencies_ll);
; 1733 :   uivector_init(&frequencies_d);
; 1734 :   uivector_init(&frequencies_cl);
; 1735 :   uivector_init(&bitlen_lld);
; 1736 :   uivector_init(&bitlen_lld_e);
; 1737 :   uivector_init(&bitlen_cl);
; 1738 : 
; 1739 :   /*This while loop never loops due to a break at the end, it is here to
; 1740 :   allow breaking out of it to the cleanup phase on error conditions.*/
; 1741 :   while(!error)
; 1742 :   {
; 1743 :     if(settings->use_lz77)
; 1744 :     {
; 1745 :       error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1746 :                          settings->minmatch, settings->nicematch, settings->lazymatching);
; 1747 :       if(error) break;
; 1748 :     }
; 1749 :     else
; 1750 :     {
; 1751 :       if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83 /*alloc fail*/);
; 1752 :       for(i = datapos; i < dataend; i++) lz77_encoded.data[i] = data[i]; /*no LZ77, but still will be Huffman compressed*/
; 1753 :     }
; 1754 : 
; 1755 :     if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1756 :     if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1757 : 
; 1758 :     /*Count the frequencies of lit, len and dist codes*/
; 1759 :     for(i = 0; i < lz77_encoded.size; i++)
; 1760 :     {
; 1761 :       unsigned symbol = lz77_encoded.data[i];
; 1762 :       frequencies_ll.data[symbol]++;
; 1763 :       if(symbol > 256)
; 1764 :       {
; 1765 :         unsigned dist = lz77_encoded.data[i + 2];
; 1766 :         frequencies_d.data[dist]++;
; 1767 :         i += 3;
; 1768 :       }
; 1769 :     }
; 1770 :     frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/
; 1771 : 
; 1772 :     /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
; 1773 :     error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
; 1774 :     if(error) break;
; 1775 :     /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
; 1776 :     error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
; 1777 :     if(error) break;
; 1778 : 
; 1779 :     numcodes_ll = tree_ll.numcodes; if(numcodes_ll > 286) numcodes_ll = 286;
; 1780 :     numcodes_d = tree_d.numcodes; if(numcodes_d > 30) numcodes_d = 30;
; 1781 :     /*store the code lengths of both generated trees in bitlen_lld*/
; 1782 :     for(i = 0; i < numcodes_ll; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
; 1783 :     for(i = 0; i < numcodes_d; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));
; 1784 : 
; 1785 :     /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
; 1786 :     17 (3-10 zeroes), 18 (11-138 zeroes)*/
; 1787 :     for(i = 0; i < (unsigned)bitlen_lld.size; i++)
; 1788 :     {
; 1789 :       unsigned j = 0; /*amount of repititions*/
; 1790 :       while(i + j + 1 < (unsigned)bitlen_lld.size && bitlen_lld.data[i + j + 1] == bitlen_lld.data[i]) j++;
; 1791 : 
; 1792 :       if(bitlen_lld.data[i] == 0 && j >= 2) /*repeat code for zeroes*/
; 1793 :       {
; 1794 :         j++; /*include the first zero*/
; 1795 :         if(j <= 10) /*repeat code 17 supports max 10 zeroes*/
; 1796 :         {
; 1797 :           uivector_push_back(&bitlen_lld_e, 17);
; 1798 :           uivector_push_back(&bitlen_lld_e, j - 3);
; 1799 :         }
; 1800 :         else /*repeat code 18 supports max 138 zeroes*/
; 1801 :         {
; 1802 :           if(j > 138) j = 138;
; 1803 :           uivector_push_back(&bitlen_lld_e, 18);
; 1804 :           uivector_push_back(&bitlen_lld_e, j - 11);
; 1805 :         }
; 1806 :         i += (j - 1);
; 1807 :       }
; 1808 :       else if(j >= 3) /*repeat code for value other than zero*/
; 1809 :       {
; 1810 :         size_t k;
; 1811 :         unsigned num = j / 6, rest = j % 6;
; 1812 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1813 :         for(k = 0; k < num; k++)
; 1814 :         {
; 1815 :           uivector_push_back(&bitlen_lld_e, 16);
; 1816 :           uivector_push_back(&bitlen_lld_e, 6 - 3);
; 1817 :         }
; 1818 :         if(rest >= 3)
; 1819 :         {
; 1820 :           uivector_push_back(&bitlen_lld_e, 16);
; 1821 :           uivector_push_back(&bitlen_lld_e, rest - 3);
; 1822 :         }
; 1823 :         else j -= rest;
; 1824 :         i += j;
; 1825 :       }
; 1826 :       else /*too short to benefit from repeat code*/
; 1827 :       {
; 1828 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1829 :       }
; 1830 :     }
; 1831 : 
; 1832 :     /*generate tree_cl, the huffmantree of huffmantrees*/
; 1833 : 
; 1834 :     if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1835 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1836 :     {
; 1837 :       frequencies_cl.data[bitlen_lld_e.data[i]]++;
; 1838 :       /*after a repeat code come the bits that specify the number of repetitions,
; 1839 :       those don't need to be in the frequencies_cl calculation*/
; 1840 :       if(bitlen_lld_e.data[i] >= 16) i++;
; 1841 :     }
; 1842 : 
; 1843 :     error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
; 1844 :                                             frequencies_cl.size, frequencies_cl.size, 7);
; 1845 :     if(error) break;
; 1846 : 
; 1847 :     if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
; 1848 :     for(i = 0; i < tree_cl.numcodes; i++)
; 1849 :     {
; 1850 :       /*lenghts of code length tree is in the order as specified by deflate*/
; 1851 :       bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
; 1852 :     }
; 1853 :     while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
; 1854 :     {
; 1855 :       /*remove zeros at the end, but minimum size must be 4*/
; 1856 :       if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
; 1857 :     }
; 1858 :     if(error) break;
; 1859 : 
; 1860 :     /*
; 1861 :     Write everything into the output
; 1862 : 
; 1863 :     After the BFINAL and BTYPE, the dynamic block consists out of the following:
; 1864 :     - 5 bits HLIT, 5 bits HDIST, 4 bits HCLEN
; 1865 :     - (HCLEN+4)*3 bits code lengths of code length alphabet
; 1866 :     - HLIT + 257 code lenghts of lit/length alphabet (encoded using the code length
; 1867 :       alphabet, + possible repetition codes 16, 17, 18)
; 1868 :     - HDIST + 1 code lengths of distance alphabet (encoded using the code length
; 1869 :       alphabet, + possible repetition codes 16, 17, 18)
; 1870 :     - compressed data
; 1871 :     - 256 (end code)
; 1872 :     */
; 1873 : 
; 1874 :     /*Write block type*/
; 1875 :     addBitToStream(bp, out, BFINAL);
; 1876 :     addBitToStream(bp, out, 0); /*first bit of BTYPE "dynamic"*/
; 1877 :     addBitToStream(bp, out, 1); /*second bit of BTYPE "dynamic"*/
; 1878 : 
; 1879 :     /*write the HLIT, HDIST and HCLEN values*/
; 1880 :     HLIT = (unsigned)(numcodes_ll - 257);
; 1881 :     HDIST = (unsigned)(numcodes_d - 1);
; 1882 :     HCLEN = (unsigned)bitlen_cl.size - 4;
; 1883 :     /*trim zeroes for HCLEN. HLIT and HDIST were already trimmed at tree creation*/
; 1884 :     while(!bitlen_cl.data[HCLEN + 4 - 1] && HCLEN > 0) HCLEN--;
; 1885 :     addBitsToStream(bp, out, HLIT, 5);
; 1886 :     addBitsToStream(bp, out, HDIST, 5);
; 1887 :     addBitsToStream(bp, out, HCLEN, 4);
; 1888 : 
; 1889 :     /*write the code lenghts of the code length alphabet*/
; 1890 :     for(i = 0; i < HCLEN + 4; i++) addBitsToStream(bp, out, bitlen_cl.data[i], 3);
; 1891 : 
; 1892 :     /*write the lenghts of the lit/len AND the dist alphabet*/
; 1893 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1894 :     {
; 1895 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
; 1896 :                        HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
; 1897 :       /*extra bits of repeat codes*/
; 1898 :       if(bitlen_lld_e.data[i] == 16) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 2);
; 1899 :       else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
; 1900 :       else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
; 1901 :     }
; 1902 : 
; 1903 :     /*write the compressed data symbols*/
; 1904 :     writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1905 :     /*error: the length of the end code 256 must be larger than 0*/
; 1906 :     if(HuffmanTree_getLength(&tree_ll, 256) == 0) ERROR_BREAK(64);
; 1907 : 
; 1908 :     /*write the end code*/
; 1909 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1910 : 
; 1911 :     break; /*end of error-while*/
; 1912 :   }
; 1913 : 
; 1914 :   /*cleanup*/
; 1915 :   uivector_cleanup(&lz77_encoded);
; 1916 :   HuffmanTree_cleanup(&tree_ll);
; 1917 :   HuffmanTree_cleanup(&tree_d);
; 1918 :   HuffmanTree_cleanup(&tree_cl);
; 1919 :   uivector_cleanup(&frequencies_ll);
; 1920 :   uivector_cleanup(&frequencies_d);
; 1921 :   uivector_cleanup(&frequencies_cl);
; 1922 :   uivector_cleanup(&bitlen_lld_e);
; 1923 :   uivector_cleanup(&bitlen_lld);
; 1924 :   uivector_cleanup(&bitlen_cl);
; 1925 : 
; 1926 :   return error;
; 1927 : }
; 1928 : 
; 1929 : static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,
; 1930 :                              const unsigned char* data,
; 1931 :                              size_t datapos, size_t dataend,
; 1932 :                              const LodePNGCompressSettings* settings, int final)
; 1933 : {
; 1934 :   HuffmanTree tree_ll; /*tree for literal values and length codes*/
; 1935 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1936 : 
; 1937 :   unsigned BFINAL = final;
; 1938 :   unsigned error = 0;
; 1939 :   size_t i;
; 1940 : 
; 1941 :   HuffmanTree_init(&tree_ll);
; 1942 :   HuffmanTree_init(&tree_d);
; 1943 : 
; 1944 :   generateFixedLitLenTree(&tree_ll);
; 1945 :   generateFixedDistanceTree(&tree_d);
; 1946 : 
; 1947 :   addBitToStream(bp, out, BFINAL);
; 1948 :   addBitToStream(bp, out, 1); /*first bit of BTYPE*/
; 1949 :   addBitToStream(bp, out, 0); /*second bit of BTYPE*/
; 1950 : 
; 1951 :   if(settings->use_lz77) /*LZ77 encoded*/
; 1952 :   {
; 1953 :     uivector lz77_encoded;
; 1954 :     uivector_init(&lz77_encoded);
; 1955 :     error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1956 :                        settings->minmatch, settings->nicematch, settings->lazymatching);
; 1957 :     if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1958 :     uivector_cleanup(&lz77_encoded);
; 1959 :   }
; 1960 :   else /*no LZ77, but still will be Huffman compressed*/
; 1961 :   {
; 1962 :     for(i = datapos; i < dataend; i++)
; 1963 :     {
; 1964 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
; 1965 :     }
; 1966 :   }
; 1967 :   /*add END code*/
; 1968 :   if(!error) addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1969 : 
; 1970 :   /*cleanup*/
; 1971 :   HuffmanTree_cleanup(&tree_ll);
; 1972 :   HuffmanTree_cleanup(&tree_d);
; 1973 : 
; 1974 :   return error;
; 1975 : }
; 1976 : 
; 1977 : static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
; 1978 :                                  const LodePNGCompressSettings* settings)
; 1979 : {
; 1980 :   unsigned error = 0;
; 1981 :   size_t i, blocksize, numdeflateblocks;
; 1982 :   size_t bp = 0; /*the bit pointer*/
; 1983 :   Hash hash;
; 1984 : 
; 1985 :   if(settings->btype > 2) return 61;
; 1986 :   else if(settings->btype == 0) return deflateNoCompression(out, in, insize);
; 1987 :   else if(settings->btype == 1) blocksize = insize;
; 1988 :   else /*if(settings->btype == 2)*/
; 1989 :   {
; 1990 :     blocksize = insize / 8 + 8;
; 1991 :     if(blocksize < 65535) blocksize = 65535;
; 1992 :   }
; 1993 : 
; 1994 :   numdeflateblocks = (insize + blocksize - 1) / blocksize;
; 1995 :   if(numdeflateblocks == 0) numdeflateblocks = 1;
; 1996 : 
; 1997 :   error = hash_init(&hash, settings->windowsize);
; 1998 :   if(error) return error;
; 1999 : 
; 2000 :   for(i = 0; i < numdeflateblocks && !error; i++)
; 2001 :   {
; 2002 :     int final = i == numdeflateblocks - 1;
; 2003 :     size_t start = i * blocksize;
; 2004 :     size_t end = start + blocksize;
; 2005 :     if(end > insize) end = insize;
; 2006 : 
; 2007 :     if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
; 2008 :     else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
; 2009 :   }
; 2010 : 
; 2011 :   hash_cleanup(&hash);
; 2012 : 
; 2013 :   return error;
; 2014 : }
; 2015 : 
; 2016 : unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
; 2017 :                          const unsigned char* in, size_t insize,
; 2018 :                          const LodePNGCompressSettings* settings)
; 2019 : {
; 2020 :   unsigned error;
; 2021 :   ucvector v;
; 2022 :   ucvector_init_buffer(&v, *out, *outsize);
; 2023 :   error = lodepng_deflatev(&v, in, insize, settings);
; 2024 :   *out = v.data;
; 2025 :   *outsize = v.size;
; 2026 :   return error;
; 2027 : }
; 2028 : 
; 2029 : static unsigned deflate(unsigned char** out, size_t* outsize,
; 2030 :                         const unsigned char* in, size_t insize,
; 2031 :                         const LodePNGCompressSettings* settings)
; 2032 : {
; 2033 :   if(settings->custom_deflate)
; 2034 :   {
; 2035 :     return settings->custom_deflate(out, outsize, in, insize, settings);
; 2036 :   }
; 2037 :   else
; 2038 :   {
; 2039 :     return lodepng_deflate(out, outsize, in, insize, settings);
; 2040 :   }
; 2041 : }
; 2042 : 
; 2043 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2044 : 
; 2045 : /* ////////////////////////////////////////////////////////////////////////// */
; 2046 : /* / Adler32                                                                  */
; 2047 : /* ////////////////////////////////////////////////////////////////////////// */
; 2048 : 
; 2049 : static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
; 2050 : {
; 2051 :    unsigned s1 = adler & 0xffff;
; 2052 :    unsigned s2 = (adler >> 16) & 0xffff;
; 2053 : 
; 2054 :   while(len > 0)
; 2055 :   {
; 2056 :     /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
; 2057 :     unsigned amount = len > 5550 ? 5550 : len;
; 2058 :     len -= amount;
; 2059 :     while(amount > 0)
; 2060 :     {
; 2061 :       s1 += (*data++);
; 2062 :       s2 += s1;
; 2063 :       amount--;
; 2064 :     }
; 2065 :     s1 %= 65521;
; 2066 :     s2 %= 65521;
; 2067 :   }
; 2068 : 
; 2069 :   return (s2 << 16) | s1;
; 2070 : }
; 2071 : 
; 2072 : /*Return the adler32 of the bytes data[0..len-1]*/
; 2073 : static unsigned adler32(const unsigned char* data, unsigned len)
; 2074 : {
; 2075 :   return update_adler32(1L, data, len);
; 2076 : }
; 2077 : 
; 2078 : /* ////////////////////////////////////////////////////////////////////////// */
; 2079 : /* / Zlib                                                                   / */
; 2080 : /* ////////////////////////////////////////////////////////////////////////// */
; 2081 : 
; 2082 : #ifdef LODEPNG_COMPILE_DECODER
; 2083 : 
; 2084 : unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2085 :                                  size_t insize, const LodePNGDecompressSettings* settings)
; 2086 : {
; 2087 :   unsigned error = 0;
; 2088 :   unsigned CM, CINFO, FDICT;
; 2089 : 
; 2090 :   if(insize < 2) return 53; /*error, size of zlib data too small*/
; 2091 :   /*read information from zlib header*/
; 2092 :   if((in[0] * 256 + in[1]) % 31 != 0)
; 2093 :   {
; 2094 :     /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
; 2095 :     return 24;
; 2096 :   }
; 2097 : 
; 2098 :   CM = in[0] & 15;
; 2099 :   CINFO = (in[0] >> 4) & 15;
; 2100 :   /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
; 2101 :   FDICT = (in[1] >> 5) & 1;
; 2102 :   /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/
; 2103 : 
; 2104 :   if(CM != 8 || CINFO > 7)
; 2105 :   {
; 2106 :     /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
; 2107 :     return 25;
; 2108 :   }
; 2109 :   if(FDICT != 0)
; 2110 :   {
; 2111 :     /*error: the specification of PNG says about the zlib stream:
; 2112 :       "The additional flags shall not specify a preset dictionary."*/
; 2113 :     return 26;
; 2114 :   }
; 2115 : 
; 2116 :   error = inflate(out, outsize, in + 2, insize - 2, settings);
; 2117 :   if(error) return error;
; 2118 : 
; 2119 :   if(!settings->ignore_adler32)
; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/
; 2124 :   }
; 2125 : 
; 2126 :   return 0; /*no error*/
; 2127 : }
; 2128 : 
; 2129 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2130 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2131 : {
; 2132 :   if(settings->custom_zlib)
; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2134 :   else
; 2135 :     return lodepng_zlib_decompress(out, outsize, in, insize, settings);
; 2136 : }
; 2137 : 
; 2138 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2139 : 
; 2140 : #ifdef LODEPNG_COMPILE_ENCODER
; 2141 : 
; 2142 : unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2143 :                                size_t insize, const LodePNGCompressSettings* settings)
; 2144 : {
; 2145 :   /*initially, *out must be NULL and outsize 0, if you just give some random *out
; 2146 :   that's pointing to a non allocated buffer, this'll crash*/
; 2147 :   ucvector outv;
; 2148 :   size_t i;
; 2149 :   unsigned error;
; 2150 :   unsigned char* deflatedata = 0;
; 2151 :   size_t deflatesize = 0;
; 2152 : 
; 2153 :   unsigned ADLER32;
; 2154 :   /*zlib data: 1 byte CMF (CM+CINFO), 1 byte FLG, deflate data, 4 byte ADLER32 checksum of the Decompressed data*/
; 2155 :   unsigned CMF = 120; /*0b01111000: CM 8, CINFO 7. With CINFO 7, any window size up to 32768 can be used.*/
; 2156 :   unsigned FLEVEL = 0;
; 2157 :   unsigned FDICT = 0;
; 2158 :   unsigned CMFFLG = 256 * CMF + FDICT * 32 + FLEVEL * 64;
; 2159 :   unsigned FCHECK = 31 - CMFFLG % 31;
; 2160 :   CMFFLG += FCHECK;
; 2161 : 
; 2162 :   /*ucvector-controlled version of the output buffer, for dynamic array*/
; 2163 :   ucvector_init_buffer(&outv, *out, *outsize);
; 2164 : 
; 2165 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG / 256));
; 2166 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG % 256));
; 2167 : 
; 2168 :   error = deflate(&deflatedata, &deflatesize, in, insize, settings);
; 2169 : 
; 2170 :   if(!error)
; 2171 :   {
; 2172 :     ADLER32 = adler32(in, (unsigned)insize);
; 2173 :     for(i = 0; i < deflatesize; i++) ucvector_push_back(&outv, deflatedata[i]);
; 2174 :     lodepng_free(deflatedata);
; 2175 :     lodepng_add32bitInt(&outv, ADLER32);
; 2176 :   }
; 2177 : 
; 2178 :   *out = outv.data;
; 2179 :   *outsize = outv.size;
; 2180 : 
; 2181 :   return error;
; 2182 : }
; 2183 : 
; 2184 : /* compress using the default or custom zlib function */
; 2185 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2186 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2187 : {
; 2188 :   if(settings->custom_zlib)
; 2189 :   {
; 2190 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2191 :   }
; 2192 :   else
; 2193 :   {
; 2194 :     return lodepng_zlib_compress(out, outsize, in, insize, settings);
; 2195 :   }
; 2196 : }
; 2197 : 
; 2198 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2199 : 
; 2200 : #else /*no LODEPNG_COMPILE_ZLIB*/
; 2201 : 
; 2202 : #ifdef LODEPNG_COMPILE_DECODER
; 2203 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2204 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2205 : {
; 2206 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2207 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2208 : }
; 2209 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2210 : #ifdef LODEPNG_COMPILE_ENCODER
; 2211 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2212 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2213 : {
; 2214 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2215 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2216 : }
; 2217 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2218 : 
; 2219 : #endif /*LODEPNG_COMPILE_ZLIB*/
; 2220 : 
; 2221 : /* ////////////////////////////////////////////////////////////////////////// */
; 2222 : 
; 2223 : #ifdef LODEPNG_COMPILE_ENCODER
; 2224 : 
; 2225 : /*this is a good tradeoff between speed and compression ratio*/
; 2226 : #define DEFAULT_WINDOWSIZE 2048
; 2227 : 
; 2228 : void lodepng_compress_settings_init(LodePNGCompressSettings* settings)
; 2229 : {
; 2230 :   /*compress with dynamic huffman tree (not in the mathematical sense, just not the predefined one)*/
; 2231 :   settings->btype = 2;
; 2232 :   settings->use_lz77 = 1;
; 2233 :   settings->windowsize = DEFAULT_WINDOWSIZE;
; 2234 :   settings->minmatch = 3;
; 2235 :   settings->nicematch = 128;
; 2236 :   settings->lazymatching = 1;
; 2237 : 
; 2238 :   settings->custom_zlib = 0;
; 2239 :   settings->custom_deflate = 0;
; 2240 :   settings->custom_context = 0;
; 2241 : }
; 2242 : 
; 2243 : const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 3, 128, 1, 0, 0, 0};
; 2244 : 
; 2245 : 
; 2246 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2247 : 
; 2248 : #ifdef LODEPNG_COMPILE_DECODER
; 2249 : 
; 2250 : void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings)
; 2251 : {
; 2252 :   settings->ignore_adler32 = 0;
; 2253 : 
; 2254 :   settings->custom_zlib = 0;
; 2255 :   settings->custom_inflate = 0;
; 2256 :   settings->custom_context = 0;
; 2257 : }
; 2258 : 
; 2259 : const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0, 0, 0};
; 2260 : 
; 2261 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2262 : 
; 2263 : /* ////////////////////////////////////////////////////////////////////////// */
; 2264 : /* ////////////////////////////////////////////////////////////////////////// */
; 2265 : /* // End of Zlib related code. Begin of PNG related code.                 // */
; 2266 : /* ////////////////////////////////////////////////////////////////////////// */
; 2267 : /* ////////////////////////////////////////////////////////////////////////// */
; 2268 : 
; 2269 : #ifdef LODEPNG_COMPILE_PNG
; 2270 : 
; 2271 : /* ////////////////////////////////////////////////////////////////////////// */
; 2272 : /* / CRC32                                                                  / */
; 2273 : /* ////////////////////////////////////////////////////////////////////////// */
; 2274 : 
; 2275 : /* CRC polynomial: 0xedb88320 */
; 2276 : static unsigned lodepng_crc32_table[256] = {
; 2277 :            0u, 1996959894u, 3993919788u, 2567524794u,  124634137u, 1886057615u, 3915621685u, 2657392035u,
; 2278 :    249268274u, 2044508324u, 3772115230u, 2547177864u,  162941995u, 2125561021u, 3887607047u, 2428444049u,
; 2279 :    498536548u, 1789927666u, 4089016648u, 2227061214u,  450548861u, 1843258603u, 4107580753u, 2211677639u,
; 2280 :    325883990u, 1684777152u, 4251122042u, 2321926636u,  335633487u, 1661365465u, 4195302755u, 2366115317u,
; 2281 :    997073096u, 1281953886u, 3579855332u, 2724688242u, 1006888145u, 1258607687u, 3524101629u, 2768942443u,
; 2282 :    901097722u, 1119000684u, 3686517206u, 2898065728u,  853044451u, 1172266101u, 3705015759u, 2882616665u,
; 2283 :    651767980u, 1373503546u, 3369554304u, 3218104598u,  565507253u, 1454621731u, 3485111705u, 3099436303u,
; 2284 :    671266974u, 1594198024u, 3322730930u, 2970347812u,  795835527u, 1483230225u, 3244367275u, 3060149565u,
; 2285 :   1994146192u,   31158534u, 2563907772u, 4023717930u, 1907459465u,  112637215u, 2680153253u, 3904427059u,
; 2286 :   2013776290u,  251722036u, 2517215374u, 3775830040u, 2137656763u,  141376813u, 2439277719u, 3865271297u,
; 2287 :   1802195444u,  476864866u, 2238001368u, 4066508878u, 1812370925u,  453092731u, 2181625025u, 4111451223u,
; 2288 :   1706088902u,  314042704u, 2344532202u, 4240017532u, 1658658271u,  366619977u, 2362670323u, 4224994405u,
; 2289 :   1303535960u,  984961486u, 2747007092u, 3569037538u, 1256170817u, 1037604311u, 2765210733u, 3554079995u,
; 2290 :   1131014506u,  879679996u, 2909243462u, 3663771856u, 1141124467u,  855842277u, 2852801631u, 3708648649u,
; 2291 :   1342533948u,  654459306u, 3188396048u, 3373015174u, 1466479909u,  544179635u, 3110523913u, 3462522015u,
; 2292 :   1591671054u,  702138776u, 2966460450u, 3352799412u, 1504918807u,  783551873u, 3082640443u, 3233442989u,
; 2293 :   3988292384u, 2596254646u,   62317068u, 1957810842u, 3939845945u, 2647816111u,   81470997u, 1943803523u,
; 2294 :   3814918930u, 2489596804u,  225274430u, 2053790376u, 3826175755u, 2466906013u,  167816743u, 2097651377u,
; 2295 :   4027552580u, 2265490386u,  503444072u, 1762050814u, 4150417245u, 2154129355u,  426522225u, 1852507879u,
; 2296 :   4275313526u, 2312317920u,  282753626u, 1742555852u, 4189708143u, 2394877945u,  397917763u, 1622183637u,
; 2297 :   3604390888u, 2714866558u,  953729732u, 1340076626u, 3518719985u, 2797360999u, 1068828381u, 1219638859u,
; 2298 :   3624741850u, 2936675148u,  906185462u, 1090812512u, 3747672003u, 2825379669u,  829329135u, 1181335161u,
; 2299 :   3412177804u, 3160834842u,  628085408u, 1382605366u, 3423369109u, 3138078467u,  570562233u, 1426400815u,
; 2300 :   3317316542u, 2998733608u,  733239954u, 1555261956u, 3268935591u, 3050360625u,  752459403u, 1541320221u,
; 2301 :   2607071920u, 3965973030u, 1969922972u,   40735498u, 2617837225u, 3943577151u, 1913087877u,   83908371u,
; 2302 :   2512341634u, 3803740692u, 2075208622u,  213261112u, 2463272603u, 3855990285u, 2094854071u,  198958881u,
; 2303 :   2262029012u, 4057260610u, 1759359992u,  534414190u, 2176718541u, 4139329115u, 1873836001u,  414664567u,
; 2304 :   2282248934u, 4279200368u, 1711684554u,  285281116u, 2405801727u, 4167216745u, 1634467795u,  376229701u,
; 2305 :   2685067896u, 3608007406u, 1308918612u,  956543938u, 2808555105u, 3495958263u, 1231636301u, 1047427035u,
; 2306 :   2932959818u, 3654703836u, 1088359270u,  936918000u, 2847714899u, 3736837829u, 1202900863u,  817233897u,
; 2307 :   3183342108u, 3401237130u, 1404277552u,  615818150u, 3134207493u, 3453421203u, 1423857449u,  601450431u,
; 2308 :   3009837614u, 3294710456u, 1567103746u,  711928724u, 3020668471u, 3272380065u, 1510334235u,  755167117u
; 2309 : };
; 2310 : 
; 2311 : /*Return the CRC of the bytes buf[0..len-1].*/
; 2312 : unsigned lodepng_crc32(const unsigned char* buf, size_t len)
; 2313 : {
; 2314 :   unsigned c = 0xffffffffL;
; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)
; 2318 :   {
; 2319 :     c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
; 2320 :   }
; 2321 :   return c ^ 0xffffffffL;
; 2322 : }
; 2323 : 
; 2324 : /* ////////////////////////////////////////////////////////////////////////// */
; 2325 : /* / Reading and writing single bits and bytes from/to stream for LodePNG   / */
; 2326 : /* ////////////////////////////////////////////////////////////////////////// */
; 2327 : 
; 2328 : static unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream)
; 2329 : {
; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);
; 2331 :   (*bitpointer)++;
; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)
; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
; 2354 :   }
; 2355 :   (*bitpointer)++;
; 2356 : }
; 2357 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2358 : 
; 2359 : static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2360 : {
; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));
; 2363 :   else         bitstream[(*bitpointer) >> 3] |=  (1 << (7 - ((*bitpointer) & 0x7)));
; 2364 :   (*bitpointer)++;
; 2365 : }
; 2366 : 
; 2367 : /* ////////////////////////////////////////////////////////////////////////// */
; 2368 : /* / PNG chunks                                                             / */
; 2369 : /* ////////////////////////////////////////////////////////////////////////// */
; 2370 : 
; 2371 : unsigned lodepng_chunk_length(const unsigned char* chunk)
; 2372 : {
; 2373 :   return lodepng_read32bitInt(&chunk[0]);
; 2374 : }
; 2375 : 
; 2376 : void lodepng_chunk_type(char type[5], const unsigned char* chunk)
; 2377 : {
; 2378 :   unsigned i;
; 2379 :   for(i = 0; i < 4; i++) type[i] = chunk[4 + i];
; 2380 :   type[4] = 0; /*null termination char*/
; 2381 : }
; 2382 : 
; 2383 : unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type)
; 2384 : {
; 2385 :   if(strlen(type) != 4) return 0;
; 2386 :   return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);
; 2387 : }
; 2388 : 
; 2389 : unsigned char lodepng_chunk_ancillary(const unsigned char* chunk)
; 2390 : {
; 2391 :   return((chunk[4] & 32) != 0);
; 2392 : }
; 2393 : 
; 2394 : unsigned char lodepng_chunk_private(const unsigned char* chunk)
; 2395 : {
; 2396 :   return((chunk[6] & 32) != 0);
; 2397 : }
; 2398 : 
; 2399 : unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk)
; 2400 : {
; 2401 :   return((chunk[7] & 32) != 0);
; 2402 : }
; 2403 : 
; 2404 : unsigned char* lodepng_chunk_data(unsigned char* chunk)
; 2405 : {
; 2406 :   return &chunk[8];
; 2407 : }
; 2408 : 
; 2409 : const unsigned char* lodepng_chunk_data_const(const unsigned char* chunk)
; 2410 : {
; 2411 :   return &chunk[8];
; 2412 : }
; 2413 : 
; 2414 : unsigned lodepng_chunk_check_crc(const unsigned char* chunk)
; 2415 : {
; 2416 :   unsigned length = lodepng_chunk_length(chunk);
; 2417 :   unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);
; 2418 :   /*the CRC is taken of the data and the 4 chunk type letters, not the length*/
; 2419 :   unsigned checksum = lodepng_crc32(&chunk[4], length + 4);
; 2420 :   if(CRC != checksum) return 1;
; 2421 :   else return 0;
; 2422 : }
; 2423 : 
; 2424 : void lodepng_chunk_generate_crc(unsigned char* chunk)
; 2425 : {
; 2426 :   unsigned length = lodepng_chunk_length(chunk);
; 2427 :   unsigned CRC = lodepng_crc32(&chunk[4], length + 4);
; 2428 :   lodepng_set32bitInt(chunk + 8 + length, CRC);
; 2429 : }
; 2430 : 
; 2431 : unsigned char* lodepng_chunk_next(unsigned char* chunk)
; 2432 : {
; 2433 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2434 :   return &chunk[total_chunk_length];
; 2435 : }
; 2436 : 
; 2437 : const unsigned char* lodepng_chunk_next_const(const unsigned char* chunk)
; 2438 : {
; 2439 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2440 :   return &chunk[total_chunk_length];
; 2441 : }
; 2442 : 
; 2443 : unsigned lodepng_chunk_append(unsigned char** out, size_t* outlength, const unsigned char* chunk)
; 2444 : {
; 2445 :   unsigned i;
; 2446 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2447 :   unsigned char *chunk_start, *new_buffer;
; 2448 :   size_t new_length = (*outlength) + total_chunk_length;
; 2449 :   if(new_length < total_chunk_length || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2450 : 
; 2451 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2452 :   if(!new_buffer) return 83; /*alloc fail*/
; 2453 :   (*out) = new_buffer;
; 2454 :   (*outlength) = new_length;
; 2455 :   chunk_start = &(*out)[new_length - total_chunk_length];
; 2456 : 
; 2457 :   for(i = 0; i < total_chunk_length; i++) chunk_start[i] = chunk[i];
; 2458 : 
; 2459 :   return 0;
; 2460 : }
; 2461 : 
; 2462 : unsigned lodepng_chunk_create(unsigned char** out, size_t* outlength, unsigned length,
; 2463 :                               const char* type, const unsigned char* data)
; 2464 : {
; 2465 :   unsigned i;
; 2466 :   unsigned char *chunk, *new_buffer;
; 2467 :   size_t new_length = (*outlength) + length + 12;
; 2468 :   if(new_length < length + 12 || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2469 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2470 :   if(!new_buffer) return 83; /*alloc fail*/
; 2471 :   (*out) = new_buffer;
; 2472 :   (*outlength) = new_length;
; 2473 :   chunk = &(*out)[(*outlength) - length - 12];
; 2474 : 
; 2475 :   /*1: length*/
; 2476 :   lodepng_set32bitInt(chunk, (unsigned)length);
; 2477 : 
; 2478 :   /*2: chunk name (4 letters)*/
; 2479 :   chunk[4] = type[0];
; 2480 :   chunk[5] = type[1];
; 2481 :   chunk[6] = type[2];
; 2482 :   chunk[7] = type[3];
; 2483 : 
; 2484 :   /*3: the data*/
; 2485 :   for(i = 0; i < length; i++) chunk[8 + i] = data[i];
; 2486 : 
; 2487 :   /*4: CRC (of the chunkname characters and the data)*/
; 2488 :   lodepng_chunk_generate_crc(chunk);
; 2489 : 
; 2490 :   return 0;
; 2491 : }
; 2492 : 
; 2493 : /* ////////////////////////////////////////////////////////////////////////// */
; 2494 : /* / Color types and such                                                   / */
; 2495 : /* ////////////////////////////////////////////////////////////////////////// */
; 2496 : 
; 2497 : /*return type is a LodePNG error code*/
; 2498 : static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) /*bd = bitdepth*/
; 2499 : {
; 2500 :   switch(colortype)
; 2501 :   {
; 2502 :     case 0: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)) return 37; break; /*grey*/
; 2503 :     case 2: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGB*/
; 2504 :     case 3: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )) return 37; break; /*palette*/
; 2505 :     case 4: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*grey + alpha*/
; 2506 :     case 6: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGBA*/
; 2507 :     default: return 31;
; 2508 :   }
; 2509 :   return 0; /*allowed color type / bits combination*/
; 2510 : }
; 2511 : 
; 2512 : static unsigned getNumColorChannels(LodePNGColorType colortype)
; 2513 : {
; 2514 :   switch(colortype)
; 2515 :   {
; 2516 :     case 0: return 1; /*grey*/
; 2517 :     case 2: return 3; /*RGB*/
; 2518 :     case 3: return 1; /*palette*/
; 2519 :     case 4: return 2; /*grey + alpha*/
; 2520 :     case 6: return 4; /*RGBA*/
; 2521 :   }
; 2522 :   return 0; /*unexisting color type*/
; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;
; 2529 : }
; 2530 : 
; 2531 : /* ////////////////////////////////////////////////////////////////////////// */
; 2532 : 
; 2533 : void lodepng_color_mode_init(LodePNGColorMode* info)
; 2534 : {
; 2535 :   info->key_defined = 0;
; 2536 :   info->key_r = info->key_g = info->key_b = 0;
; 2537 :   info->colortype = LCT_RGBA;
; 2538 :   info->bitdepth = 8;
; 2539 :   info->palette = 0;
; 2540 :   info->palettesize = 0;
; 2541 : }
; 2542 : 
; 2543 : void lodepng_color_mode_cleanup(LodePNGColorMode* info)
; 2544 : {
; 2545 :   lodepng_palette_clear(info);
; 2546 : }
; 2547 : 
; 2548 : unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
; 2549 : {
; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;
; 2553 :   if(source->palette)
; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);
; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];
; 2558 :   }
; 2559 :   return 0;
; 2560 : }
; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);

  00084	85 c9		 test	 ecx, ecx
  00086	74 09		 je	 SHORT $LN13@lodepng_de

; 73   :   free(ptr);

  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 _free
  0008e	83 c4 04	 add	 esp, 4
$LN13@lodepng_de:

; 4803 : 
; 4804 : unsigned lodepng_decode32(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4805 : {
; 4806 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGBA, 8);
; 4807 : }
; 4808 : 
; 4809 : unsigned lodepng_decode24(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4810 : {
; 4811 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGB, 8);
; 4812 : }
; 4813 : 
; 4814 : #ifdef LODEPNG_COMPILE_DISK
; 4815 : unsigned lodepng_decode_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename,
; 4816 :                              LodePNGColorType colortype, unsigned bitdepth)
; 4817 : {
; 4818 :   unsigned char* buffer;
; 4819 :   size_t buffersize;
; 4820 :   unsigned error;
; 4821 :   error = lodepng_load_file(&buffer, &buffersize, filename);
; 4822 :   if(!error) error = lodepng_decode_memory(out, w, h, buffer, buffersize, colortype, bitdepth);
; 4823 :   lodepng_free(buffer);
; 4824 :   return error;
; 4825 : }
; 4826 : 
; 4827 : unsigned lodepng_decode32_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4828 : {
; 4829 :   return lodepng_decode_file(out, w, h, filename, LCT_RGBA, 8);
; 4830 : }
; 4831 : 
; 4832 : unsigned lodepng_decode24_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4833 : {
; 4834 :   return lodepng_decode_file(out, w, h, filename, LCT_RGB, 8);
; 4835 : }
; 4836 : #endif /*LODEPNG_COMPILE_DISK*/
; 4837 : 
; 4838 : void lodepng_decoder_settings_init(LodePNGDecoderSettings* settings)
; 4839 : {
; 4840 :   settings->color_convert = 1;
; 4841 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4842 :   settings->read_text_chunks = 1;
; 4843 :   settings->remember_unknown_chunks = 0;
; 4844 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4845 :   settings->ignore_crc = 0;
; 4846 :   settings->fix_png = 0;
; 4847 :   lodepng_decompress_settings_init(&settings->zlibsettings);
; 4848 : }
; 4849 : 
; 4850 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4851 : 
; 4852 : #if defined(LODEPNG_COMPILE_DECODER) || defined(LODEPNG_COMPILE_ENCODER)
; 4853 : 
; 4854 : void lodepng_state_init(LodePNGState* state)
; 4855 : {
; 4856 : #ifdef LODEPNG_COMPILE_DECODER
; 4857 :   lodepng_decoder_settings_init(&state->decoder);
; 4858 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4859 : #ifdef LODEPNG_COMPILE_ENCODER
; 4860 :   lodepng_encoder_settings_init(&state->encoder);
; 4861 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 4862 :   lodepng_color_mode_init(&state->info_raw);
; 4863 :   lodepng_info_init(&state->info_png);
; 4864 :   state->error = 1;
; 4865 : }
; 4866 : 
; 4867 : void lodepng_state_cleanup(LodePNGState* state)
; 4868 : {
; 4869 :   lodepng_color_mode_cleanup(&state->info_raw);
; 4870 :   lodepng_info_cleanup(&state->info_png);

  00091	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp+136]

; 2585 :   info->palette = 0;

  00097	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _state$[ebp+112], 0

; 2586 :   info->palettesize = 0;

  000a1	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _state$[ebp+116], 0

; 4803 : 
; 4804 : unsigned lodepng_decode32(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4805 : {
; 4806 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGBA, 8);
; 4807 : }
; 4808 : 
; 4809 : unsigned lodepng_decode24(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4810 : {
; 4811 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGB, 8);
; 4812 : }
; 4813 : 
; 4814 : #ifdef LODEPNG_COMPILE_DISK
; 4815 : unsigned lodepng_decode_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename,
; 4816 :                              LodePNGColorType colortype, unsigned bitdepth)
; 4817 : {
; 4818 :   unsigned char* buffer;
; 4819 :   size_t buffersize;
; 4820 :   unsigned error;
; 4821 :   error = lodepng_load_file(&buffer, &buffersize, filename);
; 4822 :   if(!error) error = lodepng_decode_memory(out, w, h, buffer, buffersize, colortype, bitdepth);
; 4823 :   lodepng_free(buffer);
; 4824 :   return error;
; 4825 : }
; 4826 : 
; 4827 : unsigned lodepng_decode32_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4828 : {
; 4829 :   return lodepng_decode_file(out, w, h, filename, LCT_RGBA, 8);
; 4830 : }
; 4831 : 
; 4832 : unsigned lodepng_decode24_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4833 : {
; 4834 :   return lodepng_decode_file(out, w, h, filename, LCT_RGB, 8);
; 4835 : }
; 4836 : #endif /*LODEPNG_COMPILE_DISK*/
; 4837 : 
; 4838 : void lodepng_decoder_settings_init(LodePNGDecoderSettings* settings)
; 4839 : {
; 4840 :   settings->color_convert = 1;
; 4841 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4842 :   settings->read_text_chunks = 1;
; 4843 :   settings->remember_unknown_chunks = 0;
; 4844 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4845 :   settings->ignore_crc = 0;
; 4846 :   settings->fix_png = 0;
; 4847 :   lodepng_decompress_settings_init(&settings->zlibsettings);
; 4848 : }
; 4849 : 
; 4850 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4851 : 
; 4852 : #if defined(LODEPNG_COMPILE_DECODER) || defined(LODEPNG_COMPILE_ENCODER)
; 4853 : 
; 4854 : void lodepng_state_init(LodePNGState* state)
; 4855 : {
; 4856 : #ifdef LODEPNG_COMPILE_DECODER
; 4857 :   lodepng_decoder_settings_init(&state->decoder);
; 4858 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4859 : #ifdef LODEPNG_COMPILE_ENCODER
; 4860 :   lodepng_encoder_settings_init(&state->encoder);
; 4861 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 4862 :   lodepng_color_mode_init(&state->info_raw);
; 4863 :   lodepng_info_init(&state->info_png);
; 4864 :   state->error = 1;
; 4865 : }
; 4866 : 
; 4867 : void lodepng_state_cleanup(LodePNGState* state)
; 4868 : {
; 4869 :   lodepng_color_mode_cleanup(&state->info_raw);
; 4870 :   lodepng_info_cleanup(&state->info_png);

  000ab	e8 00 00 00 00	 call	 ?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z ; lodepng_info_cleanup

; 4800 :   lodepng_state_cleanup(&state);
; 4801 :   return error;

  000b0	8b c6		 mov	 eax, esi

; 4802 : }

  000b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bc	59		 pop	 ecx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c3	33 cd		 xor	 ecx, ebp
  000c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z$0:
  00000	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1LodePNGState@@UAE@XZ	; LodePNGState::~LodePNGState
__ehhandler$?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-320]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z ENDP ; lodepng_decode_memory
; Function compile flags: /Ogtp
;	COMDAT ??0LodePNGState@@QAE@XZ
_TEXT	SEGMENT
??0LodePNGState@@QAE@XZ PROC				; LodePNGState::LodePNGState, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7LodePNGState@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0LodePNGState@@QAE@XZ ENDP				; LodePNGState::LodePNGState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_decoder_settings_init@@YAXPAULodePNGDecoderSettings@@@Z
_TEXT	SEGMENT
?lodepng_decoder_settings_init@@YAXPAULodePNGDecoderSettings@@@Z PROC ; lodepng_decoder_settings_init, COMDAT
; _settings$ = ecx

; 4840 :   settings->color_convert = 1;

  00000	c7 41 18 01 00
	00 00		 mov	 DWORD PTR [ecx+24], 1

; 4841 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4842 :   settings->read_text_chunks = 1;

  00007	c7 41 1c 01 00
	00 00		 mov	 DWORD PTR [ecx+28], 1

; 4843 :   settings->remember_unknown_chunks = 0;

  0000e	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 4844 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4845 :   settings->ignore_crc = 0;

  00015	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 4846 :   settings->fix_png = 0;

  0001c	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 2252 :   settings->ignore_adler32 = 0;

  00023	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 2253 : 
; 2254 :   settings->custom_zlib = 0;

  00029	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 2255 :   settings->custom_inflate = 0;

  00030	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 2256 :   settings->custom_context = 0;

  00037	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 4847 :   lodepng_decompress_settings_init(&settings->zlibsettings);
; 4848 : }

  0003e	c3		 ret	 0
?lodepng_decoder_settings_init@@YAXPAULodePNGDecoderSettings@@@Z ENDP ; lodepng_decoder_settings_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_state_init@@YAXPAULodePNGState@@@Z
_TEXT	SEGMENT
?lodepng_state_init@@YAXPAULodePNGState@@@Z PROC	; lodepng_state_init, COMDAT
; _state$ = ecx

; 4855 : {

  00000	8b c1		 mov	 eax, ecx

; 2541 : }
; 2542 : 
; 2543 : void lodepng_color_mode_cleanup(LodePNGColorMode* info)
; 2544 : {
; 2545 :   lodepng_palette_clear(info);
; 2546 : }
; 2547 : 
; 2548 : unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
; 2549 : {
; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;
; 2553 :   if(source->palette)
; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);
; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];
; 2558 :   }
; 2559 :   return 0;
; 2560 : }
; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);
; 2585 :   info->palette = 0;
; 2586 :   info->palettesize = 0;
; 2587 : }
; 2588 : 
; 2589 : unsigned lodepng_palette_add(LodePNGColorMode* info,
; 2590 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2591 : {
; 2592 :   unsigned char* data;
; 2593 :   /*the same resize technique as C++ std::vectors is used, and here it's made so that for a palette with
; 2594 :   the max of 256 colors, it'll have the exact alloc size*/
; 2595 :   if(!info->palette) /*allocate palette if empty*/
; 2596 :   {
; 2597 :     /*room for 256 colors with 4 bytes each*/
; 2598 :     data = (unsigned char*)lodepng_realloc(info->palette, 1024);
; 2599 :     if(!data) return 83; /*alloc fail*/
; 2600 :     else info->palette = data;
; 2601 :   }
; 2602 :   info->palette[4 * info->palettesize + 0] = r;
; 2603 :   info->palette[4 * info->palettesize + 1] = g;
; 2604 :   info->palette[4 * info->palettesize + 2] = b;
; 2605 :   info->palette[4 * info->palettesize + 3] = a;
; 2606 :   info->palettesize++;
; 2607 :   return 0;
; 2608 : }
; 2609 : 
; 2610 : unsigned lodepng_get_bpp(const LodePNGColorMode* info)
; 2611 : {
; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }
; 2615 : 
; 2616 : unsigned lodepng_get_channels(const LodePNGColorMode* info)
; 2617 : {
; 2618 :   return getNumColorChannels(info->colortype);
; 2619 : }
; 2620 : 
; 2621 : unsigned lodepng_is_greyscale_type(const LodePNGColorMode* info)
; 2622 : {
; 2623 :   return info->colortype == LCT_GREY || info->colortype == LCT_GREY_ALPHA;
; 2624 : }
; 2625 : 
; 2626 : unsigned lodepng_is_alpha_type(const LodePNGColorMode* info)
; 2627 : {
; 2628 :   return (info->colortype & 4) != 0; /*4 or 6*/
; 2629 : }
; 2630 : 
; 2631 : unsigned lodepng_is_palette_type(const LodePNGColorMode* info)
; 2632 : {
; 2633 :   return info->colortype == LCT_PALETTE;
; 2634 : }
; 2635 : 
; 2636 : unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info)
; 2637 : {
; 2638 :   size_t i;
; 2639 :   for(i = 0; i < info->palettesize; i++)
; 2640 :   {
; 2641 :     if(info->palette[i * 4 + 3] < 255) return 1;
; 2642 :   }
; 2643 :   return 0;
; 2644 : }
; 2645 : 
; 2646 : unsigned lodepng_can_have_alpha(const LodePNGColorMode* info)
; 2647 : {
; 2648 :   return info->key_defined
; 2649 :       || lodepng_is_alpha_type(info)
; 2650 :       || lodepng_has_palette_alpha(info);
; 2651 : }
; 2652 : 
; 2653 : size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode* color)
; 2654 : {
; 2655 :   return (w * h * lodepng_get_bpp(color) + 7) / 8;
; 2656 : }
; 2657 : 
; 2658 : size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)
; 2659 : {
; 2660 :   return (w * h * lodepng_get_bpp_lct(colortype, bitdepth) + 7) / 8;
; 2661 : }
; 2662 : 
; 2663 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2664 : 
; 2665 : static void LodePNGUnknownChunks_init(LodePNGInfo* info)
; 2666 : {
; 2667 :   unsigned i;
; 2668 :   for(i = 0; i < 3; i++) info->unknown_chunks_data[i] = 0;
; 2669 :   for(i = 0; i < 3; i++) info->unknown_chunks_size[i] = 0;
; 2670 : }
; 2671 : 
; 2672 : static void LodePNGUnknownChunks_cleanup(LodePNGInfo* info)
; 2673 : {
; 2674 :   unsigned i;
; 2675 :   for(i = 0; i < 3; i++) lodepng_free(info->unknown_chunks_data[i]);
; 2676 : }
; 2677 : 
; 2678 : static unsigned LodePNGUnknownChunks_copy(LodePNGInfo* dest, const LodePNGInfo* src)
; 2679 : {
; 2680 :   unsigned i;
; 2681 : 
; 2682 :   LodePNGUnknownChunks_cleanup(dest);
; 2683 : 
; 2684 :   for(i = 0; i < 3; i++)
; 2685 :   {
; 2686 :     size_t j;
; 2687 :     dest->unknown_chunks_size[i] = src->unknown_chunks_size[i];
; 2688 :     dest->unknown_chunks_data[i] = (unsigned char*)lodepng_malloc(src->unknown_chunks_size[i]);
; 2689 :     if(!dest->unknown_chunks_data[i] && dest->unknown_chunks_size[i]) return 83; /*alloc fail*/
; 2690 :     for(j = 0; j < src->unknown_chunks_size[i]; j++)
; 2691 :     {
; 2692 :       dest->unknown_chunks_data[i][j] = src->unknown_chunks_data[i][j];
; 2693 :     }
; 2694 :   }
; 2695 : 
; 2696 :   return 0;
; 2697 : }
; 2698 : 
; 2699 : /******************************************************************************/
; 2700 : 
; 2701 : static void LodePNGText_init(LodePNGInfo* info)
; 2702 : {
; 2703 :   info->text_num = 0;
; 2704 :   info->text_keys = NULL;
; 2705 :   info->text_strings = NULL;
; 2706 : }
; 2707 : 
; 2708 : static void LodePNGText_cleanup(LodePNGInfo* info)
; 2709 : {
; 2710 :   size_t i;
; 2711 :   for(i = 0; i < info->text_num; i++)
; 2712 :   {
; 2713 :     string_cleanup(&info->text_keys[i]);
; 2714 :     string_cleanup(&info->text_strings[i]);
; 2715 :   }
; 2716 :   lodepng_free(info->text_keys);
; 2717 :   lodepng_free(info->text_strings);
; 2718 : }
; 2719 : 
; 2720 : static unsigned LodePNGText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2721 : {
; 2722 :   size_t i = 0;
; 2723 :   dest->text_keys = 0;
; 2724 :   dest->text_strings = 0;
; 2725 :   dest->text_num = 0;
; 2726 :   for(i = 0; i < source->text_num; i++)
; 2727 :   {
; 2728 :     CERROR_TRY_RETURN(lodepng_add_text(dest, source->text_keys[i], source->text_strings[i]));
; 2729 :   }
; 2730 :   return 0;
; 2731 : }
; 2732 : 
; 2733 : void lodepng_clear_text(LodePNGInfo* info)
; 2734 : {
; 2735 :   LodePNGText_cleanup(info);
; 2736 : }
; 2737 : 
; 2738 : unsigned lodepng_add_text(LodePNGInfo* info, const char* key, const char* str)
; 2739 : {
; 2740 :   char** new_keys = (char**)(lodepng_realloc(info->text_keys, sizeof(char*) * (info->text_num + 1)));
; 2741 :   char** new_strings = (char**)(lodepng_realloc(info->text_strings, sizeof(char*) * (info->text_num + 1)));
; 2742 :   if(!new_keys || !new_strings)
; 2743 :   {
; 2744 :     lodepng_free(new_keys);
; 2745 :     lodepng_free(new_strings);
; 2746 :     return 83; /*alloc fail*/
; 2747 :   }
; 2748 : 
; 2749 :   info->text_num++;
; 2750 :   info->text_keys = new_keys;
; 2751 :   info->text_strings = new_strings;
; 2752 : 
; 2753 :   string_init(&info->text_keys[info->text_num - 1]);
; 2754 :   string_set(&info->text_keys[info->text_num - 1], key);
; 2755 : 
; 2756 :   string_init(&info->text_strings[info->text_num - 1]);
; 2757 :   string_set(&info->text_strings[info->text_num - 1], str);
; 2758 : 
; 2759 :   return 0;
; 2760 : }
; 2761 : 
; 2762 : /******************************************************************************/
; 2763 : 
; 2764 : static void LodePNGIText_init(LodePNGInfo* info)
; 2765 : {
; 2766 :   info->itext_num = 0;
; 2767 :   info->itext_keys = NULL;
; 2768 :   info->itext_langtags = NULL;
; 2769 :   info->itext_transkeys = NULL;
; 2770 :   info->itext_strings = NULL;
; 2771 : }
; 2772 : 
; 2773 : static void LodePNGIText_cleanup(LodePNGInfo* info)
; 2774 : {
; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)
; 2777 :   {
; 2778 :     string_cleanup(&info->itext_keys[i]);
; 2779 :     string_cleanup(&info->itext_langtags[i]);
; 2780 :     string_cleanup(&info->itext_transkeys[i]);
; 2781 :     string_cleanup(&info->itext_strings[i]);
; 2782 :   }
; 2783 :   lodepng_free(info->itext_keys);
; 2784 :   lodepng_free(info->itext_langtags);
; 2785 :   lodepng_free(info->itext_transkeys);
; 2786 :   lodepng_free(info->itext_strings);
; 2787 : }
; 2788 : 
; 2789 : static unsigned LodePNGIText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2790 : {
; 2791 :   size_t i = 0;
; 2792 :   dest->itext_keys = 0;
; 2793 :   dest->itext_langtags = 0;
; 2794 :   dest->itext_transkeys = 0;
; 2795 :   dest->itext_strings = 0;
; 2796 :   dest->itext_num = 0;
; 2797 :   for(i = 0; i < source->itext_num; i++)
; 2798 :   {
; 2799 :     CERROR_TRY_RETURN(lodepng_add_itext(dest, source->itext_keys[i], source->itext_langtags[i],
; 2800 :                                         source->itext_transkeys[i], source->itext_strings[i]));
; 2801 :   }
; 2802 :   return 0;
; 2803 : }
; 2804 : 
; 2805 : void lodepng_clear_itext(LodePNGInfo* info)
; 2806 : {
; 2807 :   LodePNGIText_cleanup(info);
; 2808 : }
; 2809 : 
; 2810 : unsigned lodepng_add_itext(LodePNGInfo* info, const char* key, const char* langtag,
; 2811 :                            const char* transkey, const char* str)
; 2812 : {
; 2813 :   char** new_keys = (char**)(lodepng_realloc(info->itext_keys, sizeof(char*) * (info->itext_num + 1)));
; 2814 :   char** new_langtags = (char**)(lodepng_realloc(info->itext_langtags, sizeof(char*) * (info->itext_num + 1)));
; 2815 :   char** new_transkeys = (char**)(lodepng_realloc(info->itext_transkeys, sizeof(char*) * (info->itext_num + 1)));
; 2816 :   char** new_strings = (char**)(lodepng_realloc(info->itext_strings, sizeof(char*) * (info->itext_num + 1)));
; 2817 :   if(!new_keys || !new_langtags || !new_transkeys || !new_strings)
; 2818 :   {
; 2819 :     lodepng_free(new_keys);
; 2820 :     lodepng_free(new_langtags);
; 2821 :     lodepng_free(new_transkeys);
; 2822 :     lodepng_free(new_strings);
; 2823 :     return 83; /*alloc fail*/
; 2824 :   }
; 2825 : 
; 2826 :   info->itext_num++;
; 2827 :   info->itext_keys = new_keys;
; 2828 :   info->itext_langtags = new_langtags;
; 2829 :   info->itext_transkeys = new_transkeys;
; 2830 :   info->itext_strings = new_strings;
; 2831 : 
; 2832 :   string_init(&info->itext_keys[info->itext_num - 1]);
; 2833 :   string_set(&info->itext_keys[info->itext_num - 1], key);
; 2834 : 
; 2835 :   string_init(&info->itext_langtags[info->itext_num - 1]);
; 2836 :   string_set(&info->itext_langtags[info->itext_num - 1], langtag);
; 2837 : 
; 2838 :   string_init(&info->itext_transkeys[info->itext_num - 1]);
; 2839 :   string_set(&info->itext_transkeys[info->itext_num - 1], transkey);
; 2840 : 
; 2841 :   string_init(&info->itext_strings[info->itext_num - 1]);
; 2842 :   string_set(&info->itext_strings[info->itext_num - 1], str);
; 2843 : 
; 2844 :   return 0;
; 2845 : }
; 2846 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2847 : 
; 2848 : void lodepng_info_init(LodePNGInfo* info)
; 2849 : {
; 2850 :   lodepng_color_mode_init(&info->color);
; 2851 :   info->interlace_method = 0;
; 2852 :   info->compression_method = 0;
; 2853 :   info->filter_method = 0;
; 2854 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2855 :   info->background_defined = 0;
; 2856 :   info->background_r = info->background_g = info->background_b = 0;
; 2857 : 
; 2858 :   LodePNGText_init(info);
; 2859 :   LodePNGIText_init(info);
; 2860 : 
; 2861 :   info->time_defined = 0;
; 2862 :   info->phys_defined = 0;
; 2863 : 
; 2864 :   LodePNGUnknownChunks_init(info);
; 2865 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2866 : }
; 2867 : 
; 2868 : void lodepng_info_cleanup(LodePNGInfo* info)
; 2869 : {
; 2870 :   lodepng_color_mode_cleanup(&info->color);
; 2871 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2872 :   LodePNGText_cleanup(info);
; 2873 :   LodePNGIText_cleanup(info);
; 2874 : 
; 2875 :   LodePNGUnknownChunks_cleanup(info);
; 2876 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2877 : }
; 2878 : 
; 2879 : unsigned lodepng_info_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2880 : {
; 2881 :   lodepng_info_cleanup(dest);
; 2882 :   *dest = *source;
; 2883 :   lodepng_color_mode_init(&dest->color);
; 2884 :   CERROR_TRY_RETURN(lodepng_color_mode_copy(&dest->color, &source->color));
; 2885 : 
; 2886 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2887 :   CERROR_TRY_RETURN(LodePNGText_copy(dest, source));
; 2888 :   CERROR_TRY_RETURN(LodePNGIText_copy(dest, source));
; 2889 : 
; 2890 :   LodePNGUnknownChunks_init(dest);
; 2891 :   CERROR_TRY_RETURN(LodePNGUnknownChunks_copy(dest, source));
; 2892 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2893 :   return 0;
; 2894 : }
; 2895 : 
; 2896 : void lodepng_info_swap(LodePNGInfo* a, LodePNGInfo* b)
; 2897 : {
; 2898 :   LodePNGInfo temp = *a;
; 2899 :   *a = *b;
; 2900 :   *b = temp;
; 2901 : }
; 2902 : 
; 2903 : /* ////////////////////////////////////////////////////////////////////////// */
; 2904 : 
; 2905 : /*index: bitgroup index, bits: bitgroup size(1, 2 or 4, in: bitgroup value, out: octet array to add bits to*/
; 2906 : static void addColorBits(unsigned char* out, size_t index, unsigned bits, unsigned in)
; 2907 : {
; 2908 :   /*p = the partial index in the byte, e.g. with 4 palettebits it is 0 for first half or 1 for second half*/
; 2909 :   unsigned p = index % (8 / bits);
; 2910 :   in &= (1 << bits) - 1; /*filter out any other bits of the input value*/
; 2911 :   in = in << (bits * (8 / bits - p - 1));
; 2912 :   if(p == 0) out[index * bits / 8] = in;
; 2913 :   else out[index * bits / 8] |= in;
; 2914 : }
; 2915 : 
; 2916 : typedef struct ColorTree ColorTree;
; 2917 : 
; 2918 : /*
; 2919 : One node of a color tree
; 2920 : This is the data structure used to count the number of unique colors and to get a palette
; 2921 : index for a color. It's like an octree, but because the alpha channel is used too, each
; 2922 : node has 16 instead of 8 children.
; 2923 : */
; 2924 : struct ColorTree
; 2925 : {
; 2926 :   ColorTree* children[16]; /*up to 16 pointers to ColorTree of next level*/
; 2927 :   int index; /*the payload. Only has a meaningful value if this is in the last level*/
; 2928 : };
; 2929 : 
; 2930 : static void color_tree_init(ColorTree* tree)
; 2931 : {
; 2932 :   int i;
; 2933 :   for(i = 0; i < 16; i++) tree->children[i] = 0;
; 2934 :   tree->index = -1;
; 2935 : }
; 2936 : 
; 2937 : static void color_tree_cleanup(ColorTree* tree)
; 2938 : {
; 2939 :   int i;
; 2940 :   for(i = 0; i < 16; i++)
; 2941 :   {
; 2942 :     if(tree->children[i])
; 2943 :     {
; 2944 :       color_tree_cleanup(tree->children[i]);
; 2945 :       lodepng_free(tree->children[i]);
; 2946 :     }
; 2947 :   }
; 2948 : }
; 2949 : 
; 2950 : /*returns -1 if color not present, its index otherwise*/
; 2951 : static int color_tree_get(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2952 : {
; 2953 :   int bit = 0;
; 2954 :   for(bit = 0; bit < 8; bit++)
; 2955 :   {
; 2956 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
; 2957 :     if(!tree->children[i]) return -1;
; 2958 :     else tree = tree->children[i];
; 2959 :   }
; 2960 :   return tree ? tree->index : -1;
; 2961 : }
; 2962 : 
; 2963 : #ifdef LODEPNG_COMPILE_ENCODER
; 2964 : static int color_tree_has(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2965 : {
; 2966 :   return color_tree_get(tree, r, g, b, a) >= 0;
; 2967 : }
; 2968 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2969 : 
; 2970 : /*color is not allowed to already exist.
; 2971 : Index should be >= 0 (it's signed to be compatible with using -1 for "doesn't exist")*/
; 2972 : static void color_tree_add(ColorTree* tree,
; 2973 :                            unsigned char r, unsigned char g, unsigned char b, unsigned char a, int index)
; 2974 : {
; 2975 :   int bit;
; 2976 :   for(bit = 0; bit < 8; bit++)
; 2977 :   {
; 2978 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
; 2979 :     if(!tree->children[i])
; 2980 :     {
; 2981 :       tree->children[i] = (ColorTree*)lodepng_malloc(sizeof(ColorTree));
; 2982 :       color_tree_init(tree->children[i]);
; 2983 :     }
; 2984 :     tree = tree->children[i];
; 2985 :   }
; 2986 :   tree->index = index;
; 2987 : }
; 2988 : 
; 2989 : /*put a pixel, given its RGBA color, into image of any color type*/
; 2990 : static unsigned rgba8ToPixel(unsigned char* out, size_t i,
; 2991 :                              const LodePNGColorMode* mode, ColorTree* tree /*for palette*/,
; 2992 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2993 : {
; 2994 :   if(mode->colortype == LCT_GREY)
; 2995 :   {
; 2996 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 2997 :     if(mode->bitdepth == 8) out[i] = grey;
; 2998 :     else if(mode->bitdepth == 16) out[i * 2 + 0] = out[i * 2 + 1] = grey;
; 2999 :     else
; 3000 :     {
; 3001 :       /*take the most significant bits of grey*/
; 3002 :       grey = (grey >> (8 - mode->bitdepth)) & ((1 << mode->bitdepth) - 1);
; 3003 :       addColorBits(out, i, mode->bitdepth, grey);
; 3004 :     }
; 3005 :   }
; 3006 :   else if(mode->colortype == LCT_RGB)
; 3007 :   {
; 3008 :     if(mode->bitdepth == 8)
; 3009 :     {
; 3010 :       out[i * 3 + 0] = r;
; 3011 :       out[i * 3 + 1] = g;
; 3012 :       out[i * 3 + 2] = b;
; 3013 :     }
; 3014 :     else
; 3015 :     {
; 3016 :       out[i * 6 + 0] = out[i * 6 + 1] = r;
; 3017 :       out[i * 6 + 2] = out[i * 6 + 3] = g;
; 3018 :       out[i * 6 + 4] = out[i * 6 + 5] = b;
; 3019 :     }
; 3020 :   }
; 3021 :   else if(mode->colortype == LCT_PALETTE)
; 3022 :   {
; 3023 :     int index = color_tree_get(tree, r, g, b, a);
; 3024 :     if(index < 0) return 82; /*color not in palette*/
; 3025 :     if(mode->bitdepth == 8) out[i] = index;
; 3026 :     else addColorBits(out, i, mode->bitdepth, index);
; 3027 :   }
; 3028 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3029 :   {
; 3030 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 3031 :     if(mode->bitdepth == 8)
; 3032 :     {
; 3033 :       out[i * 2 + 0] = grey;
; 3034 :       out[i * 2 + 1] = a;
; 3035 :     }
; 3036 :     else if(mode->bitdepth == 16)
; 3037 :     {
; 3038 :       out[i * 4 + 0] = out[i * 4 + 1] = grey;
; 3039 :       out[i * 4 + 2] = out[i * 4 + 3] = a;
; 3040 :     }
; 3041 :   }
; 3042 :   else if(mode->colortype == LCT_RGBA)
; 3043 :   {
; 3044 :     if(mode->bitdepth == 8)
; 3045 :     {
; 3046 :       out[i * 4 + 0] = r;
; 3047 :       out[i * 4 + 1] = g;
; 3048 :       out[i * 4 + 2] = b;
; 3049 :       out[i * 4 + 3] = a;
; 3050 :     }
; 3051 :     else
; 3052 :     {
; 3053 :       out[i * 8 + 0] = out[i * 8 + 1] = r;
; 3054 :       out[i * 8 + 2] = out[i * 8 + 3] = g;
; 3055 :       out[i * 8 + 4] = out[i * 8 + 5] = b;
; 3056 :       out[i * 8 + 6] = out[i * 8 + 7] = a;
; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/
; 3061 : }
; 3062 : 
; 3063 : /*put a pixel, given its RGBA16 color, into image of any color 16-bitdepth type*/
; 3064 : static unsigned rgba16ToPixel(unsigned char* out, size_t i,
; 3065 :                               const LodePNGColorMode* mode,
; 3066 :                               unsigned short r, unsigned short g, unsigned short b, unsigned short a)
; 3067 : {
; 3068 :   if(mode->bitdepth != 16) return 85; /*must be 16 for this function*/
; 3069 :   if(mode->colortype == LCT_GREY)
; 3070 :   {
; 3071 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3072 :     out[i * 2 + 0] = (grey >> 8) & 255;
; 3073 :     out[i * 2 + 1] = grey & 255;
; 3074 :   }
; 3075 :   else if(mode->colortype == LCT_RGB)
; 3076 :   {
; 3077 :     out[i * 6 + 0] = (r >> 8) & 255;
; 3078 :     out[i * 6 + 1] = r & 255;
; 3079 :     out[i * 6 + 2] = (g >> 8) & 255;
; 3080 :     out[i * 6 + 3] = g & 255;
; 3081 :     out[i * 6 + 4] = (b >> 8) & 255;
; 3082 :     out[i * 6 + 5] = b & 255;
; 3083 :   }
; 3084 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3085 :   {
; 3086 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3087 :     out[i * 4 + 0] = (grey >> 8) & 255;
; 3088 :     out[i * 4 + 1] = grey & 255;
; 3089 :     out[i * 4 + 2] = (a >> 8) & 255;
; 3090 :     out[i * 4 + 3] = a & 255;
; 3091 :   }
; 3092 :   else if(mode->colortype == LCT_RGBA)
; 3093 :   {
; 3094 :     out[i * 8 + 0] = (r >> 8) & 255;
; 3095 :     out[i * 8 + 1] = r & 255;
; 3096 :     out[i * 8 + 2] = (g >> 8) & 255;
; 3097 :     out[i * 8 + 3] = g & 255;
; 3098 :     out[i * 8 + 4] = (b >> 8) & 255;
; 3099 :     out[i * 8 + 5] = b & 255;
; 3100 :     out[i * 8 + 6] = (a >> 8) & 255;
; 3101 :     out[i * 8 + 7] = a & 255;
; 3102 :   }
; 3103 : 
; 3104 :   return 0; /*no error*/
; 3105 : }
; 3106 : 
; 3107 : /*Get RGBA8 color of pixel with index i (y * width + x) from the raw image with given color type.*/
; 3108 : static unsigned getPixelColorRGBA8(unsigned char* r, unsigned char* g,
; 3109 :                                    unsigned char* b, unsigned char* a,
; 3110 :                                    const unsigned char* in, size_t i,
; 3111 :                                    const LodePNGColorMode* mode,
; 3112 :                                    unsigned fix_png)
; 3113 : {
; 3114 :   if(mode->colortype == LCT_GREY)
; 3115 :   {
; 3116 :     if(mode->bitdepth == 8)
; 3117 :     {
; 3118 :       *r = *g = *b = in[i];
; 3119 :       if(mode->key_defined && *r == mode->key_r) *a = 0;
; 3120 :       else *a = 255;
; 3121 :     }
; 3122 :     else if(mode->bitdepth == 16)
; 3123 :     {
; 3124 :       *r = *g = *b = in[i * 2 + 0];
; 3125 :       if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
; 3126 :       else *a = 255;
; 3127 :     }
; 3128 :     else
; 3129 :     {
; 3130 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
; 3131 :       size_t j = i * mode->bitdepth;
; 3132 :       unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3133 :       *r = *g = *b = (value * 255) / highest;
; 3134 :       if(mode->key_defined && value == mode->key_r) *a = 0;
; 3135 :       else *a = 255;
; 3136 :     }
; 3137 :   }
; 3138 :   else if(mode->colortype == LCT_RGB)
; 3139 :   {
; 3140 :     if(mode->bitdepth == 8)
; 3141 :     {
; 3142 :       *r = in[i * 3 + 0]; *g = in[i * 3 + 1]; *b = in[i * 3 + 2];
; 3143 :       if(mode->key_defined && *r == mode->key_r && *g == mode->key_g && *b == mode->key_b) *a = 0;
; 3144 :       else *a = 255;
; 3145 :     }
; 3146 :     else
; 3147 :     {
; 3148 :       *r = in[i * 6 + 0];
; 3149 :       *g = in[i * 6 + 2];
; 3150 :       *b = in[i * 6 + 4];
; 3151 :       if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3152 :          && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3153 :          && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
; 3154 :       else *a = 255;
; 3155 :     }
; 3156 :   }
; 3157 :   else if(mode->colortype == LCT_PALETTE)
; 3158 :   {
; 3159 :     unsigned index;
; 3160 :     if(mode->bitdepth == 8) index = in[i];
; 3161 :     else
; 3162 :     {
; 3163 :       size_t j = i * mode->bitdepth;
; 3164 :       index = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3165 :     }
; 3166 : 
; 3167 :     if(index >= mode->palettesize)
; 3168 :     {
; 3169 :       /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3170 :       if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/
; 3171 :       *r = *g = *b = 0;
; 3172 :       *a = 255;
; 3173 :     }
; 3174 :     else
; 3175 :     {
; 3176 :       *r = mode->palette[index * 4 + 0];
; 3177 :       *g = mode->palette[index * 4 + 1];
; 3178 :       *b = mode->palette[index * 4 + 2];
; 3179 :       *a = mode->palette[index * 4 + 3];
; 3180 :     }
; 3181 :   }
; 3182 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3183 :   {
; 3184 :     if(mode->bitdepth == 8)
; 3185 :     {
; 3186 :       *r = *g = *b = in[i * 2 + 0];
; 3187 :       *a = in[i * 2 + 1];
; 3188 :     }
; 3189 :     else
; 3190 :     {
; 3191 :       *r = *g = *b = in[i * 4 + 0];
; 3192 :       *a = in[i * 4 + 2];
; 3193 :     }
; 3194 :   }
; 3195 :   else if(mode->colortype == LCT_RGBA)
; 3196 :   {
; 3197 :     if(mode->bitdepth == 8)
; 3198 :     {
; 3199 :       *r = in[i * 4 + 0];
; 3200 :       *g = in[i * 4 + 1];
; 3201 :       *b = in[i * 4 + 2];
; 3202 :       *a = in[i * 4 + 3];
; 3203 :     }
; 3204 :     else
; 3205 :     {
; 3206 :       *r = in[i * 8 + 0];
; 3207 :       *g = in[i * 8 + 2];
; 3208 :       *b = in[i * 8 + 4];
; 3209 :       *a = in[i * 8 + 6];
; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/
; 3214 : }
; 3215 : 
; 3216 : /*Similar to getPixelColorRGBA8, but with all the for loops inside of the color
; 3217 : mode test cases, optimized to convert the colors much faster, when converting
; 3218 : to RGBA or RGB with 8 bit per cannel. buffer must be RGBA or RGB output with
; 3219 : enough memory, if has_alpha is true the output is RGBA. mode has the color mode
; 3220 : of the input buffer.*/
; 3221 : static unsigned getPixelColorsRGBA8(unsigned char* buffer, size_t numpixels,
; 3222 :                                     unsigned has_alpha, const unsigned char* in,
; 3223 :                                     const LodePNGColorMode* mode,
; 3224 :                                     unsigned fix_png)
; 3225 : {
; 3226 :   unsigned num_channels = has_alpha ? 4 : 3;
; 3227 :   size_t i;
; 3228 :   if(mode->colortype == LCT_GREY)
; 3229 :   {
; 3230 :     if(mode->bitdepth == 8)
; 3231 :     {
; 3232 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3233 :       {
; 3234 :         buffer[0] = buffer[1] = buffer[2] = in[i];
; 3235 :         if(has_alpha) buffer[3] = mode->key_defined && in[i] == mode->key_r ? 0 : 255;
; 3236 :       }
; 3237 :     }
; 3238 :     else if(mode->bitdepth == 16)
; 3239 :     {
; 3240 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3241 :       {
; 3242 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2];
; 3243 :         if(has_alpha) buffer[3] = mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r ? 0 : 255;
; 3244 :       }
; 3245 :     }
; 3246 :     else
; 3247 :     {
; 3248 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
; 3249 :       size_t j = 0;
; 3250 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3251 :       {
; 3252 :         unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3253 :         buffer[0] = buffer[1] = buffer[2] = (value * 255) / highest;
; 3254 :         if(has_alpha) buffer[3] = mode->key_defined && value == mode->key_r ? 0 : 255;
; 3255 :       }
; 3256 :     }
; 3257 :   }
; 3258 :   else if(mode->colortype == LCT_RGB)
; 3259 :   {
; 3260 :     if(mode->bitdepth == 8)
; 3261 :     {
; 3262 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3263 :       {
; 3264 :         buffer[0] = in[i * 3 + 0];
; 3265 :         buffer[1] = in[i * 3 + 1];
; 3266 :         buffer[2] = in[i * 3 + 2];
; 3267 :         if(has_alpha) buffer[3] = mode->key_defined && buffer[0] == mode->key_r
; 3268 :            && buffer[1]== mode->key_g && buffer[2] == mode->key_b ? 0 : 255;
; 3269 :       }
; 3270 :     }
; 3271 :     else
; 3272 :     {
; 3273 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3274 :       {
; 3275 :         buffer[0] = in[i * 6 + 0];
; 3276 :         buffer[1] = in[i * 6 + 2];
; 3277 :         buffer[2] = in[i * 6 + 4];
; 3278 :         if(has_alpha) buffer[3] = mode->key_defined
; 3279 :            && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3280 :            && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3281 :            && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b ? 0 : 255;
; 3282 :       }
; 3283 :     }
; 3284 :   }
; 3285 :   else if(mode->colortype == LCT_PALETTE)
; 3286 :   {
; 3287 :     unsigned index;
; 3288 :     size_t j = 0;
; 3289 :     for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3290 :     {
; 3291 :       if(mode->bitdepth == 8) index = in[i];
; 3292 :       else index = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3293 : 
; 3294 :       if(index >= mode->palettesize)
; 3295 :       {
; 3296 :         /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3297 :         if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/
; 3298 :         buffer[0] = buffer[1] = buffer[2] = 0;
; 3299 :         if(has_alpha) buffer[3] = 255;
; 3300 :       }
; 3301 :       else
; 3302 :       {
; 3303 :         buffer[0] = mode->palette[index * 4 + 0];
; 3304 :         buffer[1] = mode->palette[index * 4 + 1];
; 3305 :         buffer[2] = mode->palette[index * 4 + 2];
; 3306 :         if(has_alpha) buffer[3] = mode->palette[index * 4 + 3];
; 3307 :       }
; 3308 :     }
; 3309 :   }
; 3310 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3311 :   {
; 3312 :     if(mode->bitdepth == 8)
; 3313 :     {
; 3314 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3315 :       {
; 3316 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2 + 0];
; 3317 :         if(has_alpha) buffer[3] = in[i * 2 + 1];
; 3318 :       }
; 3319 :     }
; 3320 :     else
; 3321 :     {
; 3322 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3323 :       {
; 3324 :         buffer[0] = buffer[1] = buffer[2] = in[i * 4 + 0];
; 3325 :         if(has_alpha) buffer[3] = in[i * 4 + 2];
; 3326 :       }
; 3327 :     }
; 3328 :   }
; 3329 :   else if(mode->colortype == LCT_RGBA)
; 3330 :   {
; 3331 :     if(mode->bitdepth == 8)
; 3332 :     {
; 3333 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3334 :       {
; 3335 :         buffer[0] = in[i * 4 + 0];
; 3336 :         buffer[1] = in[i * 4 + 1];
; 3337 :         buffer[2] = in[i * 4 + 2];
; 3338 :         if(has_alpha) buffer[3] = in[i * 4 + 3];
; 3339 :       }
; 3340 :     }
; 3341 :     else
; 3342 :     {
; 3343 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3344 :       {
; 3345 :         buffer[0] = in[i * 8 + 0];
; 3346 :         buffer[1] = in[i * 8 + 2];
; 3347 :         buffer[2] = in[i * 8 + 4];
; 3348 :         if(has_alpha) buffer[3] = in[i * 8 + 6];
; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/
; 3354 : }
; 3355 : 
; 3356 : /*Get RGBA16 color of pixel with index i (y * width + x) from the raw image with
; 3357 : given color type, but the given color type must be 16-bit itself.*/
; 3358 : static unsigned getPixelColorRGBA16(unsigned short* r, unsigned short* g, unsigned short* b, unsigned short* a,
; 3359 :                                     const unsigned char* in, size_t i, const LodePNGColorMode* mode)
; 3360 : {
; 3361 :   if(mode->bitdepth != 16) return 85; /*error: this function only supports 16-bit input*/
; 3362 : 
; 3363 :   if(mode->colortype == LCT_GREY)
; 3364 :   {
; 3365 :     *r = *g = *b = 256 * in[i * 2 + 0] + in[i * 2 + 1];
; 3366 :     if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
; 3367 :     else *a = 65535;
; 3368 :   }
; 3369 :   else if(mode->colortype == LCT_RGB)
; 3370 :   {
; 3371 :     *r = 256 * in[i * 6 + 0] + in[i * 6 + 1];
; 3372 :     *g = 256 * in[i * 6 + 2] + in[i * 6 + 3];
; 3373 :     *b = 256 * in[i * 6 + 4] + in[i * 6 + 5];
; 3374 :     if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3375 :        && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3376 :        && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
; 3377 :     else *a = 65535;
; 3378 :   }
; 3379 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3380 :   {
; 3381 :     *r = *g = *b = 256 * in[i * 4 + 0] + in[i * 4 + 1];
; 3382 :     *a = 256 * in[i * 4 + 2] + in[i * 4 + 3];
; 3383 :   }
; 3384 :   else if(mode->colortype == LCT_RGBA)
; 3385 :   {
; 3386 :     *r = 256 * in[i * 8 + 0] + in[i * 8 + 1];
; 3387 :     *g = 256 * in[i * 8 + 2] + in[i * 8 + 3];
; 3388 :     *b = 256 * in[i * 8 + 4] + in[i * 8 + 5];
; 3389 :     *a = 256 * in[i * 8 + 6] + in[i * 8 + 7];
; 3390 :   }
; 3391 :   else return 85; /*error: this function only supports 16-bit input, not palettes*/
; 3392 : 
; 3393 :   return 0; /*no error*/
; 3394 : }
; 3395 : 
; 3396 : /*
; 3397 : converts from any color type to 24-bit or 32-bit (later maybe more supported). return value = LodePNG error code
; 3398 : the out buffer must have (w * h * bpp + 7) / 8 bytes, where bpp is the bits per pixel of the output color type
; 3399 : (lodepng_get_bpp) for < 8 bpp images, there may _not_ be padding bits at the end of scanlines.
; 3400 : */
; 3401 : unsigned lodepng_convert(unsigned char* out, const unsigned char* in,
; 3402 :                          LodePNGColorMode* mode_out, const LodePNGColorMode* mode_in,
; 3403 :                          unsigned w, unsigned h, unsigned fix_png)
; 3404 : {
; 3405 :   unsigned error = 0;
; 3406 :   size_t i;
; 3407 :   ColorTree tree;
; 3408 :   size_t numpixels = w * h;
; 3409 : 
; 3410 :   if(lodepng_color_mode_equal(mode_out, mode_in))
; 3411 :   {
; 3412 :     size_t numbytes = lodepng_get_raw_size(w, h, mode_in);
; 3413 :     for(i = 0; i < numbytes; i++) out[i] = in[i];
; 3414 :     return error;
; 3415 :   }
; 3416 : 
; 3417 :   if(mode_out->colortype == LCT_PALETTE)
; 3418 :   {
; 3419 :     size_t palsize = 1 << mode_out->bitdepth;
; 3420 :     if(mode_out->palettesize < palsize) palsize = mode_out->palettesize;
; 3421 :     color_tree_init(&tree);
; 3422 :     for(i = 0; i < palsize; i++)
; 3423 :     {
; 3424 :       unsigned char* p = &mode_out->palette[i * 4];
; 3425 :       color_tree_add(&tree, p[0], p[1], p[2], p[3], i);
; 3426 :     }
; 3427 :   }
; 3428 : 
; 3429 :   if(mode_in->bitdepth == 16 && mode_out->bitdepth == 16)
; 3430 :   {
; 3431 :     for(i = 0; i < numpixels; i++)
; 3432 :     {
; 3433 :       unsigned short r = 0, g = 0, b = 0, a = 0;
; 3434 :       error = getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode_in);
; 3435 :       if(error) break;
; 3436 :       error = rgba16ToPixel(out, i, mode_out, r, g, b, a);
; 3437 :       if(error) break;
; 3438 :     }
; 3439 :   }
; 3440 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGBA)
; 3441 :   {
; 3442 :     error = getPixelColorsRGBA8(out, numpixels, 1, in, mode_in, fix_png);
; 3443 :   }
; 3444 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGB)
; 3445 :   {
; 3446 :     error = getPixelColorsRGBA8(out, numpixels, 0, in, mode_in, fix_png);
; 3447 :   }
; 3448 :   else
; 3449 :   {
; 3450 :     unsigned char r = 0, g = 0, b = 0, a = 0;
; 3451 :     for(i = 0; i < numpixels; i++)
; 3452 :     {
; 3453 :       error = getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode_in, fix_png);
; 3454 :       if(error) break;
; 3455 :       error = rgba8ToPixel(out, i, mode_out, &tree, r, g, b, a);
; 3456 :       if(error) break;
; 3457 :     }
; 3458 :   }
; 3459 : 
; 3460 :   if(mode_out->colortype == LCT_PALETTE)
; 3461 :   {
; 3462 :     color_tree_cleanup(&tree);
; 3463 :   }
; 3464 : 
; 3465 :   return error;
; 3466 : }
; 3467 : 
; 3468 : #ifdef LODEPNG_COMPILE_ENCODER
; 3469 : 
; 3470 : typedef struct ColorProfile
; 3471 : {
; 3472 :   unsigned char sixteenbit; /*needs more than 8 bits per channel*/
; 3473 :   unsigned char sixteenbit_done;
; 3474 : 
; 3475 : 
; 3476 :   unsigned char colored; /*not greyscale*/
; 3477 :   unsigned char colored_done;
; 3478 : 
; 3479 :   unsigned char key; /*a color key is required, or more*/
; 3480 :   unsigned short key_r; /*these values are always in 16-bit bitdepth in the profile*/
; 3481 :   unsigned short key_g;
; 3482 :   unsigned short key_b;
; 3483 :   unsigned char alpha; /*alpha channel, or alpha palette, required*/
; 3484 :   unsigned char alpha_done;
; 3485 : 
; 3486 :   unsigned numcolors;
; 3487 :   ColorTree tree; /*for listing the counted colors, up to 256*/
; 3488 :   unsigned char* palette; /*size 1024. Remember up to the first 256 RGBA colors*/
; 3489 :   unsigned maxnumcolors; /*if more than that amount counted*/
; 3490 :   unsigned char numcolors_done;
; 3491 : 
; 3492 :   unsigned greybits; /*amount of bits required for greyscale (1, 2, 4, 8). Does not take 16 bit into account.*/
; 3493 :   unsigned char greybits_done;
; 3494 : 
; 3495 : } ColorProfile;
; 3496 : 
; 3497 : static void color_profile_init(ColorProfile* profile, const LodePNGColorMode* mode)
; 3498 : {
; 3499 :   profile->sixteenbit = 0;
; 3500 :   profile->sixteenbit_done = mode->bitdepth == 16 ? 0 : 1;
; 3501 : 
; 3502 :   profile->colored = 0;
; 3503 :   profile->colored_done = lodepng_is_greyscale_type(mode) ? 1 : 0;
; 3504 : 
; 3505 :   profile->key = 0;
; 3506 :   profile->alpha = 0;
; 3507 :   profile->alpha_done = lodepng_can_have_alpha(mode) ? 0 : 1;
; 3508 : 
; 3509 :   profile->numcolors = 0;
; 3510 :   color_tree_init(&profile->tree);
; 3511 :   profile->palette = (unsigned char*)lodepng_malloc(1024);
; 3512 :   profile->maxnumcolors = 257;
; 3513 :   if(lodepng_get_bpp(mode) <= 8)
; 3514 :   {
; 3515 :     int bpp = lodepng_get_bpp(mode);
; 3516 :     profile->maxnumcolors = bpp == 1 ? 2 : (bpp == 2 ? 4 : (bpp == 4 ? 16 : 256));
; 3517 :   }
; 3518 :   profile->numcolors_done = 0;
; 3519 : 
; 3520 :   profile->greybits = 1;
; 3521 :   profile->greybits_done = lodepng_get_bpp(mode) == 1 ? 1 : 0;
; 3522 : }
; 3523 : 
; 3524 : static void color_profile_cleanup(ColorProfile* profile)
; 3525 : {
; 3526 :   color_tree_cleanup(&profile->tree);
; 3527 :   lodepng_free(profile->palette);
; 3528 : }
; 3529 : 
; 3530 : /*function used for debug purposes with C++*/
; 3531 : /*void printColorProfile(ColorProfile* p)
; 3532 : {
; 3533 :   std::cout << "sixteenbit: " << (int)p->sixteenbit << std::endl;
; 3534 :   std::cout << "sixteenbit_done: " << (int)p->sixteenbit_done << std::endl;
; 3535 :   std::cout << "colored: " << (int)p->colored << std::endl;
; 3536 :   std::cout << "colored_done: " << (int)p->colored_done << std::endl;
; 3537 :   std::cout << "key: " << (int)p->key << std::endl;
; 3538 :   std::cout << "key_r: " << (int)p->key_r << std::endl;
; 3539 :   std::cout << "key_g: " << (int)p->key_g << std::endl;
; 3540 :   std::cout << "key_b: " << (int)p->key_b << std::endl;
; 3541 :   std::cout << "alpha: " << (int)p->alpha << std::endl;
; 3542 :   std::cout << "alpha_done: " << (int)p->alpha_done << std::endl;
; 3543 :   std::cout << "numcolors: " << (int)p->numcolors << std::endl;
; 3544 :   std::cout << "maxnumcolors: " << (int)p->maxnumcolors << std::endl;
; 3545 :   std::cout << "numcolors_done: " << (int)p->numcolors_done << std::endl;
; 3546 :   std::cout << "greybits: " << (int)p->greybits << std::endl;
; 3547 :   std::cout << "greybits_done: " << (int)p->greybits_done << std::endl;
; 3548 : }*/
; 3549 : 
; 3550 : /*Returns how many bits needed to represent given value (max 8 bit)*/
; 3551 : unsigned getValueRequiredBits(unsigned short value)
; 3552 : {
; 3553 :   if(value == 0 || value == 255) return 1;
; 3554 :   /*The scaling of 2-bit and 4-bit values uses multiples of 85 and 17*/
; 3555 :   if(value % 17 == 0) return value % 85 == 0 ? 2 : 4;
; 3556 :   return 8;
; 3557 : }
; 3558 : 
; 3559 : /*profile must already have been inited with mode.
; 3560 : It's ok to set some parameters of profile to done already.*/
; 3561 : static unsigned get_color_profile(ColorProfile* profile,
; 3562 :                                   const unsigned char* in,
; 3563 :                                   size_t numpixels /*must be full image size, for certain filesize based choices*/,
; 3564 :                                   const LodePNGColorMode* mode,
; 3565 :                                   unsigned fix_png)
; 3566 : {
; 3567 :   unsigned error = 0;
; 3568 :   size_t i;
; 3569 : 
; 3570 :   if(mode->bitdepth == 16)
; 3571 :   {
; 3572 :     for(i = 0; i < numpixels; i++)
; 3573 :     {
; 3574 :       unsigned short r, g, b, a;
; 3575 :       error = getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode);
; 3576 :       if(error) break;
; 3577 : 
; 3578 :       /*a color is considered good for 8-bit if the first byte and the second byte are equal,
; 3579 :         (so if it's divisible through 257), NOT necessarily if the second byte is 0*/
; 3580 :       if(!profile->sixteenbit_done
; 3581 :           && (((r & 255) != ((r >> 8) & 255))
; 3582 :            || ((g & 255) != ((g >> 8) & 255))
; 3583 :            || ((b & 255) != ((b >> 8) & 255))))
; 3584 :       {
; 3585 :         profile->sixteenbit = 1;
; 3586 :         profile->sixteenbit_done = 1;
; 3587 :         profile->greybits_done = 1; /*greybits is not applicable anymore at 16-bit*/
; 3588 :         profile->numcolors_done = 1; /*counting colors no longer useful, palette doesn't support 16-bit*/
; 3589 :       }
; 3590 : 
; 3591 :       if(!profile->colored_done && (r != g || r != b))
; 3592 :       {
; 3593 :         profile->colored = 1;
; 3594 :         profile->colored_done = 1;
; 3595 :         profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3596 :       }
; 3597 : 
; 3598 :       if(!profile->alpha_done && a != 65535)
; 3599 :       {
; 3600 :         /*only use color key if numpixels large enough to justify tRNS chunk size*/
; 3601 :         if(a == 0 && numpixels > 16 && !(profile->key && (r != profile->key_r || g != profile->key_g || b != profile->key_b)))
; 3602 :         {
; 3603 :           if(!profile->alpha && !profile->key)
; 3604 :           {
; 3605 :             profile->key = 1;
; 3606 :             profile->key_r = r;
; 3607 :             profile->key_g = g;
; 3608 :             profile->key_b = b;
; 3609 :           }
; 3610 :         }
; 3611 :         else
; 3612 :         {
; 3613 :           profile->alpha = 1;
; 3614 :           profile->alpha_done = 1;
; 3615 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3616 :         }
; 3617 :       }
; 3618 : 
; 3619 :       /* Color key cannot be used if an opaque pixel also has that RGB color. */
; 3620 :       if(!profile->alpha_done && a == 65535 && profile->key
; 3621 :           && r == profile->key_r && g == profile->key_g && b == profile->key_b)
; 3622 :       {
; 3623 :           profile->alpha = 1;
; 3624 :           profile->alpha_done = 1;
; 3625 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3626 :       }
; 3627 : 
; 3628 :       if(!profile->greybits_done)
; 3629 :       {
; 3630 :         /*assuming 8-bit r, this test does not care about 16-bit*/
; 3631 :         unsigned bits = getValueRequiredBits(r);
; 3632 :         if(bits > profile->greybits) profile->greybits = bits;
; 3633 :         if(profile->greybits >= 8) profile->greybits_done = 1;
; 3634 :       }
; 3635 : 
; 3636 :       if(!profile->numcolors_done)
; 3637 :       {
; 3638 :         /*assuming 8-bit rgba, this test does not care about 16-bit*/
; 3639 :         if(!color_tree_has(&profile->tree, (unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a))
; 3640 :         {
; 3641 :           color_tree_add(&profile->tree, (unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a,
; 3642 :             profile->numcolors);
; 3643 :           if(profile->numcolors < 256)
; 3644 :           {
; 3645 :             unsigned char* p = profile->palette;
; 3646 :             unsigned i = profile->numcolors;
; 3647 :             p[i * 4 + 0] = (unsigned char)r;
; 3648 :             p[i * 4 + 1] = (unsigned char)g;
; 3649 :             p[i * 4 + 2] = (unsigned char)b;
; 3650 :             p[i * 4 + 3] = (unsigned char)a;
; 3651 :           }
; 3652 :           profile->numcolors++;
; 3653 :           if(profile->numcolors >= profile->maxnumcolors) profile->numcolors_done = 1;
; 3654 :         }
; 3655 :       }
; 3656 : 
; 3657 :       if(profile->alpha_done && profile->numcolors_done
; 3658 :       && profile->colored_done && profile->sixteenbit_done && profile->greybits_done)
; 3659 :       {
; 3660 :         break;
; 3661 :       }
; 3662 :     };
; 3663 :   }
; 3664 :   else /* < 16-bit */
; 3665 :   {
; 3666 :     for(i = 0; i < numpixels; i++)
; 3667 :     {
; 3668 :       unsigned char r = 0, g = 0, b = 0, a = 0;
; 3669 :       error = getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode, fix_png);
; 3670 :       if(error) break;
; 3671 : 
; 3672 :       if(!profile->colored_done && (r != g || r != b))
; 3673 :       {
; 3674 :         profile->colored = 1;
; 3675 :         profile->colored_done = 1;
; 3676 :         profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3677 :       }
; 3678 : 
; 3679 :       if(!profile->alpha_done && a != 255)
; 3680 :       {
; 3681 :         if(a == 0 && !(profile->key && (r != profile->key_r || g != profile->key_g || b != profile->key_b)))
; 3682 :         {
; 3683 :           if(!profile->key)
; 3684 :           {
; 3685 :             profile->key = 1;
; 3686 :             profile->key_r = r;
; 3687 :             profile->key_g = g;
; 3688 :             profile->key_b = b;
; 3689 :           }
; 3690 :         }
; 3691 :         else
; 3692 :         {
; 3693 :           profile->alpha = 1;
; 3694 :           profile->alpha_done = 1;
; 3695 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3696 :         }
; 3697 :       }
; 3698 : 
; 3699 :       /* Color key cannot be used if an opaque pixel also has that RGB color. */
; 3700 :       if(!profile->alpha_done && a == 255 && profile->key
; 3701 :           && r == profile->key_r && g == profile->key_g && b == profile->key_b)
; 3702 :       {
; 3703 :           profile->alpha = 1;
; 3704 :           profile->alpha_done = 1;
; 3705 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3706 :       }
; 3707 : 
; 3708 :       if(!profile->greybits_done)
; 3709 :       {
; 3710 :         unsigned bits = getValueRequiredBits(r);
; 3711 :         if(bits > profile->greybits) profile->greybits = bits;
; 3712 :         if(profile->greybits >= 8) profile->greybits_done = 1;
; 3713 :       }
; 3714 : 
; 3715 :       if(!profile->numcolors_done)
; 3716 :       {
; 3717 :         if(!color_tree_has(&profile->tree, r, g, b, a))
; 3718 :         {
; 3719 : 
; 3720 :           color_tree_add(&profile->tree, r, g, b, a, profile->numcolors);
; 3721 :           if(profile->numcolors < 256)
; 3722 :           {
; 3723 :             unsigned char* p = profile->palette;
; 3724 :             unsigned i = profile->numcolors;
; 3725 :             p[i * 4 + 0] = r;
; 3726 :             p[i * 4 + 1] = g;
; 3727 :             p[i * 4 + 2] = b;
; 3728 :             p[i * 4 + 3] = a;
; 3729 :           }
; 3730 :           profile->numcolors++;
; 3731 :           if(profile->numcolors >= profile->maxnumcolors) profile->numcolors_done = 1;
; 3732 :         }
; 3733 :       }
; 3734 : 
; 3735 :       if(profile->alpha_done && profile->numcolors_done && profile->colored_done && profile->greybits_done)
; 3736 :       {
; 3737 :         break;
; 3738 :       }
; 3739 :     };
; 3740 :   }
; 3741 : 
; 3742 :   /*make the profile's key always 16-bit for consistency*/
; 3743 :   if(mode->bitdepth < 16)
; 3744 :   {
; 3745 :     /*repeat each byte twice*/
; 3746 :     profile->key_r *= 257;
; 3747 :     profile->key_g *= 257;
; 3748 :     profile->key_b *= 257;
; 3749 :   }
; 3750 : 
; 3751 :   return error;
; 3752 : }
; 3753 : 
; 3754 : static void setColorKeyFrom16bit(LodePNGColorMode* mode_out, unsigned r, unsigned g, unsigned b, unsigned bitdepth)
; 3755 : {
; 3756 :   unsigned mask = (1 << bitdepth) - 1;
; 3757 :   mode_out->key_defined = 1;
; 3758 :   mode_out->key_r = r & mask;
; 3759 :   mode_out->key_g = g & mask;
; 3760 :   mode_out->key_b = b & mask;
; 3761 : }
; 3762 : 
; 3763 : /*updates values of mode with a potentially smaller color model. mode_out should
; 3764 : contain the user chosen color model, but will be overwritten with the new chosen one.*/
; 3765 : unsigned lodepng_auto_choose_color(LodePNGColorMode* mode_out,
; 3766 :                                    const unsigned char* image, unsigned w, unsigned h,
; 3767 :                                    const LodePNGColorMode* mode_in,
; 3768 :                                    LodePNGAutoConvert auto_convert)
; 3769 : {
; 3770 :   ColorProfile profile;
; 3771 :   unsigned error = 0;
; 3772 :   int no_nibbles = auto_convert == LAC_AUTO_NO_NIBBLES || auto_convert == LAC_AUTO_NO_NIBBLES_NO_PALETTE;
; 3773 :   int no_palette = auto_convert == LAC_AUTO_NO_PALETTE || auto_convert == LAC_AUTO_NO_NIBBLES_NO_PALETTE;
; 3774 : 
; 3775 :   if(auto_convert == LAC_ALPHA)
; 3776 :   {
; 3777 :     if(mode_out->colortype != LCT_RGBA && mode_out->colortype != LCT_GREY_ALPHA) return 0;
; 3778 :   }
; 3779 : 
; 3780 :   color_profile_init(&profile, mode_in);
; 3781 :   if(auto_convert == LAC_ALPHA)
; 3782 :   {
; 3783 :     profile.colored_done = 1;
; 3784 :     profile.greybits_done = 1;
; 3785 :     profile.numcolors_done = 1;
; 3786 :     profile.sixteenbit_done = 1;
; 3787 :   }
; 3788 :   error = get_color_profile(&profile, image, w * h, mode_in, 0 /*fix_png*/);
; 3789 :   if(!error && auto_convert == LAC_ALPHA)
; 3790 :   {
; 3791 :     if(!profile.alpha)
; 3792 :     {
; 3793 :       mode_out->colortype = (mode_out->colortype == LCT_RGBA ? LCT_RGB : LCT_GREY);
; 3794 :       if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3795 :     }
; 3796 :   }
; 3797 :   else if(!error && auto_convert != LAC_ALPHA)
; 3798 :   {
; 3799 :     mode_out->key_defined = 0;
; 3800 : 
; 3801 :     if(profile.sixteenbit)
; 3802 :     {
; 3803 :       mode_out->bitdepth = 16;
; 3804 :       if(profile.alpha)
; 3805 :       {
; 3806 :         mode_out->colortype = profile.colored ? LCT_RGBA : LCT_GREY_ALPHA;
; 3807 :       }
; 3808 :       else
; 3809 :       {
; 3810 :         mode_out->colortype = profile.colored ? LCT_RGB : LCT_GREY;
; 3811 :         if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3812 :       }
; 3813 :     }
; 3814 :     else /*less than 16 bits per channel*/
; 3815 :     {
; 3816 :       /*don't add palette overhead if image hasn't got a lot of pixels*/
; 3817 :       unsigned n = profile.numcolors;
; 3818 :       int palette_ok = !no_palette && n <= 256 && (n * 2 < w * h);
; 3819 :       unsigned palettebits = n <= 2 ? 1 : (n <= 4 ? 2 : (n <= 16 ? 4 : 8));
; 3820 :       int grey_ok = !profile.colored && !profile.alpha; /*grey without alpha, with potentially low bits*/
; 3821 :       if(palette_ok || grey_ok)
; 3822 :       {
; 3823 :         if(!palette_ok || (grey_ok && profile.greybits <= palettebits))
; 3824 :         {
; 3825 :           unsigned grey = profile.key_r;
; 3826 :           mode_out->colortype = LCT_GREY;
; 3827 :           mode_out->bitdepth = profile.greybits;
; 3828 :           if(profile.key) setColorKeyFrom16bit(mode_out, grey, grey, grey, mode_out->bitdepth);
; 3829 :         }
; 3830 :         else
; 3831 :         {
; 3832 :           /*fill in the palette*/
; 3833 :           unsigned i;
; 3834 :           unsigned char* p = profile.palette;
; 3835 :           /*remove potential earlier palette*/
; 3836 :           lodepng_palette_clear(mode_out);
; 3837 :           for(i = 0; i < profile.numcolors; i++)
; 3838 :           {
; 3839 :             error = lodepng_palette_add(mode_out, p[i * 4 + 0], p[i * 4 + 1], p[i * 4 + 2], p[i * 4 + 3]);
; 3840 :             if(error) break;
; 3841 :           }
; 3842 : 
; 3843 :           mode_out->colortype = LCT_PALETTE;
; 3844 :           mode_out->bitdepth = palettebits;
; 3845 :         }
; 3846 :       }
; 3847 :       else /*8-bit per channel*/
; 3848 :       {
; 3849 :         mode_out->bitdepth = 8;
; 3850 :         if(profile.alpha)
; 3851 :         {
; 3852 :           mode_out->colortype = profile.colored ? LCT_RGBA : LCT_GREY_ALPHA;
; 3853 :         }
; 3854 :         else
; 3855 :         {
; 3856 :           mode_out->colortype = profile.colored ? LCT_RGB : LCT_GREY /*LCT_GREY normally won't occur, already done earlier*/;
; 3857 :           if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3858 :         }
; 3859 :       }
; 3860 :     }
; 3861 :   }
; 3862 : 
; 3863 :   color_profile_cleanup(&profile);
; 3864 : 
; 3865 :   if(mode_out->colortype == LCT_PALETTE && mode_in->palettesize == mode_out->palettesize)
; 3866 :   {
; 3867 :     /*In this case keep the palette order of the input, so that the user can choose an optimal one*/
; 3868 :     size_t i;
; 3869 :     for(i = 0; i < mode_in->palettesize * 4; i++)
; 3870 :     {
; 3871 :       mode_out->palette[i] = mode_in->palette[i];
; 3872 :     }
; 3873 :   }
; 3874 : 
; 3875 :   if(no_nibbles && mode_out->bitdepth < 8)
; 3876 :   {
; 3877 :     /*palette can keep its small amount of colors, as long as no indices use it*/
; 3878 :     mode_out->bitdepth = 8;
; 3879 :   }
; 3880 : 
; 3881 :   return error;
; 3882 : }
; 3883 : 
; 3884 : #endif /* #ifdef LODEPNG_COMPILE_ENCODER */
; 3885 : 
; 3886 : /*
; 3887 : Paeth predicter, used by PNG filter type 4
; 3888 : The parameters are of type short, but should come from unsigned chars, the shorts
; 3889 : are only needed to make the paeth calculation correct.
; 3890 : */
; 3891 : static unsigned char paethPredictor(short a, short b, short c)
; 3892 : {
; 3893 :   short pa = abs(b - c);
; 3894 :   short pb = abs(a - c);
; 3895 :   short pc = abs(a + b - c - c);
; 3896 : 
; 3897 :   if(pc < pa && pc < pb) return (unsigned char)c;
; 3898 :   else if(pb < pa) return (unsigned char)b;
; 3899 :   else return (unsigned char)a;
; 3900 : }
; 3901 : 
; 3902 : /*shared values used by multiple Adam7 related functions*/
; 3903 : 
; 3904 : static const unsigned ADAM7_IX[7] = { 0, 4, 0, 2, 0, 1, 0 }; /*x start values*/
; 3905 : static const unsigned ADAM7_IY[7] = { 0, 0, 4, 0, 2, 0, 1 }; /*y start values*/
; 3906 : static const unsigned ADAM7_DX[7] = { 8, 8, 4, 4, 2, 2, 1 }; /*x delta values*/
; 3907 : static const unsigned ADAM7_DY[7] = { 8, 8, 8, 4, 4, 2, 2 }; /*y delta values*/
; 3908 : 
; 3909 : /*
; 3910 : Outputs various dimensions and positions in the image related to the Adam7 reduced images.
; 3911 : passw: output containing the width of the 7 passes
; 3912 : passh: output containing the height of the 7 passes
; 3913 : filter_passstart: output containing the index of the start and end of each
; 3914 :  reduced image with filter bytes
; 3915 : padded_passstart output containing the index of the start and end of each
; 3916 :  reduced image when without filter bytes but with padded scanlines
; 3917 : passstart: output containing the index of the start and end of each reduced
; 3918 :  image without padding between scanlines, but still padding between the images
; 3919 : w, h: width and height of non-interlaced image
; 3920 : bpp: bits per pixel
; 3921 : "padded" is only relevant if bpp is less than 8 and a scanline or image does not
; 3922 :  end at a full byte
; 3923 : */
; 3924 : static void Adam7_getpassvalues(unsigned passw[7], unsigned passh[7], size_t filter_passstart[8],
; 3925 :                                 size_t padded_passstart[8], size_t passstart[8], unsigned w, unsigned h, unsigned bpp)
; 3926 : {
; 3927 :   /*the passstart values have 8 values: the 8th one indicates the byte after the end of the 7th (= last) pass*/
; 3928 :   unsigned i;
; 3929 : 
; 3930 :   /*calculate width and height in pixels of each pass*/
; 3931 :   for(i = 0; i < 7; i++)
; 3932 :   {
; 3933 :     passw[i] = (w + ADAM7_DX[i] - ADAM7_IX[i] - 1) / ADAM7_DX[i];
; 3934 :     passh[i] = (h + ADAM7_DY[i] - ADAM7_IY[i] - 1) / ADAM7_DY[i];
; 3935 :     if(passw[i] == 0) passh[i] = 0;
; 3936 :     if(passh[i] == 0) passw[i] = 0;
; 3937 :   }
; 3938 : 
; 3939 :   filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
; 3940 :   for(i = 0; i < 7; i++)
; 3941 :   {
; 3942 :     /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
; 3943 :     filter_passstart[i + 1] = filter_passstart[i]
; 3944 :                             + ((passw[i] && passh[i]) ? passh[i] * (1 + (passw[i] * bpp + 7) / 8) : 0);
; 3945 :     /*bits padded if needed to fill full byte at end of each scanline*/
; 3946 :     padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7) / 8);
; 3947 :     /*only padded at end of reduced image*/
; 3948 :     passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7) / 8;
; 3949 :   }
; 3950 : }
; 3951 : 
; 3952 : #ifdef LODEPNG_COMPILE_DECODER
; 3953 : 
; 3954 : /* ////////////////////////////////////////////////////////////////////////// */
; 3955 : /* / PNG Decoder                                                            / */
; 3956 : /* ////////////////////////////////////////////////////////////////////////// */
; 3957 : 
; 3958 : /*read the information from the header and store it in the LodePNGInfo. return value is error*/
; 3959 : unsigned lodepng_inspect(unsigned* w, unsigned* h, LodePNGState* state,
; 3960 :                          const unsigned char* in, size_t insize)
; 3961 : {
; 3962 :   LodePNGInfo* info = &state->info_png;
; 3963 :   if(insize == 0 || in == 0)
; 3964 :   {
; 3965 :     CERROR_RETURN_ERROR(state->error, 48); /*error: the given data is empty*/
; 3966 :   }
; 3967 :   if(insize < 29)
; 3968 :   {
; 3969 :     CERROR_RETURN_ERROR(state->error, 27); /*error: the data length is smaller than the length of a PNG header*/
; 3970 :   }
; 3971 : 
; 3972 :   /*when decoding a new PNG image, make sure all parameters created after previous decoding are reset*/
; 3973 :   lodepng_info_cleanup(info);
; 3974 :   lodepng_info_init(info);
; 3975 : 
; 3976 :   if(in[0] != 137 || in[1] != 80 || in[2] != 78 || in[3] != 71
; 3977 :      || in[4] != 13 || in[5] != 10 || in[6] != 26 || in[7] != 10)
; 3978 :   {
; 3979 :     CERROR_RETURN_ERROR(state->error, 28); /*error: the first 8 bytes are not the correct PNG signature*/
; 3980 :   }
; 3981 :   if(in[12] != 'I' || in[13] != 'H' || in[14] != 'D' || in[15] != 'R')
; 3982 :   {
; 3983 :     CERROR_RETURN_ERROR(state->error, 29); /*error: it doesn't start with a IHDR chunk!*/
; 3984 :   }
; 3985 : 
; 3986 :   /*read the values given in the header*/
; 3987 :   *w = lodepng_read32bitInt(&in[16]);
; 3988 :   *h = lodepng_read32bitInt(&in[20]);
; 3989 :   info->color.bitdepth = in[24];
; 3990 :   info->color.colortype = (LodePNGColorType)in[25];
; 3991 :   info->compression_method = in[26];
; 3992 :   info->filter_method = in[27];
; 3993 :   info->interlace_method = in[28];
; 3994 : 
; 3995 :   if(!state->decoder.ignore_crc)
; 3996 :   {
; 3997 :     unsigned CRC = lodepng_read32bitInt(&in[29]);
; 3998 :     unsigned checksum = lodepng_crc32(&in[12], 17);
; 3999 :     if(CRC != checksum)
; 4000 :     {
; 4001 :       CERROR_RETURN_ERROR(state->error, 57); /*invalid CRC*/
; 4002 :     }
; 4003 :   }
; 4004 : 
; 4005 :   /*error: only compression method 0 is allowed in the specification*/
; 4006 :   if(info->compression_method != 0) CERROR_RETURN_ERROR(state->error, 32);
; 4007 :   /*error: only filter method 0 is allowed in the specification*/
; 4008 :   if(info->filter_method != 0) CERROR_RETURN_ERROR(state->error, 33);
; 4009 :   /*error: only interlace methods 0 and 1 exist in the specification*/
; 4010 :   if(info->interlace_method > 1) CERROR_RETURN_ERROR(state->error, 34);
; 4011 : 
; 4012 :   state->error = checkColorValidity(info->color.colortype, info->color.bitdepth);
; 4013 :   return state->error;
; 4014 : }
; 4015 : 
; 4016 : static unsigned unfilterScanline(unsigned char* recon, const unsigned char* scanline, const unsigned char* precon,
; 4017 :                                  size_t bytewidth, unsigned char filterType, size_t length)
; 4018 : {
; 4019 :   /*
; 4020 :   For PNG filter method 0
; 4021 :   unfilter a PNG image scanline by scanline. when the pixels are smaller than 1 byte,
; 4022 :   the filter works byte per byte (bytewidth = 1)
; 4023 :   precon is the previous unfiltered scanline, recon the result, scanline the current one
; 4024 :   the incoming scanlines do NOT include the filtertype byte, that one is given in the parameter filterType instead
; 4025 :   recon and scanline MAY be the same memory address! precon must be disjoint.
; 4026 :   */
; 4027 : 
; 4028 :   size_t i;
; 4029 :   switch(filterType)
; 4030 :   {
; 4031 :     case 0:
; 4032 :       for(i = 0; i < length; i++) recon[i] = scanline[i];
; 4033 :       break;
; 4034 :     case 1:
; 4035 :       for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];
; 4036 :       for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth];
; 4037 :       break;
; 4038 :     case 2:
; 4039 :       if(precon)
; 4040 :       {
; 4041 :         for(i = 0; i < length; i++) recon[i] = scanline[i] + precon[i];
; 4042 :       }
; 4043 :       else
; 4044 :       {
; 4045 :         for(i = 0; i < length; i++) recon[i] = scanline[i];
; 4046 :       }
; 4047 :       break;
; 4048 :     case 3:
; 4049 :       if(precon)
; 4050 :       {
; 4051 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i] + precon[i] / 2;
; 4052 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + ((recon[i - bytewidth] + precon[i]) / 2);
; 4053 :       }
; 4054 :       else
; 4055 :       {
; 4056 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];
; 4057 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth] / 2;
; 4058 :       }
; 4059 :       break;
; 4060 :     case 4:
; 4061 :       if(precon)
; 4062 :       {
; 4063 :         for(i = 0; i < bytewidth; i++)
; 4064 :         {
; 4065 :           recon[i] = (scanline[i] + precon[i]); /*paethPredictor(0, precon[i], 0) is always precon[i]*/
; 4066 :         }
; 4067 :         for(i = bytewidth; i < length; i++)
; 4068 :         {
; 4069 :           recon[i] = (scanline[i] + paethPredictor(recon[i - bytewidth], precon[i], precon[i - bytewidth]));
; 4070 :         }
; 4071 :       }
; 4072 :       else
; 4073 :       {
; 4074 :         for(i = 0; i < bytewidth; i++)
; 4075 :         {
; 4076 :           recon[i] = scanline[i];
; 4077 :         }
; 4078 :         for(i = bytewidth; i < length; i++)
; 4079 :         {
; 4080 :           /*paethPredictor(recon[i - bytewidth], 0, 0) is always recon[i - bytewidth]*/
; 4081 :           recon[i] = (scanline[i] + recon[i - bytewidth]);
; 4082 :         }
; 4083 :       }
; 4084 :       break;
; 4085 :     default: return 36; /*error: unexisting filter type given*/
; 4086 :   }
; 4087 :   return 0;
; 4088 : }
; 4089 : 
; 4090 : static unsigned unfilter(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
; 4091 : {
; 4092 :   /*
; 4093 :   For PNG filter method 0
; 4094 :   this function unfilters a single image (e.g. without interlacing this is called once, with Adam7 seven times)
; 4095 :   out must have enough bytes allocated already, in must have the scanlines + 1 filtertype byte per scanline
; 4096 :   w and h are image dimensions or dimensions of reduced image, bpp is bits per pixel
; 4097 :   in and out are allowed to be the same memory address (but aren't the same size since in has the extra filter bytes)
; 4098 :   */
; 4099 : 
; 4100 :   unsigned y;
; 4101 :   unsigned char* prevline = 0;
; 4102 : 
; 4103 :   /*bytewidth is used for filtering, is 1 when bpp < 8, number of bytes per pixel otherwise*/
; 4104 :   size_t bytewidth = (bpp + 7) / 8;
; 4105 :   size_t linebytes = (w * bpp + 7) / 8;
; 4106 : 
; 4107 :   for(y = 0; y < h; y++)
; 4108 :   {
; 4109 :     size_t outindex = linebytes * y;
; 4110 :     size_t inindex = (1 + linebytes) * y; /*the extra filterbyte added to each row*/
; 4111 :     unsigned char filterType = in[inindex];
; 4112 : 
; 4113 :     CERROR_TRY_RETURN(unfilterScanline(&out[outindex], &in[inindex + 1], prevline, bytewidth, filterType, linebytes));
; 4114 : 
; 4115 :     prevline = &out[outindex];
; 4116 :   }
; 4117 : 
; 4118 :   return 0;
; 4119 : }
; 4120 : 
; 4121 : /*
; 4122 : in: Adam7 interlaced image, with no padding bits between scanlines, but between
; 4123 :  reduced images so that each reduced image starts at a byte.
; 4124 : out: the same pixels, but re-ordered so that they're now a non-interlaced image with size w*h
; 4125 : bpp: bits per pixel
; 4126 : out has the following size in bits: w * h * bpp.
; 4127 : in is possibly bigger due to padding bits between reduced images.
; 4128 : out must be big enough AND must be 0 everywhere if bpp < 8 in the current implementation
; 4129 : (because that's likely a little bit faster)
; 4130 : NOTE: comments about padding bits are only relevant if bpp < 8
; 4131 : */
; 4132 : static void Adam7_deinterlace(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
; 4133 : {
; 4134 :   unsigned passw[7], passh[7];
; 4135 :   size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4136 :   unsigned i;
; 4137 : 
; 4138 :   Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 4139 : 
; 4140 :   if(bpp >= 8)
; 4141 :   {
; 4142 :     for(i = 0; i < 7; i++)
; 4143 :     {
; 4144 :       unsigned x, y, b;
; 4145 :       size_t bytewidth = bpp / 8;
; 4146 :       for(y = 0; y < passh[i]; y++)
; 4147 :       for(x = 0; x < passw[i]; x++)
; 4148 :       {
; 4149 :         size_t pixelinstart = passstart[i] + (y * passw[i] + x) * bytewidth;
; 4150 :         size_t pixeloutstart = ((ADAM7_IY[i] + y * ADAM7_DY[i]) * w + ADAM7_IX[i] + x * ADAM7_DX[i]) * bytewidth;
; 4151 :         for(b = 0; b < bytewidth; b++)
; 4152 :         {
; 4153 :           out[pixeloutstart + b] = in[pixelinstart + b];
; 4154 :         }
; 4155 :       }
; 4156 :     }
; 4157 :   }
; 4158 :   else /*bpp < 8: Adam7 with pixels < 8 bit is a bit trickier: with bit pointers*/
; 4159 :   {
; 4160 :     for(i = 0; i < 7; i++)
; 4161 :     {
; 4162 :       unsigned x, y, b;
; 4163 :       unsigned ilinebits = bpp * passw[i];
; 4164 :       unsigned olinebits = bpp * w;
; 4165 :       size_t obp, ibp; /*bit pointers (for out and in buffer)*/
; 4166 :       for(y = 0; y < passh[i]; y++)
; 4167 :       for(x = 0; x < passw[i]; x++)
; 4168 :       {
; 4169 :         ibp = (8 * passstart[i]) + (y * ilinebits + x * bpp);
; 4170 :         obp = (ADAM7_IY[i] + y * ADAM7_DY[i]) * olinebits + (ADAM7_IX[i] + x * ADAM7_DX[i]) * bpp;
; 4171 :         for(b = 0; b < bpp; b++)
; 4172 :         {
; 4173 :           unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4174 :           /*note that this function assumes the out buffer is completely 0, use setBitOfReversedStream otherwise*/
; 4175 :           setBitOfReversedStream0(&obp, out, bit);
; 4176 :         }
; 4177 :       }
; 4178 :     }
; 4179 :   }
; 4180 : }
; 4181 : 
; 4182 : static void removePaddingBits(unsigned char* out, const unsigned char* in,
; 4183 :                               size_t olinebits, size_t ilinebits, unsigned h)
; 4184 : {
; 4185 :   /*
; 4186 :   After filtering there are still padding bits if scanlines have non multiple of 8 bit amounts. They need
; 4187 :   to be removed (except at last scanline of (Adam7-reduced) image) before working with pure image buffers
; 4188 :   for the Adam7 code, the color convert code and the output to the user.
; 4189 :   in and out are allowed to be the same buffer, in may also be higher but still overlapping; in must
; 4190 :   have >= ilinebits*h bits, out must have >= olinebits*h bits, olinebits must be <= ilinebits
; 4191 :   also used to move bits after earlier such operations happened, e.g. in a sequence of reduced images from Adam7
; 4192 :   only useful if (ilinebits - olinebits) is a value in the range 1..7
; 4193 :   */
; 4194 :   unsigned y;
; 4195 :   size_t diff = ilinebits - olinebits;
; 4196 :   size_t ibp = 0, obp = 0; /*input and output bit pointers*/
; 4197 :   for(y = 0; y < h; y++)
; 4198 :   {
; 4199 :     size_t x;
; 4200 :     for(x = 0; x < olinebits; x++)
; 4201 :     {
; 4202 :       unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4203 :       setBitOfReversedStream(&obp, out, bit);
; 4204 :     }
; 4205 :     ibp += diff;
; 4206 :   }
; 4207 : }
; 4208 : 
; 4209 : /*out must be buffer big enough to contain full image, and in must contain the full decompressed data from
; 4210 : the IDAT chunks (with filter index bytes and possible padding bits)
; 4211 : return value is error*/
; 4212 : static unsigned postProcessScanlines(unsigned char* out, unsigned char* in,
; 4213 :                                      unsigned w, unsigned h, const LodePNGInfo* info_png)
; 4214 : {
; 4215 :   /*
; 4216 :   This function converts the filtered-padded-interlaced data into pure 2D image buffer with the PNG's colortype.
; 4217 :   Steps:
; 4218 :   *) if no Adam7: 1) unfilter 2) remove padding bits (= posible extra bits per scanline if bpp < 8)
; 4219 :   *) if adam7: 1) 7x unfilter 2) 7x remove padding bits 3) Adam7_deinterlace
; 4220 :   NOTE: the in buffer will be overwritten with intermediate data!
; 4221 :   */
; 4222 :   unsigned bpp = lodepng_get_bpp(&info_png->color);
; 4223 :   if(bpp == 0) return 31; /*error: invalid colortype*/
; 4224 : 
; 4225 :   if(info_png->interlace_method == 0)
; 4226 :   {
; 4227 :     if(bpp < 8 && w * bpp != ((w * bpp + 7) / 8) * 8)
; 4228 :     {
; 4229 :       CERROR_TRY_RETURN(unfilter(in, in, w, h, bpp));
; 4230 :       removePaddingBits(out, in, w * bpp, ((w * bpp + 7) / 8) * 8, h);
; 4231 :     }
; 4232 :     /*we can immediatly filter into the out buffer, no other steps needed*/
; 4233 :     else CERROR_TRY_RETURN(unfilter(out, in, w, h, bpp));
; 4234 :   }
; 4235 :   else /*interlace_method is 1 (Adam7)*/
; 4236 :   {
; 4237 :     unsigned passw[7], passh[7]; size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4238 :     unsigned i;
; 4239 : 
; 4240 :     Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 4241 : 
; 4242 :     for(i = 0; i < 7; i++)
; 4243 :     {
; 4244 :       CERROR_TRY_RETURN(unfilter(&in[padded_passstart[i]], &in[filter_passstart[i]], passw[i], passh[i], bpp));
; 4245 :       /*TODO: possible efficiency improvement: if in this reduced image the bits fit nicely in 1 scanline,
; 4246 :       move bytes instead of bits or move not at all*/
; 4247 :       if(bpp < 8)
; 4248 :       {
; 4249 :         /*remove padding bits in scanlines; after this there still may be padding
; 4250 :         bits between the different reduced images: each reduced image still starts nicely at a byte*/
; 4251 :         removePaddingBits(&in[passstart[i]], &in[padded_passstart[i]], passw[i] * bpp,
; 4252 :                           ((passw[i] * bpp + 7) / 8) * 8, passh[i]);
; 4253 :       }
; 4254 :     }
; 4255 : 
; 4256 :     Adam7_deinterlace(out, in, w, h, bpp);
; 4257 :   }
; 4258 : 
; 4259 :   return 0;
; 4260 : }
; 4261 : 
; 4262 : static unsigned readChunk_PLTE(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
; 4263 : {
; 4264 :   unsigned pos = 0, i;
; 4265 :   if(color->palette) lodepng_free(color->palette);
; 4266 :   color->palettesize = chunkLength / 3;
; 4267 :   color->palette = (unsigned char*)lodepng_malloc(4 * color->palettesize);
; 4268 :   if(!color->palette && color->palettesize)
; 4269 :   {
; 4270 :     color->palettesize = 0;
; 4271 :     return 83; /*alloc fail*/
; 4272 :   }
; 4273 :   if(color->palettesize > 256) return 38; /*error: palette too big*/
; 4274 : 
; 4275 :   for(i = 0; i < color->palettesize; i++)
; 4276 :   {
; 4277 :     color->palette[4 * i + 0] = data[pos++]; /*R*/
; 4278 :     color->palette[4 * i + 1] = data[pos++]; /*G*/
; 4279 :     color->palette[4 * i + 2] = data[pos++]; /*B*/
; 4280 :     color->palette[4 * i + 3] = 255; /*alpha*/
; 4281 :   }
; 4282 : 
; 4283 :   return 0; /* OK */
; 4284 : }
; 4285 : 
; 4286 : static unsigned readChunk_tRNS(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
; 4287 : {
; 4288 :   unsigned i;
; 4289 :   if(color->colortype == LCT_PALETTE)
; 4290 :   {
; 4291 :     /*error: more alpha values given than there are palette entries*/
; 4292 :     if(chunkLength > color->palettesize) return 38;
; 4293 : 
; 4294 :     for(i = 0; i < chunkLength; i++) color->palette[4 * i + 3] = data[i];
; 4295 :   }
; 4296 :   else if(color->colortype == LCT_GREY)
; 4297 :   {
; 4298 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4299 :     if(chunkLength != 2) return 30;
; 4300 : 
; 4301 :     color->key_defined = 1;
; 4302 :     color->key_r = color->key_g = color->key_b = 256 * data[0] + data[1];
; 4303 :   }
; 4304 :   else if(color->colortype == LCT_RGB)
; 4305 :   {
; 4306 :     /*error: this chunk must be 6 bytes for RGB image*/
; 4307 :     if(chunkLength != 6) return 41;
; 4308 : 
; 4309 :     color->key_defined = 1;
; 4310 :     color->key_r = 256 * data[0] + data[1];
; 4311 :     color->key_g = 256 * data[2] + data[3];
; 4312 :     color->key_b = 256 * data[4] + data[5];
; 4313 :   }
; 4314 :   else return 42; /*error: tRNS chunk not allowed for other color models*/
; 4315 : 
; 4316 :   return 0; /* OK */
; 4317 : }
; 4318 : 
; 4319 : 
; 4320 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4321 : /*background color chunk (bKGD)*/
; 4322 : static unsigned readChunk_bKGD(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4323 : {
; 4324 :   if(info->color.colortype == LCT_PALETTE)
; 4325 :   {
; 4326 :     /*error: this chunk must be 1 byte for indexed color image*/
; 4327 :     if(chunkLength != 1) return 43;
; 4328 : 
; 4329 :     info->background_defined = 1;
; 4330 :     info->background_r = info->background_g = info->background_b = data[0];
; 4331 :   }
; 4332 :   else if(info->color.colortype == LCT_GREY || info->color.colortype == LCT_GREY_ALPHA)
; 4333 :   {
; 4334 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4335 :     if(chunkLength != 2) return 44;
; 4336 : 
; 4337 :     info->background_defined = 1;
; 4338 :     info->background_r = info->background_g = info->background_b
; 4339 :                                  = 256 * data[0] + data[1];
; 4340 :   }
; 4341 :   else if(info->color.colortype == LCT_RGB || info->color.colortype == LCT_RGBA)
; 4342 :   {
; 4343 :     /*error: this chunk must be 6 bytes for greyscale image*/
; 4344 :     if(chunkLength != 6) return 45;
; 4345 : 
; 4346 :     info->background_defined = 1;
; 4347 :     info->background_r = 256 * data[0] + data[1];
; 4348 :     info->background_g = 256 * data[2] + data[3];
; 4349 :     info->background_b = 256 * data[4] + data[5];
; 4350 :   }
; 4351 : 
; 4352 :   return 0; /* OK */
; 4353 : }
; 4354 : 
; 4355 : /*text chunk (tEXt)*/
; 4356 : static unsigned readChunk_tEXt(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4357 : {
; 4358 :   unsigned error = 0;
; 4359 :   char *key = 0, *str = 0;
; 4360 :   unsigned i;
; 4361 : 
; 4362 :   while(!error) /*not really a while loop, only used to break on error*/
; 4363 :   {
; 4364 :     unsigned length, string2_begin;
; 4365 : 
; 4366 :     length = 0;
; 4367 :     while(length < chunkLength && data[length] != 0) length++;
; 4368 :     /*even though it's not allowed by the standard, no error is thrown if
; 4369 :     there's no null termination char, if the text is empty*/
; 4370 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4371 : 
; 4372 :     key = (char*)lodepng_malloc(length + 1);
; 4373 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4374 : 
; 4375 :     key[length] = 0;
; 4376 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4377 : 
; 4378 :     string2_begin = length + 1; /*skip keyword null terminator*/
; 4379 : 
; 4380 :     length = chunkLength < string2_begin ? 0 : chunkLength - string2_begin;
; 4381 :     str = (char*)lodepng_malloc(length + 1);
; 4382 :     if(!str) CERROR_BREAK(error, 83); /*alloc fail*/
; 4383 : 
; 4384 :     str[length] = 0;
; 4385 :     for(i = 0; i < length; i++) str[i] = data[string2_begin + i];
; 4386 : 
; 4387 :     error = lodepng_add_text(info, key, str);
; 4388 : 
; 4389 :     break;
; 4390 :   }
; 4391 : 
; 4392 :   lodepng_free(key);
; 4393 :   lodepng_free(str);
; 4394 : 
; 4395 :   return error;
; 4396 : }
; 4397 : 
; 4398 : /*compressed text chunk (zTXt)*/
; 4399 : static unsigned readChunk_zTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
; 4400 :                                const unsigned char* data, size_t chunkLength)
; 4401 : {
; 4402 :   unsigned error = 0;
; 4403 :   unsigned i;
; 4404 : 
; 4405 :   unsigned length, string2_begin;
; 4406 :   char *key = 0;
; 4407 :   ucvector decoded;
; 4408 : 
; 4409 :   ucvector_init(&decoded);
; 4410 : 
; 4411 :   while(!error) /*not really a while loop, only used to break on error*/
; 4412 :   {
; 4413 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;
; 4414 :     if(length + 2 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
; 4415 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4416 : 
; 4417 :     key = (char*)lodepng_malloc(length + 1);
; 4418 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4419 : 
; 4420 :     key[length] = 0;
; 4421 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4422 : 
; 4423 :     if(data[length + 1] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
; 4424 : 
; 4425 :     string2_begin = length + 2;
; 4426 :     if(string2_begin > chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
; 4427 : 
; 4428 :     length = chunkLength - string2_begin;
; 4429 :     /*will fail if zlib error, e.g. if length is too small*/
; 4430 :     error = zlib_decompress(&decoded.data, &decoded.size,
; 4431 :                             (unsigned char*)(&data[string2_begin]),
; 4432 :                             length, zlibsettings);
; 4433 :     if(error) break;
; 4434 :     ucvector_push_back(&decoded, 0);
; 4435 : 
; 4436 :     error = lodepng_add_text(info, key, (char*)decoded.data);
; 4437 : 
; 4438 :     break;
; 4439 :   }
; 4440 : 
; 4441 :   lodepng_free(key);
; 4442 :   ucvector_cleanup(&decoded);
; 4443 : 
; 4444 :   return error;
; 4445 : }
; 4446 : 
; 4447 : /*international text chunk (iTXt)*/
; 4448 : static unsigned readChunk_iTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
; 4449 :                                const unsigned char* data, size_t chunkLength)
; 4450 : {
; 4451 :   unsigned error = 0;
; 4452 :   unsigned i;
; 4453 : 
; 4454 :   unsigned length, begin, compressed;
; 4455 :   char *key = 0, *langtag = 0, *transkey = 0;
; 4456 :   ucvector decoded;
; 4457 :   ucvector_init(&decoded);
; 4458 : 
; 4459 :   while(!error) /*not really a while loop, only used to break on error*/
; 4460 :   {
; 4461 :     /*Quick check if the chunk length isn't too small. Even without check
; 4462 :     it'd still fail with other error checks below if it's too short. This just gives a different error code.*/
; 4463 :     if(chunkLength < 5) CERROR_BREAK(error, 30); /*iTXt chunk too short*/
; 4464 : 
; 4465 :     /*read the key*/
; 4466 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;
; 4467 :     if(length + 3 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination char, corrupt?*/
; 4468 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4469 : 
; 4470 :     key = (char*)lodepng_malloc(length + 1);
; 4471 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4472 : 
; 4473 :     key[length] = 0;
; 4474 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4475 : 
; 4476 :     /*read the compression method*/
; 4477 :     compressed = data[length + 1];
; 4478 :     if(data[length + 2] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
; 4479 : 
; 4480 :     /*even though it's not allowed by the standard, no error is thrown if
; 4481 :     there's no null termination char, if the text is empty for the next 3 texts*/
; 4482 : 
; 4483 :     /*read the langtag*/
; 4484 :     begin = length + 3;
; 4485 :     length = 0;
; 4486 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;
; 4487 : 
; 4488 :     langtag = (char*)lodepng_malloc(length + 1);
; 4489 :     if(!langtag) CERROR_BREAK(error, 83); /*alloc fail*/
; 4490 : 
; 4491 :     langtag[length] = 0;
; 4492 :     for(i = 0; i < length; i++) langtag[i] = data[begin + i];
; 4493 : 
; 4494 :     /*read the transkey*/
; 4495 :     begin += length + 1;
; 4496 :     length = 0;
; 4497 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;
; 4498 : 
; 4499 :     transkey = (char*)lodepng_malloc(length + 1);
; 4500 :     if(!transkey) CERROR_BREAK(error, 83); /*alloc fail*/
; 4501 : 
; 4502 :     transkey[length] = 0;
; 4503 :     for(i = 0; i < length; i++) transkey[i] = data[begin + i];
; 4504 : 
; 4505 :     /*read the actual text*/
; 4506 :     begin += length + 1;
; 4507 : 
; 4508 :     length = chunkLength < begin ? 0 : chunkLength - begin;
; 4509 : 
; 4510 :     if(compressed)
; 4511 :     {
; 4512 :       /*will fail if zlib error, e.g. if length is too small*/
; 4513 :       error = zlib_decompress(&decoded.data, &decoded.size,
; 4514 :                               (unsigned char*)(&data[begin]),
; 4515 :                               length, zlibsettings);
; 4516 :       if(error) break;
; 4517 :       if(decoded.allocsize < decoded.size) decoded.allocsize = decoded.size;
; 4518 :       ucvector_push_back(&decoded, 0);
; 4519 :     }
; 4520 :     else
; 4521 :     {
; 4522 :       if(!ucvector_resize(&decoded, length + 1)) CERROR_BREAK(error, 83 /*alloc fail*/);
; 4523 : 
; 4524 :       decoded.data[length] = 0;
; 4525 :       for(i = 0; i < length; i++) decoded.data[i] = data[begin + i];
; 4526 :     }
; 4527 : 
; 4528 :     error = lodepng_add_itext(info, key, langtag, transkey, (char*)decoded.data);
; 4529 : 
; 4530 :     break;
; 4531 :   }
; 4532 : 
; 4533 :   lodepng_free(key);
; 4534 :   lodepng_free(langtag);
; 4535 :   lodepng_free(transkey);
; 4536 :   ucvector_cleanup(&decoded);
; 4537 : 
; 4538 :   return error;
; 4539 : }
; 4540 : 
; 4541 : static unsigned readChunk_tIME(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4542 : {
; 4543 :   if(chunkLength != 7) return 73; /*invalid tIME chunk size*/
; 4544 : 
; 4545 :   info->time_defined = 1;
; 4546 :   info->time.year = 256 * data[0] + data[+ 1];
; 4547 :   info->time.month = data[2];
; 4548 :   info->time.day = data[3];
; 4549 :   info->time.hour = data[4];
; 4550 :   info->time.minute = data[5];
; 4551 :   info->time.second = data[6];
; 4552 : 
; 4553 :   return 0; /* OK */
; 4554 : }
; 4555 : 
; 4556 : static unsigned readChunk_pHYs(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4557 : {
; 4558 :   if(chunkLength != 9) return 74; /*invalid pHYs chunk size*/
; 4559 : 
; 4560 :   info->phys_defined = 1;
; 4561 :   info->phys_x = 16777216 * data[0] + 65536 * data[1] + 256 * data[2] + data[3];
; 4562 :   info->phys_y = 16777216 * data[4] + 65536 * data[5] + 256 * data[6] + data[7];
; 4563 :   info->phys_unit = data[8];
; 4564 : 
; 4565 :   return 0; /* OK */
; 4566 : }
; 4567 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4568 : 
; 4569 : /*read a PNG, the result will be in the same color type as the PNG (hence "generic")*/
; 4570 : static void decodeGeneric(unsigned char** out, unsigned* w, unsigned* h,
; 4571 :                           LodePNGState* state,
; 4572 :                           const unsigned char* in, size_t insize)
; 4573 : {
; 4574 :   unsigned char IEND = 0;
; 4575 :   const unsigned char* chunk;
; 4576 :   size_t i;
; 4577 :   ucvector idat; /*the data from idat chunks*/
; 4578 : 
; 4579 :   /*for unknown chunk order*/
; 4580 :   unsigned unknown = 0;
; 4581 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4582 :   unsigned critical_pos = 1; /*1 = after IHDR, 2 = after PLTE, 3 = after IDAT*/
; 4583 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4584 : 
; 4585 :   /*provide some proper output values if error will happen*/
; 4586 :   *out = 0;
; 4587 : 
; 4588 :   state->error = lodepng_inspect(w, h, state, in, insize); /*reads header and resets other parameters in state->info_png*/
; 4589 :   if(state->error) return;
; 4590 : 
; 4591 :   ucvector_init(&idat);
; 4592 :   chunk = &in[33]; /*first byte of the first chunk after the header*/
; 4593 : 
; 4594 :   /*loop through the chunks, ignoring unknown chunks and stopping at IEND chunk.
; 4595 :   IDAT data is put at the start of the in buffer*/
; 4596 :   while(!IEND && !state->error)
; 4597 :   {
; 4598 :     unsigned chunkLength;
; 4599 :     const unsigned char* data; /*the data in the chunk*/
; 4600 : 
; 4601 :     /*error: size of the in buffer too small to contain next chunk*/
; 4602 :     if((size_t)((chunk - in) + 12) > insize || chunk < in) CERROR_BREAK(state->error, 30);
; 4603 : 
; 4604 :     /*length of the data of the chunk, excluding the length bytes, chunk type and CRC bytes*/
; 4605 :     chunkLength = lodepng_chunk_length(chunk);
; 4606 :     /*error: chunk length larger than the max PNG chunk size*/
; 4607 :     if(chunkLength > 2147483647) CERROR_BREAK(state->error, 63);
; 4608 : 
; 4609 :     if((size_t)((chunk - in) + chunkLength + 12) > insize || (chunk + chunkLength + 12) < in)
; 4610 :     {
; 4611 :       CERROR_BREAK(state->error, 64); /*error: size of the in buffer too small to contain next chunk*/
; 4612 :     }
; 4613 : 
; 4614 :     data = lodepng_chunk_data_const(chunk);
; 4615 : 
; 4616 :     /*IDAT chunk, containing compressed image data*/
; 4617 :     if(lodepng_chunk_type_equals(chunk, "IDAT"))
; 4618 :     {
; 4619 :       size_t oldsize = idat.size;
; 4620 :       if(!ucvector_resize(&idat, oldsize + chunkLength)) CERROR_BREAK(state->error, 83 /*alloc fail*/);
; 4621 :       for(i = 0; i < chunkLength; i++) idat.data[oldsize + i] = data[i];
; 4622 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4623 :       critical_pos = 3;
; 4624 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4625 :     }
; 4626 :     /*IEND chunk*/
; 4627 :     else if(lodepng_chunk_type_equals(chunk, "IEND"))
; 4628 :     {
; 4629 :       IEND = 1;
; 4630 :     }
; 4631 :     /*palette chunk (PLTE)*/
; 4632 :     else if(lodepng_chunk_type_equals(chunk, "PLTE"))
; 4633 :     {
; 4634 :       state->error = readChunk_PLTE(&state->info_png.color, data, chunkLength);
; 4635 :       if(state->error) break;
; 4636 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4637 :       critical_pos = 2;
; 4638 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4639 :     }
; 4640 :     /*palette transparency chunk (tRNS)*/
; 4641 :     else if(lodepng_chunk_type_equals(chunk, "tRNS"))
; 4642 :     {
; 4643 :       state->error = readChunk_tRNS(&state->info_png.color, data, chunkLength);
; 4644 :       if(state->error) break;
; 4645 :     }
; 4646 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4647 :     /*background color chunk (bKGD)*/
; 4648 :     else if(lodepng_chunk_type_equals(chunk, "bKGD"))
; 4649 :     {
; 4650 :       state->error = readChunk_bKGD(&state->info_png, data, chunkLength);
; 4651 :       if(state->error) break;
; 4652 :     }
; 4653 :     /*text chunk (tEXt)*/
; 4654 :     else if(lodepng_chunk_type_equals(chunk, "tEXt"))
; 4655 :     {
; 4656 :       if(state->decoder.read_text_chunks)
; 4657 :       {
; 4658 :         state->error = readChunk_tEXt(&state->info_png, data, chunkLength);
; 4659 :         if(state->error) break;
; 4660 :       }
; 4661 :     }
; 4662 :     /*compressed text chunk (zTXt)*/
; 4663 :     else if(lodepng_chunk_type_equals(chunk, "zTXt"))
; 4664 :     {
; 4665 :       if(state->decoder.read_text_chunks)
; 4666 :       {
; 4667 :         state->error = readChunk_zTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);
; 4668 :         if(state->error) break;
; 4669 :       }
; 4670 :     }
; 4671 :     /*international text chunk (iTXt)*/
; 4672 :     else if(lodepng_chunk_type_equals(chunk, "iTXt"))
; 4673 :     {
; 4674 :       if(state->decoder.read_text_chunks)
; 4675 :       {
; 4676 :         state->error = readChunk_iTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);
; 4677 :         if(state->error) break;
; 4678 :       }
; 4679 :     }
; 4680 :     else if(lodepng_chunk_type_equals(chunk, "tIME"))
; 4681 :     {
; 4682 :       state->error = readChunk_tIME(&state->info_png, data, chunkLength);
; 4683 :       if(state->error) break;
; 4684 :     }
; 4685 :     else if(lodepng_chunk_type_equals(chunk, "pHYs"))
; 4686 :     {
; 4687 :       state->error = readChunk_pHYs(&state->info_png, data, chunkLength);
; 4688 :       if(state->error) break;
; 4689 :     }
; 4690 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4691 :     else /*it's not an implemented chunk type, so ignore it: skip over the data*/
; 4692 :     {
; 4693 :       /*error: unknown critical chunk (5th bit of first byte of chunk type is 0)*/
; 4694 :       if(!lodepng_chunk_ancillary(chunk)) CERROR_BREAK(state->error, 69);
; 4695 : 
; 4696 :       unknown = 1;
; 4697 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4698 :       if(state->decoder.remember_unknown_chunks)
; 4699 :       {
; 4700 :         state->error = lodepng_chunk_append(&state->info_png.unknown_chunks_data[critical_pos - 1],
; 4701 :                                             &state->info_png.unknown_chunks_size[critical_pos - 1], chunk);
; 4702 :         if(state->error) break;
; 4703 :       }
; 4704 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4705 :     }
; 4706 : 
; 4707 :     if(!state->decoder.ignore_crc && !unknown) /*check CRC if wanted, only on known chunk types*/
; 4708 :     {
; 4709 :       if(lodepng_chunk_check_crc(chunk)) CERROR_BREAK(state->error, 57); /*invalid CRC*/
; 4710 :     }
; 4711 : 
; 4712 :     if(!IEND) chunk = lodepng_chunk_next_const(chunk);
; 4713 :   }
; 4714 : 
; 4715 :   if(!state->error)
; 4716 :   {
; 4717 :     ucvector scanlines;
; 4718 :     ucvector_init(&scanlines);
; 4719 : 
; 4720 :     /*maximum final image length is already reserved in the vector's length - this is not really necessary*/
; 4721 :     if(!ucvector_resize(&scanlines, lodepng_get_raw_size(*w, *h, &state->info_png.color) + *h))
; 4722 :     {
; 4723 :       state->error = 83; /*alloc fail*/
; 4724 :     }
; 4725 :     if(!state->error)
; 4726 :     {
; 4727 :       /*decompress with the Zlib decompressor*/
; 4728 :       state->error = zlib_decompress(&scanlines.data, &scanlines.size, idat.data,
; 4729 :                                      idat.size, &state->decoder.zlibsettings);
; 4730 :     }
; 4731 : 
; 4732 :     if(!state->error)
; 4733 :     {
; 4734 :       ucvector outv;
; 4735 :       ucvector_init(&outv);
; 4736 :       if(!ucvector_resizev(&outv,
; 4737 :           lodepng_get_raw_size(*w, *h, &state->info_png.color), 0)) state->error = 83; /*alloc fail*/
; 4738 :       if(!state->error) state->error = postProcessScanlines(outv.data, scanlines.data, *w, *h, &state->info_png);
; 4739 :       *out = outv.data;
; 4740 :     }
; 4741 :     ucvector_cleanup(&scanlines);
; 4742 :   }
; 4743 : 
; 4744 :   ucvector_cleanup(&idat);
; 4745 : }
; 4746 : 
; 4747 : unsigned lodepng_decode(unsigned char** out, unsigned* w, unsigned* h,
; 4748 :                         LodePNGState* state,
; 4749 :                         const unsigned char* in, size_t insize)
; 4750 : {
; 4751 :   *out = 0;
; 4752 :   decodeGeneric(out, w, h, state, in, insize);
; 4753 :   if(state->error) return state->error;
; 4754 :   if(!state->decoder.color_convert || lodepng_color_mode_equal(&state->info_raw, &state->info_png.color))
; 4755 :   {
; 4756 :     /*same color type, no copying or converting of data needed*/
; 4757 :     /*store the info_png color settings on the info_raw so that the info_raw still reflects what colortype
; 4758 :     the raw image has to the end user*/
; 4759 :     if(!state->decoder.color_convert)
; 4760 :     {
; 4761 :       state->error = lodepng_color_mode_copy(&state->info_raw, &state->info_png.color);
; 4762 :       if(state->error) return state->error;
; 4763 :     }
; 4764 :   }
; 4765 :   else
; 4766 :   {
; 4767 :     /*color conversion needed; sort of copy of the data*/
; 4768 :     unsigned char* data = *out;
; 4769 :     size_t outsize;
; 4770 : 
; 4771 :     /*TODO: check if this works according to the statement in the documentation: "The converter can convert
; 4772 :     from greyscale input color type, to 8-bit greyscale or greyscale with alpha"*/
; 4773 :     if(!(state->info_raw.colortype == LCT_RGB || state->info_raw.colortype == LCT_RGBA)
; 4774 :        && !(state->info_raw.bitdepth == 8))
; 4775 :     {
; 4776 :       return 56; /*unsupported color mode conversion*/
; 4777 :     }
; 4778 : 
; 4779 :     outsize = lodepng_get_raw_size(*w, *h, &state->info_raw);
; 4780 :     *out = (unsigned char*)lodepng_malloc(outsize);
; 4781 :     if(!(*out))
; 4782 :     {
; 4783 :       state->error = 83; /*alloc fail*/
; 4784 :     }
; 4785 :     else state->error = lodepng_convert(*out, data, &state->info_raw, &state->info_png.color, *w, *h, state->decoder.fix_png);
; 4786 :     lodepng_free(data);
; 4787 :   }
; 4788 :   return state->error;
; 4789 : }
; 4790 : 
; 4791 : unsigned lodepng_decode_memory(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in,
; 4792 :                                size_t insize, LodePNGColorType colortype, unsigned bitdepth)
; 4793 : {
; 4794 :   unsigned error;
; 4795 :   LodePNGState state;
; 4796 :   lodepng_state_init(&state);
; 4797 :   state.info_raw.colortype = colortype;
; 4798 :   state.info_raw.bitdepth = bitdepth;
; 4799 :   error = lodepng_decode(out, w, h, &state, in, insize);
; 4800 :   lodepng_state_cleanup(&state);
; 4801 :   return error;
; 4802 : }
; 4803 : 
; 4804 : unsigned lodepng_decode32(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4805 : {
; 4806 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGBA, 8);
; 4807 : }
; 4808 : 
; 4809 : unsigned lodepng_decode24(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4810 : {
; 4811 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGB, 8);
; 4812 : }
; 4813 : 
; 4814 : #ifdef LODEPNG_COMPILE_DISK
; 4815 : unsigned lodepng_decode_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename,
; 4816 :                              LodePNGColorType colortype, unsigned bitdepth)
; 4817 : {
; 4818 :   unsigned char* buffer;
; 4819 :   size_t buffersize;
; 4820 :   unsigned error;
; 4821 :   error = lodepng_load_file(&buffer, &buffersize, filename);
; 4822 :   if(!error) error = lodepng_decode_memory(out, w, h, buffer, buffersize, colortype, bitdepth);
; 4823 :   lodepng_free(buffer);
; 4824 :   return error;
; 4825 : }
; 4826 : 
; 4827 : unsigned lodepng_decode32_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4828 : {
; 4829 :   return lodepng_decode_file(out, w, h, filename, LCT_RGBA, 8);
; 4830 : }
; 4831 : 
; 4832 : unsigned lodepng_decode24_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4833 : {
; 4834 :   return lodepng_decode_file(out, w, h, filename, LCT_RGB, 8);
; 4835 : }
; 4836 : #endif /*LODEPNG_COMPILE_DISK*/
; 4837 : 
; 4838 : void lodepng_decoder_settings_init(LodePNGDecoderSettings* settings)
; 4839 : {
; 4840 :   settings->color_convert = 1;

  00002	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1

; 4841 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4842 :   settings->read_text_chunks = 1;

  00009	c7 40 20 01 00
	00 00		 mov	 DWORD PTR [eax+32], 1

; 4843 :   settings->remember_unknown_chunks = 0;

  00010	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 4844 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4845 :   settings->ignore_crc = 0;

  00017	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 4846 :   settings->fix_png = 0;

  0001e	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 4856 : #ifdef LODEPNG_COMPILE_DECODER
; 4857 :   lodepng_decoder_settings_init(&state->decoder);
; 4858 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4859 : #ifdef LODEPNG_COMPILE_ENCODER
; 4860 :   lodepng_encoder_settings_init(&state->encoder);

  00025	8d 48 28	 lea	 ecx, DWORD PTR [eax+40]

; 2252 :   settings->ignore_adler32 = 0;

  00028	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 2253 : 
; 2254 :   settings->custom_zlib = 0;

  0002f	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 2255 :   settings->custom_inflate = 0;

  00036	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 2256 :   settings->custom_context = 0;

  0003d	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4856 : #ifdef LODEPNG_COMPILE_DECODER
; 4857 :   lodepng_decoder_settings_init(&state->decoder);
; 4858 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4859 : #ifdef LODEPNG_COMPILE_ENCODER
; 4860 :   lodepng_encoder_settings_init(&state->encoder);

  00044	e8 00 00 00 00	 call	 ?lodepng_encoder_settings_init@@YAXPAULodePNGEncoderSettings@@@Z ; lodepng_encoder_settings_init

; 4861 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 4862 :   lodepng_color_mode_init(&state->info_raw);
; 4863 :   lodepng_info_init(&state->info_png);

  00049	8d 88 88 00 00
	00		 lea	 ecx, DWORD PTR [eax+136]

; 2257 : }
; 2258 : 
; 2259 : const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0, 0, 0};
; 2260 : 
; 2261 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2262 : 
; 2263 : /* ////////////////////////////////////////////////////////////////////////// */
; 2264 : /* ////////////////////////////////////////////////////////////////////////// */
; 2265 : /* // End of Zlib related code. Begin of PNG related code.                 // */
; 2266 : /* ////////////////////////////////////////////////////////////////////////// */
; 2267 : /* ////////////////////////////////////////////////////////////////////////// */
; 2268 : 
; 2269 : #ifdef LODEPNG_COMPILE_PNG
; 2270 : 
; 2271 : /* ////////////////////////////////////////////////////////////////////////// */
; 2272 : /* / CRC32                                                                  / */
; 2273 : /* ////////////////////////////////////////////////////////////////////////// */
; 2274 : 
; 2275 : /* CRC polynomial: 0xedb88320 */
; 2276 : static unsigned lodepng_crc32_table[256] = {
; 2277 :            0u, 1996959894u, 3993919788u, 2567524794u,  124634137u, 1886057615u, 3915621685u, 2657392035u,
; 2278 :    249268274u, 2044508324u, 3772115230u, 2547177864u,  162941995u, 2125561021u, 3887607047u, 2428444049u,
; 2279 :    498536548u, 1789927666u, 4089016648u, 2227061214u,  450548861u, 1843258603u, 4107580753u, 2211677639u,
; 2280 :    325883990u, 1684777152u, 4251122042u, 2321926636u,  335633487u, 1661365465u, 4195302755u, 2366115317u,
; 2281 :    997073096u, 1281953886u, 3579855332u, 2724688242u, 1006888145u, 1258607687u, 3524101629u, 2768942443u,
; 2282 :    901097722u, 1119000684u, 3686517206u, 2898065728u,  853044451u, 1172266101u, 3705015759u, 2882616665u,
; 2283 :    651767980u, 1373503546u, 3369554304u, 3218104598u,  565507253u, 1454621731u, 3485111705u, 3099436303u,
; 2284 :    671266974u, 1594198024u, 3322730930u, 2970347812u,  795835527u, 1483230225u, 3244367275u, 3060149565u,
; 2285 :   1994146192u,   31158534u, 2563907772u, 4023717930u, 1907459465u,  112637215u, 2680153253u, 3904427059u,
; 2286 :   2013776290u,  251722036u, 2517215374u, 3775830040u, 2137656763u,  141376813u, 2439277719u, 3865271297u,
; 2287 :   1802195444u,  476864866u, 2238001368u, 4066508878u, 1812370925u,  453092731u, 2181625025u, 4111451223u,
; 2288 :   1706088902u,  314042704u, 2344532202u, 4240017532u, 1658658271u,  366619977u, 2362670323u, 4224994405u,
; 2289 :   1303535960u,  984961486u, 2747007092u, 3569037538u, 1256170817u, 1037604311u, 2765210733u, 3554079995u,
; 2290 :   1131014506u,  879679996u, 2909243462u, 3663771856u, 1141124467u,  855842277u, 2852801631u, 3708648649u,
; 2291 :   1342533948u,  654459306u, 3188396048u, 3373015174u, 1466479909u,  544179635u, 3110523913u, 3462522015u,
; 2292 :   1591671054u,  702138776u, 2966460450u, 3352799412u, 1504918807u,  783551873u, 3082640443u, 3233442989u,
; 2293 :   3988292384u, 2596254646u,   62317068u, 1957810842u, 3939845945u, 2647816111u,   81470997u, 1943803523u,
; 2294 :   3814918930u, 2489596804u,  225274430u, 2053790376u, 3826175755u, 2466906013u,  167816743u, 2097651377u,
; 2295 :   4027552580u, 2265490386u,  503444072u, 1762050814u, 4150417245u, 2154129355u,  426522225u, 1852507879u,
; 2296 :   4275313526u, 2312317920u,  282753626u, 1742555852u, 4189708143u, 2394877945u,  397917763u, 1622183637u,
; 2297 :   3604390888u, 2714866558u,  953729732u, 1340076626u, 3518719985u, 2797360999u, 1068828381u, 1219638859u,
; 2298 :   3624741850u, 2936675148u,  906185462u, 1090812512u, 3747672003u, 2825379669u,  829329135u, 1181335161u,
; 2299 :   3412177804u, 3160834842u,  628085408u, 1382605366u, 3423369109u, 3138078467u,  570562233u, 1426400815u,
; 2300 :   3317316542u, 2998733608u,  733239954u, 1555261956u, 3268935591u, 3050360625u,  752459403u, 1541320221u,
; 2301 :   2607071920u, 3965973030u, 1969922972u,   40735498u, 2617837225u, 3943577151u, 1913087877u,   83908371u,
; 2302 :   2512341634u, 3803740692u, 2075208622u,  213261112u, 2463272603u, 3855990285u, 2094854071u,  198958881u,
; 2303 :   2262029012u, 4057260610u, 1759359992u,  534414190u, 2176718541u, 4139329115u, 1873836001u,  414664567u,
; 2304 :   2282248934u, 4279200368u, 1711684554u,  285281116u, 2405801727u, 4167216745u, 1634467795u,  376229701u,
; 2305 :   2685067896u, 3608007406u, 1308918612u,  956543938u, 2808555105u, 3495958263u, 1231636301u, 1047427035u,
; 2306 :   2932959818u, 3654703836u, 1088359270u,  936918000u, 2847714899u, 3736837829u, 1202900863u,  817233897u,
; 2307 :   3183342108u, 3401237130u, 1404277552u,  615818150u, 3134207493u, 3453421203u, 1423857449u,  601450431u,
; 2308 :   3009837614u, 3294710456u, 1567103746u,  711928724u, 3020668471u, 3272380065u, 1510334235u,  755167117u
; 2309 : };
; 2310 : 
; 2311 : /*Return the CRC of the bytes buf[0..len-1].*/
; 2312 : unsigned lodepng_crc32(const unsigned char* buf, size_t len)
; 2313 : {
; 2314 :   unsigned c = 0xffffffffL;
; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)
; 2318 :   {
; 2319 :     c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
; 2320 :   }
; 2321 :   return c ^ 0xffffffffL;
; 2322 : }
; 2323 : 
; 2324 : /* ////////////////////////////////////////////////////////////////////////// */
; 2325 : /* / Reading and writing single bits and bytes from/to stream for LodePNG   / */
; 2326 : /* ////////////////////////////////////////////////////////////////////////// */
; 2327 : 
; 2328 : static unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream)
; 2329 : {
; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);
; 2331 :   (*bitpointer)++;
; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)
; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
; 2354 :   }
; 2355 :   (*bitpointer)++;
; 2356 : }
; 2357 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2358 : 
; 2359 : static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2360 : {
; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));
; 2363 :   else         bitstream[(*bitpointer) >> 3] |=  (1 << (7 - ((*bitpointer) & 0x7)));
; 2364 :   (*bitpointer)++;
; 2365 : }
; 2366 : 
; 2367 : /* ////////////////////////////////////////////////////////////////////////// */
; 2368 : /* / PNG chunks                                                             / */
; 2369 : /* ////////////////////////////////////////////////////////////////////////// */
; 2370 : 
; 2371 : unsigned lodepng_chunk_length(const unsigned char* chunk)
; 2372 : {
; 2373 :   return lodepng_read32bitInt(&chunk[0]);
; 2374 : }
; 2375 : 
; 2376 : void lodepng_chunk_type(char type[5], const unsigned char* chunk)
; 2377 : {
; 2378 :   unsigned i;
; 2379 :   for(i = 0; i < 4; i++) type[i] = chunk[4 + i];
; 2380 :   type[4] = 0; /*null termination char*/
; 2381 : }
; 2382 : 
; 2383 : unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type)
; 2384 : {
; 2385 :   if(strlen(type) != 4) return 0;
; 2386 :   return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);
; 2387 : }
; 2388 : 
; 2389 : unsigned char lodepng_chunk_ancillary(const unsigned char* chunk)
; 2390 : {
; 2391 :   return((chunk[4] & 32) != 0);
; 2392 : }
; 2393 : 
; 2394 : unsigned char lodepng_chunk_private(const unsigned char* chunk)
; 2395 : {
; 2396 :   return((chunk[6] & 32) != 0);
; 2397 : }
; 2398 : 
; 2399 : unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk)
; 2400 : {
; 2401 :   return((chunk[7] & 32) != 0);
; 2402 : }
; 2403 : 
; 2404 : unsigned char* lodepng_chunk_data(unsigned char* chunk)
; 2405 : {
; 2406 :   return &chunk[8];
; 2407 : }
; 2408 : 
; 2409 : const unsigned char* lodepng_chunk_data_const(const unsigned char* chunk)
; 2410 : {
; 2411 :   return &chunk[8];
; 2412 : }
; 2413 : 
; 2414 : unsigned lodepng_chunk_check_crc(const unsigned char* chunk)
; 2415 : {
; 2416 :   unsigned length = lodepng_chunk_length(chunk);
; 2417 :   unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);
; 2418 :   /*the CRC is taken of the data and the 4 chunk type letters, not the length*/
; 2419 :   unsigned checksum = lodepng_crc32(&chunk[4], length + 4);
; 2420 :   if(CRC != checksum) return 1;
; 2421 :   else return 0;
; 2422 : }
; 2423 : 
; 2424 : void lodepng_chunk_generate_crc(unsigned char* chunk)
; 2425 : {
; 2426 :   unsigned length = lodepng_chunk_length(chunk);
; 2427 :   unsigned CRC = lodepng_crc32(&chunk[4], length + 4);
; 2428 :   lodepng_set32bitInt(chunk + 8 + length, CRC);
; 2429 : }
; 2430 : 
; 2431 : unsigned char* lodepng_chunk_next(unsigned char* chunk)
; 2432 : {
; 2433 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2434 :   return &chunk[total_chunk_length];
; 2435 : }
; 2436 : 
; 2437 : const unsigned char* lodepng_chunk_next_const(const unsigned char* chunk)
; 2438 : {
; 2439 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2440 :   return &chunk[total_chunk_length];
; 2441 : }
; 2442 : 
; 2443 : unsigned lodepng_chunk_append(unsigned char** out, size_t* outlength, const unsigned char* chunk)
; 2444 : {
; 2445 :   unsigned i;
; 2446 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2447 :   unsigned char *chunk_start, *new_buffer;
; 2448 :   size_t new_length = (*outlength) + total_chunk_length;
; 2449 :   if(new_length < total_chunk_length || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2450 : 
; 2451 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2452 :   if(!new_buffer) return 83; /*alloc fail*/
; 2453 :   (*out) = new_buffer;
; 2454 :   (*outlength) = new_length;
; 2455 :   chunk_start = &(*out)[new_length - total_chunk_length];
; 2456 : 
; 2457 :   for(i = 0; i < total_chunk_length; i++) chunk_start[i] = chunk[i];
; 2458 : 
; 2459 :   return 0;
; 2460 : }
; 2461 : 
; 2462 : unsigned lodepng_chunk_create(unsigned char** out, size_t* outlength, unsigned length,
; 2463 :                               const char* type, const unsigned char* data)
; 2464 : {
; 2465 :   unsigned i;
; 2466 :   unsigned char *chunk, *new_buffer;
; 2467 :   size_t new_length = (*outlength) + length + 12;
; 2468 :   if(new_length < length + 12 || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2469 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2470 :   if(!new_buffer) return 83; /*alloc fail*/
; 2471 :   (*out) = new_buffer;
; 2472 :   (*outlength) = new_length;
; 2473 :   chunk = &(*out)[(*outlength) - length - 12];
; 2474 : 
; 2475 :   /*1: length*/
; 2476 :   lodepng_set32bitInt(chunk, (unsigned)length);
; 2477 : 
; 2478 :   /*2: chunk name (4 letters)*/
; 2479 :   chunk[4] = type[0];
; 2480 :   chunk[5] = type[1];
; 2481 :   chunk[6] = type[2];
; 2482 :   chunk[7] = type[3];
; 2483 : 
; 2484 :   /*3: the data*/
; 2485 :   for(i = 0; i < length; i++) chunk[8 + i] = data[i];
; 2486 : 
; 2487 :   /*4: CRC (of the chunkname characters and the data)*/
; 2488 :   lodepng_chunk_generate_crc(chunk);
; 2489 : 
; 2490 :   return 0;
; 2491 : }
; 2492 : 
; 2493 : /* ////////////////////////////////////////////////////////////////////////// */
; 2494 : /* / Color types and such                                                   / */
; 2495 : /* ////////////////////////////////////////////////////////////////////////// */
; 2496 : 
; 2497 : /*return type is a LodePNG error code*/
; 2498 : static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) /*bd = bitdepth*/
; 2499 : {
; 2500 :   switch(colortype)
; 2501 :   {
; 2502 :     case 0: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)) return 37; break; /*grey*/
; 2503 :     case 2: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGB*/
; 2504 :     case 3: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )) return 37; break; /*palette*/
; 2505 :     case 4: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*grey + alpha*/
; 2506 :     case 6: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGBA*/
; 2507 :     default: return 31;
; 2508 :   }
; 2509 :   return 0; /*allowed color type / bits combination*/
; 2510 : }
; 2511 : 
; 2512 : static unsigned getNumColorChannels(LodePNGColorType colortype)
; 2513 : {
; 2514 :   switch(colortype)
; 2515 :   {
; 2516 :     case 0: return 1; /*grey*/
; 2517 :     case 2: return 3; /*RGB*/
; 2518 :     case 3: return 1; /*palette*/
; 2519 :     case 4: return 2; /*grey + alpha*/
; 2520 :     case 6: return 4; /*RGBA*/
; 2521 :   }
; 2522 :   return 0; /*unexisting color type*/
; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;
; 2529 : }
; 2530 : 
; 2531 : /* ////////////////////////////////////////////////////////////////////////// */
; 2532 : 
; 2533 : void lodepng_color_mode_init(LodePNGColorMode* info)
; 2534 : {
; 2535 :   info->key_defined = 0;

  0004f	c7 40 78 00 00
	00 00		 mov	 DWORD PTR [eax+120], 0

; 2536 :   info->key_r = info->key_g = info->key_b = 0;

  00056	c7 80 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+132], 0
  00060	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+128], 0
  0006a	c7 40 7c 00 00
	00 00		 mov	 DWORD PTR [eax+124], 0

; 2537 :   info->colortype = LCT_RGBA;

  00071	c7 40 68 06 00
	00 00		 mov	 DWORD PTR [eax+104], 6

; 2538 :   info->bitdepth = 8;

  00078	c7 40 6c 08 00
	00 00		 mov	 DWORD PTR [eax+108], 8

; 2539 :   info->palette = 0;

  0007f	c7 40 70 00 00
	00 00		 mov	 DWORD PTR [eax+112], 0

; 2540 :   info->palettesize = 0;

  00086	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], 0

; 4861 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 4862 :   lodepng_color_mode_init(&state->info_raw);
; 4863 :   lodepng_info_init(&state->info_png);

  0008d	e8 00 00 00 00	 call	 ?lodepng_info_init@@YAXPAULodePNGInfo@@@Z ; lodepng_info_init

; 4864 :   state->error = 1;

  00092	c7 80 28 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+296], 1

; 4865 : }

  0009c	c3		 ret	 0
?lodepng_state_init@@YAXPAULodePNGState@@@Z ENDP	; lodepng_state_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_state_cleanup@@YAXPAULodePNGState@@@Z
_TEXT	SEGMENT
?lodepng_state_cleanup@@YAXPAULodePNGState@@@Z PROC	; lodepng_state_cleanup, COMDAT
; _state$ = ecx

; 4868 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
; 945  :     (*bp)++;
; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);
; 965  :   generateFixedDistanceTree(tree_d);
; 966  : }
; 967  : 
; 968  : /*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
; 969  : static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
; 970  :                                       const unsigned char* in, size_t* bp, size_t inlength)
; 971  : {
; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;
; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/
; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;
; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;
; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;
; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)
; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
; 1009 :     if(error) break;
; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;
; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;
; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;
; 1020 :     while(i < HLIT + HDIST)
; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
; 1023 :       if(code <= 15) /*a length code*/
; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;
; 1026 :         else bitlen_d[i - HLIT] = code;
; 1027 :         i++;
; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/
; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);
; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];
; 1040 :         else value = bitlen_d[i - HLIT - 1];
; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)
; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
; 1045 :           if(i < HLIT) bitlen_ll[i] = value;
; 1046 :           else bitlen_d[i - HLIT] = value;
; 1047 :           i++;
; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/
; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);
; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)
; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1063 :           else bitlen_d[i - HLIT] = 0;
; 1064 :           i++;
; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/
; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);
; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)
; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1080 :           else bitlen_d[i - HLIT] = 0;
; 1081 :           i++;
; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))
; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;
; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/
; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;
; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 1102 :     if(error) break;
; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
; 1104 : 
; 1105 :     break; /*end of error-while*/
; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;
; 1114 : }
; 1115 : 
; 1116 : /*inflate a block with dynamic of fixed Huffman tree*/
; 1117 : static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
; 1118 :                                     size_t* pos, size_t inlength, unsigned btype)
; 1119 : {
; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;
; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/
; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/
; 1136 :     {
; 1137 :       if((*pos) >= out->size)
; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);
; 1143 :       (*pos)++;
; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);
; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
; 1161 :       if(code_d > 29)
; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;
; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/
; 1170 :         break;
; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);
; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);
; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)
; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)
; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];
; 1193 :         (*pos)++;
; 1194 :         backward++;
; 1195 :         if(backward >= start) backward = start - distance;
; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)
; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;
; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;
; 1215 : }
; 1216 : 
; 1217 : static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
; 1218 : {
; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;
; 1223 :   p = (*bp) / 8; /*byte position*/
; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/
; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;
; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;
; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)
; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];
; 1241 : 
; 1242 :   (*bp) = p * 8;
; 1243 : 
; 1244 :   return error;
; 1245 : }
; 1246 : 
; 1247 : static unsigned lodepng_inflatev(ucvector* out,
; 1248 :                                  const unsigned char* in, size_t insize,
; 1249 :                                  const LodePNGDecompressSettings* settings)
; 1250 : {
; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;
; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/
; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)
; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
; 1264 :     BFINAL = readBitFromStream(&bp, in);
; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);
; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
; 1271 : 
; 1272 :     if(error) return error;
; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/
; 1277 : 
; 1278 :   return error;
; 1279 : }
; 1280 : 
; 1281 : unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
; 1282 :                          const unsigned char* in, size_t insize,
; 1283 :                          const LodePNGDecompressSettings* settings)
; 1284 : {
; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);
; 1289 :   *out = v.data;
; 1290 :   *outsize = v.size;
; 1291 :   return error;
; 1292 : }
; 1293 : 
; 1294 : static unsigned inflate(unsigned char** out, size_t* outsize,
; 1295 :                         const unsigned char* in, size_t insize,
; 1296 :                         const LodePNGDecompressSettings* settings)
; 1297 : {
; 1298 :   if(settings->custom_inflate)
; 1299 :   {
; 1300 :     return settings->custom_inflate(out, outsize, in, insize, settings);
; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }
; 1307 : 
; 1308 : #endif /*LODEPNG_COMPILE_DECODER*/
; 1309 : 
; 1310 : #ifdef LODEPNG_COMPILE_ENCODER
; 1311 : 
; 1312 : /* ////////////////////////////////////////////////////////////////////////// */
; 1313 : /* / Deflator (Compressor)                                                  / */
; 1314 : /* ////////////////////////////////////////////////////////////////////////// */
; 1315 : 
; 1316 : static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;
; 1317 : 
; 1318 : /*bitlen is the size in bits of the code*/
; 1319 : static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)
; 1320 : {
; 1321 :   addBitsToStreamReversed(bp, compressed, code, bitlen);
; 1322 : }
; 1323 : 
; 1324 : /*search the index in the array, that has the largest value smaller than or equal to the given value,
; 1325 : given array must be sorted (if no value is smaller, it returns the size of the given array)*/
; 1326 : static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)
; 1327 : {
; 1328 :   /*linear search implementation*/
; 1329 :   /*for(size_t i = 1; i < array_size; i++) if(array[i] > value) return i - 1;
; 1330 :   return array_size - 1;*/
; 1331 : 
; 1332 :   /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
; 1333 :   size_t left  = 1;
; 1334 :   size_t right = array_size - 1;
; 1335 :   while(left <= right)
; 1336 :   {
; 1337 :     size_t mid = (left + right) / 2;
; 1338 :     if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
; 1339 :     else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
; 1340 :     else return mid - 1;
; 1341 :   }
; 1342 :   return array_size - 1;
; 1343 : }
; 1344 : 
; 1345 : static void addLengthDistance(uivector* values, size_t length, size_t distance)
; 1346 : {
; 1347 :   /*values in encoded vector are those used by deflate:
; 1348 :   0-255: literal bytes
; 1349 :   256: end
; 1350 :   257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
; 1351 :   286-287: invalid*/
; 1352 : 
; 1353 :   unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
; 1354 :   unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
; 1355 :   unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
; 1356 :   unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);
; 1357 : 
; 1358 :   uivector_push_back(values, length_code + FIRST_LENGTH_CODE_INDEX);
; 1359 :   uivector_push_back(values, extra_length);
; 1360 :   uivector_push_back(values, dist_code);
; 1361 :   uivector_push_back(values, extra_distance);
; 1362 : }
; 1363 : 
; 1364 : static const unsigned HASH_NUM_VALUES = 65536;
; 1365 : static const unsigned HASH_NUM_CHARACTERS = 3;
; 1366 : static const unsigned HASH_SHIFT = 2;
; 1367 : /*
; 1368 : The HASH_NUM_CHARACTERS value is used to make encoding faster by using longer
; 1369 : sequences to generate a hash value from the stream bytes. Setting it to 3
; 1370 : gives exactly the same compression as the brute force method, since deflate's
; 1371 : run length encoding starts with lengths of 3. Setting it to higher values,
; 1372 : like 6, can make the encoding faster (not always though!), but will cause the
; 1373 : encoding to miss any length between 3 and this value, so that the compression
; 1374 : may be worse (but this can vary too depending on the image, sometimes it is
; 1375 : even a bit better instead).
; 1376 : The HASH_NUM_VALUES is the amount of unique possible hash values that
; 1377 : combinations of bytes can give, the higher it is the more memory is needed, but
; 1378 : if it's too low the advantage of hashing is gone.
; 1379 : */
; 1380 : 
; 1381 : typedef struct Hash
; 1382 : {
; 1383 :   int* head; /*hash value to head circular pos*/
; 1384 :   int* val; /*circular pos to hash value*/
; 1385 :   /*circular pos to prev circular pos*/
; 1386 :   unsigned short* chain;
; 1387 :   unsigned short* zeros;
; 1388 : } Hash;
; 1389 : 
; 1390 : static unsigned hash_init(Hash* hash, unsigned windowsize)
; 1391 : {
; 1392 :   unsigned i;
; 1393 :   hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
; 1394 :   hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
; 1395 :   hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1396 :   hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1397 : 
; 1398 :   if(!hash->head || !hash->val || !hash->chain || !hash->zeros) return 83; /*alloc fail*/
; 1399 : 
; 1400 :   /*initialize hash table*/
; 1401 :   for(i = 0; i < HASH_NUM_VALUES; i++) hash->head[i] = -1;
; 1402 :   for(i = 0; i < windowsize; i++) hash->val[i] = -1;
; 1403 :   for(i = 0; i < windowsize; i++) hash->chain[i] = i; /*same value as index indicates uninitialized*/
; 1404 : 
; 1405 :   return 0;
; 1406 : }
; 1407 : 
; 1408 : static void hash_cleanup(Hash* hash)
; 1409 : {
; 1410 :   lodepng_free(hash->head);
; 1411 :   lodepng_free(hash->val);
; 1412 :   lodepng_free(hash->chain);
; 1413 :   lodepng_free(hash->zeros);
; 1414 : }
; 1415 : 
; 1416 : static unsigned getHash(const unsigned char* data, size_t size, size_t pos)
; 1417 : {
; 1418 :   unsigned result = 0;
; 1419 :   size_t amount, i;
; 1420 :   if(pos >= size) return 0;
; 1421 :   amount = HASH_NUM_CHARACTERS;
; 1422 :   if(pos + amount >= size) amount = size - pos;
; 1423 :   for(i = 0; i < amount; i++) result ^= (data[pos + i] << (i * HASH_SHIFT));
; 1424 :   return result % HASH_NUM_VALUES;
; 1425 : }
; 1426 : 
; 1427 : static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)
; 1428 : {
; 1429 :   const unsigned char* start = data + pos;
; 1430 :   const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
; 1431 :   if(end > data + size) end = data + size;
; 1432 :   data = start;
; 1433 :   while (data != end && *data == 0) data++;
; 1434 :   /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
; 1435 :   return (unsigned)(data - start);
; 1436 : }
; 1437 : 
; 1438 : static void updateHashChain(Hash* hash, size_t pos, int hashval, unsigned windowsize)
; 1439 : {
; 1440 :   unsigned wpos = pos % windowsize;
; 1441 :   hash->val[wpos] = hashval;
; 1442 :   if(hash->head[hashval] != -1) hash->chain[wpos] = hash->head[hashval];
; 1443 :   hash->head[hashval] = wpos;
; 1444 : }
; 1445 : 
; 1446 : /*
; 1447 : LZ77-encode the data. Return value is error code. The input are raw bytes, the output
; 1448 : is in the form of unsigned integers with codes representing for example literal bytes, or
; 1449 : length/distance pairs.
; 1450 : It uses a hash table technique to let it encode faster. When doing LZ77 encoding, a
; 1451 : sliding window (of windowsize) is used, and all past bytes in that window can be used as
; 1452 : the "dictionary". A brute force search through all possible distances would be slow, and
; 1453 : this hash technique is one out of several ways to speed this up.
; 1454 : */
; 1455 : static unsigned encodeLZ77(uivector* out, Hash* hash,
; 1456 :                            const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
; 1457 :                            unsigned minmatch, unsigned nicematch, unsigned lazymatching)
; 1458 : {
; 1459 :   unsigned short numzeros = 0;
; 1460 :   int usezeros = windowsize >= 8192; /*for small window size, the 'max chain length' optimization does a better job*/
; 1461 :   unsigned pos, i, error = 0;
; 1462 :   /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
; 1463 :   unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8;
; 1464 :   unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;
; 1465 : 
; 1466 :   if(!error)
; 1467 :   {
; 1468 :     unsigned offset; /*the offset represents the distance in LZ77 terminology*/
; 1469 :     unsigned length;
; 1470 :     unsigned lazy = 0;
; 1471 :     unsigned lazylength = 0, lazyoffset = 0;
; 1472 :     unsigned hashval;
; 1473 :     unsigned current_offset, current_length;
; 1474 :     const unsigned char *lastptr, *foreptr, *backptr;
; 1475 :     unsigned short hashpos, prevpos;
; 1476 : 
; 1477 :     for(pos = inpos; pos < insize; pos++)
; 1478 :     {
; 1479 :       size_t wpos = pos % windowsize; /*position for in 'circular' hash buffers*/
; 1480 : 
; 1481 :       hashval = getHash(in, insize, pos);
; 1482 :       updateHashChain(hash, pos, hashval, windowsize);
; 1483 : 
; 1484 :       if(usezeros && hashval == 0)
; 1485 :       {
; 1486 :         numzeros = countZeros(in, insize, pos);
; 1487 :         hash->zeros[wpos] = numzeros;
; 1488 :       }
; 1489 : 
; 1490 :       /*the length and offset found for the current position*/
; 1491 :       length = 0;
; 1492 :       offset = 0;
; 1493 : 
; 1494 :       prevpos = hash->head[hashval];
; 1495 :       hashpos = hash->chain[prevpos];
; 1496 : 
; 1497 :       lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];
; 1498 : 
; 1499 :       /*search for the longest string*/
; 1500 :       if(hash->val[wpos] == (int)hashval)
; 1501 :       {
; 1502 :         unsigned chainlength = 0;
; 1503 :         for(;;)
; 1504 :         {
; 1505 :           /*stop when went completely around the circular buffer*/
; 1506 :           if(prevpos < wpos && hashpos > prevpos && hashpos <= wpos) break;
; 1507 :           if(prevpos > wpos && (hashpos <= wpos || hashpos > prevpos)) break;
; 1508 :           if(chainlength++ >= maxchainlength) break;
; 1509 : 
; 1510 :           current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;
; 1511 :           if(current_offset > 0)
; 1512 :           {
; 1513 :             /*test the next characters*/
; 1514 :             foreptr = &in[pos];
; 1515 :             backptr = &in[pos - current_offset];
; 1516 : 
; 1517 :             /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
; 1518 :             if(usezeros && hashval == 0 && hash->val[hashpos] == 0 /*hashval[hashpos] may be out of date*/)
; 1519 :             {
; 1520 :               unsigned short skip = hash->zeros[hashpos];
; 1521 :               if(skip > numzeros) skip = numzeros;
; 1522 :               backptr += skip;
; 1523 :               foreptr += skip;
; 1524 :             }
; 1525 : 
; 1526 :             /* multiple checks at once per array bounds check */
; 1527 :             while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
; 1528 :             {
; 1529 :               ++backptr;
; 1530 :               ++foreptr;
; 1531 :             }
; 1532 :             current_length = (unsigned)(foreptr - &in[pos]);
; 1533 : 
; 1534 :             if(current_length > length)
; 1535 :             {
; 1536 :               length = current_length; /*the longest length*/
; 1537 :               offset = current_offset; /*the offset that is related to this longest length*/
; 1538 :               /*jump out once a length of max length is found (speed gain)*/
; 1539 :               if(current_length >= nicematch || current_length == MAX_SUPPORTED_DEFLATE_LENGTH) break;
; 1540 :             }
; 1541 :           }
; 1542 : 
; 1543 :           if(hashpos == hash->chain[hashpos]) break;
; 1544 : 
; 1545 :           prevpos = hashpos;
; 1546 :           hashpos = hash->chain[hashpos];
; 1547 :         }
; 1548 :       }
; 1549 : 
; 1550 :       if(lazymatching)
; 1551 :       {
; 1552 :         if(!lazy && length >= 3 && length <= maxlazymatch && length < MAX_SUPPORTED_DEFLATE_LENGTH)
; 1553 :         {
; 1554 :           lazy = 1;
; 1555 :           lazylength = length;
; 1556 :           lazyoffset = offset;
; 1557 :           continue; /*try the next byte*/
; 1558 :         }
; 1559 :         if(lazy)
; 1560 :         {
; 1561 :           lazy = 0;
; 1562 :           if(pos == 0) ERROR_BREAK(81);
; 1563 :           if(length > lazylength + 1)
; 1564 :           {
; 1565 :             /*push the previous character as literal*/
; 1566 :             if(!uivector_push_back(out, in[pos - 1])) ERROR_BREAK(83 /*alloc fail*/);
; 1567 :           }
; 1568 :           else
; 1569 :           {
; 1570 :             length = lazylength;
; 1571 :             offset = lazyoffset;
; 1572 :             hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
; 1573 :             pos--;
; 1574 :           }
; 1575 :         }
; 1576 :       }
; 1577 :       if(length >= 3 && offset > windowsize) ERROR_BREAK(86 /*too big (or overflown negative) offset*/);
; 1578 : 
; 1579 :       /**encode it as length/distance pair or literal value**/
; 1580 :       if(length < 3) /*only lengths of 3 or higher are supported as length/distance pair*/
; 1581 :       {
; 1582 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1583 :       }
; 1584 :       else if(length < minmatch || (length == 3 && offset > 4096))
; 1585 :       {
; 1586 :         /*compensate for the fact that longer offsets have more extra bits, a
; 1587 :         length of only 3 may be not worth it then*/
; 1588 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1589 :       }
; 1590 :       else
; 1591 :       {
; 1592 :         addLengthDistance(out, length, offset);
; 1593 :         for(i = 1; i < length; i++)
; 1594 :         {
; 1595 :           pos++;
; 1596 :           hashval = getHash(in, insize, pos);
; 1597 :           updateHashChain(hash, pos, hashval, windowsize);
; 1598 :           if(usezeros && hashval == 0)
; 1599 :           {
; 1600 :             hash->zeros[pos % windowsize] = countZeros(in, insize, pos);
; 1601 :           }
; 1602 :         }
; 1603 :       }
; 1604 : 
; 1605 :     } /*end of the loop through each character of input*/
; 1606 :   } /*end of "if(!error)"*/
; 1607 : 
; 1608 :   return error;
; 1609 : }
; 1610 : 
; 1611 : /* /////////////////////////////////////////////////////////////////////////// */
; 1612 : 
; 1613 : static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)
; 1614 : {
; 1615 :   /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
; 1616 :   2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/
; 1617 : 
; 1618 :   size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
; 1619 :   unsigned datapos = 0;
; 1620 :   for(i = 0; i < numdeflateblocks; i++)
; 1621 :   {
; 1622 :     unsigned BFINAL, BTYPE, LEN, NLEN;
; 1623 :     unsigned char firstbyte;
; 1624 : 
; 1625 :     BFINAL = (i == numdeflateblocks - 1);
; 1626 :     BTYPE = 0;
; 1627 : 
; 1628 :     firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1) << 1) + ((BTYPE & 2) << 1));
; 1629 :     ucvector_push_back(out, firstbyte);
; 1630 : 
; 1631 :     LEN = 65535;
; 1632 :     if(datasize - datapos < 65535) LEN = (unsigned)datasize - datapos;
; 1633 :     NLEN = 65535 - LEN;
; 1634 : 
; 1635 :     ucvector_push_back(out, (unsigned char)(LEN % 256));
; 1636 :     ucvector_push_back(out, (unsigned char)(LEN / 256));
; 1637 :     ucvector_push_back(out, (unsigned char)(NLEN % 256));
; 1638 :     ucvector_push_back(out, (unsigned char)(NLEN / 256));
; 1639 : 
; 1640 :     /*Decompressed data*/
; 1641 :     for(j = 0; j < 65535 && datapos < datasize; j++)
; 1642 :     {
; 1643 :       ucvector_push_back(out, data[datapos++]);
; 1644 :     }
; 1645 :   }
; 1646 : 
; 1647 :   return 0;
; 1648 : }
; 1649 : 
; 1650 : /*
; 1651 : write the lz77-encoded data, which has lit, len and dist codes, to compressed stream using huffman trees.
; 1652 : tree_ll: the tree for lit and len codes.
; 1653 : tree_d: the tree for distance codes.
; 1654 : */
; 1655 : static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
; 1656 :                           const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
; 1657 : {
; 1658 :   size_t i = 0;
; 1659 :   for(i = 0; i < lz77_encoded->size; i++)
; 1660 :   {
; 1661 :     unsigned val = lz77_encoded->data[i];
; 1662 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_ll, val), HuffmanTree_getLength(tree_ll, val));
; 1663 :     if(val > 256) /*for a length code, 3 more things have to be added*/
; 1664 :     {
; 1665 :       unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
; 1666 :       unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
; 1667 :       unsigned length_extra_bits = lz77_encoded->data[++i];
; 1668 : 
; 1669 :       unsigned distance_code = lz77_encoded->data[++i];
; 1670 : 
; 1671 :       unsigned distance_index = distance_code;
; 1672 :       unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
; 1673 :       unsigned distance_extra_bits = lz77_encoded->data[++i];
; 1674 : 
; 1675 :       addBitsToStream(bp, out, length_extra_bits, n_length_extra_bits);
; 1676 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
; 1677 :                        HuffmanTree_getLength(tree_d, distance_code));
; 1678 :       addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
; 1679 :     }
; 1680 :   }
; 1681 : }
; 1682 : 
; 1683 : /*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
; 1684 : static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,
; 1685 :                                const unsigned char* data, size_t datapos, size_t dataend,
; 1686 :                                const LodePNGCompressSettings* settings, int final)
; 1687 : {
; 1688 :   unsigned error = 0;
; 1689 : 
; 1690 :   /*
; 1691 :   A block is compressed as follows: The PNG data is lz77 encoded, resulting in
; 1692 :   literal bytes and length/distance pairs. This is then huffman compressed with
; 1693 :   two huffman trees. One huffman tree is used for the lit and len values ("ll"),
; 1694 :   another huffman tree is used for the dist values ("d"). These two trees are
; 1695 :   stored using their code lengths, and to compress even more these code lengths
; 1696 :   are also run-length encoded and huffman compressed. This gives a huffman tree
; 1697 :   of code lengths "cl". The code lenghts used to describe this third tree are
; 1698 :   the code length code lengths ("clcl").
; 1699 :   */
; 1700 : 
; 1701 :   /*The lz77 encoded data, represented with integers since there will also be length and distance codes in it*/
; 1702 :   uivector lz77_encoded;
; 1703 :   HuffmanTree tree_ll; /*tree for lit,len values*/
; 1704 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1705 :   HuffmanTree tree_cl; /*tree for encoding the code lengths representing tree_ll and tree_d*/
; 1706 :   uivector frequencies_ll; /*frequency of lit,len codes*/
; 1707 :   uivector frequencies_d; /*frequency of dist codes*/
; 1708 :   uivector frequencies_cl; /*frequency of code length codes*/
; 1709 :   uivector bitlen_lld; /*lit,len,dist code lenghts (int bits), literally (without repeat codes).*/
; 1710 :   uivector bitlen_lld_e; /*bitlen_lld encoded with repeat codes (this is a rudemtary run length compression)*/
; 1711 :   /*bitlen_cl is the code length code lengths ("clcl"). The bit lengths of codes to represent tree_cl
; 1712 :   (these are written as is in the file, it would be crazy to compress these using yet another huffman
; 1713 :   tree that needs to be represented by yet another set of code lengths)*/
; 1714 :   uivector bitlen_cl;
; 1715 :   size_t datasize = dataend - datapos;
; 1716 : 
; 1717 :   /*
; 1718 :   Due to the huffman compression of huffman tree representations ("two levels"), there are some anologies:
; 1719 :   bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
; 1720 :   bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
; 1721 :   bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
; 1722 :   */
; 1723 : 
; 1724 :   unsigned BFINAL = final;
; 1725 :   size_t numcodes_ll, numcodes_d, i;
; 1726 :   unsigned HLIT, HDIST, HCLEN;
; 1727 : 
; 1728 :   uivector_init(&lz77_encoded);
; 1729 :   HuffmanTree_init(&tree_ll);
; 1730 :   HuffmanTree_init(&tree_d);
; 1731 :   HuffmanTree_init(&tree_cl);
; 1732 :   uivector_init(&frequencies_ll);
; 1733 :   uivector_init(&frequencies_d);
; 1734 :   uivector_init(&frequencies_cl);
; 1735 :   uivector_init(&bitlen_lld);
; 1736 :   uivector_init(&bitlen_lld_e);
; 1737 :   uivector_init(&bitlen_cl);
; 1738 : 
; 1739 :   /*This while loop never loops due to a break at the end, it is here to
; 1740 :   allow breaking out of it to the cleanup phase on error conditions.*/
; 1741 :   while(!error)
; 1742 :   {
; 1743 :     if(settings->use_lz77)
; 1744 :     {
; 1745 :       error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1746 :                          settings->minmatch, settings->nicematch, settings->lazymatching);
; 1747 :       if(error) break;
; 1748 :     }
; 1749 :     else
; 1750 :     {
; 1751 :       if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83 /*alloc fail*/);
; 1752 :       for(i = datapos; i < dataend; i++) lz77_encoded.data[i] = data[i]; /*no LZ77, but still will be Huffman compressed*/
; 1753 :     }
; 1754 : 
; 1755 :     if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1756 :     if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1757 : 
; 1758 :     /*Count the frequencies of lit, len and dist codes*/
; 1759 :     for(i = 0; i < lz77_encoded.size; i++)
; 1760 :     {
; 1761 :       unsigned symbol = lz77_encoded.data[i];
; 1762 :       frequencies_ll.data[symbol]++;
; 1763 :       if(symbol > 256)
; 1764 :       {
; 1765 :         unsigned dist = lz77_encoded.data[i + 2];
; 1766 :         frequencies_d.data[dist]++;
; 1767 :         i += 3;
; 1768 :       }
; 1769 :     }
; 1770 :     frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/
; 1771 : 
; 1772 :     /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
; 1773 :     error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
; 1774 :     if(error) break;
; 1775 :     /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
; 1776 :     error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
; 1777 :     if(error) break;
; 1778 : 
; 1779 :     numcodes_ll = tree_ll.numcodes; if(numcodes_ll > 286) numcodes_ll = 286;
; 1780 :     numcodes_d = tree_d.numcodes; if(numcodes_d > 30) numcodes_d = 30;
; 1781 :     /*store the code lengths of both generated trees in bitlen_lld*/
; 1782 :     for(i = 0; i < numcodes_ll; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
; 1783 :     for(i = 0; i < numcodes_d; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));
; 1784 : 
; 1785 :     /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
; 1786 :     17 (3-10 zeroes), 18 (11-138 zeroes)*/
; 1787 :     for(i = 0; i < (unsigned)bitlen_lld.size; i++)
; 1788 :     {
; 1789 :       unsigned j = 0; /*amount of repititions*/
; 1790 :       while(i + j + 1 < (unsigned)bitlen_lld.size && bitlen_lld.data[i + j + 1] == bitlen_lld.data[i]) j++;
; 1791 : 
; 1792 :       if(bitlen_lld.data[i] == 0 && j >= 2) /*repeat code for zeroes*/
; 1793 :       {
; 1794 :         j++; /*include the first zero*/
; 1795 :         if(j <= 10) /*repeat code 17 supports max 10 zeroes*/
; 1796 :         {
; 1797 :           uivector_push_back(&bitlen_lld_e, 17);
; 1798 :           uivector_push_back(&bitlen_lld_e, j - 3);
; 1799 :         }
; 1800 :         else /*repeat code 18 supports max 138 zeroes*/
; 1801 :         {
; 1802 :           if(j > 138) j = 138;
; 1803 :           uivector_push_back(&bitlen_lld_e, 18);
; 1804 :           uivector_push_back(&bitlen_lld_e, j - 11);
; 1805 :         }
; 1806 :         i += (j - 1);
; 1807 :       }
; 1808 :       else if(j >= 3) /*repeat code for value other than zero*/
; 1809 :       {
; 1810 :         size_t k;
; 1811 :         unsigned num = j / 6, rest = j % 6;
; 1812 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1813 :         for(k = 0; k < num; k++)
; 1814 :         {
; 1815 :           uivector_push_back(&bitlen_lld_e, 16);
; 1816 :           uivector_push_back(&bitlen_lld_e, 6 - 3);
; 1817 :         }
; 1818 :         if(rest >= 3)
; 1819 :         {
; 1820 :           uivector_push_back(&bitlen_lld_e, 16);
; 1821 :           uivector_push_back(&bitlen_lld_e, rest - 3);
; 1822 :         }
; 1823 :         else j -= rest;
; 1824 :         i += j;
; 1825 :       }
; 1826 :       else /*too short to benefit from repeat code*/
; 1827 :       {
; 1828 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1829 :       }
; 1830 :     }
; 1831 : 
; 1832 :     /*generate tree_cl, the huffmantree of huffmantrees*/
; 1833 : 
; 1834 :     if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1835 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1836 :     {
; 1837 :       frequencies_cl.data[bitlen_lld_e.data[i]]++;
; 1838 :       /*after a repeat code come the bits that specify the number of repetitions,
; 1839 :       those don't need to be in the frequencies_cl calculation*/
; 1840 :       if(bitlen_lld_e.data[i] >= 16) i++;
; 1841 :     }
; 1842 : 
; 1843 :     error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
; 1844 :                                             frequencies_cl.size, frequencies_cl.size, 7);
; 1845 :     if(error) break;
; 1846 : 
; 1847 :     if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
; 1848 :     for(i = 0; i < tree_cl.numcodes; i++)
; 1849 :     {
; 1850 :       /*lenghts of code length tree is in the order as specified by deflate*/
; 1851 :       bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
; 1852 :     }
; 1853 :     while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
; 1854 :     {
; 1855 :       /*remove zeros at the end, but minimum size must be 4*/
; 1856 :       if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
; 1857 :     }
; 1858 :     if(error) break;
; 1859 : 
; 1860 :     /*
; 1861 :     Write everything into the output
; 1862 : 
; 1863 :     After the BFINAL and BTYPE, the dynamic block consists out of the following:
; 1864 :     - 5 bits HLIT, 5 bits HDIST, 4 bits HCLEN
; 1865 :     - (HCLEN+4)*3 bits code lengths of code length alphabet
; 1866 :     - HLIT + 257 code lenghts of lit/length alphabet (encoded using the code length
; 1867 :       alphabet, + possible repetition codes 16, 17, 18)
; 1868 :     - HDIST + 1 code lengths of distance alphabet (encoded using the code length
; 1869 :       alphabet, + possible repetition codes 16, 17, 18)
; 1870 :     - compressed data
; 1871 :     - 256 (end code)
; 1872 :     */
; 1873 : 
; 1874 :     /*Write block type*/
; 1875 :     addBitToStream(bp, out, BFINAL);
; 1876 :     addBitToStream(bp, out, 0); /*first bit of BTYPE "dynamic"*/
; 1877 :     addBitToStream(bp, out, 1); /*second bit of BTYPE "dynamic"*/
; 1878 : 
; 1879 :     /*write the HLIT, HDIST and HCLEN values*/
; 1880 :     HLIT = (unsigned)(numcodes_ll - 257);
; 1881 :     HDIST = (unsigned)(numcodes_d - 1);
; 1882 :     HCLEN = (unsigned)bitlen_cl.size - 4;
; 1883 :     /*trim zeroes for HCLEN. HLIT and HDIST were already trimmed at tree creation*/
; 1884 :     while(!bitlen_cl.data[HCLEN + 4 - 1] && HCLEN > 0) HCLEN--;
; 1885 :     addBitsToStream(bp, out, HLIT, 5);
; 1886 :     addBitsToStream(bp, out, HDIST, 5);
; 1887 :     addBitsToStream(bp, out, HCLEN, 4);
; 1888 : 
; 1889 :     /*write the code lenghts of the code length alphabet*/
; 1890 :     for(i = 0; i < HCLEN + 4; i++) addBitsToStream(bp, out, bitlen_cl.data[i], 3);
; 1891 : 
; 1892 :     /*write the lenghts of the lit/len AND the dist alphabet*/
; 1893 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1894 :     {
; 1895 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
; 1896 :                        HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
; 1897 :       /*extra bits of repeat codes*/
; 1898 :       if(bitlen_lld_e.data[i] == 16) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 2);
; 1899 :       else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
; 1900 :       else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
; 1901 :     }
; 1902 : 
; 1903 :     /*write the compressed data symbols*/
; 1904 :     writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1905 :     /*error: the length of the end code 256 must be larger than 0*/
; 1906 :     if(HuffmanTree_getLength(&tree_ll, 256) == 0) ERROR_BREAK(64);
; 1907 : 
; 1908 :     /*write the end code*/
; 1909 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1910 : 
; 1911 :     break; /*end of error-while*/
; 1912 :   }
; 1913 : 
; 1914 :   /*cleanup*/
; 1915 :   uivector_cleanup(&lz77_encoded);
; 1916 :   HuffmanTree_cleanup(&tree_ll);
; 1917 :   HuffmanTree_cleanup(&tree_d);
; 1918 :   HuffmanTree_cleanup(&tree_cl);
; 1919 :   uivector_cleanup(&frequencies_ll);
; 1920 :   uivector_cleanup(&frequencies_d);
; 1921 :   uivector_cleanup(&frequencies_cl);
; 1922 :   uivector_cleanup(&bitlen_lld_e);
; 1923 :   uivector_cleanup(&bitlen_lld);
; 1924 :   uivector_cleanup(&bitlen_cl);
; 1925 : 
; 1926 :   return error;
; 1927 : }
; 1928 : 
; 1929 : static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,
; 1930 :                              const unsigned char* data,
; 1931 :                              size_t datapos, size_t dataend,
; 1932 :                              const LodePNGCompressSettings* settings, int final)
; 1933 : {
; 1934 :   HuffmanTree tree_ll; /*tree for literal values and length codes*/
; 1935 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1936 : 
; 1937 :   unsigned BFINAL = final;
; 1938 :   unsigned error = 0;
; 1939 :   size_t i;
; 1940 : 
; 1941 :   HuffmanTree_init(&tree_ll);
; 1942 :   HuffmanTree_init(&tree_d);
; 1943 : 
; 1944 :   generateFixedLitLenTree(&tree_ll);
; 1945 :   generateFixedDistanceTree(&tree_d);
; 1946 : 
; 1947 :   addBitToStream(bp, out, BFINAL);
; 1948 :   addBitToStream(bp, out, 1); /*first bit of BTYPE*/
; 1949 :   addBitToStream(bp, out, 0); /*second bit of BTYPE*/
; 1950 : 
; 1951 :   if(settings->use_lz77) /*LZ77 encoded*/
; 1952 :   {
; 1953 :     uivector lz77_encoded;
; 1954 :     uivector_init(&lz77_encoded);
; 1955 :     error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1956 :                        settings->minmatch, settings->nicematch, settings->lazymatching);
; 1957 :     if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1958 :     uivector_cleanup(&lz77_encoded);
; 1959 :   }
; 1960 :   else /*no LZ77, but still will be Huffman compressed*/
; 1961 :   {
; 1962 :     for(i = datapos; i < dataend; i++)
; 1963 :     {
; 1964 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
; 1965 :     }
; 1966 :   }
; 1967 :   /*add END code*/
; 1968 :   if(!error) addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1969 : 
; 1970 :   /*cleanup*/
; 1971 :   HuffmanTree_cleanup(&tree_ll);
; 1972 :   HuffmanTree_cleanup(&tree_d);
; 1973 : 
; 1974 :   return error;
; 1975 : }
; 1976 : 
; 1977 : static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
; 1978 :                                  const LodePNGCompressSettings* settings)
; 1979 : {
; 1980 :   unsigned error = 0;
; 1981 :   size_t i, blocksize, numdeflateblocks;
; 1982 :   size_t bp = 0; /*the bit pointer*/
; 1983 :   Hash hash;
; 1984 : 
; 1985 :   if(settings->btype > 2) return 61;
; 1986 :   else if(settings->btype == 0) return deflateNoCompression(out, in, insize);
; 1987 :   else if(settings->btype == 1) blocksize = insize;
; 1988 :   else /*if(settings->btype == 2)*/
; 1989 :   {
; 1990 :     blocksize = insize / 8 + 8;
; 1991 :     if(blocksize < 65535) blocksize = 65535;
; 1992 :   }
; 1993 : 
; 1994 :   numdeflateblocks = (insize + blocksize - 1) / blocksize;
; 1995 :   if(numdeflateblocks == 0) numdeflateblocks = 1;
; 1996 : 
; 1997 :   error = hash_init(&hash, settings->windowsize);
; 1998 :   if(error) return error;
; 1999 : 
; 2000 :   for(i = 0; i < numdeflateblocks && !error; i++)
; 2001 :   {
; 2002 :     int final = i == numdeflateblocks - 1;
; 2003 :     size_t start = i * blocksize;
; 2004 :     size_t end = start + blocksize;
; 2005 :     if(end > insize) end = insize;
; 2006 : 
; 2007 :     if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
; 2008 :     else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
; 2009 :   }
; 2010 : 
; 2011 :   hash_cleanup(&hash);
; 2012 : 
; 2013 :   return error;
; 2014 : }
; 2015 : 
; 2016 : unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
; 2017 :                          const unsigned char* in, size_t insize,
; 2018 :                          const LodePNGCompressSettings* settings)
; 2019 : {
; 2020 :   unsigned error;
; 2021 :   ucvector v;
; 2022 :   ucvector_init_buffer(&v, *out, *outsize);
; 2023 :   error = lodepng_deflatev(&v, in, insize, settings);
; 2024 :   *out = v.data;
; 2025 :   *outsize = v.size;
; 2026 :   return error;
; 2027 : }
; 2028 : 
; 2029 : static unsigned deflate(unsigned char** out, size_t* outsize,
; 2030 :                         const unsigned char* in, size_t insize,
; 2031 :                         const LodePNGCompressSettings* settings)
; 2032 : {
; 2033 :   if(settings->custom_deflate)
; 2034 :   {
; 2035 :     return settings->custom_deflate(out, outsize, in, insize, settings);
; 2036 :   }
; 2037 :   else
; 2038 :   {
; 2039 :     return lodepng_deflate(out, outsize, in, insize, settings);
; 2040 :   }
; 2041 : }
; 2042 : 
; 2043 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2044 : 
; 2045 : /* ////////////////////////////////////////////////////////////////////////// */
; 2046 : /* / Adler32                                                                  */
; 2047 : /* ////////////////////////////////////////////////////////////////////////// */
; 2048 : 
; 2049 : static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
; 2050 : {
; 2051 :    unsigned s1 = adler & 0xffff;
; 2052 :    unsigned s2 = (adler >> 16) & 0xffff;
; 2053 : 
; 2054 :   while(len > 0)
; 2055 :   {
; 2056 :     /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
; 2057 :     unsigned amount = len > 5550 ? 5550 : len;
; 2058 :     len -= amount;
; 2059 :     while(amount > 0)
; 2060 :     {
; 2061 :       s1 += (*data++);
; 2062 :       s2 += s1;
; 2063 :       amount--;
; 2064 :     }
; 2065 :     s1 %= 65521;
; 2066 :     s2 %= 65521;
; 2067 :   }
; 2068 : 
; 2069 :   return (s2 << 16) | s1;
; 2070 : }
; 2071 : 
; 2072 : /*Return the adler32 of the bytes data[0..len-1]*/
; 2073 : static unsigned adler32(const unsigned char* data, unsigned len)
; 2074 : {
; 2075 :   return update_adler32(1L, data, len);
; 2076 : }
; 2077 : 
; 2078 : /* ////////////////////////////////////////////////////////////////////////// */
; 2079 : /* / Zlib                                                                   / */
; 2080 : /* ////////////////////////////////////////////////////////////////////////// */
; 2081 : 
; 2082 : #ifdef LODEPNG_COMPILE_DECODER
; 2083 : 
; 2084 : unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2085 :                                  size_t insize, const LodePNGDecompressSettings* settings)
; 2086 : {
; 2087 :   unsigned error = 0;
; 2088 :   unsigned CM, CINFO, FDICT;
; 2089 : 
; 2090 :   if(insize < 2) return 53; /*error, size of zlib data too small*/
; 2091 :   /*read information from zlib header*/
; 2092 :   if((in[0] * 256 + in[1]) % 31 != 0)
; 2093 :   {
; 2094 :     /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
; 2095 :     return 24;
; 2096 :   }
; 2097 : 
; 2098 :   CM = in[0] & 15;
; 2099 :   CINFO = (in[0] >> 4) & 15;
; 2100 :   /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
; 2101 :   FDICT = (in[1] >> 5) & 1;
; 2102 :   /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/
; 2103 : 
; 2104 :   if(CM != 8 || CINFO > 7)
; 2105 :   {
; 2106 :     /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
; 2107 :     return 25;
; 2108 :   }
; 2109 :   if(FDICT != 0)
; 2110 :   {
; 2111 :     /*error: the specification of PNG says about the zlib stream:
; 2112 :       "The additional flags shall not specify a preset dictionary."*/
; 2113 :     return 26;
; 2114 :   }
; 2115 : 
; 2116 :   error = inflate(out, outsize, in + 2, insize - 2, settings);
; 2117 :   if(error) return error;
; 2118 : 
; 2119 :   if(!settings->ignore_adler32)
; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/
; 2124 :   }
; 2125 : 
; 2126 :   return 0; /*no error*/
; 2127 : }
; 2128 : 
; 2129 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2130 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2131 : {
; 2132 :   if(settings->custom_zlib)
; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2134 :   else
; 2135 :     return lodepng_zlib_decompress(out, outsize, in, insize, settings);
; 2136 : }
; 2137 : 
; 2138 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2139 : 
; 2140 : #ifdef LODEPNG_COMPILE_ENCODER
; 2141 : 
; 2142 : unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2143 :                                size_t insize, const LodePNGCompressSettings* settings)
; 2144 : {
; 2145 :   /*initially, *out must be NULL and outsize 0, if you just give some random *out
; 2146 :   that's pointing to a non allocated buffer, this'll crash*/
; 2147 :   ucvector outv;
; 2148 :   size_t i;
; 2149 :   unsigned error;
; 2150 :   unsigned char* deflatedata = 0;
; 2151 :   size_t deflatesize = 0;
; 2152 : 
; 2153 :   unsigned ADLER32;
; 2154 :   /*zlib data: 1 byte CMF (CM+CINFO), 1 byte FLG, deflate data, 4 byte ADLER32 checksum of the Decompressed data*/
; 2155 :   unsigned CMF = 120; /*0b01111000: CM 8, CINFO 7. With CINFO 7, any window size up to 32768 can be used.*/
; 2156 :   unsigned FLEVEL = 0;
; 2157 :   unsigned FDICT = 0;
; 2158 :   unsigned CMFFLG = 256 * CMF + FDICT * 32 + FLEVEL * 64;
; 2159 :   unsigned FCHECK = 31 - CMFFLG % 31;
; 2160 :   CMFFLG += FCHECK;
; 2161 : 
; 2162 :   /*ucvector-controlled version of the output buffer, for dynamic array*/
; 2163 :   ucvector_init_buffer(&outv, *out, *outsize);
; 2164 : 
; 2165 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG / 256));
; 2166 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG % 256));
; 2167 : 
; 2168 :   error = deflate(&deflatedata, &deflatesize, in, insize, settings);
; 2169 : 
; 2170 :   if(!error)
; 2171 :   {
; 2172 :     ADLER32 = adler32(in, (unsigned)insize);
; 2173 :     for(i = 0; i < deflatesize; i++) ucvector_push_back(&outv, deflatedata[i]);
; 2174 :     lodepng_free(deflatedata);
; 2175 :     lodepng_add32bitInt(&outv, ADLER32);
; 2176 :   }
; 2177 : 
; 2178 :   *out = outv.data;
; 2179 :   *outsize = outv.size;
; 2180 : 
; 2181 :   return error;
; 2182 : }
; 2183 : 
; 2184 : /* compress using the default or custom zlib function */
; 2185 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2186 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2187 : {
; 2188 :   if(settings->custom_zlib)
; 2189 :   {
; 2190 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2191 :   }
; 2192 :   else
; 2193 :   {
; 2194 :     return lodepng_zlib_compress(out, outsize, in, insize, settings);
; 2195 :   }
; 2196 : }
; 2197 : 
; 2198 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2199 : 
; 2200 : #else /*no LODEPNG_COMPILE_ZLIB*/
; 2201 : 
; 2202 : #ifdef LODEPNG_COMPILE_DECODER
; 2203 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2204 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2205 : {
; 2206 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2207 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2208 : }
; 2209 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2210 : #ifdef LODEPNG_COMPILE_ENCODER
; 2211 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2212 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2213 : {
; 2214 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2215 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2216 : }
; 2217 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2218 : 
; 2219 : #endif /*LODEPNG_COMPILE_ZLIB*/
; 2220 : 
; 2221 : /* ////////////////////////////////////////////////////////////////////////// */
; 2222 : 
; 2223 : #ifdef LODEPNG_COMPILE_ENCODER
; 2224 : 
; 2225 : /*this is a good tradeoff between speed and compression ratio*/
; 2226 : #define DEFAULT_WINDOWSIZE 2048
; 2227 : 
; 2228 : void lodepng_compress_settings_init(LodePNGCompressSettings* settings)
; 2229 : {
; 2230 :   /*compress with dynamic huffman tree (not in the mathematical sense, just not the predefined one)*/
; 2231 :   settings->btype = 2;
; 2232 :   settings->use_lz77 = 1;
; 2233 :   settings->windowsize = DEFAULT_WINDOWSIZE;
; 2234 :   settings->minmatch = 3;
; 2235 :   settings->nicematch = 128;
; 2236 :   settings->lazymatching = 1;
; 2237 : 
; 2238 :   settings->custom_zlib = 0;
; 2239 :   settings->custom_deflate = 0;
; 2240 :   settings->custom_context = 0;
; 2241 : }
; 2242 : 
; 2243 : const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 3, 128, 1, 0, 0, 0};
; 2244 : 
; 2245 : 
; 2246 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2247 : 
; 2248 : #ifdef LODEPNG_COMPILE_DECODER
; 2249 : 
; 2250 : void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings)
; 2251 : {
; 2252 :   settings->ignore_adler32 = 0;
; 2253 : 
; 2254 :   settings->custom_zlib = 0;
; 2255 :   settings->custom_inflate = 0;
; 2256 :   settings->custom_context = 0;
; 2257 : }
; 2258 : 
; 2259 : const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0, 0, 0};
; 2260 : 
; 2261 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2262 : 
; 2263 : /* ////////////////////////////////////////////////////////////////////////// */
; 2264 : /* ////////////////////////////////////////////////////////////////////////// */
; 2265 : /* // End of Zlib related code. Begin of PNG related code.                 // */
; 2266 : /* ////////////////////////////////////////////////////////////////////////// */
; 2267 : /* ////////////////////////////////////////////////////////////////////////// */
; 2268 : 
; 2269 : #ifdef LODEPNG_COMPILE_PNG
; 2270 : 
; 2271 : /* ////////////////////////////////////////////////////////////////////////// */
; 2272 : /* / CRC32                                                                  / */
; 2273 : /* ////////////////////////////////////////////////////////////////////////// */
; 2274 : 
; 2275 : /* CRC polynomial: 0xedb88320 */
; 2276 : static unsigned lodepng_crc32_table[256] = {
; 2277 :            0u, 1996959894u, 3993919788u, 2567524794u,  124634137u, 1886057615u, 3915621685u, 2657392035u,
; 2278 :    249268274u, 2044508324u, 3772115230u, 2547177864u,  162941995u, 2125561021u, 3887607047u, 2428444049u,
; 2279 :    498536548u, 1789927666u, 4089016648u, 2227061214u,  450548861u, 1843258603u, 4107580753u, 2211677639u,
; 2280 :    325883990u, 1684777152u, 4251122042u, 2321926636u,  335633487u, 1661365465u, 4195302755u, 2366115317u,
; 2281 :    997073096u, 1281953886u, 3579855332u, 2724688242u, 1006888145u, 1258607687u, 3524101629u, 2768942443u,
; 2282 :    901097722u, 1119000684u, 3686517206u, 2898065728u,  853044451u, 1172266101u, 3705015759u, 2882616665u,
; 2283 :    651767980u, 1373503546u, 3369554304u, 3218104598u,  565507253u, 1454621731u, 3485111705u, 3099436303u,
; 2284 :    671266974u, 1594198024u, 3322730930u, 2970347812u,  795835527u, 1483230225u, 3244367275u, 3060149565u,
; 2285 :   1994146192u,   31158534u, 2563907772u, 4023717930u, 1907459465u,  112637215u, 2680153253u, 3904427059u,
; 2286 :   2013776290u,  251722036u, 2517215374u, 3775830040u, 2137656763u,  141376813u, 2439277719u, 3865271297u,
; 2287 :   1802195444u,  476864866u, 2238001368u, 4066508878u, 1812370925u,  453092731u, 2181625025u, 4111451223u,
; 2288 :   1706088902u,  314042704u, 2344532202u, 4240017532u, 1658658271u,  366619977u, 2362670323u, 4224994405u,
; 2289 :   1303535960u,  984961486u, 2747007092u, 3569037538u, 1256170817u, 1037604311u, 2765210733u, 3554079995u,
; 2290 :   1131014506u,  879679996u, 2909243462u, 3663771856u, 1141124467u,  855842277u, 2852801631u, 3708648649u,
; 2291 :   1342533948u,  654459306u, 3188396048u, 3373015174u, 1466479909u,  544179635u, 3110523913u, 3462522015u,
; 2292 :   1591671054u,  702138776u, 2966460450u, 3352799412u, 1504918807u,  783551873u, 3082640443u, 3233442989u,
; 2293 :   3988292384u, 2596254646u,   62317068u, 1957810842u, 3939845945u, 2647816111u,   81470997u, 1943803523u,
; 2294 :   3814918930u, 2489596804u,  225274430u, 2053790376u, 3826175755u, 2466906013u,  167816743u, 2097651377u,
; 2295 :   4027552580u, 2265490386u,  503444072u, 1762050814u, 4150417245u, 2154129355u,  426522225u, 1852507879u,
; 2296 :   4275313526u, 2312317920u,  282753626u, 1742555852u, 4189708143u, 2394877945u,  397917763u, 1622183637u,
; 2297 :   3604390888u, 2714866558u,  953729732u, 1340076626u, 3518719985u, 2797360999u, 1068828381u, 1219638859u,
; 2298 :   3624741850u, 2936675148u,  906185462u, 1090812512u, 3747672003u, 2825379669u,  829329135u, 1181335161u,
; 2299 :   3412177804u, 3160834842u,  628085408u, 1382605366u, 3423369109u, 3138078467u,  570562233u, 1426400815u,
; 2300 :   3317316542u, 2998733608u,  733239954u, 1555261956u, 3268935591u, 3050360625u,  752459403u, 1541320221u,
; 2301 :   2607071920u, 3965973030u, 1969922972u,   40735498u, 2617837225u, 3943577151u, 1913087877u,   83908371u,
; 2302 :   2512341634u, 3803740692u, 2075208622u,  213261112u, 2463272603u, 3855990285u, 2094854071u,  198958881u,
; 2303 :   2262029012u, 4057260610u, 1759359992u,  534414190u, 2176718541u, 4139329115u, 1873836001u,  414664567u,
; 2304 :   2282248934u, 4279200368u, 1711684554u,  285281116u, 2405801727u, 4167216745u, 1634467795u,  376229701u,
; 2305 :   2685067896u, 3608007406u, 1308918612u,  956543938u, 2808555105u, 3495958263u, 1231636301u, 1047427035u,
; 2306 :   2932959818u, 3654703836u, 1088359270u,  936918000u, 2847714899u, 3736837829u, 1202900863u,  817233897u,
; 2307 :   3183342108u, 3401237130u, 1404277552u,  615818150u, 3134207493u, 3453421203u, 1423857449u,  601450431u,
; 2308 :   3009837614u, 3294710456u, 1567103746u,  711928724u, 3020668471u, 3272380065u, 1510334235u,  755167117u
; 2309 : };
; 2310 : 
; 2311 : /*Return the CRC of the bytes buf[0..len-1].*/
; 2312 : unsigned lodepng_crc32(const unsigned char* buf, size_t len)
; 2313 : {
; 2314 :   unsigned c = 0xffffffffL;
; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)
; 2318 :   {
; 2319 :     c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
; 2320 :   }
; 2321 :   return c ^ 0xffffffffL;
; 2322 : }
; 2323 : 
; 2324 : /* ////////////////////////////////////////////////////////////////////////// */
; 2325 : /* / Reading and writing single bits and bytes from/to stream for LodePNG   / */
; 2326 : /* ////////////////////////////////////////////////////////////////////////// */
; 2327 : 
; 2328 : static unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream)
; 2329 : {
; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);
; 2331 :   (*bitpointer)++;
; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)
; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
; 2354 :   }
; 2355 :   (*bitpointer)++;
; 2356 : }
; 2357 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2358 : 
; 2359 : static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2360 : {
; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));
; 2363 :   else         bitstream[(*bitpointer) >> 3] |=  (1 << (7 - ((*bitpointer) & 0x7)));
; 2364 :   (*bitpointer)++;
; 2365 : }
; 2366 : 
; 2367 : /* ////////////////////////////////////////////////////////////////////////// */
; 2368 : /* / PNG chunks                                                             / */
; 2369 : /* ////////////////////////////////////////////////////////////////////////// */
; 2370 : 
; 2371 : unsigned lodepng_chunk_length(const unsigned char* chunk)
; 2372 : {
; 2373 :   return lodepng_read32bitInt(&chunk[0]);
; 2374 : }
; 2375 : 
; 2376 : void lodepng_chunk_type(char type[5], const unsigned char* chunk)
; 2377 : {
; 2378 :   unsigned i;
; 2379 :   for(i = 0; i < 4; i++) type[i] = chunk[4 + i];
; 2380 :   type[4] = 0; /*null termination char*/
; 2381 : }
; 2382 : 
; 2383 : unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type)
; 2384 : {
; 2385 :   if(strlen(type) != 4) return 0;
; 2386 :   return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);
; 2387 : }
; 2388 : 
; 2389 : unsigned char lodepng_chunk_ancillary(const unsigned char* chunk)
; 2390 : {
; 2391 :   return((chunk[4] & 32) != 0);
; 2392 : }
; 2393 : 
; 2394 : unsigned char lodepng_chunk_private(const unsigned char* chunk)
; 2395 : {
; 2396 :   return((chunk[6] & 32) != 0);
; 2397 : }
; 2398 : 
; 2399 : unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk)
; 2400 : {
; 2401 :   return((chunk[7] & 32) != 0);
; 2402 : }
; 2403 : 
; 2404 : unsigned char* lodepng_chunk_data(unsigned char* chunk)
; 2405 : {
; 2406 :   return &chunk[8];
; 2407 : }
; 2408 : 
; 2409 : const unsigned char* lodepng_chunk_data_const(const unsigned char* chunk)
; 2410 : {
; 2411 :   return &chunk[8];
; 2412 : }
; 2413 : 
; 2414 : unsigned lodepng_chunk_check_crc(const unsigned char* chunk)
; 2415 : {
; 2416 :   unsigned length = lodepng_chunk_length(chunk);
; 2417 :   unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);
; 2418 :   /*the CRC is taken of the data and the 4 chunk type letters, not the length*/
; 2419 :   unsigned checksum = lodepng_crc32(&chunk[4], length + 4);
; 2420 :   if(CRC != checksum) return 1;
; 2421 :   else return 0;
; 2422 : }
; 2423 : 
; 2424 : void lodepng_chunk_generate_crc(unsigned char* chunk)
; 2425 : {
; 2426 :   unsigned length = lodepng_chunk_length(chunk);
; 2427 :   unsigned CRC = lodepng_crc32(&chunk[4], length + 4);
; 2428 :   lodepng_set32bitInt(chunk + 8 + length, CRC);
; 2429 : }
; 2430 : 
; 2431 : unsigned char* lodepng_chunk_next(unsigned char* chunk)
; 2432 : {
; 2433 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2434 :   return &chunk[total_chunk_length];
; 2435 : }
; 2436 : 
; 2437 : const unsigned char* lodepng_chunk_next_const(const unsigned char* chunk)
; 2438 : {
; 2439 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2440 :   return &chunk[total_chunk_length];
; 2441 : }
; 2442 : 
; 2443 : unsigned lodepng_chunk_append(unsigned char** out, size_t* outlength, const unsigned char* chunk)
; 2444 : {
; 2445 :   unsigned i;
; 2446 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2447 :   unsigned char *chunk_start, *new_buffer;
; 2448 :   size_t new_length = (*outlength) + total_chunk_length;
; 2449 :   if(new_length < total_chunk_length || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2450 : 
; 2451 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2452 :   if(!new_buffer) return 83; /*alloc fail*/
; 2453 :   (*out) = new_buffer;
; 2454 :   (*outlength) = new_length;
; 2455 :   chunk_start = &(*out)[new_length - total_chunk_length];
; 2456 : 
; 2457 :   for(i = 0; i < total_chunk_length; i++) chunk_start[i] = chunk[i];
; 2458 : 
; 2459 :   return 0;
; 2460 : }
; 2461 : 
; 2462 : unsigned lodepng_chunk_create(unsigned char** out, size_t* outlength, unsigned length,
; 2463 :                               const char* type, const unsigned char* data)
; 2464 : {
; 2465 :   unsigned i;
; 2466 :   unsigned char *chunk, *new_buffer;
; 2467 :   size_t new_length = (*outlength) + length + 12;
; 2468 :   if(new_length < length + 12 || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2469 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2470 :   if(!new_buffer) return 83; /*alloc fail*/
; 2471 :   (*out) = new_buffer;
; 2472 :   (*outlength) = new_length;
; 2473 :   chunk = &(*out)[(*outlength) - length - 12];
; 2474 : 
; 2475 :   /*1: length*/
; 2476 :   lodepng_set32bitInt(chunk, (unsigned)length);
; 2477 : 
; 2478 :   /*2: chunk name (4 letters)*/
; 2479 :   chunk[4] = type[0];
; 2480 :   chunk[5] = type[1];
; 2481 :   chunk[6] = type[2];
; 2482 :   chunk[7] = type[3];
; 2483 : 
; 2484 :   /*3: the data*/
; 2485 :   for(i = 0; i < length; i++) chunk[8 + i] = data[i];
; 2486 : 
; 2487 :   /*4: CRC (of the chunkname characters and the data)*/
; 2488 :   lodepng_chunk_generate_crc(chunk);
; 2489 : 
; 2490 :   return 0;
; 2491 : }
; 2492 : 
; 2493 : /* ////////////////////////////////////////////////////////////////////////// */
; 2494 : /* / Color types and such                                                   / */
; 2495 : /* ////////////////////////////////////////////////////////////////////////// */
; 2496 : 
; 2497 : /*return type is a LodePNG error code*/
; 2498 : static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) /*bd = bitdepth*/
; 2499 : {
; 2500 :   switch(colortype)
; 2501 :   {
; 2502 :     case 0: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)) return 37; break; /*grey*/
; 2503 :     case 2: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGB*/
; 2504 :     case 3: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )) return 37; break; /*palette*/
; 2505 :     case 4: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*grey + alpha*/
; 2506 :     case 6: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGBA*/
; 2507 :     default: return 31;
; 2508 :   }
; 2509 :   return 0; /*allowed color type / bits combination*/
; 2510 : }
; 2511 : 
; 2512 : static unsigned getNumColorChannels(LodePNGColorType colortype)
; 2513 : {
; 2514 :   switch(colortype)
; 2515 :   {
; 2516 :     case 0: return 1; /*grey*/
; 2517 :     case 2: return 3; /*RGB*/
; 2518 :     case 3: return 1; /*palette*/
; 2519 :     case 4: return 2; /*grey + alpha*/
; 2520 :     case 6: return 4; /*RGBA*/
; 2521 :   }
; 2522 :   return 0; /*unexisting color type*/
; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;
; 2529 : }
; 2530 : 
; 2531 : /* ////////////////////////////////////////////////////////////////////////// */
; 2532 : 
; 2533 : void lodepng_color_mode_init(LodePNGColorMode* info)
; 2534 : {
; 2535 :   info->key_defined = 0;
; 2536 :   info->key_r = info->key_g = info->key_b = 0;
; 2537 :   info->colortype = LCT_RGBA;
; 2538 :   info->bitdepth = 8;
; 2539 :   info->palette = 0;
; 2540 :   info->palettesize = 0;
; 2541 : }
; 2542 : 
; 2543 : void lodepng_color_mode_cleanup(LodePNGColorMode* info)
; 2544 : {
; 2545 :   lodepng_palette_clear(info);
; 2546 : }
; 2547 : 
; 2548 : unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
; 2549 : {
; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;
; 2553 :   if(source->palette)
; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);
; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];
; 2558 :   }
; 2559 :   return 0;
; 2560 : }
; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);

  00003	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN8@lodepng_st

; 73   :   free(ptr);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _free
  00010	83 c4 04	 add	 esp, 4
$LN8@lodepng_st:

; 2585 :   info->palette = 0;

  00013	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 2586 :   info->palettesize = 0;

  0001a	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 4869 :   lodepng_color_mode_cleanup(&state->info_raw);
; 4870 :   lodepng_info_cleanup(&state->info_png);

  00021	8d 8e 88 00 00
	00		 lea	 ecx, DWORD PTR [esi+136]
  00027	5e		 pop	 esi
  00028	e9 00 00 00 00	 jmp	 ?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z ; lodepng_info_cleanup
?lodepng_state_cleanup@@YAXPAULodePNGState@@@Z ENDP	; lodepng_state_cleanup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?lodepng_encoder_settings_init@@YAXPAULodePNGEncoderSettings@@@Z
_TEXT	SEGMENT
?lodepng_encoder_settings_init@@YAXPAULodePNGEncoderSettings@@@Z PROC ; lodepng_encoder_settings_init, COMDAT
; _settings$ = ecx

; 2231 :   settings->btype = 2;

  00000	c7 01 02 00 00
	00		 mov	 DWORD PTR [ecx], 2

; 2232 :   settings->use_lz77 = 1;

  00006	c7 41 04 01 00
	00 00		 mov	 DWORD PTR [ecx+4], 1

; 2233 :   settings->windowsize = DEFAULT_WINDOWSIZE;

  0000d	c7 41 08 00 08
	00 00		 mov	 DWORD PTR [ecx+8], 2048	; 00000800H

; 2234 :   settings->minmatch = 3;

  00014	c7 41 0c 03 00
	00 00		 mov	 DWORD PTR [ecx+12], 3

; 2235 :   settings->nicematch = 128;

  0001b	c7 41 10 80 00
	00 00		 mov	 DWORD PTR [ecx+16], 128	; 00000080H

; 2236 :   settings->lazymatching = 1;

  00022	c7 41 14 01 00
	00 00		 mov	 DWORD PTR [ecx+20], 1

; 2237 : 
; 2238 :   settings->custom_zlib = 0;

  00029	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 2239 :   settings->custom_deflate = 0;

  00030	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 2240 :   settings->custom_context = 0;

  00037	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 5915 :   lodepng_compress_settings_init(&settings->zlibsettings);
; 5916 :   settings->filter_palette_zero = 1;

  0003e	c7 41 28 01 00
	00 00		 mov	 DWORD PTR [ecx+40], 1

; 5917 :   settings->filter_strategy = LFS_MINSUM;

  00045	c7 41 2c 01 00
	00 00		 mov	 DWORD PTR [ecx+44], 1

; 5918 :   settings->auto_convert = LAC_AUTO;

  0004c	c7 41 24 02 00
	00 00		 mov	 DWORD PTR [ecx+36], 2

; 5919 :   settings->force_palette = 0;

  00053	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 5920 :   settings->predefined_filters = 0;

  0005a	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 5921 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 5922 :   settings->add_id = 0;

  00061	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0

; 5923 :   settings->text_compression = 1;

  00068	c7 41 3c 01 00
	00 00		 mov	 DWORD PTR [ecx+60], 1

; 5924 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 5925 : }

  0006f	c3		 ret	 0
?lodepng_encoder_settings_init@@YAXPAULodePNGEncoderSettings@@@Z ENDP ; lodepng_encoder_settings_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?load_file@lodepng@@YAXAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
_TEXT	SEGMENT
$T2 = -232						; size = 24
$T3 = -232						; size = 24
_file$ = -208						; size = 184
_size$ = -24						; size = 8
__$EHRec$ = -12						; size = 12
?load_file@lodepng@@YAXAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z PROC ; lodepng::load_file, COMDAT
; _buffer$ = ecx
; _filename$ = edx

; 6050 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?load_file@lodepng@@YAXAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 524  : 			: this->_Bx._Buf);

  0002d	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  00031	72 02		 jb	 SHORT $LN12@load_file
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00033	8b 12		 mov	 edx, DWORD PTR [edx]
$LN12@load_file:
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6051 :   std::ifstream file(filename.c_str(), std::ios::in|std::ios::binary|std::ios::ate);

  00035	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00038	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >

; 6055 :   if(file.seekg(0, std::ios::end).good()) size = file.tellg();

  00044	6a 02		 push	 2
  00046	0f 57 c0	 xorps	 xmm0, xmm0
  00049	83 ec 08	 sub	 esp, 8
  0004c	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	66 0f 13 45 e8	 movlpd	 QWORD PTR _size$[ebp], xmm0
  0005e	e8 00 00 00 00	 call	 ?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z ; std::basic_istream<char,std::char_traits<char> >::seekg
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  00063	8b 08		 mov	 ecx, DWORD PTR [eax]
  00065	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 328  : 		}
; 329  : 
; 330  : 	void __CLR_OR_THIS_CALL setstate(iostate _State, bool _Exreraise)
; 331  : 		{	// merge in state argument, possibly reraise exception
; 332  : 		if (_State != goodbit)
; 333  : 			clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
; 334  : 		}
; 335  : 
; 336  : 	void __CLR_OR_THIS_CALL setstate(iostate _State)
; 337  : 		{	// merge in state argument
; 338  : 		if (_State != goodbit)
; 339  : 			clear((iostate)((int)rdstate() | (int)_State), false);
; 340  : 		}
; 341  : 
; 342  : 	void __CLR_OR_THIS_CALL setstate(io_state _State)
; 343  : 		{	// merge in state argument, old style
; 344  : 		setstate((iostate)_State);
; 345  : 		}
; 346  : 
; 347  : 	bool __CLR_OR_THIS_CALL good() const
; 348  : 		{	// test if no state bits are set
; 349  : 		return (rdstate() == goodbit);

  00068	83 7c 01 0c 00	 cmp	 DWORD PTR [ecx+eax+12], 0
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6055 :   if(file.seekg(0, std::ios::end).good()) size = file.tellg();

  0006d	75 1f		 jne	 SHORT $LN40@load_file
  0006f	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00075	50		 push	 eax
  00076	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  0007c	e8 00 00 00 00	 call	 ?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ ; std::basic_istream<char,std::char_traits<char> >::tellg
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 68   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

  00081	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00084	03 30		 add	 esi, DWORD PTR [eax]
  00086	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]
  00089	13 78 04	 adc	 edi, DWORD PTR [eax+4]
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6055 :   if(file.seekg(0, std::ios::end).good()) size = file.tellg();

  0008c	eb 06		 jmp	 SHORT $LN3@load_file
$LN40@load_file:
  0008e	8b 7d ec	 mov	 edi, DWORD PTR _size$[ebp+4]
  00091	8b 75 e8	 mov	 esi, DWORD PTR _size$[ebp]
$LN3@load_file:

; 6056 :   if(file.seekg(0, std::ios::beg).good()) size -= file.tellg();

  00094	6a 00		 push	 0
  00096	83 ec 08	 sub	 esp, 8
  00099	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  0009f	e8 00 00 00 00	 call	 ?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z ; std::basic_istream<char,std::char_traits<char> >::seekg
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  000a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a6	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 328  : 		}
; 329  : 
; 330  : 	void __CLR_OR_THIS_CALL setstate(iostate _State, bool _Exreraise)
; 331  : 		{	// merge in state argument, possibly reraise exception
; 332  : 		if (_State != goodbit)
; 333  : 			clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
; 334  : 		}
; 335  : 
; 336  : 	void __CLR_OR_THIS_CALL setstate(iostate _State)
; 337  : 		{	// merge in state argument
; 338  : 		if (_State != goodbit)
; 339  : 			clear((iostate)((int)rdstate() | (int)_State), false);
; 340  : 		}
; 341  : 
; 342  : 	void __CLR_OR_THIS_CALL setstate(io_state _State)
; 343  : 		{	// merge in state argument, old style
; 344  : 		setstate((iostate)_State);
; 345  : 		}
; 346  : 
; 347  : 	bool __CLR_OR_THIS_CALL good() const
; 348  : 		{	// test if no state bits are set
; 349  : 		return (rdstate() == goodbit);

  000a9	83 7c 01 0c 00	 cmp	 DWORD PTR [ecx+eax+12], 0
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6056 :   if(file.seekg(0, std::ios::beg).good()) size -= file.tellg();

  000ae	75 21		 jne	 SHORT $LN2@load_file
  000b0	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000b6	50		 push	 eax
  000b7	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000bd	e8 00 00 00 00	 call	 ?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ ; std::basic_istream<char,std::char_traits<char> >::tellg
  000c2	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000c5	03 10		 add	 edx, DWORD PTR [eax]
  000c7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000ca	13 48 04	 adc	 ecx, DWORD PTR [eax+4]
  000cd	2b f2		 sub	 esi, edx
  000cf	1b f9		 sbb	 edi, ecx
$LN2@load_file:

; 6057 : 
; 6058 :   /*read contents of the file into the vector*/
; 6059 :   buffer.resize(size_t(size));

  000d1	56		 push	 esi
  000d2	8b cb		 mov	 ecx, ebx
  000d4	e8 00 00 00 00	 call	 ?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize

; 6060 :   if(size > 0) file.read((char*)(&buffer[0]), size);

  000d9	85 ff		 test	 edi, edi
  000db	7c 15		 jl	 SHORT $LN1@load_file
  000dd	7f 04		 jg	 SHORT $LN39@load_file
  000df	85 f6		 test	 esi, esi
  000e1	74 0f		 je	 SHORT $LN1@load_file
$LN39@load_file:
  000e3	57		 push	 edi
  000e4	56		 push	 esi
  000e5	ff 33		 push	 DWORD PTR [ebx]
  000e7	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000ed	e8 00 00 00 00	 call	 ?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z ; std::basic_istream<char,std::char_traits<char> >::read
$LN1@load_file:

; 6061 : }

  000f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 873  : 		{	// destroy the object

  000f9	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _file$[ebp]
  000ff	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00102	c7 84 05 30 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _file$[ebp+eax], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  0010d	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _file$[ebp]
  00113	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00116	8d 41 90	 lea	 eax, DWORD PTR [ecx-112]
  00119	89 84 0d 2c ff
	ff ff		 mov	 DWORD PTR _file$[ebp+ecx-4], eax

; 874  : 		}

  00120	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp+16]
  00126	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 71   : 		{	// destroy the object

  0012b	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _file$[ebp]
  00131	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00134	c7 84 05 30 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _file$[ebp+eax], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0013f	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _file$[ebp]
  00145	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00148	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  0014b	89 84 0d 2c ff
	ff ff		 mov	 DWORD PTR _file$[ebp+ecx-4], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 532  : 		_Ios_base_dtor(this);

  00152	8d 45 a0	 lea	 eax, DWORD PTR _file$[ebp+112]
  00155	50		 push	 eax
  00156	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _file$[ebp+112], OFFSET ??_7ios_base@std@@6B@
  0015d	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00162	83 c4 04	 add	 esp, 4
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6061 : }

  00165	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00168	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016f	59		 pop	 ecx
  00170	5f		 pop	 edi
  00171	5e		 pop	 esi
  00172	5b		 pop	 ebx
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?load_file@lodepng@@YAXAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z$0:
  00000	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__ehhandler$?load_file@lodepng@@YAXAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?load_file@lodepng@@YAXAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?load_file@lodepng@@YAXAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ENDP ; lodepng::load_file
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 1080 : 		{	// destroy the object

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00006	8d 71 60	 lea	 esi, DWORD PTR [ecx+96]
  00009	c7 44 30 a0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-96], OFFSET ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  00011	8b 46 a0	 mov	 eax, DWORD PTR [esi-96]
  00014	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00017	8d 41 a0	 lea	 eax, DWORD PTR [ecx-96]
  0001a	89 44 31 9c	 mov	 DWORD PTR [ecx+esi-100], eax

; 1081 : 		}

  0001e	8d 4e a4	 lea	 ecx, DWORD PTR [esi-92]
  00021	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 87   : 		{	// destroy the object

  00026	8b 46 a0	 mov	 eax, DWORD PTR [esi-96]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 532  : 		_Ios_base_dtor(this);

  00029	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 87   : 		{	// destroy the object

  0002a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002d	c7 44 30 a0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-96], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00035	8b 46 a0	 mov	 eax, DWORD PTR [esi-96]
  00038	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003b	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0003e	89 44 31 9c	 mov	 DWORD PTR [ecx+esi-100], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 531  : 		{	// destroy the object

  00042	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@

; 532  : 		_Ios_base_dtor(this);

  00048	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0004d	83 c4 04	 add	 esp, 4
  00050	5e		 pop	 esi
  00051	c3		 ret	 0
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ??0State@lodepng@@QAE@XZ
_TEXT	SEGMENT
??0State@lodepng@@QAE@XZ PROC				; lodepng::State::State, COMDAT
; _this$ = ecx

; 6121 : {

  00000	8b d1		 mov	 edx, ecx
  00002	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7State@lodepng@@6B@

; 6122 :   lodepng_state_init(this);

  00008	e8 00 00 00 00	 call	 ?lodepng_state_init@@YAXPAULodePNGState@@@Z ; lodepng_state_init

; 6123 : }

  0000d	8b c2		 mov	 eax, edx
  0000f	c3		 ret	 0
??0State@lodepng@@QAE@XZ ENDP				; lodepng::State::State
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.h
;	COMDAT ??_GState@lodepng@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GState@lodepng@@UAEPAXI@Z PROC			; lodepng::State::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6132 : {

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7State@lodepng@@6B@

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
; 945  :     (*bp)++;
; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);
; 965  :   generateFixedDistanceTree(tree_d);
; 966  : }
; 967  : 
; 968  : /*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
; 969  : static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
; 970  :                                       const unsigned char* in, size_t* bp, size_t inlength)
; 971  : {
; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;
; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/
; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;
; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;
; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;
; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)
; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
; 1009 :     if(error) break;
; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;
; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;
; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;
; 1020 :     while(i < HLIT + HDIST)
; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
; 1023 :       if(code <= 15) /*a length code*/
; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;
; 1026 :         else bitlen_d[i - HLIT] = code;
; 1027 :         i++;
; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/
; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);
; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];
; 1040 :         else value = bitlen_d[i - HLIT - 1];
; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)
; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
; 1045 :           if(i < HLIT) bitlen_ll[i] = value;
; 1046 :           else bitlen_d[i - HLIT] = value;
; 1047 :           i++;
; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/
; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);
; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)
; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1063 :           else bitlen_d[i - HLIT] = 0;
; 1064 :           i++;
; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/
; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);
; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)
; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1080 :           else bitlen_d[i - HLIT] = 0;
; 1081 :           i++;
; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))
; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;
; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/
; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;
; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 1102 :     if(error) break;
; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
; 1104 : 
; 1105 :     break; /*end of error-while*/
; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;
; 1114 : }
; 1115 : 
; 1116 : /*inflate a block with dynamic of fixed Huffman tree*/
; 1117 : static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
; 1118 :                                     size_t* pos, size_t inlength, unsigned btype)
; 1119 : {
; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;
; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/
; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/
; 1136 :     {
; 1137 :       if((*pos) >= out->size)
; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);
; 1143 :       (*pos)++;
; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);
; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
; 1161 :       if(code_d > 29)
; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;
; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/
; 1170 :         break;
; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);
; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);
; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)
; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)
; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];
; 1193 :         (*pos)++;
; 1194 :         backward++;
; 1195 :         if(backward >= start) backward = start - distance;
; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)
; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;
; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;
; 1215 : }
; 1216 : 
; 1217 : static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
; 1218 : {
; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;
; 1223 :   p = (*bp) / 8; /*byte position*/
; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/
; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;
; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;
; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)
; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];
; 1241 : 
; 1242 :   (*bp) = p * 8;
; 1243 : 
; 1244 :   return error;
; 1245 : }
; 1246 : 
; 1247 : static unsigned lodepng_inflatev(ucvector* out,
; 1248 :                                  const unsigned char* in, size_t insize,
; 1249 :                                  const LodePNGDecompressSettings* settings)
; 1250 : {
; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;
; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/
; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)
; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
; 1264 :     BFINAL = readBitFromStream(&bp, in);
; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);
; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
; 1271 : 
; 1272 :     if(error) return error;
; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/
; 1277 : 
; 1278 :   return error;
; 1279 : }
; 1280 : 
; 1281 : unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
; 1282 :                          const unsigned char* in, size_t insize,
; 1283 :                          const LodePNGDecompressSettings* settings)
; 1284 : {
; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);
; 1289 :   *out = v.data;
; 1290 :   *outsize = v.size;
; 1291 :   return error;
; 1292 : }
; 1293 : 
; 1294 : static unsigned inflate(unsigned char** out, size_t* outsize,
; 1295 :                         const unsigned char* in, size_t insize,
; 1296 :                         const LodePNGDecompressSettings* settings)
; 1297 : {
; 1298 :   if(settings->custom_inflate)
; 1299 :   {
; 1300 :     return settings->custom_inflate(out, outsize, in, insize, settings);
; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }
; 1307 : 
; 1308 : #endif /*LODEPNG_COMPILE_DECODER*/
; 1309 : 
; 1310 : #ifdef LODEPNG_COMPILE_ENCODER
; 1311 : 
; 1312 : /* ////////////////////////////////////////////////////////////////////////// */
; 1313 : /* / Deflator (Compressor)                                                  / */
; 1314 : /* ////////////////////////////////////////////////////////////////////////// */
; 1315 : 
; 1316 : static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;
; 1317 : 
; 1318 : /*bitlen is the size in bits of the code*/
; 1319 : static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)
; 1320 : {
; 1321 :   addBitsToStreamReversed(bp, compressed, code, bitlen);
; 1322 : }
; 1323 : 
; 1324 : /*search the index in the array, that has the largest value smaller than or equal to the given value,
; 1325 : given array must be sorted (if no value is smaller, it returns the size of the given array)*/
; 1326 : static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)
; 1327 : {
; 1328 :   /*linear search implementation*/
; 1329 :   /*for(size_t i = 1; i < array_size; i++) if(array[i] > value) return i - 1;
; 1330 :   return array_size - 1;*/
; 1331 : 
; 1332 :   /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
; 1333 :   size_t left  = 1;
; 1334 :   size_t right = array_size - 1;
; 1335 :   while(left <= right)
; 1336 :   {
; 1337 :     size_t mid = (left + right) / 2;
; 1338 :     if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
; 1339 :     else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
; 1340 :     else return mid - 1;
; 1341 :   }
; 1342 :   return array_size - 1;
; 1343 : }
; 1344 : 
; 1345 : static void addLengthDistance(uivector* values, size_t length, size_t distance)
; 1346 : {
; 1347 :   /*values in encoded vector are those used by deflate:
; 1348 :   0-255: literal bytes
; 1349 :   256: end
; 1350 :   257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
; 1351 :   286-287: invalid*/
; 1352 : 
; 1353 :   unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
; 1354 :   unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
; 1355 :   unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
; 1356 :   unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);
; 1357 : 
; 1358 :   uivector_push_back(values, length_code + FIRST_LENGTH_CODE_INDEX);
; 1359 :   uivector_push_back(values, extra_length);
; 1360 :   uivector_push_back(values, dist_code);
; 1361 :   uivector_push_back(values, extra_distance);
; 1362 : }
; 1363 : 
; 1364 : static const unsigned HASH_NUM_VALUES = 65536;
; 1365 : static const unsigned HASH_NUM_CHARACTERS = 3;
; 1366 : static const unsigned HASH_SHIFT = 2;
; 1367 : /*
; 1368 : The HASH_NUM_CHARACTERS value is used to make encoding faster by using longer
; 1369 : sequences to generate a hash value from the stream bytes. Setting it to 3
; 1370 : gives exactly the same compression as the brute force method, since deflate's
; 1371 : run length encoding starts with lengths of 3. Setting it to higher values,
; 1372 : like 6, can make the encoding faster (not always though!), but will cause the
; 1373 : encoding to miss any length between 3 and this value, so that the compression
; 1374 : may be worse (but this can vary too depending on the image, sometimes it is
; 1375 : even a bit better instead).
; 1376 : The HASH_NUM_VALUES is the amount of unique possible hash values that
; 1377 : combinations of bytes can give, the higher it is the more memory is needed, but
; 1378 : if it's too low the advantage of hashing is gone.
; 1379 : */
; 1380 : 
; 1381 : typedef struct Hash
; 1382 : {
; 1383 :   int* head; /*hash value to head circular pos*/
; 1384 :   int* val; /*circular pos to hash value*/
; 1385 :   /*circular pos to prev circular pos*/
; 1386 :   unsigned short* chain;
; 1387 :   unsigned short* zeros;
; 1388 : } Hash;
; 1389 : 
; 1390 : static unsigned hash_init(Hash* hash, unsigned windowsize)
; 1391 : {
; 1392 :   unsigned i;
; 1393 :   hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
; 1394 :   hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
; 1395 :   hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1396 :   hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1397 : 
; 1398 :   if(!hash->head || !hash->val || !hash->chain || !hash->zeros) return 83; /*alloc fail*/
; 1399 : 
; 1400 :   /*initialize hash table*/
; 1401 :   for(i = 0; i < HASH_NUM_VALUES; i++) hash->head[i] = -1;
; 1402 :   for(i = 0; i < windowsize; i++) hash->val[i] = -1;
; 1403 :   for(i = 0; i < windowsize; i++) hash->chain[i] = i; /*same value as index indicates uninitialized*/
; 1404 : 
; 1405 :   return 0;
; 1406 : }
; 1407 : 
; 1408 : static void hash_cleanup(Hash* hash)
; 1409 : {
; 1410 :   lodepng_free(hash->head);
; 1411 :   lodepng_free(hash->val);
; 1412 :   lodepng_free(hash->chain);
; 1413 :   lodepng_free(hash->zeros);
; 1414 : }
; 1415 : 
; 1416 : static unsigned getHash(const unsigned char* data, size_t size, size_t pos)
; 1417 : {
; 1418 :   unsigned result = 0;
; 1419 :   size_t amount, i;
; 1420 :   if(pos >= size) return 0;
; 1421 :   amount = HASH_NUM_CHARACTERS;
; 1422 :   if(pos + amount >= size) amount = size - pos;
; 1423 :   for(i = 0; i < amount; i++) result ^= (data[pos + i] << (i * HASH_SHIFT));
; 1424 :   return result % HASH_NUM_VALUES;
; 1425 : }
; 1426 : 
; 1427 : static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)
; 1428 : {
; 1429 :   const unsigned char* start = data + pos;
; 1430 :   const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
; 1431 :   if(end > data + size) end = data + size;
; 1432 :   data = start;
; 1433 :   while (data != end && *data == 0) data++;
; 1434 :   /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
; 1435 :   return (unsigned)(data - start);
; 1436 : }
; 1437 : 
; 1438 : static void updateHashChain(Hash* hash, size_t pos, int hashval, unsigned windowsize)
; 1439 : {
; 1440 :   unsigned wpos = pos % windowsize;
; 1441 :   hash->val[wpos] = hashval;
; 1442 :   if(hash->head[hashval] != -1) hash->chain[wpos] = hash->head[hashval];
; 1443 :   hash->head[hashval] = wpos;
; 1444 : }
; 1445 : 
; 1446 : /*
; 1447 : LZ77-encode the data. Return value is error code. The input are raw bytes, the output
; 1448 : is in the form of unsigned integers with codes representing for example literal bytes, or
; 1449 : length/distance pairs.
; 1450 : It uses a hash table technique to let it encode faster. When doing LZ77 encoding, a
; 1451 : sliding window (of windowsize) is used, and all past bytes in that window can be used as
; 1452 : the "dictionary". A brute force search through all possible distances would be slow, and
; 1453 : this hash technique is one out of several ways to speed this up.
; 1454 : */
; 1455 : static unsigned encodeLZ77(uivector* out, Hash* hash,
; 1456 :                            const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
; 1457 :                            unsigned minmatch, unsigned nicematch, unsigned lazymatching)
; 1458 : {
; 1459 :   unsigned short numzeros = 0;
; 1460 :   int usezeros = windowsize >= 8192; /*for small window size, the 'max chain length' optimization does a better job*/
; 1461 :   unsigned pos, i, error = 0;
; 1462 :   /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
; 1463 :   unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8;
; 1464 :   unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;
; 1465 : 
; 1466 :   if(!error)
; 1467 :   {
; 1468 :     unsigned offset; /*the offset represents the distance in LZ77 terminology*/
; 1469 :     unsigned length;
; 1470 :     unsigned lazy = 0;
; 1471 :     unsigned lazylength = 0, lazyoffset = 0;
; 1472 :     unsigned hashval;
; 1473 :     unsigned current_offset, current_length;
; 1474 :     const unsigned char *lastptr, *foreptr, *backptr;
; 1475 :     unsigned short hashpos, prevpos;
; 1476 : 
; 1477 :     for(pos = inpos; pos < insize; pos++)
; 1478 :     {
; 1479 :       size_t wpos = pos % windowsize; /*position for in 'circular' hash buffers*/
; 1480 : 
; 1481 :       hashval = getHash(in, insize, pos);
; 1482 :       updateHashChain(hash, pos, hashval, windowsize);
; 1483 : 
; 1484 :       if(usezeros && hashval == 0)
; 1485 :       {
; 1486 :         numzeros = countZeros(in, insize, pos);
; 1487 :         hash->zeros[wpos] = numzeros;
; 1488 :       }
; 1489 : 
; 1490 :       /*the length and offset found for the current position*/
; 1491 :       length = 0;
; 1492 :       offset = 0;
; 1493 : 
; 1494 :       prevpos = hash->head[hashval];
; 1495 :       hashpos = hash->chain[prevpos];
; 1496 : 
; 1497 :       lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];
; 1498 : 
; 1499 :       /*search for the longest string*/
; 1500 :       if(hash->val[wpos] == (int)hashval)
; 1501 :       {
; 1502 :         unsigned chainlength = 0;
; 1503 :         for(;;)
; 1504 :         {
; 1505 :           /*stop when went completely around the circular buffer*/
; 1506 :           if(prevpos < wpos && hashpos > prevpos && hashpos <= wpos) break;
; 1507 :           if(prevpos > wpos && (hashpos <= wpos || hashpos > prevpos)) break;
; 1508 :           if(chainlength++ >= maxchainlength) break;
; 1509 : 
; 1510 :           current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;
; 1511 :           if(current_offset > 0)
; 1512 :           {
; 1513 :             /*test the next characters*/
; 1514 :             foreptr = &in[pos];
; 1515 :             backptr = &in[pos - current_offset];
; 1516 : 
; 1517 :             /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
; 1518 :             if(usezeros && hashval == 0 && hash->val[hashpos] == 0 /*hashval[hashpos] may be out of date*/)
; 1519 :             {
; 1520 :               unsigned short skip = hash->zeros[hashpos];
; 1521 :               if(skip > numzeros) skip = numzeros;
; 1522 :               backptr += skip;
; 1523 :               foreptr += skip;
; 1524 :             }
; 1525 : 
; 1526 :             /* multiple checks at once per array bounds check */
; 1527 :             while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
; 1528 :             {
; 1529 :               ++backptr;
; 1530 :               ++foreptr;
; 1531 :             }
; 1532 :             current_length = (unsigned)(foreptr - &in[pos]);
; 1533 : 
; 1534 :             if(current_length > length)
; 1535 :             {
; 1536 :               length = current_length; /*the longest length*/
; 1537 :               offset = current_offset; /*the offset that is related to this longest length*/
; 1538 :               /*jump out once a length of max length is found (speed gain)*/
; 1539 :               if(current_length >= nicematch || current_length == MAX_SUPPORTED_DEFLATE_LENGTH) break;
; 1540 :             }
; 1541 :           }
; 1542 : 
; 1543 :           if(hashpos == hash->chain[hashpos]) break;
; 1544 : 
; 1545 :           prevpos = hashpos;
; 1546 :           hashpos = hash->chain[hashpos];
; 1547 :         }
; 1548 :       }
; 1549 : 
; 1550 :       if(lazymatching)
; 1551 :       {
; 1552 :         if(!lazy && length >= 3 && length <= maxlazymatch && length < MAX_SUPPORTED_DEFLATE_LENGTH)
; 1553 :         {
; 1554 :           lazy = 1;
; 1555 :           lazylength = length;
; 1556 :           lazyoffset = offset;
; 1557 :           continue; /*try the next byte*/
; 1558 :         }
; 1559 :         if(lazy)
; 1560 :         {
; 1561 :           lazy = 0;
; 1562 :           if(pos == 0) ERROR_BREAK(81);
; 1563 :           if(length > lazylength + 1)
; 1564 :           {
; 1565 :             /*push the previous character as literal*/
; 1566 :             if(!uivector_push_back(out, in[pos - 1])) ERROR_BREAK(83 /*alloc fail*/);
; 1567 :           }
; 1568 :           else
; 1569 :           {
; 1570 :             length = lazylength;
; 1571 :             offset = lazyoffset;
; 1572 :             hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
; 1573 :             pos--;
; 1574 :           }
; 1575 :         }
; 1576 :       }
; 1577 :       if(length >= 3 && offset > windowsize) ERROR_BREAK(86 /*too big (or overflown negative) offset*/);
; 1578 : 
; 1579 :       /**encode it as length/distance pair or literal value**/
; 1580 :       if(length < 3) /*only lengths of 3 or higher are supported as length/distance pair*/
; 1581 :       {
; 1582 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1583 :       }
; 1584 :       else if(length < minmatch || (length == 3 && offset > 4096))
; 1585 :       {
; 1586 :         /*compensate for the fact that longer offsets have more extra bits, a
; 1587 :         length of only 3 may be not worth it then*/
; 1588 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1589 :       }
; 1590 :       else
; 1591 :       {
; 1592 :         addLengthDistance(out, length, offset);
; 1593 :         for(i = 1; i < length; i++)
; 1594 :         {
; 1595 :           pos++;
; 1596 :           hashval = getHash(in, insize, pos);
; 1597 :           updateHashChain(hash, pos, hashval, windowsize);
; 1598 :           if(usezeros && hashval == 0)
; 1599 :           {
; 1600 :             hash->zeros[pos % windowsize] = countZeros(in, insize, pos);
; 1601 :           }
; 1602 :         }
; 1603 :       }
; 1604 : 
; 1605 :     } /*end of the loop through each character of input*/
; 1606 :   } /*end of "if(!error)"*/
; 1607 : 
; 1608 :   return error;
; 1609 : }
; 1610 : 
; 1611 : /* /////////////////////////////////////////////////////////////////////////// */
; 1612 : 
; 1613 : static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)
; 1614 : {
; 1615 :   /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
; 1616 :   2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/
; 1617 : 
; 1618 :   size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
; 1619 :   unsigned datapos = 0;
; 1620 :   for(i = 0; i < numdeflateblocks; i++)
; 1621 :   {
; 1622 :     unsigned BFINAL, BTYPE, LEN, NLEN;
; 1623 :     unsigned char firstbyte;
; 1624 : 
; 1625 :     BFINAL = (i == numdeflateblocks - 1);
; 1626 :     BTYPE = 0;
; 1627 : 
; 1628 :     firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1) << 1) + ((BTYPE & 2) << 1));
; 1629 :     ucvector_push_back(out, firstbyte);
; 1630 : 
; 1631 :     LEN = 65535;
; 1632 :     if(datasize - datapos < 65535) LEN = (unsigned)datasize - datapos;
; 1633 :     NLEN = 65535 - LEN;
; 1634 : 
; 1635 :     ucvector_push_back(out, (unsigned char)(LEN % 256));
; 1636 :     ucvector_push_back(out, (unsigned char)(LEN / 256));
; 1637 :     ucvector_push_back(out, (unsigned char)(NLEN % 256));
; 1638 :     ucvector_push_back(out, (unsigned char)(NLEN / 256));
; 1639 : 
; 1640 :     /*Decompressed data*/
; 1641 :     for(j = 0; j < 65535 && datapos < datasize; j++)
; 1642 :     {
; 1643 :       ucvector_push_back(out, data[datapos++]);
; 1644 :     }
; 1645 :   }
; 1646 : 
; 1647 :   return 0;
; 1648 : }
; 1649 : 
; 1650 : /*
; 1651 : write the lz77-encoded data, which has lit, len and dist codes, to compressed stream using huffman trees.
; 1652 : tree_ll: the tree for lit and len codes.
; 1653 : tree_d: the tree for distance codes.
; 1654 : */
; 1655 : static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
; 1656 :                           const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
; 1657 : {
; 1658 :   size_t i = 0;
; 1659 :   for(i = 0; i < lz77_encoded->size; i++)
; 1660 :   {
; 1661 :     unsigned val = lz77_encoded->data[i];
; 1662 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_ll, val), HuffmanTree_getLength(tree_ll, val));
; 1663 :     if(val > 256) /*for a length code, 3 more things have to be added*/
; 1664 :     {
; 1665 :       unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
; 1666 :       unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
; 1667 :       unsigned length_extra_bits = lz77_encoded->data[++i];
; 1668 : 
; 1669 :       unsigned distance_code = lz77_encoded->data[++i];
; 1670 : 
; 1671 :       unsigned distance_index = distance_code;
; 1672 :       unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
; 1673 :       unsigned distance_extra_bits = lz77_encoded->data[++i];
; 1674 : 
; 1675 :       addBitsToStream(bp, out, length_extra_bits, n_length_extra_bits);
; 1676 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
; 1677 :                        HuffmanTree_getLength(tree_d, distance_code));
; 1678 :       addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
; 1679 :     }
; 1680 :   }
; 1681 : }
; 1682 : 
; 1683 : /*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
; 1684 : static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,
; 1685 :                                const unsigned char* data, size_t datapos, size_t dataend,
; 1686 :                                const LodePNGCompressSettings* settings, int final)
; 1687 : {
; 1688 :   unsigned error = 0;
; 1689 : 
; 1690 :   /*
; 1691 :   A block is compressed as follows: The PNG data is lz77 encoded, resulting in
; 1692 :   literal bytes and length/distance pairs. This is then huffman compressed with
; 1693 :   two huffman trees. One huffman tree is used for the lit and len values ("ll"),
; 1694 :   another huffman tree is used for the dist values ("d"). These two trees are
; 1695 :   stored using their code lengths, and to compress even more these code lengths
; 1696 :   are also run-length encoded and huffman compressed. This gives a huffman tree
; 1697 :   of code lengths "cl". The code lenghts used to describe this third tree are
; 1698 :   the code length code lengths ("clcl").
; 1699 :   */
; 1700 : 
; 1701 :   /*The lz77 encoded data, represented with integers since there will also be length and distance codes in it*/
; 1702 :   uivector lz77_encoded;
; 1703 :   HuffmanTree tree_ll; /*tree for lit,len values*/
; 1704 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1705 :   HuffmanTree tree_cl; /*tree for encoding the code lengths representing tree_ll and tree_d*/
; 1706 :   uivector frequencies_ll; /*frequency of lit,len codes*/
; 1707 :   uivector frequencies_d; /*frequency of dist codes*/
; 1708 :   uivector frequencies_cl; /*frequency of code length codes*/
; 1709 :   uivector bitlen_lld; /*lit,len,dist code lenghts (int bits), literally (without repeat codes).*/
; 1710 :   uivector bitlen_lld_e; /*bitlen_lld encoded with repeat codes (this is a rudemtary run length compression)*/
; 1711 :   /*bitlen_cl is the code length code lengths ("clcl"). The bit lengths of codes to represent tree_cl
; 1712 :   (these are written as is in the file, it would be crazy to compress these using yet another huffman
; 1713 :   tree that needs to be represented by yet another set of code lengths)*/
; 1714 :   uivector bitlen_cl;
; 1715 :   size_t datasize = dataend - datapos;
; 1716 : 
; 1717 :   /*
; 1718 :   Due to the huffman compression of huffman tree representations ("two levels"), there are some anologies:
; 1719 :   bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
; 1720 :   bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
; 1721 :   bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
; 1722 :   */
; 1723 : 
; 1724 :   unsigned BFINAL = final;
; 1725 :   size_t numcodes_ll, numcodes_d, i;
; 1726 :   unsigned HLIT, HDIST, HCLEN;
; 1727 : 
; 1728 :   uivector_init(&lz77_encoded);
; 1729 :   HuffmanTree_init(&tree_ll);
; 1730 :   HuffmanTree_init(&tree_d);
; 1731 :   HuffmanTree_init(&tree_cl);
; 1732 :   uivector_init(&frequencies_ll);
; 1733 :   uivector_init(&frequencies_d);
; 1734 :   uivector_init(&frequencies_cl);
; 1735 :   uivector_init(&bitlen_lld);
; 1736 :   uivector_init(&bitlen_lld_e);
; 1737 :   uivector_init(&bitlen_cl);
; 1738 : 
; 1739 :   /*This while loop never loops due to a break at the end, it is here to
; 1740 :   allow breaking out of it to the cleanup phase on error conditions.*/
; 1741 :   while(!error)
; 1742 :   {
; 1743 :     if(settings->use_lz77)
; 1744 :     {
; 1745 :       error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1746 :                          settings->minmatch, settings->nicematch, settings->lazymatching);
; 1747 :       if(error) break;
; 1748 :     }
; 1749 :     else
; 1750 :     {
; 1751 :       if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83 /*alloc fail*/);
; 1752 :       for(i = datapos; i < dataend; i++) lz77_encoded.data[i] = data[i]; /*no LZ77, but still will be Huffman compressed*/
; 1753 :     }
; 1754 : 
; 1755 :     if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1756 :     if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1757 : 
; 1758 :     /*Count the frequencies of lit, len and dist codes*/
; 1759 :     for(i = 0; i < lz77_encoded.size; i++)
; 1760 :     {
; 1761 :       unsigned symbol = lz77_encoded.data[i];
; 1762 :       frequencies_ll.data[symbol]++;
; 1763 :       if(symbol > 256)
; 1764 :       {
; 1765 :         unsigned dist = lz77_encoded.data[i + 2];
; 1766 :         frequencies_d.data[dist]++;
; 1767 :         i += 3;
; 1768 :       }
; 1769 :     }
; 1770 :     frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/
; 1771 : 
; 1772 :     /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
; 1773 :     error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
; 1774 :     if(error) break;
; 1775 :     /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
; 1776 :     error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
; 1777 :     if(error) break;
; 1778 : 
; 1779 :     numcodes_ll = tree_ll.numcodes; if(numcodes_ll > 286) numcodes_ll = 286;
; 1780 :     numcodes_d = tree_d.numcodes; if(numcodes_d > 30) numcodes_d = 30;
; 1781 :     /*store the code lengths of both generated trees in bitlen_lld*/
; 1782 :     for(i = 0; i < numcodes_ll; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
; 1783 :     for(i = 0; i < numcodes_d; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));
; 1784 : 
; 1785 :     /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
; 1786 :     17 (3-10 zeroes), 18 (11-138 zeroes)*/
; 1787 :     for(i = 0; i < (unsigned)bitlen_lld.size; i++)
; 1788 :     {
; 1789 :       unsigned j = 0; /*amount of repititions*/
; 1790 :       while(i + j + 1 < (unsigned)bitlen_lld.size && bitlen_lld.data[i + j + 1] == bitlen_lld.data[i]) j++;
; 1791 : 
; 1792 :       if(bitlen_lld.data[i] == 0 && j >= 2) /*repeat code for zeroes*/
; 1793 :       {
; 1794 :         j++; /*include the first zero*/
; 1795 :         if(j <= 10) /*repeat code 17 supports max 10 zeroes*/
; 1796 :         {
; 1797 :           uivector_push_back(&bitlen_lld_e, 17);
; 1798 :           uivector_push_back(&bitlen_lld_e, j - 3);
; 1799 :         }
; 1800 :         else /*repeat code 18 supports max 138 zeroes*/
; 1801 :         {
; 1802 :           if(j > 138) j = 138;
; 1803 :           uivector_push_back(&bitlen_lld_e, 18);
; 1804 :           uivector_push_back(&bitlen_lld_e, j - 11);
; 1805 :         }
; 1806 :         i += (j - 1);
; 1807 :       }
; 1808 :       else if(j >= 3) /*repeat code for value other than zero*/
; 1809 :       {
; 1810 :         size_t k;
; 1811 :         unsigned num = j / 6, rest = j % 6;
; 1812 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1813 :         for(k = 0; k < num; k++)
; 1814 :         {
; 1815 :           uivector_push_back(&bitlen_lld_e, 16);
; 1816 :           uivector_push_back(&bitlen_lld_e, 6 - 3);
; 1817 :         }
; 1818 :         if(rest >= 3)
; 1819 :         {
; 1820 :           uivector_push_back(&bitlen_lld_e, 16);
; 1821 :           uivector_push_back(&bitlen_lld_e, rest - 3);
; 1822 :         }
; 1823 :         else j -= rest;
; 1824 :         i += j;
; 1825 :       }
; 1826 :       else /*too short to benefit from repeat code*/
; 1827 :       {
; 1828 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1829 :       }
; 1830 :     }
; 1831 : 
; 1832 :     /*generate tree_cl, the huffmantree of huffmantrees*/
; 1833 : 
; 1834 :     if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1835 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1836 :     {
; 1837 :       frequencies_cl.data[bitlen_lld_e.data[i]]++;
; 1838 :       /*after a repeat code come the bits that specify the number of repetitions,
; 1839 :       those don't need to be in the frequencies_cl calculation*/
; 1840 :       if(bitlen_lld_e.data[i] >= 16) i++;
; 1841 :     }
; 1842 : 
; 1843 :     error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
; 1844 :                                             frequencies_cl.size, frequencies_cl.size, 7);
; 1845 :     if(error) break;
; 1846 : 
; 1847 :     if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
; 1848 :     for(i = 0; i < tree_cl.numcodes; i++)
; 1849 :     {
; 1850 :       /*lenghts of code length tree is in the order as specified by deflate*/
; 1851 :       bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
; 1852 :     }
; 1853 :     while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
; 1854 :     {
; 1855 :       /*remove zeros at the end, but minimum size must be 4*/
; 1856 :       if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
; 1857 :     }
; 1858 :     if(error) break;
; 1859 : 
; 1860 :     /*
; 1861 :     Write everything into the output
; 1862 : 
; 1863 :     After the BFINAL and BTYPE, the dynamic block consists out of the following:
; 1864 :     - 5 bits HLIT, 5 bits HDIST, 4 bits HCLEN
; 1865 :     - (HCLEN+4)*3 bits code lengths of code length alphabet
; 1866 :     - HLIT + 257 code lenghts of lit/length alphabet (encoded using the code length
; 1867 :       alphabet, + possible repetition codes 16, 17, 18)
; 1868 :     - HDIST + 1 code lengths of distance alphabet (encoded using the code length
; 1869 :       alphabet, + possible repetition codes 16, 17, 18)
; 1870 :     - compressed data
; 1871 :     - 256 (end code)
; 1872 :     */
; 1873 : 
; 1874 :     /*Write block type*/
; 1875 :     addBitToStream(bp, out, BFINAL);
; 1876 :     addBitToStream(bp, out, 0); /*first bit of BTYPE "dynamic"*/
; 1877 :     addBitToStream(bp, out, 1); /*second bit of BTYPE "dynamic"*/
; 1878 : 
; 1879 :     /*write the HLIT, HDIST and HCLEN values*/
; 1880 :     HLIT = (unsigned)(numcodes_ll - 257);
; 1881 :     HDIST = (unsigned)(numcodes_d - 1);
; 1882 :     HCLEN = (unsigned)bitlen_cl.size - 4;
; 1883 :     /*trim zeroes for HCLEN. HLIT and HDIST were already trimmed at tree creation*/
; 1884 :     while(!bitlen_cl.data[HCLEN + 4 - 1] && HCLEN > 0) HCLEN--;
; 1885 :     addBitsToStream(bp, out, HLIT, 5);
; 1886 :     addBitsToStream(bp, out, HDIST, 5);
; 1887 :     addBitsToStream(bp, out, HCLEN, 4);
; 1888 : 
; 1889 :     /*write the code lenghts of the code length alphabet*/
; 1890 :     for(i = 0; i < HCLEN + 4; i++) addBitsToStream(bp, out, bitlen_cl.data[i], 3);
; 1891 : 
; 1892 :     /*write the lenghts of the lit/len AND the dist alphabet*/
; 1893 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1894 :     {
; 1895 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
; 1896 :                        HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
; 1897 :       /*extra bits of repeat codes*/
; 1898 :       if(bitlen_lld_e.data[i] == 16) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 2);
; 1899 :       else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
; 1900 :       else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
; 1901 :     }
; 1902 : 
; 1903 :     /*write the compressed data symbols*/
; 1904 :     writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1905 :     /*error: the length of the end code 256 must be larger than 0*/
; 1906 :     if(HuffmanTree_getLength(&tree_ll, 256) == 0) ERROR_BREAK(64);
; 1907 : 
; 1908 :     /*write the end code*/
; 1909 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1910 : 
; 1911 :     break; /*end of error-while*/
; 1912 :   }
; 1913 : 
; 1914 :   /*cleanup*/
; 1915 :   uivector_cleanup(&lz77_encoded);
; 1916 :   HuffmanTree_cleanup(&tree_ll);
; 1917 :   HuffmanTree_cleanup(&tree_d);
; 1918 :   HuffmanTree_cleanup(&tree_cl);
; 1919 :   uivector_cleanup(&frequencies_ll);
; 1920 :   uivector_cleanup(&frequencies_d);
; 1921 :   uivector_cleanup(&frequencies_cl);
; 1922 :   uivector_cleanup(&bitlen_lld_e);
; 1923 :   uivector_cleanup(&bitlen_lld);
; 1924 :   uivector_cleanup(&bitlen_cl);
; 1925 : 
; 1926 :   return error;
; 1927 : }
; 1928 : 
; 1929 : static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,
; 1930 :                              const unsigned char* data,
; 1931 :                              size_t datapos, size_t dataend,
; 1932 :                              const LodePNGCompressSettings* settings, int final)
; 1933 : {
; 1934 :   HuffmanTree tree_ll; /*tree for literal values and length codes*/
; 1935 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1936 : 
; 1937 :   unsigned BFINAL = final;
; 1938 :   unsigned error = 0;
; 1939 :   size_t i;
; 1940 : 
; 1941 :   HuffmanTree_init(&tree_ll);
; 1942 :   HuffmanTree_init(&tree_d);
; 1943 : 
; 1944 :   generateFixedLitLenTree(&tree_ll);
; 1945 :   generateFixedDistanceTree(&tree_d);
; 1946 : 
; 1947 :   addBitToStream(bp, out, BFINAL);
; 1948 :   addBitToStream(bp, out, 1); /*first bit of BTYPE*/
; 1949 :   addBitToStream(bp, out, 0); /*second bit of BTYPE*/
; 1950 : 
; 1951 :   if(settings->use_lz77) /*LZ77 encoded*/
; 1952 :   {
; 1953 :     uivector lz77_encoded;
; 1954 :     uivector_init(&lz77_encoded);
; 1955 :     error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1956 :                        settings->minmatch, settings->nicematch, settings->lazymatching);
; 1957 :     if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1958 :     uivector_cleanup(&lz77_encoded);
; 1959 :   }
; 1960 :   else /*no LZ77, but still will be Huffman compressed*/
; 1961 :   {
; 1962 :     for(i = datapos; i < dataend; i++)
; 1963 :     {
; 1964 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
; 1965 :     }
; 1966 :   }
; 1967 :   /*add END code*/
; 1968 :   if(!error) addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1969 : 
; 1970 :   /*cleanup*/
; 1971 :   HuffmanTree_cleanup(&tree_ll);
; 1972 :   HuffmanTree_cleanup(&tree_d);
; 1973 : 
; 1974 :   return error;
; 1975 : }
; 1976 : 
; 1977 : static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
; 1978 :                                  const LodePNGCompressSettings* settings)
; 1979 : {
; 1980 :   unsigned error = 0;
; 1981 :   size_t i, blocksize, numdeflateblocks;
; 1982 :   size_t bp = 0; /*the bit pointer*/
; 1983 :   Hash hash;
; 1984 : 
; 1985 :   if(settings->btype > 2) return 61;
; 1986 :   else if(settings->btype == 0) return deflateNoCompression(out, in, insize);
; 1987 :   else if(settings->btype == 1) blocksize = insize;
; 1988 :   else /*if(settings->btype == 2)*/
; 1989 :   {
; 1990 :     blocksize = insize / 8 + 8;
; 1991 :     if(blocksize < 65535) blocksize = 65535;
; 1992 :   }
; 1993 : 
; 1994 :   numdeflateblocks = (insize + blocksize - 1) / blocksize;
; 1995 :   if(numdeflateblocks == 0) numdeflateblocks = 1;
; 1996 : 
; 1997 :   error = hash_init(&hash, settings->windowsize);
; 1998 :   if(error) return error;
; 1999 : 
; 2000 :   for(i = 0; i < numdeflateblocks && !error; i++)
; 2001 :   {
; 2002 :     int final = i == numdeflateblocks - 1;
; 2003 :     size_t start = i * blocksize;
; 2004 :     size_t end = start + blocksize;
; 2005 :     if(end > insize) end = insize;
; 2006 : 
; 2007 :     if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
; 2008 :     else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
; 2009 :   }
; 2010 : 
; 2011 :   hash_cleanup(&hash);
; 2012 : 
; 2013 :   return error;
; 2014 : }
; 2015 : 
; 2016 : unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
; 2017 :                          const unsigned char* in, size_t insize,
; 2018 :                          const LodePNGCompressSettings* settings)
; 2019 : {
; 2020 :   unsigned error;
; 2021 :   ucvector v;
; 2022 :   ucvector_init_buffer(&v, *out, *outsize);
; 2023 :   error = lodepng_deflatev(&v, in, insize, settings);
; 2024 :   *out = v.data;
; 2025 :   *outsize = v.size;
; 2026 :   return error;
; 2027 : }
; 2028 : 
; 2029 : static unsigned deflate(unsigned char** out, size_t* outsize,
; 2030 :                         const unsigned char* in, size_t insize,
; 2031 :                         const LodePNGCompressSettings* settings)
; 2032 : {
; 2033 :   if(settings->custom_deflate)
; 2034 :   {
; 2035 :     return settings->custom_deflate(out, outsize, in, insize, settings);
; 2036 :   }
; 2037 :   else
; 2038 :   {
; 2039 :     return lodepng_deflate(out, outsize, in, insize, settings);
; 2040 :   }
; 2041 : }
; 2042 : 
; 2043 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2044 : 
; 2045 : /* ////////////////////////////////////////////////////////////////////////// */
; 2046 : /* / Adler32                                                                  */
; 2047 : /* ////////////////////////////////////////////////////////////////////////// */
; 2048 : 
; 2049 : static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
; 2050 : {
; 2051 :    unsigned s1 = adler & 0xffff;
; 2052 :    unsigned s2 = (adler >> 16) & 0xffff;
; 2053 : 
; 2054 :   while(len > 0)
; 2055 :   {
; 2056 :     /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
; 2057 :     unsigned amount = len > 5550 ? 5550 : len;
; 2058 :     len -= amount;
; 2059 :     while(amount > 0)
; 2060 :     {
; 2061 :       s1 += (*data++);
; 2062 :       s2 += s1;
; 2063 :       amount--;
; 2064 :     }
; 2065 :     s1 %= 65521;
; 2066 :     s2 %= 65521;
; 2067 :   }
; 2068 : 
; 2069 :   return (s2 << 16) | s1;
; 2070 : }
; 2071 : 
; 2072 : /*Return the adler32 of the bytes data[0..len-1]*/
; 2073 : static unsigned adler32(const unsigned char* data, unsigned len)
; 2074 : {
; 2075 :   return update_adler32(1L, data, len);
; 2076 : }
; 2077 : 
; 2078 : /* ////////////////////////////////////////////////////////////////////////// */
; 2079 : /* / Zlib                                                                   / */
; 2080 : /* ////////////////////////////////////////////////////////////////////////// */
; 2081 : 
; 2082 : #ifdef LODEPNG_COMPILE_DECODER
; 2083 : 
; 2084 : unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2085 :                                  size_t insize, const LodePNGDecompressSettings* settings)
; 2086 : {
; 2087 :   unsigned error = 0;
; 2088 :   unsigned CM, CINFO, FDICT;
; 2089 : 
; 2090 :   if(insize < 2) return 53; /*error, size of zlib data too small*/
; 2091 :   /*read information from zlib header*/
; 2092 :   if((in[0] * 256 + in[1]) % 31 != 0)
; 2093 :   {
; 2094 :     /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
; 2095 :     return 24;
; 2096 :   }
; 2097 : 
; 2098 :   CM = in[0] & 15;
; 2099 :   CINFO = (in[0] >> 4) & 15;
; 2100 :   /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
; 2101 :   FDICT = (in[1] >> 5) & 1;
; 2102 :   /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/
; 2103 : 
; 2104 :   if(CM != 8 || CINFO > 7)
; 2105 :   {
; 2106 :     /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
; 2107 :     return 25;
; 2108 :   }
; 2109 :   if(FDICT != 0)
; 2110 :   {
; 2111 :     /*error: the specification of PNG says about the zlib stream:
; 2112 :       "The additional flags shall not specify a preset dictionary."*/
; 2113 :     return 26;
; 2114 :   }
; 2115 : 
; 2116 :   error = inflate(out, outsize, in + 2, insize - 2, settings);
; 2117 :   if(error) return error;
; 2118 : 
; 2119 :   if(!settings->ignore_adler32)
; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/
; 2124 :   }
; 2125 : 
; 2126 :   return 0; /*no error*/
; 2127 : }
; 2128 : 
; 2129 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2130 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2131 : {
; 2132 :   if(settings->custom_zlib)
; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2134 :   else
; 2135 :     return lodepng_zlib_decompress(out, outsize, in, insize, settings);
; 2136 : }
; 2137 : 
; 2138 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2139 : 
; 2140 : #ifdef LODEPNG_COMPILE_ENCODER
; 2141 : 
; 2142 : unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2143 :                                size_t insize, const LodePNGCompressSettings* settings)
; 2144 : {
; 2145 :   /*initially, *out must be NULL and outsize 0, if you just give some random *out
; 2146 :   that's pointing to a non allocated buffer, this'll crash*/
; 2147 :   ucvector outv;
; 2148 :   size_t i;
; 2149 :   unsigned error;
; 2150 :   unsigned char* deflatedata = 0;
; 2151 :   size_t deflatesize = 0;
; 2152 : 
; 2153 :   unsigned ADLER32;
; 2154 :   /*zlib data: 1 byte CMF (CM+CINFO), 1 byte FLG, deflate data, 4 byte ADLER32 checksum of the Decompressed data*/
; 2155 :   unsigned CMF = 120; /*0b01111000: CM 8, CINFO 7. With CINFO 7, any window size up to 32768 can be used.*/
; 2156 :   unsigned FLEVEL = 0;
; 2157 :   unsigned FDICT = 0;
; 2158 :   unsigned CMFFLG = 256 * CMF + FDICT * 32 + FLEVEL * 64;
; 2159 :   unsigned FCHECK = 31 - CMFFLG % 31;
; 2160 :   CMFFLG += FCHECK;
; 2161 : 
; 2162 :   /*ucvector-controlled version of the output buffer, for dynamic array*/
; 2163 :   ucvector_init_buffer(&outv, *out, *outsize);
; 2164 : 
; 2165 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG / 256));
; 2166 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG % 256));
; 2167 : 
; 2168 :   error = deflate(&deflatedata, &deflatesize, in, insize, settings);
; 2169 : 
; 2170 :   if(!error)
; 2171 :   {
; 2172 :     ADLER32 = adler32(in, (unsigned)insize);
; 2173 :     for(i = 0; i < deflatesize; i++) ucvector_push_back(&outv, deflatedata[i]);
; 2174 :     lodepng_free(deflatedata);
; 2175 :     lodepng_add32bitInt(&outv, ADLER32);
; 2176 :   }
; 2177 : 
; 2178 :   *out = outv.data;
; 2179 :   *outsize = outv.size;
; 2180 : 
; 2181 :   return error;
; 2182 : }
; 2183 : 
; 2184 : /* compress using the default or custom zlib function */
; 2185 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2186 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2187 : {
; 2188 :   if(settings->custom_zlib)
; 2189 :   {
; 2190 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2191 :   }
; 2192 :   else
; 2193 :   {
; 2194 :     return lodepng_zlib_compress(out, outsize, in, insize, settings);
; 2195 :   }
; 2196 : }
; 2197 : 
; 2198 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2199 : 
; 2200 : #else /*no LODEPNG_COMPILE_ZLIB*/
; 2201 : 
; 2202 : #ifdef LODEPNG_COMPILE_DECODER
; 2203 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2204 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2205 : {
; 2206 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2207 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2208 : }
; 2209 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2210 : #ifdef LODEPNG_COMPILE_ENCODER
; 2211 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2212 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2213 : {
; 2214 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2215 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2216 : }
; 2217 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2218 : 
; 2219 : #endif /*LODEPNG_COMPILE_ZLIB*/
; 2220 : 
; 2221 : /* ////////////////////////////////////////////////////////////////////////// */
; 2222 : 
; 2223 : #ifdef LODEPNG_COMPILE_ENCODER
; 2224 : 
; 2225 : /*this is a good tradeoff between speed and compression ratio*/
; 2226 : #define DEFAULT_WINDOWSIZE 2048
; 2227 : 
; 2228 : void lodepng_compress_settings_init(LodePNGCompressSettings* settings)
; 2229 : {
; 2230 :   /*compress with dynamic huffman tree (not in the mathematical sense, just not the predefined one)*/
; 2231 :   settings->btype = 2;
; 2232 :   settings->use_lz77 = 1;
; 2233 :   settings->windowsize = DEFAULT_WINDOWSIZE;
; 2234 :   settings->minmatch = 3;
; 2235 :   settings->nicematch = 128;
; 2236 :   settings->lazymatching = 1;
; 2237 : 
; 2238 :   settings->custom_zlib = 0;
; 2239 :   settings->custom_deflate = 0;
; 2240 :   settings->custom_context = 0;
; 2241 : }
; 2242 : 
; 2243 : const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 3, 128, 1, 0, 0, 0};
; 2244 : 
; 2245 : 
; 2246 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2247 : 
; 2248 : #ifdef LODEPNG_COMPILE_DECODER
; 2249 : 
; 2250 : void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings)
; 2251 : {
; 2252 :   settings->ignore_adler32 = 0;
; 2253 : 
; 2254 :   settings->custom_zlib = 0;
; 2255 :   settings->custom_inflate = 0;
; 2256 :   settings->custom_context = 0;
; 2257 : }
; 2258 : 
; 2259 : const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0, 0, 0};
; 2260 : 
; 2261 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2262 : 
; 2263 : /* ////////////////////////////////////////////////////////////////////////// */
; 2264 : /* ////////////////////////////////////////////////////////////////////////// */
; 2265 : /* // End of Zlib related code. Begin of PNG related code.                 // */
; 2266 : /* ////////////////////////////////////////////////////////////////////////// */
; 2267 : /* ////////////////////////////////////////////////////////////////////////// */
; 2268 : 
; 2269 : #ifdef LODEPNG_COMPILE_PNG
; 2270 : 
; 2271 : /* ////////////////////////////////////////////////////////////////////////// */
; 2272 : /* / CRC32                                                                  / */
; 2273 : /* ////////////////////////////////////////////////////////////////////////// */
; 2274 : 
; 2275 : /* CRC polynomial: 0xedb88320 */
; 2276 : static unsigned lodepng_crc32_table[256] = {
; 2277 :            0u, 1996959894u, 3993919788u, 2567524794u,  124634137u, 1886057615u, 3915621685u, 2657392035u,
; 2278 :    249268274u, 2044508324u, 3772115230u, 2547177864u,  162941995u, 2125561021u, 3887607047u, 2428444049u,
; 2279 :    498536548u, 1789927666u, 4089016648u, 2227061214u,  450548861u, 1843258603u, 4107580753u, 2211677639u,
; 2280 :    325883990u, 1684777152u, 4251122042u, 2321926636u,  335633487u, 1661365465u, 4195302755u, 2366115317u,
; 2281 :    997073096u, 1281953886u, 3579855332u, 2724688242u, 1006888145u, 1258607687u, 3524101629u, 2768942443u,
; 2282 :    901097722u, 1119000684u, 3686517206u, 2898065728u,  853044451u, 1172266101u, 3705015759u, 2882616665u,
; 2283 :    651767980u, 1373503546u, 3369554304u, 3218104598u,  565507253u, 1454621731u, 3485111705u, 3099436303u,
; 2284 :    671266974u, 1594198024u, 3322730930u, 2970347812u,  795835527u, 1483230225u, 3244367275u, 3060149565u,
; 2285 :   1994146192u,   31158534u, 2563907772u, 4023717930u, 1907459465u,  112637215u, 2680153253u, 3904427059u,
; 2286 :   2013776290u,  251722036u, 2517215374u, 3775830040u, 2137656763u,  141376813u, 2439277719u, 3865271297u,
; 2287 :   1802195444u,  476864866u, 2238001368u, 4066508878u, 1812370925u,  453092731u, 2181625025u, 4111451223u,
; 2288 :   1706088902u,  314042704u, 2344532202u, 4240017532u, 1658658271u,  366619977u, 2362670323u, 4224994405u,
; 2289 :   1303535960u,  984961486u, 2747007092u, 3569037538u, 1256170817u, 1037604311u, 2765210733u, 3554079995u,
; 2290 :   1131014506u,  879679996u, 2909243462u, 3663771856u, 1141124467u,  855842277u, 2852801631u, 3708648649u,
; 2291 :   1342533948u,  654459306u, 3188396048u, 3373015174u, 1466479909u,  544179635u, 3110523913u, 3462522015u,
; 2292 :   1591671054u,  702138776u, 2966460450u, 3352799412u, 1504918807u,  783551873u, 3082640443u, 3233442989u,
; 2293 :   3988292384u, 2596254646u,   62317068u, 1957810842u, 3939845945u, 2647816111u,   81470997u, 1943803523u,
; 2294 :   3814918930u, 2489596804u,  225274430u, 2053790376u, 3826175755u, 2466906013u,  167816743u, 2097651377u,
; 2295 :   4027552580u, 2265490386u,  503444072u, 1762050814u, 4150417245u, 2154129355u,  426522225u, 1852507879u,
; 2296 :   4275313526u, 2312317920u,  282753626u, 1742555852u, 4189708143u, 2394877945u,  397917763u, 1622183637u,
; 2297 :   3604390888u, 2714866558u,  953729732u, 1340076626u, 3518719985u, 2797360999u, 1068828381u, 1219638859u,
; 2298 :   3624741850u, 2936675148u,  906185462u, 1090812512u, 3747672003u, 2825379669u,  829329135u, 1181335161u,
; 2299 :   3412177804u, 3160834842u,  628085408u, 1382605366u, 3423369109u, 3138078467u,  570562233u, 1426400815u,
; 2300 :   3317316542u, 2998733608u,  733239954u, 1555261956u, 3268935591u, 3050360625u,  752459403u, 1541320221u,
; 2301 :   2607071920u, 3965973030u, 1969922972u,   40735498u, 2617837225u, 3943577151u, 1913087877u,   83908371u,
; 2302 :   2512341634u, 3803740692u, 2075208622u,  213261112u, 2463272603u, 3855990285u, 2094854071u,  198958881u,
; 2303 :   2262029012u, 4057260610u, 1759359992u,  534414190u, 2176718541u, 4139329115u, 1873836001u,  414664567u,
; 2304 :   2282248934u, 4279200368u, 1711684554u,  285281116u, 2405801727u, 4167216745u, 1634467795u,  376229701u,
; 2305 :   2685067896u, 3608007406u, 1308918612u,  956543938u, 2808555105u, 3495958263u, 1231636301u, 1047427035u,
; 2306 :   2932959818u, 3654703836u, 1088359270u,  936918000u, 2847714899u, 3736837829u, 1202900863u,  817233897u,
; 2307 :   3183342108u, 3401237130u, 1404277552u,  615818150u, 3134207493u, 3453421203u, 1423857449u,  601450431u,
; 2308 :   3009837614u, 3294710456u, 1567103746u,  711928724u, 3020668471u, 3272380065u, 1510334235u,  755167117u
; 2309 : };
; 2310 : 
; 2311 : /*Return the CRC of the bytes buf[0..len-1].*/
; 2312 : unsigned lodepng_crc32(const unsigned char* buf, size_t len)
; 2313 : {
; 2314 :   unsigned c = 0xffffffffL;
; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)
; 2318 :   {
; 2319 :     c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
; 2320 :   }
; 2321 :   return c ^ 0xffffffffL;
; 2322 : }
; 2323 : 
; 2324 : /* ////////////////////////////////////////////////////////////////////////// */
; 2325 : /* / Reading and writing single bits and bytes from/to stream for LodePNG   / */
; 2326 : /* ////////////////////////////////////////////////////////////////////////// */
; 2327 : 
; 2328 : static unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream)
; 2329 : {
; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);
; 2331 :   (*bitpointer)++;
; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)
; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
; 2354 :   }
; 2355 :   (*bitpointer)++;
; 2356 : }
; 2357 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2358 : 
; 2359 : static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2360 : {
; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));
; 2363 :   else         bitstream[(*bitpointer) >> 3] |=  (1 << (7 - ((*bitpointer) & 0x7)));
; 2364 :   (*bitpointer)++;
; 2365 : }
; 2366 : 
; 2367 : /* ////////////////////////////////////////////////////////////////////////// */
; 2368 : /* / PNG chunks                                                             / */
; 2369 : /* ////////////////////////////////////////////////////////////////////////// */
; 2370 : 
; 2371 : unsigned lodepng_chunk_length(const unsigned char* chunk)
; 2372 : {
; 2373 :   return lodepng_read32bitInt(&chunk[0]);
; 2374 : }
; 2375 : 
; 2376 : void lodepng_chunk_type(char type[5], const unsigned char* chunk)
; 2377 : {
; 2378 :   unsigned i;
; 2379 :   for(i = 0; i < 4; i++) type[i] = chunk[4 + i];
; 2380 :   type[4] = 0; /*null termination char*/
; 2381 : }
; 2382 : 
; 2383 : unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type)
; 2384 : {
; 2385 :   if(strlen(type) != 4) return 0;
; 2386 :   return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);
; 2387 : }
; 2388 : 
; 2389 : unsigned char lodepng_chunk_ancillary(const unsigned char* chunk)
; 2390 : {
; 2391 :   return((chunk[4] & 32) != 0);
; 2392 : }
; 2393 : 
; 2394 : unsigned char lodepng_chunk_private(const unsigned char* chunk)
; 2395 : {
; 2396 :   return((chunk[6] & 32) != 0);
; 2397 : }
; 2398 : 
; 2399 : unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk)
; 2400 : {
; 2401 :   return((chunk[7] & 32) != 0);
; 2402 : }
; 2403 : 
; 2404 : unsigned char* lodepng_chunk_data(unsigned char* chunk)
; 2405 : {
; 2406 :   return &chunk[8];
; 2407 : }
; 2408 : 
; 2409 : const unsigned char* lodepng_chunk_data_const(const unsigned char* chunk)
; 2410 : {
; 2411 :   return &chunk[8];
; 2412 : }
; 2413 : 
; 2414 : unsigned lodepng_chunk_check_crc(const unsigned char* chunk)
; 2415 : {
; 2416 :   unsigned length = lodepng_chunk_length(chunk);
; 2417 :   unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);
; 2418 :   /*the CRC is taken of the data and the 4 chunk type letters, not the length*/
; 2419 :   unsigned checksum = lodepng_crc32(&chunk[4], length + 4);
; 2420 :   if(CRC != checksum) return 1;
; 2421 :   else return 0;
; 2422 : }
; 2423 : 
; 2424 : void lodepng_chunk_generate_crc(unsigned char* chunk)
; 2425 : {
; 2426 :   unsigned length = lodepng_chunk_length(chunk);
; 2427 :   unsigned CRC = lodepng_crc32(&chunk[4], length + 4);
; 2428 :   lodepng_set32bitInt(chunk + 8 + length, CRC);
; 2429 : }
; 2430 : 
; 2431 : unsigned char* lodepng_chunk_next(unsigned char* chunk)
; 2432 : {
; 2433 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2434 :   return &chunk[total_chunk_length];
; 2435 : }
; 2436 : 
; 2437 : const unsigned char* lodepng_chunk_next_const(const unsigned char* chunk)
; 2438 : {
; 2439 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2440 :   return &chunk[total_chunk_length];
; 2441 : }
; 2442 : 
; 2443 : unsigned lodepng_chunk_append(unsigned char** out, size_t* outlength, const unsigned char* chunk)
; 2444 : {
; 2445 :   unsigned i;
; 2446 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2447 :   unsigned char *chunk_start, *new_buffer;
; 2448 :   size_t new_length = (*outlength) + total_chunk_length;
; 2449 :   if(new_length < total_chunk_length || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2450 : 
; 2451 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2452 :   if(!new_buffer) return 83; /*alloc fail*/
; 2453 :   (*out) = new_buffer;
; 2454 :   (*outlength) = new_length;
; 2455 :   chunk_start = &(*out)[new_length - total_chunk_length];
; 2456 : 
; 2457 :   for(i = 0; i < total_chunk_length; i++) chunk_start[i] = chunk[i];
; 2458 : 
; 2459 :   return 0;
; 2460 : }
; 2461 : 
; 2462 : unsigned lodepng_chunk_create(unsigned char** out, size_t* outlength, unsigned length,
; 2463 :                               const char* type, const unsigned char* data)
; 2464 : {
; 2465 :   unsigned i;
; 2466 :   unsigned char *chunk, *new_buffer;
; 2467 :   size_t new_length = (*outlength) + length + 12;
; 2468 :   if(new_length < length + 12 || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2469 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2470 :   if(!new_buffer) return 83; /*alloc fail*/
; 2471 :   (*out) = new_buffer;
; 2472 :   (*outlength) = new_length;
; 2473 :   chunk = &(*out)[(*outlength) - length - 12];
; 2474 : 
; 2475 :   /*1: length*/
; 2476 :   lodepng_set32bitInt(chunk, (unsigned)length);
; 2477 : 
; 2478 :   /*2: chunk name (4 letters)*/
; 2479 :   chunk[4] = type[0];
; 2480 :   chunk[5] = type[1];
; 2481 :   chunk[6] = type[2];
; 2482 :   chunk[7] = type[3];
; 2483 : 
; 2484 :   /*3: the data*/
; 2485 :   for(i = 0; i < length; i++) chunk[8 + i] = data[i];
; 2486 : 
; 2487 :   /*4: CRC (of the chunkname characters and the data)*/
; 2488 :   lodepng_chunk_generate_crc(chunk);
; 2489 : 
; 2490 :   return 0;
; 2491 : }
; 2492 : 
; 2493 : /* ////////////////////////////////////////////////////////////////////////// */
; 2494 : /* / Color types and such                                                   / */
; 2495 : /* ////////////////////////////////////////////////////////////////////////// */
; 2496 : 
; 2497 : /*return type is a LodePNG error code*/
; 2498 : static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) /*bd = bitdepth*/
; 2499 : {
; 2500 :   switch(colortype)
; 2501 :   {
; 2502 :     case 0: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)) return 37; break; /*grey*/
; 2503 :     case 2: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGB*/
; 2504 :     case 3: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )) return 37; break; /*palette*/
; 2505 :     case 4: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*grey + alpha*/
; 2506 :     case 6: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGBA*/
; 2507 :     default: return 31;
; 2508 :   }
; 2509 :   return 0; /*allowed color type / bits combination*/
; 2510 : }
; 2511 : 
; 2512 : static unsigned getNumColorChannels(LodePNGColorType colortype)
; 2513 : {
; 2514 :   switch(colortype)
; 2515 :   {
; 2516 :     case 0: return 1; /*grey*/
; 2517 :     case 2: return 3; /*RGB*/
; 2518 :     case 3: return 1; /*palette*/
; 2519 :     case 4: return 2; /*grey + alpha*/
; 2520 :     case 6: return 4; /*RGBA*/
; 2521 :   }
; 2522 :   return 0; /*unexisting color type*/
; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;
; 2529 : }
; 2530 : 
; 2531 : /* ////////////////////////////////////////////////////////////////////////// */
; 2532 : 
; 2533 : void lodepng_color_mode_init(LodePNGColorMode* info)
; 2534 : {
; 2535 :   info->key_defined = 0;
; 2536 :   info->key_r = info->key_g = info->key_b = 0;
; 2537 :   info->colortype = LCT_RGBA;
; 2538 :   info->bitdepth = 8;
; 2539 :   info->palette = 0;
; 2540 :   info->palettesize = 0;
; 2541 : }
; 2542 : 
; 2543 : void lodepng_color_mode_cleanup(LodePNGColorMode* info)
; 2544 : {
; 2545 :   lodepng_palette_clear(info);
; 2546 : }
; 2547 : 
; 2548 : unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
; 2549 : {
; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;
; 2553 :   if(source->palette)
; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);
; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];
; 2558 :   }
; 2559 :   return 0;
; 2560 : }
; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);

  0000c	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  0000f	85 c0		 test	 eax, eax
  00011	74 09		 je	 SHORT $LN13@scalar

; 73   :   free(ptr);

  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _free
  00019	83 c4 04	 add	 esp, 4
$LN13@scalar:

; 2587 : }
; 2588 : 
; 2589 : unsigned lodepng_palette_add(LodePNGColorMode* info,
; 2590 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2591 : {
; 2592 :   unsigned char* data;
; 2593 :   /*the same resize technique as C++ std::vectors is used, and here it's made so that for a palette with
; 2594 :   the max of 256 colors, it'll have the exact alloc size*/
; 2595 :   if(!info->palette) /*allocate palette if empty*/
; 2596 :   {
; 2597 :     /*room for 256 colors with 4 bytes each*/
; 2598 :     data = (unsigned char*)lodepng_realloc(info->palette, 1024);
; 2599 :     if(!data) return 83; /*alloc fail*/
; 2600 :     else info->palette = data;
; 2601 :   }
; 2602 :   info->palette[4 * info->palettesize + 0] = r;
; 2603 :   info->palette[4 * info->palettesize + 1] = g;
; 2604 :   info->palette[4 * info->palettesize + 2] = b;
; 2605 :   info->palette[4 * info->palettesize + 3] = a;
; 2606 :   info->palettesize++;
; 2607 :   return 0;
; 2608 : }
; 2609 : 
; 2610 : unsigned lodepng_get_bpp(const LodePNGColorMode* info)
; 2611 : {
; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }
; 2615 : 
; 2616 : unsigned lodepng_get_channels(const LodePNGColorMode* info)
; 2617 : {
; 2618 :   return getNumColorChannels(info->colortype);
; 2619 : }
; 2620 : 
; 2621 : unsigned lodepng_is_greyscale_type(const LodePNGColorMode* info)
; 2622 : {
; 2623 :   return info->colortype == LCT_GREY || info->colortype == LCT_GREY_ALPHA;
; 2624 : }
; 2625 : 
; 2626 : unsigned lodepng_is_alpha_type(const LodePNGColorMode* info)
; 2627 : {
; 2628 :   return (info->colortype & 4) != 0; /*4 or 6*/
; 2629 : }
; 2630 : 
; 2631 : unsigned lodepng_is_palette_type(const LodePNGColorMode* info)
; 2632 : {
; 2633 :   return info->colortype == LCT_PALETTE;
; 2634 : }
; 2635 : 
; 2636 : unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info)
; 2637 : {
; 2638 :   size_t i;
; 2639 :   for(i = 0; i < info->palettesize; i++)
; 2640 :   {
; 2641 :     if(info->palette[i * 4 + 3] < 255) return 1;
; 2642 :   }
; 2643 :   return 0;
; 2644 : }
; 2645 : 
; 2646 : unsigned lodepng_can_have_alpha(const LodePNGColorMode* info)
; 2647 : {
; 2648 :   return info->key_defined
; 2649 :       || lodepng_is_alpha_type(info)
; 2650 :       || lodepng_has_palette_alpha(info);
; 2651 : }
; 2652 : 
; 2653 : size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode* color)
; 2654 : {
; 2655 :   return (w * h * lodepng_get_bpp(color) + 7) / 8;
; 2656 : }
; 2657 : 
; 2658 : size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)
; 2659 : {
; 2660 :   return (w * h * lodepng_get_bpp_lct(colortype, bitdepth) + 7) / 8;
; 2661 : }
; 2662 : 
; 2663 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2664 : 
; 2665 : static void LodePNGUnknownChunks_init(LodePNGInfo* info)
; 2666 : {
; 2667 :   unsigned i;
; 2668 :   for(i = 0; i < 3; i++) info->unknown_chunks_data[i] = 0;
; 2669 :   for(i = 0; i < 3; i++) info->unknown_chunks_size[i] = 0;
; 2670 : }
; 2671 : 
; 2672 : static void LodePNGUnknownChunks_cleanup(LodePNGInfo* info)
; 2673 : {
; 2674 :   unsigned i;
; 2675 :   for(i = 0; i < 3; i++) lodepng_free(info->unknown_chunks_data[i]);
; 2676 : }
; 2677 : 
; 2678 : static unsigned LodePNGUnknownChunks_copy(LodePNGInfo* dest, const LodePNGInfo* src)
; 2679 : {
; 2680 :   unsigned i;
; 2681 : 
; 2682 :   LodePNGUnknownChunks_cleanup(dest);
; 2683 : 
; 2684 :   for(i = 0; i < 3; i++)
; 2685 :   {
; 2686 :     size_t j;
; 2687 :     dest->unknown_chunks_size[i] = src->unknown_chunks_size[i];
; 2688 :     dest->unknown_chunks_data[i] = (unsigned char*)lodepng_malloc(src->unknown_chunks_size[i]);
; 2689 :     if(!dest->unknown_chunks_data[i] && dest->unknown_chunks_size[i]) return 83; /*alloc fail*/
; 2690 :     for(j = 0; j < src->unknown_chunks_size[i]; j++)
; 2691 :     {
; 2692 :       dest->unknown_chunks_data[i][j] = src->unknown_chunks_data[i][j];
; 2693 :     }
; 2694 :   }
; 2695 : 
; 2696 :   return 0;
; 2697 : }
; 2698 : 
; 2699 : /******************************************************************************/
; 2700 : 
; 2701 : static void LodePNGText_init(LodePNGInfo* info)
; 2702 : {
; 2703 :   info->text_num = 0;
; 2704 :   info->text_keys = NULL;
; 2705 :   info->text_strings = NULL;
; 2706 : }
; 2707 : 
; 2708 : static void LodePNGText_cleanup(LodePNGInfo* info)
; 2709 : {
; 2710 :   size_t i;
; 2711 :   for(i = 0; i < info->text_num; i++)
; 2712 :   {
; 2713 :     string_cleanup(&info->text_keys[i]);
; 2714 :     string_cleanup(&info->text_strings[i]);
; 2715 :   }
; 2716 :   lodepng_free(info->text_keys);
; 2717 :   lodepng_free(info->text_strings);
; 2718 : }
; 2719 : 
; 2720 : static unsigned LodePNGText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2721 : {
; 2722 :   size_t i = 0;
; 2723 :   dest->text_keys = 0;
; 2724 :   dest->text_strings = 0;
; 2725 :   dest->text_num = 0;
; 2726 :   for(i = 0; i < source->text_num; i++)
; 2727 :   {
; 2728 :     CERROR_TRY_RETURN(lodepng_add_text(dest, source->text_keys[i], source->text_strings[i]));
; 2729 :   }
; 2730 :   return 0;
; 2731 : }
; 2732 : 
; 2733 : void lodepng_clear_text(LodePNGInfo* info)
; 2734 : {
; 2735 :   LodePNGText_cleanup(info);
; 2736 : }
; 2737 : 
; 2738 : unsigned lodepng_add_text(LodePNGInfo* info, const char* key, const char* str)
; 2739 : {
; 2740 :   char** new_keys = (char**)(lodepng_realloc(info->text_keys, sizeof(char*) * (info->text_num + 1)));
; 2741 :   char** new_strings = (char**)(lodepng_realloc(info->text_strings, sizeof(char*) * (info->text_num + 1)));
; 2742 :   if(!new_keys || !new_strings)
; 2743 :   {
; 2744 :     lodepng_free(new_keys);
; 2745 :     lodepng_free(new_strings);
; 2746 :     return 83; /*alloc fail*/
; 2747 :   }
; 2748 : 
; 2749 :   info->text_num++;
; 2750 :   info->text_keys = new_keys;
; 2751 :   info->text_strings = new_strings;
; 2752 : 
; 2753 :   string_init(&info->text_keys[info->text_num - 1]);
; 2754 :   string_set(&info->text_keys[info->text_num - 1], key);
; 2755 : 
; 2756 :   string_init(&info->text_strings[info->text_num - 1]);
; 2757 :   string_set(&info->text_strings[info->text_num - 1], str);
; 2758 : 
; 2759 :   return 0;
; 2760 : }
; 2761 : 
; 2762 : /******************************************************************************/
; 2763 : 
; 2764 : static void LodePNGIText_init(LodePNGInfo* info)
; 2765 : {
; 2766 :   info->itext_num = 0;
; 2767 :   info->itext_keys = NULL;
; 2768 :   info->itext_langtags = NULL;
; 2769 :   info->itext_transkeys = NULL;
; 2770 :   info->itext_strings = NULL;
; 2771 : }
; 2772 : 
; 2773 : static void LodePNGIText_cleanup(LodePNGInfo* info)
; 2774 : {
; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)
; 2777 :   {
; 2778 :     string_cleanup(&info->itext_keys[i]);
; 2779 :     string_cleanup(&info->itext_langtags[i]);
; 2780 :     string_cleanup(&info->itext_transkeys[i]);
; 2781 :     string_cleanup(&info->itext_strings[i]);
; 2782 :   }
; 2783 :   lodepng_free(info->itext_keys);
; 2784 :   lodepng_free(info->itext_langtags);
; 2785 :   lodepng_free(info->itext_transkeys);
; 2786 :   lodepng_free(info->itext_strings);
; 2787 : }
; 2788 : 
; 2789 : static unsigned LodePNGIText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2790 : {
; 2791 :   size_t i = 0;
; 2792 :   dest->itext_keys = 0;
; 2793 :   dest->itext_langtags = 0;
; 2794 :   dest->itext_transkeys = 0;
; 2795 :   dest->itext_strings = 0;
; 2796 :   dest->itext_num = 0;
; 2797 :   for(i = 0; i < source->itext_num; i++)
; 2798 :   {
; 2799 :     CERROR_TRY_RETURN(lodepng_add_itext(dest, source->itext_keys[i], source->itext_langtags[i],
; 2800 :                                         source->itext_transkeys[i], source->itext_strings[i]));
; 2801 :   }
; 2802 :   return 0;
; 2803 : }
; 2804 : 
; 2805 : void lodepng_clear_itext(LodePNGInfo* info)
; 2806 : {
; 2807 :   LodePNGIText_cleanup(info);
; 2808 : }
; 2809 : 
; 2810 : unsigned lodepng_add_itext(LodePNGInfo* info, const char* key, const char* langtag,
; 2811 :                            const char* transkey, const char* str)
; 2812 : {
; 2813 :   char** new_keys = (char**)(lodepng_realloc(info->itext_keys, sizeof(char*) * (info->itext_num + 1)));
; 2814 :   char** new_langtags = (char**)(lodepng_realloc(info->itext_langtags, sizeof(char*) * (info->itext_num + 1)));
; 2815 :   char** new_transkeys = (char**)(lodepng_realloc(info->itext_transkeys, sizeof(char*) * (info->itext_num + 1)));
; 2816 :   char** new_strings = (char**)(lodepng_realloc(info->itext_strings, sizeof(char*) * (info->itext_num + 1)));
; 2817 :   if(!new_keys || !new_langtags || !new_transkeys || !new_strings)
; 2818 :   {
; 2819 :     lodepng_free(new_keys);
; 2820 :     lodepng_free(new_langtags);
; 2821 :     lodepng_free(new_transkeys);
; 2822 :     lodepng_free(new_strings);
; 2823 :     return 83; /*alloc fail*/
; 2824 :   }
; 2825 : 
; 2826 :   info->itext_num++;
; 2827 :   info->itext_keys = new_keys;
; 2828 :   info->itext_langtags = new_langtags;
; 2829 :   info->itext_transkeys = new_transkeys;
; 2830 :   info->itext_strings = new_strings;
; 2831 : 
; 2832 :   string_init(&info->itext_keys[info->itext_num - 1]);
; 2833 :   string_set(&info->itext_keys[info->itext_num - 1], key);
; 2834 : 
; 2835 :   string_init(&info->itext_langtags[info->itext_num - 1]);
; 2836 :   string_set(&info->itext_langtags[info->itext_num - 1], langtag);
; 2837 : 
; 2838 :   string_init(&info->itext_transkeys[info->itext_num - 1]);
; 2839 :   string_set(&info->itext_transkeys[info->itext_num - 1], transkey);
; 2840 : 
; 2841 :   string_init(&info->itext_strings[info->itext_num - 1]);
; 2842 :   string_set(&info->itext_strings[info->itext_num - 1], str);
; 2843 : 
; 2844 :   return 0;
; 2845 : }
; 2846 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2847 : 
; 2848 : void lodepng_info_init(LodePNGInfo* info)
; 2849 : {
; 2850 :   lodepng_color_mode_init(&info->color);
; 2851 :   info->interlace_method = 0;
; 2852 :   info->compression_method = 0;
; 2853 :   info->filter_method = 0;
; 2854 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2855 :   info->background_defined = 0;
; 2856 :   info->background_r = info->background_g = info->background_b = 0;
; 2857 : 
; 2858 :   LodePNGText_init(info);
; 2859 :   LodePNGIText_init(info);
; 2860 : 
; 2861 :   info->time_defined = 0;
; 2862 :   info->phys_defined = 0;
; 2863 : 
; 2864 :   LodePNGUnknownChunks_init(info);
; 2865 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2866 : }
; 2867 : 
; 2868 : void lodepng_info_cleanup(LodePNGInfo* info)
; 2869 : {
; 2870 :   lodepng_color_mode_cleanup(&info->color);
; 2871 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2872 :   LodePNGText_cleanup(info);
; 2873 :   LodePNGIText_cleanup(info);
; 2874 : 
; 2875 :   LodePNGUnknownChunks_cleanup(info);
; 2876 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2877 : }
; 2878 : 
; 2879 : unsigned lodepng_info_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2880 : {
; 2881 :   lodepng_info_cleanup(dest);
; 2882 :   *dest = *source;
; 2883 :   lodepng_color_mode_init(&dest->color);
; 2884 :   CERROR_TRY_RETURN(lodepng_color_mode_copy(&dest->color, &source->color));
; 2885 : 
; 2886 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2887 :   CERROR_TRY_RETURN(LodePNGText_copy(dest, source));
; 2888 :   CERROR_TRY_RETURN(LodePNGIText_copy(dest, source));
; 2889 : 
; 2890 :   LodePNGUnknownChunks_init(dest);
; 2891 :   CERROR_TRY_RETURN(LodePNGUnknownChunks_copy(dest, source));
; 2892 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2893 :   return 0;
; 2894 : }
; 2895 : 
; 2896 : void lodepng_info_swap(LodePNGInfo* a, LodePNGInfo* b)
; 2897 : {
; 2898 :   LodePNGInfo temp = *a;
; 2899 :   *a = *b;
; 2900 :   *b = temp;
; 2901 : }
; 2902 : 
; 2903 : /* ////////////////////////////////////////////////////////////////////////// */
; 2904 : 
; 2905 : /*index: bitgroup index, bits: bitgroup size(1, 2 or 4, in: bitgroup value, out: octet array to add bits to*/
; 2906 : static void addColorBits(unsigned char* out, size_t index, unsigned bits, unsigned in)
; 2907 : {
; 2908 :   /*p = the partial index in the byte, e.g. with 4 palettebits it is 0 for first half or 1 for second half*/
; 2909 :   unsigned p = index % (8 / bits);
; 2910 :   in &= (1 << bits) - 1; /*filter out any other bits of the input value*/
; 2911 :   in = in << (bits * (8 / bits - p - 1));
; 2912 :   if(p == 0) out[index * bits / 8] = in;
; 2913 :   else out[index * bits / 8] |= in;
; 2914 : }
; 2915 : 
; 2916 : typedef struct ColorTree ColorTree;
; 2917 : 
; 2918 : /*
; 2919 : One node of a color tree
; 2920 : This is the data structure used to count the number of unique colors and to get a palette
; 2921 : index for a color. It's like an octree, but because the alpha channel is used too, each
; 2922 : node has 16 instead of 8 children.
; 2923 : */
; 2924 : struct ColorTree
; 2925 : {
; 2926 :   ColorTree* children[16]; /*up to 16 pointers to ColorTree of next level*/
; 2927 :   int index; /*the payload. Only has a meaningful value if this is in the last level*/
; 2928 : };
; 2929 : 
; 2930 : static void color_tree_init(ColorTree* tree)
; 2931 : {
; 2932 :   int i;
; 2933 :   for(i = 0; i < 16; i++) tree->children[i] = 0;
; 2934 :   tree->index = -1;
; 2935 : }
; 2936 : 
; 2937 : static void color_tree_cleanup(ColorTree* tree)
; 2938 : {
; 2939 :   int i;
; 2940 :   for(i = 0; i < 16; i++)
; 2941 :   {
; 2942 :     if(tree->children[i])
; 2943 :     {
; 2944 :       color_tree_cleanup(tree->children[i]);
; 2945 :       lodepng_free(tree->children[i]);
; 2946 :     }
; 2947 :   }
; 2948 : }
; 2949 : 
; 2950 : /*returns -1 if color not present, its index otherwise*/
; 2951 : static int color_tree_get(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2952 : {
; 2953 :   int bit = 0;
; 2954 :   for(bit = 0; bit < 8; bit++)
; 2955 :   {
; 2956 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
; 2957 :     if(!tree->children[i]) return -1;
; 2958 :     else tree = tree->children[i];
; 2959 :   }
; 2960 :   return tree ? tree->index : -1;
; 2961 : }
; 2962 : 
; 2963 : #ifdef LODEPNG_COMPILE_ENCODER
; 2964 : static int color_tree_has(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2965 : {
; 2966 :   return color_tree_get(tree, r, g, b, a) >= 0;
; 2967 : }
; 2968 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2969 : 
; 2970 : /*color is not allowed to already exist.
; 2971 : Index should be >= 0 (it's signed to be compatible with using -1 for "doesn't exist")*/
; 2972 : static void color_tree_add(ColorTree* tree,
; 2973 :                            unsigned char r, unsigned char g, unsigned char b, unsigned char a, int index)
; 2974 : {
; 2975 :   int bit;
; 2976 :   for(bit = 0; bit < 8; bit++)
; 2977 :   {
; 2978 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
; 2979 :     if(!tree->children[i])
; 2980 :     {
; 2981 :       tree->children[i] = (ColorTree*)lodepng_malloc(sizeof(ColorTree));
; 2982 :       color_tree_init(tree->children[i]);
; 2983 :     }
; 2984 :     tree = tree->children[i];
; 2985 :   }
; 2986 :   tree->index = index;
; 2987 : }
; 2988 : 
; 2989 : /*put a pixel, given its RGBA color, into image of any color type*/
; 2990 : static unsigned rgba8ToPixel(unsigned char* out, size_t i,
; 2991 :                              const LodePNGColorMode* mode, ColorTree* tree /*for palette*/,
; 2992 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2993 : {
; 2994 :   if(mode->colortype == LCT_GREY)
; 2995 :   {
; 2996 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 2997 :     if(mode->bitdepth == 8) out[i] = grey;
; 2998 :     else if(mode->bitdepth == 16) out[i * 2 + 0] = out[i * 2 + 1] = grey;
; 2999 :     else
; 3000 :     {
; 3001 :       /*take the most significant bits of grey*/
; 3002 :       grey = (grey >> (8 - mode->bitdepth)) & ((1 << mode->bitdepth) - 1);
; 3003 :       addColorBits(out, i, mode->bitdepth, grey);
; 3004 :     }
; 3005 :   }
; 3006 :   else if(mode->colortype == LCT_RGB)
; 3007 :   {
; 3008 :     if(mode->bitdepth == 8)
; 3009 :     {
; 3010 :       out[i * 3 + 0] = r;
; 3011 :       out[i * 3 + 1] = g;
; 3012 :       out[i * 3 + 2] = b;
; 3013 :     }
; 3014 :     else
; 3015 :     {
; 3016 :       out[i * 6 + 0] = out[i * 6 + 1] = r;
; 3017 :       out[i * 6 + 2] = out[i * 6 + 3] = g;
; 3018 :       out[i * 6 + 4] = out[i * 6 + 5] = b;
; 3019 :     }
; 3020 :   }
; 3021 :   else if(mode->colortype == LCT_PALETTE)
; 3022 :   {
; 3023 :     int index = color_tree_get(tree, r, g, b, a);
; 3024 :     if(index < 0) return 82; /*color not in palette*/
; 3025 :     if(mode->bitdepth == 8) out[i] = index;
; 3026 :     else addColorBits(out, i, mode->bitdepth, index);
; 3027 :   }
; 3028 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3029 :   {
; 3030 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 3031 :     if(mode->bitdepth == 8)
; 3032 :     {
; 3033 :       out[i * 2 + 0] = grey;
; 3034 :       out[i * 2 + 1] = a;
; 3035 :     }
; 3036 :     else if(mode->bitdepth == 16)
; 3037 :     {
; 3038 :       out[i * 4 + 0] = out[i * 4 + 1] = grey;
; 3039 :       out[i * 4 + 2] = out[i * 4 + 3] = a;
; 3040 :     }
; 3041 :   }
; 3042 :   else if(mode->colortype == LCT_RGBA)
; 3043 :   {
; 3044 :     if(mode->bitdepth == 8)
; 3045 :     {
; 3046 :       out[i * 4 + 0] = r;
; 3047 :       out[i * 4 + 1] = g;
; 3048 :       out[i * 4 + 2] = b;
; 3049 :       out[i * 4 + 3] = a;
; 3050 :     }
; 3051 :     else
; 3052 :     {
; 3053 :       out[i * 8 + 0] = out[i * 8 + 1] = r;
; 3054 :       out[i * 8 + 2] = out[i * 8 + 3] = g;
; 3055 :       out[i * 8 + 4] = out[i * 8 + 5] = b;
; 3056 :       out[i * 8 + 6] = out[i * 8 + 7] = a;
; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/
; 3061 : }
; 3062 : 
; 3063 : /*put a pixel, given its RGBA16 color, into image of any color 16-bitdepth type*/
; 3064 : static unsigned rgba16ToPixel(unsigned char* out, size_t i,
; 3065 :                               const LodePNGColorMode* mode,
; 3066 :                               unsigned short r, unsigned short g, unsigned short b, unsigned short a)
; 3067 : {
; 3068 :   if(mode->bitdepth != 16) return 85; /*must be 16 for this function*/
; 3069 :   if(mode->colortype == LCT_GREY)
; 3070 :   {
; 3071 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3072 :     out[i * 2 + 0] = (grey >> 8) & 255;
; 3073 :     out[i * 2 + 1] = grey & 255;
; 3074 :   }
; 3075 :   else if(mode->colortype == LCT_RGB)
; 3076 :   {
; 3077 :     out[i * 6 + 0] = (r >> 8) & 255;
; 3078 :     out[i * 6 + 1] = r & 255;
; 3079 :     out[i * 6 + 2] = (g >> 8) & 255;
; 3080 :     out[i * 6 + 3] = g & 255;
; 3081 :     out[i * 6 + 4] = (b >> 8) & 255;
; 3082 :     out[i * 6 + 5] = b & 255;
; 3083 :   }
; 3084 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3085 :   {
; 3086 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3087 :     out[i * 4 + 0] = (grey >> 8) & 255;
; 3088 :     out[i * 4 + 1] = grey & 255;
; 3089 :     out[i * 4 + 2] = (a >> 8) & 255;
; 3090 :     out[i * 4 + 3] = a & 255;
; 3091 :   }
; 3092 :   else if(mode->colortype == LCT_RGBA)
; 3093 :   {
; 3094 :     out[i * 8 + 0] = (r >> 8) & 255;
; 3095 :     out[i * 8 + 1] = r & 255;
; 3096 :     out[i * 8 + 2] = (g >> 8) & 255;
; 3097 :     out[i * 8 + 3] = g & 255;
; 3098 :     out[i * 8 + 4] = (b >> 8) & 255;
; 3099 :     out[i * 8 + 5] = b & 255;
; 3100 :     out[i * 8 + 6] = (a >> 8) & 255;
; 3101 :     out[i * 8 + 7] = a & 255;
; 3102 :   }
; 3103 : 
; 3104 :   return 0; /*no error*/
; 3105 : }
; 3106 : 
; 3107 : /*Get RGBA8 color of pixel with index i (y * width + x) from the raw image with given color type.*/
; 3108 : static unsigned getPixelColorRGBA8(unsigned char* r, unsigned char* g,
; 3109 :                                    unsigned char* b, unsigned char* a,
; 3110 :                                    const unsigned char* in, size_t i,
; 3111 :                                    const LodePNGColorMode* mode,
; 3112 :                                    unsigned fix_png)
; 3113 : {
; 3114 :   if(mode->colortype == LCT_GREY)
; 3115 :   {
; 3116 :     if(mode->bitdepth == 8)
; 3117 :     {
; 3118 :       *r = *g = *b = in[i];
; 3119 :       if(mode->key_defined && *r == mode->key_r) *a = 0;
; 3120 :       else *a = 255;
; 3121 :     }
; 3122 :     else if(mode->bitdepth == 16)
; 3123 :     {
; 3124 :       *r = *g = *b = in[i * 2 + 0];
; 3125 :       if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
; 3126 :       else *a = 255;
; 3127 :     }
; 3128 :     else
; 3129 :     {
; 3130 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
; 3131 :       size_t j = i * mode->bitdepth;
; 3132 :       unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3133 :       *r = *g = *b = (value * 255) / highest;
; 3134 :       if(mode->key_defined && value == mode->key_r) *a = 0;
; 3135 :       else *a = 255;
; 3136 :     }
; 3137 :   }
; 3138 :   else if(mode->colortype == LCT_RGB)
; 3139 :   {
; 3140 :     if(mode->bitdepth == 8)
; 3141 :     {
; 3142 :       *r = in[i * 3 + 0]; *g = in[i * 3 + 1]; *b = in[i * 3 + 2];
; 3143 :       if(mode->key_defined && *r == mode->key_r && *g == mode->key_g && *b == mode->key_b) *a = 0;
; 3144 :       else *a = 255;
; 3145 :     }
; 3146 :     else
; 3147 :     {
; 3148 :       *r = in[i * 6 + 0];
; 3149 :       *g = in[i * 6 + 2];
; 3150 :       *b = in[i * 6 + 4];
; 3151 :       if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3152 :          && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3153 :          && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
; 3154 :       else *a = 255;
; 3155 :     }
; 3156 :   }
; 3157 :   else if(mode->colortype == LCT_PALETTE)
; 3158 :   {
; 3159 :     unsigned index;
; 3160 :     if(mode->bitdepth == 8) index = in[i];
; 3161 :     else
; 3162 :     {
; 3163 :       size_t j = i * mode->bitdepth;
; 3164 :       index = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3165 :     }
; 3166 : 
; 3167 :     if(index >= mode->palettesize)
; 3168 :     {
; 3169 :       /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3170 :       if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/
; 3171 :       *r = *g = *b = 0;
; 3172 :       *a = 255;
; 3173 :     }
; 3174 :     else
; 3175 :     {
; 3176 :       *r = mode->palette[index * 4 + 0];
; 3177 :       *g = mode->palette[index * 4 + 1];
; 3178 :       *b = mode->palette[index * 4 + 2];
; 3179 :       *a = mode->palette[index * 4 + 3];
; 3180 :     }
; 3181 :   }
; 3182 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3183 :   {
; 3184 :     if(mode->bitdepth == 8)
; 3185 :     {
; 3186 :       *r = *g = *b = in[i * 2 + 0];
; 3187 :       *a = in[i * 2 + 1];
; 3188 :     }
; 3189 :     else
; 3190 :     {
; 3191 :       *r = *g = *b = in[i * 4 + 0];
; 3192 :       *a = in[i * 4 + 2];
; 3193 :     }
; 3194 :   }
; 3195 :   else if(mode->colortype == LCT_RGBA)
; 3196 :   {
; 3197 :     if(mode->bitdepth == 8)
; 3198 :     {
; 3199 :       *r = in[i * 4 + 0];
; 3200 :       *g = in[i * 4 + 1];
; 3201 :       *b = in[i * 4 + 2];
; 3202 :       *a = in[i * 4 + 3];
; 3203 :     }
; 3204 :     else
; 3205 :     {
; 3206 :       *r = in[i * 8 + 0];
; 3207 :       *g = in[i * 8 + 2];
; 3208 :       *b = in[i * 8 + 4];
; 3209 :       *a = in[i * 8 + 6];
; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/
; 3214 : }
; 3215 : 
; 3216 : /*Similar to getPixelColorRGBA8, but with all the for loops inside of the color
; 3217 : mode test cases, optimized to convert the colors much faster, when converting
; 3218 : to RGBA or RGB with 8 bit per cannel. buffer must be RGBA or RGB output with
; 3219 : enough memory, if has_alpha is true the output is RGBA. mode has the color mode
; 3220 : of the input buffer.*/
; 3221 : static unsigned getPixelColorsRGBA8(unsigned char* buffer, size_t numpixels,
; 3222 :                                     unsigned has_alpha, const unsigned char* in,
; 3223 :                                     const LodePNGColorMode* mode,
; 3224 :                                     unsigned fix_png)
; 3225 : {
; 3226 :   unsigned num_channels = has_alpha ? 4 : 3;
; 3227 :   size_t i;
; 3228 :   if(mode->colortype == LCT_GREY)
; 3229 :   {
; 3230 :     if(mode->bitdepth == 8)
; 3231 :     {
; 3232 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3233 :       {
; 3234 :         buffer[0] = buffer[1] = buffer[2] = in[i];
; 3235 :         if(has_alpha) buffer[3] = mode->key_defined && in[i] == mode->key_r ? 0 : 255;
; 3236 :       }
; 3237 :     }
; 3238 :     else if(mode->bitdepth == 16)
; 3239 :     {
; 3240 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3241 :       {
; 3242 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2];
; 3243 :         if(has_alpha) buffer[3] = mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r ? 0 : 255;
; 3244 :       }
; 3245 :     }
; 3246 :     else
; 3247 :     {
; 3248 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
; 3249 :       size_t j = 0;
; 3250 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3251 :       {
; 3252 :         unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3253 :         buffer[0] = buffer[1] = buffer[2] = (value * 255) / highest;
; 3254 :         if(has_alpha) buffer[3] = mode->key_defined && value == mode->key_r ? 0 : 255;
; 3255 :       }
; 3256 :     }
; 3257 :   }
; 3258 :   else if(mode->colortype == LCT_RGB)
; 3259 :   {
; 3260 :     if(mode->bitdepth == 8)
; 3261 :     {
; 3262 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3263 :       {
; 3264 :         buffer[0] = in[i * 3 + 0];
; 3265 :         buffer[1] = in[i * 3 + 1];
; 3266 :         buffer[2] = in[i * 3 + 2];
; 3267 :         if(has_alpha) buffer[3] = mode->key_defined && buffer[0] == mode->key_r
; 3268 :            && buffer[1]== mode->key_g && buffer[2] == mode->key_b ? 0 : 255;
; 3269 :       }
; 3270 :     }
; 3271 :     else
; 3272 :     {
; 3273 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3274 :       {
; 3275 :         buffer[0] = in[i * 6 + 0];
; 3276 :         buffer[1] = in[i * 6 + 2];
; 3277 :         buffer[2] = in[i * 6 + 4];
; 3278 :         if(has_alpha) buffer[3] = mode->key_defined
; 3279 :            && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3280 :            && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3281 :            && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b ? 0 : 255;
; 3282 :       }
; 3283 :     }
; 3284 :   }
; 3285 :   else if(mode->colortype == LCT_PALETTE)
; 3286 :   {
; 3287 :     unsigned index;
; 3288 :     size_t j = 0;
; 3289 :     for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3290 :     {
; 3291 :       if(mode->bitdepth == 8) index = in[i];
; 3292 :       else index = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3293 : 
; 3294 :       if(index >= mode->palettesize)
; 3295 :       {
; 3296 :         /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3297 :         if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/
; 3298 :         buffer[0] = buffer[1] = buffer[2] = 0;
; 3299 :         if(has_alpha) buffer[3] = 255;
; 3300 :       }
; 3301 :       else
; 3302 :       {
; 3303 :         buffer[0] = mode->palette[index * 4 + 0];
; 3304 :         buffer[1] = mode->palette[index * 4 + 1];
; 3305 :         buffer[2] = mode->palette[index * 4 + 2];
; 3306 :         if(has_alpha) buffer[3] = mode->palette[index * 4 + 3];
; 3307 :       }
; 3308 :     }
; 3309 :   }
; 3310 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3311 :   {
; 3312 :     if(mode->bitdepth == 8)
; 3313 :     {
; 3314 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3315 :       {
; 3316 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2 + 0];
; 3317 :         if(has_alpha) buffer[3] = in[i * 2 + 1];
; 3318 :       }
; 3319 :     }
; 3320 :     else
; 3321 :     {
; 3322 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3323 :       {
; 3324 :         buffer[0] = buffer[1] = buffer[2] = in[i * 4 + 0];
; 3325 :         if(has_alpha) buffer[3] = in[i * 4 + 2];
; 3326 :       }
; 3327 :     }
; 3328 :   }
; 3329 :   else if(mode->colortype == LCT_RGBA)
; 3330 :   {
; 3331 :     if(mode->bitdepth == 8)
; 3332 :     {
; 3333 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3334 :       {
; 3335 :         buffer[0] = in[i * 4 + 0];
; 3336 :         buffer[1] = in[i * 4 + 1];
; 3337 :         buffer[2] = in[i * 4 + 2];
; 3338 :         if(has_alpha) buffer[3] = in[i * 4 + 3];
; 3339 :       }
; 3340 :     }
; 3341 :     else
; 3342 :     {
; 3343 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3344 :       {
; 3345 :         buffer[0] = in[i * 8 + 0];
; 3346 :         buffer[1] = in[i * 8 + 2];
; 3347 :         buffer[2] = in[i * 8 + 4];
; 3348 :         if(has_alpha) buffer[3] = in[i * 8 + 6];
; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/
; 3354 : }
; 3355 : 
; 3356 : /*Get RGBA16 color of pixel with index i (y * width + x) from the raw image with
; 3357 : given color type, but the given color type must be 16-bit itself.*/
; 3358 : static unsigned getPixelColorRGBA16(unsigned short* r, unsigned short* g, unsigned short* b, unsigned short* a,
; 3359 :                                     const unsigned char* in, size_t i, const LodePNGColorMode* mode)
; 3360 : {
; 3361 :   if(mode->bitdepth != 16) return 85; /*error: this function only supports 16-bit input*/
; 3362 : 
; 3363 :   if(mode->colortype == LCT_GREY)
; 3364 :   {
; 3365 :     *r = *g = *b = 256 * in[i * 2 + 0] + in[i * 2 + 1];
; 3366 :     if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
; 3367 :     else *a = 65535;
; 3368 :   }
; 3369 :   else if(mode->colortype == LCT_RGB)
; 3370 :   {
; 3371 :     *r = 256 * in[i * 6 + 0] + in[i * 6 + 1];
; 3372 :     *g = 256 * in[i * 6 + 2] + in[i * 6 + 3];
; 3373 :     *b = 256 * in[i * 6 + 4] + in[i * 6 + 5];
; 3374 :     if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3375 :        && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3376 :        && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
; 3377 :     else *a = 65535;
; 3378 :   }
; 3379 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3380 :   {
; 3381 :     *r = *g = *b = 256 * in[i * 4 + 0] + in[i * 4 + 1];
; 3382 :     *a = 256 * in[i * 4 + 2] + in[i * 4 + 3];
; 3383 :   }
; 3384 :   else if(mode->colortype == LCT_RGBA)
; 3385 :   {
; 3386 :     *r = 256 * in[i * 8 + 0] + in[i * 8 + 1];
; 3387 :     *g = 256 * in[i * 8 + 2] + in[i * 8 + 3];
; 3388 :     *b = 256 * in[i * 8 + 4] + in[i * 8 + 5];
; 3389 :     *a = 256 * in[i * 8 + 6] + in[i * 8 + 7];
; 3390 :   }
; 3391 :   else return 85; /*error: this function only supports 16-bit input, not palettes*/
; 3392 : 
; 3393 :   return 0; /*no error*/
; 3394 : }
; 3395 : 
; 3396 : /*
; 3397 : converts from any color type to 24-bit or 32-bit (later maybe more supported). return value = LodePNG error code
; 3398 : the out buffer must have (w * h * bpp + 7) / 8 bytes, where bpp is the bits per pixel of the output color type
; 3399 : (lodepng_get_bpp) for < 8 bpp images, there may _not_ be padding bits at the end of scanlines.
; 3400 : */
; 3401 : unsigned lodepng_convert(unsigned char* out, const unsigned char* in,
; 3402 :                          LodePNGColorMode* mode_out, const LodePNGColorMode* mode_in,
; 3403 :                          unsigned w, unsigned h, unsigned fix_png)
; 3404 : {
; 3405 :   unsigned error = 0;
; 3406 :   size_t i;
; 3407 :   ColorTree tree;
; 3408 :   size_t numpixels = w * h;
; 3409 : 
; 3410 :   if(lodepng_color_mode_equal(mode_out, mode_in))
; 3411 :   {
; 3412 :     size_t numbytes = lodepng_get_raw_size(w, h, mode_in);
; 3413 :     for(i = 0; i < numbytes; i++) out[i] = in[i];
; 3414 :     return error;
; 3415 :   }
; 3416 : 
; 3417 :   if(mode_out->colortype == LCT_PALETTE)
; 3418 :   {
; 3419 :     size_t palsize = 1 << mode_out->bitdepth;
; 3420 :     if(mode_out->palettesize < palsize) palsize = mode_out->palettesize;
; 3421 :     color_tree_init(&tree);
; 3422 :     for(i = 0; i < palsize; i++)
; 3423 :     {
; 3424 :       unsigned char* p = &mode_out->palette[i * 4];
; 3425 :       color_tree_add(&tree, p[0], p[1], p[2], p[3], i);
; 3426 :     }
; 3427 :   }
; 3428 : 
; 3429 :   if(mode_in->bitdepth == 16 && mode_out->bitdepth == 16)
; 3430 :   {
; 3431 :     for(i = 0; i < numpixels; i++)
; 3432 :     {
; 3433 :       unsigned short r = 0, g = 0, b = 0, a = 0;
; 3434 :       error = getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode_in);
; 3435 :       if(error) break;
; 3436 :       error = rgba16ToPixel(out, i, mode_out, r, g, b, a);
; 3437 :       if(error) break;
; 3438 :     }
; 3439 :   }
; 3440 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGBA)
; 3441 :   {
; 3442 :     error = getPixelColorsRGBA8(out, numpixels, 1, in, mode_in, fix_png);
; 3443 :   }
; 3444 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGB)
; 3445 :   {
; 3446 :     error = getPixelColorsRGBA8(out, numpixels, 0, in, mode_in, fix_png);
; 3447 :   }
; 3448 :   else
; 3449 :   {
; 3450 :     unsigned char r = 0, g = 0, b = 0, a = 0;
; 3451 :     for(i = 0; i < numpixels; i++)
; 3452 :     {
; 3453 :       error = getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode_in, fix_png);
; 3454 :       if(error) break;
; 3455 :       error = rgba8ToPixel(out, i, mode_out, &tree, r, g, b, a);
; 3456 :       if(error) break;
; 3457 :     }
; 3458 :   }
; 3459 : 
; 3460 :   if(mode_out->colortype == LCT_PALETTE)
; 3461 :   {
; 3462 :     color_tree_cleanup(&tree);
; 3463 :   }
; 3464 : 
; 3465 :   return error;
; 3466 : }
; 3467 : 
; 3468 : #ifdef LODEPNG_COMPILE_ENCODER
; 3469 : 
; 3470 : typedef struct ColorProfile
; 3471 : {
; 3472 :   unsigned char sixteenbit; /*needs more than 8 bits per channel*/
; 3473 :   unsigned char sixteenbit_done;
; 3474 : 
; 3475 : 
; 3476 :   unsigned char colored; /*not greyscale*/
; 3477 :   unsigned char colored_done;
; 3478 : 
; 3479 :   unsigned char key; /*a color key is required, or more*/
; 3480 :   unsigned short key_r; /*these values are always in 16-bit bitdepth in the profile*/
; 3481 :   unsigned short key_g;
; 3482 :   unsigned short key_b;
; 3483 :   unsigned char alpha; /*alpha channel, or alpha palette, required*/
; 3484 :   unsigned char alpha_done;
; 3485 : 
; 3486 :   unsigned numcolors;
; 3487 :   ColorTree tree; /*for listing the counted colors, up to 256*/
; 3488 :   unsigned char* palette; /*size 1024. Remember up to the first 256 RGBA colors*/
; 3489 :   unsigned maxnumcolors; /*if more than that amount counted*/
; 3490 :   unsigned char numcolors_done;
; 3491 : 
; 3492 :   unsigned greybits; /*amount of bits required for greyscale (1, 2, 4, 8). Does not take 16 bit into account.*/
; 3493 :   unsigned char greybits_done;
; 3494 : 
; 3495 : } ColorProfile;
; 3496 : 
; 3497 : static void color_profile_init(ColorProfile* profile, const LodePNGColorMode* mode)
; 3498 : {
; 3499 :   profile->sixteenbit = 0;
; 3500 :   profile->sixteenbit_done = mode->bitdepth == 16 ? 0 : 1;
; 3501 : 
; 3502 :   profile->colored = 0;
; 3503 :   profile->colored_done = lodepng_is_greyscale_type(mode) ? 1 : 0;
; 3504 : 
; 3505 :   profile->key = 0;
; 3506 :   profile->alpha = 0;
; 3507 :   profile->alpha_done = lodepng_can_have_alpha(mode) ? 0 : 1;
; 3508 : 
; 3509 :   profile->numcolors = 0;
; 3510 :   color_tree_init(&profile->tree);
; 3511 :   profile->palette = (unsigned char*)lodepng_malloc(1024);
; 3512 :   profile->maxnumcolors = 257;
; 3513 :   if(lodepng_get_bpp(mode) <= 8)
; 3514 :   {
; 3515 :     int bpp = lodepng_get_bpp(mode);
; 3516 :     profile->maxnumcolors = bpp == 1 ? 2 : (bpp == 2 ? 4 : (bpp == 4 ? 16 : 256));
; 3517 :   }
; 3518 :   profile->numcolors_done = 0;
; 3519 : 
; 3520 :   profile->greybits = 1;
; 3521 :   profile->greybits_done = lodepng_get_bpp(mode) == 1 ? 1 : 0;
; 3522 : }
; 3523 : 
; 3524 : static void color_profile_cleanup(ColorProfile* profile)
; 3525 : {
; 3526 :   color_tree_cleanup(&profile->tree);
; 3527 :   lodepng_free(profile->palette);
; 3528 : }
; 3529 : 
; 3530 : /*function used for debug purposes with C++*/
; 3531 : /*void printColorProfile(ColorProfile* p)
; 3532 : {
; 3533 :   std::cout << "sixteenbit: " << (int)p->sixteenbit << std::endl;
; 3534 :   std::cout << "sixteenbit_done: " << (int)p->sixteenbit_done << std::endl;
; 3535 :   std::cout << "colored: " << (int)p->colored << std::endl;
; 3536 :   std::cout << "colored_done: " << (int)p->colored_done << std::endl;
; 3537 :   std::cout << "key: " << (int)p->key << std::endl;
; 3538 :   std::cout << "key_r: " << (int)p->key_r << std::endl;
; 3539 :   std::cout << "key_g: " << (int)p->key_g << std::endl;
; 3540 :   std::cout << "key_b: " << (int)p->key_b << std::endl;
; 3541 :   std::cout << "alpha: " << (int)p->alpha << std::endl;
; 3542 :   std::cout << "alpha_done: " << (int)p->alpha_done << std::endl;
; 3543 :   std::cout << "numcolors: " << (int)p->numcolors << std::endl;
; 3544 :   std::cout << "maxnumcolors: " << (int)p->maxnumcolors << std::endl;
; 3545 :   std::cout << "numcolors_done: " << (int)p->numcolors_done << std::endl;
; 3546 :   std::cout << "greybits: " << (int)p->greybits << std::endl;
; 3547 :   std::cout << "greybits_done: " << (int)p->greybits_done << std::endl;
; 3548 : }*/
; 3549 : 
; 3550 : /*Returns how many bits needed to represent given value (max 8 bit)*/
; 3551 : unsigned getValueRequiredBits(unsigned short value)
; 3552 : {
; 3553 :   if(value == 0 || value == 255) return 1;
; 3554 :   /*The scaling of 2-bit and 4-bit values uses multiples of 85 and 17*/
; 3555 :   if(value % 17 == 0) return value % 85 == 0 ? 2 : 4;
; 3556 :   return 8;
; 3557 : }
; 3558 : 
; 3559 : /*profile must already have been inited with mode.
; 3560 : It's ok to set some parameters of profile to done already.*/
; 3561 : static unsigned get_color_profile(ColorProfile* profile,
; 3562 :                                   const unsigned char* in,
; 3563 :                                   size_t numpixels /*must be full image size, for certain filesize based choices*/,
; 3564 :                                   const LodePNGColorMode* mode,
; 3565 :                                   unsigned fix_png)
; 3566 : {
; 3567 :   unsigned error = 0;
; 3568 :   size_t i;
; 3569 : 
; 3570 :   if(mode->bitdepth == 16)
; 3571 :   {
; 3572 :     for(i = 0; i < numpixels; i++)
; 3573 :     {
; 3574 :       unsigned short r, g, b, a;
; 3575 :       error = getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode);
; 3576 :       if(error) break;
; 3577 : 
; 3578 :       /*a color is considered good for 8-bit if the first byte and the second byte are equal,
; 3579 :         (so if it's divisible through 257), NOT necessarily if the second byte is 0*/
; 3580 :       if(!profile->sixteenbit_done
; 3581 :           && (((r & 255) != ((r >> 8) & 255))
; 3582 :            || ((g & 255) != ((g >> 8) & 255))
; 3583 :            || ((b & 255) != ((b >> 8) & 255))))
; 3584 :       {
; 3585 :         profile->sixteenbit = 1;
; 3586 :         profile->sixteenbit_done = 1;
; 3587 :         profile->greybits_done = 1; /*greybits is not applicable anymore at 16-bit*/
; 3588 :         profile->numcolors_done = 1; /*counting colors no longer useful, palette doesn't support 16-bit*/
; 3589 :       }
; 3590 : 
; 3591 :       if(!profile->colored_done && (r != g || r != b))
; 3592 :       {
; 3593 :         profile->colored = 1;
; 3594 :         profile->colored_done = 1;
; 3595 :         profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3596 :       }
; 3597 : 
; 3598 :       if(!profile->alpha_done && a != 65535)
; 3599 :       {
; 3600 :         /*only use color key if numpixels large enough to justify tRNS chunk size*/
; 3601 :         if(a == 0 && numpixels > 16 && !(profile->key && (r != profile->key_r || g != profile->key_g || b != profile->key_b)))
; 3602 :         {
; 3603 :           if(!profile->alpha && !profile->key)
; 3604 :           {
; 3605 :             profile->key = 1;
; 3606 :             profile->key_r = r;
; 3607 :             profile->key_g = g;
; 3608 :             profile->key_b = b;
; 3609 :           }
; 3610 :         }
; 3611 :         else
; 3612 :         {
; 3613 :           profile->alpha = 1;
; 3614 :           profile->alpha_done = 1;
; 3615 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3616 :         }
; 3617 :       }
; 3618 : 
; 3619 :       /* Color key cannot be used if an opaque pixel also has that RGB color. */
; 3620 :       if(!profile->alpha_done && a == 65535 && profile->key
; 3621 :           && r == profile->key_r && g == profile->key_g && b == profile->key_b)
; 3622 :       {
; 3623 :           profile->alpha = 1;
; 3624 :           profile->alpha_done = 1;
; 3625 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3626 :       }
; 3627 : 
; 3628 :       if(!profile->greybits_done)
; 3629 :       {
; 3630 :         /*assuming 8-bit r, this test does not care about 16-bit*/
; 3631 :         unsigned bits = getValueRequiredBits(r);
; 3632 :         if(bits > profile->greybits) profile->greybits = bits;
; 3633 :         if(profile->greybits >= 8) profile->greybits_done = 1;
; 3634 :       }
; 3635 : 
; 3636 :       if(!profile->numcolors_done)
; 3637 :       {
; 3638 :         /*assuming 8-bit rgba, this test does not care about 16-bit*/
; 3639 :         if(!color_tree_has(&profile->tree, (unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a))
; 3640 :         {
; 3641 :           color_tree_add(&profile->tree, (unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a,
; 3642 :             profile->numcolors);
; 3643 :           if(profile->numcolors < 256)
; 3644 :           {
; 3645 :             unsigned char* p = profile->palette;
; 3646 :             unsigned i = profile->numcolors;
; 3647 :             p[i * 4 + 0] = (unsigned char)r;
; 3648 :             p[i * 4 + 1] = (unsigned char)g;
; 3649 :             p[i * 4 + 2] = (unsigned char)b;
; 3650 :             p[i * 4 + 3] = (unsigned char)a;
; 3651 :           }
; 3652 :           profile->numcolors++;
; 3653 :           if(profile->numcolors >= profile->maxnumcolors) profile->numcolors_done = 1;
; 3654 :         }
; 3655 :       }
; 3656 : 
; 3657 :       if(profile->alpha_done && profile->numcolors_done
; 3658 :       && profile->colored_done && profile->sixteenbit_done && profile->greybits_done)
; 3659 :       {
; 3660 :         break;
; 3661 :       }
; 3662 :     };
; 3663 :   }
; 3664 :   else /* < 16-bit */
; 3665 :   {
; 3666 :     for(i = 0; i < numpixels; i++)
; 3667 :     {
; 3668 :       unsigned char r = 0, g = 0, b = 0, a = 0;
; 3669 :       error = getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode, fix_png);
; 3670 :       if(error) break;
; 3671 : 
; 3672 :       if(!profile->colored_done && (r != g || r != b))
; 3673 :       {
; 3674 :         profile->colored = 1;
; 3675 :         profile->colored_done = 1;
; 3676 :         profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3677 :       }
; 3678 : 
; 3679 :       if(!profile->alpha_done && a != 255)
; 3680 :       {
; 3681 :         if(a == 0 && !(profile->key && (r != profile->key_r || g != profile->key_g || b != profile->key_b)))
; 3682 :         {
; 3683 :           if(!profile->key)
; 3684 :           {
; 3685 :             profile->key = 1;
; 3686 :             profile->key_r = r;
; 3687 :             profile->key_g = g;
; 3688 :             profile->key_b = b;
; 3689 :           }
; 3690 :         }
; 3691 :         else
; 3692 :         {
; 3693 :           profile->alpha = 1;
; 3694 :           profile->alpha_done = 1;
; 3695 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3696 :         }
; 3697 :       }
; 3698 : 
; 3699 :       /* Color key cannot be used if an opaque pixel also has that RGB color. */
; 3700 :       if(!profile->alpha_done && a == 255 && profile->key
; 3701 :           && r == profile->key_r && g == profile->key_g && b == profile->key_b)
; 3702 :       {
; 3703 :           profile->alpha = 1;
; 3704 :           profile->alpha_done = 1;
; 3705 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3706 :       }
; 3707 : 
; 3708 :       if(!profile->greybits_done)
; 3709 :       {
; 3710 :         unsigned bits = getValueRequiredBits(r);
; 3711 :         if(bits > profile->greybits) profile->greybits = bits;
; 3712 :         if(profile->greybits >= 8) profile->greybits_done = 1;
; 3713 :       }
; 3714 : 
; 3715 :       if(!profile->numcolors_done)
; 3716 :       {
; 3717 :         if(!color_tree_has(&profile->tree, r, g, b, a))
; 3718 :         {
; 3719 : 
; 3720 :           color_tree_add(&profile->tree, r, g, b, a, profile->numcolors);
; 3721 :           if(profile->numcolors < 256)
; 3722 :           {
; 3723 :             unsigned char* p = profile->palette;
; 3724 :             unsigned i = profile->numcolors;
; 3725 :             p[i * 4 + 0] = r;
; 3726 :             p[i * 4 + 1] = g;
; 3727 :             p[i * 4 + 2] = b;
; 3728 :             p[i * 4 + 3] = a;
; 3729 :           }
; 3730 :           profile->numcolors++;
; 3731 :           if(profile->numcolors >= profile->maxnumcolors) profile->numcolors_done = 1;
; 3732 :         }
; 3733 :       }
; 3734 : 
; 3735 :       if(profile->alpha_done && profile->numcolors_done && profile->colored_done && profile->greybits_done)
; 3736 :       {
; 3737 :         break;
; 3738 :       }
; 3739 :     };
; 3740 :   }
; 3741 : 
; 3742 :   /*make the profile's key always 16-bit for consistency*/
; 3743 :   if(mode->bitdepth < 16)
; 3744 :   {
; 3745 :     /*repeat each byte twice*/
; 3746 :     profile->key_r *= 257;
; 3747 :     profile->key_g *= 257;
; 3748 :     profile->key_b *= 257;
; 3749 :   }
; 3750 : 
; 3751 :   return error;
; 3752 : }
; 3753 : 
; 3754 : static void setColorKeyFrom16bit(LodePNGColorMode* mode_out, unsigned r, unsigned g, unsigned b, unsigned bitdepth)
; 3755 : {
; 3756 :   unsigned mask = (1 << bitdepth) - 1;
; 3757 :   mode_out->key_defined = 1;
; 3758 :   mode_out->key_r = r & mask;
; 3759 :   mode_out->key_g = g & mask;
; 3760 :   mode_out->key_b = b & mask;
; 3761 : }
; 3762 : 
; 3763 : /*updates values of mode with a potentially smaller color model. mode_out should
; 3764 : contain the user chosen color model, but will be overwritten with the new chosen one.*/
; 3765 : unsigned lodepng_auto_choose_color(LodePNGColorMode* mode_out,
; 3766 :                                    const unsigned char* image, unsigned w, unsigned h,
; 3767 :                                    const LodePNGColorMode* mode_in,
; 3768 :                                    LodePNGAutoConvert auto_convert)
; 3769 : {
; 3770 :   ColorProfile profile;
; 3771 :   unsigned error = 0;
; 3772 :   int no_nibbles = auto_convert == LAC_AUTO_NO_NIBBLES || auto_convert == LAC_AUTO_NO_NIBBLES_NO_PALETTE;
; 3773 :   int no_palette = auto_convert == LAC_AUTO_NO_PALETTE || auto_convert == LAC_AUTO_NO_NIBBLES_NO_PALETTE;
; 3774 : 
; 3775 :   if(auto_convert == LAC_ALPHA)
; 3776 :   {
; 3777 :     if(mode_out->colortype != LCT_RGBA && mode_out->colortype != LCT_GREY_ALPHA) return 0;
; 3778 :   }
; 3779 : 
; 3780 :   color_profile_init(&profile, mode_in);
; 3781 :   if(auto_convert == LAC_ALPHA)
; 3782 :   {
; 3783 :     profile.colored_done = 1;
; 3784 :     profile.greybits_done = 1;
; 3785 :     profile.numcolors_done = 1;
; 3786 :     profile.sixteenbit_done = 1;
; 3787 :   }
; 3788 :   error = get_color_profile(&profile, image, w * h, mode_in, 0 /*fix_png*/);
; 3789 :   if(!error && auto_convert == LAC_ALPHA)
; 3790 :   {
; 3791 :     if(!profile.alpha)
; 3792 :     {
; 3793 :       mode_out->colortype = (mode_out->colortype == LCT_RGBA ? LCT_RGB : LCT_GREY);
; 3794 :       if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3795 :     }
; 3796 :   }
; 3797 :   else if(!error && auto_convert != LAC_ALPHA)
; 3798 :   {
; 3799 :     mode_out->key_defined = 0;
; 3800 : 
; 3801 :     if(profile.sixteenbit)
; 3802 :     {
; 3803 :       mode_out->bitdepth = 16;
; 3804 :       if(profile.alpha)
; 3805 :       {
; 3806 :         mode_out->colortype = profile.colored ? LCT_RGBA : LCT_GREY_ALPHA;
; 3807 :       }
; 3808 :       else
; 3809 :       {
; 3810 :         mode_out->colortype = profile.colored ? LCT_RGB : LCT_GREY;
; 3811 :         if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3812 :       }
; 3813 :     }
; 3814 :     else /*less than 16 bits per channel*/
; 3815 :     {
; 3816 :       /*don't add palette overhead if image hasn't got a lot of pixels*/
; 3817 :       unsigned n = profile.numcolors;
; 3818 :       int palette_ok = !no_palette && n <= 256 && (n * 2 < w * h);
; 3819 :       unsigned palettebits = n <= 2 ? 1 : (n <= 4 ? 2 : (n <= 16 ? 4 : 8));
; 3820 :       int grey_ok = !profile.colored && !profile.alpha; /*grey without alpha, with potentially low bits*/
; 3821 :       if(palette_ok || grey_ok)
; 3822 :       {
; 3823 :         if(!palette_ok || (grey_ok && profile.greybits <= palettebits))
; 3824 :         {
; 3825 :           unsigned grey = profile.key_r;
; 3826 :           mode_out->colortype = LCT_GREY;
; 3827 :           mode_out->bitdepth = profile.greybits;
; 3828 :           if(profile.key) setColorKeyFrom16bit(mode_out, grey, grey, grey, mode_out->bitdepth);
; 3829 :         }
; 3830 :         else
; 3831 :         {
; 3832 :           /*fill in the palette*/
; 3833 :           unsigned i;
; 3834 :           unsigned char* p = profile.palette;
; 3835 :           /*remove potential earlier palette*/
; 3836 :           lodepng_palette_clear(mode_out);
; 3837 :           for(i = 0; i < profile.numcolors; i++)
; 3838 :           {
; 3839 :             error = lodepng_palette_add(mode_out, p[i * 4 + 0], p[i * 4 + 1], p[i * 4 + 2], p[i * 4 + 3]);
; 3840 :             if(error) break;
; 3841 :           }
; 3842 : 
; 3843 :           mode_out->colortype = LCT_PALETTE;
; 3844 :           mode_out->bitdepth = palettebits;
; 3845 :         }
; 3846 :       }
; 3847 :       else /*8-bit per channel*/
; 3848 :       {
; 3849 :         mode_out->bitdepth = 8;
; 3850 :         if(profile.alpha)
; 3851 :         {
; 3852 :           mode_out->colortype = profile.colored ? LCT_RGBA : LCT_GREY_ALPHA;
; 3853 :         }
; 3854 :         else
; 3855 :         {
; 3856 :           mode_out->colortype = profile.colored ? LCT_RGB : LCT_GREY /*LCT_GREY normally won't occur, already done earlier*/;
; 3857 :           if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3858 :         }
; 3859 :       }
; 3860 :     }
; 3861 :   }
; 3862 : 
; 3863 :   color_profile_cleanup(&profile);
; 3864 : 
; 3865 :   if(mode_out->colortype == LCT_PALETTE && mode_in->palettesize == mode_out->palettesize)
; 3866 :   {
; 3867 :     /*In this case keep the palette order of the input, so that the user can choose an optimal one*/
; 3868 :     size_t i;
; 3869 :     for(i = 0; i < mode_in->palettesize * 4; i++)
; 3870 :     {
; 3871 :       mode_out->palette[i] = mode_in->palette[i];
; 3872 :     }
; 3873 :   }
; 3874 : 
; 3875 :   if(no_nibbles && mode_out->bitdepth < 8)
; 3876 :   {
; 3877 :     /*palette can keep its small amount of colors, as long as no indices use it*/
; 3878 :     mode_out->bitdepth = 8;
; 3879 :   }
; 3880 : 
; 3881 :   return error;
; 3882 : }
; 3883 : 
; 3884 : #endif /* #ifdef LODEPNG_COMPILE_ENCODER */
; 3885 : 
; 3886 : /*
; 3887 : Paeth predicter, used by PNG filter type 4
; 3888 : The parameters are of type short, but should come from unsigned chars, the shorts
; 3889 : are only needed to make the paeth calculation correct.
; 3890 : */
; 3891 : static unsigned char paethPredictor(short a, short b, short c)
; 3892 : {
; 3893 :   short pa = abs(b - c);
; 3894 :   short pb = abs(a - c);
; 3895 :   short pc = abs(a + b - c - c);
; 3896 : 
; 3897 :   if(pc < pa && pc < pb) return (unsigned char)c;
; 3898 :   else if(pb < pa) return (unsigned char)b;
; 3899 :   else return (unsigned char)a;
; 3900 : }
; 3901 : 
; 3902 : /*shared values used by multiple Adam7 related functions*/
; 3903 : 
; 3904 : static const unsigned ADAM7_IX[7] = { 0, 4, 0, 2, 0, 1, 0 }; /*x start values*/
; 3905 : static const unsigned ADAM7_IY[7] = { 0, 0, 4, 0, 2, 0, 1 }; /*y start values*/
; 3906 : static const unsigned ADAM7_DX[7] = { 8, 8, 4, 4, 2, 2, 1 }; /*x delta values*/
; 3907 : static const unsigned ADAM7_DY[7] = { 8, 8, 8, 4, 4, 2, 2 }; /*y delta values*/
; 3908 : 
; 3909 : /*
; 3910 : Outputs various dimensions and positions in the image related to the Adam7 reduced images.
; 3911 : passw: output containing the width of the 7 passes
; 3912 : passh: output containing the height of the 7 passes
; 3913 : filter_passstart: output containing the index of the start and end of each
; 3914 :  reduced image with filter bytes
; 3915 : padded_passstart output containing the index of the start and end of each
; 3916 :  reduced image when without filter bytes but with padded scanlines
; 3917 : passstart: output containing the index of the start and end of each reduced
; 3918 :  image without padding between scanlines, but still padding between the images
; 3919 : w, h: width and height of non-interlaced image
; 3920 : bpp: bits per pixel
; 3921 : "padded" is only relevant if bpp is less than 8 and a scanline or image does not
; 3922 :  end at a full byte
; 3923 : */
; 3924 : static void Adam7_getpassvalues(unsigned passw[7], unsigned passh[7], size_t filter_passstart[8],
; 3925 :                                 size_t padded_passstart[8], size_t passstart[8], unsigned w, unsigned h, unsigned bpp)
; 3926 : {
; 3927 :   /*the passstart values have 8 values: the 8th one indicates the byte after the end of the 7th (= last) pass*/
; 3928 :   unsigned i;
; 3929 : 
; 3930 :   /*calculate width and height in pixels of each pass*/
; 3931 :   for(i = 0; i < 7; i++)
; 3932 :   {
; 3933 :     passw[i] = (w + ADAM7_DX[i] - ADAM7_IX[i] - 1) / ADAM7_DX[i];
; 3934 :     passh[i] = (h + ADAM7_DY[i] - ADAM7_IY[i] - 1) / ADAM7_DY[i];
; 3935 :     if(passw[i] == 0) passh[i] = 0;
; 3936 :     if(passh[i] == 0) passw[i] = 0;
; 3937 :   }
; 3938 : 
; 3939 :   filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
; 3940 :   for(i = 0; i < 7; i++)
; 3941 :   {
; 3942 :     /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
; 3943 :     filter_passstart[i + 1] = filter_passstart[i]
; 3944 :                             + ((passw[i] && passh[i]) ? passh[i] * (1 + (passw[i] * bpp + 7) / 8) : 0);
; 3945 :     /*bits padded if needed to fill full byte at end of each scanline*/
; 3946 :     padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7) / 8);
; 3947 :     /*only padded at end of reduced image*/
; 3948 :     passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7) / 8;
; 3949 :   }
; 3950 : }
; 3951 : 
; 3952 : #ifdef LODEPNG_COMPILE_DECODER
; 3953 : 
; 3954 : /* ////////////////////////////////////////////////////////////////////////// */
; 3955 : /* / PNG Decoder                                                            / */
; 3956 : /* ////////////////////////////////////////////////////////////////////////// */
; 3957 : 
; 3958 : /*read the information from the header and store it in the LodePNGInfo. return value is error*/
; 3959 : unsigned lodepng_inspect(unsigned* w, unsigned* h, LodePNGState* state,
; 3960 :                          const unsigned char* in, size_t insize)
; 3961 : {
; 3962 :   LodePNGInfo* info = &state->info_png;
; 3963 :   if(insize == 0 || in == 0)
; 3964 :   {
; 3965 :     CERROR_RETURN_ERROR(state->error, 48); /*error: the given data is empty*/
; 3966 :   }
; 3967 :   if(insize < 29)
; 3968 :   {
; 3969 :     CERROR_RETURN_ERROR(state->error, 27); /*error: the data length is smaller than the length of a PNG header*/
; 3970 :   }
; 3971 : 
; 3972 :   /*when decoding a new PNG image, make sure all parameters created after previous decoding are reset*/
; 3973 :   lodepng_info_cleanup(info);
; 3974 :   lodepng_info_init(info);
; 3975 : 
; 3976 :   if(in[0] != 137 || in[1] != 80 || in[2] != 78 || in[3] != 71
; 3977 :      || in[4] != 13 || in[5] != 10 || in[6] != 26 || in[7] != 10)
; 3978 :   {
; 3979 :     CERROR_RETURN_ERROR(state->error, 28); /*error: the first 8 bytes are not the correct PNG signature*/
; 3980 :   }
; 3981 :   if(in[12] != 'I' || in[13] != 'H' || in[14] != 'D' || in[15] != 'R')
; 3982 :   {
; 3983 :     CERROR_RETURN_ERROR(state->error, 29); /*error: it doesn't start with a IHDR chunk!*/
; 3984 :   }
; 3985 : 
; 3986 :   /*read the values given in the header*/
; 3987 :   *w = lodepng_read32bitInt(&in[16]);
; 3988 :   *h = lodepng_read32bitInt(&in[20]);
; 3989 :   info->color.bitdepth = in[24];
; 3990 :   info->color.colortype = (LodePNGColorType)in[25];
; 3991 :   info->compression_method = in[26];
; 3992 :   info->filter_method = in[27];
; 3993 :   info->interlace_method = in[28];
; 3994 : 
; 3995 :   if(!state->decoder.ignore_crc)
; 3996 :   {
; 3997 :     unsigned CRC = lodepng_read32bitInt(&in[29]);
; 3998 :     unsigned checksum = lodepng_crc32(&in[12], 17);
; 3999 :     if(CRC != checksum)
; 4000 :     {
; 4001 :       CERROR_RETURN_ERROR(state->error, 57); /*invalid CRC*/
; 4002 :     }
; 4003 :   }
; 4004 : 
; 4005 :   /*error: only compression method 0 is allowed in the specification*/
; 4006 :   if(info->compression_method != 0) CERROR_RETURN_ERROR(state->error, 32);
; 4007 :   /*error: only filter method 0 is allowed in the specification*/
; 4008 :   if(info->filter_method != 0) CERROR_RETURN_ERROR(state->error, 33);
; 4009 :   /*error: only interlace methods 0 and 1 exist in the specification*/
; 4010 :   if(info->interlace_method > 1) CERROR_RETURN_ERROR(state->error, 34);
; 4011 : 
; 4012 :   state->error = checkColorValidity(info->color.colortype, info->color.bitdepth);
; 4013 :   return state->error;
; 4014 : }
; 4015 : 
; 4016 : static unsigned unfilterScanline(unsigned char* recon, const unsigned char* scanline, const unsigned char* precon,
; 4017 :                                  size_t bytewidth, unsigned char filterType, size_t length)
; 4018 : {
; 4019 :   /*
; 4020 :   For PNG filter method 0
; 4021 :   unfilter a PNG image scanline by scanline. when the pixels are smaller than 1 byte,
; 4022 :   the filter works byte per byte (bytewidth = 1)
; 4023 :   precon is the previous unfiltered scanline, recon the result, scanline the current one
; 4024 :   the incoming scanlines do NOT include the filtertype byte, that one is given in the parameter filterType instead
; 4025 :   recon and scanline MAY be the same memory address! precon must be disjoint.
; 4026 :   */
; 4027 : 
; 4028 :   size_t i;
; 4029 :   switch(filterType)
; 4030 :   {
; 4031 :     case 0:
; 4032 :       for(i = 0; i < length; i++) recon[i] = scanline[i];
; 4033 :       break;
; 4034 :     case 1:
; 4035 :       for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];
; 4036 :       for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth];
; 4037 :       break;
; 4038 :     case 2:
; 4039 :       if(precon)
; 4040 :       {
; 4041 :         for(i = 0; i < length; i++) recon[i] = scanline[i] + precon[i];
; 4042 :       }
; 4043 :       else
; 4044 :       {
; 4045 :         for(i = 0; i < length; i++) recon[i] = scanline[i];
; 4046 :       }
; 4047 :       break;
; 4048 :     case 3:
; 4049 :       if(precon)
; 4050 :       {
; 4051 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i] + precon[i] / 2;
; 4052 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + ((recon[i - bytewidth] + precon[i]) / 2);
; 4053 :       }
; 4054 :       else
; 4055 :       {
; 4056 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];
; 4057 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth] / 2;
; 4058 :       }
; 4059 :       break;
; 4060 :     case 4:
; 4061 :       if(precon)
; 4062 :       {
; 4063 :         for(i = 0; i < bytewidth; i++)
; 4064 :         {
; 4065 :           recon[i] = (scanline[i] + precon[i]); /*paethPredictor(0, precon[i], 0) is always precon[i]*/
; 4066 :         }
; 4067 :         for(i = bytewidth; i < length; i++)
; 4068 :         {
; 4069 :           recon[i] = (scanline[i] + paethPredictor(recon[i - bytewidth], precon[i], precon[i - bytewidth]));
; 4070 :         }
; 4071 :       }
; 4072 :       else
; 4073 :       {
; 4074 :         for(i = 0; i < bytewidth; i++)
; 4075 :         {
; 4076 :           recon[i] = scanline[i];
; 4077 :         }
; 4078 :         for(i = bytewidth; i < length; i++)
; 4079 :         {
; 4080 :           /*paethPredictor(recon[i - bytewidth], 0, 0) is always recon[i - bytewidth]*/
; 4081 :           recon[i] = (scanline[i] + recon[i - bytewidth]);
; 4082 :         }
; 4083 :       }
; 4084 :       break;
; 4085 :     default: return 36; /*error: unexisting filter type given*/
; 4086 :   }
; 4087 :   return 0;
; 4088 : }
; 4089 : 
; 4090 : static unsigned unfilter(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
; 4091 : {
; 4092 :   /*
; 4093 :   For PNG filter method 0
; 4094 :   this function unfilters a single image (e.g. without interlacing this is called once, with Adam7 seven times)
; 4095 :   out must have enough bytes allocated already, in must have the scanlines + 1 filtertype byte per scanline
; 4096 :   w and h are image dimensions or dimensions of reduced image, bpp is bits per pixel
; 4097 :   in and out are allowed to be the same memory address (but aren't the same size since in has the extra filter bytes)
; 4098 :   */
; 4099 : 
; 4100 :   unsigned y;
; 4101 :   unsigned char* prevline = 0;
; 4102 : 
; 4103 :   /*bytewidth is used for filtering, is 1 when bpp < 8, number of bytes per pixel otherwise*/
; 4104 :   size_t bytewidth = (bpp + 7) / 8;
; 4105 :   size_t linebytes = (w * bpp + 7) / 8;
; 4106 : 
; 4107 :   for(y = 0; y < h; y++)
; 4108 :   {
; 4109 :     size_t outindex = linebytes * y;
; 4110 :     size_t inindex = (1 + linebytes) * y; /*the extra filterbyte added to each row*/
; 4111 :     unsigned char filterType = in[inindex];
; 4112 : 
; 4113 :     CERROR_TRY_RETURN(unfilterScanline(&out[outindex], &in[inindex + 1], prevline, bytewidth, filterType, linebytes));
; 4114 : 
; 4115 :     prevline = &out[outindex];
; 4116 :   }
; 4117 : 
; 4118 :   return 0;
; 4119 : }
; 4120 : 
; 4121 : /*
; 4122 : in: Adam7 interlaced image, with no padding bits between scanlines, but between
; 4123 :  reduced images so that each reduced image starts at a byte.
; 4124 : out: the same pixels, but re-ordered so that they're now a non-interlaced image with size w*h
; 4125 : bpp: bits per pixel
; 4126 : out has the following size in bits: w * h * bpp.
; 4127 : in is possibly bigger due to padding bits between reduced images.
; 4128 : out must be big enough AND must be 0 everywhere if bpp < 8 in the current implementation
; 4129 : (because that's likely a little bit faster)
; 4130 : NOTE: comments about padding bits are only relevant if bpp < 8
; 4131 : */
; 4132 : static void Adam7_deinterlace(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
; 4133 : {
; 4134 :   unsigned passw[7], passh[7];
; 4135 :   size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4136 :   unsigned i;
; 4137 : 
; 4138 :   Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 4139 : 
; 4140 :   if(bpp >= 8)
; 4141 :   {
; 4142 :     for(i = 0; i < 7; i++)
; 4143 :     {
; 4144 :       unsigned x, y, b;
; 4145 :       size_t bytewidth = bpp / 8;
; 4146 :       for(y = 0; y < passh[i]; y++)
; 4147 :       for(x = 0; x < passw[i]; x++)
; 4148 :       {
; 4149 :         size_t pixelinstart = passstart[i] + (y * passw[i] + x) * bytewidth;
; 4150 :         size_t pixeloutstart = ((ADAM7_IY[i] + y * ADAM7_DY[i]) * w + ADAM7_IX[i] + x * ADAM7_DX[i]) * bytewidth;
; 4151 :         for(b = 0; b < bytewidth; b++)
; 4152 :         {
; 4153 :           out[pixeloutstart + b] = in[pixelinstart + b];
; 4154 :         }
; 4155 :       }
; 4156 :     }
; 4157 :   }
; 4158 :   else /*bpp < 8: Adam7 with pixels < 8 bit is a bit trickier: with bit pointers*/
; 4159 :   {
; 4160 :     for(i = 0; i < 7; i++)
; 4161 :     {
; 4162 :       unsigned x, y, b;
; 4163 :       unsigned ilinebits = bpp * passw[i];
; 4164 :       unsigned olinebits = bpp * w;
; 4165 :       size_t obp, ibp; /*bit pointers (for out and in buffer)*/
; 4166 :       for(y = 0; y < passh[i]; y++)
; 4167 :       for(x = 0; x < passw[i]; x++)
; 4168 :       {
; 4169 :         ibp = (8 * passstart[i]) + (y * ilinebits + x * bpp);
; 4170 :         obp = (ADAM7_IY[i] + y * ADAM7_DY[i]) * olinebits + (ADAM7_IX[i] + x * ADAM7_DX[i]) * bpp;
; 4171 :         for(b = 0; b < bpp; b++)
; 4172 :         {
; 4173 :           unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4174 :           /*note that this function assumes the out buffer is completely 0, use setBitOfReversedStream otherwise*/
; 4175 :           setBitOfReversedStream0(&obp, out, bit);
; 4176 :         }
; 4177 :       }
; 4178 :     }
; 4179 :   }
; 4180 : }
; 4181 : 
; 4182 : static void removePaddingBits(unsigned char* out, const unsigned char* in,
; 4183 :                               size_t olinebits, size_t ilinebits, unsigned h)
; 4184 : {
; 4185 :   /*
; 4186 :   After filtering there are still padding bits if scanlines have non multiple of 8 bit amounts. They need
; 4187 :   to be removed (except at last scanline of (Adam7-reduced) image) before working with pure image buffers
; 4188 :   for the Adam7 code, the color convert code and the output to the user.
; 4189 :   in and out are allowed to be the same buffer, in may also be higher but still overlapping; in must
; 4190 :   have >= ilinebits*h bits, out must have >= olinebits*h bits, olinebits must be <= ilinebits
; 4191 :   also used to move bits after earlier such operations happened, e.g. in a sequence of reduced images from Adam7
; 4192 :   only useful if (ilinebits - olinebits) is a value in the range 1..7
; 4193 :   */
; 4194 :   unsigned y;
; 4195 :   size_t diff = ilinebits - olinebits;
; 4196 :   size_t ibp = 0, obp = 0; /*input and output bit pointers*/
; 4197 :   for(y = 0; y < h; y++)
; 4198 :   {
; 4199 :     size_t x;
; 4200 :     for(x = 0; x < olinebits; x++)
; 4201 :     {
; 4202 :       unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4203 :       setBitOfReversedStream(&obp, out, bit);
; 4204 :     }
; 4205 :     ibp += diff;
; 4206 :   }
; 4207 : }
; 4208 : 
; 4209 : /*out must be buffer big enough to contain full image, and in must contain the full decompressed data from
; 4210 : the IDAT chunks (with filter index bytes and possible padding bits)
; 4211 : return value is error*/
; 4212 : static unsigned postProcessScanlines(unsigned char* out, unsigned char* in,
; 4213 :                                      unsigned w, unsigned h, const LodePNGInfo* info_png)
; 4214 : {
; 4215 :   /*
; 4216 :   This function converts the filtered-padded-interlaced data into pure 2D image buffer with the PNG's colortype.
; 4217 :   Steps:
; 4218 :   *) if no Adam7: 1) unfilter 2) remove padding bits (= posible extra bits per scanline if bpp < 8)
; 4219 :   *) if adam7: 1) 7x unfilter 2) 7x remove padding bits 3) Adam7_deinterlace
; 4220 :   NOTE: the in buffer will be overwritten with intermediate data!
; 4221 :   */
; 4222 :   unsigned bpp = lodepng_get_bpp(&info_png->color);
; 4223 :   if(bpp == 0) return 31; /*error: invalid colortype*/
; 4224 : 
; 4225 :   if(info_png->interlace_method == 0)
; 4226 :   {
; 4227 :     if(bpp < 8 && w * bpp != ((w * bpp + 7) / 8) * 8)
; 4228 :     {
; 4229 :       CERROR_TRY_RETURN(unfilter(in, in, w, h, bpp));
; 4230 :       removePaddingBits(out, in, w * bpp, ((w * bpp + 7) / 8) * 8, h);
; 4231 :     }
; 4232 :     /*we can immediatly filter into the out buffer, no other steps needed*/
; 4233 :     else CERROR_TRY_RETURN(unfilter(out, in, w, h, bpp));
; 4234 :   }
; 4235 :   else /*interlace_method is 1 (Adam7)*/
; 4236 :   {
; 4237 :     unsigned passw[7], passh[7]; size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4238 :     unsigned i;
; 4239 : 
; 4240 :     Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 4241 : 
; 4242 :     for(i = 0; i < 7; i++)
; 4243 :     {
; 4244 :       CERROR_TRY_RETURN(unfilter(&in[padded_passstart[i]], &in[filter_passstart[i]], passw[i], passh[i], bpp));
; 4245 :       /*TODO: possible efficiency improvement: if in this reduced image the bits fit nicely in 1 scanline,
; 4246 :       move bytes instead of bits or move not at all*/
; 4247 :       if(bpp < 8)
; 4248 :       {
; 4249 :         /*remove padding bits in scanlines; after this there still may be padding
; 4250 :         bits between the different reduced images: each reduced image still starts nicely at a byte*/
; 4251 :         removePaddingBits(&in[passstart[i]], &in[padded_passstart[i]], passw[i] * bpp,
; 4252 :                           ((passw[i] * bpp + 7) / 8) * 8, passh[i]);
; 4253 :       }
; 4254 :     }
; 4255 : 
; 4256 :     Adam7_deinterlace(out, in, w, h, bpp);
; 4257 :   }
; 4258 : 
; 4259 :   return 0;
; 4260 : }
; 4261 : 
; 4262 : static unsigned readChunk_PLTE(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
; 4263 : {
; 4264 :   unsigned pos = 0, i;
; 4265 :   if(color->palette) lodepng_free(color->palette);
; 4266 :   color->palettesize = chunkLength / 3;
; 4267 :   color->palette = (unsigned char*)lodepng_malloc(4 * color->palettesize);
; 4268 :   if(!color->palette && color->palettesize)
; 4269 :   {
; 4270 :     color->palettesize = 0;
; 4271 :     return 83; /*alloc fail*/
; 4272 :   }
; 4273 :   if(color->palettesize > 256) return 38; /*error: palette too big*/
; 4274 : 
; 4275 :   for(i = 0; i < color->palettesize; i++)
; 4276 :   {
; 4277 :     color->palette[4 * i + 0] = data[pos++]; /*R*/
; 4278 :     color->palette[4 * i + 1] = data[pos++]; /*G*/
; 4279 :     color->palette[4 * i + 2] = data[pos++]; /*B*/
; 4280 :     color->palette[4 * i + 3] = 255; /*alpha*/
; 4281 :   }
; 4282 : 
; 4283 :   return 0; /* OK */
; 4284 : }
; 4285 : 
; 4286 : static unsigned readChunk_tRNS(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
; 4287 : {
; 4288 :   unsigned i;
; 4289 :   if(color->colortype == LCT_PALETTE)
; 4290 :   {
; 4291 :     /*error: more alpha values given than there are palette entries*/
; 4292 :     if(chunkLength > color->palettesize) return 38;
; 4293 : 
; 4294 :     for(i = 0; i < chunkLength; i++) color->palette[4 * i + 3] = data[i];
; 4295 :   }
; 4296 :   else if(color->colortype == LCT_GREY)
; 4297 :   {
; 4298 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4299 :     if(chunkLength != 2) return 30;
; 4300 : 
; 4301 :     color->key_defined = 1;
; 4302 :     color->key_r = color->key_g = color->key_b = 256 * data[0] + data[1];
; 4303 :   }
; 4304 :   else if(color->colortype == LCT_RGB)
; 4305 :   {
; 4306 :     /*error: this chunk must be 6 bytes for RGB image*/
; 4307 :     if(chunkLength != 6) return 41;
; 4308 : 
; 4309 :     color->key_defined = 1;
; 4310 :     color->key_r = 256 * data[0] + data[1];
; 4311 :     color->key_g = 256 * data[2] + data[3];
; 4312 :     color->key_b = 256 * data[4] + data[5];
; 4313 :   }
; 4314 :   else return 42; /*error: tRNS chunk not allowed for other color models*/
; 4315 : 
; 4316 :   return 0; /* OK */
; 4317 : }
; 4318 : 
; 4319 : 
; 4320 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4321 : /*background color chunk (bKGD)*/
; 4322 : static unsigned readChunk_bKGD(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4323 : {
; 4324 :   if(info->color.colortype == LCT_PALETTE)
; 4325 :   {
; 4326 :     /*error: this chunk must be 1 byte for indexed color image*/
; 4327 :     if(chunkLength != 1) return 43;
; 4328 : 
; 4329 :     info->background_defined = 1;
; 4330 :     info->background_r = info->background_g = info->background_b = data[0];
; 4331 :   }
; 4332 :   else if(info->color.colortype == LCT_GREY || info->color.colortype == LCT_GREY_ALPHA)
; 4333 :   {
; 4334 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4335 :     if(chunkLength != 2) return 44;
; 4336 : 
; 4337 :     info->background_defined = 1;
; 4338 :     info->background_r = info->background_g = info->background_b
; 4339 :                                  = 256 * data[0] + data[1];
; 4340 :   }
; 4341 :   else if(info->color.colortype == LCT_RGB || info->color.colortype == LCT_RGBA)
; 4342 :   {
; 4343 :     /*error: this chunk must be 6 bytes for greyscale image*/
; 4344 :     if(chunkLength != 6) return 45;
; 4345 : 
; 4346 :     info->background_defined = 1;
; 4347 :     info->background_r = 256 * data[0] + data[1];
; 4348 :     info->background_g = 256 * data[2] + data[3];
; 4349 :     info->background_b = 256 * data[4] + data[5];
; 4350 :   }
; 4351 : 
; 4352 :   return 0; /* OK */
; 4353 : }
; 4354 : 
; 4355 : /*text chunk (tEXt)*/
; 4356 : static unsigned readChunk_tEXt(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4357 : {
; 4358 :   unsigned error = 0;
; 4359 :   char *key = 0, *str = 0;
; 4360 :   unsigned i;
; 4361 : 
; 4362 :   while(!error) /*not really a while loop, only used to break on error*/
; 4363 :   {
; 4364 :     unsigned length, string2_begin;
; 4365 : 
; 4366 :     length = 0;
; 4367 :     while(length < chunkLength && data[length] != 0) length++;
; 4368 :     /*even though it's not allowed by the standard, no error is thrown if
; 4369 :     there's no null termination char, if the text is empty*/
; 4370 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4371 : 
; 4372 :     key = (char*)lodepng_malloc(length + 1);
; 4373 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4374 : 
; 4375 :     key[length] = 0;
; 4376 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4377 : 
; 4378 :     string2_begin = length + 1; /*skip keyword null terminator*/
; 4379 : 
; 4380 :     length = chunkLength < string2_begin ? 0 : chunkLength - string2_begin;
; 4381 :     str = (char*)lodepng_malloc(length + 1);
; 4382 :     if(!str) CERROR_BREAK(error, 83); /*alloc fail*/
; 4383 : 
; 4384 :     str[length] = 0;
; 4385 :     for(i = 0; i < length; i++) str[i] = data[string2_begin + i];
; 4386 : 
; 4387 :     error = lodepng_add_text(info, key, str);
; 4388 : 
; 4389 :     break;
; 4390 :   }
; 4391 : 
; 4392 :   lodepng_free(key);
; 4393 :   lodepng_free(str);
; 4394 : 
; 4395 :   return error;
; 4396 : }
; 4397 : 
; 4398 : /*compressed text chunk (zTXt)*/
; 4399 : static unsigned readChunk_zTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
; 4400 :                                const unsigned char* data, size_t chunkLength)
; 4401 : {
; 4402 :   unsigned error = 0;
; 4403 :   unsigned i;
; 4404 : 
; 4405 :   unsigned length, string2_begin;
; 4406 :   char *key = 0;
; 4407 :   ucvector decoded;
; 4408 : 
; 4409 :   ucvector_init(&decoded);
; 4410 : 
; 4411 :   while(!error) /*not really a while loop, only used to break on error*/
; 4412 :   {
; 4413 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;
; 4414 :     if(length + 2 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
; 4415 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4416 : 
; 4417 :     key = (char*)lodepng_malloc(length + 1);
; 4418 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4419 : 
; 4420 :     key[length] = 0;
; 4421 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4422 : 
; 4423 :     if(data[length + 1] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
; 4424 : 
; 4425 :     string2_begin = length + 2;
; 4426 :     if(string2_begin > chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
; 4427 : 
; 4428 :     length = chunkLength - string2_begin;
; 4429 :     /*will fail if zlib error, e.g. if length is too small*/
; 4430 :     error = zlib_decompress(&decoded.data, &decoded.size,
; 4431 :                             (unsigned char*)(&data[string2_begin]),
; 4432 :                             length, zlibsettings);
; 4433 :     if(error) break;
; 4434 :     ucvector_push_back(&decoded, 0);
; 4435 : 
; 4436 :     error = lodepng_add_text(info, key, (char*)decoded.data);
; 4437 : 
; 4438 :     break;
; 4439 :   }
; 4440 : 
; 4441 :   lodepng_free(key);
; 4442 :   ucvector_cleanup(&decoded);
; 4443 : 
; 4444 :   return error;
; 4445 : }
; 4446 : 
; 4447 : /*international text chunk (iTXt)*/
; 4448 : static unsigned readChunk_iTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
; 4449 :                                const unsigned char* data, size_t chunkLength)
; 4450 : {
; 4451 :   unsigned error = 0;
; 4452 :   unsigned i;
; 4453 : 
; 4454 :   unsigned length, begin, compressed;
; 4455 :   char *key = 0, *langtag = 0, *transkey = 0;
; 4456 :   ucvector decoded;
; 4457 :   ucvector_init(&decoded);
; 4458 : 
; 4459 :   while(!error) /*not really a while loop, only used to break on error*/
; 4460 :   {
; 4461 :     /*Quick check if the chunk length isn't too small. Even without check
; 4462 :     it'd still fail with other error checks below if it's too short. This just gives a different error code.*/
; 4463 :     if(chunkLength < 5) CERROR_BREAK(error, 30); /*iTXt chunk too short*/
; 4464 : 
; 4465 :     /*read the key*/
; 4466 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;
; 4467 :     if(length + 3 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination char, corrupt?*/
; 4468 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4469 : 
; 4470 :     key = (char*)lodepng_malloc(length + 1);
; 4471 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4472 : 
; 4473 :     key[length] = 0;
; 4474 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4475 : 
; 4476 :     /*read the compression method*/
; 4477 :     compressed = data[length + 1];
; 4478 :     if(data[length + 2] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
; 4479 : 
; 4480 :     /*even though it's not allowed by the standard, no error is thrown if
; 4481 :     there's no null termination char, if the text is empty for the next 3 texts*/
; 4482 : 
; 4483 :     /*read the langtag*/
; 4484 :     begin = length + 3;
; 4485 :     length = 0;
; 4486 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;
; 4487 : 
; 4488 :     langtag = (char*)lodepng_malloc(length + 1);
; 4489 :     if(!langtag) CERROR_BREAK(error, 83); /*alloc fail*/
; 4490 : 
; 4491 :     langtag[length] = 0;
; 4492 :     for(i = 0; i < length; i++) langtag[i] = data[begin + i];
; 4493 : 
; 4494 :     /*read the transkey*/
; 4495 :     begin += length + 1;
; 4496 :     length = 0;
; 4497 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;
; 4498 : 
; 4499 :     transkey = (char*)lodepng_malloc(length + 1);
; 4500 :     if(!transkey) CERROR_BREAK(error, 83); /*alloc fail*/
; 4501 : 
; 4502 :     transkey[length] = 0;
; 4503 :     for(i = 0; i < length; i++) transkey[i] = data[begin + i];
; 4504 : 
; 4505 :     /*read the actual text*/
; 4506 :     begin += length + 1;
; 4507 : 
; 4508 :     length = chunkLength < begin ? 0 : chunkLength - begin;
; 4509 : 
; 4510 :     if(compressed)
; 4511 :     {
; 4512 :       /*will fail if zlib error, e.g. if length is too small*/
; 4513 :       error = zlib_decompress(&decoded.data, &decoded.size,
; 4514 :                               (unsigned char*)(&data[begin]),
; 4515 :                               length, zlibsettings);
; 4516 :       if(error) break;
; 4517 :       if(decoded.allocsize < decoded.size) decoded.allocsize = decoded.size;
; 4518 :       ucvector_push_back(&decoded, 0);
; 4519 :     }
; 4520 :     else
; 4521 :     {
; 4522 :       if(!ucvector_resize(&decoded, length + 1)) CERROR_BREAK(error, 83 /*alloc fail*/);
; 4523 : 
; 4524 :       decoded.data[length] = 0;
; 4525 :       for(i = 0; i < length; i++) decoded.data[i] = data[begin + i];
; 4526 :     }
; 4527 : 
; 4528 :     error = lodepng_add_itext(info, key, langtag, transkey, (char*)decoded.data);
; 4529 : 
; 4530 :     break;
; 4531 :   }
; 4532 : 
; 4533 :   lodepng_free(key);
; 4534 :   lodepng_free(langtag);
; 4535 :   lodepng_free(transkey);
; 4536 :   ucvector_cleanup(&decoded);
; 4537 : 
; 4538 :   return error;
; 4539 : }
; 4540 : 
; 4541 : static unsigned readChunk_tIME(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4542 : {
; 4543 :   if(chunkLength != 7) return 73; /*invalid tIME chunk size*/
; 4544 : 
; 4545 :   info->time_defined = 1;
; 4546 :   info->time.year = 256 * data[0] + data[+ 1];
; 4547 :   info->time.month = data[2];
; 4548 :   info->time.day = data[3];
; 4549 :   info->time.hour = data[4];
; 4550 :   info->time.minute = data[5];
; 4551 :   info->time.second = data[6];
; 4552 : 
; 4553 :   return 0; /* OK */
; 4554 : }
; 4555 : 
; 4556 : static unsigned readChunk_pHYs(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4557 : {
; 4558 :   if(chunkLength != 9) return 74; /*invalid pHYs chunk size*/
; 4559 : 
; 4560 :   info->phys_defined = 1;
; 4561 :   info->phys_x = 16777216 * data[0] + 65536 * data[1] + 256 * data[2] + data[3];
; 4562 :   info->phys_y = 16777216 * data[4] + 65536 * data[5] + 256 * data[6] + data[7];
; 4563 :   info->phys_unit = data[8];
; 4564 : 
; 4565 :   return 0; /* OK */
; 4566 : }
; 4567 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4568 : 
; 4569 : /*read a PNG, the result will be in the same color type as the PNG (hence "generic")*/
; 4570 : static void decodeGeneric(unsigned char** out, unsigned* w, unsigned* h,
; 4571 :                           LodePNGState* state,
; 4572 :                           const unsigned char* in, size_t insize)
; 4573 : {
; 4574 :   unsigned char IEND = 0;
; 4575 :   const unsigned char* chunk;
; 4576 :   size_t i;
; 4577 :   ucvector idat; /*the data from idat chunks*/
; 4578 : 
; 4579 :   /*for unknown chunk order*/
; 4580 :   unsigned unknown = 0;
; 4581 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4582 :   unsigned critical_pos = 1; /*1 = after IHDR, 2 = after PLTE, 3 = after IDAT*/
; 4583 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4584 : 
; 4585 :   /*provide some proper output values if error will happen*/
; 4586 :   *out = 0;
; 4587 : 
; 4588 :   state->error = lodepng_inspect(w, h, state, in, insize); /*reads header and resets other parameters in state->info_png*/
; 4589 :   if(state->error) return;
; 4590 : 
; 4591 :   ucvector_init(&idat);
; 4592 :   chunk = &in[33]; /*first byte of the first chunk after the header*/
; 4593 : 
; 4594 :   /*loop through the chunks, ignoring unknown chunks and stopping at IEND chunk.
; 4595 :   IDAT data is put at the start of the in buffer*/
; 4596 :   while(!IEND && !state->error)
; 4597 :   {
; 4598 :     unsigned chunkLength;
; 4599 :     const unsigned char* data; /*the data in the chunk*/
; 4600 : 
; 4601 :     /*error: size of the in buffer too small to contain next chunk*/
; 4602 :     if((size_t)((chunk - in) + 12) > insize || chunk < in) CERROR_BREAK(state->error, 30);
; 4603 : 
; 4604 :     /*length of the data of the chunk, excluding the length bytes, chunk type and CRC bytes*/
; 4605 :     chunkLength = lodepng_chunk_length(chunk);
; 4606 :     /*error: chunk length larger than the max PNG chunk size*/
; 4607 :     if(chunkLength > 2147483647) CERROR_BREAK(state->error, 63);
; 4608 : 
; 4609 :     if((size_t)((chunk - in) + chunkLength + 12) > insize || (chunk + chunkLength + 12) < in)
; 4610 :     {
; 4611 :       CERROR_BREAK(state->error, 64); /*error: size of the in buffer too small to contain next chunk*/
; 4612 :     }
; 4613 : 
; 4614 :     data = lodepng_chunk_data_const(chunk);
; 4615 : 
; 4616 :     /*IDAT chunk, containing compressed image data*/
; 4617 :     if(lodepng_chunk_type_equals(chunk, "IDAT"))
; 4618 :     {
; 4619 :       size_t oldsize = idat.size;
; 4620 :       if(!ucvector_resize(&idat, oldsize + chunkLength)) CERROR_BREAK(state->error, 83 /*alloc fail*/);
; 4621 :       for(i = 0; i < chunkLength; i++) idat.data[oldsize + i] = data[i];
; 4622 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4623 :       critical_pos = 3;
; 4624 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4625 :     }
; 4626 :     /*IEND chunk*/
; 4627 :     else if(lodepng_chunk_type_equals(chunk, "IEND"))
; 4628 :     {
; 4629 :       IEND = 1;
; 4630 :     }
; 4631 :     /*palette chunk (PLTE)*/
; 4632 :     else if(lodepng_chunk_type_equals(chunk, "PLTE"))
; 4633 :     {
; 4634 :       state->error = readChunk_PLTE(&state->info_png.color, data, chunkLength);
; 4635 :       if(state->error) break;
; 4636 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4637 :       critical_pos = 2;
; 4638 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4639 :     }
; 4640 :     /*palette transparency chunk (tRNS)*/
; 4641 :     else if(lodepng_chunk_type_equals(chunk, "tRNS"))
; 4642 :     {
; 4643 :       state->error = readChunk_tRNS(&state->info_png.color, data, chunkLength);
; 4644 :       if(state->error) break;
; 4645 :     }
; 4646 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4647 :     /*background color chunk (bKGD)*/
; 4648 :     else if(lodepng_chunk_type_equals(chunk, "bKGD"))
; 4649 :     {
; 4650 :       state->error = readChunk_bKGD(&state->info_png, data, chunkLength);
; 4651 :       if(state->error) break;
; 4652 :     }
; 4653 :     /*text chunk (tEXt)*/
; 4654 :     else if(lodepng_chunk_type_equals(chunk, "tEXt"))
; 4655 :     {
; 4656 :       if(state->decoder.read_text_chunks)
; 4657 :       {
; 4658 :         state->error = readChunk_tEXt(&state->info_png, data, chunkLength);
; 4659 :         if(state->error) break;
; 4660 :       }
; 4661 :     }
; 4662 :     /*compressed text chunk (zTXt)*/
; 4663 :     else if(lodepng_chunk_type_equals(chunk, "zTXt"))
; 4664 :     {
; 4665 :       if(state->decoder.read_text_chunks)
; 4666 :       {
; 4667 :         state->error = readChunk_zTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);
; 4668 :         if(state->error) break;
; 4669 :       }
; 4670 :     }
; 4671 :     /*international text chunk (iTXt)*/
; 4672 :     else if(lodepng_chunk_type_equals(chunk, "iTXt"))
; 4673 :     {
; 4674 :       if(state->decoder.read_text_chunks)
; 4675 :       {
; 4676 :         state->error = readChunk_iTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);
; 4677 :         if(state->error) break;
; 4678 :       }
; 4679 :     }
; 4680 :     else if(lodepng_chunk_type_equals(chunk, "tIME"))
; 4681 :     {
; 4682 :       state->error = readChunk_tIME(&state->info_png, data, chunkLength);
; 4683 :       if(state->error) break;
; 4684 :     }
; 4685 :     else if(lodepng_chunk_type_equals(chunk, "pHYs"))
; 4686 :     {
; 4687 :       state->error = readChunk_pHYs(&state->info_png, data, chunkLength);
; 4688 :       if(state->error) break;
; 4689 :     }
; 4690 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4691 :     else /*it's not an implemented chunk type, so ignore it: skip over the data*/
; 4692 :     {
; 4693 :       /*error: unknown critical chunk (5th bit of first byte of chunk type is 0)*/
; 4694 :       if(!lodepng_chunk_ancillary(chunk)) CERROR_BREAK(state->error, 69);
; 4695 : 
; 4696 :       unknown = 1;
; 4697 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4698 :       if(state->decoder.remember_unknown_chunks)
; 4699 :       {
; 4700 :         state->error = lodepng_chunk_append(&state->info_png.unknown_chunks_data[critical_pos - 1],
; 4701 :                                             &state->info_png.unknown_chunks_size[critical_pos - 1], chunk);
; 4702 :         if(state->error) break;
; 4703 :       }
; 4704 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4705 :     }
; 4706 : 
; 4707 :     if(!state->decoder.ignore_crc && !unknown) /*check CRC if wanted, only on known chunk types*/
; 4708 :     {
; 4709 :       if(lodepng_chunk_check_crc(chunk)) CERROR_BREAK(state->error, 57); /*invalid CRC*/
; 4710 :     }
; 4711 : 
; 4712 :     if(!IEND) chunk = lodepng_chunk_next_const(chunk);
; 4713 :   }
; 4714 : 
; 4715 :   if(!state->error)
; 4716 :   {
; 4717 :     ucvector scanlines;
; 4718 :     ucvector_init(&scanlines);
; 4719 : 
; 4720 :     /*maximum final image length is already reserved in the vector's length - this is not really necessary*/
; 4721 :     if(!ucvector_resize(&scanlines, lodepng_get_raw_size(*w, *h, &state->info_png.color) + *h))
; 4722 :     {
; 4723 :       state->error = 83; /*alloc fail*/
; 4724 :     }
; 4725 :     if(!state->error)
; 4726 :     {
; 4727 :       /*decompress with the Zlib decompressor*/
; 4728 :       state->error = zlib_decompress(&scanlines.data, &scanlines.size, idat.data,
; 4729 :                                      idat.size, &state->decoder.zlibsettings);
; 4730 :     }
; 4731 : 
; 4732 :     if(!state->error)
; 4733 :     {
; 4734 :       ucvector outv;
; 4735 :       ucvector_init(&outv);
; 4736 :       if(!ucvector_resizev(&outv,
; 4737 :           lodepng_get_raw_size(*w, *h, &state->info_png.color), 0)) state->error = 83; /*alloc fail*/
; 4738 :       if(!state->error) state->error = postProcessScanlines(outv.data, scanlines.data, *w, *h, &state->info_png);
; 4739 :       *out = outv.data;
; 4740 :     }
; 4741 :     ucvector_cleanup(&scanlines);
; 4742 :   }
; 4743 : 
; 4744 :   ucvector_cleanup(&idat);
; 4745 : }
; 4746 : 
; 4747 : unsigned lodepng_decode(unsigned char** out, unsigned* w, unsigned* h,
; 4748 :                         LodePNGState* state,
; 4749 :                         const unsigned char* in, size_t insize)
; 4750 : {
; 4751 :   *out = 0;
; 4752 :   decodeGeneric(out, w, h, state, in, insize);
; 4753 :   if(state->error) return state->error;
; 4754 :   if(!state->decoder.color_convert || lodepng_color_mode_equal(&state->info_raw, &state->info_png.color))
; 4755 :   {
; 4756 :     /*same color type, no copying or converting of data needed*/
; 4757 :     /*store the info_png color settings on the info_raw so that the info_raw still reflects what colortype
; 4758 :     the raw image has to the end user*/
; 4759 :     if(!state->decoder.color_convert)
; 4760 :     {
; 4761 :       state->error = lodepng_color_mode_copy(&state->info_raw, &state->info_png.color);
; 4762 :       if(state->error) return state->error;
; 4763 :     }
; 4764 :   }
; 4765 :   else
; 4766 :   {
; 4767 :     /*color conversion needed; sort of copy of the data*/
; 4768 :     unsigned char* data = *out;
; 4769 :     size_t outsize;
; 4770 : 
; 4771 :     /*TODO: check if this works according to the statement in the documentation: "The converter can convert
; 4772 :     from greyscale input color type, to 8-bit greyscale or greyscale with alpha"*/
; 4773 :     if(!(state->info_raw.colortype == LCT_RGB || state->info_raw.colortype == LCT_RGBA)
; 4774 :        && !(state->info_raw.bitdepth == 8))
; 4775 :     {
; 4776 :       return 56; /*unsupported color mode conversion*/
; 4777 :     }
; 4778 : 
; 4779 :     outsize = lodepng_get_raw_size(*w, *h, &state->info_raw);
; 4780 :     *out = (unsigned char*)lodepng_malloc(outsize);
; 4781 :     if(!(*out))
; 4782 :     {
; 4783 :       state->error = 83; /*alloc fail*/
; 4784 :     }
; 4785 :     else state->error = lodepng_convert(*out, data, &state->info_raw, &state->info_png.color, *w, *h, state->decoder.fix_png);
; 4786 :     lodepng_free(data);
; 4787 :   }
; 4788 :   return state->error;
; 4789 : }
; 4790 : 
; 4791 : unsigned lodepng_decode_memory(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in,
; 4792 :                                size_t insize, LodePNGColorType colortype, unsigned bitdepth)
; 4793 : {
; 4794 :   unsigned error;
; 4795 :   LodePNGState state;
; 4796 :   lodepng_state_init(&state);
; 4797 :   state.info_raw.colortype = colortype;
; 4798 :   state.info_raw.bitdepth = bitdepth;
; 4799 :   error = lodepng_decode(out, w, h, &state, in, insize);
; 4800 :   lodepng_state_cleanup(&state);
; 4801 :   return error;
; 4802 : }
; 4803 : 
; 4804 : unsigned lodepng_decode32(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4805 : {
; 4806 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGBA, 8);
; 4807 : }
; 4808 : 
; 4809 : unsigned lodepng_decode24(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4810 : {
; 4811 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGB, 8);
; 4812 : }
; 4813 : 
; 4814 : #ifdef LODEPNG_COMPILE_DISK
; 4815 : unsigned lodepng_decode_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename,
; 4816 :                              LodePNGColorType colortype, unsigned bitdepth)
; 4817 : {
; 4818 :   unsigned char* buffer;
; 4819 :   size_t buffersize;
; 4820 :   unsigned error;
; 4821 :   error = lodepng_load_file(&buffer, &buffersize, filename);
; 4822 :   if(!error) error = lodepng_decode_memory(out, w, h, buffer, buffersize, colortype, bitdepth);
; 4823 :   lodepng_free(buffer);
; 4824 :   return error;
; 4825 : }
; 4826 : 
; 4827 : unsigned lodepng_decode32_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4828 : {
; 4829 :   return lodepng_decode_file(out, w, h, filename, LCT_RGBA, 8);
; 4830 : }
; 4831 : 
; 4832 : unsigned lodepng_decode24_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4833 : {
; 4834 :   return lodepng_decode_file(out, w, h, filename, LCT_RGB, 8);
; 4835 : }
; 4836 : #endif /*LODEPNG_COMPILE_DISK*/
; 4837 : 
; 4838 : void lodepng_decoder_settings_init(LodePNGDecoderSettings* settings)
; 4839 : {
; 4840 :   settings->color_convert = 1;
; 4841 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4842 :   settings->read_text_chunks = 1;
; 4843 :   settings->remember_unknown_chunks = 0;
; 4844 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4845 :   settings->ignore_crc = 0;
; 4846 :   settings->fix_png = 0;
; 4847 :   lodepng_decompress_settings_init(&settings->zlibsettings);
; 4848 : }
; 4849 : 
; 4850 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4851 : 
; 4852 : #if defined(LODEPNG_COMPILE_DECODER) || defined(LODEPNG_COMPILE_ENCODER)
; 4853 : 
; 4854 : void lodepng_state_init(LodePNGState* state)
; 4855 : {
; 4856 : #ifdef LODEPNG_COMPILE_DECODER
; 4857 :   lodepng_decoder_settings_init(&state->decoder);
; 4858 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4859 : #ifdef LODEPNG_COMPILE_ENCODER
; 4860 :   lodepng_encoder_settings_init(&state->encoder);
; 4861 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 4862 :   lodepng_color_mode_init(&state->info_raw);
; 4863 :   lodepng_info_init(&state->info_png);
; 4864 :   state->error = 1;
; 4865 : }
; 4866 : 
; 4867 : void lodepng_state_cleanup(LodePNGState* state)
; 4868 : {
; 4869 :   lodepng_color_mode_cleanup(&state->info_raw);
; 4870 :   lodepng_info_cleanup(&state->info_png);

  0001c	8d 8e 88 00 00
	00		 lea	 ecx, DWORD PTR [esi+136]

; 2585 :   info->palette = 0;

  00022	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 2586 :   info->palettesize = 0;

  00029	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 2587 : }
; 2588 : 
; 2589 : unsigned lodepng_palette_add(LodePNGColorMode* info,
; 2590 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2591 : {
; 2592 :   unsigned char* data;
; 2593 :   /*the same resize technique as C++ std::vectors is used, and here it's made so that for a palette with
; 2594 :   the max of 256 colors, it'll have the exact alloc size*/
; 2595 :   if(!info->palette) /*allocate palette if empty*/
; 2596 :   {
; 2597 :     /*room for 256 colors with 4 bytes each*/
; 2598 :     data = (unsigned char*)lodepng_realloc(info->palette, 1024);
; 2599 :     if(!data) return 83; /*alloc fail*/
; 2600 :     else info->palette = data;
; 2601 :   }
; 2602 :   info->palette[4 * info->palettesize + 0] = r;
; 2603 :   info->palette[4 * info->palettesize + 1] = g;
; 2604 :   info->palette[4 * info->palettesize + 2] = b;
; 2605 :   info->palette[4 * info->palettesize + 3] = a;
; 2606 :   info->palettesize++;
; 2607 :   return 0;
; 2608 : }
; 2609 : 
; 2610 : unsigned lodepng_get_bpp(const LodePNGColorMode* info)
; 2611 : {
; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }
; 2615 : 
; 2616 : unsigned lodepng_get_channels(const LodePNGColorMode* info)
; 2617 : {
; 2618 :   return getNumColorChannels(info->colortype);
; 2619 : }
; 2620 : 
; 2621 : unsigned lodepng_is_greyscale_type(const LodePNGColorMode* info)
; 2622 : {
; 2623 :   return info->colortype == LCT_GREY || info->colortype == LCT_GREY_ALPHA;
; 2624 : }
; 2625 : 
; 2626 : unsigned lodepng_is_alpha_type(const LodePNGColorMode* info)
; 2627 : {
; 2628 :   return (info->colortype & 4) != 0; /*4 or 6*/
; 2629 : }
; 2630 : 
; 2631 : unsigned lodepng_is_palette_type(const LodePNGColorMode* info)
; 2632 : {
; 2633 :   return info->colortype == LCT_PALETTE;
; 2634 : }
; 2635 : 
; 2636 : unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info)
; 2637 : {
; 2638 :   size_t i;
; 2639 :   for(i = 0; i < info->palettesize; i++)
; 2640 :   {
; 2641 :     if(info->palette[i * 4 + 3] < 255) return 1;
; 2642 :   }
; 2643 :   return 0;
; 2644 : }
; 2645 : 
; 2646 : unsigned lodepng_can_have_alpha(const LodePNGColorMode* info)
; 2647 : {
; 2648 :   return info->key_defined
; 2649 :       || lodepng_is_alpha_type(info)
; 2650 :       || lodepng_has_palette_alpha(info);
; 2651 : }
; 2652 : 
; 2653 : size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode* color)
; 2654 : {
; 2655 :   return (w * h * lodepng_get_bpp(color) + 7) / 8;
; 2656 : }
; 2657 : 
; 2658 : size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)
; 2659 : {
; 2660 :   return (w * h * lodepng_get_bpp_lct(colortype, bitdepth) + 7) / 8;
; 2661 : }
; 2662 : 
; 2663 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2664 : 
; 2665 : static void LodePNGUnknownChunks_init(LodePNGInfo* info)
; 2666 : {
; 2667 :   unsigned i;
; 2668 :   for(i = 0; i < 3; i++) info->unknown_chunks_data[i] = 0;
; 2669 :   for(i = 0; i < 3; i++) info->unknown_chunks_size[i] = 0;
; 2670 : }
; 2671 : 
; 2672 : static void LodePNGUnknownChunks_cleanup(LodePNGInfo* info)
; 2673 : {
; 2674 :   unsigned i;
; 2675 :   for(i = 0; i < 3; i++) lodepng_free(info->unknown_chunks_data[i]);
; 2676 : }
; 2677 : 
; 2678 : static unsigned LodePNGUnknownChunks_copy(LodePNGInfo* dest, const LodePNGInfo* src)
; 2679 : {
; 2680 :   unsigned i;
; 2681 : 
; 2682 :   LodePNGUnknownChunks_cleanup(dest);
; 2683 : 
; 2684 :   for(i = 0; i < 3; i++)
; 2685 :   {
; 2686 :     size_t j;
; 2687 :     dest->unknown_chunks_size[i] = src->unknown_chunks_size[i];
; 2688 :     dest->unknown_chunks_data[i] = (unsigned char*)lodepng_malloc(src->unknown_chunks_size[i]);
; 2689 :     if(!dest->unknown_chunks_data[i] && dest->unknown_chunks_size[i]) return 83; /*alloc fail*/
; 2690 :     for(j = 0; j < src->unknown_chunks_size[i]; j++)
; 2691 :     {
; 2692 :       dest->unknown_chunks_data[i][j] = src->unknown_chunks_data[i][j];
; 2693 :     }
; 2694 :   }
; 2695 : 
; 2696 :   return 0;
; 2697 : }
; 2698 : 
; 2699 : /******************************************************************************/
; 2700 : 
; 2701 : static void LodePNGText_init(LodePNGInfo* info)
; 2702 : {
; 2703 :   info->text_num = 0;
; 2704 :   info->text_keys = NULL;
; 2705 :   info->text_strings = NULL;
; 2706 : }
; 2707 : 
; 2708 : static void LodePNGText_cleanup(LodePNGInfo* info)
; 2709 : {
; 2710 :   size_t i;
; 2711 :   for(i = 0; i < info->text_num; i++)
; 2712 :   {
; 2713 :     string_cleanup(&info->text_keys[i]);
; 2714 :     string_cleanup(&info->text_strings[i]);
; 2715 :   }
; 2716 :   lodepng_free(info->text_keys);
; 2717 :   lodepng_free(info->text_strings);
; 2718 : }
; 2719 : 
; 2720 : static unsigned LodePNGText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2721 : {
; 2722 :   size_t i = 0;
; 2723 :   dest->text_keys = 0;
; 2724 :   dest->text_strings = 0;
; 2725 :   dest->text_num = 0;
; 2726 :   for(i = 0; i < source->text_num; i++)
; 2727 :   {
; 2728 :     CERROR_TRY_RETURN(lodepng_add_text(dest, source->text_keys[i], source->text_strings[i]));
; 2729 :   }
; 2730 :   return 0;
; 2731 : }
; 2732 : 
; 2733 : void lodepng_clear_text(LodePNGInfo* info)
; 2734 : {
; 2735 :   LodePNGText_cleanup(info);
; 2736 : }
; 2737 : 
; 2738 : unsigned lodepng_add_text(LodePNGInfo* info, const char* key, const char* str)
; 2739 : {
; 2740 :   char** new_keys = (char**)(lodepng_realloc(info->text_keys, sizeof(char*) * (info->text_num + 1)));
; 2741 :   char** new_strings = (char**)(lodepng_realloc(info->text_strings, sizeof(char*) * (info->text_num + 1)));
; 2742 :   if(!new_keys || !new_strings)
; 2743 :   {
; 2744 :     lodepng_free(new_keys);
; 2745 :     lodepng_free(new_strings);
; 2746 :     return 83; /*alloc fail*/
; 2747 :   }
; 2748 : 
; 2749 :   info->text_num++;
; 2750 :   info->text_keys = new_keys;
; 2751 :   info->text_strings = new_strings;
; 2752 : 
; 2753 :   string_init(&info->text_keys[info->text_num - 1]);
; 2754 :   string_set(&info->text_keys[info->text_num - 1], key);
; 2755 : 
; 2756 :   string_init(&info->text_strings[info->text_num - 1]);
; 2757 :   string_set(&info->text_strings[info->text_num - 1], str);
; 2758 : 
; 2759 :   return 0;
; 2760 : }
; 2761 : 
; 2762 : /******************************************************************************/
; 2763 : 
; 2764 : static void LodePNGIText_init(LodePNGInfo* info)
; 2765 : {
; 2766 :   info->itext_num = 0;
; 2767 :   info->itext_keys = NULL;
; 2768 :   info->itext_langtags = NULL;
; 2769 :   info->itext_transkeys = NULL;
; 2770 :   info->itext_strings = NULL;
; 2771 : }
; 2772 : 
; 2773 : static void LodePNGIText_cleanup(LodePNGInfo* info)
; 2774 : {
; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)
; 2777 :   {
; 2778 :     string_cleanup(&info->itext_keys[i]);
; 2779 :     string_cleanup(&info->itext_langtags[i]);
; 2780 :     string_cleanup(&info->itext_transkeys[i]);
; 2781 :     string_cleanup(&info->itext_strings[i]);
; 2782 :   }
; 2783 :   lodepng_free(info->itext_keys);
; 2784 :   lodepng_free(info->itext_langtags);
; 2785 :   lodepng_free(info->itext_transkeys);
; 2786 :   lodepng_free(info->itext_strings);
; 2787 : }
; 2788 : 
; 2789 : static unsigned LodePNGIText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2790 : {
; 2791 :   size_t i = 0;
; 2792 :   dest->itext_keys = 0;
; 2793 :   dest->itext_langtags = 0;
; 2794 :   dest->itext_transkeys = 0;
; 2795 :   dest->itext_strings = 0;
; 2796 :   dest->itext_num = 0;
; 2797 :   for(i = 0; i < source->itext_num; i++)
; 2798 :   {
; 2799 :     CERROR_TRY_RETURN(lodepng_add_itext(dest, source->itext_keys[i], source->itext_langtags[i],
; 2800 :                                         source->itext_transkeys[i], source->itext_strings[i]));
; 2801 :   }
; 2802 :   return 0;
; 2803 : }
; 2804 : 
; 2805 : void lodepng_clear_itext(LodePNGInfo* info)
; 2806 : {
; 2807 :   LodePNGIText_cleanup(info);
; 2808 : }
; 2809 : 
; 2810 : unsigned lodepng_add_itext(LodePNGInfo* info, const char* key, const char* langtag,
; 2811 :                            const char* transkey, const char* str)
; 2812 : {
; 2813 :   char** new_keys = (char**)(lodepng_realloc(info->itext_keys, sizeof(char*) * (info->itext_num + 1)));
; 2814 :   char** new_langtags = (char**)(lodepng_realloc(info->itext_langtags, sizeof(char*) * (info->itext_num + 1)));
; 2815 :   char** new_transkeys = (char**)(lodepng_realloc(info->itext_transkeys, sizeof(char*) * (info->itext_num + 1)));
; 2816 :   char** new_strings = (char**)(lodepng_realloc(info->itext_strings, sizeof(char*) * (info->itext_num + 1)));
; 2817 :   if(!new_keys || !new_langtags || !new_transkeys || !new_strings)
; 2818 :   {
; 2819 :     lodepng_free(new_keys);
; 2820 :     lodepng_free(new_langtags);
; 2821 :     lodepng_free(new_transkeys);
; 2822 :     lodepng_free(new_strings);
; 2823 :     return 83; /*alloc fail*/
; 2824 :   }
; 2825 : 
; 2826 :   info->itext_num++;
; 2827 :   info->itext_keys = new_keys;
; 2828 :   info->itext_langtags = new_langtags;
; 2829 :   info->itext_transkeys = new_transkeys;
; 2830 :   info->itext_strings = new_strings;
; 2831 : 
; 2832 :   string_init(&info->itext_keys[info->itext_num - 1]);
; 2833 :   string_set(&info->itext_keys[info->itext_num - 1], key);
; 2834 : 
; 2835 :   string_init(&info->itext_langtags[info->itext_num - 1]);
; 2836 :   string_set(&info->itext_langtags[info->itext_num - 1], langtag);
; 2837 : 
; 2838 :   string_init(&info->itext_transkeys[info->itext_num - 1]);
; 2839 :   string_set(&info->itext_transkeys[info->itext_num - 1], transkey);
; 2840 : 
; 2841 :   string_init(&info->itext_strings[info->itext_num - 1]);
; 2842 :   string_set(&info->itext_strings[info->itext_num - 1], str);
; 2843 : 
; 2844 :   return 0;
; 2845 : }
; 2846 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2847 : 
; 2848 : void lodepng_info_init(LodePNGInfo* info)
; 2849 : {
; 2850 :   lodepng_color_mode_init(&info->color);
; 2851 :   info->interlace_method = 0;
; 2852 :   info->compression_method = 0;
; 2853 :   info->filter_method = 0;
; 2854 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2855 :   info->background_defined = 0;
; 2856 :   info->background_r = info->background_g = info->background_b = 0;
; 2857 : 
; 2858 :   LodePNGText_init(info);
; 2859 :   LodePNGIText_init(info);
; 2860 : 
; 2861 :   info->time_defined = 0;
; 2862 :   info->phys_defined = 0;
; 2863 : 
; 2864 :   LodePNGUnknownChunks_init(info);
; 2865 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2866 : }
; 2867 : 
; 2868 : void lodepng_info_cleanup(LodePNGInfo* info)
; 2869 : {
; 2870 :   lodepng_color_mode_cleanup(&info->color);
; 2871 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2872 :   LodePNGText_cleanup(info);
; 2873 :   LodePNGIText_cleanup(info);
; 2874 : 
; 2875 :   LodePNGUnknownChunks_cleanup(info);
; 2876 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2877 : }
; 2878 : 
; 2879 : unsigned lodepng_info_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2880 : {
; 2881 :   lodepng_info_cleanup(dest);
; 2882 :   *dest = *source;
; 2883 :   lodepng_color_mode_init(&dest->color);
; 2884 :   CERROR_TRY_RETURN(lodepng_color_mode_copy(&dest->color, &source->color));
; 2885 : 
; 2886 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2887 :   CERROR_TRY_RETURN(LodePNGText_copy(dest, source));
; 2888 :   CERROR_TRY_RETURN(LodePNGIText_copy(dest, source));
; 2889 : 
; 2890 :   LodePNGUnknownChunks_init(dest);
; 2891 :   CERROR_TRY_RETURN(LodePNGUnknownChunks_copy(dest, source));
; 2892 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2893 :   return 0;
; 2894 : }
; 2895 : 
; 2896 : void lodepng_info_swap(LodePNGInfo* a, LodePNGInfo* b)
; 2897 : {
; 2898 :   LodePNGInfo temp = *a;
; 2899 :   *a = *b;
; 2900 :   *b = temp;
; 2901 : }
; 2902 : 
; 2903 : /* ////////////////////////////////////////////////////////////////////////// */
; 2904 : 
; 2905 : /*index: bitgroup index, bits: bitgroup size(1, 2 or 4, in: bitgroup value, out: octet array to add bits to*/
; 2906 : static void addColorBits(unsigned char* out, size_t index, unsigned bits, unsigned in)
; 2907 : {
; 2908 :   /*p = the partial index in the byte, e.g. with 4 palettebits it is 0 for first half or 1 for second half*/
; 2909 :   unsigned p = index % (8 / bits);
; 2910 :   in &= (1 << bits) - 1; /*filter out any other bits of the input value*/
; 2911 :   in = in << (bits * (8 / bits - p - 1));
; 2912 :   if(p == 0) out[index * bits / 8] = in;
; 2913 :   else out[index * bits / 8] |= in;
; 2914 : }
; 2915 : 
; 2916 : typedef struct ColorTree ColorTree;
; 2917 : 
; 2918 : /*
; 2919 : One node of a color tree
; 2920 : This is the data structure used to count the number of unique colors and to get a palette
; 2921 : index for a color. It's like an octree, but because the alpha channel is used too, each
; 2922 : node has 16 instead of 8 children.
; 2923 : */
; 2924 : struct ColorTree
; 2925 : {
; 2926 :   ColorTree* children[16]; /*up to 16 pointers to ColorTree of next level*/
; 2927 :   int index; /*the payload. Only has a meaningful value if this is in the last level*/
; 2928 : };
; 2929 : 
; 2930 : static void color_tree_init(ColorTree* tree)
; 2931 : {
; 2932 :   int i;
; 2933 :   for(i = 0; i < 16; i++) tree->children[i] = 0;
; 2934 :   tree->index = -1;
; 2935 : }
; 2936 : 
; 2937 : static void color_tree_cleanup(ColorTree* tree)
; 2938 : {
; 2939 :   int i;
; 2940 :   for(i = 0; i < 16; i++)
; 2941 :   {
; 2942 :     if(tree->children[i])
; 2943 :     {
; 2944 :       color_tree_cleanup(tree->children[i]);
; 2945 :       lodepng_free(tree->children[i]);
; 2946 :     }
; 2947 :   }
; 2948 : }
; 2949 : 
; 2950 : /*returns -1 if color not present, its index otherwise*/
; 2951 : static int color_tree_get(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2952 : {
; 2953 :   int bit = 0;
; 2954 :   for(bit = 0; bit < 8; bit++)
; 2955 :   {
; 2956 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
; 2957 :     if(!tree->children[i]) return -1;
; 2958 :     else tree = tree->children[i];
; 2959 :   }
; 2960 :   return tree ? tree->index : -1;
; 2961 : }
; 2962 : 
; 2963 : #ifdef LODEPNG_COMPILE_ENCODER
; 2964 : static int color_tree_has(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2965 : {
; 2966 :   return color_tree_get(tree, r, g, b, a) >= 0;
; 2967 : }
; 2968 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2969 : 
; 2970 : /*color is not allowed to already exist.
; 2971 : Index should be >= 0 (it's signed to be compatible with using -1 for "doesn't exist")*/
; 2972 : static void color_tree_add(ColorTree* tree,
; 2973 :                            unsigned char r, unsigned char g, unsigned char b, unsigned char a, int index)
; 2974 : {
; 2975 :   int bit;
; 2976 :   for(bit = 0; bit < 8; bit++)
; 2977 :   {
; 2978 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
; 2979 :     if(!tree->children[i])
; 2980 :     {
; 2981 :       tree->children[i] = (ColorTree*)lodepng_malloc(sizeof(ColorTree));
; 2982 :       color_tree_init(tree->children[i]);
; 2983 :     }
; 2984 :     tree = tree->children[i];
; 2985 :   }
; 2986 :   tree->index = index;
; 2987 : }
; 2988 : 
; 2989 : /*put a pixel, given its RGBA color, into image of any color type*/
; 2990 : static unsigned rgba8ToPixel(unsigned char* out, size_t i,
; 2991 :                              const LodePNGColorMode* mode, ColorTree* tree /*for palette*/,
; 2992 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2993 : {
; 2994 :   if(mode->colortype == LCT_GREY)
; 2995 :   {
; 2996 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 2997 :     if(mode->bitdepth == 8) out[i] = grey;
; 2998 :     else if(mode->bitdepth == 16) out[i * 2 + 0] = out[i * 2 + 1] = grey;
; 2999 :     else
; 3000 :     {
; 3001 :       /*take the most significant bits of grey*/
; 3002 :       grey = (grey >> (8 - mode->bitdepth)) & ((1 << mode->bitdepth) - 1);
; 3003 :       addColorBits(out, i, mode->bitdepth, grey);
; 3004 :     }
; 3005 :   }
; 3006 :   else if(mode->colortype == LCT_RGB)
; 3007 :   {
; 3008 :     if(mode->bitdepth == 8)
; 3009 :     {
; 3010 :       out[i * 3 + 0] = r;
; 3011 :       out[i * 3 + 1] = g;
; 3012 :       out[i * 3 + 2] = b;
; 3013 :     }
; 3014 :     else
; 3015 :     {
; 3016 :       out[i * 6 + 0] = out[i * 6 + 1] = r;
; 3017 :       out[i * 6 + 2] = out[i * 6 + 3] = g;
; 3018 :       out[i * 6 + 4] = out[i * 6 + 5] = b;
; 3019 :     }
; 3020 :   }
; 3021 :   else if(mode->colortype == LCT_PALETTE)
; 3022 :   {
; 3023 :     int index = color_tree_get(tree, r, g, b, a);
; 3024 :     if(index < 0) return 82; /*color not in palette*/
; 3025 :     if(mode->bitdepth == 8) out[i] = index;
; 3026 :     else addColorBits(out, i, mode->bitdepth, index);
; 3027 :   }
; 3028 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3029 :   {
; 3030 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 3031 :     if(mode->bitdepth == 8)
; 3032 :     {
; 3033 :       out[i * 2 + 0] = grey;
; 3034 :       out[i * 2 + 1] = a;
; 3035 :     }
; 3036 :     else if(mode->bitdepth == 16)
; 3037 :     {
; 3038 :       out[i * 4 + 0] = out[i * 4 + 1] = grey;
; 3039 :       out[i * 4 + 2] = out[i * 4 + 3] = a;
; 3040 :     }
; 3041 :   }
; 3042 :   else if(mode->colortype == LCT_RGBA)
; 3043 :   {
; 3044 :     if(mode->bitdepth == 8)
; 3045 :     {
; 3046 :       out[i * 4 + 0] = r;
; 3047 :       out[i * 4 + 1] = g;
; 3048 :       out[i * 4 + 2] = b;
; 3049 :       out[i * 4 + 3] = a;
; 3050 :     }
; 3051 :     else
; 3052 :     {
; 3053 :       out[i * 8 + 0] = out[i * 8 + 1] = r;
; 3054 :       out[i * 8 + 2] = out[i * 8 + 3] = g;
; 3055 :       out[i * 8 + 4] = out[i * 8 + 5] = b;
; 3056 :       out[i * 8 + 6] = out[i * 8 + 7] = a;
; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/
; 3061 : }
; 3062 : 
; 3063 : /*put a pixel, given its RGBA16 color, into image of any color 16-bitdepth type*/
; 3064 : static unsigned rgba16ToPixel(unsigned char* out, size_t i,
; 3065 :                               const LodePNGColorMode* mode,
; 3066 :                               unsigned short r, unsigned short g, unsigned short b, unsigned short a)
; 3067 : {
; 3068 :   if(mode->bitdepth != 16) return 85; /*must be 16 for this function*/
; 3069 :   if(mode->colortype == LCT_GREY)
; 3070 :   {
; 3071 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3072 :     out[i * 2 + 0] = (grey >> 8) & 255;
; 3073 :     out[i * 2 + 1] = grey & 255;
; 3074 :   }
; 3075 :   else if(mode->colortype == LCT_RGB)
; 3076 :   {
; 3077 :     out[i * 6 + 0] = (r >> 8) & 255;
; 3078 :     out[i * 6 + 1] = r & 255;
; 3079 :     out[i * 6 + 2] = (g >> 8) & 255;
; 3080 :     out[i * 6 + 3] = g & 255;
; 3081 :     out[i * 6 + 4] = (b >> 8) & 255;
; 3082 :     out[i * 6 + 5] = b & 255;
; 3083 :   }
; 3084 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3085 :   {
; 3086 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3087 :     out[i * 4 + 0] = (grey >> 8) & 255;
; 3088 :     out[i * 4 + 1] = grey & 255;
; 3089 :     out[i * 4 + 2] = (a >> 8) & 255;
; 3090 :     out[i * 4 + 3] = a & 255;
; 3091 :   }
; 3092 :   else if(mode->colortype == LCT_RGBA)
; 3093 :   {
; 3094 :     out[i * 8 + 0] = (r >> 8) & 255;
; 3095 :     out[i * 8 + 1] = r & 255;
; 3096 :     out[i * 8 + 2] = (g >> 8) & 255;
; 3097 :     out[i * 8 + 3] = g & 255;
; 3098 :     out[i * 8 + 4] = (b >> 8) & 255;
; 3099 :     out[i * 8 + 5] = b & 255;
; 3100 :     out[i * 8 + 6] = (a >> 8) & 255;
; 3101 :     out[i * 8 + 7] = a & 255;
; 3102 :   }
; 3103 : 
; 3104 :   return 0; /*no error*/
; 3105 : }
; 3106 : 
; 3107 : /*Get RGBA8 color of pixel with index i (y * width + x) from the raw image with given color type.*/
; 3108 : static unsigned getPixelColorRGBA8(unsigned char* r, unsigned char* g,
; 3109 :                                    unsigned char* b, unsigned char* a,
; 3110 :                                    const unsigned char* in, size_t i,
; 3111 :                                    const LodePNGColorMode* mode,
; 3112 :                                    unsigned fix_png)
; 3113 : {
; 3114 :   if(mode->colortype == LCT_GREY)
; 3115 :   {
; 3116 :     if(mode->bitdepth == 8)
; 3117 :     {
; 3118 :       *r = *g = *b = in[i];
; 3119 :       if(mode->key_defined && *r == mode->key_r) *a = 0;
; 3120 :       else *a = 255;
; 3121 :     }
; 3122 :     else if(mode->bitdepth == 16)
; 3123 :     {
; 3124 :       *r = *g = *b = in[i * 2 + 0];
; 3125 :       if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
; 3126 :       else *a = 255;
; 3127 :     }
; 3128 :     else
; 3129 :     {
; 3130 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
; 3131 :       size_t j = i * mode->bitdepth;
; 3132 :       unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3133 :       *r = *g = *b = (value * 255) / highest;
; 3134 :       if(mode->key_defined && value == mode->key_r) *a = 0;
; 3135 :       else *a = 255;
; 3136 :     }
; 3137 :   }
; 3138 :   else if(mode->colortype == LCT_RGB)
; 3139 :   {
; 3140 :     if(mode->bitdepth == 8)
; 3141 :     {
; 3142 :       *r = in[i * 3 + 0]; *g = in[i * 3 + 1]; *b = in[i * 3 + 2];
; 3143 :       if(mode->key_defined && *r == mode->key_r && *g == mode->key_g && *b == mode->key_b) *a = 0;
; 3144 :       else *a = 255;
; 3145 :     }
; 3146 :     else
; 3147 :     {
; 3148 :       *r = in[i * 6 + 0];
; 3149 :       *g = in[i * 6 + 2];
; 3150 :       *b = in[i * 6 + 4];
; 3151 :       if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3152 :          && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3153 :          && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
; 3154 :       else *a = 255;
; 3155 :     }
; 3156 :   }
; 3157 :   else if(mode->colortype == LCT_PALETTE)
; 3158 :   {
; 3159 :     unsigned index;
; 3160 :     if(mode->bitdepth == 8) index = in[i];
; 3161 :     else
; 3162 :     {
; 3163 :       size_t j = i * mode->bitdepth;
; 3164 :       index = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3165 :     }
; 3166 : 
; 3167 :     if(index >= mode->palettesize)
; 3168 :     {
; 3169 :       /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3170 :       if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/
; 3171 :       *r = *g = *b = 0;
; 3172 :       *a = 255;
; 3173 :     }
; 3174 :     else
; 3175 :     {
; 3176 :       *r = mode->palette[index * 4 + 0];
; 3177 :       *g = mode->palette[index * 4 + 1];
; 3178 :       *b = mode->palette[index * 4 + 2];
; 3179 :       *a = mode->palette[index * 4 + 3];
; 3180 :     }
; 3181 :   }
; 3182 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3183 :   {
; 3184 :     if(mode->bitdepth == 8)
; 3185 :     {
; 3186 :       *r = *g = *b = in[i * 2 + 0];
; 3187 :       *a = in[i * 2 + 1];
; 3188 :     }
; 3189 :     else
; 3190 :     {
; 3191 :       *r = *g = *b = in[i * 4 + 0];
; 3192 :       *a = in[i * 4 + 2];
; 3193 :     }
; 3194 :   }
; 3195 :   else if(mode->colortype == LCT_RGBA)
; 3196 :   {
; 3197 :     if(mode->bitdepth == 8)
; 3198 :     {
; 3199 :       *r = in[i * 4 + 0];
; 3200 :       *g = in[i * 4 + 1];
; 3201 :       *b = in[i * 4 + 2];
; 3202 :       *a = in[i * 4 + 3];
; 3203 :     }
; 3204 :     else
; 3205 :     {
; 3206 :       *r = in[i * 8 + 0];
; 3207 :       *g = in[i * 8 + 2];
; 3208 :       *b = in[i * 8 + 4];
; 3209 :       *a = in[i * 8 + 6];
; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/
; 3214 : }
; 3215 : 
; 3216 : /*Similar to getPixelColorRGBA8, but with all the for loops inside of the color
; 3217 : mode test cases, optimized to convert the colors much faster, when converting
; 3218 : to RGBA or RGB with 8 bit per cannel. buffer must be RGBA or RGB output with
; 3219 : enough memory, if has_alpha is true the output is RGBA. mode has the color mode
; 3220 : of the input buffer.*/
; 3221 : static unsigned getPixelColorsRGBA8(unsigned char* buffer, size_t numpixels,
; 3222 :                                     unsigned has_alpha, const unsigned char* in,
; 3223 :                                     const LodePNGColorMode* mode,
; 3224 :                                     unsigned fix_png)
; 3225 : {
; 3226 :   unsigned num_channels = has_alpha ? 4 : 3;
; 3227 :   size_t i;
; 3228 :   if(mode->colortype == LCT_GREY)
; 3229 :   {
; 3230 :     if(mode->bitdepth == 8)
; 3231 :     {
; 3232 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3233 :       {
; 3234 :         buffer[0] = buffer[1] = buffer[2] = in[i];
; 3235 :         if(has_alpha) buffer[3] = mode->key_defined && in[i] == mode->key_r ? 0 : 255;
; 3236 :       }
; 3237 :     }
; 3238 :     else if(mode->bitdepth == 16)
; 3239 :     {
; 3240 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3241 :       {
; 3242 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2];
; 3243 :         if(has_alpha) buffer[3] = mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r ? 0 : 255;
; 3244 :       }
; 3245 :     }
; 3246 :     else
; 3247 :     {
; 3248 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
; 3249 :       size_t j = 0;
; 3250 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3251 :       {
; 3252 :         unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3253 :         buffer[0] = buffer[1] = buffer[2] = (value * 255) / highest;
; 3254 :         if(has_alpha) buffer[3] = mode->key_defined && value == mode->key_r ? 0 : 255;
; 3255 :       }
; 3256 :     }
; 3257 :   }
; 3258 :   else if(mode->colortype == LCT_RGB)
; 3259 :   {
; 3260 :     if(mode->bitdepth == 8)
; 3261 :     {
; 3262 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3263 :       {
; 3264 :         buffer[0] = in[i * 3 + 0];
; 3265 :         buffer[1] = in[i * 3 + 1];
; 3266 :         buffer[2] = in[i * 3 + 2];
; 3267 :         if(has_alpha) buffer[3] = mode->key_defined && buffer[0] == mode->key_r
; 3268 :            && buffer[1]== mode->key_g && buffer[2] == mode->key_b ? 0 : 255;
; 3269 :       }
; 3270 :     }
; 3271 :     else
; 3272 :     {
; 3273 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3274 :       {
; 3275 :         buffer[0] = in[i * 6 + 0];
; 3276 :         buffer[1] = in[i * 6 + 2];
; 3277 :         buffer[2] = in[i * 6 + 4];
; 3278 :         if(has_alpha) buffer[3] = mode->key_defined
; 3279 :            && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3280 :            && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3281 :            && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b ? 0 : 255;
; 3282 :       }
; 3283 :     }
; 3284 :   }
; 3285 :   else if(mode->colortype == LCT_PALETTE)
; 3286 :   {
; 3287 :     unsigned index;
; 3288 :     size_t j = 0;
; 3289 :     for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3290 :     {
; 3291 :       if(mode->bitdepth == 8) index = in[i];
; 3292 :       else index = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3293 : 
; 3294 :       if(index >= mode->palettesize)
; 3295 :       {
; 3296 :         /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3297 :         if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/
; 3298 :         buffer[0] = buffer[1] = buffer[2] = 0;
; 3299 :         if(has_alpha) buffer[3] = 255;
; 3300 :       }
; 3301 :       else
; 3302 :       {
; 3303 :         buffer[0] = mode->palette[index * 4 + 0];
; 3304 :         buffer[1] = mode->palette[index * 4 + 1];
; 3305 :         buffer[2] = mode->palette[index * 4 + 2];
; 3306 :         if(has_alpha) buffer[3] = mode->palette[index * 4 + 3];
; 3307 :       }
; 3308 :     }
; 3309 :   }
; 3310 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3311 :   {
; 3312 :     if(mode->bitdepth == 8)
; 3313 :     {
; 3314 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3315 :       {
; 3316 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2 + 0];
; 3317 :         if(has_alpha) buffer[3] = in[i * 2 + 1];
; 3318 :       }
; 3319 :     }
; 3320 :     else
; 3321 :     {
; 3322 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3323 :       {
; 3324 :         buffer[0] = buffer[1] = buffer[2] = in[i * 4 + 0];
; 3325 :         if(has_alpha) buffer[3] = in[i * 4 + 2];
; 3326 :       }
; 3327 :     }
; 3328 :   }
; 3329 :   else if(mode->colortype == LCT_RGBA)
; 3330 :   {
; 3331 :     if(mode->bitdepth == 8)
; 3332 :     {
; 3333 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3334 :       {
; 3335 :         buffer[0] = in[i * 4 + 0];
; 3336 :         buffer[1] = in[i * 4 + 1];
; 3337 :         buffer[2] = in[i * 4 + 2];
; 3338 :         if(has_alpha) buffer[3] = in[i * 4 + 3];
; 3339 :       }
; 3340 :     }
; 3341 :     else
; 3342 :     {
; 3343 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3344 :       {
; 3345 :         buffer[0] = in[i * 8 + 0];
; 3346 :         buffer[1] = in[i * 8 + 2];
; 3347 :         buffer[2] = in[i * 8 + 4];
; 3348 :         if(has_alpha) buffer[3] = in[i * 8 + 6];
; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/
; 3354 : }
; 3355 : 
; 3356 : /*Get RGBA16 color of pixel with index i (y * width + x) from the raw image with
; 3357 : given color type, but the given color type must be 16-bit itself.*/
; 3358 : static unsigned getPixelColorRGBA16(unsigned short* r, unsigned short* g, unsigned short* b, unsigned short* a,
; 3359 :                                     const unsigned char* in, size_t i, const LodePNGColorMode* mode)
; 3360 : {
; 3361 :   if(mode->bitdepth != 16) return 85; /*error: this function only supports 16-bit input*/
; 3362 : 
; 3363 :   if(mode->colortype == LCT_GREY)
; 3364 :   {
; 3365 :     *r = *g = *b = 256 * in[i * 2 + 0] + in[i * 2 + 1];
; 3366 :     if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
; 3367 :     else *a = 65535;
; 3368 :   }
; 3369 :   else if(mode->colortype == LCT_RGB)
; 3370 :   {
; 3371 :     *r = 256 * in[i * 6 + 0] + in[i * 6 + 1];
; 3372 :     *g = 256 * in[i * 6 + 2] + in[i * 6 + 3];
; 3373 :     *b = 256 * in[i * 6 + 4] + in[i * 6 + 5];
; 3374 :     if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3375 :        && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3376 :        && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
; 3377 :     else *a = 65535;
; 3378 :   }
; 3379 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3380 :   {
; 3381 :     *r = *g = *b = 256 * in[i * 4 + 0] + in[i * 4 + 1];
; 3382 :     *a = 256 * in[i * 4 + 2] + in[i * 4 + 3];
; 3383 :   }
; 3384 :   else if(mode->colortype == LCT_RGBA)
; 3385 :   {
; 3386 :     *r = 256 * in[i * 8 + 0] + in[i * 8 + 1];
; 3387 :     *g = 256 * in[i * 8 + 2] + in[i * 8 + 3];
; 3388 :     *b = 256 * in[i * 8 + 4] + in[i * 8 + 5];
; 3389 :     *a = 256 * in[i * 8 + 6] + in[i * 8 + 7];
; 3390 :   }
; 3391 :   else return 85; /*error: this function only supports 16-bit input, not palettes*/
; 3392 : 
; 3393 :   return 0; /*no error*/
; 3394 : }
; 3395 : 
; 3396 : /*
; 3397 : converts from any color type to 24-bit or 32-bit (later maybe more supported). return value = LodePNG error code
; 3398 : the out buffer must have (w * h * bpp + 7) / 8 bytes, where bpp is the bits per pixel of the output color type
; 3399 : (lodepng_get_bpp) for < 8 bpp images, there may _not_ be padding bits at the end of scanlines.
; 3400 : */
; 3401 : unsigned lodepng_convert(unsigned char* out, const unsigned char* in,
; 3402 :                          LodePNGColorMode* mode_out, const LodePNGColorMode* mode_in,
; 3403 :                          unsigned w, unsigned h, unsigned fix_png)
; 3404 : {
; 3405 :   unsigned error = 0;
; 3406 :   size_t i;
; 3407 :   ColorTree tree;
; 3408 :   size_t numpixels = w * h;
; 3409 : 
; 3410 :   if(lodepng_color_mode_equal(mode_out, mode_in))
; 3411 :   {
; 3412 :     size_t numbytes = lodepng_get_raw_size(w, h, mode_in);
; 3413 :     for(i = 0; i < numbytes; i++) out[i] = in[i];
; 3414 :     return error;
; 3415 :   }
; 3416 : 
; 3417 :   if(mode_out->colortype == LCT_PALETTE)
; 3418 :   {
; 3419 :     size_t palsize = 1 << mode_out->bitdepth;
; 3420 :     if(mode_out->palettesize < palsize) palsize = mode_out->palettesize;
; 3421 :     color_tree_init(&tree);
; 3422 :     for(i = 0; i < palsize; i++)
; 3423 :     {
; 3424 :       unsigned char* p = &mode_out->palette[i * 4];
; 3425 :       color_tree_add(&tree, p[0], p[1], p[2], p[3], i);
; 3426 :     }
; 3427 :   }
; 3428 : 
; 3429 :   if(mode_in->bitdepth == 16 && mode_out->bitdepth == 16)
; 3430 :   {
; 3431 :     for(i = 0; i < numpixels; i++)
; 3432 :     {
; 3433 :       unsigned short r = 0, g = 0, b = 0, a = 0;
; 3434 :       error = getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode_in);
; 3435 :       if(error) break;
; 3436 :       error = rgba16ToPixel(out, i, mode_out, r, g, b, a);
; 3437 :       if(error) break;
; 3438 :     }
; 3439 :   }
; 3440 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGBA)
; 3441 :   {
; 3442 :     error = getPixelColorsRGBA8(out, numpixels, 1, in, mode_in, fix_png);
; 3443 :   }
; 3444 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGB)
; 3445 :   {
; 3446 :     error = getPixelColorsRGBA8(out, numpixels, 0, in, mode_in, fix_png);
; 3447 :   }
; 3448 :   else
; 3449 :   {
; 3450 :     unsigned char r = 0, g = 0, b = 0, a = 0;
; 3451 :     for(i = 0; i < numpixels; i++)
; 3452 :     {
; 3453 :       error = getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode_in, fix_png);
; 3454 :       if(error) break;
; 3455 :       error = rgba8ToPixel(out, i, mode_out, &tree, r, g, b, a);
; 3456 :       if(error) break;
; 3457 :     }
; 3458 :   }
; 3459 : 
; 3460 :   if(mode_out->colortype == LCT_PALETTE)
; 3461 :   {
; 3462 :     color_tree_cleanup(&tree);
; 3463 :   }
; 3464 : 
; 3465 :   return error;
; 3466 : }
; 3467 : 
; 3468 : #ifdef LODEPNG_COMPILE_ENCODER
; 3469 : 
; 3470 : typedef struct ColorProfile
; 3471 : {
; 3472 :   unsigned char sixteenbit; /*needs more than 8 bits per channel*/
; 3473 :   unsigned char sixteenbit_done;
; 3474 : 
; 3475 : 
; 3476 :   unsigned char colored; /*not greyscale*/
; 3477 :   unsigned char colored_done;
; 3478 : 
; 3479 :   unsigned char key; /*a color key is required, or more*/
; 3480 :   unsigned short key_r; /*these values are always in 16-bit bitdepth in the profile*/
; 3481 :   unsigned short key_g;
; 3482 :   unsigned short key_b;
; 3483 :   unsigned char alpha; /*alpha channel, or alpha palette, required*/
; 3484 :   unsigned char alpha_done;
; 3485 : 
; 3486 :   unsigned numcolors;
; 3487 :   ColorTree tree; /*for listing the counted colors, up to 256*/
; 3488 :   unsigned char* palette; /*size 1024. Remember up to the first 256 RGBA colors*/
; 3489 :   unsigned maxnumcolors; /*if more than that amount counted*/
; 3490 :   unsigned char numcolors_done;
; 3491 : 
; 3492 :   unsigned greybits; /*amount of bits required for greyscale (1, 2, 4, 8). Does not take 16 bit into account.*/
; 3493 :   unsigned char greybits_done;
; 3494 : 
; 3495 : } ColorProfile;
; 3496 : 
; 3497 : static void color_profile_init(ColorProfile* profile, const LodePNGColorMode* mode)
; 3498 : {
; 3499 :   profile->sixteenbit = 0;
; 3500 :   profile->sixteenbit_done = mode->bitdepth == 16 ? 0 : 1;
; 3501 : 
; 3502 :   profile->colored = 0;
; 3503 :   profile->colored_done = lodepng_is_greyscale_type(mode) ? 1 : 0;
; 3504 : 
; 3505 :   profile->key = 0;
; 3506 :   profile->alpha = 0;
; 3507 :   profile->alpha_done = lodepng_can_have_alpha(mode) ? 0 : 1;
; 3508 : 
; 3509 :   profile->numcolors = 0;
; 3510 :   color_tree_init(&profile->tree);
; 3511 :   profile->palette = (unsigned char*)lodepng_malloc(1024);
; 3512 :   profile->maxnumcolors = 257;
; 3513 :   if(lodepng_get_bpp(mode) <= 8)
; 3514 :   {
; 3515 :     int bpp = lodepng_get_bpp(mode);
; 3516 :     profile->maxnumcolors = bpp == 1 ? 2 : (bpp == 2 ? 4 : (bpp == 4 ? 16 : 256));
; 3517 :   }
; 3518 :   profile->numcolors_done = 0;
; 3519 : 
; 3520 :   profile->greybits = 1;
; 3521 :   profile->greybits_done = lodepng_get_bpp(mode) == 1 ? 1 : 0;
; 3522 : }
; 3523 : 
; 3524 : static void color_profile_cleanup(ColorProfile* profile)
; 3525 : {
; 3526 :   color_tree_cleanup(&profile->tree);
; 3527 :   lodepng_free(profile->palette);
; 3528 : }
; 3529 : 
; 3530 : /*function used for debug purposes with C++*/
; 3531 : /*void printColorProfile(ColorProfile* p)
; 3532 : {
; 3533 :   std::cout << "sixteenbit: " << (int)p->sixteenbit << std::endl;
; 3534 :   std::cout << "sixteenbit_done: " << (int)p->sixteenbit_done << std::endl;
; 3535 :   std::cout << "colored: " << (int)p->colored << std::endl;
; 3536 :   std::cout << "colored_done: " << (int)p->colored_done << std::endl;
; 3537 :   std::cout << "key: " << (int)p->key << std::endl;
; 3538 :   std::cout << "key_r: " << (int)p->key_r << std::endl;
; 3539 :   std::cout << "key_g: " << (int)p->key_g << std::endl;
; 3540 :   std::cout << "key_b: " << (int)p->key_b << std::endl;
; 3541 :   std::cout << "alpha: " << (int)p->alpha << std::endl;
; 3542 :   std::cout << "alpha_done: " << (int)p->alpha_done << std::endl;
; 3543 :   std::cout << "numcolors: " << (int)p->numcolors << std::endl;
; 3544 :   std::cout << "maxnumcolors: " << (int)p->maxnumcolors << std::endl;
; 3545 :   std::cout << "numcolors_done: " << (int)p->numcolors_done << std::endl;
; 3546 :   std::cout << "greybits: " << (int)p->greybits << std::endl;
; 3547 :   std::cout << "greybits_done: " << (int)p->greybits_done << std::endl;
; 3548 : }*/
; 3549 : 
; 3550 : /*Returns how many bits needed to represent given value (max 8 bit)*/
; 3551 : unsigned getValueRequiredBits(unsigned short value)
; 3552 : {
; 3553 :   if(value == 0 || value == 255) return 1;
; 3554 :   /*The scaling of 2-bit and 4-bit values uses multiples of 85 and 17*/
; 3555 :   if(value % 17 == 0) return value % 85 == 0 ? 2 : 4;
; 3556 :   return 8;
; 3557 : }
; 3558 : 
; 3559 : /*profile must already have been inited with mode.
; 3560 : It's ok to set some parameters of profile to done already.*/
; 3561 : static unsigned get_color_profile(ColorProfile* profile,
; 3562 :                                   const unsigned char* in,
; 3563 :                                   size_t numpixels /*must be full image size, for certain filesize based choices*/,
; 3564 :                                   const LodePNGColorMode* mode,
; 3565 :                                   unsigned fix_png)
; 3566 : {
; 3567 :   unsigned error = 0;
; 3568 :   size_t i;
; 3569 : 
; 3570 :   if(mode->bitdepth == 16)
; 3571 :   {
; 3572 :     for(i = 0; i < numpixels; i++)
; 3573 :     {
; 3574 :       unsigned short r, g, b, a;
; 3575 :       error = getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode);
; 3576 :       if(error) break;
; 3577 : 
; 3578 :       /*a color is considered good for 8-bit if the first byte and the second byte are equal,
; 3579 :         (so if it's divisible through 257), NOT necessarily if the second byte is 0*/
; 3580 :       if(!profile->sixteenbit_done
; 3581 :           && (((r & 255) != ((r >> 8) & 255))
; 3582 :            || ((g & 255) != ((g >> 8) & 255))
; 3583 :            || ((b & 255) != ((b >> 8) & 255))))
; 3584 :       {
; 3585 :         profile->sixteenbit = 1;
; 3586 :         profile->sixteenbit_done = 1;
; 3587 :         profile->greybits_done = 1; /*greybits is not applicable anymore at 16-bit*/
; 3588 :         profile->numcolors_done = 1; /*counting colors no longer useful, palette doesn't support 16-bit*/
; 3589 :       }
; 3590 : 
; 3591 :       if(!profile->colored_done && (r != g || r != b))
; 3592 :       {
; 3593 :         profile->colored = 1;
; 3594 :         profile->colored_done = 1;
; 3595 :         profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3596 :       }
; 3597 : 
; 3598 :       if(!profile->alpha_done && a != 65535)
; 3599 :       {
; 3600 :         /*only use color key if numpixels large enough to justify tRNS chunk size*/
; 3601 :         if(a == 0 && numpixels > 16 && !(profile->key && (r != profile->key_r || g != profile->key_g || b != profile->key_b)))
; 3602 :         {
; 3603 :           if(!profile->alpha && !profile->key)
; 3604 :           {
; 3605 :             profile->key = 1;
; 3606 :             profile->key_r = r;
; 3607 :             profile->key_g = g;
; 3608 :             profile->key_b = b;
; 3609 :           }
; 3610 :         }
; 3611 :         else
; 3612 :         {
; 3613 :           profile->alpha = 1;
; 3614 :           profile->alpha_done = 1;
; 3615 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3616 :         }
; 3617 :       }
; 3618 : 
; 3619 :       /* Color key cannot be used if an opaque pixel also has that RGB color. */
; 3620 :       if(!profile->alpha_done && a == 65535 && profile->key
; 3621 :           && r == profile->key_r && g == profile->key_g && b == profile->key_b)
; 3622 :       {
; 3623 :           profile->alpha = 1;
; 3624 :           profile->alpha_done = 1;
; 3625 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3626 :       }
; 3627 : 
; 3628 :       if(!profile->greybits_done)
; 3629 :       {
; 3630 :         /*assuming 8-bit r, this test does not care about 16-bit*/
; 3631 :         unsigned bits = getValueRequiredBits(r);
; 3632 :         if(bits > profile->greybits) profile->greybits = bits;
; 3633 :         if(profile->greybits >= 8) profile->greybits_done = 1;
; 3634 :       }
; 3635 : 
; 3636 :       if(!profile->numcolors_done)
; 3637 :       {
; 3638 :         /*assuming 8-bit rgba, this test does not care about 16-bit*/
; 3639 :         if(!color_tree_has(&profile->tree, (unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a))
; 3640 :         {
; 3641 :           color_tree_add(&profile->tree, (unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a,
; 3642 :             profile->numcolors);
; 3643 :           if(profile->numcolors < 256)
; 3644 :           {
; 3645 :             unsigned char* p = profile->palette;
; 3646 :             unsigned i = profile->numcolors;
; 3647 :             p[i * 4 + 0] = (unsigned char)r;
; 3648 :             p[i * 4 + 1] = (unsigned char)g;
; 3649 :             p[i * 4 + 2] = (unsigned char)b;
; 3650 :             p[i * 4 + 3] = (unsigned char)a;
; 3651 :           }
; 3652 :           profile->numcolors++;
; 3653 :           if(profile->numcolors >= profile->maxnumcolors) profile->numcolors_done = 1;
; 3654 :         }
; 3655 :       }
; 3656 : 
; 3657 :       if(profile->alpha_done && profile->numcolors_done
; 3658 :       && profile->colored_done && profile->sixteenbit_done && profile->greybits_done)
; 3659 :       {
; 3660 :         break;
; 3661 :       }
; 3662 :     };
; 3663 :   }
; 3664 :   else /* < 16-bit */
; 3665 :   {
; 3666 :     for(i = 0; i < numpixels; i++)
; 3667 :     {
; 3668 :       unsigned char r = 0, g = 0, b = 0, a = 0;
; 3669 :       error = getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode, fix_png);
; 3670 :       if(error) break;
; 3671 : 
; 3672 :       if(!profile->colored_done && (r != g || r != b))
; 3673 :       {
; 3674 :         profile->colored = 1;
; 3675 :         profile->colored_done = 1;
; 3676 :         profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3677 :       }
; 3678 : 
; 3679 :       if(!profile->alpha_done && a != 255)
; 3680 :       {
; 3681 :         if(a == 0 && !(profile->key && (r != profile->key_r || g != profile->key_g || b != profile->key_b)))
; 3682 :         {
; 3683 :           if(!profile->key)
; 3684 :           {
; 3685 :             profile->key = 1;
; 3686 :             profile->key_r = r;
; 3687 :             profile->key_g = g;
; 3688 :             profile->key_b = b;
; 3689 :           }
; 3690 :         }
; 3691 :         else
; 3692 :         {
; 3693 :           profile->alpha = 1;
; 3694 :           profile->alpha_done = 1;
; 3695 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3696 :         }
; 3697 :       }
; 3698 : 
; 3699 :       /* Color key cannot be used if an opaque pixel also has that RGB color. */
; 3700 :       if(!profile->alpha_done && a == 255 && profile->key
; 3701 :           && r == profile->key_r && g == profile->key_g && b == profile->key_b)
; 3702 :       {
; 3703 :           profile->alpha = 1;
; 3704 :           profile->alpha_done = 1;
; 3705 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3706 :       }
; 3707 : 
; 3708 :       if(!profile->greybits_done)
; 3709 :       {
; 3710 :         unsigned bits = getValueRequiredBits(r);
; 3711 :         if(bits > profile->greybits) profile->greybits = bits;
; 3712 :         if(profile->greybits >= 8) profile->greybits_done = 1;
; 3713 :       }
; 3714 : 
; 3715 :       if(!profile->numcolors_done)
; 3716 :       {
; 3717 :         if(!color_tree_has(&profile->tree, r, g, b, a))
; 3718 :         {
; 3719 : 
; 3720 :           color_tree_add(&profile->tree, r, g, b, a, profile->numcolors);
; 3721 :           if(profile->numcolors < 256)
; 3722 :           {
; 3723 :             unsigned char* p = profile->palette;
; 3724 :             unsigned i = profile->numcolors;
; 3725 :             p[i * 4 + 0] = r;
; 3726 :             p[i * 4 + 1] = g;
; 3727 :             p[i * 4 + 2] = b;
; 3728 :             p[i * 4 + 3] = a;
; 3729 :           }
; 3730 :           profile->numcolors++;
; 3731 :           if(profile->numcolors >= profile->maxnumcolors) profile->numcolors_done = 1;
; 3732 :         }
; 3733 :       }
; 3734 : 
; 3735 :       if(profile->alpha_done && profile->numcolors_done && profile->colored_done && profile->greybits_done)
; 3736 :       {
; 3737 :         break;
; 3738 :       }
; 3739 :     };
; 3740 :   }
; 3741 : 
; 3742 :   /*make the profile's key always 16-bit for consistency*/
; 3743 :   if(mode->bitdepth < 16)
; 3744 :   {
; 3745 :     /*repeat each byte twice*/
; 3746 :     profile->key_r *= 257;
; 3747 :     profile->key_g *= 257;
; 3748 :     profile->key_b *= 257;
; 3749 :   }
; 3750 : 
; 3751 :   return error;
; 3752 : }
; 3753 : 
; 3754 : static void setColorKeyFrom16bit(LodePNGColorMode* mode_out, unsigned r, unsigned g, unsigned b, unsigned bitdepth)
; 3755 : {
; 3756 :   unsigned mask = (1 << bitdepth) - 1;
; 3757 :   mode_out->key_defined = 1;
; 3758 :   mode_out->key_r = r & mask;
; 3759 :   mode_out->key_g = g & mask;
; 3760 :   mode_out->key_b = b & mask;
; 3761 : }
; 3762 : 
; 3763 : /*updates values of mode with a potentially smaller color model. mode_out should
; 3764 : contain the user chosen color model, but will be overwritten with the new chosen one.*/
; 3765 : unsigned lodepng_auto_choose_color(LodePNGColorMode* mode_out,
; 3766 :                                    const unsigned char* image, unsigned w, unsigned h,
; 3767 :                                    const LodePNGColorMode* mode_in,
; 3768 :                                    LodePNGAutoConvert auto_convert)
; 3769 : {
; 3770 :   ColorProfile profile;
; 3771 :   unsigned error = 0;
; 3772 :   int no_nibbles = auto_convert == LAC_AUTO_NO_NIBBLES || auto_convert == LAC_AUTO_NO_NIBBLES_NO_PALETTE;
; 3773 :   int no_palette = auto_convert == LAC_AUTO_NO_PALETTE || auto_convert == LAC_AUTO_NO_NIBBLES_NO_PALETTE;
; 3774 : 
; 3775 :   if(auto_convert == LAC_ALPHA)
; 3776 :   {
; 3777 :     if(mode_out->colortype != LCT_RGBA && mode_out->colortype != LCT_GREY_ALPHA) return 0;
; 3778 :   }
; 3779 : 
; 3780 :   color_profile_init(&profile, mode_in);
; 3781 :   if(auto_convert == LAC_ALPHA)
; 3782 :   {
; 3783 :     profile.colored_done = 1;
; 3784 :     profile.greybits_done = 1;
; 3785 :     profile.numcolors_done = 1;
; 3786 :     profile.sixteenbit_done = 1;
; 3787 :   }
; 3788 :   error = get_color_profile(&profile, image, w * h, mode_in, 0 /*fix_png*/);
; 3789 :   if(!error && auto_convert == LAC_ALPHA)
; 3790 :   {
; 3791 :     if(!profile.alpha)
; 3792 :     {
; 3793 :       mode_out->colortype = (mode_out->colortype == LCT_RGBA ? LCT_RGB : LCT_GREY);
; 3794 :       if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3795 :     }
; 3796 :   }
; 3797 :   else if(!error && auto_convert != LAC_ALPHA)
; 3798 :   {
; 3799 :     mode_out->key_defined = 0;
; 3800 : 
; 3801 :     if(profile.sixteenbit)
; 3802 :     {
; 3803 :       mode_out->bitdepth = 16;
; 3804 :       if(profile.alpha)
; 3805 :       {
; 3806 :         mode_out->colortype = profile.colored ? LCT_RGBA : LCT_GREY_ALPHA;
; 3807 :       }
; 3808 :       else
; 3809 :       {
; 3810 :         mode_out->colortype = profile.colored ? LCT_RGB : LCT_GREY;
; 3811 :         if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3812 :       }
; 3813 :     }
; 3814 :     else /*less than 16 bits per channel*/
; 3815 :     {
; 3816 :       /*don't add palette overhead if image hasn't got a lot of pixels*/
; 3817 :       unsigned n = profile.numcolors;
; 3818 :       int palette_ok = !no_palette && n <= 256 && (n * 2 < w * h);
; 3819 :       unsigned palettebits = n <= 2 ? 1 : (n <= 4 ? 2 : (n <= 16 ? 4 : 8));
; 3820 :       int grey_ok = !profile.colored && !profile.alpha; /*grey without alpha, with potentially low bits*/
; 3821 :       if(palette_ok || grey_ok)
; 3822 :       {
; 3823 :         if(!palette_ok || (grey_ok && profile.greybits <= palettebits))
; 3824 :         {
; 3825 :           unsigned grey = profile.key_r;
; 3826 :           mode_out->colortype = LCT_GREY;
; 3827 :           mode_out->bitdepth = profile.greybits;
; 3828 :           if(profile.key) setColorKeyFrom16bit(mode_out, grey, grey, grey, mode_out->bitdepth);
; 3829 :         }
; 3830 :         else
; 3831 :         {
; 3832 :           /*fill in the palette*/
; 3833 :           unsigned i;
; 3834 :           unsigned char* p = profile.palette;
; 3835 :           /*remove potential earlier palette*/
; 3836 :           lodepng_palette_clear(mode_out);
; 3837 :           for(i = 0; i < profile.numcolors; i++)
; 3838 :           {
; 3839 :             error = lodepng_palette_add(mode_out, p[i * 4 + 0], p[i * 4 + 1], p[i * 4 + 2], p[i * 4 + 3]);
; 3840 :             if(error) break;
; 3841 :           }
; 3842 : 
; 3843 :           mode_out->colortype = LCT_PALETTE;
; 3844 :           mode_out->bitdepth = palettebits;
; 3845 :         }
; 3846 :       }
; 3847 :       else /*8-bit per channel*/
; 3848 :       {
; 3849 :         mode_out->bitdepth = 8;
; 3850 :         if(profile.alpha)
; 3851 :         {
; 3852 :           mode_out->colortype = profile.colored ? LCT_RGBA : LCT_GREY_ALPHA;
; 3853 :         }
; 3854 :         else
; 3855 :         {
; 3856 :           mode_out->colortype = profile.colored ? LCT_RGB : LCT_GREY /*LCT_GREY normally won't occur, already done earlier*/;
; 3857 :           if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3858 :         }
; 3859 :       }
; 3860 :     }
; 3861 :   }
; 3862 : 
; 3863 :   color_profile_cleanup(&profile);
; 3864 : 
; 3865 :   if(mode_out->colortype == LCT_PALETTE && mode_in->palettesize == mode_out->palettesize)
; 3866 :   {
; 3867 :     /*In this case keep the palette order of the input, so that the user can choose an optimal one*/
; 3868 :     size_t i;
; 3869 :     for(i = 0; i < mode_in->palettesize * 4; i++)
; 3870 :     {
; 3871 :       mode_out->palette[i] = mode_in->palette[i];
; 3872 :     }
; 3873 :   }
; 3874 : 
; 3875 :   if(no_nibbles && mode_out->bitdepth < 8)
; 3876 :   {
; 3877 :     /*palette can keep its small amount of colors, as long as no indices use it*/
; 3878 :     mode_out->bitdepth = 8;
; 3879 :   }
; 3880 : 
; 3881 :   return error;
; 3882 : }
; 3883 : 
; 3884 : #endif /* #ifdef LODEPNG_COMPILE_ENCODER */
; 3885 : 
; 3886 : /*
; 3887 : Paeth predicter, used by PNG filter type 4
; 3888 : The parameters are of type short, but should come from unsigned chars, the shorts
; 3889 : are only needed to make the paeth calculation correct.
; 3890 : */
; 3891 : static unsigned char paethPredictor(short a, short b, short c)
; 3892 : {
; 3893 :   short pa = abs(b - c);
; 3894 :   short pb = abs(a - c);
; 3895 :   short pc = abs(a + b - c - c);
; 3896 : 
; 3897 :   if(pc < pa && pc < pb) return (unsigned char)c;
; 3898 :   else if(pb < pa) return (unsigned char)b;
; 3899 :   else return (unsigned char)a;
; 3900 : }
; 3901 : 
; 3902 : /*shared values used by multiple Adam7 related functions*/
; 3903 : 
; 3904 : static const unsigned ADAM7_IX[7] = { 0, 4, 0, 2, 0, 1, 0 }; /*x start values*/
; 3905 : static const unsigned ADAM7_IY[7] = { 0, 0, 4, 0, 2, 0, 1 }; /*y start values*/
; 3906 : static const unsigned ADAM7_DX[7] = { 8, 8, 4, 4, 2, 2, 1 }; /*x delta values*/
; 3907 : static const unsigned ADAM7_DY[7] = { 8, 8, 8, 4, 4, 2, 2 }; /*y delta values*/
; 3908 : 
; 3909 : /*
; 3910 : Outputs various dimensions and positions in the image related to the Adam7 reduced images.
; 3911 : passw: output containing the width of the 7 passes
; 3912 : passh: output containing the height of the 7 passes
; 3913 : filter_passstart: output containing the index of the start and end of each
; 3914 :  reduced image with filter bytes
; 3915 : padded_passstart output containing the index of the start and end of each
; 3916 :  reduced image when without filter bytes but with padded scanlines
; 3917 : passstart: output containing the index of the start and end of each reduced
; 3918 :  image without padding between scanlines, but still padding between the images
; 3919 : w, h: width and height of non-interlaced image
; 3920 : bpp: bits per pixel
; 3921 : "padded" is only relevant if bpp is less than 8 and a scanline or image does not
; 3922 :  end at a full byte
; 3923 : */
; 3924 : static void Adam7_getpassvalues(unsigned passw[7], unsigned passh[7], size_t filter_passstart[8],
; 3925 :                                 size_t padded_passstart[8], size_t passstart[8], unsigned w, unsigned h, unsigned bpp)
; 3926 : {
; 3927 :   /*the passstart values have 8 values: the 8th one indicates the byte after the end of the 7th (= last) pass*/
; 3928 :   unsigned i;
; 3929 : 
; 3930 :   /*calculate width and height in pixels of each pass*/
; 3931 :   for(i = 0; i < 7; i++)
; 3932 :   {
; 3933 :     passw[i] = (w + ADAM7_DX[i] - ADAM7_IX[i] - 1) / ADAM7_DX[i];
; 3934 :     passh[i] = (h + ADAM7_DY[i] - ADAM7_IY[i] - 1) / ADAM7_DY[i];
; 3935 :     if(passw[i] == 0) passh[i] = 0;
; 3936 :     if(passh[i] == 0) passw[i] = 0;
; 3937 :   }
; 3938 : 
; 3939 :   filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
; 3940 :   for(i = 0; i < 7; i++)
; 3941 :   {
; 3942 :     /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
; 3943 :     filter_passstart[i + 1] = filter_passstart[i]
; 3944 :                             + ((passw[i] && passh[i]) ? passh[i] * (1 + (passw[i] * bpp + 7) / 8) : 0);
; 3945 :     /*bits padded if needed to fill full byte at end of each scanline*/
; 3946 :     padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7) / 8);
; 3947 :     /*only padded at end of reduced image*/
; 3948 :     passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7) / 8;
; 3949 :   }
; 3950 : }
; 3951 : 
; 3952 : #ifdef LODEPNG_COMPILE_DECODER
; 3953 : 
; 3954 : /* ////////////////////////////////////////////////////////////////////////// */
; 3955 : /* / PNG Decoder                                                            / */
; 3956 : /* ////////////////////////////////////////////////////////////////////////// */
; 3957 : 
; 3958 : /*read the information from the header and store it in the LodePNGInfo. return value is error*/
; 3959 : unsigned lodepng_inspect(unsigned* w, unsigned* h, LodePNGState* state,
; 3960 :                          const unsigned char* in, size_t insize)
; 3961 : {
; 3962 :   LodePNGInfo* info = &state->info_png;
; 3963 :   if(insize == 0 || in == 0)
; 3964 :   {
; 3965 :     CERROR_RETURN_ERROR(state->error, 48); /*error: the given data is empty*/
; 3966 :   }
; 3967 :   if(insize < 29)
; 3968 :   {
; 3969 :     CERROR_RETURN_ERROR(state->error, 27); /*error: the data length is smaller than the length of a PNG header*/
; 3970 :   }
; 3971 : 
; 3972 :   /*when decoding a new PNG image, make sure all parameters created after previous decoding are reset*/
; 3973 :   lodepng_info_cleanup(info);
; 3974 :   lodepng_info_init(info);
; 3975 : 
; 3976 :   if(in[0] != 137 || in[1] != 80 || in[2] != 78 || in[3] != 71
; 3977 :      || in[4] != 13 || in[5] != 10 || in[6] != 26 || in[7] != 10)
; 3978 :   {
; 3979 :     CERROR_RETURN_ERROR(state->error, 28); /*error: the first 8 bytes are not the correct PNG signature*/
; 3980 :   }
; 3981 :   if(in[12] != 'I' || in[13] != 'H' || in[14] != 'D' || in[15] != 'R')
; 3982 :   {
; 3983 :     CERROR_RETURN_ERROR(state->error, 29); /*error: it doesn't start with a IHDR chunk!*/
; 3984 :   }
; 3985 : 
; 3986 :   /*read the values given in the header*/
; 3987 :   *w = lodepng_read32bitInt(&in[16]);
; 3988 :   *h = lodepng_read32bitInt(&in[20]);
; 3989 :   info->color.bitdepth = in[24];
; 3990 :   info->color.colortype = (LodePNGColorType)in[25];
; 3991 :   info->compression_method = in[26];
; 3992 :   info->filter_method = in[27];
; 3993 :   info->interlace_method = in[28];
; 3994 : 
; 3995 :   if(!state->decoder.ignore_crc)
; 3996 :   {
; 3997 :     unsigned CRC = lodepng_read32bitInt(&in[29]);
; 3998 :     unsigned checksum = lodepng_crc32(&in[12], 17);
; 3999 :     if(CRC != checksum)
; 4000 :     {
; 4001 :       CERROR_RETURN_ERROR(state->error, 57); /*invalid CRC*/
; 4002 :     }
; 4003 :   }
; 4004 : 
; 4005 :   /*error: only compression method 0 is allowed in the specification*/
; 4006 :   if(info->compression_method != 0) CERROR_RETURN_ERROR(state->error, 32);
; 4007 :   /*error: only filter method 0 is allowed in the specification*/
; 4008 :   if(info->filter_method != 0) CERROR_RETURN_ERROR(state->error, 33);
; 4009 :   /*error: only interlace methods 0 and 1 exist in the specification*/
; 4010 :   if(info->interlace_method > 1) CERROR_RETURN_ERROR(state->error, 34);
; 4011 : 
; 4012 :   state->error = checkColorValidity(info->color.colortype, info->color.bitdepth);
; 4013 :   return state->error;
; 4014 : }
; 4015 : 
; 4016 : static unsigned unfilterScanline(unsigned char* recon, const unsigned char* scanline, const unsigned char* precon,
; 4017 :                                  size_t bytewidth, unsigned char filterType, size_t length)
; 4018 : {
; 4019 :   /*
; 4020 :   For PNG filter method 0
; 4021 :   unfilter a PNG image scanline by scanline. when the pixels are smaller than 1 byte,
; 4022 :   the filter works byte per byte (bytewidth = 1)
; 4023 :   precon is the previous unfiltered scanline, recon the result, scanline the current one
; 4024 :   the incoming scanlines do NOT include the filtertype byte, that one is given in the parameter filterType instead
; 4025 :   recon and scanline MAY be the same memory address! precon must be disjoint.
; 4026 :   */
; 4027 : 
; 4028 :   size_t i;
; 4029 :   switch(filterType)
; 4030 :   {
; 4031 :     case 0:
; 4032 :       for(i = 0; i < length; i++) recon[i] = scanline[i];
; 4033 :       break;
; 4034 :     case 1:
; 4035 :       for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];
; 4036 :       for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth];
; 4037 :       break;
; 4038 :     case 2:
; 4039 :       if(precon)
; 4040 :       {
; 4041 :         for(i = 0; i < length; i++) recon[i] = scanline[i] + precon[i];
; 4042 :       }
; 4043 :       else
; 4044 :       {
; 4045 :         for(i = 0; i < length; i++) recon[i] = scanline[i];
; 4046 :       }
; 4047 :       break;
; 4048 :     case 3:
; 4049 :       if(precon)
; 4050 :       {
; 4051 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i] + precon[i] / 2;
; 4052 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + ((recon[i - bytewidth] + precon[i]) / 2);
; 4053 :       }
; 4054 :       else
; 4055 :       {
; 4056 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];
; 4057 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth] / 2;
; 4058 :       }
; 4059 :       break;
; 4060 :     case 4:
; 4061 :       if(precon)
; 4062 :       {
; 4063 :         for(i = 0; i < bytewidth; i++)
; 4064 :         {
; 4065 :           recon[i] = (scanline[i] + precon[i]); /*paethPredictor(0, precon[i], 0) is always precon[i]*/
; 4066 :         }
; 4067 :         for(i = bytewidth; i < length; i++)
; 4068 :         {
; 4069 :           recon[i] = (scanline[i] + paethPredictor(recon[i - bytewidth], precon[i], precon[i - bytewidth]));
; 4070 :         }
; 4071 :       }
; 4072 :       else
; 4073 :       {
; 4074 :         for(i = 0; i < bytewidth; i++)
; 4075 :         {
; 4076 :           recon[i] = scanline[i];
; 4077 :         }
; 4078 :         for(i = bytewidth; i < length; i++)
; 4079 :         {
; 4080 :           /*paethPredictor(recon[i - bytewidth], 0, 0) is always recon[i - bytewidth]*/
; 4081 :           recon[i] = (scanline[i] + recon[i - bytewidth]);
; 4082 :         }
; 4083 :       }
; 4084 :       break;
; 4085 :     default: return 36; /*error: unexisting filter type given*/
; 4086 :   }
; 4087 :   return 0;
; 4088 : }
; 4089 : 
; 4090 : static unsigned unfilter(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
; 4091 : {
; 4092 :   /*
; 4093 :   For PNG filter method 0
; 4094 :   this function unfilters a single image (e.g. without interlacing this is called once, with Adam7 seven times)
; 4095 :   out must have enough bytes allocated already, in must have the scanlines + 1 filtertype byte per scanline
; 4096 :   w and h are image dimensions or dimensions of reduced image, bpp is bits per pixel
; 4097 :   in and out are allowed to be the same memory address (but aren't the same size since in has the extra filter bytes)
; 4098 :   */
; 4099 : 
; 4100 :   unsigned y;
; 4101 :   unsigned char* prevline = 0;
; 4102 : 
; 4103 :   /*bytewidth is used for filtering, is 1 when bpp < 8, number of bytes per pixel otherwise*/
; 4104 :   size_t bytewidth = (bpp + 7) / 8;
; 4105 :   size_t linebytes = (w * bpp + 7) / 8;
; 4106 : 
; 4107 :   for(y = 0; y < h; y++)
; 4108 :   {
; 4109 :     size_t outindex = linebytes * y;
; 4110 :     size_t inindex = (1 + linebytes) * y; /*the extra filterbyte added to each row*/
; 4111 :     unsigned char filterType = in[inindex];
; 4112 : 
; 4113 :     CERROR_TRY_RETURN(unfilterScanline(&out[outindex], &in[inindex + 1], prevline, bytewidth, filterType, linebytes));
; 4114 : 
; 4115 :     prevline = &out[outindex];
; 4116 :   }
; 4117 : 
; 4118 :   return 0;
; 4119 : }
; 4120 : 
; 4121 : /*
; 4122 : in: Adam7 interlaced image, with no padding bits between scanlines, but between
; 4123 :  reduced images so that each reduced image starts at a byte.
; 4124 : out: the same pixels, but re-ordered so that they're now a non-interlaced image with size w*h
; 4125 : bpp: bits per pixel
; 4126 : out has the following size in bits: w * h * bpp.
; 4127 : in is possibly bigger due to padding bits between reduced images.
; 4128 : out must be big enough AND must be 0 everywhere if bpp < 8 in the current implementation
; 4129 : (because that's likely a little bit faster)
; 4130 : NOTE: comments about padding bits are only relevant if bpp < 8
; 4131 : */
; 4132 : static void Adam7_deinterlace(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
; 4133 : {
; 4134 :   unsigned passw[7], passh[7];
; 4135 :   size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4136 :   unsigned i;
; 4137 : 
; 4138 :   Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 4139 : 
; 4140 :   if(bpp >= 8)
; 4141 :   {
; 4142 :     for(i = 0; i < 7; i++)
; 4143 :     {
; 4144 :       unsigned x, y, b;
; 4145 :       size_t bytewidth = bpp / 8;
; 4146 :       for(y = 0; y < passh[i]; y++)
; 4147 :       for(x = 0; x < passw[i]; x++)
; 4148 :       {
; 4149 :         size_t pixelinstart = passstart[i] + (y * passw[i] + x) * bytewidth;
; 4150 :         size_t pixeloutstart = ((ADAM7_IY[i] + y * ADAM7_DY[i]) * w + ADAM7_IX[i] + x * ADAM7_DX[i]) * bytewidth;
; 4151 :         for(b = 0; b < bytewidth; b++)
; 4152 :         {
; 4153 :           out[pixeloutstart + b] = in[pixelinstart + b];
; 4154 :         }
; 4155 :       }
; 4156 :     }
; 4157 :   }
; 4158 :   else /*bpp < 8: Adam7 with pixels < 8 bit is a bit trickier: with bit pointers*/
; 4159 :   {
; 4160 :     for(i = 0; i < 7; i++)
; 4161 :     {
; 4162 :       unsigned x, y, b;
; 4163 :       unsigned ilinebits = bpp * passw[i];
; 4164 :       unsigned olinebits = bpp * w;
; 4165 :       size_t obp, ibp; /*bit pointers (for out and in buffer)*/
; 4166 :       for(y = 0; y < passh[i]; y++)
; 4167 :       for(x = 0; x < passw[i]; x++)
; 4168 :       {
; 4169 :         ibp = (8 * passstart[i]) + (y * ilinebits + x * bpp);
; 4170 :         obp = (ADAM7_IY[i] + y * ADAM7_DY[i]) * olinebits + (ADAM7_IX[i] + x * ADAM7_DX[i]) * bpp;
; 4171 :         for(b = 0; b < bpp; b++)
; 4172 :         {
; 4173 :           unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4174 :           /*note that this function assumes the out buffer is completely 0, use setBitOfReversedStream otherwise*/
; 4175 :           setBitOfReversedStream0(&obp, out, bit);
; 4176 :         }
; 4177 :       }
; 4178 :     }
; 4179 :   }
; 4180 : }
; 4181 : 
; 4182 : static void removePaddingBits(unsigned char* out, const unsigned char* in,
; 4183 :                               size_t olinebits, size_t ilinebits, unsigned h)
; 4184 : {
; 4185 :   /*
; 4186 :   After filtering there are still padding bits if scanlines have non multiple of 8 bit amounts. They need
; 4187 :   to be removed (except at last scanline of (Adam7-reduced) image) before working with pure image buffers
; 4188 :   for the Adam7 code, the color convert code and the output to the user.
; 4189 :   in and out are allowed to be the same buffer, in may also be higher but still overlapping; in must
; 4190 :   have >= ilinebits*h bits, out must have >= olinebits*h bits, olinebits must be <= ilinebits
; 4191 :   also used to move bits after earlier such operations happened, e.g. in a sequence of reduced images from Adam7
; 4192 :   only useful if (ilinebits - olinebits) is a value in the range 1..7
; 4193 :   */
; 4194 :   unsigned y;
; 4195 :   size_t diff = ilinebits - olinebits;
; 4196 :   size_t ibp = 0, obp = 0; /*input and output bit pointers*/
; 4197 :   for(y = 0; y < h; y++)
; 4198 :   {
; 4199 :     size_t x;
; 4200 :     for(x = 0; x < olinebits; x++)
; 4201 :     {
; 4202 :       unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4203 :       setBitOfReversedStream(&obp, out, bit);
; 4204 :     }
; 4205 :     ibp += diff;
; 4206 :   }
; 4207 : }
; 4208 : 
; 4209 : /*out must be buffer big enough to contain full image, and in must contain the full decompressed data from
; 4210 : the IDAT chunks (with filter index bytes and possible padding bits)
; 4211 : return value is error*/
; 4212 : static unsigned postProcessScanlines(unsigned char* out, unsigned char* in,
; 4213 :                                      unsigned w, unsigned h, const LodePNGInfo* info_png)
; 4214 : {
; 4215 :   /*
; 4216 :   This function converts the filtered-padded-interlaced data into pure 2D image buffer with the PNG's colortype.
; 4217 :   Steps:
; 4218 :   *) if no Adam7: 1) unfilter 2) remove padding bits (= posible extra bits per scanline if bpp < 8)
; 4219 :   *) if adam7: 1) 7x unfilter 2) 7x remove padding bits 3) Adam7_deinterlace
; 4220 :   NOTE: the in buffer will be overwritten with intermediate data!
; 4221 :   */
; 4222 :   unsigned bpp = lodepng_get_bpp(&info_png->color);
; 4223 :   if(bpp == 0) return 31; /*error: invalid colortype*/
; 4224 : 
; 4225 :   if(info_png->interlace_method == 0)
; 4226 :   {
; 4227 :     if(bpp < 8 && w * bpp != ((w * bpp + 7) / 8) * 8)
; 4228 :     {
; 4229 :       CERROR_TRY_RETURN(unfilter(in, in, w, h, bpp));
; 4230 :       removePaddingBits(out, in, w * bpp, ((w * bpp + 7) / 8) * 8, h);
; 4231 :     }
; 4232 :     /*we can immediatly filter into the out buffer, no other steps needed*/
; 4233 :     else CERROR_TRY_RETURN(unfilter(out, in, w, h, bpp));
; 4234 :   }
; 4235 :   else /*interlace_method is 1 (Adam7)*/
; 4236 :   {
; 4237 :     unsigned passw[7], passh[7]; size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4238 :     unsigned i;
; 4239 : 
; 4240 :     Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 4241 : 
; 4242 :     for(i = 0; i < 7; i++)
; 4243 :     {
; 4244 :       CERROR_TRY_RETURN(unfilter(&in[padded_passstart[i]], &in[filter_passstart[i]], passw[i], passh[i], bpp));
; 4245 :       /*TODO: possible efficiency improvement: if in this reduced image the bits fit nicely in 1 scanline,
; 4246 :       move bytes instead of bits or move not at all*/
; 4247 :       if(bpp < 8)
; 4248 :       {
; 4249 :         /*remove padding bits in scanlines; after this there still may be padding
; 4250 :         bits between the different reduced images: each reduced image still starts nicely at a byte*/
; 4251 :         removePaddingBits(&in[passstart[i]], &in[padded_passstart[i]], passw[i] * bpp,
; 4252 :                           ((passw[i] * bpp + 7) / 8) * 8, passh[i]);
; 4253 :       }
; 4254 :     }
; 4255 : 
; 4256 :     Adam7_deinterlace(out, in, w, h, bpp);
; 4257 :   }
; 4258 : 
; 4259 :   return 0;
; 4260 : }
; 4261 : 
; 4262 : static unsigned readChunk_PLTE(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
; 4263 : {
; 4264 :   unsigned pos = 0, i;
; 4265 :   if(color->palette) lodepng_free(color->palette);
; 4266 :   color->palettesize = chunkLength / 3;
; 4267 :   color->palette = (unsigned char*)lodepng_malloc(4 * color->palettesize);
; 4268 :   if(!color->palette && color->palettesize)
; 4269 :   {
; 4270 :     color->palettesize = 0;
; 4271 :     return 83; /*alloc fail*/
; 4272 :   }
; 4273 :   if(color->palettesize > 256) return 38; /*error: palette too big*/
; 4274 : 
; 4275 :   for(i = 0; i < color->palettesize; i++)
; 4276 :   {
; 4277 :     color->palette[4 * i + 0] = data[pos++]; /*R*/
; 4278 :     color->palette[4 * i + 1] = data[pos++]; /*G*/
; 4279 :     color->palette[4 * i + 2] = data[pos++]; /*B*/
; 4280 :     color->palette[4 * i + 3] = 255; /*alpha*/
; 4281 :   }
; 4282 : 
; 4283 :   return 0; /* OK */
; 4284 : }
; 4285 : 
; 4286 : static unsigned readChunk_tRNS(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
; 4287 : {
; 4288 :   unsigned i;
; 4289 :   if(color->colortype == LCT_PALETTE)
; 4290 :   {
; 4291 :     /*error: more alpha values given than there are palette entries*/
; 4292 :     if(chunkLength > color->palettesize) return 38;
; 4293 : 
; 4294 :     for(i = 0; i < chunkLength; i++) color->palette[4 * i + 3] = data[i];
; 4295 :   }
; 4296 :   else if(color->colortype == LCT_GREY)
; 4297 :   {
; 4298 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4299 :     if(chunkLength != 2) return 30;
; 4300 : 
; 4301 :     color->key_defined = 1;
; 4302 :     color->key_r = color->key_g = color->key_b = 256 * data[0] + data[1];
; 4303 :   }
; 4304 :   else if(color->colortype == LCT_RGB)
; 4305 :   {
; 4306 :     /*error: this chunk must be 6 bytes for RGB image*/
; 4307 :     if(chunkLength != 6) return 41;
; 4308 : 
; 4309 :     color->key_defined = 1;
; 4310 :     color->key_r = 256 * data[0] + data[1];
; 4311 :     color->key_g = 256 * data[2] + data[3];
; 4312 :     color->key_b = 256 * data[4] + data[5];
; 4313 :   }
; 4314 :   else return 42; /*error: tRNS chunk not allowed for other color models*/
; 4315 : 
; 4316 :   return 0; /* OK */
; 4317 : }
; 4318 : 
; 4319 : 
; 4320 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4321 : /*background color chunk (bKGD)*/
; 4322 : static unsigned readChunk_bKGD(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4323 : {
; 4324 :   if(info->color.colortype == LCT_PALETTE)
; 4325 :   {
; 4326 :     /*error: this chunk must be 1 byte for indexed color image*/
; 4327 :     if(chunkLength != 1) return 43;
; 4328 : 
; 4329 :     info->background_defined = 1;
; 4330 :     info->background_r = info->background_g = info->background_b = data[0];
; 4331 :   }
; 4332 :   else if(info->color.colortype == LCT_GREY || info->color.colortype == LCT_GREY_ALPHA)
; 4333 :   {
; 4334 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4335 :     if(chunkLength != 2) return 44;
; 4336 : 
; 4337 :     info->background_defined = 1;
; 4338 :     info->background_r = info->background_g = info->background_b
; 4339 :                                  = 256 * data[0] + data[1];
; 4340 :   }
; 4341 :   else if(info->color.colortype == LCT_RGB || info->color.colortype == LCT_RGBA)
; 4342 :   {
; 4343 :     /*error: this chunk must be 6 bytes for greyscale image*/
; 4344 :     if(chunkLength != 6) return 45;
; 4345 : 
; 4346 :     info->background_defined = 1;
; 4347 :     info->background_r = 256 * data[0] + data[1];
; 4348 :     info->background_g = 256 * data[2] + data[3];
; 4349 :     info->background_b = 256 * data[4] + data[5];
; 4350 :   }
; 4351 : 
; 4352 :   return 0; /* OK */
; 4353 : }
; 4354 : 
; 4355 : /*text chunk (tEXt)*/
; 4356 : static unsigned readChunk_tEXt(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4357 : {
; 4358 :   unsigned error = 0;
; 4359 :   char *key = 0, *str = 0;
; 4360 :   unsigned i;
; 4361 : 
; 4362 :   while(!error) /*not really a while loop, only used to break on error*/
; 4363 :   {
; 4364 :     unsigned length, string2_begin;
; 4365 : 
; 4366 :     length = 0;
; 4367 :     while(length < chunkLength && data[length] != 0) length++;
; 4368 :     /*even though it's not allowed by the standard, no error is thrown if
; 4369 :     there's no null termination char, if the text is empty*/
; 4370 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4371 : 
; 4372 :     key = (char*)lodepng_malloc(length + 1);
; 4373 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4374 : 
; 4375 :     key[length] = 0;
; 4376 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4377 : 
; 4378 :     string2_begin = length + 1; /*skip keyword null terminator*/
; 4379 : 
; 4380 :     length = chunkLength < string2_begin ? 0 : chunkLength - string2_begin;
; 4381 :     str = (char*)lodepng_malloc(length + 1);
; 4382 :     if(!str) CERROR_BREAK(error, 83); /*alloc fail*/
; 4383 : 
; 4384 :     str[length] = 0;
; 4385 :     for(i = 0; i < length; i++) str[i] = data[string2_begin + i];
; 4386 : 
; 4387 :     error = lodepng_add_text(info, key, str);
; 4388 : 
; 4389 :     break;
; 4390 :   }
; 4391 : 
; 4392 :   lodepng_free(key);
; 4393 :   lodepng_free(str);
; 4394 : 
; 4395 :   return error;
; 4396 : }
; 4397 : 
; 4398 : /*compressed text chunk (zTXt)*/
; 4399 : static unsigned readChunk_zTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
; 4400 :                                const unsigned char* data, size_t chunkLength)
; 4401 : {
; 4402 :   unsigned error = 0;
; 4403 :   unsigned i;
; 4404 : 
; 4405 :   unsigned length, string2_begin;
; 4406 :   char *key = 0;
; 4407 :   ucvector decoded;
; 4408 : 
; 4409 :   ucvector_init(&decoded);
; 4410 : 
; 4411 :   while(!error) /*not really a while loop, only used to break on error*/
; 4412 :   {
; 4413 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;
; 4414 :     if(length + 2 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
; 4415 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4416 : 
; 4417 :     key = (char*)lodepng_malloc(length + 1);
; 4418 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4419 : 
; 4420 :     key[length] = 0;
; 4421 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4422 : 
; 4423 :     if(data[length + 1] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
; 4424 : 
; 4425 :     string2_begin = length + 2;
; 4426 :     if(string2_begin > chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
; 4427 : 
; 4428 :     length = chunkLength - string2_begin;
; 4429 :     /*will fail if zlib error, e.g. if length is too small*/
; 4430 :     error = zlib_decompress(&decoded.data, &decoded.size,
; 4431 :                             (unsigned char*)(&data[string2_begin]),
; 4432 :                             length, zlibsettings);
; 4433 :     if(error) break;
; 4434 :     ucvector_push_back(&decoded, 0);
; 4435 : 
; 4436 :     error = lodepng_add_text(info, key, (char*)decoded.data);
; 4437 : 
; 4438 :     break;
; 4439 :   }
; 4440 : 
; 4441 :   lodepng_free(key);
; 4442 :   ucvector_cleanup(&decoded);
; 4443 : 
; 4444 :   return error;
; 4445 : }
; 4446 : 
; 4447 : /*international text chunk (iTXt)*/
; 4448 : static unsigned readChunk_iTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
; 4449 :                                const unsigned char* data, size_t chunkLength)
; 4450 : {
; 4451 :   unsigned error = 0;
; 4452 :   unsigned i;
; 4453 : 
; 4454 :   unsigned length, begin, compressed;
; 4455 :   char *key = 0, *langtag = 0, *transkey = 0;
; 4456 :   ucvector decoded;
; 4457 :   ucvector_init(&decoded);
; 4458 : 
; 4459 :   while(!error) /*not really a while loop, only used to break on error*/
; 4460 :   {
; 4461 :     /*Quick check if the chunk length isn't too small. Even without check
; 4462 :     it'd still fail with other error checks below if it's too short. This just gives a different error code.*/
; 4463 :     if(chunkLength < 5) CERROR_BREAK(error, 30); /*iTXt chunk too short*/
; 4464 : 
; 4465 :     /*read the key*/
; 4466 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;
; 4467 :     if(length + 3 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination char, corrupt?*/
; 4468 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4469 : 
; 4470 :     key = (char*)lodepng_malloc(length + 1);
; 4471 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4472 : 
; 4473 :     key[length] = 0;
; 4474 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4475 : 
; 4476 :     /*read the compression method*/
; 4477 :     compressed = data[length + 1];
; 4478 :     if(data[length + 2] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
; 4479 : 
; 4480 :     /*even though it's not allowed by the standard, no error is thrown if
; 4481 :     there's no null termination char, if the text is empty for the next 3 texts*/
; 4482 : 
; 4483 :     /*read the langtag*/
; 4484 :     begin = length + 3;
; 4485 :     length = 0;
; 4486 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;
; 4487 : 
; 4488 :     langtag = (char*)lodepng_malloc(length + 1);
; 4489 :     if(!langtag) CERROR_BREAK(error, 83); /*alloc fail*/
; 4490 : 
; 4491 :     langtag[length] = 0;
; 4492 :     for(i = 0; i < length; i++) langtag[i] = data[begin + i];
; 4493 : 
; 4494 :     /*read the transkey*/
; 4495 :     begin += length + 1;
; 4496 :     length = 0;
; 4497 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;
; 4498 : 
; 4499 :     transkey = (char*)lodepng_malloc(length + 1);
; 4500 :     if(!transkey) CERROR_BREAK(error, 83); /*alloc fail*/
; 4501 : 
; 4502 :     transkey[length] = 0;
; 4503 :     for(i = 0; i < length; i++) transkey[i] = data[begin + i];
; 4504 : 
; 4505 :     /*read the actual text*/
; 4506 :     begin += length + 1;
; 4507 : 
; 4508 :     length = chunkLength < begin ? 0 : chunkLength - begin;
; 4509 : 
; 4510 :     if(compressed)
; 4511 :     {
; 4512 :       /*will fail if zlib error, e.g. if length is too small*/
; 4513 :       error = zlib_decompress(&decoded.data, &decoded.size,
; 4514 :                               (unsigned char*)(&data[begin]),
; 4515 :                               length, zlibsettings);
; 4516 :       if(error) break;
; 4517 :       if(decoded.allocsize < decoded.size) decoded.allocsize = decoded.size;
; 4518 :       ucvector_push_back(&decoded, 0);
; 4519 :     }
; 4520 :     else
; 4521 :     {
; 4522 :       if(!ucvector_resize(&decoded, length + 1)) CERROR_BREAK(error, 83 /*alloc fail*/);
; 4523 : 
; 4524 :       decoded.data[length] = 0;
; 4525 :       for(i = 0; i < length; i++) decoded.data[i] = data[begin + i];
; 4526 :     }
; 4527 : 
; 4528 :     error = lodepng_add_itext(info, key, langtag, transkey, (char*)decoded.data);
; 4529 : 
; 4530 :     break;
; 4531 :   }
; 4532 : 
; 4533 :   lodepng_free(key);
; 4534 :   lodepng_free(langtag);
; 4535 :   lodepng_free(transkey);
; 4536 :   ucvector_cleanup(&decoded);
; 4537 : 
; 4538 :   return error;
; 4539 : }
; 4540 : 
; 4541 : static unsigned readChunk_tIME(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4542 : {
; 4543 :   if(chunkLength != 7) return 73; /*invalid tIME chunk size*/
; 4544 : 
; 4545 :   info->time_defined = 1;
; 4546 :   info->time.year = 256 * data[0] + data[+ 1];
; 4547 :   info->time.month = data[2];
; 4548 :   info->time.day = data[3];
; 4549 :   info->time.hour = data[4];
; 4550 :   info->time.minute = data[5];
; 4551 :   info->time.second = data[6];
; 4552 : 
; 4553 :   return 0; /* OK */
; 4554 : }
; 4555 : 
; 4556 : static unsigned readChunk_pHYs(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4557 : {
; 4558 :   if(chunkLength != 9) return 74; /*invalid pHYs chunk size*/
; 4559 : 
; 4560 :   info->phys_defined = 1;
; 4561 :   info->phys_x = 16777216 * data[0] + 65536 * data[1] + 256 * data[2] + data[3];
; 4562 :   info->phys_y = 16777216 * data[4] + 65536 * data[5] + 256 * data[6] + data[7];
; 4563 :   info->phys_unit = data[8];
; 4564 : 
; 4565 :   return 0; /* OK */
; 4566 : }
; 4567 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4568 : 
; 4569 : /*read a PNG, the result will be in the same color type as the PNG (hence "generic")*/
; 4570 : static void decodeGeneric(unsigned char** out, unsigned* w, unsigned* h,
; 4571 :                           LodePNGState* state,
; 4572 :                           const unsigned char* in, size_t insize)
; 4573 : {
; 4574 :   unsigned char IEND = 0;
; 4575 :   const unsigned char* chunk;
; 4576 :   size_t i;
; 4577 :   ucvector idat; /*the data from idat chunks*/
; 4578 : 
; 4579 :   /*for unknown chunk order*/
; 4580 :   unsigned unknown = 0;
; 4581 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4582 :   unsigned critical_pos = 1; /*1 = after IHDR, 2 = after PLTE, 3 = after IDAT*/
; 4583 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4584 : 
; 4585 :   /*provide some proper output values if error will happen*/
; 4586 :   *out = 0;
; 4587 : 
; 4588 :   state->error = lodepng_inspect(w, h, state, in, insize); /*reads header and resets other parameters in state->info_png*/
; 4589 :   if(state->error) return;
; 4590 : 
; 4591 :   ucvector_init(&idat);
; 4592 :   chunk = &in[33]; /*first byte of the first chunk after the header*/
; 4593 : 
; 4594 :   /*loop through the chunks, ignoring unknown chunks and stopping at IEND chunk.
; 4595 :   IDAT data is put at the start of the in buffer*/
; 4596 :   while(!IEND && !state->error)
; 4597 :   {
; 4598 :     unsigned chunkLength;
; 4599 :     const unsigned char* data; /*the data in the chunk*/
; 4600 : 
; 4601 :     /*error: size of the in buffer too small to contain next chunk*/
; 4602 :     if((size_t)((chunk - in) + 12) > insize || chunk < in) CERROR_BREAK(state->error, 30);
; 4603 : 
; 4604 :     /*length of the data of the chunk, excluding the length bytes, chunk type and CRC bytes*/
; 4605 :     chunkLength = lodepng_chunk_length(chunk);
; 4606 :     /*error: chunk length larger than the max PNG chunk size*/
; 4607 :     if(chunkLength > 2147483647) CERROR_BREAK(state->error, 63);
; 4608 : 
; 4609 :     if((size_t)((chunk - in) + chunkLength + 12) > insize || (chunk + chunkLength + 12) < in)
; 4610 :     {
; 4611 :       CERROR_BREAK(state->error, 64); /*error: size of the in buffer too small to contain next chunk*/
; 4612 :     }
; 4613 : 
; 4614 :     data = lodepng_chunk_data_const(chunk);
; 4615 : 
; 4616 :     /*IDAT chunk, containing compressed image data*/
; 4617 :     if(lodepng_chunk_type_equals(chunk, "IDAT"))
; 4618 :     {
; 4619 :       size_t oldsize = idat.size;
; 4620 :       if(!ucvector_resize(&idat, oldsize + chunkLength)) CERROR_BREAK(state->error, 83 /*alloc fail*/);
; 4621 :       for(i = 0; i < chunkLength; i++) idat.data[oldsize + i] = data[i];
; 4622 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4623 :       critical_pos = 3;
; 4624 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4625 :     }
; 4626 :     /*IEND chunk*/
; 4627 :     else if(lodepng_chunk_type_equals(chunk, "IEND"))
; 4628 :     {
; 4629 :       IEND = 1;
; 4630 :     }
; 4631 :     /*palette chunk (PLTE)*/
; 4632 :     else if(lodepng_chunk_type_equals(chunk, "PLTE"))
; 4633 :     {
; 4634 :       state->error = readChunk_PLTE(&state->info_png.color, data, chunkLength);
; 4635 :       if(state->error) break;
; 4636 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4637 :       critical_pos = 2;
; 4638 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4639 :     }
; 4640 :     /*palette transparency chunk (tRNS)*/
; 4641 :     else if(lodepng_chunk_type_equals(chunk, "tRNS"))
; 4642 :     {
; 4643 :       state->error = readChunk_tRNS(&state->info_png.color, data, chunkLength);
; 4644 :       if(state->error) break;
; 4645 :     }
; 4646 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4647 :     /*background color chunk (bKGD)*/
; 4648 :     else if(lodepng_chunk_type_equals(chunk, "bKGD"))
; 4649 :     {
; 4650 :       state->error = readChunk_bKGD(&state->info_png, data, chunkLength);
; 4651 :       if(state->error) break;
; 4652 :     }
; 4653 :     /*text chunk (tEXt)*/
; 4654 :     else if(lodepng_chunk_type_equals(chunk, "tEXt"))
; 4655 :     {
; 4656 :       if(state->decoder.read_text_chunks)
; 4657 :       {
; 4658 :         state->error = readChunk_tEXt(&state->info_png, data, chunkLength);
; 4659 :         if(state->error) break;
; 4660 :       }
; 4661 :     }
; 4662 :     /*compressed text chunk (zTXt)*/
; 4663 :     else if(lodepng_chunk_type_equals(chunk, "zTXt"))
; 4664 :     {
; 4665 :       if(state->decoder.read_text_chunks)
; 4666 :       {
; 4667 :         state->error = readChunk_zTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);
; 4668 :         if(state->error) break;
; 4669 :       }
; 4670 :     }
; 4671 :     /*international text chunk (iTXt)*/
; 4672 :     else if(lodepng_chunk_type_equals(chunk, "iTXt"))
; 4673 :     {
; 4674 :       if(state->decoder.read_text_chunks)
; 4675 :       {
; 4676 :         state->error = readChunk_iTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);
; 4677 :         if(state->error) break;
; 4678 :       }
; 4679 :     }
; 4680 :     else if(lodepng_chunk_type_equals(chunk, "tIME"))
; 4681 :     {
; 4682 :       state->error = readChunk_tIME(&state->info_png, data, chunkLength);
; 4683 :       if(state->error) break;
; 4684 :     }
; 4685 :     else if(lodepng_chunk_type_equals(chunk, "pHYs"))
; 4686 :     {
; 4687 :       state->error = readChunk_pHYs(&state->info_png, data, chunkLength);
; 4688 :       if(state->error) break;
; 4689 :     }
; 4690 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4691 :     else /*it's not an implemented chunk type, so ignore it: skip over the data*/
; 4692 :     {
; 4693 :       /*error: unknown critical chunk (5th bit of first byte of chunk type is 0)*/
; 4694 :       if(!lodepng_chunk_ancillary(chunk)) CERROR_BREAK(state->error, 69);
; 4695 : 
; 4696 :       unknown = 1;
; 4697 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4698 :       if(state->decoder.remember_unknown_chunks)
; 4699 :       {
; 4700 :         state->error = lodepng_chunk_append(&state->info_png.unknown_chunks_data[critical_pos - 1],
; 4701 :                                             &state->info_png.unknown_chunks_size[critical_pos - 1], chunk);
; 4702 :         if(state->error) break;
; 4703 :       }
; 4704 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4705 :     }
; 4706 : 
; 4707 :     if(!state->decoder.ignore_crc && !unknown) /*check CRC if wanted, only on known chunk types*/
; 4708 :     {
; 4709 :       if(lodepng_chunk_check_crc(chunk)) CERROR_BREAK(state->error, 57); /*invalid CRC*/
; 4710 :     }
; 4711 : 
; 4712 :     if(!IEND) chunk = lodepng_chunk_next_const(chunk);
; 4713 :   }
; 4714 : 
; 4715 :   if(!state->error)
; 4716 :   {
; 4717 :     ucvector scanlines;
; 4718 :     ucvector_init(&scanlines);
; 4719 : 
; 4720 :     /*maximum final image length is already reserved in the vector's length - this is not really necessary*/
; 4721 :     if(!ucvector_resize(&scanlines, lodepng_get_raw_size(*w, *h, &state->info_png.color) + *h))
; 4722 :     {
; 4723 :       state->error = 83; /*alloc fail*/
; 4724 :     }
; 4725 :     if(!state->error)
; 4726 :     {
; 4727 :       /*decompress with the Zlib decompressor*/
; 4728 :       state->error = zlib_decompress(&scanlines.data, &scanlines.size, idat.data,
; 4729 :                                      idat.size, &state->decoder.zlibsettings);
; 4730 :     }
; 4731 : 
; 4732 :     if(!state->error)
; 4733 :     {
; 4734 :       ucvector outv;
; 4735 :       ucvector_init(&outv);
; 4736 :       if(!ucvector_resizev(&outv,
; 4737 :           lodepng_get_raw_size(*w, *h, &state->info_png.color), 0)) state->error = 83; /*alloc fail*/
; 4738 :       if(!state->error) state->error = postProcessScanlines(outv.data, scanlines.data, *w, *h, &state->info_png);
; 4739 :       *out = outv.data;
; 4740 :     }
; 4741 :     ucvector_cleanup(&scanlines);
; 4742 :   }
; 4743 : 
; 4744 :   ucvector_cleanup(&idat);
; 4745 : }
; 4746 : 
; 4747 : unsigned lodepng_decode(unsigned char** out, unsigned* w, unsigned* h,
; 4748 :                         LodePNGState* state,
; 4749 :                         const unsigned char* in, size_t insize)
; 4750 : {
; 4751 :   *out = 0;
; 4752 :   decodeGeneric(out, w, h, state, in, insize);
; 4753 :   if(state->error) return state->error;
; 4754 :   if(!state->decoder.color_convert || lodepng_color_mode_equal(&state->info_raw, &state->info_png.color))
; 4755 :   {
; 4756 :     /*same color type, no copying or converting of data needed*/
; 4757 :     /*store the info_png color settings on the info_raw so that the info_raw still reflects what colortype
; 4758 :     the raw image has to the end user*/
; 4759 :     if(!state->decoder.color_convert)
; 4760 :     {
; 4761 :       state->error = lodepng_color_mode_copy(&state->info_raw, &state->info_png.color);
; 4762 :       if(state->error) return state->error;
; 4763 :     }
; 4764 :   }
; 4765 :   else
; 4766 :   {
; 4767 :     /*color conversion needed; sort of copy of the data*/
; 4768 :     unsigned char* data = *out;
; 4769 :     size_t outsize;
; 4770 : 
; 4771 :     /*TODO: check if this works according to the statement in the documentation: "The converter can convert
; 4772 :     from greyscale input color type, to 8-bit greyscale or greyscale with alpha"*/
; 4773 :     if(!(state->info_raw.colortype == LCT_RGB || state->info_raw.colortype == LCT_RGBA)
; 4774 :        && !(state->info_raw.bitdepth == 8))
; 4775 :     {
; 4776 :       return 56; /*unsupported color mode conversion*/
; 4777 :     }
; 4778 : 
; 4779 :     outsize = lodepng_get_raw_size(*w, *h, &state->info_raw);
; 4780 :     *out = (unsigned char*)lodepng_malloc(outsize);
; 4781 :     if(!(*out))
; 4782 :     {
; 4783 :       state->error = 83; /*alloc fail*/
; 4784 :     }
; 4785 :     else state->error = lodepng_convert(*out, data, &state->info_raw, &state->info_png.color, *w, *h, state->decoder.fix_png);
; 4786 :     lodepng_free(data);
; 4787 :   }
; 4788 :   return state->error;
; 4789 : }
; 4790 : 
; 4791 : unsigned lodepng_decode_memory(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in,
; 4792 :                                size_t insize, LodePNGColorType colortype, unsigned bitdepth)
; 4793 : {
; 4794 :   unsigned error;
; 4795 :   LodePNGState state;
; 4796 :   lodepng_state_init(&state);
; 4797 :   state.info_raw.colortype = colortype;
; 4798 :   state.info_raw.bitdepth = bitdepth;
; 4799 :   error = lodepng_decode(out, w, h, &state, in, insize);
; 4800 :   lodepng_state_cleanup(&state);
; 4801 :   return error;
; 4802 : }
; 4803 : 
; 4804 : unsigned lodepng_decode32(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4805 : {
; 4806 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGBA, 8);
; 4807 : }
; 4808 : 
; 4809 : unsigned lodepng_decode24(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4810 : {
; 4811 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGB, 8);
; 4812 : }
; 4813 : 
; 4814 : #ifdef LODEPNG_COMPILE_DISK
; 4815 : unsigned lodepng_decode_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename,
; 4816 :                              LodePNGColorType colortype, unsigned bitdepth)
; 4817 : {
; 4818 :   unsigned char* buffer;
; 4819 :   size_t buffersize;
; 4820 :   unsigned error;
; 4821 :   error = lodepng_load_file(&buffer, &buffersize, filename);
; 4822 :   if(!error) error = lodepng_decode_memory(out, w, h, buffer, buffersize, colortype, bitdepth);
; 4823 :   lodepng_free(buffer);
; 4824 :   return error;
; 4825 : }
; 4826 : 
; 4827 : unsigned lodepng_decode32_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4828 : {
; 4829 :   return lodepng_decode_file(out, w, h, filename, LCT_RGBA, 8);
; 4830 : }
; 4831 : 
; 4832 : unsigned lodepng_decode24_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4833 : {
; 4834 :   return lodepng_decode_file(out, w, h, filename, LCT_RGB, 8);
; 4835 : }
; 4836 : #endif /*LODEPNG_COMPILE_DISK*/
; 4837 : 
; 4838 : void lodepng_decoder_settings_init(LodePNGDecoderSettings* settings)
; 4839 : {
; 4840 :   settings->color_convert = 1;
; 4841 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4842 :   settings->read_text_chunks = 1;
; 4843 :   settings->remember_unknown_chunks = 0;
; 4844 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4845 :   settings->ignore_crc = 0;
; 4846 :   settings->fix_png = 0;
; 4847 :   lodepng_decompress_settings_init(&settings->zlibsettings);
; 4848 : }
; 4849 : 
; 4850 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4851 : 
; 4852 : #if defined(LODEPNG_COMPILE_DECODER) || defined(LODEPNG_COMPILE_ENCODER)
; 4853 : 
; 4854 : void lodepng_state_init(LodePNGState* state)
; 4855 : {
; 4856 : #ifdef LODEPNG_COMPILE_DECODER
; 4857 :   lodepng_decoder_settings_init(&state->decoder);
; 4858 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4859 : #ifdef LODEPNG_COMPILE_ENCODER
; 4860 :   lodepng_encoder_settings_init(&state->encoder);
; 4861 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 4862 :   lodepng_color_mode_init(&state->info_raw);
; 4863 :   lodepng_info_init(&state->info_png);
; 4864 :   state->error = 1;
; 4865 : }
; 4866 : 
; 4867 : void lodepng_state_cleanup(LodePNGState* state)
; 4868 : {
; 4869 :   lodepng_color_mode_cleanup(&state->info_raw);
; 4870 :   lodepng_info_cleanup(&state->info_png);

  00030	e8 00 00 00 00	 call	 ?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z ; lodepng_info_cleanup
  00035	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.h

; 644  :   virtual ~LodePNGState(){}

  00039	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7LodePNGState@@6B@
  0003f	74 09		 je	 SHORT $LN17@scalar
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00047	83 c4 04	 add	 esp, 4
$LN17@scalar:
  0004a	8b c6		 mov	 eax, esi
  0004c	5e		 pop	 esi
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
??_GState@lodepng@@UAEPAXI@Z ENDP			; lodepng::State::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ??1State@lodepng@@UAE@XZ
_TEXT	SEGMENT
??1State@lodepng@@UAE@XZ PROC				; lodepng::State::~State, COMDAT
; _this$ = ecx

; 6132 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7State@lodepng@@6B@

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
; 945  :     (*bp)++;
; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);
; 965  :   generateFixedDistanceTree(tree_d);
; 966  : }
; 967  : 
; 968  : /*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
; 969  : static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
; 970  :                                       const unsigned char* in, size_t* bp, size_t inlength)
; 971  : {
; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;
; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/
; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;
; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;
; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;
; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)
; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
; 1009 :     if(error) break;
; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;
; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;
; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;
; 1020 :     while(i < HLIT + HDIST)
; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
; 1023 :       if(code <= 15) /*a length code*/
; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;
; 1026 :         else bitlen_d[i - HLIT] = code;
; 1027 :         i++;
; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/
; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);
; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];
; 1040 :         else value = bitlen_d[i - HLIT - 1];
; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)
; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
; 1045 :           if(i < HLIT) bitlen_ll[i] = value;
; 1046 :           else bitlen_d[i - HLIT] = value;
; 1047 :           i++;
; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/
; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);
; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)
; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1063 :           else bitlen_d[i - HLIT] = 0;
; 1064 :           i++;
; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/
; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);
; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)
; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1080 :           else bitlen_d[i - HLIT] = 0;
; 1081 :           i++;
; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))
; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;
; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/
; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;
; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 1102 :     if(error) break;
; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
; 1104 : 
; 1105 :     break; /*end of error-while*/
; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;
; 1114 : }
; 1115 : 
; 1116 : /*inflate a block with dynamic of fixed Huffman tree*/
; 1117 : static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
; 1118 :                                     size_t* pos, size_t inlength, unsigned btype)
; 1119 : {
; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;
; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/
; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/
; 1136 :     {
; 1137 :       if((*pos) >= out->size)
; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);
; 1143 :       (*pos)++;
; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);
; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
; 1161 :       if(code_d > 29)
; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;
; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/
; 1170 :         break;
; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);
; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);
; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)
; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)
; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];
; 1193 :         (*pos)++;
; 1194 :         backward++;
; 1195 :         if(backward >= start) backward = start - distance;
; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)
; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;
; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;
; 1215 : }
; 1216 : 
; 1217 : static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
; 1218 : {
; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;
; 1223 :   p = (*bp) / 8; /*byte position*/
; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/
; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;
; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;
; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)
; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];
; 1241 : 
; 1242 :   (*bp) = p * 8;
; 1243 : 
; 1244 :   return error;
; 1245 : }
; 1246 : 
; 1247 : static unsigned lodepng_inflatev(ucvector* out,
; 1248 :                                  const unsigned char* in, size_t insize,
; 1249 :                                  const LodePNGDecompressSettings* settings)
; 1250 : {
; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;
; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/
; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)
; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
; 1264 :     BFINAL = readBitFromStream(&bp, in);
; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);
; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
; 1271 : 
; 1272 :     if(error) return error;
; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/
; 1277 : 
; 1278 :   return error;
; 1279 : }
; 1280 : 
; 1281 : unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
; 1282 :                          const unsigned char* in, size_t insize,
; 1283 :                          const LodePNGDecompressSettings* settings)
; 1284 : {
; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);
; 1289 :   *out = v.data;
; 1290 :   *outsize = v.size;
; 1291 :   return error;
; 1292 : }
; 1293 : 
; 1294 : static unsigned inflate(unsigned char** out, size_t* outsize,
; 1295 :                         const unsigned char* in, size_t insize,
; 1296 :                         const LodePNGDecompressSettings* settings)
; 1297 : {
; 1298 :   if(settings->custom_inflate)
; 1299 :   {
; 1300 :     return settings->custom_inflate(out, outsize, in, insize, settings);
; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }
; 1307 : 
; 1308 : #endif /*LODEPNG_COMPILE_DECODER*/
; 1309 : 
; 1310 : #ifdef LODEPNG_COMPILE_ENCODER
; 1311 : 
; 1312 : /* ////////////////////////////////////////////////////////////////////////// */
; 1313 : /* / Deflator (Compressor)                                                  / */
; 1314 : /* ////////////////////////////////////////////////////////////////////////// */
; 1315 : 
; 1316 : static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;
; 1317 : 
; 1318 : /*bitlen is the size in bits of the code*/
; 1319 : static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)
; 1320 : {
; 1321 :   addBitsToStreamReversed(bp, compressed, code, bitlen);
; 1322 : }
; 1323 : 
; 1324 : /*search the index in the array, that has the largest value smaller than or equal to the given value,
; 1325 : given array must be sorted (if no value is smaller, it returns the size of the given array)*/
; 1326 : static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)
; 1327 : {
; 1328 :   /*linear search implementation*/
; 1329 :   /*for(size_t i = 1; i < array_size; i++) if(array[i] > value) return i - 1;
; 1330 :   return array_size - 1;*/
; 1331 : 
; 1332 :   /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
; 1333 :   size_t left  = 1;
; 1334 :   size_t right = array_size - 1;
; 1335 :   while(left <= right)
; 1336 :   {
; 1337 :     size_t mid = (left + right) / 2;
; 1338 :     if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
; 1339 :     else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
; 1340 :     else return mid - 1;
; 1341 :   }
; 1342 :   return array_size - 1;
; 1343 : }
; 1344 : 
; 1345 : static void addLengthDistance(uivector* values, size_t length, size_t distance)
; 1346 : {
; 1347 :   /*values in encoded vector are those used by deflate:
; 1348 :   0-255: literal bytes
; 1349 :   256: end
; 1350 :   257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
; 1351 :   286-287: invalid*/
; 1352 : 
; 1353 :   unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
; 1354 :   unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
; 1355 :   unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
; 1356 :   unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);
; 1357 : 
; 1358 :   uivector_push_back(values, length_code + FIRST_LENGTH_CODE_INDEX);
; 1359 :   uivector_push_back(values, extra_length);
; 1360 :   uivector_push_back(values, dist_code);
; 1361 :   uivector_push_back(values, extra_distance);
; 1362 : }
; 1363 : 
; 1364 : static const unsigned HASH_NUM_VALUES = 65536;
; 1365 : static const unsigned HASH_NUM_CHARACTERS = 3;
; 1366 : static const unsigned HASH_SHIFT = 2;
; 1367 : /*
; 1368 : The HASH_NUM_CHARACTERS value is used to make encoding faster by using longer
; 1369 : sequences to generate a hash value from the stream bytes. Setting it to 3
; 1370 : gives exactly the same compression as the brute force method, since deflate's
; 1371 : run length encoding starts with lengths of 3. Setting it to higher values,
; 1372 : like 6, can make the encoding faster (not always though!), but will cause the
; 1373 : encoding to miss any length between 3 and this value, so that the compression
; 1374 : may be worse (but this can vary too depending on the image, sometimes it is
; 1375 : even a bit better instead).
; 1376 : The HASH_NUM_VALUES is the amount of unique possible hash values that
; 1377 : combinations of bytes can give, the higher it is the more memory is needed, but
; 1378 : if it's too low the advantage of hashing is gone.
; 1379 : */
; 1380 : 
; 1381 : typedef struct Hash
; 1382 : {
; 1383 :   int* head; /*hash value to head circular pos*/
; 1384 :   int* val; /*circular pos to hash value*/
; 1385 :   /*circular pos to prev circular pos*/
; 1386 :   unsigned short* chain;
; 1387 :   unsigned short* zeros;
; 1388 : } Hash;
; 1389 : 
; 1390 : static unsigned hash_init(Hash* hash, unsigned windowsize)
; 1391 : {
; 1392 :   unsigned i;
; 1393 :   hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
; 1394 :   hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
; 1395 :   hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1396 :   hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1397 : 
; 1398 :   if(!hash->head || !hash->val || !hash->chain || !hash->zeros) return 83; /*alloc fail*/
; 1399 : 
; 1400 :   /*initialize hash table*/
; 1401 :   for(i = 0; i < HASH_NUM_VALUES; i++) hash->head[i] = -1;
; 1402 :   for(i = 0; i < windowsize; i++) hash->val[i] = -1;
; 1403 :   for(i = 0; i < windowsize; i++) hash->chain[i] = i; /*same value as index indicates uninitialized*/
; 1404 : 
; 1405 :   return 0;
; 1406 : }
; 1407 : 
; 1408 : static void hash_cleanup(Hash* hash)
; 1409 : {
; 1410 :   lodepng_free(hash->head);
; 1411 :   lodepng_free(hash->val);
; 1412 :   lodepng_free(hash->chain);
; 1413 :   lodepng_free(hash->zeros);
; 1414 : }
; 1415 : 
; 1416 : static unsigned getHash(const unsigned char* data, size_t size, size_t pos)
; 1417 : {
; 1418 :   unsigned result = 0;
; 1419 :   size_t amount, i;
; 1420 :   if(pos >= size) return 0;
; 1421 :   amount = HASH_NUM_CHARACTERS;
; 1422 :   if(pos + amount >= size) amount = size - pos;
; 1423 :   for(i = 0; i < amount; i++) result ^= (data[pos + i] << (i * HASH_SHIFT));
; 1424 :   return result % HASH_NUM_VALUES;
; 1425 : }
; 1426 : 
; 1427 : static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)
; 1428 : {
; 1429 :   const unsigned char* start = data + pos;
; 1430 :   const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
; 1431 :   if(end > data + size) end = data + size;
; 1432 :   data = start;
; 1433 :   while (data != end && *data == 0) data++;
; 1434 :   /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
; 1435 :   return (unsigned)(data - start);
; 1436 : }
; 1437 : 
; 1438 : static void updateHashChain(Hash* hash, size_t pos, int hashval, unsigned windowsize)
; 1439 : {
; 1440 :   unsigned wpos = pos % windowsize;
; 1441 :   hash->val[wpos] = hashval;
; 1442 :   if(hash->head[hashval] != -1) hash->chain[wpos] = hash->head[hashval];
; 1443 :   hash->head[hashval] = wpos;
; 1444 : }
; 1445 : 
; 1446 : /*
; 1447 : LZ77-encode the data. Return value is error code. The input are raw bytes, the output
; 1448 : is in the form of unsigned integers with codes representing for example literal bytes, or
; 1449 : length/distance pairs.
; 1450 : It uses a hash table technique to let it encode faster. When doing LZ77 encoding, a
; 1451 : sliding window (of windowsize) is used, and all past bytes in that window can be used as
; 1452 : the "dictionary". A brute force search through all possible distances would be slow, and
; 1453 : this hash technique is one out of several ways to speed this up.
; 1454 : */
; 1455 : static unsigned encodeLZ77(uivector* out, Hash* hash,
; 1456 :                            const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
; 1457 :                            unsigned minmatch, unsigned nicematch, unsigned lazymatching)
; 1458 : {
; 1459 :   unsigned short numzeros = 0;
; 1460 :   int usezeros = windowsize >= 8192; /*for small window size, the 'max chain length' optimization does a better job*/
; 1461 :   unsigned pos, i, error = 0;
; 1462 :   /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
; 1463 :   unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8;
; 1464 :   unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;
; 1465 : 
; 1466 :   if(!error)
; 1467 :   {
; 1468 :     unsigned offset; /*the offset represents the distance in LZ77 terminology*/
; 1469 :     unsigned length;
; 1470 :     unsigned lazy = 0;
; 1471 :     unsigned lazylength = 0, lazyoffset = 0;
; 1472 :     unsigned hashval;
; 1473 :     unsigned current_offset, current_length;
; 1474 :     const unsigned char *lastptr, *foreptr, *backptr;
; 1475 :     unsigned short hashpos, prevpos;
; 1476 : 
; 1477 :     for(pos = inpos; pos < insize; pos++)
; 1478 :     {
; 1479 :       size_t wpos = pos % windowsize; /*position for in 'circular' hash buffers*/
; 1480 : 
; 1481 :       hashval = getHash(in, insize, pos);
; 1482 :       updateHashChain(hash, pos, hashval, windowsize);
; 1483 : 
; 1484 :       if(usezeros && hashval == 0)
; 1485 :       {
; 1486 :         numzeros = countZeros(in, insize, pos);
; 1487 :         hash->zeros[wpos] = numzeros;
; 1488 :       }
; 1489 : 
; 1490 :       /*the length and offset found for the current position*/
; 1491 :       length = 0;
; 1492 :       offset = 0;
; 1493 : 
; 1494 :       prevpos = hash->head[hashval];
; 1495 :       hashpos = hash->chain[prevpos];
; 1496 : 
; 1497 :       lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];
; 1498 : 
; 1499 :       /*search for the longest string*/
; 1500 :       if(hash->val[wpos] == (int)hashval)
; 1501 :       {
; 1502 :         unsigned chainlength = 0;
; 1503 :         for(;;)
; 1504 :         {
; 1505 :           /*stop when went completely around the circular buffer*/
; 1506 :           if(prevpos < wpos && hashpos > prevpos && hashpos <= wpos) break;
; 1507 :           if(prevpos > wpos && (hashpos <= wpos || hashpos > prevpos)) break;
; 1508 :           if(chainlength++ >= maxchainlength) break;
; 1509 : 
; 1510 :           current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;
; 1511 :           if(current_offset > 0)
; 1512 :           {
; 1513 :             /*test the next characters*/
; 1514 :             foreptr = &in[pos];
; 1515 :             backptr = &in[pos - current_offset];
; 1516 : 
; 1517 :             /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
; 1518 :             if(usezeros && hashval == 0 && hash->val[hashpos] == 0 /*hashval[hashpos] may be out of date*/)
; 1519 :             {
; 1520 :               unsigned short skip = hash->zeros[hashpos];
; 1521 :               if(skip > numzeros) skip = numzeros;
; 1522 :               backptr += skip;
; 1523 :               foreptr += skip;
; 1524 :             }
; 1525 : 
; 1526 :             /* multiple checks at once per array bounds check */
; 1527 :             while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
; 1528 :             {
; 1529 :               ++backptr;
; 1530 :               ++foreptr;
; 1531 :             }
; 1532 :             current_length = (unsigned)(foreptr - &in[pos]);
; 1533 : 
; 1534 :             if(current_length > length)
; 1535 :             {
; 1536 :               length = current_length; /*the longest length*/
; 1537 :               offset = current_offset; /*the offset that is related to this longest length*/
; 1538 :               /*jump out once a length of max length is found (speed gain)*/
; 1539 :               if(current_length >= nicematch || current_length == MAX_SUPPORTED_DEFLATE_LENGTH) break;
; 1540 :             }
; 1541 :           }
; 1542 : 
; 1543 :           if(hashpos == hash->chain[hashpos]) break;
; 1544 : 
; 1545 :           prevpos = hashpos;
; 1546 :           hashpos = hash->chain[hashpos];
; 1547 :         }
; 1548 :       }
; 1549 : 
; 1550 :       if(lazymatching)
; 1551 :       {
; 1552 :         if(!lazy && length >= 3 && length <= maxlazymatch && length < MAX_SUPPORTED_DEFLATE_LENGTH)
; 1553 :         {
; 1554 :           lazy = 1;
; 1555 :           lazylength = length;
; 1556 :           lazyoffset = offset;
; 1557 :           continue; /*try the next byte*/
; 1558 :         }
; 1559 :         if(lazy)
; 1560 :         {
; 1561 :           lazy = 0;
; 1562 :           if(pos == 0) ERROR_BREAK(81);
; 1563 :           if(length > lazylength + 1)
; 1564 :           {
; 1565 :             /*push the previous character as literal*/
; 1566 :             if(!uivector_push_back(out, in[pos - 1])) ERROR_BREAK(83 /*alloc fail*/);
; 1567 :           }
; 1568 :           else
; 1569 :           {
; 1570 :             length = lazylength;
; 1571 :             offset = lazyoffset;
; 1572 :             hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
; 1573 :             pos--;
; 1574 :           }
; 1575 :         }
; 1576 :       }
; 1577 :       if(length >= 3 && offset > windowsize) ERROR_BREAK(86 /*too big (or overflown negative) offset*/);
; 1578 : 
; 1579 :       /**encode it as length/distance pair or literal value**/
; 1580 :       if(length < 3) /*only lengths of 3 or higher are supported as length/distance pair*/
; 1581 :       {
; 1582 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1583 :       }
; 1584 :       else if(length < minmatch || (length == 3 && offset > 4096))
; 1585 :       {
; 1586 :         /*compensate for the fact that longer offsets have more extra bits, a
; 1587 :         length of only 3 may be not worth it then*/
; 1588 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1589 :       }
; 1590 :       else
; 1591 :       {
; 1592 :         addLengthDistance(out, length, offset);
; 1593 :         for(i = 1; i < length; i++)
; 1594 :         {
; 1595 :           pos++;
; 1596 :           hashval = getHash(in, insize, pos);
; 1597 :           updateHashChain(hash, pos, hashval, windowsize);
; 1598 :           if(usezeros && hashval == 0)
; 1599 :           {
; 1600 :             hash->zeros[pos % windowsize] = countZeros(in, insize, pos);
; 1601 :           }
; 1602 :         }
; 1603 :       }
; 1604 : 
; 1605 :     } /*end of the loop through each character of input*/
; 1606 :   } /*end of "if(!error)"*/
; 1607 : 
; 1608 :   return error;
; 1609 : }
; 1610 : 
; 1611 : /* /////////////////////////////////////////////////////////////////////////// */
; 1612 : 
; 1613 : static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)
; 1614 : {
; 1615 :   /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
; 1616 :   2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/
; 1617 : 
; 1618 :   size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
; 1619 :   unsigned datapos = 0;
; 1620 :   for(i = 0; i < numdeflateblocks; i++)
; 1621 :   {
; 1622 :     unsigned BFINAL, BTYPE, LEN, NLEN;
; 1623 :     unsigned char firstbyte;
; 1624 : 
; 1625 :     BFINAL = (i == numdeflateblocks - 1);
; 1626 :     BTYPE = 0;
; 1627 : 
; 1628 :     firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1) << 1) + ((BTYPE & 2) << 1));
; 1629 :     ucvector_push_back(out, firstbyte);
; 1630 : 
; 1631 :     LEN = 65535;
; 1632 :     if(datasize - datapos < 65535) LEN = (unsigned)datasize - datapos;
; 1633 :     NLEN = 65535 - LEN;
; 1634 : 
; 1635 :     ucvector_push_back(out, (unsigned char)(LEN % 256));
; 1636 :     ucvector_push_back(out, (unsigned char)(LEN / 256));
; 1637 :     ucvector_push_back(out, (unsigned char)(NLEN % 256));
; 1638 :     ucvector_push_back(out, (unsigned char)(NLEN / 256));
; 1639 : 
; 1640 :     /*Decompressed data*/
; 1641 :     for(j = 0; j < 65535 && datapos < datasize; j++)
; 1642 :     {
; 1643 :       ucvector_push_back(out, data[datapos++]);
; 1644 :     }
; 1645 :   }
; 1646 : 
; 1647 :   return 0;
; 1648 : }
; 1649 : 
; 1650 : /*
; 1651 : write the lz77-encoded data, which has lit, len and dist codes, to compressed stream using huffman trees.
; 1652 : tree_ll: the tree for lit and len codes.
; 1653 : tree_d: the tree for distance codes.
; 1654 : */
; 1655 : static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
; 1656 :                           const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
; 1657 : {
; 1658 :   size_t i = 0;
; 1659 :   for(i = 0; i < lz77_encoded->size; i++)
; 1660 :   {
; 1661 :     unsigned val = lz77_encoded->data[i];
; 1662 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_ll, val), HuffmanTree_getLength(tree_ll, val));
; 1663 :     if(val > 256) /*for a length code, 3 more things have to be added*/
; 1664 :     {
; 1665 :       unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
; 1666 :       unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
; 1667 :       unsigned length_extra_bits = lz77_encoded->data[++i];
; 1668 : 
; 1669 :       unsigned distance_code = lz77_encoded->data[++i];
; 1670 : 
; 1671 :       unsigned distance_index = distance_code;
; 1672 :       unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
; 1673 :       unsigned distance_extra_bits = lz77_encoded->data[++i];
; 1674 : 
; 1675 :       addBitsToStream(bp, out, length_extra_bits, n_length_extra_bits);
; 1676 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
; 1677 :                        HuffmanTree_getLength(tree_d, distance_code));
; 1678 :       addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
; 1679 :     }
; 1680 :   }
; 1681 : }
; 1682 : 
; 1683 : /*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
; 1684 : static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,
; 1685 :                                const unsigned char* data, size_t datapos, size_t dataend,
; 1686 :                                const LodePNGCompressSettings* settings, int final)
; 1687 : {
; 1688 :   unsigned error = 0;
; 1689 : 
; 1690 :   /*
; 1691 :   A block is compressed as follows: The PNG data is lz77 encoded, resulting in
; 1692 :   literal bytes and length/distance pairs. This is then huffman compressed with
; 1693 :   two huffman trees. One huffman tree is used for the lit and len values ("ll"),
; 1694 :   another huffman tree is used for the dist values ("d"). These two trees are
; 1695 :   stored using their code lengths, and to compress even more these code lengths
; 1696 :   are also run-length encoded and huffman compressed. This gives a huffman tree
; 1697 :   of code lengths "cl". The code lenghts used to describe this third tree are
; 1698 :   the code length code lengths ("clcl").
; 1699 :   */
; 1700 : 
; 1701 :   /*The lz77 encoded data, represented with integers since there will also be length and distance codes in it*/
; 1702 :   uivector lz77_encoded;
; 1703 :   HuffmanTree tree_ll; /*tree for lit,len values*/
; 1704 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1705 :   HuffmanTree tree_cl; /*tree for encoding the code lengths representing tree_ll and tree_d*/
; 1706 :   uivector frequencies_ll; /*frequency of lit,len codes*/
; 1707 :   uivector frequencies_d; /*frequency of dist codes*/
; 1708 :   uivector frequencies_cl; /*frequency of code length codes*/
; 1709 :   uivector bitlen_lld; /*lit,len,dist code lenghts (int bits), literally (without repeat codes).*/
; 1710 :   uivector bitlen_lld_e; /*bitlen_lld encoded with repeat codes (this is a rudemtary run length compression)*/
; 1711 :   /*bitlen_cl is the code length code lengths ("clcl"). The bit lengths of codes to represent tree_cl
; 1712 :   (these are written as is in the file, it would be crazy to compress these using yet another huffman
; 1713 :   tree that needs to be represented by yet another set of code lengths)*/
; 1714 :   uivector bitlen_cl;
; 1715 :   size_t datasize = dataend - datapos;
; 1716 : 
; 1717 :   /*
; 1718 :   Due to the huffman compression of huffman tree representations ("two levels"), there are some anologies:
; 1719 :   bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
; 1720 :   bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
; 1721 :   bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
; 1722 :   */
; 1723 : 
; 1724 :   unsigned BFINAL = final;
; 1725 :   size_t numcodes_ll, numcodes_d, i;
; 1726 :   unsigned HLIT, HDIST, HCLEN;
; 1727 : 
; 1728 :   uivector_init(&lz77_encoded);
; 1729 :   HuffmanTree_init(&tree_ll);
; 1730 :   HuffmanTree_init(&tree_d);
; 1731 :   HuffmanTree_init(&tree_cl);
; 1732 :   uivector_init(&frequencies_ll);
; 1733 :   uivector_init(&frequencies_d);
; 1734 :   uivector_init(&frequencies_cl);
; 1735 :   uivector_init(&bitlen_lld);
; 1736 :   uivector_init(&bitlen_lld_e);
; 1737 :   uivector_init(&bitlen_cl);
; 1738 : 
; 1739 :   /*This while loop never loops due to a break at the end, it is here to
; 1740 :   allow breaking out of it to the cleanup phase on error conditions.*/
; 1741 :   while(!error)
; 1742 :   {
; 1743 :     if(settings->use_lz77)
; 1744 :     {
; 1745 :       error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1746 :                          settings->minmatch, settings->nicematch, settings->lazymatching);
; 1747 :       if(error) break;
; 1748 :     }
; 1749 :     else
; 1750 :     {
; 1751 :       if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83 /*alloc fail*/);
; 1752 :       for(i = datapos; i < dataend; i++) lz77_encoded.data[i] = data[i]; /*no LZ77, but still will be Huffman compressed*/
; 1753 :     }
; 1754 : 
; 1755 :     if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1756 :     if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1757 : 
; 1758 :     /*Count the frequencies of lit, len and dist codes*/
; 1759 :     for(i = 0; i < lz77_encoded.size; i++)
; 1760 :     {
; 1761 :       unsigned symbol = lz77_encoded.data[i];
; 1762 :       frequencies_ll.data[symbol]++;
; 1763 :       if(symbol > 256)
; 1764 :       {
; 1765 :         unsigned dist = lz77_encoded.data[i + 2];
; 1766 :         frequencies_d.data[dist]++;
; 1767 :         i += 3;
; 1768 :       }
; 1769 :     }
; 1770 :     frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/
; 1771 : 
; 1772 :     /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
; 1773 :     error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
; 1774 :     if(error) break;
; 1775 :     /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
; 1776 :     error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
; 1777 :     if(error) break;
; 1778 : 
; 1779 :     numcodes_ll = tree_ll.numcodes; if(numcodes_ll > 286) numcodes_ll = 286;
; 1780 :     numcodes_d = tree_d.numcodes; if(numcodes_d > 30) numcodes_d = 30;
; 1781 :     /*store the code lengths of both generated trees in bitlen_lld*/
; 1782 :     for(i = 0; i < numcodes_ll; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
; 1783 :     for(i = 0; i < numcodes_d; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));
; 1784 : 
; 1785 :     /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
; 1786 :     17 (3-10 zeroes), 18 (11-138 zeroes)*/
; 1787 :     for(i = 0; i < (unsigned)bitlen_lld.size; i++)
; 1788 :     {
; 1789 :       unsigned j = 0; /*amount of repititions*/
; 1790 :       while(i + j + 1 < (unsigned)bitlen_lld.size && bitlen_lld.data[i + j + 1] == bitlen_lld.data[i]) j++;
; 1791 : 
; 1792 :       if(bitlen_lld.data[i] == 0 && j >= 2) /*repeat code for zeroes*/
; 1793 :       {
; 1794 :         j++; /*include the first zero*/
; 1795 :         if(j <= 10) /*repeat code 17 supports max 10 zeroes*/
; 1796 :         {
; 1797 :           uivector_push_back(&bitlen_lld_e, 17);
; 1798 :           uivector_push_back(&bitlen_lld_e, j - 3);
; 1799 :         }
; 1800 :         else /*repeat code 18 supports max 138 zeroes*/
; 1801 :         {
; 1802 :           if(j > 138) j = 138;
; 1803 :           uivector_push_back(&bitlen_lld_e, 18);
; 1804 :           uivector_push_back(&bitlen_lld_e, j - 11);
; 1805 :         }
; 1806 :         i += (j - 1);
; 1807 :       }
; 1808 :       else if(j >= 3) /*repeat code for value other than zero*/
; 1809 :       {
; 1810 :         size_t k;
; 1811 :         unsigned num = j / 6, rest = j % 6;
; 1812 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1813 :         for(k = 0; k < num; k++)
; 1814 :         {
; 1815 :           uivector_push_back(&bitlen_lld_e, 16);
; 1816 :           uivector_push_back(&bitlen_lld_e, 6 - 3);
; 1817 :         }
; 1818 :         if(rest >= 3)
; 1819 :         {
; 1820 :           uivector_push_back(&bitlen_lld_e, 16);
; 1821 :           uivector_push_back(&bitlen_lld_e, rest - 3);
; 1822 :         }
; 1823 :         else j -= rest;
; 1824 :         i += j;
; 1825 :       }
; 1826 :       else /*too short to benefit from repeat code*/
; 1827 :       {
; 1828 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1829 :       }
; 1830 :     }
; 1831 : 
; 1832 :     /*generate tree_cl, the huffmantree of huffmantrees*/
; 1833 : 
; 1834 :     if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1835 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1836 :     {
; 1837 :       frequencies_cl.data[bitlen_lld_e.data[i]]++;
; 1838 :       /*after a repeat code come the bits that specify the number of repetitions,
; 1839 :       those don't need to be in the frequencies_cl calculation*/
; 1840 :       if(bitlen_lld_e.data[i] >= 16) i++;
; 1841 :     }
; 1842 : 
; 1843 :     error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
; 1844 :                                             frequencies_cl.size, frequencies_cl.size, 7);
; 1845 :     if(error) break;
; 1846 : 
; 1847 :     if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
; 1848 :     for(i = 0; i < tree_cl.numcodes; i++)
; 1849 :     {
; 1850 :       /*lenghts of code length tree is in the order as specified by deflate*/
; 1851 :       bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
; 1852 :     }
; 1853 :     while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
; 1854 :     {
; 1855 :       /*remove zeros at the end, but minimum size must be 4*/
; 1856 :       if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
; 1857 :     }
; 1858 :     if(error) break;
; 1859 : 
; 1860 :     /*
; 1861 :     Write everything into the output
; 1862 : 
; 1863 :     After the BFINAL and BTYPE, the dynamic block consists out of the following:
; 1864 :     - 5 bits HLIT, 5 bits HDIST, 4 bits HCLEN
; 1865 :     - (HCLEN+4)*3 bits code lengths of code length alphabet
; 1866 :     - HLIT + 257 code lenghts of lit/length alphabet (encoded using the code length
; 1867 :       alphabet, + possible repetition codes 16, 17, 18)
; 1868 :     - HDIST + 1 code lengths of distance alphabet (encoded using the code length
; 1869 :       alphabet, + possible repetition codes 16, 17, 18)
; 1870 :     - compressed data
; 1871 :     - 256 (end code)
; 1872 :     */
; 1873 : 
; 1874 :     /*Write block type*/
; 1875 :     addBitToStream(bp, out, BFINAL);
; 1876 :     addBitToStream(bp, out, 0); /*first bit of BTYPE "dynamic"*/
; 1877 :     addBitToStream(bp, out, 1); /*second bit of BTYPE "dynamic"*/
; 1878 : 
; 1879 :     /*write the HLIT, HDIST and HCLEN values*/
; 1880 :     HLIT = (unsigned)(numcodes_ll - 257);
; 1881 :     HDIST = (unsigned)(numcodes_d - 1);
; 1882 :     HCLEN = (unsigned)bitlen_cl.size - 4;
; 1883 :     /*trim zeroes for HCLEN. HLIT and HDIST were already trimmed at tree creation*/
; 1884 :     while(!bitlen_cl.data[HCLEN + 4 - 1] && HCLEN > 0) HCLEN--;
; 1885 :     addBitsToStream(bp, out, HLIT, 5);
; 1886 :     addBitsToStream(bp, out, HDIST, 5);
; 1887 :     addBitsToStream(bp, out, HCLEN, 4);
; 1888 : 
; 1889 :     /*write the code lenghts of the code length alphabet*/
; 1890 :     for(i = 0; i < HCLEN + 4; i++) addBitsToStream(bp, out, bitlen_cl.data[i], 3);
; 1891 : 
; 1892 :     /*write the lenghts of the lit/len AND the dist alphabet*/
; 1893 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1894 :     {
; 1895 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
; 1896 :                        HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
; 1897 :       /*extra bits of repeat codes*/
; 1898 :       if(bitlen_lld_e.data[i] == 16) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 2);
; 1899 :       else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
; 1900 :       else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
; 1901 :     }
; 1902 : 
; 1903 :     /*write the compressed data symbols*/
; 1904 :     writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1905 :     /*error: the length of the end code 256 must be larger than 0*/
; 1906 :     if(HuffmanTree_getLength(&tree_ll, 256) == 0) ERROR_BREAK(64);
; 1907 : 
; 1908 :     /*write the end code*/
; 1909 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1910 : 
; 1911 :     break; /*end of error-while*/
; 1912 :   }
; 1913 : 
; 1914 :   /*cleanup*/
; 1915 :   uivector_cleanup(&lz77_encoded);
; 1916 :   HuffmanTree_cleanup(&tree_ll);
; 1917 :   HuffmanTree_cleanup(&tree_d);
; 1918 :   HuffmanTree_cleanup(&tree_cl);
; 1919 :   uivector_cleanup(&frequencies_ll);
; 1920 :   uivector_cleanup(&frequencies_d);
; 1921 :   uivector_cleanup(&frequencies_cl);
; 1922 :   uivector_cleanup(&bitlen_lld_e);
; 1923 :   uivector_cleanup(&bitlen_lld);
; 1924 :   uivector_cleanup(&bitlen_cl);
; 1925 : 
; 1926 :   return error;
; 1927 : }
; 1928 : 
; 1929 : static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,
; 1930 :                              const unsigned char* data,
; 1931 :                              size_t datapos, size_t dataend,
; 1932 :                              const LodePNGCompressSettings* settings, int final)
; 1933 : {
; 1934 :   HuffmanTree tree_ll; /*tree for literal values and length codes*/
; 1935 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1936 : 
; 1937 :   unsigned BFINAL = final;
; 1938 :   unsigned error = 0;
; 1939 :   size_t i;
; 1940 : 
; 1941 :   HuffmanTree_init(&tree_ll);
; 1942 :   HuffmanTree_init(&tree_d);
; 1943 : 
; 1944 :   generateFixedLitLenTree(&tree_ll);
; 1945 :   generateFixedDistanceTree(&tree_d);
; 1946 : 
; 1947 :   addBitToStream(bp, out, BFINAL);
; 1948 :   addBitToStream(bp, out, 1); /*first bit of BTYPE*/
; 1949 :   addBitToStream(bp, out, 0); /*second bit of BTYPE*/
; 1950 : 
; 1951 :   if(settings->use_lz77) /*LZ77 encoded*/
; 1952 :   {
; 1953 :     uivector lz77_encoded;
; 1954 :     uivector_init(&lz77_encoded);
; 1955 :     error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1956 :                        settings->minmatch, settings->nicematch, settings->lazymatching);
; 1957 :     if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1958 :     uivector_cleanup(&lz77_encoded);
; 1959 :   }
; 1960 :   else /*no LZ77, but still will be Huffman compressed*/
; 1961 :   {
; 1962 :     for(i = datapos; i < dataend; i++)
; 1963 :     {
; 1964 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
; 1965 :     }
; 1966 :   }
; 1967 :   /*add END code*/
; 1968 :   if(!error) addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1969 : 
; 1970 :   /*cleanup*/
; 1971 :   HuffmanTree_cleanup(&tree_ll);
; 1972 :   HuffmanTree_cleanup(&tree_d);
; 1973 : 
; 1974 :   return error;
; 1975 : }
; 1976 : 
; 1977 : static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
; 1978 :                                  const LodePNGCompressSettings* settings)
; 1979 : {
; 1980 :   unsigned error = 0;
; 1981 :   size_t i, blocksize, numdeflateblocks;
; 1982 :   size_t bp = 0; /*the bit pointer*/
; 1983 :   Hash hash;
; 1984 : 
; 1985 :   if(settings->btype > 2) return 61;
; 1986 :   else if(settings->btype == 0) return deflateNoCompression(out, in, insize);
; 1987 :   else if(settings->btype == 1) blocksize = insize;
; 1988 :   else /*if(settings->btype == 2)*/
; 1989 :   {
; 1990 :     blocksize = insize / 8 + 8;
; 1991 :     if(blocksize < 65535) blocksize = 65535;
; 1992 :   }
; 1993 : 
; 1994 :   numdeflateblocks = (insize + blocksize - 1) / blocksize;
; 1995 :   if(numdeflateblocks == 0) numdeflateblocks = 1;
; 1996 : 
; 1997 :   error = hash_init(&hash, settings->windowsize);
; 1998 :   if(error) return error;
; 1999 : 
; 2000 :   for(i = 0; i < numdeflateblocks && !error; i++)
; 2001 :   {
; 2002 :     int final = i == numdeflateblocks - 1;
; 2003 :     size_t start = i * blocksize;
; 2004 :     size_t end = start + blocksize;
; 2005 :     if(end > insize) end = insize;
; 2006 : 
; 2007 :     if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
; 2008 :     else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
; 2009 :   }
; 2010 : 
; 2011 :   hash_cleanup(&hash);
; 2012 : 
; 2013 :   return error;
; 2014 : }
; 2015 : 
; 2016 : unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
; 2017 :                          const unsigned char* in, size_t insize,
; 2018 :                          const LodePNGCompressSettings* settings)
; 2019 : {
; 2020 :   unsigned error;
; 2021 :   ucvector v;
; 2022 :   ucvector_init_buffer(&v, *out, *outsize);
; 2023 :   error = lodepng_deflatev(&v, in, insize, settings);
; 2024 :   *out = v.data;
; 2025 :   *outsize = v.size;
; 2026 :   return error;
; 2027 : }
; 2028 : 
; 2029 : static unsigned deflate(unsigned char** out, size_t* outsize,
; 2030 :                         const unsigned char* in, size_t insize,
; 2031 :                         const LodePNGCompressSettings* settings)
; 2032 : {
; 2033 :   if(settings->custom_deflate)
; 2034 :   {
; 2035 :     return settings->custom_deflate(out, outsize, in, insize, settings);
; 2036 :   }
; 2037 :   else
; 2038 :   {
; 2039 :     return lodepng_deflate(out, outsize, in, insize, settings);
; 2040 :   }
; 2041 : }
; 2042 : 
; 2043 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2044 : 
; 2045 : /* ////////////////////////////////////////////////////////////////////////// */
; 2046 : /* / Adler32                                                                  */
; 2047 : /* ////////////////////////////////////////////////////////////////////////// */
; 2048 : 
; 2049 : static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
; 2050 : {
; 2051 :    unsigned s1 = adler & 0xffff;
; 2052 :    unsigned s2 = (adler >> 16) & 0xffff;
; 2053 : 
; 2054 :   while(len > 0)
; 2055 :   {
; 2056 :     /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
; 2057 :     unsigned amount = len > 5550 ? 5550 : len;
; 2058 :     len -= amount;
; 2059 :     while(amount > 0)
; 2060 :     {
; 2061 :       s1 += (*data++);
; 2062 :       s2 += s1;
; 2063 :       amount--;
; 2064 :     }
; 2065 :     s1 %= 65521;
; 2066 :     s2 %= 65521;
; 2067 :   }
; 2068 : 
; 2069 :   return (s2 << 16) | s1;
; 2070 : }
; 2071 : 
; 2072 : /*Return the adler32 of the bytes data[0..len-1]*/
; 2073 : static unsigned adler32(const unsigned char* data, unsigned len)
; 2074 : {
; 2075 :   return update_adler32(1L, data, len);
; 2076 : }
; 2077 : 
; 2078 : /* ////////////////////////////////////////////////////////////////////////// */
; 2079 : /* / Zlib                                                                   / */
; 2080 : /* ////////////////////////////////////////////////////////////////////////// */
; 2081 : 
; 2082 : #ifdef LODEPNG_COMPILE_DECODER
; 2083 : 
; 2084 : unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2085 :                                  size_t insize, const LodePNGDecompressSettings* settings)
; 2086 : {
; 2087 :   unsigned error = 0;
; 2088 :   unsigned CM, CINFO, FDICT;
; 2089 : 
; 2090 :   if(insize < 2) return 53; /*error, size of zlib data too small*/
; 2091 :   /*read information from zlib header*/
; 2092 :   if((in[0] * 256 + in[1]) % 31 != 0)
; 2093 :   {
; 2094 :     /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
; 2095 :     return 24;
; 2096 :   }
; 2097 : 
; 2098 :   CM = in[0] & 15;
; 2099 :   CINFO = (in[0] >> 4) & 15;
; 2100 :   /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
; 2101 :   FDICT = (in[1] >> 5) & 1;
; 2102 :   /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/
; 2103 : 
; 2104 :   if(CM != 8 || CINFO > 7)
; 2105 :   {
; 2106 :     /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
; 2107 :     return 25;
; 2108 :   }
; 2109 :   if(FDICT != 0)
; 2110 :   {
; 2111 :     /*error: the specification of PNG says about the zlib stream:
; 2112 :       "The additional flags shall not specify a preset dictionary."*/
; 2113 :     return 26;
; 2114 :   }
; 2115 : 
; 2116 :   error = inflate(out, outsize, in + 2, insize - 2, settings);
; 2117 :   if(error) return error;
; 2118 : 
; 2119 :   if(!settings->ignore_adler32)
; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/
; 2124 :   }
; 2125 : 
; 2126 :   return 0; /*no error*/
; 2127 : }
; 2128 : 
; 2129 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2130 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2131 : {
; 2132 :   if(settings->custom_zlib)
; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2134 :   else
; 2135 :     return lodepng_zlib_decompress(out, outsize, in, insize, settings);
; 2136 : }
; 2137 : 
; 2138 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2139 : 
; 2140 : #ifdef LODEPNG_COMPILE_ENCODER
; 2141 : 
; 2142 : unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2143 :                                size_t insize, const LodePNGCompressSettings* settings)
; 2144 : {
; 2145 :   /*initially, *out must be NULL and outsize 0, if you just give some random *out
; 2146 :   that's pointing to a non allocated buffer, this'll crash*/
; 2147 :   ucvector outv;
; 2148 :   size_t i;
; 2149 :   unsigned error;
; 2150 :   unsigned char* deflatedata = 0;
; 2151 :   size_t deflatesize = 0;
; 2152 : 
; 2153 :   unsigned ADLER32;
; 2154 :   /*zlib data: 1 byte CMF (CM+CINFO), 1 byte FLG, deflate data, 4 byte ADLER32 checksum of the Decompressed data*/
; 2155 :   unsigned CMF = 120; /*0b01111000: CM 8, CINFO 7. With CINFO 7, any window size up to 32768 can be used.*/
; 2156 :   unsigned FLEVEL = 0;
; 2157 :   unsigned FDICT = 0;
; 2158 :   unsigned CMFFLG = 256 * CMF + FDICT * 32 + FLEVEL * 64;
; 2159 :   unsigned FCHECK = 31 - CMFFLG % 31;
; 2160 :   CMFFLG += FCHECK;
; 2161 : 
; 2162 :   /*ucvector-controlled version of the output buffer, for dynamic array*/
; 2163 :   ucvector_init_buffer(&outv, *out, *outsize);
; 2164 : 
; 2165 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG / 256));
; 2166 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG % 256));
; 2167 : 
; 2168 :   error = deflate(&deflatedata, &deflatesize, in, insize, settings);
; 2169 : 
; 2170 :   if(!error)
; 2171 :   {
; 2172 :     ADLER32 = adler32(in, (unsigned)insize);
; 2173 :     for(i = 0; i < deflatesize; i++) ucvector_push_back(&outv, deflatedata[i]);
; 2174 :     lodepng_free(deflatedata);
; 2175 :     lodepng_add32bitInt(&outv, ADLER32);
; 2176 :   }
; 2177 : 
; 2178 :   *out = outv.data;
; 2179 :   *outsize = outv.size;
; 2180 : 
; 2181 :   return error;
; 2182 : }
; 2183 : 
; 2184 : /* compress using the default or custom zlib function */
; 2185 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2186 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2187 : {
; 2188 :   if(settings->custom_zlib)
; 2189 :   {
; 2190 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2191 :   }
; 2192 :   else
; 2193 :   {
; 2194 :     return lodepng_zlib_compress(out, outsize, in, insize, settings);
; 2195 :   }
; 2196 : }
; 2197 : 
; 2198 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2199 : 
; 2200 : #else /*no LODEPNG_COMPILE_ZLIB*/
; 2201 : 
; 2202 : #ifdef LODEPNG_COMPILE_DECODER
; 2203 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2204 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2205 : {
; 2206 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2207 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2208 : }
; 2209 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2210 : #ifdef LODEPNG_COMPILE_ENCODER
; 2211 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2212 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2213 : {
; 2214 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2215 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2216 : }
; 2217 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2218 : 
; 2219 : #endif /*LODEPNG_COMPILE_ZLIB*/
; 2220 : 
; 2221 : /* ////////////////////////////////////////////////////////////////////////// */
; 2222 : 
; 2223 : #ifdef LODEPNG_COMPILE_ENCODER
; 2224 : 
; 2225 : /*this is a good tradeoff between speed and compression ratio*/
; 2226 : #define DEFAULT_WINDOWSIZE 2048
; 2227 : 
; 2228 : void lodepng_compress_settings_init(LodePNGCompressSettings* settings)
; 2229 : {
; 2230 :   /*compress with dynamic huffman tree (not in the mathematical sense, just not the predefined one)*/
; 2231 :   settings->btype = 2;
; 2232 :   settings->use_lz77 = 1;
; 2233 :   settings->windowsize = DEFAULT_WINDOWSIZE;
; 2234 :   settings->minmatch = 3;
; 2235 :   settings->nicematch = 128;
; 2236 :   settings->lazymatching = 1;
; 2237 : 
; 2238 :   settings->custom_zlib = 0;
; 2239 :   settings->custom_deflate = 0;
; 2240 :   settings->custom_context = 0;
; 2241 : }
; 2242 : 
; 2243 : const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 3, 128, 1, 0, 0, 0};
; 2244 : 
; 2245 : 
; 2246 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2247 : 
; 2248 : #ifdef LODEPNG_COMPILE_DECODER
; 2249 : 
; 2250 : void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings)
; 2251 : {
; 2252 :   settings->ignore_adler32 = 0;
; 2253 : 
; 2254 :   settings->custom_zlib = 0;
; 2255 :   settings->custom_inflate = 0;
; 2256 :   settings->custom_context = 0;
; 2257 : }
; 2258 : 
; 2259 : const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0, 0, 0};
; 2260 : 
; 2261 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2262 : 
; 2263 : /* ////////////////////////////////////////////////////////////////////////// */
; 2264 : /* ////////////////////////////////////////////////////////////////////////// */
; 2265 : /* // End of Zlib related code. Begin of PNG related code.                 // */
; 2266 : /* ////////////////////////////////////////////////////////////////////////// */
; 2267 : /* ////////////////////////////////////////////////////////////////////////// */
; 2268 : 
; 2269 : #ifdef LODEPNG_COMPILE_PNG
; 2270 : 
; 2271 : /* ////////////////////////////////////////////////////////////////////////// */
; 2272 : /* / CRC32                                                                  / */
; 2273 : /* ////////////////////////////////////////////////////////////////////////// */
; 2274 : 
; 2275 : /* CRC polynomial: 0xedb88320 */
; 2276 : static unsigned lodepng_crc32_table[256] = {
; 2277 :            0u, 1996959894u, 3993919788u, 2567524794u,  124634137u, 1886057615u, 3915621685u, 2657392035u,
; 2278 :    249268274u, 2044508324u, 3772115230u, 2547177864u,  162941995u, 2125561021u, 3887607047u, 2428444049u,
; 2279 :    498536548u, 1789927666u, 4089016648u, 2227061214u,  450548861u, 1843258603u, 4107580753u, 2211677639u,
; 2280 :    325883990u, 1684777152u, 4251122042u, 2321926636u,  335633487u, 1661365465u, 4195302755u, 2366115317u,
; 2281 :    997073096u, 1281953886u, 3579855332u, 2724688242u, 1006888145u, 1258607687u, 3524101629u, 2768942443u,
; 2282 :    901097722u, 1119000684u, 3686517206u, 2898065728u,  853044451u, 1172266101u, 3705015759u, 2882616665u,
; 2283 :    651767980u, 1373503546u, 3369554304u, 3218104598u,  565507253u, 1454621731u, 3485111705u, 3099436303u,
; 2284 :    671266974u, 1594198024u, 3322730930u, 2970347812u,  795835527u, 1483230225u, 3244367275u, 3060149565u,
; 2285 :   1994146192u,   31158534u, 2563907772u, 4023717930u, 1907459465u,  112637215u, 2680153253u, 3904427059u,
; 2286 :   2013776290u,  251722036u, 2517215374u, 3775830040u, 2137656763u,  141376813u, 2439277719u, 3865271297u,
; 2287 :   1802195444u,  476864866u, 2238001368u, 4066508878u, 1812370925u,  453092731u, 2181625025u, 4111451223u,
; 2288 :   1706088902u,  314042704u, 2344532202u, 4240017532u, 1658658271u,  366619977u, 2362670323u, 4224994405u,
; 2289 :   1303535960u,  984961486u, 2747007092u, 3569037538u, 1256170817u, 1037604311u, 2765210733u, 3554079995u,
; 2290 :   1131014506u,  879679996u, 2909243462u, 3663771856u, 1141124467u,  855842277u, 2852801631u, 3708648649u,
; 2291 :   1342533948u,  654459306u, 3188396048u, 3373015174u, 1466479909u,  544179635u, 3110523913u, 3462522015u,
; 2292 :   1591671054u,  702138776u, 2966460450u, 3352799412u, 1504918807u,  783551873u, 3082640443u, 3233442989u,
; 2293 :   3988292384u, 2596254646u,   62317068u, 1957810842u, 3939845945u, 2647816111u,   81470997u, 1943803523u,
; 2294 :   3814918930u, 2489596804u,  225274430u, 2053790376u, 3826175755u, 2466906013u,  167816743u, 2097651377u,
; 2295 :   4027552580u, 2265490386u,  503444072u, 1762050814u, 4150417245u, 2154129355u,  426522225u, 1852507879u,
; 2296 :   4275313526u, 2312317920u,  282753626u, 1742555852u, 4189708143u, 2394877945u,  397917763u, 1622183637u,
; 2297 :   3604390888u, 2714866558u,  953729732u, 1340076626u, 3518719985u, 2797360999u, 1068828381u, 1219638859u,
; 2298 :   3624741850u, 2936675148u,  906185462u, 1090812512u, 3747672003u, 2825379669u,  829329135u, 1181335161u,
; 2299 :   3412177804u, 3160834842u,  628085408u, 1382605366u, 3423369109u, 3138078467u,  570562233u, 1426400815u,
; 2300 :   3317316542u, 2998733608u,  733239954u, 1555261956u, 3268935591u, 3050360625u,  752459403u, 1541320221u,
; 2301 :   2607071920u, 3965973030u, 1969922972u,   40735498u, 2617837225u, 3943577151u, 1913087877u,   83908371u,
; 2302 :   2512341634u, 3803740692u, 2075208622u,  213261112u, 2463272603u, 3855990285u, 2094854071u,  198958881u,
; 2303 :   2262029012u, 4057260610u, 1759359992u,  534414190u, 2176718541u, 4139329115u, 1873836001u,  414664567u,
; 2304 :   2282248934u, 4279200368u, 1711684554u,  285281116u, 2405801727u, 4167216745u, 1634467795u,  376229701u,
; 2305 :   2685067896u, 3608007406u, 1308918612u,  956543938u, 2808555105u, 3495958263u, 1231636301u, 1047427035u,
; 2306 :   2932959818u, 3654703836u, 1088359270u,  936918000u, 2847714899u, 3736837829u, 1202900863u,  817233897u,
; 2307 :   3183342108u, 3401237130u, 1404277552u,  615818150u, 3134207493u, 3453421203u, 1423857449u,  601450431u,
; 2308 :   3009837614u, 3294710456u, 1567103746u,  711928724u, 3020668471u, 3272380065u, 1510334235u,  755167117u
; 2309 : };
; 2310 : 
; 2311 : /*Return the CRC of the bytes buf[0..len-1].*/
; 2312 : unsigned lodepng_crc32(const unsigned char* buf, size_t len)
; 2313 : {
; 2314 :   unsigned c = 0xffffffffL;
; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)
; 2318 :   {
; 2319 :     c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
; 2320 :   }
; 2321 :   return c ^ 0xffffffffL;
; 2322 : }
; 2323 : 
; 2324 : /* ////////////////////////////////////////////////////////////////////////// */
; 2325 : /* / Reading and writing single bits and bytes from/to stream for LodePNG   / */
; 2326 : /* ////////////////////////////////////////////////////////////////////////// */
; 2327 : 
; 2328 : static unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream)
; 2329 : {
; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);
; 2331 :   (*bitpointer)++;
; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)
; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
; 2354 :   }
; 2355 :   (*bitpointer)++;
; 2356 : }
; 2357 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2358 : 
; 2359 : static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2360 : {
; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));
; 2363 :   else         bitstream[(*bitpointer) >> 3] |=  (1 << (7 - ((*bitpointer) & 0x7)));
; 2364 :   (*bitpointer)++;
; 2365 : }
; 2366 : 
; 2367 : /* ////////////////////////////////////////////////////////////////////////// */
; 2368 : /* / PNG chunks                                                             / */
; 2369 : /* ////////////////////////////////////////////////////////////////////////// */
; 2370 : 
; 2371 : unsigned lodepng_chunk_length(const unsigned char* chunk)
; 2372 : {
; 2373 :   return lodepng_read32bitInt(&chunk[0]);
; 2374 : }
; 2375 : 
; 2376 : void lodepng_chunk_type(char type[5], const unsigned char* chunk)
; 2377 : {
; 2378 :   unsigned i;
; 2379 :   for(i = 0; i < 4; i++) type[i] = chunk[4 + i];
; 2380 :   type[4] = 0; /*null termination char*/
; 2381 : }
; 2382 : 
; 2383 : unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type)
; 2384 : {
; 2385 :   if(strlen(type) != 4) return 0;
; 2386 :   return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);
; 2387 : }
; 2388 : 
; 2389 : unsigned char lodepng_chunk_ancillary(const unsigned char* chunk)
; 2390 : {
; 2391 :   return((chunk[4] & 32) != 0);
; 2392 : }
; 2393 : 
; 2394 : unsigned char lodepng_chunk_private(const unsigned char* chunk)
; 2395 : {
; 2396 :   return((chunk[6] & 32) != 0);
; 2397 : }
; 2398 : 
; 2399 : unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk)
; 2400 : {
; 2401 :   return((chunk[7] & 32) != 0);
; 2402 : }
; 2403 : 
; 2404 : unsigned char* lodepng_chunk_data(unsigned char* chunk)
; 2405 : {
; 2406 :   return &chunk[8];
; 2407 : }
; 2408 : 
; 2409 : const unsigned char* lodepng_chunk_data_const(const unsigned char* chunk)
; 2410 : {
; 2411 :   return &chunk[8];
; 2412 : }
; 2413 : 
; 2414 : unsigned lodepng_chunk_check_crc(const unsigned char* chunk)
; 2415 : {
; 2416 :   unsigned length = lodepng_chunk_length(chunk);
; 2417 :   unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);
; 2418 :   /*the CRC is taken of the data and the 4 chunk type letters, not the length*/
; 2419 :   unsigned checksum = lodepng_crc32(&chunk[4], length + 4);
; 2420 :   if(CRC != checksum) return 1;
; 2421 :   else return 0;
; 2422 : }
; 2423 : 
; 2424 : void lodepng_chunk_generate_crc(unsigned char* chunk)
; 2425 : {
; 2426 :   unsigned length = lodepng_chunk_length(chunk);
; 2427 :   unsigned CRC = lodepng_crc32(&chunk[4], length + 4);
; 2428 :   lodepng_set32bitInt(chunk + 8 + length, CRC);
; 2429 : }
; 2430 : 
; 2431 : unsigned char* lodepng_chunk_next(unsigned char* chunk)
; 2432 : {
; 2433 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2434 :   return &chunk[total_chunk_length];
; 2435 : }
; 2436 : 
; 2437 : const unsigned char* lodepng_chunk_next_const(const unsigned char* chunk)
; 2438 : {
; 2439 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2440 :   return &chunk[total_chunk_length];
; 2441 : }
; 2442 : 
; 2443 : unsigned lodepng_chunk_append(unsigned char** out, size_t* outlength, const unsigned char* chunk)
; 2444 : {
; 2445 :   unsigned i;
; 2446 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2447 :   unsigned char *chunk_start, *new_buffer;
; 2448 :   size_t new_length = (*outlength) + total_chunk_length;
; 2449 :   if(new_length < total_chunk_length || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2450 : 
; 2451 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2452 :   if(!new_buffer) return 83; /*alloc fail*/
; 2453 :   (*out) = new_buffer;
; 2454 :   (*outlength) = new_length;
; 2455 :   chunk_start = &(*out)[new_length - total_chunk_length];
; 2456 : 
; 2457 :   for(i = 0; i < total_chunk_length; i++) chunk_start[i] = chunk[i];
; 2458 : 
; 2459 :   return 0;
; 2460 : }
; 2461 : 
; 2462 : unsigned lodepng_chunk_create(unsigned char** out, size_t* outlength, unsigned length,
; 2463 :                               const char* type, const unsigned char* data)
; 2464 : {
; 2465 :   unsigned i;
; 2466 :   unsigned char *chunk, *new_buffer;
; 2467 :   size_t new_length = (*outlength) + length + 12;
; 2468 :   if(new_length < length + 12 || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2469 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2470 :   if(!new_buffer) return 83; /*alloc fail*/
; 2471 :   (*out) = new_buffer;
; 2472 :   (*outlength) = new_length;
; 2473 :   chunk = &(*out)[(*outlength) - length - 12];
; 2474 : 
; 2475 :   /*1: length*/
; 2476 :   lodepng_set32bitInt(chunk, (unsigned)length);
; 2477 : 
; 2478 :   /*2: chunk name (4 letters)*/
; 2479 :   chunk[4] = type[0];
; 2480 :   chunk[5] = type[1];
; 2481 :   chunk[6] = type[2];
; 2482 :   chunk[7] = type[3];
; 2483 : 
; 2484 :   /*3: the data*/
; 2485 :   for(i = 0; i < length; i++) chunk[8 + i] = data[i];
; 2486 : 
; 2487 :   /*4: CRC (of the chunkname characters and the data)*/
; 2488 :   lodepng_chunk_generate_crc(chunk);
; 2489 : 
; 2490 :   return 0;
; 2491 : }
; 2492 : 
; 2493 : /* ////////////////////////////////////////////////////////////////////////// */
; 2494 : /* / Color types and such                                                   / */
; 2495 : /* ////////////////////////////////////////////////////////////////////////// */
; 2496 : 
; 2497 : /*return type is a LodePNG error code*/
; 2498 : static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) /*bd = bitdepth*/
; 2499 : {
; 2500 :   switch(colortype)
; 2501 :   {
; 2502 :     case 0: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)) return 37; break; /*grey*/
; 2503 :     case 2: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGB*/
; 2504 :     case 3: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )) return 37; break; /*palette*/
; 2505 :     case 4: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*grey + alpha*/
; 2506 :     case 6: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGBA*/
; 2507 :     default: return 31;
; 2508 :   }
; 2509 :   return 0; /*allowed color type / bits combination*/
; 2510 : }
; 2511 : 
; 2512 : static unsigned getNumColorChannels(LodePNGColorType colortype)
; 2513 : {
; 2514 :   switch(colortype)
; 2515 :   {
; 2516 :     case 0: return 1; /*grey*/
; 2517 :     case 2: return 3; /*RGB*/
; 2518 :     case 3: return 1; /*palette*/
; 2519 :     case 4: return 2; /*grey + alpha*/
; 2520 :     case 6: return 4; /*RGBA*/
; 2521 :   }
; 2522 :   return 0; /*unexisting color type*/
; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;
; 2529 : }
; 2530 : 
; 2531 : /* ////////////////////////////////////////////////////////////////////////// */
; 2532 : 
; 2533 : void lodepng_color_mode_init(LodePNGColorMode* info)
; 2534 : {
; 2535 :   info->key_defined = 0;
; 2536 :   info->key_r = info->key_g = info->key_b = 0;
; 2537 :   info->colortype = LCT_RGBA;
; 2538 :   info->bitdepth = 8;
; 2539 :   info->palette = 0;
; 2540 :   info->palettesize = 0;
; 2541 : }
; 2542 : 
; 2543 : void lodepng_color_mode_cleanup(LodePNGColorMode* info)
; 2544 : {
; 2545 :   lodepng_palette_clear(info);
; 2546 : }
; 2547 : 
; 2548 : unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
; 2549 : {
; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;
; 2553 :   if(source->palette)
; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);
; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];
; 2558 :   }
; 2559 :   return 0;
; 2560 : }
; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);

  00009	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  0000c	85 c0		 test	 eax, eax
  0000e	74 09		 je	 SHORT $LN10@State

; 73   :   free(ptr);

  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _free
  00016	83 c4 04	 add	 esp, 4
$LN10@State:

; 2587 : }
; 2588 : 
; 2589 : unsigned lodepng_palette_add(LodePNGColorMode* info,
; 2590 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2591 : {
; 2592 :   unsigned char* data;
; 2593 :   /*the same resize technique as C++ std::vectors is used, and here it's made so that for a palette with
; 2594 :   the max of 256 colors, it'll have the exact alloc size*/
; 2595 :   if(!info->palette) /*allocate palette if empty*/
; 2596 :   {
; 2597 :     /*room for 256 colors with 4 bytes each*/
; 2598 :     data = (unsigned char*)lodepng_realloc(info->palette, 1024);
; 2599 :     if(!data) return 83; /*alloc fail*/
; 2600 :     else info->palette = data;
; 2601 :   }
; 2602 :   info->palette[4 * info->palettesize + 0] = r;
; 2603 :   info->palette[4 * info->palettesize + 1] = g;
; 2604 :   info->palette[4 * info->palettesize + 2] = b;
; 2605 :   info->palette[4 * info->palettesize + 3] = a;
; 2606 :   info->palettesize++;
; 2607 :   return 0;
; 2608 : }
; 2609 : 
; 2610 : unsigned lodepng_get_bpp(const LodePNGColorMode* info)
; 2611 : {
; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }
; 2615 : 
; 2616 : unsigned lodepng_get_channels(const LodePNGColorMode* info)
; 2617 : {
; 2618 :   return getNumColorChannels(info->colortype);
; 2619 : }
; 2620 : 
; 2621 : unsigned lodepng_is_greyscale_type(const LodePNGColorMode* info)
; 2622 : {
; 2623 :   return info->colortype == LCT_GREY || info->colortype == LCT_GREY_ALPHA;
; 2624 : }
; 2625 : 
; 2626 : unsigned lodepng_is_alpha_type(const LodePNGColorMode* info)
; 2627 : {
; 2628 :   return (info->colortype & 4) != 0; /*4 or 6*/
; 2629 : }
; 2630 : 
; 2631 : unsigned lodepng_is_palette_type(const LodePNGColorMode* info)
; 2632 : {
; 2633 :   return info->colortype == LCT_PALETTE;
; 2634 : }
; 2635 : 
; 2636 : unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info)
; 2637 : {
; 2638 :   size_t i;
; 2639 :   for(i = 0; i < info->palettesize; i++)
; 2640 :   {
; 2641 :     if(info->palette[i * 4 + 3] < 255) return 1;
; 2642 :   }
; 2643 :   return 0;
; 2644 : }
; 2645 : 
; 2646 : unsigned lodepng_can_have_alpha(const LodePNGColorMode* info)
; 2647 : {
; 2648 :   return info->key_defined
; 2649 :       || lodepng_is_alpha_type(info)
; 2650 :       || lodepng_has_palette_alpha(info);
; 2651 : }
; 2652 : 
; 2653 : size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode* color)
; 2654 : {
; 2655 :   return (w * h * lodepng_get_bpp(color) + 7) / 8;
; 2656 : }
; 2657 : 
; 2658 : size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)
; 2659 : {
; 2660 :   return (w * h * lodepng_get_bpp_lct(colortype, bitdepth) + 7) / 8;
; 2661 : }
; 2662 : 
; 2663 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2664 : 
; 2665 : static void LodePNGUnknownChunks_init(LodePNGInfo* info)
; 2666 : {
; 2667 :   unsigned i;
; 2668 :   for(i = 0; i < 3; i++) info->unknown_chunks_data[i] = 0;
; 2669 :   for(i = 0; i < 3; i++) info->unknown_chunks_size[i] = 0;
; 2670 : }
; 2671 : 
; 2672 : static void LodePNGUnknownChunks_cleanup(LodePNGInfo* info)
; 2673 : {
; 2674 :   unsigned i;
; 2675 :   for(i = 0; i < 3; i++) lodepng_free(info->unknown_chunks_data[i]);
; 2676 : }
; 2677 : 
; 2678 : static unsigned LodePNGUnknownChunks_copy(LodePNGInfo* dest, const LodePNGInfo* src)
; 2679 : {
; 2680 :   unsigned i;
; 2681 : 
; 2682 :   LodePNGUnknownChunks_cleanup(dest);
; 2683 : 
; 2684 :   for(i = 0; i < 3; i++)
; 2685 :   {
; 2686 :     size_t j;
; 2687 :     dest->unknown_chunks_size[i] = src->unknown_chunks_size[i];
; 2688 :     dest->unknown_chunks_data[i] = (unsigned char*)lodepng_malloc(src->unknown_chunks_size[i]);
; 2689 :     if(!dest->unknown_chunks_data[i] && dest->unknown_chunks_size[i]) return 83; /*alloc fail*/
; 2690 :     for(j = 0; j < src->unknown_chunks_size[i]; j++)
; 2691 :     {
; 2692 :       dest->unknown_chunks_data[i][j] = src->unknown_chunks_data[i][j];
; 2693 :     }
; 2694 :   }
; 2695 : 
; 2696 :   return 0;
; 2697 : }
; 2698 : 
; 2699 : /******************************************************************************/
; 2700 : 
; 2701 : static void LodePNGText_init(LodePNGInfo* info)
; 2702 : {
; 2703 :   info->text_num = 0;
; 2704 :   info->text_keys = NULL;
; 2705 :   info->text_strings = NULL;
; 2706 : }
; 2707 : 
; 2708 : static void LodePNGText_cleanup(LodePNGInfo* info)
; 2709 : {
; 2710 :   size_t i;
; 2711 :   for(i = 0; i < info->text_num; i++)
; 2712 :   {
; 2713 :     string_cleanup(&info->text_keys[i]);
; 2714 :     string_cleanup(&info->text_strings[i]);
; 2715 :   }
; 2716 :   lodepng_free(info->text_keys);
; 2717 :   lodepng_free(info->text_strings);
; 2718 : }
; 2719 : 
; 2720 : static unsigned LodePNGText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2721 : {
; 2722 :   size_t i = 0;
; 2723 :   dest->text_keys = 0;
; 2724 :   dest->text_strings = 0;
; 2725 :   dest->text_num = 0;
; 2726 :   for(i = 0; i < source->text_num; i++)
; 2727 :   {
; 2728 :     CERROR_TRY_RETURN(lodepng_add_text(dest, source->text_keys[i], source->text_strings[i]));
; 2729 :   }
; 2730 :   return 0;
; 2731 : }
; 2732 : 
; 2733 : void lodepng_clear_text(LodePNGInfo* info)
; 2734 : {
; 2735 :   LodePNGText_cleanup(info);
; 2736 : }
; 2737 : 
; 2738 : unsigned lodepng_add_text(LodePNGInfo* info, const char* key, const char* str)
; 2739 : {
; 2740 :   char** new_keys = (char**)(lodepng_realloc(info->text_keys, sizeof(char*) * (info->text_num + 1)));
; 2741 :   char** new_strings = (char**)(lodepng_realloc(info->text_strings, sizeof(char*) * (info->text_num + 1)));
; 2742 :   if(!new_keys || !new_strings)
; 2743 :   {
; 2744 :     lodepng_free(new_keys);
; 2745 :     lodepng_free(new_strings);
; 2746 :     return 83; /*alloc fail*/
; 2747 :   }
; 2748 : 
; 2749 :   info->text_num++;
; 2750 :   info->text_keys = new_keys;
; 2751 :   info->text_strings = new_strings;
; 2752 : 
; 2753 :   string_init(&info->text_keys[info->text_num - 1]);
; 2754 :   string_set(&info->text_keys[info->text_num - 1], key);
; 2755 : 
; 2756 :   string_init(&info->text_strings[info->text_num - 1]);
; 2757 :   string_set(&info->text_strings[info->text_num - 1], str);
; 2758 : 
; 2759 :   return 0;
; 2760 : }
; 2761 : 
; 2762 : /******************************************************************************/
; 2763 : 
; 2764 : static void LodePNGIText_init(LodePNGInfo* info)
; 2765 : {
; 2766 :   info->itext_num = 0;
; 2767 :   info->itext_keys = NULL;
; 2768 :   info->itext_langtags = NULL;
; 2769 :   info->itext_transkeys = NULL;
; 2770 :   info->itext_strings = NULL;
; 2771 : }
; 2772 : 
; 2773 : static void LodePNGIText_cleanup(LodePNGInfo* info)
; 2774 : {
; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)
; 2777 :   {
; 2778 :     string_cleanup(&info->itext_keys[i]);
; 2779 :     string_cleanup(&info->itext_langtags[i]);
; 2780 :     string_cleanup(&info->itext_transkeys[i]);
; 2781 :     string_cleanup(&info->itext_strings[i]);
; 2782 :   }
; 2783 :   lodepng_free(info->itext_keys);
; 2784 :   lodepng_free(info->itext_langtags);
; 2785 :   lodepng_free(info->itext_transkeys);
; 2786 :   lodepng_free(info->itext_strings);
; 2787 : }
; 2788 : 
; 2789 : static unsigned LodePNGIText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2790 : {
; 2791 :   size_t i = 0;
; 2792 :   dest->itext_keys = 0;
; 2793 :   dest->itext_langtags = 0;
; 2794 :   dest->itext_transkeys = 0;
; 2795 :   dest->itext_strings = 0;
; 2796 :   dest->itext_num = 0;
; 2797 :   for(i = 0; i < source->itext_num; i++)
; 2798 :   {
; 2799 :     CERROR_TRY_RETURN(lodepng_add_itext(dest, source->itext_keys[i], source->itext_langtags[i],
; 2800 :                                         source->itext_transkeys[i], source->itext_strings[i]));
; 2801 :   }
; 2802 :   return 0;
; 2803 : }
; 2804 : 
; 2805 : void lodepng_clear_itext(LodePNGInfo* info)
; 2806 : {
; 2807 :   LodePNGIText_cleanup(info);
; 2808 : }
; 2809 : 
; 2810 : unsigned lodepng_add_itext(LodePNGInfo* info, const char* key, const char* langtag,
; 2811 :                            const char* transkey, const char* str)
; 2812 : {
; 2813 :   char** new_keys = (char**)(lodepng_realloc(info->itext_keys, sizeof(char*) * (info->itext_num + 1)));
; 2814 :   char** new_langtags = (char**)(lodepng_realloc(info->itext_langtags, sizeof(char*) * (info->itext_num + 1)));
; 2815 :   char** new_transkeys = (char**)(lodepng_realloc(info->itext_transkeys, sizeof(char*) * (info->itext_num + 1)));
; 2816 :   char** new_strings = (char**)(lodepng_realloc(info->itext_strings, sizeof(char*) * (info->itext_num + 1)));
; 2817 :   if(!new_keys || !new_langtags || !new_transkeys || !new_strings)
; 2818 :   {
; 2819 :     lodepng_free(new_keys);
; 2820 :     lodepng_free(new_langtags);
; 2821 :     lodepng_free(new_transkeys);
; 2822 :     lodepng_free(new_strings);
; 2823 :     return 83; /*alloc fail*/
; 2824 :   }
; 2825 : 
; 2826 :   info->itext_num++;
; 2827 :   info->itext_keys = new_keys;
; 2828 :   info->itext_langtags = new_langtags;
; 2829 :   info->itext_transkeys = new_transkeys;
; 2830 :   info->itext_strings = new_strings;
; 2831 : 
; 2832 :   string_init(&info->itext_keys[info->itext_num - 1]);
; 2833 :   string_set(&info->itext_keys[info->itext_num - 1], key);
; 2834 : 
; 2835 :   string_init(&info->itext_langtags[info->itext_num - 1]);
; 2836 :   string_set(&info->itext_langtags[info->itext_num - 1], langtag);
; 2837 : 
; 2838 :   string_init(&info->itext_transkeys[info->itext_num - 1]);
; 2839 :   string_set(&info->itext_transkeys[info->itext_num - 1], transkey);
; 2840 : 
; 2841 :   string_init(&info->itext_strings[info->itext_num - 1]);
; 2842 :   string_set(&info->itext_strings[info->itext_num - 1], str);
; 2843 : 
; 2844 :   return 0;
; 2845 : }
; 2846 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2847 : 
; 2848 : void lodepng_info_init(LodePNGInfo* info)
; 2849 : {
; 2850 :   lodepng_color_mode_init(&info->color);
; 2851 :   info->interlace_method = 0;
; 2852 :   info->compression_method = 0;
; 2853 :   info->filter_method = 0;
; 2854 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2855 :   info->background_defined = 0;
; 2856 :   info->background_r = info->background_g = info->background_b = 0;
; 2857 : 
; 2858 :   LodePNGText_init(info);
; 2859 :   LodePNGIText_init(info);
; 2860 : 
; 2861 :   info->time_defined = 0;
; 2862 :   info->phys_defined = 0;
; 2863 : 
; 2864 :   LodePNGUnknownChunks_init(info);
; 2865 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2866 : }
; 2867 : 
; 2868 : void lodepng_info_cleanup(LodePNGInfo* info)
; 2869 : {
; 2870 :   lodepng_color_mode_cleanup(&info->color);
; 2871 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2872 :   LodePNGText_cleanup(info);
; 2873 :   LodePNGIText_cleanup(info);
; 2874 : 
; 2875 :   LodePNGUnknownChunks_cleanup(info);
; 2876 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2877 : }
; 2878 : 
; 2879 : unsigned lodepng_info_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2880 : {
; 2881 :   lodepng_info_cleanup(dest);
; 2882 :   *dest = *source;
; 2883 :   lodepng_color_mode_init(&dest->color);
; 2884 :   CERROR_TRY_RETURN(lodepng_color_mode_copy(&dest->color, &source->color));
; 2885 : 
; 2886 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2887 :   CERROR_TRY_RETURN(LodePNGText_copy(dest, source));
; 2888 :   CERROR_TRY_RETURN(LodePNGIText_copy(dest, source));
; 2889 : 
; 2890 :   LodePNGUnknownChunks_init(dest);
; 2891 :   CERROR_TRY_RETURN(LodePNGUnknownChunks_copy(dest, source));
; 2892 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2893 :   return 0;
; 2894 : }
; 2895 : 
; 2896 : void lodepng_info_swap(LodePNGInfo* a, LodePNGInfo* b)
; 2897 : {
; 2898 :   LodePNGInfo temp = *a;
; 2899 :   *a = *b;
; 2900 :   *b = temp;
; 2901 : }
; 2902 : 
; 2903 : /* ////////////////////////////////////////////////////////////////////////// */
; 2904 : 
; 2905 : /*index: bitgroup index, bits: bitgroup size(1, 2 or 4, in: bitgroup value, out: octet array to add bits to*/
; 2906 : static void addColorBits(unsigned char* out, size_t index, unsigned bits, unsigned in)
; 2907 : {
; 2908 :   /*p = the partial index in the byte, e.g. with 4 palettebits it is 0 for first half or 1 for second half*/
; 2909 :   unsigned p = index % (8 / bits);
; 2910 :   in &= (1 << bits) - 1; /*filter out any other bits of the input value*/
; 2911 :   in = in << (bits * (8 / bits - p - 1));
; 2912 :   if(p == 0) out[index * bits / 8] = in;
; 2913 :   else out[index * bits / 8] |= in;
; 2914 : }
; 2915 : 
; 2916 : typedef struct ColorTree ColorTree;
; 2917 : 
; 2918 : /*
; 2919 : One node of a color tree
; 2920 : This is the data structure used to count the number of unique colors and to get a palette
; 2921 : index for a color. It's like an octree, but because the alpha channel is used too, each
; 2922 : node has 16 instead of 8 children.
; 2923 : */
; 2924 : struct ColorTree
; 2925 : {
; 2926 :   ColorTree* children[16]; /*up to 16 pointers to ColorTree of next level*/
; 2927 :   int index; /*the payload. Only has a meaningful value if this is in the last level*/
; 2928 : };
; 2929 : 
; 2930 : static void color_tree_init(ColorTree* tree)
; 2931 : {
; 2932 :   int i;
; 2933 :   for(i = 0; i < 16; i++) tree->children[i] = 0;
; 2934 :   tree->index = -1;
; 2935 : }
; 2936 : 
; 2937 : static void color_tree_cleanup(ColorTree* tree)
; 2938 : {
; 2939 :   int i;
; 2940 :   for(i = 0; i < 16; i++)
; 2941 :   {
; 2942 :     if(tree->children[i])
; 2943 :     {
; 2944 :       color_tree_cleanup(tree->children[i]);
; 2945 :       lodepng_free(tree->children[i]);
; 2946 :     }
; 2947 :   }
; 2948 : }
; 2949 : 
; 2950 : /*returns -1 if color not present, its index otherwise*/
; 2951 : static int color_tree_get(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2952 : {
; 2953 :   int bit = 0;
; 2954 :   for(bit = 0; bit < 8; bit++)
; 2955 :   {
; 2956 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
; 2957 :     if(!tree->children[i]) return -1;
; 2958 :     else tree = tree->children[i];
; 2959 :   }
; 2960 :   return tree ? tree->index : -1;
; 2961 : }
; 2962 : 
; 2963 : #ifdef LODEPNG_COMPILE_ENCODER
; 2964 : static int color_tree_has(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2965 : {
; 2966 :   return color_tree_get(tree, r, g, b, a) >= 0;
; 2967 : }
; 2968 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2969 : 
; 2970 : /*color is not allowed to already exist.
; 2971 : Index should be >= 0 (it's signed to be compatible with using -1 for "doesn't exist")*/
; 2972 : static void color_tree_add(ColorTree* tree,
; 2973 :                            unsigned char r, unsigned char g, unsigned char b, unsigned char a, int index)
; 2974 : {
; 2975 :   int bit;
; 2976 :   for(bit = 0; bit < 8; bit++)
; 2977 :   {
; 2978 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
; 2979 :     if(!tree->children[i])
; 2980 :     {
; 2981 :       tree->children[i] = (ColorTree*)lodepng_malloc(sizeof(ColorTree));
; 2982 :       color_tree_init(tree->children[i]);
; 2983 :     }
; 2984 :     tree = tree->children[i];
; 2985 :   }
; 2986 :   tree->index = index;
; 2987 : }
; 2988 : 
; 2989 : /*put a pixel, given its RGBA color, into image of any color type*/
; 2990 : static unsigned rgba8ToPixel(unsigned char* out, size_t i,
; 2991 :                              const LodePNGColorMode* mode, ColorTree* tree /*for palette*/,
; 2992 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2993 : {
; 2994 :   if(mode->colortype == LCT_GREY)
; 2995 :   {
; 2996 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 2997 :     if(mode->bitdepth == 8) out[i] = grey;
; 2998 :     else if(mode->bitdepth == 16) out[i * 2 + 0] = out[i * 2 + 1] = grey;
; 2999 :     else
; 3000 :     {
; 3001 :       /*take the most significant bits of grey*/
; 3002 :       grey = (grey >> (8 - mode->bitdepth)) & ((1 << mode->bitdepth) - 1);
; 3003 :       addColorBits(out, i, mode->bitdepth, grey);
; 3004 :     }
; 3005 :   }
; 3006 :   else if(mode->colortype == LCT_RGB)
; 3007 :   {
; 3008 :     if(mode->bitdepth == 8)
; 3009 :     {
; 3010 :       out[i * 3 + 0] = r;
; 3011 :       out[i * 3 + 1] = g;
; 3012 :       out[i * 3 + 2] = b;
; 3013 :     }
; 3014 :     else
; 3015 :     {
; 3016 :       out[i * 6 + 0] = out[i * 6 + 1] = r;
; 3017 :       out[i * 6 + 2] = out[i * 6 + 3] = g;
; 3018 :       out[i * 6 + 4] = out[i * 6 + 5] = b;
; 3019 :     }
; 3020 :   }
; 3021 :   else if(mode->colortype == LCT_PALETTE)
; 3022 :   {
; 3023 :     int index = color_tree_get(tree, r, g, b, a);
; 3024 :     if(index < 0) return 82; /*color not in palette*/
; 3025 :     if(mode->bitdepth == 8) out[i] = index;
; 3026 :     else addColorBits(out, i, mode->bitdepth, index);
; 3027 :   }
; 3028 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3029 :   {
; 3030 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 3031 :     if(mode->bitdepth == 8)
; 3032 :     {
; 3033 :       out[i * 2 + 0] = grey;
; 3034 :       out[i * 2 + 1] = a;
; 3035 :     }
; 3036 :     else if(mode->bitdepth == 16)
; 3037 :     {
; 3038 :       out[i * 4 + 0] = out[i * 4 + 1] = grey;
; 3039 :       out[i * 4 + 2] = out[i * 4 + 3] = a;
; 3040 :     }
; 3041 :   }
; 3042 :   else if(mode->colortype == LCT_RGBA)
; 3043 :   {
; 3044 :     if(mode->bitdepth == 8)
; 3045 :     {
; 3046 :       out[i * 4 + 0] = r;
; 3047 :       out[i * 4 + 1] = g;
; 3048 :       out[i * 4 + 2] = b;
; 3049 :       out[i * 4 + 3] = a;
; 3050 :     }
; 3051 :     else
; 3052 :     {
; 3053 :       out[i * 8 + 0] = out[i * 8 + 1] = r;
; 3054 :       out[i * 8 + 2] = out[i * 8 + 3] = g;
; 3055 :       out[i * 8 + 4] = out[i * 8 + 5] = b;
; 3056 :       out[i * 8 + 6] = out[i * 8 + 7] = a;
; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/
; 3061 : }
; 3062 : 
; 3063 : /*put a pixel, given its RGBA16 color, into image of any color 16-bitdepth type*/
; 3064 : static unsigned rgba16ToPixel(unsigned char* out, size_t i,
; 3065 :                               const LodePNGColorMode* mode,
; 3066 :                               unsigned short r, unsigned short g, unsigned short b, unsigned short a)
; 3067 : {
; 3068 :   if(mode->bitdepth != 16) return 85; /*must be 16 for this function*/
; 3069 :   if(mode->colortype == LCT_GREY)
; 3070 :   {
; 3071 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3072 :     out[i * 2 + 0] = (grey >> 8) & 255;
; 3073 :     out[i * 2 + 1] = grey & 255;
; 3074 :   }
; 3075 :   else if(mode->colortype == LCT_RGB)
; 3076 :   {
; 3077 :     out[i * 6 + 0] = (r >> 8) & 255;
; 3078 :     out[i * 6 + 1] = r & 255;
; 3079 :     out[i * 6 + 2] = (g >> 8) & 255;
; 3080 :     out[i * 6 + 3] = g & 255;
; 3081 :     out[i * 6 + 4] = (b >> 8) & 255;
; 3082 :     out[i * 6 + 5] = b & 255;
; 3083 :   }
; 3084 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3085 :   {
; 3086 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3087 :     out[i * 4 + 0] = (grey >> 8) & 255;
; 3088 :     out[i * 4 + 1] = grey & 255;
; 3089 :     out[i * 4 + 2] = (a >> 8) & 255;
; 3090 :     out[i * 4 + 3] = a & 255;
; 3091 :   }
; 3092 :   else if(mode->colortype == LCT_RGBA)
; 3093 :   {
; 3094 :     out[i * 8 + 0] = (r >> 8) & 255;
; 3095 :     out[i * 8 + 1] = r & 255;
; 3096 :     out[i * 8 + 2] = (g >> 8) & 255;
; 3097 :     out[i * 8 + 3] = g & 255;
; 3098 :     out[i * 8 + 4] = (b >> 8) & 255;
; 3099 :     out[i * 8 + 5] = b & 255;
; 3100 :     out[i * 8 + 6] = (a >> 8) & 255;
; 3101 :     out[i * 8 + 7] = a & 255;
; 3102 :   }
; 3103 : 
; 3104 :   return 0; /*no error*/
; 3105 : }
; 3106 : 
; 3107 : /*Get RGBA8 color of pixel with index i (y * width + x) from the raw image with given color type.*/
; 3108 : static unsigned getPixelColorRGBA8(unsigned char* r, unsigned char* g,
; 3109 :                                    unsigned char* b, unsigned char* a,
; 3110 :                                    const unsigned char* in, size_t i,
; 3111 :                                    const LodePNGColorMode* mode,
; 3112 :                                    unsigned fix_png)
; 3113 : {
; 3114 :   if(mode->colortype == LCT_GREY)
; 3115 :   {
; 3116 :     if(mode->bitdepth == 8)
; 3117 :     {
; 3118 :       *r = *g = *b = in[i];
; 3119 :       if(mode->key_defined && *r == mode->key_r) *a = 0;
; 3120 :       else *a = 255;
; 3121 :     }
; 3122 :     else if(mode->bitdepth == 16)
; 3123 :     {
; 3124 :       *r = *g = *b = in[i * 2 + 0];
; 3125 :       if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
; 3126 :       else *a = 255;
; 3127 :     }
; 3128 :     else
; 3129 :     {
; 3130 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
; 3131 :       size_t j = i * mode->bitdepth;
; 3132 :       unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3133 :       *r = *g = *b = (value * 255) / highest;
; 3134 :       if(mode->key_defined && value == mode->key_r) *a = 0;
; 3135 :       else *a = 255;
; 3136 :     }
; 3137 :   }
; 3138 :   else if(mode->colortype == LCT_RGB)
; 3139 :   {
; 3140 :     if(mode->bitdepth == 8)
; 3141 :     {
; 3142 :       *r = in[i * 3 + 0]; *g = in[i * 3 + 1]; *b = in[i * 3 + 2];
; 3143 :       if(mode->key_defined && *r == mode->key_r && *g == mode->key_g && *b == mode->key_b) *a = 0;
; 3144 :       else *a = 255;
; 3145 :     }
; 3146 :     else
; 3147 :     {
; 3148 :       *r = in[i * 6 + 0];
; 3149 :       *g = in[i * 6 + 2];
; 3150 :       *b = in[i * 6 + 4];
; 3151 :       if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3152 :          && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3153 :          && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
; 3154 :       else *a = 255;
; 3155 :     }
; 3156 :   }
; 3157 :   else if(mode->colortype == LCT_PALETTE)
; 3158 :   {
; 3159 :     unsigned index;
; 3160 :     if(mode->bitdepth == 8) index = in[i];
; 3161 :     else
; 3162 :     {
; 3163 :       size_t j = i * mode->bitdepth;
; 3164 :       index = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3165 :     }
; 3166 : 
; 3167 :     if(index >= mode->palettesize)
; 3168 :     {
; 3169 :       /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3170 :       if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/
; 3171 :       *r = *g = *b = 0;
; 3172 :       *a = 255;
; 3173 :     }
; 3174 :     else
; 3175 :     {
; 3176 :       *r = mode->palette[index * 4 + 0];
; 3177 :       *g = mode->palette[index * 4 + 1];
; 3178 :       *b = mode->palette[index * 4 + 2];
; 3179 :       *a = mode->palette[index * 4 + 3];
; 3180 :     }
; 3181 :   }
; 3182 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3183 :   {
; 3184 :     if(mode->bitdepth == 8)
; 3185 :     {
; 3186 :       *r = *g = *b = in[i * 2 + 0];
; 3187 :       *a = in[i * 2 + 1];
; 3188 :     }
; 3189 :     else
; 3190 :     {
; 3191 :       *r = *g = *b = in[i * 4 + 0];
; 3192 :       *a = in[i * 4 + 2];
; 3193 :     }
; 3194 :   }
; 3195 :   else if(mode->colortype == LCT_RGBA)
; 3196 :   {
; 3197 :     if(mode->bitdepth == 8)
; 3198 :     {
; 3199 :       *r = in[i * 4 + 0];
; 3200 :       *g = in[i * 4 + 1];
; 3201 :       *b = in[i * 4 + 2];
; 3202 :       *a = in[i * 4 + 3];
; 3203 :     }
; 3204 :     else
; 3205 :     {
; 3206 :       *r = in[i * 8 + 0];
; 3207 :       *g = in[i * 8 + 2];
; 3208 :       *b = in[i * 8 + 4];
; 3209 :       *a = in[i * 8 + 6];
; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/
; 3214 : }
; 3215 : 
; 3216 : /*Similar to getPixelColorRGBA8, but with all the for loops inside of the color
; 3217 : mode test cases, optimized to convert the colors much faster, when converting
; 3218 : to RGBA or RGB with 8 bit per cannel. buffer must be RGBA or RGB output with
; 3219 : enough memory, if has_alpha is true the output is RGBA. mode has the color mode
; 3220 : of the input buffer.*/
; 3221 : static unsigned getPixelColorsRGBA8(unsigned char* buffer, size_t numpixels,
; 3222 :                                     unsigned has_alpha, const unsigned char* in,
; 3223 :                                     const LodePNGColorMode* mode,
; 3224 :                                     unsigned fix_png)
; 3225 : {
; 3226 :   unsigned num_channels = has_alpha ? 4 : 3;
; 3227 :   size_t i;
; 3228 :   if(mode->colortype == LCT_GREY)
; 3229 :   {
; 3230 :     if(mode->bitdepth == 8)
; 3231 :     {
; 3232 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3233 :       {
; 3234 :         buffer[0] = buffer[1] = buffer[2] = in[i];
; 3235 :         if(has_alpha) buffer[3] = mode->key_defined && in[i] == mode->key_r ? 0 : 255;
; 3236 :       }
; 3237 :     }
; 3238 :     else if(mode->bitdepth == 16)
; 3239 :     {
; 3240 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3241 :       {
; 3242 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2];
; 3243 :         if(has_alpha) buffer[3] = mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r ? 0 : 255;
; 3244 :       }
; 3245 :     }
; 3246 :     else
; 3247 :     {
; 3248 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
; 3249 :       size_t j = 0;
; 3250 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3251 :       {
; 3252 :         unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3253 :         buffer[0] = buffer[1] = buffer[2] = (value * 255) / highest;
; 3254 :         if(has_alpha) buffer[3] = mode->key_defined && value == mode->key_r ? 0 : 255;
; 3255 :       }
; 3256 :     }
; 3257 :   }
; 3258 :   else if(mode->colortype == LCT_RGB)
; 3259 :   {
; 3260 :     if(mode->bitdepth == 8)
; 3261 :     {
; 3262 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3263 :       {
; 3264 :         buffer[0] = in[i * 3 + 0];
; 3265 :         buffer[1] = in[i * 3 + 1];
; 3266 :         buffer[2] = in[i * 3 + 2];
; 3267 :         if(has_alpha) buffer[3] = mode->key_defined && buffer[0] == mode->key_r
; 3268 :            && buffer[1]== mode->key_g && buffer[2] == mode->key_b ? 0 : 255;
; 3269 :       }
; 3270 :     }
; 3271 :     else
; 3272 :     {
; 3273 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3274 :       {
; 3275 :         buffer[0] = in[i * 6 + 0];
; 3276 :         buffer[1] = in[i * 6 + 2];
; 3277 :         buffer[2] = in[i * 6 + 4];
; 3278 :         if(has_alpha) buffer[3] = mode->key_defined
; 3279 :            && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3280 :            && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3281 :            && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b ? 0 : 255;
; 3282 :       }
; 3283 :     }
; 3284 :   }
; 3285 :   else if(mode->colortype == LCT_PALETTE)
; 3286 :   {
; 3287 :     unsigned index;
; 3288 :     size_t j = 0;
; 3289 :     for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3290 :     {
; 3291 :       if(mode->bitdepth == 8) index = in[i];
; 3292 :       else index = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3293 : 
; 3294 :       if(index >= mode->palettesize)
; 3295 :       {
; 3296 :         /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3297 :         if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/
; 3298 :         buffer[0] = buffer[1] = buffer[2] = 0;
; 3299 :         if(has_alpha) buffer[3] = 255;
; 3300 :       }
; 3301 :       else
; 3302 :       {
; 3303 :         buffer[0] = mode->palette[index * 4 + 0];
; 3304 :         buffer[1] = mode->palette[index * 4 + 1];
; 3305 :         buffer[2] = mode->palette[index * 4 + 2];
; 3306 :         if(has_alpha) buffer[3] = mode->palette[index * 4 + 3];
; 3307 :       }
; 3308 :     }
; 3309 :   }
; 3310 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3311 :   {
; 3312 :     if(mode->bitdepth == 8)
; 3313 :     {
; 3314 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3315 :       {
; 3316 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2 + 0];
; 3317 :         if(has_alpha) buffer[3] = in[i * 2 + 1];
; 3318 :       }
; 3319 :     }
; 3320 :     else
; 3321 :     {
; 3322 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3323 :       {
; 3324 :         buffer[0] = buffer[1] = buffer[2] = in[i * 4 + 0];
; 3325 :         if(has_alpha) buffer[3] = in[i * 4 + 2];
; 3326 :       }
; 3327 :     }
; 3328 :   }
; 3329 :   else if(mode->colortype == LCT_RGBA)
; 3330 :   {
; 3331 :     if(mode->bitdepth == 8)
; 3332 :     {
; 3333 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3334 :       {
; 3335 :         buffer[0] = in[i * 4 + 0];
; 3336 :         buffer[1] = in[i * 4 + 1];
; 3337 :         buffer[2] = in[i * 4 + 2];
; 3338 :         if(has_alpha) buffer[3] = in[i * 4 + 3];
; 3339 :       }
; 3340 :     }
; 3341 :     else
; 3342 :     {
; 3343 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3344 :       {
; 3345 :         buffer[0] = in[i * 8 + 0];
; 3346 :         buffer[1] = in[i * 8 + 2];
; 3347 :         buffer[2] = in[i * 8 + 4];
; 3348 :         if(has_alpha) buffer[3] = in[i * 8 + 6];
; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/
; 3354 : }
; 3355 : 
; 3356 : /*Get RGBA16 color of pixel with index i (y * width + x) from the raw image with
; 3357 : given color type, but the given color type must be 16-bit itself.*/
; 3358 : static unsigned getPixelColorRGBA16(unsigned short* r, unsigned short* g, unsigned short* b, unsigned short* a,
; 3359 :                                     const unsigned char* in, size_t i, const LodePNGColorMode* mode)
; 3360 : {
; 3361 :   if(mode->bitdepth != 16) return 85; /*error: this function only supports 16-bit input*/
; 3362 : 
; 3363 :   if(mode->colortype == LCT_GREY)
; 3364 :   {
; 3365 :     *r = *g = *b = 256 * in[i * 2 + 0] + in[i * 2 + 1];
; 3366 :     if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
; 3367 :     else *a = 65535;
; 3368 :   }
; 3369 :   else if(mode->colortype == LCT_RGB)
; 3370 :   {
; 3371 :     *r = 256 * in[i * 6 + 0] + in[i * 6 + 1];
; 3372 :     *g = 256 * in[i * 6 + 2] + in[i * 6 + 3];
; 3373 :     *b = 256 * in[i * 6 + 4] + in[i * 6 + 5];
; 3374 :     if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3375 :        && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3376 :        && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
; 3377 :     else *a = 65535;
; 3378 :   }
; 3379 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3380 :   {
; 3381 :     *r = *g = *b = 256 * in[i * 4 + 0] + in[i * 4 + 1];
; 3382 :     *a = 256 * in[i * 4 + 2] + in[i * 4 + 3];
; 3383 :   }
; 3384 :   else if(mode->colortype == LCT_RGBA)
; 3385 :   {
; 3386 :     *r = 256 * in[i * 8 + 0] + in[i * 8 + 1];
; 3387 :     *g = 256 * in[i * 8 + 2] + in[i * 8 + 3];
; 3388 :     *b = 256 * in[i * 8 + 4] + in[i * 8 + 5];
; 3389 :     *a = 256 * in[i * 8 + 6] + in[i * 8 + 7];
; 3390 :   }
; 3391 :   else return 85; /*error: this function only supports 16-bit input, not palettes*/
; 3392 : 
; 3393 :   return 0; /*no error*/
; 3394 : }
; 3395 : 
; 3396 : /*
; 3397 : converts from any color type to 24-bit or 32-bit (later maybe more supported). return value = LodePNG error code
; 3398 : the out buffer must have (w * h * bpp + 7) / 8 bytes, where bpp is the bits per pixel of the output color type
; 3399 : (lodepng_get_bpp) for < 8 bpp images, there may _not_ be padding bits at the end of scanlines.
; 3400 : */
; 3401 : unsigned lodepng_convert(unsigned char* out, const unsigned char* in,
; 3402 :                          LodePNGColorMode* mode_out, const LodePNGColorMode* mode_in,
; 3403 :                          unsigned w, unsigned h, unsigned fix_png)
; 3404 : {
; 3405 :   unsigned error = 0;
; 3406 :   size_t i;
; 3407 :   ColorTree tree;
; 3408 :   size_t numpixels = w * h;
; 3409 : 
; 3410 :   if(lodepng_color_mode_equal(mode_out, mode_in))
; 3411 :   {
; 3412 :     size_t numbytes = lodepng_get_raw_size(w, h, mode_in);
; 3413 :     for(i = 0; i < numbytes; i++) out[i] = in[i];
; 3414 :     return error;
; 3415 :   }
; 3416 : 
; 3417 :   if(mode_out->colortype == LCT_PALETTE)
; 3418 :   {
; 3419 :     size_t palsize = 1 << mode_out->bitdepth;
; 3420 :     if(mode_out->palettesize < palsize) palsize = mode_out->palettesize;
; 3421 :     color_tree_init(&tree);
; 3422 :     for(i = 0; i < palsize; i++)
; 3423 :     {
; 3424 :       unsigned char* p = &mode_out->palette[i * 4];
; 3425 :       color_tree_add(&tree, p[0], p[1], p[2], p[3], i);
; 3426 :     }
; 3427 :   }
; 3428 : 
; 3429 :   if(mode_in->bitdepth == 16 && mode_out->bitdepth == 16)
; 3430 :   {
; 3431 :     for(i = 0; i < numpixels; i++)
; 3432 :     {
; 3433 :       unsigned short r = 0, g = 0, b = 0, a = 0;
; 3434 :       error = getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode_in);
; 3435 :       if(error) break;
; 3436 :       error = rgba16ToPixel(out, i, mode_out, r, g, b, a);
; 3437 :       if(error) break;
; 3438 :     }
; 3439 :   }
; 3440 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGBA)
; 3441 :   {
; 3442 :     error = getPixelColorsRGBA8(out, numpixels, 1, in, mode_in, fix_png);
; 3443 :   }
; 3444 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGB)
; 3445 :   {
; 3446 :     error = getPixelColorsRGBA8(out, numpixels, 0, in, mode_in, fix_png);
; 3447 :   }
; 3448 :   else
; 3449 :   {
; 3450 :     unsigned char r = 0, g = 0, b = 0, a = 0;
; 3451 :     for(i = 0; i < numpixels; i++)
; 3452 :     {
; 3453 :       error = getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode_in, fix_png);
; 3454 :       if(error) break;
; 3455 :       error = rgba8ToPixel(out, i, mode_out, &tree, r, g, b, a);
; 3456 :       if(error) break;
; 3457 :     }
; 3458 :   }
; 3459 : 
; 3460 :   if(mode_out->colortype == LCT_PALETTE)
; 3461 :   {
; 3462 :     color_tree_cleanup(&tree);
; 3463 :   }
; 3464 : 
; 3465 :   return error;
; 3466 : }
; 3467 : 
; 3468 : #ifdef LODEPNG_COMPILE_ENCODER
; 3469 : 
; 3470 : typedef struct ColorProfile
; 3471 : {
; 3472 :   unsigned char sixteenbit; /*needs more than 8 bits per channel*/
; 3473 :   unsigned char sixteenbit_done;
; 3474 : 
; 3475 : 
; 3476 :   unsigned char colored; /*not greyscale*/
; 3477 :   unsigned char colored_done;
; 3478 : 
; 3479 :   unsigned char key; /*a color key is required, or more*/
; 3480 :   unsigned short key_r; /*these values are always in 16-bit bitdepth in the profile*/
; 3481 :   unsigned short key_g;
; 3482 :   unsigned short key_b;
; 3483 :   unsigned char alpha; /*alpha channel, or alpha palette, required*/
; 3484 :   unsigned char alpha_done;
; 3485 : 
; 3486 :   unsigned numcolors;
; 3487 :   ColorTree tree; /*for listing the counted colors, up to 256*/
; 3488 :   unsigned char* palette; /*size 1024. Remember up to the first 256 RGBA colors*/
; 3489 :   unsigned maxnumcolors; /*if more than that amount counted*/
; 3490 :   unsigned char numcolors_done;
; 3491 : 
; 3492 :   unsigned greybits; /*amount of bits required for greyscale (1, 2, 4, 8). Does not take 16 bit into account.*/
; 3493 :   unsigned char greybits_done;
; 3494 : 
; 3495 : } ColorProfile;
; 3496 : 
; 3497 : static void color_profile_init(ColorProfile* profile, const LodePNGColorMode* mode)
; 3498 : {
; 3499 :   profile->sixteenbit = 0;
; 3500 :   profile->sixteenbit_done = mode->bitdepth == 16 ? 0 : 1;
; 3501 : 
; 3502 :   profile->colored = 0;
; 3503 :   profile->colored_done = lodepng_is_greyscale_type(mode) ? 1 : 0;
; 3504 : 
; 3505 :   profile->key = 0;
; 3506 :   profile->alpha = 0;
; 3507 :   profile->alpha_done = lodepng_can_have_alpha(mode) ? 0 : 1;
; 3508 : 
; 3509 :   profile->numcolors = 0;
; 3510 :   color_tree_init(&profile->tree);
; 3511 :   profile->palette = (unsigned char*)lodepng_malloc(1024);
; 3512 :   profile->maxnumcolors = 257;
; 3513 :   if(lodepng_get_bpp(mode) <= 8)
; 3514 :   {
; 3515 :     int bpp = lodepng_get_bpp(mode);
; 3516 :     profile->maxnumcolors = bpp == 1 ? 2 : (bpp == 2 ? 4 : (bpp == 4 ? 16 : 256));
; 3517 :   }
; 3518 :   profile->numcolors_done = 0;
; 3519 : 
; 3520 :   profile->greybits = 1;
; 3521 :   profile->greybits_done = lodepng_get_bpp(mode) == 1 ? 1 : 0;
; 3522 : }
; 3523 : 
; 3524 : static void color_profile_cleanup(ColorProfile* profile)
; 3525 : {
; 3526 :   color_tree_cleanup(&profile->tree);
; 3527 :   lodepng_free(profile->palette);
; 3528 : }
; 3529 : 
; 3530 : /*function used for debug purposes with C++*/
; 3531 : /*void printColorProfile(ColorProfile* p)
; 3532 : {
; 3533 :   std::cout << "sixteenbit: " << (int)p->sixteenbit << std::endl;
; 3534 :   std::cout << "sixteenbit_done: " << (int)p->sixteenbit_done << std::endl;
; 3535 :   std::cout << "colored: " << (int)p->colored << std::endl;
; 3536 :   std::cout << "colored_done: " << (int)p->colored_done << std::endl;
; 3537 :   std::cout << "key: " << (int)p->key << std::endl;
; 3538 :   std::cout << "key_r: " << (int)p->key_r << std::endl;
; 3539 :   std::cout << "key_g: " << (int)p->key_g << std::endl;
; 3540 :   std::cout << "key_b: " << (int)p->key_b << std::endl;
; 3541 :   std::cout << "alpha: " << (int)p->alpha << std::endl;
; 3542 :   std::cout << "alpha_done: " << (int)p->alpha_done << std::endl;
; 3543 :   std::cout << "numcolors: " << (int)p->numcolors << std::endl;
; 3544 :   std::cout << "maxnumcolors: " << (int)p->maxnumcolors << std::endl;
; 3545 :   std::cout << "numcolors_done: " << (int)p->numcolors_done << std::endl;
; 3546 :   std::cout << "greybits: " << (int)p->greybits << std::endl;
; 3547 :   std::cout << "greybits_done: " << (int)p->greybits_done << std::endl;
; 3548 : }*/
; 3549 : 
; 3550 : /*Returns how many bits needed to represent given value (max 8 bit)*/
; 3551 : unsigned getValueRequiredBits(unsigned short value)
; 3552 : {
; 3553 :   if(value == 0 || value == 255) return 1;
; 3554 :   /*The scaling of 2-bit and 4-bit values uses multiples of 85 and 17*/
; 3555 :   if(value % 17 == 0) return value % 85 == 0 ? 2 : 4;
; 3556 :   return 8;
; 3557 : }
; 3558 : 
; 3559 : /*profile must already have been inited with mode.
; 3560 : It's ok to set some parameters of profile to done already.*/
; 3561 : static unsigned get_color_profile(ColorProfile* profile,
; 3562 :                                   const unsigned char* in,
; 3563 :                                   size_t numpixels /*must be full image size, for certain filesize based choices*/,
; 3564 :                                   const LodePNGColorMode* mode,
; 3565 :                                   unsigned fix_png)
; 3566 : {
; 3567 :   unsigned error = 0;
; 3568 :   size_t i;
; 3569 : 
; 3570 :   if(mode->bitdepth == 16)
; 3571 :   {
; 3572 :     for(i = 0; i < numpixels; i++)
; 3573 :     {
; 3574 :       unsigned short r, g, b, a;
; 3575 :       error = getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode);
; 3576 :       if(error) break;
; 3577 : 
; 3578 :       /*a color is considered good for 8-bit if the first byte and the second byte are equal,
; 3579 :         (so if it's divisible through 257), NOT necessarily if the second byte is 0*/
; 3580 :       if(!profile->sixteenbit_done
; 3581 :           && (((r & 255) != ((r >> 8) & 255))
; 3582 :            || ((g & 255) != ((g >> 8) & 255))
; 3583 :            || ((b & 255) != ((b >> 8) & 255))))
; 3584 :       {
; 3585 :         profile->sixteenbit = 1;
; 3586 :         profile->sixteenbit_done = 1;
; 3587 :         profile->greybits_done = 1; /*greybits is not applicable anymore at 16-bit*/
; 3588 :         profile->numcolors_done = 1; /*counting colors no longer useful, palette doesn't support 16-bit*/
; 3589 :       }
; 3590 : 
; 3591 :       if(!profile->colored_done && (r != g || r != b))
; 3592 :       {
; 3593 :         profile->colored = 1;
; 3594 :         profile->colored_done = 1;
; 3595 :         profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3596 :       }
; 3597 : 
; 3598 :       if(!profile->alpha_done && a != 65535)
; 3599 :       {
; 3600 :         /*only use color key if numpixels large enough to justify tRNS chunk size*/
; 3601 :         if(a == 0 && numpixels > 16 && !(profile->key && (r != profile->key_r || g != profile->key_g || b != profile->key_b)))
; 3602 :         {
; 3603 :           if(!profile->alpha && !profile->key)
; 3604 :           {
; 3605 :             profile->key = 1;
; 3606 :             profile->key_r = r;
; 3607 :             profile->key_g = g;
; 3608 :             profile->key_b = b;
; 3609 :           }
; 3610 :         }
; 3611 :         else
; 3612 :         {
; 3613 :           profile->alpha = 1;
; 3614 :           profile->alpha_done = 1;
; 3615 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3616 :         }
; 3617 :       }
; 3618 : 
; 3619 :       /* Color key cannot be used if an opaque pixel also has that RGB color. */
; 3620 :       if(!profile->alpha_done && a == 65535 && profile->key
; 3621 :           && r == profile->key_r && g == profile->key_g && b == profile->key_b)
; 3622 :       {
; 3623 :           profile->alpha = 1;
; 3624 :           profile->alpha_done = 1;
; 3625 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3626 :       }
; 3627 : 
; 3628 :       if(!profile->greybits_done)
; 3629 :       {
; 3630 :         /*assuming 8-bit r, this test does not care about 16-bit*/
; 3631 :         unsigned bits = getValueRequiredBits(r);
; 3632 :         if(bits > profile->greybits) profile->greybits = bits;
; 3633 :         if(profile->greybits >= 8) profile->greybits_done = 1;
; 3634 :       }
; 3635 : 
; 3636 :       if(!profile->numcolors_done)
; 3637 :       {
; 3638 :         /*assuming 8-bit rgba, this test does not care about 16-bit*/
; 3639 :         if(!color_tree_has(&profile->tree, (unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a))
; 3640 :         {
; 3641 :           color_tree_add(&profile->tree, (unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a,
; 3642 :             profile->numcolors);
; 3643 :           if(profile->numcolors < 256)
; 3644 :           {
; 3645 :             unsigned char* p = profile->palette;
; 3646 :             unsigned i = profile->numcolors;
; 3647 :             p[i * 4 + 0] = (unsigned char)r;
; 3648 :             p[i * 4 + 1] = (unsigned char)g;
; 3649 :             p[i * 4 + 2] = (unsigned char)b;
; 3650 :             p[i * 4 + 3] = (unsigned char)a;
; 3651 :           }
; 3652 :           profile->numcolors++;
; 3653 :           if(profile->numcolors >= profile->maxnumcolors) profile->numcolors_done = 1;
; 3654 :         }
; 3655 :       }
; 3656 : 
; 3657 :       if(profile->alpha_done && profile->numcolors_done
; 3658 :       && profile->colored_done && profile->sixteenbit_done && profile->greybits_done)
; 3659 :       {
; 3660 :         break;
; 3661 :       }
; 3662 :     };
; 3663 :   }
; 3664 :   else /* < 16-bit */
; 3665 :   {
; 3666 :     for(i = 0; i < numpixels; i++)
; 3667 :     {
; 3668 :       unsigned char r = 0, g = 0, b = 0, a = 0;
; 3669 :       error = getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode, fix_png);
; 3670 :       if(error) break;
; 3671 : 
; 3672 :       if(!profile->colored_done && (r != g || r != b))
; 3673 :       {
; 3674 :         profile->colored = 1;
; 3675 :         profile->colored_done = 1;
; 3676 :         profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3677 :       }
; 3678 : 
; 3679 :       if(!profile->alpha_done && a != 255)
; 3680 :       {
; 3681 :         if(a == 0 && !(profile->key && (r != profile->key_r || g != profile->key_g || b != profile->key_b)))
; 3682 :         {
; 3683 :           if(!profile->key)
; 3684 :           {
; 3685 :             profile->key = 1;
; 3686 :             profile->key_r = r;
; 3687 :             profile->key_g = g;
; 3688 :             profile->key_b = b;
; 3689 :           }
; 3690 :         }
; 3691 :         else
; 3692 :         {
; 3693 :           profile->alpha = 1;
; 3694 :           profile->alpha_done = 1;
; 3695 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3696 :         }
; 3697 :       }
; 3698 : 
; 3699 :       /* Color key cannot be used if an opaque pixel also has that RGB color. */
; 3700 :       if(!profile->alpha_done && a == 255 && profile->key
; 3701 :           && r == profile->key_r && g == profile->key_g && b == profile->key_b)
; 3702 :       {
; 3703 :           profile->alpha = 1;
; 3704 :           profile->alpha_done = 1;
; 3705 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3706 :       }
; 3707 : 
; 3708 :       if(!profile->greybits_done)
; 3709 :       {
; 3710 :         unsigned bits = getValueRequiredBits(r);
; 3711 :         if(bits > profile->greybits) profile->greybits = bits;
; 3712 :         if(profile->greybits >= 8) profile->greybits_done = 1;
; 3713 :       }
; 3714 : 
; 3715 :       if(!profile->numcolors_done)
; 3716 :       {
; 3717 :         if(!color_tree_has(&profile->tree, r, g, b, a))
; 3718 :         {
; 3719 : 
; 3720 :           color_tree_add(&profile->tree, r, g, b, a, profile->numcolors);
; 3721 :           if(profile->numcolors < 256)
; 3722 :           {
; 3723 :             unsigned char* p = profile->palette;
; 3724 :             unsigned i = profile->numcolors;
; 3725 :             p[i * 4 + 0] = r;
; 3726 :             p[i * 4 + 1] = g;
; 3727 :             p[i * 4 + 2] = b;
; 3728 :             p[i * 4 + 3] = a;
; 3729 :           }
; 3730 :           profile->numcolors++;
; 3731 :           if(profile->numcolors >= profile->maxnumcolors) profile->numcolors_done = 1;
; 3732 :         }
; 3733 :       }
; 3734 : 
; 3735 :       if(profile->alpha_done && profile->numcolors_done && profile->colored_done && profile->greybits_done)
; 3736 :       {
; 3737 :         break;
; 3738 :       }
; 3739 :     };
; 3740 :   }
; 3741 : 
; 3742 :   /*make the profile's key always 16-bit for consistency*/
; 3743 :   if(mode->bitdepth < 16)
; 3744 :   {
; 3745 :     /*repeat each byte twice*/
; 3746 :     profile->key_r *= 257;
; 3747 :     profile->key_g *= 257;
; 3748 :     profile->key_b *= 257;
; 3749 :   }
; 3750 : 
; 3751 :   return error;
; 3752 : }
; 3753 : 
; 3754 : static void setColorKeyFrom16bit(LodePNGColorMode* mode_out, unsigned r, unsigned g, unsigned b, unsigned bitdepth)
; 3755 : {
; 3756 :   unsigned mask = (1 << bitdepth) - 1;
; 3757 :   mode_out->key_defined = 1;
; 3758 :   mode_out->key_r = r & mask;
; 3759 :   mode_out->key_g = g & mask;
; 3760 :   mode_out->key_b = b & mask;
; 3761 : }
; 3762 : 
; 3763 : /*updates values of mode with a potentially smaller color model. mode_out should
; 3764 : contain the user chosen color model, but will be overwritten with the new chosen one.*/
; 3765 : unsigned lodepng_auto_choose_color(LodePNGColorMode* mode_out,
; 3766 :                                    const unsigned char* image, unsigned w, unsigned h,
; 3767 :                                    const LodePNGColorMode* mode_in,
; 3768 :                                    LodePNGAutoConvert auto_convert)
; 3769 : {
; 3770 :   ColorProfile profile;
; 3771 :   unsigned error = 0;
; 3772 :   int no_nibbles = auto_convert == LAC_AUTO_NO_NIBBLES || auto_convert == LAC_AUTO_NO_NIBBLES_NO_PALETTE;
; 3773 :   int no_palette = auto_convert == LAC_AUTO_NO_PALETTE || auto_convert == LAC_AUTO_NO_NIBBLES_NO_PALETTE;
; 3774 : 
; 3775 :   if(auto_convert == LAC_ALPHA)
; 3776 :   {
; 3777 :     if(mode_out->colortype != LCT_RGBA && mode_out->colortype != LCT_GREY_ALPHA) return 0;
; 3778 :   }
; 3779 : 
; 3780 :   color_profile_init(&profile, mode_in);
; 3781 :   if(auto_convert == LAC_ALPHA)
; 3782 :   {
; 3783 :     profile.colored_done = 1;
; 3784 :     profile.greybits_done = 1;
; 3785 :     profile.numcolors_done = 1;
; 3786 :     profile.sixteenbit_done = 1;
; 3787 :   }
; 3788 :   error = get_color_profile(&profile, image, w * h, mode_in, 0 /*fix_png*/);
; 3789 :   if(!error && auto_convert == LAC_ALPHA)
; 3790 :   {
; 3791 :     if(!profile.alpha)
; 3792 :     {
; 3793 :       mode_out->colortype = (mode_out->colortype == LCT_RGBA ? LCT_RGB : LCT_GREY);
; 3794 :       if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3795 :     }
; 3796 :   }
; 3797 :   else if(!error && auto_convert != LAC_ALPHA)
; 3798 :   {
; 3799 :     mode_out->key_defined = 0;
; 3800 : 
; 3801 :     if(profile.sixteenbit)
; 3802 :     {
; 3803 :       mode_out->bitdepth = 16;
; 3804 :       if(profile.alpha)
; 3805 :       {
; 3806 :         mode_out->colortype = profile.colored ? LCT_RGBA : LCT_GREY_ALPHA;
; 3807 :       }
; 3808 :       else
; 3809 :       {
; 3810 :         mode_out->colortype = profile.colored ? LCT_RGB : LCT_GREY;
; 3811 :         if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3812 :       }
; 3813 :     }
; 3814 :     else /*less than 16 bits per channel*/
; 3815 :     {
; 3816 :       /*don't add palette overhead if image hasn't got a lot of pixels*/
; 3817 :       unsigned n = profile.numcolors;
; 3818 :       int palette_ok = !no_palette && n <= 256 && (n * 2 < w * h);
; 3819 :       unsigned palettebits = n <= 2 ? 1 : (n <= 4 ? 2 : (n <= 16 ? 4 : 8));
; 3820 :       int grey_ok = !profile.colored && !profile.alpha; /*grey without alpha, with potentially low bits*/
; 3821 :       if(palette_ok || grey_ok)
; 3822 :       {
; 3823 :         if(!palette_ok || (grey_ok && profile.greybits <= palettebits))
; 3824 :         {
; 3825 :           unsigned grey = profile.key_r;
; 3826 :           mode_out->colortype = LCT_GREY;
; 3827 :           mode_out->bitdepth = profile.greybits;
; 3828 :           if(profile.key) setColorKeyFrom16bit(mode_out, grey, grey, grey, mode_out->bitdepth);
; 3829 :         }
; 3830 :         else
; 3831 :         {
; 3832 :           /*fill in the palette*/
; 3833 :           unsigned i;
; 3834 :           unsigned char* p = profile.palette;
; 3835 :           /*remove potential earlier palette*/
; 3836 :           lodepng_palette_clear(mode_out);
; 3837 :           for(i = 0; i < profile.numcolors; i++)
; 3838 :           {
; 3839 :             error = lodepng_palette_add(mode_out, p[i * 4 + 0], p[i * 4 + 1], p[i * 4 + 2], p[i * 4 + 3]);
; 3840 :             if(error) break;
; 3841 :           }
; 3842 : 
; 3843 :           mode_out->colortype = LCT_PALETTE;
; 3844 :           mode_out->bitdepth = palettebits;
; 3845 :         }
; 3846 :       }
; 3847 :       else /*8-bit per channel*/
; 3848 :       {
; 3849 :         mode_out->bitdepth = 8;
; 3850 :         if(profile.alpha)
; 3851 :         {
; 3852 :           mode_out->colortype = profile.colored ? LCT_RGBA : LCT_GREY_ALPHA;
; 3853 :         }
; 3854 :         else
; 3855 :         {
; 3856 :           mode_out->colortype = profile.colored ? LCT_RGB : LCT_GREY /*LCT_GREY normally won't occur, already done earlier*/;
; 3857 :           if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3858 :         }
; 3859 :       }
; 3860 :     }
; 3861 :   }
; 3862 : 
; 3863 :   color_profile_cleanup(&profile);
; 3864 : 
; 3865 :   if(mode_out->colortype == LCT_PALETTE && mode_in->palettesize == mode_out->palettesize)
; 3866 :   {
; 3867 :     /*In this case keep the palette order of the input, so that the user can choose an optimal one*/
; 3868 :     size_t i;
; 3869 :     for(i = 0; i < mode_in->palettesize * 4; i++)
; 3870 :     {
; 3871 :       mode_out->palette[i] = mode_in->palette[i];
; 3872 :     }
; 3873 :   }
; 3874 : 
; 3875 :   if(no_nibbles && mode_out->bitdepth < 8)
; 3876 :   {
; 3877 :     /*palette can keep its small amount of colors, as long as no indices use it*/
; 3878 :     mode_out->bitdepth = 8;
; 3879 :   }
; 3880 : 
; 3881 :   return error;
; 3882 : }
; 3883 : 
; 3884 : #endif /* #ifdef LODEPNG_COMPILE_ENCODER */
; 3885 : 
; 3886 : /*
; 3887 : Paeth predicter, used by PNG filter type 4
; 3888 : The parameters are of type short, but should come from unsigned chars, the shorts
; 3889 : are only needed to make the paeth calculation correct.
; 3890 : */
; 3891 : static unsigned char paethPredictor(short a, short b, short c)
; 3892 : {
; 3893 :   short pa = abs(b - c);
; 3894 :   short pb = abs(a - c);
; 3895 :   short pc = abs(a + b - c - c);
; 3896 : 
; 3897 :   if(pc < pa && pc < pb) return (unsigned char)c;
; 3898 :   else if(pb < pa) return (unsigned char)b;
; 3899 :   else return (unsigned char)a;
; 3900 : }
; 3901 : 
; 3902 : /*shared values used by multiple Adam7 related functions*/
; 3903 : 
; 3904 : static const unsigned ADAM7_IX[7] = { 0, 4, 0, 2, 0, 1, 0 }; /*x start values*/
; 3905 : static const unsigned ADAM7_IY[7] = { 0, 0, 4, 0, 2, 0, 1 }; /*y start values*/
; 3906 : static const unsigned ADAM7_DX[7] = { 8, 8, 4, 4, 2, 2, 1 }; /*x delta values*/
; 3907 : static const unsigned ADAM7_DY[7] = { 8, 8, 8, 4, 4, 2, 2 }; /*y delta values*/
; 3908 : 
; 3909 : /*
; 3910 : Outputs various dimensions and positions in the image related to the Adam7 reduced images.
; 3911 : passw: output containing the width of the 7 passes
; 3912 : passh: output containing the height of the 7 passes
; 3913 : filter_passstart: output containing the index of the start and end of each
; 3914 :  reduced image with filter bytes
; 3915 : padded_passstart output containing the index of the start and end of each
; 3916 :  reduced image when without filter bytes but with padded scanlines
; 3917 : passstart: output containing the index of the start and end of each reduced
; 3918 :  image without padding between scanlines, but still padding between the images
; 3919 : w, h: width and height of non-interlaced image
; 3920 : bpp: bits per pixel
; 3921 : "padded" is only relevant if bpp is less than 8 and a scanline or image does not
; 3922 :  end at a full byte
; 3923 : */
; 3924 : static void Adam7_getpassvalues(unsigned passw[7], unsigned passh[7], size_t filter_passstart[8],
; 3925 :                                 size_t padded_passstart[8], size_t passstart[8], unsigned w, unsigned h, unsigned bpp)
; 3926 : {
; 3927 :   /*the passstart values have 8 values: the 8th one indicates the byte after the end of the 7th (= last) pass*/
; 3928 :   unsigned i;
; 3929 : 
; 3930 :   /*calculate width and height in pixels of each pass*/
; 3931 :   for(i = 0; i < 7; i++)
; 3932 :   {
; 3933 :     passw[i] = (w + ADAM7_DX[i] - ADAM7_IX[i] - 1) / ADAM7_DX[i];
; 3934 :     passh[i] = (h + ADAM7_DY[i] - ADAM7_IY[i] - 1) / ADAM7_DY[i];
; 3935 :     if(passw[i] == 0) passh[i] = 0;
; 3936 :     if(passh[i] == 0) passw[i] = 0;
; 3937 :   }
; 3938 : 
; 3939 :   filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
; 3940 :   for(i = 0; i < 7; i++)
; 3941 :   {
; 3942 :     /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
; 3943 :     filter_passstart[i + 1] = filter_passstart[i]
; 3944 :                             + ((passw[i] && passh[i]) ? passh[i] * (1 + (passw[i] * bpp + 7) / 8) : 0);
; 3945 :     /*bits padded if needed to fill full byte at end of each scanline*/
; 3946 :     padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7) / 8);
; 3947 :     /*only padded at end of reduced image*/
; 3948 :     passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7) / 8;
; 3949 :   }
; 3950 : }
; 3951 : 
; 3952 : #ifdef LODEPNG_COMPILE_DECODER
; 3953 : 
; 3954 : /* ////////////////////////////////////////////////////////////////////////// */
; 3955 : /* / PNG Decoder                                                            / */
; 3956 : /* ////////////////////////////////////////////////////////////////////////// */
; 3957 : 
; 3958 : /*read the information from the header and store it in the LodePNGInfo. return value is error*/
; 3959 : unsigned lodepng_inspect(unsigned* w, unsigned* h, LodePNGState* state,
; 3960 :                          const unsigned char* in, size_t insize)
; 3961 : {
; 3962 :   LodePNGInfo* info = &state->info_png;
; 3963 :   if(insize == 0 || in == 0)
; 3964 :   {
; 3965 :     CERROR_RETURN_ERROR(state->error, 48); /*error: the given data is empty*/
; 3966 :   }
; 3967 :   if(insize < 29)
; 3968 :   {
; 3969 :     CERROR_RETURN_ERROR(state->error, 27); /*error: the data length is smaller than the length of a PNG header*/
; 3970 :   }
; 3971 : 
; 3972 :   /*when decoding a new PNG image, make sure all parameters created after previous decoding are reset*/
; 3973 :   lodepng_info_cleanup(info);
; 3974 :   lodepng_info_init(info);
; 3975 : 
; 3976 :   if(in[0] != 137 || in[1] != 80 || in[2] != 78 || in[3] != 71
; 3977 :      || in[4] != 13 || in[5] != 10 || in[6] != 26 || in[7] != 10)
; 3978 :   {
; 3979 :     CERROR_RETURN_ERROR(state->error, 28); /*error: the first 8 bytes are not the correct PNG signature*/
; 3980 :   }
; 3981 :   if(in[12] != 'I' || in[13] != 'H' || in[14] != 'D' || in[15] != 'R')
; 3982 :   {
; 3983 :     CERROR_RETURN_ERROR(state->error, 29); /*error: it doesn't start with a IHDR chunk!*/
; 3984 :   }
; 3985 : 
; 3986 :   /*read the values given in the header*/
; 3987 :   *w = lodepng_read32bitInt(&in[16]);
; 3988 :   *h = lodepng_read32bitInt(&in[20]);
; 3989 :   info->color.bitdepth = in[24];
; 3990 :   info->color.colortype = (LodePNGColorType)in[25];
; 3991 :   info->compression_method = in[26];
; 3992 :   info->filter_method = in[27];
; 3993 :   info->interlace_method = in[28];
; 3994 : 
; 3995 :   if(!state->decoder.ignore_crc)
; 3996 :   {
; 3997 :     unsigned CRC = lodepng_read32bitInt(&in[29]);
; 3998 :     unsigned checksum = lodepng_crc32(&in[12], 17);
; 3999 :     if(CRC != checksum)
; 4000 :     {
; 4001 :       CERROR_RETURN_ERROR(state->error, 57); /*invalid CRC*/
; 4002 :     }
; 4003 :   }
; 4004 : 
; 4005 :   /*error: only compression method 0 is allowed in the specification*/
; 4006 :   if(info->compression_method != 0) CERROR_RETURN_ERROR(state->error, 32);
; 4007 :   /*error: only filter method 0 is allowed in the specification*/
; 4008 :   if(info->filter_method != 0) CERROR_RETURN_ERROR(state->error, 33);
; 4009 :   /*error: only interlace methods 0 and 1 exist in the specification*/
; 4010 :   if(info->interlace_method > 1) CERROR_RETURN_ERROR(state->error, 34);
; 4011 : 
; 4012 :   state->error = checkColorValidity(info->color.colortype, info->color.bitdepth);
; 4013 :   return state->error;
; 4014 : }
; 4015 : 
; 4016 : static unsigned unfilterScanline(unsigned char* recon, const unsigned char* scanline, const unsigned char* precon,
; 4017 :                                  size_t bytewidth, unsigned char filterType, size_t length)
; 4018 : {
; 4019 :   /*
; 4020 :   For PNG filter method 0
; 4021 :   unfilter a PNG image scanline by scanline. when the pixels are smaller than 1 byte,
; 4022 :   the filter works byte per byte (bytewidth = 1)
; 4023 :   precon is the previous unfiltered scanline, recon the result, scanline the current one
; 4024 :   the incoming scanlines do NOT include the filtertype byte, that one is given in the parameter filterType instead
; 4025 :   recon and scanline MAY be the same memory address! precon must be disjoint.
; 4026 :   */
; 4027 : 
; 4028 :   size_t i;
; 4029 :   switch(filterType)
; 4030 :   {
; 4031 :     case 0:
; 4032 :       for(i = 0; i < length; i++) recon[i] = scanline[i];
; 4033 :       break;
; 4034 :     case 1:
; 4035 :       for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];
; 4036 :       for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth];
; 4037 :       break;
; 4038 :     case 2:
; 4039 :       if(precon)
; 4040 :       {
; 4041 :         for(i = 0; i < length; i++) recon[i] = scanline[i] + precon[i];
; 4042 :       }
; 4043 :       else
; 4044 :       {
; 4045 :         for(i = 0; i < length; i++) recon[i] = scanline[i];
; 4046 :       }
; 4047 :       break;
; 4048 :     case 3:
; 4049 :       if(precon)
; 4050 :       {
; 4051 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i] + precon[i] / 2;
; 4052 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + ((recon[i - bytewidth] + precon[i]) / 2);
; 4053 :       }
; 4054 :       else
; 4055 :       {
; 4056 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];
; 4057 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth] / 2;
; 4058 :       }
; 4059 :       break;
; 4060 :     case 4:
; 4061 :       if(precon)
; 4062 :       {
; 4063 :         for(i = 0; i < bytewidth; i++)
; 4064 :         {
; 4065 :           recon[i] = (scanline[i] + precon[i]); /*paethPredictor(0, precon[i], 0) is always precon[i]*/
; 4066 :         }
; 4067 :         for(i = bytewidth; i < length; i++)
; 4068 :         {
; 4069 :           recon[i] = (scanline[i] + paethPredictor(recon[i - bytewidth], precon[i], precon[i - bytewidth]));
; 4070 :         }
; 4071 :       }
; 4072 :       else
; 4073 :       {
; 4074 :         for(i = 0; i < bytewidth; i++)
; 4075 :         {
; 4076 :           recon[i] = scanline[i];
; 4077 :         }
; 4078 :         for(i = bytewidth; i < length; i++)
; 4079 :         {
; 4080 :           /*paethPredictor(recon[i - bytewidth], 0, 0) is always recon[i - bytewidth]*/
; 4081 :           recon[i] = (scanline[i] + recon[i - bytewidth]);
; 4082 :         }
; 4083 :       }
; 4084 :       break;
; 4085 :     default: return 36; /*error: unexisting filter type given*/
; 4086 :   }
; 4087 :   return 0;
; 4088 : }
; 4089 : 
; 4090 : static unsigned unfilter(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
; 4091 : {
; 4092 :   /*
; 4093 :   For PNG filter method 0
; 4094 :   this function unfilters a single image (e.g. without interlacing this is called once, with Adam7 seven times)
; 4095 :   out must have enough bytes allocated already, in must have the scanlines + 1 filtertype byte per scanline
; 4096 :   w and h are image dimensions or dimensions of reduced image, bpp is bits per pixel
; 4097 :   in and out are allowed to be the same memory address (but aren't the same size since in has the extra filter bytes)
; 4098 :   */
; 4099 : 
; 4100 :   unsigned y;
; 4101 :   unsigned char* prevline = 0;
; 4102 : 
; 4103 :   /*bytewidth is used for filtering, is 1 when bpp < 8, number of bytes per pixel otherwise*/
; 4104 :   size_t bytewidth = (bpp + 7) / 8;
; 4105 :   size_t linebytes = (w * bpp + 7) / 8;
; 4106 : 
; 4107 :   for(y = 0; y < h; y++)
; 4108 :   {
; 4109 :     size_t outindex = linebytes * y;
; 4110 :     size_t inindex = (1 + linebytes) * y; /*the extra filterbyte added to each row*/
; 4111 :     unsigned char filterType = in[inindex];
; 4112 : 
; 4113 :     CERROR_TRY_RETURN(unfilterScanline(&out[outindex], &in[inindex + 1], prevline, bytewidth, filterType, linebytes));
; 4114 : 
; 4115 :     prevline = &out[outindex];
; 4116 :   }
; 4117 : 
; 4118 :   return 0;
; 4119 : }
; 4120 : 
; 4121 : /*
; 4122 : in: Adam7 interlaced image, with no padding bits between scanlines, but between
; 4123 :  reduced images so that each reduced image starts at a byte.
; 4124 : out: the same pixels, but re-ordered so that they're now a non-interlaced image with size w*h
; 4125 : bpp: bits per pixel
; 4126 : out has the following size in bits: w * h * bpp.
; 4127 : in is possibly bigger due to padding bits between reduced images.
; 4128 : out must be big enough AND must be 0 everywhere if bpp < 8 in the current implementation
; 4129 : (because that's likely a little bit faster)
; 4130 : NOTE: comments about padding bits are only relevant if bpp < 8
; 4131 : */
; 4132 : static void Adam7_deinterlace(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
; 4133 : {
; 4134 :   unsigned passw[7], passh[7];
; 4135 :   size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4136 :   unsigned i;
; 4137 : 
; 4138 :   Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 4139 : 
; 4140 :   if(bpp >= 8)
; 4141 :   {
; 4142 :     for(i = 0; i < 7; i++)
; 4143 :     {
; 4144 :       unsigned x, y, b;
; 4145 :       size_t bytewidth = bpp / 8;
; 4146 :       for(y = 0; y < passh[i]; y++)
; 4147 :       for(x = 0; x < passw[i]; x++)
; 4148 :       {
; 4149 :         size_t pixelinstart = passstart[i] + (y * passw[i] + x) * bytewidth;
; 4150 :         size_t pixeloutstart = ((ADAM7_IY[i] + y * ADAM7_DY[i]) * w + ADAM7_IX[i] + x * ADAM7_DX[i]) * bytewidth;
; 4151 :         for(b = 0; b < bytewidth; b++)
; 4152 :         {
; 4153 :           out[pixeloutstart + b] = in[pixelinstart + b];
; 4154 :         }
; 4155 :       }
; 4156 :     }
; 4157 :   }
; 4158 :   else /*bpp < 8: Adam7 with pixels < 8 bit is a bit trickier: with bit pointers*/
; 4159 :   {
; 4160 :     for(i = 0; i < 7; i++)
; 4161 :     {
; 4162 :       unsigned x, y, b;
; 4163 :       unsigned ilinebits = bpp * passw[i];
; 4164 :       unsigned olinebits = bpp * w;
; 4165 :       size_t obp, ibp; /*bit pointers (for out and in buffer)*/
; 4166 :       for(y = 0; y < passh[i]; y++)
; 4167 :       for(x = 0; x < passw[i]; x++)
; 4168 :       {
; 4169 :         ibp = (8 * passstart[i]) + (y * ilinebits + x * bpp);
; 4170 :         obp = (ADAM7_IY[i] + y * ADAM7_DY[i]) * olinebits + (ADAM7_IX[i] + x * ADAM7_DX[i]) * bpp;
; 4171 :         for(b = 0; b < bpp; b++)
; 4172 :         {
; 4173 :           unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4174 :           /*note that this function assumes the out buffer is completely 0, use setBitOfReversedStream otherwise*/
; 4175 :           setBitOfReversedStream0(&obp, out, bit);
; 4176 :         }
; 4177 :       }
; 4178 :     }
; 4179 :   }
; 4180 : }
; 4181 : 
; 4182 : static void removePaddingBits(unsigned char* out, const unsigned char* in,
; 4183 :                               size_t olinebits, size_t ilinebits, unsigned h)
; 4184 : {
; 4185 :   /*
; 4186 :   After filtering there are still padding bits if scanlines have non multiple of 8 bit amounts. They need
; 4187 :   to be removed (except at last scanline of (Adam7-reduced) image) before working with pure image buffers
; 4188 :   for the Adam7 code, the color convert code and the output to the user.
; 4189 :   in and out are allowed to be the same buffer, in may also be higher but still overlapping; in must
; 4190 :   have >= ilinebits*h bits, out must have >= olinebits*h bits, olinebits must be <= ilinebits
; 4191 :   also used to move bits after earlier such operations happened, e.g. in a sequence of reduced images from Adam7
; 4192 :   only useful if (ilinebits - olinebits) is a value in the range 1..7
; 4193 :   */
; 4194 :   unsigned y;
; 4195 :   size_t diff = ilinebits - olinebits;
; 4196 :   size_t ibp = 0, obp = 0; /*input and output bit pointers*/
; 4197 :   for(y = 0; y < h; y++)
; 4198 :   {
; 4199 :     size_t x;
; 4200 :     for(x = 0; x < olinebits; x++)
; 4201 :     {
; 4202 :       unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4203 :       setBitOfReversedStream(&obp, out, bit);
; 4204 :     }
; 4205 :     ibp += diff;
; 4206 :   }
; 4207 : }
; 4208 : 
; 4209 : /*out must be buffer big enough to contain full image, and in must contain the full decompressed data from
; 4210 : the IDAT chunks (with filter index bytes and possible padding bits)
; 4211 : return value is error*/
; 4212 : static unsigned postProcessScanlines(unsigned char* out, unsigned char* in,
; 4213 :                                      unsigned w, unsigned h, const LodePNGInfo* info_png)
; 4214 : {
; 4215 :   /*
; 4216 :   This function converts the filtered-padded-interlaced data into pure 2D image buffer with the PNG's colortype.
; 4217 :   Steps:
; 4218 :   *) if no Adam7: 1) unfilter 2) remove padding bits (= posible extra bits per scanline if bpp < 8)
; 4219 :   *) if adam7: 1) 7x unfilter 2) 7x remove padding bits 3) Adam7_deinterlace
; 4220 :   NOTE: the in buffer will be overwritten with intermediate data!
; 4221 :   */
; 4222 :   unsigned bpp = lodepng_get_bpp(&info_png->color);
; 4223 :   if(bpp == 0) return 31; /*error: invalid colortype*/
; 4224 : 
; 4225 :   if(info_png->interlace_method == 0)
; 4226 :   {
; 4227 :     if(bpp < 8 && w * bpp != ((w * bpp + 7) / 8) * 8)
; 4228 :     {
; 4229 :       CERROR_TRY_RETURN(unfilter(in, in, w, h, bpp));
; 4230 :       removePaddingBits(out, in, w * bpp, ((w * bpp + 7) / 8) * 8, h);
; 4231 :     }
; 4232 :     /*we can immediatly filter into the out buffer, no other steps needed*/
; 4233 :     else CERROR_TRY_RETURN(unfilter(out, in, w, h, bpp));
; 4234 :   }
; 4235 :   else /*interlace_method is 1 (Adam7)*/
; 4236 :   {
; 4237 :     unsigned passw[7], passh[7]; size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4238 :     unsigned i;
; 4239 : 
; 4240 :     Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 4241 : 
; 4242 :     for(i = 0; i < 7; i++)
; 4243 :     {
; 4244 :       CERROR_TRY_RETURN(unfilter(&in[padded_passstart[i]], &in[filter_passstart[i]], passw[i], passh[i], bpp));
; 4245 :       /*TODO: possible efficiency improvement: if in this reduced image the bits fit nicely in 1 scanline,
; 4246 :       move bytes instead of bits or move not at all*/
; 4247 :       if(bpp < 8)
; 4248 :       {
; 4249 :         /*remove padding bits in scanlines; after this there still may be padding
; 4250 :         bits between the different reduced images: each reduced image still starts nicely at a byte*/
; 4251 :         removePaddingBits(&in[passstart[i]], &in[padded_passstart[i]], passw[i] * bpp,
; 4252 :                           ((passw[i] * bpp + 7) / 8) * 8, passh[i]);
; 4253 :       }
; 4254 :     }
; 4255 : 
; 4256 :     Adam7_deinterlace(out, in, w, h, bpp);
; 4257 :   }
; 4258 : 
; 4259 :   return 0;
; 4260 : }
; 4261 : 
; 4262 : static unsigned readChunk_PLTE(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
; 4263 : {
; 4264 :   unsigned pos = 0, i;
; 4265 :   if(color->palette) lodepng_free(color->palette);
; 4266 :   color->palettesize = chunkLength / 3;
; 4267 :   color->palette = (unsigned char*)lodepng_malloc(4 * color->palettesize);
; 4268 :   if(!color->palette && color->palettesize)
; 4269 :   {
; 4270 :     color->palettesize = 0;
; 4271 :     return 83; /*alloc fail*/
; 4272 :   }
; 4273 :   if(color->palettesize > 256) return 38; /*error: palette too big*/
; 4274 : 
; 4275 :   for(i = 0; i < color->palettesize; i++)
; 4276 :   {
; 4277 :     color->palette[4 * i + 0] = data[pos++]; /*R*/
; 4278 :     color->palette[4 * i + 1] = data[pos++]; /*G*/
; 4279 :     color->palette[4 * i + 2] = data[pos++]; /*B*/
; 4280 :     color->palette[4 * i + 3] = 255; /*alpha*/
; 4281 :   }
; 4282 : 
; 4283 :   return 0; /* OK */
; 4284 : }
; 4285 : 
; 4286 : static unsigned readChunk_tRNS(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
; 4287 : {
; 4288 :   unsigned i;
; 4289 :   if(color->colortype == LCT_PALETTE)
; 4290 :   {
; 4291 :     /*error: more alpha values given than there are palette entries*/
; 4292 :     if(chunkLength > color->palettesize) return 38;
; 4293 : 
; 4294 :     for(i = 0; i < chunkLength; i++) color->palette[4 * i + 3] = data[i];
; 4295 :   }
; 4296 :   else if(color->colortype == LCT_GREY)
; 4297 :   {
; 4298 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4299 :     if(chunkLength != 2) return 30;
; 4300 : 
; 4301 :     color->key_defined = 1;
; 4302 :     color->key_r = color->key_g = color->key_b = 256 * data[0] + data[1];
; 4303 :   }
; 4304 :   else if(color->colortype == LCT_RGB)
; 4305 :   {
; 4306 :     /*error: this chunk must be 6 bytes for RGB image*/
; 4307 :     if(chunkLength != 6) return 41;
; 4308 : 
; 4309 :     color->key_defined = 1;
; 4310 :     color->key_r = 256 * data[0] + data[1];
; 4311 :     color->key_g = 256 * data[2] + data[3];
; 4312 :     color->key_b = 256 * data[4] + data[5];
; 4313 :   }
; 4314 :   else return 42; /*error: tRNS chunk not allowed for other color models*/
; 4315 : 
; 4316 :   return 0; /* OK */
; 4317 : }
; 4318 : 
; 4319 : 
; 4320 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4321 : /*background color chunk (bKGD)*/
; 4322 : static unsigned readChunk_bKGD(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4323 : {
; 4324 :   if(info->color.colortype == LCT_PALETTE)
; 4325 :   {
; 4326 :     /*error: this chunk must be 1 byte for indexed color image*/
; 4327 :     if(chunkLength != 1) return 43;
; 4328 : 
; 4329 :     info->background_defined = 1;
; 4330 :     info->background_r = info->background_g = info->background_b = data[0];
; 4331 :   }
; 4332 :   else if(info->color.colortype == LCT_GREY || info->color.colortype == LCT_GREY_ALPHA)
; 4333 :   {
; 4334 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4335 :     if(chunkLength != 2) return 44;
; 4336 : 
; 4337 :     info->background_defined = 1;
; 4338 :     info->background_r = info->background_g = info->background_b
; 4339 :                                  = 256 * data[0] + data[1];
; 4340 :   }
; 4341 :   else if(info->color.colortype == LCT_RGB || info->color.colortype == LCT_RGBA)
; 4342 :   {
; 4343 :     /*error: this chunk must be 6 bytes for greyscale image*/
; 4344 :     if(chunkLength != 6) return 45;
; 4345 : 
; 4346 :     info->background_defined = 1;
; 4347 :     info->background_r = 256 * data[0] + data[1];
; 4348 :     info->background_g = 256 * data[2] + data[3];
; 4349 :     info->background_b = 256 * data[4] + data[5];
; 4350 :   }
; 4351 : 
; 4352 :   return 0; /* OK */
; 4353 : }
; 4354 : 
; 4355 : /*text chunk (tEXt)*/
; 4356 : static unsigned readChunk_tEXt(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4357 : {
; 4358 :   unsigned error = 0;
; 4359 :   char *key = 0, *str = 0;
; 4360 :   unsigned i;
; 4361 : 
; 4362 :   while(!error) /*not really a while loop, only used to break on error*/
; 4363 :   {
; 4364 :     unsigned length, string2_begin;
; 4365 : 
; 4366 :     length = 0;
; 4367 :     while(length < chunkLength && data[length] != 0) length++;
; 4368 :     /*even though it's not allowed by the standard, no error is thrown if
; 4369 :     there's no null termination char, if the text is empty*/
; 4370 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4371 : 
; 4372 :     key = (char*)lodepng_malloc(length + 1);
; 4373 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4374 : 
; 4375 :     key[length] = 0;
; 4376 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4377 : 
; 4378 :     string2_begin = length + 1; /*skip keyword null terminator*/
; 4379 : 
; 4380 :     length = chunkLength < string2_begin ? 0 : chunkLength - string2_begin;
; 4381 :     str = (char*)lodepng_malloc(length + 1);
; 4382 :     if(!str) CERROR_BREAK(error, 83); /*alloc fail*/
; 4383 : 
; 4384 :     str[length] = 0;
; 4385 :     for(i = 0; i < length; i++) str[i] = data[string2_begin + i];
; 4386 : 
; 4387 :     error = lodepng_add_text(info, key, str);
; 4388 : 
; 4389 :     break;
; 4390 :   }
; 4391 : 
; 4392 :   lodepng_free(key);
; 4393 :   lodepng_free(str);
; 4394 : 
; 4395 :   return error;
; 4396 : }
; 4397 : 
; 4398 : /*compressed text chunk (zTXt)*/
; 4399 : static unsigned readChunk_zTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
; 4400 :                                const unsigned char* data, size_t chunkLength)
; 4401 : {
; 4402 :   unsigned error = 0;
; 4403 :   unsigned i;
; 4404 : 
; 4405 :   unsigned length, string2_begin;
; 4406 :   char *key = 0;
; 4407 :   ucvector decoded;
; 4408 : 
; 4409 :   ucvector_init(&decoded);
; 4410 : 
; 4411 :   while(!error) /*not really a while loop, only used to break on error*/
; 4412 :   {
; 4413 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;
; 4414 :     if(length + 2 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
; 4415 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4416 : 
; 4417 :     key = (char*)lodepng_malloc(length + 1);
; 4418 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4419 : 
; 4420 :     key[length] = 0;
; 4421 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4422 : 
; 4423 :     if(data[length + 1] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
; 4424 : 
; 4425 :     string2_begin = length + 2;
; 4426 :     if(string2_begin > chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
; 4427 : 
; 4428 :     length = chunkLength - string2_begin;
; 4429 :     /*will fail if zlib error, e.g. if length is too small*/
; 4430 :     error = zlib_decompress(&decoded.data, &decoded.size,
; 4431 :                             (unsigned char*)(&data[string2_begin]),
; 4432 :                             length, zlibsettings);
; 4433 :     if(error) break;
; 4434 :     ucvector_push_back(&decoded, 0);
; 4435 : 
; 4436 :     error = lodepng_add_text(info, key, (char*)decoded.data);
; 4437 : 
; 4438 :     break;
; 4439 :   }
; 4440 : 
; 4441 :   lodepng_free(key);
; 4442 :   ucvector_cleanup(&decoded);
; 4443 : 
; 4444 :   return error;
; 4445 : }
; 4446 : 
; 4447 : /*international text chunk (iTXt)*/
; 4448 : static unsigned readChunk_iTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
; 4449 :                                const unsigned char* data, size_t chunkLength)
; 4450 : {
; 4451 :   unsigned error = 0;
; 4452 :   unsigned i;
; 4453 : 
; 4454 :   unsigned length, begin, compressed;
; 4455 :   char *key = 0, *langtag = 0, *transkey = 0;
; 4456 :   ucvector decoded;
; 4457 :   ucvector_init(&decoded);
; 4458 : 
; 4459 :   while(!error) /*not really a while loop, only used to break on error*/
; 4460 :   {
; 4461 :     /*Quick check if the chunk length isn't too small. Even without check
; 4462 :     it'd still fail with other error checks below if it's too short. This just gives a different error code.*/
; 4463 :     if(chunkLength < 5) CERROR_BREAK(error, 30); /*iTXt chunk too short*/
; 4464 : 
; 4465 :     /*read the key*/
; 4466 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;
; 4467 :     if(length + 3 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination char, corrupt?*/
; 4468 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4469 : 
; 4470 :     key = (char*)lodepng_malloc(length + 1);
; 4471 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4472 : 
; 4473 :     key[length] = 0;
; 4474 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4475 : 
; 4476 :     /*read the compression method*/
; 4477 :     compressed = data[length + 1];
; 4478 :     if(data[length + 2] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
; 4479 : 
; 4480 :     /*even though it's not allowed by the standard, no error is thrown if
; 4481 :     there's no null termination char, if the text is empty for the next 3 texts*/
; 4482 : 
; 4483 :     /*read the langtag*/
; 4484 :     begin = length + 3;
; 4485 :     length = 0;
; 4486 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;
; 4487 : 
; 4488 :     langtag = (char*)lodepng_malloc(length + 1);
; 4489 :     if(!langtag) CERROR_BREAK(error, 83); /*alloc fail*/
; 4490 : 
; 4491 :     langtag[length] = 0;
; 4492 :     for(i = 0; i < length; i++) langtag[i] = data[begin + i];
; 4493 : 
; 4494 :     /*read the transkey*/
; 4495 :     begin += length + 1;
; 4496 :     length = 0;
; 4497 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;
; 4498 : 
; 4499 :     transkey = (char*)lodepng_malloc(length + 1);
; 4500 :     if(!transkey) CERROR_BREAK(error, 83); /*alloc fail*/
; 4501 : 
; 4502 :     transkey[length] = 0;
; 4503 :     for(i = 0; i < length; i++) transkey[i] = data[begin + i];
; 4504 : 
; 4505 :     /*read the actual text*/
; 4506 :     begin += length + 1;
; 4507 : 
; 4508 :     length = chunkLength < begin ? 0 : chunkLength - begin;
; 4509 : 
; 4510 :     if(compressed)
; 4511 :     {
; 4512 :       /*will fail if zlib error, e.g. if length is too small*/
; 4513 :       error = zlib_decompress(&decoded.data, &decoded.size,
; 4514 :                               (unsigned char*)(&data[begin]),
; 4515 :                               length, zlibsettings);
; 4516 :       if(error) break;
; 4517 :       if(decoded.allocsize < decoded.size) decoded.allocsize = decoded.size;
; 4518 :       ucvector_push_back(&decoded, 0);
; 4519 :     }
; 4520 :     else
; 4521 :     {
; 4522 :       if(!ucvector_resize(&decoded, length + 1)) CERROR_BREAK(error, 83 /*alloc fail*/);
; 4523 : 
; 4524 :       decoded.data[length] = 0;
; 4525 :       for(i = 0; i < length; i++) decoded.data[i] = data[begin + i];
; 4526 :     }
; 4527 : 
; 4528 :     error = lodepng_add_itext(info, key, langtag, transkey, (char*)decoded.data);
; 4529 : 
; 4530 :     break;
; 4531 :   }
; 4532 : 
; 4533 :   lodepng_free(key);
; 4534 :   lodepng_free(langtag);
; 4535 :   lodepng_free(transkey);
; 4536 :   ucvector_cleanup(&decoded);
; 4537 : 
; 4538 :   return error;
; 4539 : }
; 4540 : 
; 4541 : static unsigned readChunk_tIME(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4542 : {
; 4543 :   if(chunkLength != 7) return 73; /*invalid tIME chunk size*/
; 4544 : 
; 4545 :   info->time_defined = 1;
; 4546 :   info->time.year = 256 * data[0] + data[+ 1];
; 4547 :   info->time.month = data[2];
; 4548 :   info->time.day = data[3];
; 4549 :   info->time.hour = data[4];
; 4550 :   info->time.minute = data[5];
; 4551 :   info->time.second = data[6];
; 4552 : 
; 4553 :   return 0; /* OK */
; 4554 : }
; 4555 : 
; 4556 : static unsigned readChunk_pHYs(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4557 : {
; 4558 :   if(chunkLength != 9) return 74; /*invalid pHYs chunk size*/
; 4559 : 
; 4560 :   info->phys_defined = 1;
; 4561 :   info->phys_x = 16777216 * data[0] + 65536 * data[1] + 256 * data[2] + data[3];
; 4562 :   info->phys_y = 16777216 * data[4] + 65536 * data[5] + 256 * data[6] + data[7];
; 4563 :   info->phys_unit = data[8];
; 4564 : 
; 4565 :   return 0; /* OK */
; 4566 : }
; 4567 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4568 : 
; 4569 : /*read a PNG, the result will be in the same color type as the PNG (hence "generic")*/
; 4570 : static void decodeGeneric(unsigned char** out, unsigned* w, unsigned* h,
; 4571 :                           LodePNGState* state,
; 4572 :                           const unsigned char* in, size_t insize)
; 4573 : {
; 4574 :   unsigned char IEND = 0;
; 4575 :   const unsigned char* chunk;
; 4576 :   size_t i;
; 4577 :   ucvector idat; /*the data from idat chunks*/
; 4578 : 
; 4579 :   /*for unknown chunk order*/
; 4580 :   unsigned unknown = 0;
; 4581 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4582 :   unsigned critical_pos = 1; /*1 = after IHDR, 2 = after PLTE, 3 = after IDAT*/
; 4583 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4584 : 
; 4585 :   /*provide some proper output values if error will happen*/
; 4586 :   *out = 0;
; 4587 : 
; 4588 :   state->error = lodepng_inspect(w, h, state, in, insize); /*reads header and resets other parameters in state->info_png*/
; 4589 :   if(state->error) return;
; 4590 : 
; 4591 :   ucvector_init(&idat);
; 4592 :   chunk = &in[33]; /*first byte of the first chunk after the header*/
; 4593 : 
; 4594 :   /*loop through the chunks, ignoring unknown chunks and stopping at IEND chunk.
; 4595 :   IDAT data is put at the start of the in buffer*/
; 4596 :   while(!IEND && !state->error)
; 4597 :   {
; 4598 :     unsigned chunkLength;
; 4599 :     const unsigned char* data; /*the data in the chunk*/
; 4600 : 
; 4601 :     /*error: size of the in buffer too small to contain next chunk*/
; 4602 :     if((size_t)((chunk - in) + 12) > insize || chunk < in) CERROR_BREAK(state->error, 30);
; 4603 : 
; 4604 :     /*length of the data of the chunk, excluding the length bytes, chunk type and CRC bytes*/
; 4605 :     chunkLength = lodepng_chunk_length(chunk);
; 4606 :     /*error: chunk length larger than the max PNG chunk size*/
; 4607 :     if(chunkLength > 2147483647) CERROR_BREAK(state->error, 63);
; 4608 : 
; 4609 :     if((size_t)((chunk - in) + chunkLength + 12) > insize || (chunk + chunkLength + 12) < in)
; 4610 :     {
; 4611 :       CERROR_BREAK(state->error, 64); /*error: size of the in buffer too small to contain next chunk*/
; 4612 :     }
; 4613 : 
; 4614 :     data = lodepng_chunk_data_const(chunk);
; 4615 : 
; 4616 :     /*IDAT chunk, containing compressed image data*/
; 4617 :     if(lodepng_chunk_type_equals(chunk, "IDAT"))
; 4618 :     {
; 4619 :       size_t oldsize = idat.size;
; 4620 :       if(!ucvector_resize(&idat, oldsize + chunkLength)) CERROR_BREAK(state->error, 83 /*alloc fail*/);
; 4621 :       for(i = 0; i < chunkLength; i++) idat.data[oldsize + i] = data[i];
; 4622 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4623 :       critical_pos = 3;
; 4624 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4625 :     }
; 4626 :     /*IEND chunk*/
; 4627 :     else if(lodepng_chunk_type_equals(chunk, "IEND"))
; 4628 :     {
; 4629 :       IEND = 1;
; 4630 :     }
; 4631 :     /*palette chunk (PLTE)*/
; 4632 :     else if(lodepng_chunk_type_equals(chunk, "PLTE"))
; 4633 :     {
; 4634 :       state->error = readChunk_PLTE(&state->info_png.color, data, chunkLength);
; 4635 :       if(state->error) break;
; 4636 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4637 :       critical_pos = 2;
; 4638 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4639 :     }
; 4640 :     /*palette transparency chunk (tRNS)*/
; 4641 :     else if(lodepng_chunk_type_equals(chunk, "tRNS"))
; 4642 :     {
; 4643 :       state->error = readChunk_tRNS(&state->info_png.color, data, chunkLength);
; 4644 :       if(state->error) break;
; 4645 :     }
; 4646 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4647 :     /*background color chunk (bKGD)*/
; 4648 :     else if(lodepng_chunk_type_equals(chunk, "bKGD"))
; 4649 :     {
; 4650 :       state->error = readChunk_bKGD(&state->info_png, data, chunkLength);
; 4651 :       if(state->error) break;
; 4652 :     }
; 4653 :     /*text chunk (tEXt)*/
; 4654 :     else if(lodepng_chunk_type_equals(chunk, "tEXt"))
; 4655 :     {
; 4656 :       if(state->decoder.read_text_chunks)
; 4657 :       {
; 4658 :         state->error = readChunk_tEXt(&state->info_png, data, chunkLength);
; 4659 :         if(state->error) break;
; 4660 :       }
; 4661 :     }
; 4662 :     /*compressed text chunk (zTXt)*/
; 4663 :     else if(lodepng_chunk_type_equals(chunk, "zTXt"))
; 4664 :     {
; 4665 :       if(state->decoder.read_text_chunks)
; 4666 :       {
; 4667 :         state->error = readChunk_zTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);
; 4668 :         if(state->error) break;
; 4669 :       }
; 4670 :     }
; 4671 :     /*international text chunk (iTXt)*/
; 4672 :     else if(lodepng_chunk_type_equals(chunk, "iTXt"))
; 4673 :     {
; 4674 :       if(state->decoder.read_text_chunks)
; 4675 :       {
; 4676 :         state->error = readChunk_iTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);
; 4677 :         if(state->error) break;
; 4678 :       }
; 4679 :     }
; 4680 :     else if(lodepng_chunk_type_equals(chunk, "tIME"))
; 4681 :     {
; 4682 :       state->error = readChunk_tIME(&state->info_png, data, chunkLength);
; 4683 :       if(state->error) break;
; 4684 :     }
; 4685 :     else if(lodepng_chunk_type_equals(chunk, "pHYs"))
; 4686 :     {
; 4687 :       state->error = readChunk_pHYs(&state->info_png, data, chunkLength);
; 4688 :       if(state->error) break;
; 4689 :     }
; 4690 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4691 :     else /*it's not an implemented chunk type, so ignore it: skip over the data*/
; 4692 :     {
; 4693 :       /*error: unknown critical chunk (5th bit of first byte of chunk type is 0)*/
; 4694 :       if(!lodepng_chunk_ancillary(chunk)) CERROR_BREAK(state->error, 69);
; 4695 : 
; 4696 :       unknown = 1;
; 4697 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4698 :       if(state->decoder.remember_unknown_chunks)
; 4699 :       {
; 4700 :         state->error = lodepng_chunk_append(&state->info_png.unknown_chunks_data[critical_pos - 1],
; 4701 :                                             &state->info_png.unknown_chunks_size[critical_pos - 1], chunk);
; 4702 :         if(state->error) break;
; 4703 :       }
; 4704 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4705 :     }
; 4706 : 
; 4707 :     if(!state->decoder.ignore_crc && !unknown) /*check CRC if wanted, only on known chunk types*/
; 4708 :     {
; 4709 :       if(lodepng_chunk_check_crc(chunk)) CERROR_BREAK(state->error, 57); /*invalid CRC*/
; 4710 :     }
; 4711 : 
; 4712 :     if(!IEND) chunk = lodepng_chunk_next_const(chunk);
; 4713 :   }
; 4714 : 
; 4715 :   if(!state->error)
; 4716 :   {
; 4717 :     ucvector scanlines;
; 4718 :     ucvector_init(&scanlines);
; 4719 : 
; 4720 :     /*maximum final image length is already reserved in the vector's length - this is not really necessary*/
; 4721 :     if(!ucvector_resize(&scanlines, lodepng_get_raw_size(*w, *h, &state->info_png.color) + *h))
; 4722 :     {
; 4723 :       state->error = 83; /*alloc fail*/
; 4724 :     }
; 4725 :     if(!state->error)
; 4726 :     {
; 4727 :       /*decompress with the Zlib decompressor*/
; 4728 :       state->error = zlib_decompress(&scanlines.data, &scanlines.size, idat.data,
; 4729 :                                      idat.size, &state->decoder.zlibsettings);
; 4730 :     }
; 4731 : 
; 4732 :     if(!state->error)
; 4733 :     {
; 4734 :       ucvector outv;
; 4735 :       ucvector_init(&outv);
; 4736 :       if(!ucvector_resizev(&outv,
; 4737 :           lodepng_get_raw_size(*w, *h, &state->info_png.color), 0)) state->error = 83; /*alloc fail*/
; 4738 :       if(!state->error) state->error = postProcessScanlines(outv.data, scanlines.data, *w, *h, &state->info_png);
; 4739 :       *out = outv.data;
; 4740 :     }
; 4741 :     ucvector_cleanup(&scanlines);
; 4742 :   }
; 4743 : 
; 4744 :   ucvector_cleanup(&idat);
; 4745 : }
; 4746 : 
; 4747 : unsigned lodepng_decode(unsigned char** out, unsigned* w, unsigned* h,
; 4748 :                         LodePNGState* state,
; 4749 :                         const unsigned char* in, size_t insize)
; 4750 : {
; 4751 :   *out = 0;
; 4752 :   decodeGeneric(out, w, h, state, in, insize);
; 4753 :   if(state->error) return state->error;
; 4754 :   if(!state->decoder.color_convert || lodepng_color_mode_equal(&state->info_raw, &state->info_png.color))
; 4755 :   {
; 4756 :     /*same color type, no copying or converting of data needed*/
; 4757 :     /*store the info_png color settings on the info_raw so that the info_raw still reflects what colortype
; 4758 :     the raw image has to the end user*/
; 4759 :     if(!state->decoder.color_convert)
; 4760 :     {
; 4761 :       state->error = lodepng_color_mode_copy(&state->info_raw, &state->info_png.color);
; 4762 :       if(state->error) return state->error;
; 4763 :     }
; 4764 :   }
; 4765 :   else
; 4766 :   {
; 4767 :     /*color conversion needed; sort of copy of the data*/
; 4768 :     unsigned char* data = *out;
; 4769 :     size_t outsize;
; 4770 : 
; 4771 :     /*TODO: check if this works according to the statement in the documentation: "The converter can convert
; 4772 :     from greyscale input color type, to 8-bit greyscale or greyscale with alpha"*/
; 4773 :     if(!(state->info_raw.colortype == LCT_RGB || state->info_raw.colortype == LCT_RGBA)
; 4774 :        && !(state->info_raw.bitdepth == 8))
; 4775 :     {
; 4776 :       return 56; /*unsupported color mode conversion*/
; 4777 :     }
; 4778 : 
; 4779 :     outsize = lodepng_get_raw_size(*w, *h, &state->info_raw);
; 4780 :     *out = (unsigned char*)lodepng_malloc(outsize);
; 4781 :     if(!(*out))
; 4782 :     {
; 4783 :       state->error = 83; /*alloc fail*/
; 4784 :     }
; 4785 :     else state->error = lodepng_convert(*out, data, &state->info_raw, &state->info_png.color, *w, *h, state->decoder.fix_png);
; 4786 :     lodepng_free(data);
; 4787 :   }
; 4788 :   return state->error;
; 4789 : }
; 4790 : 
; 4791 : unsigned lodepng_decode_memory(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in,
; 4792 :                                size_t insize, LodePNGColorType colortype, unsigned bitdepth)
; 4793 : {
; 4794 :   unsigned error;
; 4795 :   LodePNGState state;
; 4796 :   lodepng_state_init(&state);
; 4797 :   state.info_raw.colortype = colortype;
; 4798 :   state.info_raw.bitdepth = bitdepth;
; 4799 :   error = lodepng_decode(out, w, h, &state, in, insize);
; 4800 :   lodepng_state_cleanup(&state);
; 4801 :   return error;
; 4802 : }
; 4803 : 
; 4804 : unsigned lodepng_decode32(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4805 : {
; 4806 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGBA, 8);
; 4807 : }
; 4808 : 
; 4809 : unsigned lodepng_decode24(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4810 : {
; 4811 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGB, 8);
; 4812 : }
; 4813 : 
; 4814 : #ifdef LODEPNG_COMPILE_DISK
; 4815 : unsigned lodepng_decode_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename,
; 4816 :                              LodePNGColorType colortype, unsigned bitdepth)
; 4817 : {
; 4818 :   unsigned char* buffer;
; 4819 :   size_t buffersize;
; 4820 :   unsigned error;
; 4821 :   error = lodepng_load_file(&buffer, &buffersize, filename);
; 4822 :   if(!error) error = lodepng_decode_memory(out, w, h, buffer, buffersize, colortype, bitdepth);
; 4823 :   lodepng_free(buffer);
; 4824 :   return error;
; 4825 : }
; 4826 : 
; 4827 : unsigned lodepng_decode32_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4828 : {
; 4829 :   return lodepng_decode_file(out, w, h, filename, LCT_RGBA, 8);
; 4830 : }
; 4831 : 
; 4832 : unsigned lodepng_decode24_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4833 : {
; 4834 :   return lodepng_decode_file(out, w, h, filename, LCT_RGB, 8);
; 4835 : }
; 4836 : #endif /*LODEPNG_COMPILE_DISK*/
; 4837 : 
; 4838 : void lodepng_decoder_settings_init(LodePNGDecoderSettings* settings)
; 4839 : {
; 4840 :   settings->color_convert = 1;
; 4841 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4842 :   settings->read_text_chunks = 1;
; 4843 :   settings->remember_unknown_chunks = 0;
; 4844 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4845 :   settings->ignore_crc = 0;
; 4846 :   settings->fix_png = 0;
; 4847 :   lodepng_decompress_settings_init(&settings->zlibsettings);
; 4848 : }
; 4849 : 
; 4850 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4851 : 
; 4852 : #if defined(LODEPNG_COMPILE_DECODER) || defined(LODEPNG_COMPILE_ENCODER)
; 4853 : 
; 4854 : void lodepng_state_init(LodePNGState* state)
; 4855 : {
; 4856 : #ifdef LODEPNG_COMPILE_DECODER
; 4857 :   lodepng_decoder_settings_init(&state->decoder);
; 4858 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4859 : #ifdef LODEPNG_COMPILE_ENCODER
; 4860 :   lodepng_encoder_settings_init(&state->encoder);
; 4861 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 4862 :   lodepng_color_mode_init(&state->info_raw);
; 4863 :   lodepng_info_init(&state->info_png);
; 4864 :   state->error = 1;
; 4865 : }
; 4866 : 
; 4867 : void lodepng_state_cleanup(LodePNGState* state)
; 4868 : {
; 4869 :   lodepng_color_mode_cleanup(&state->info_raw);
; 4870 :   lodepng_info_cleanup(&state->info_png);

  00019	8d 8e 88 00 00
	00		 lea	 ecx, DWORD PTR [esi+136]

; 2585 :   info->palette = 0;

  0001f	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 2586 :   info->palettesize = 0;

  00026	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 2587 : }
; 2588 : 
; 2589 : unsigned lodepng_palette_add(LodePNGColorMode* info,
; 2590 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2591 : {
; 2592 :   unsigned char* data;
; 2593 :   /*the same resize technique as C++ std::vectors is used, and here it's made so that for a palette with
; 2594 :   the max of 256 colors, it'll have the exact alloc size*/
; 2595 :   if(!info->palette) /*allocate palette if empty*/
; 2596 :   {
; 2597 :     /*room for 256 colors with 4 bytes each*/
; 2598 :     data = (unsigned char*)lodepng_realloc(info->palette, 1024);
; 2599 :     if(!data) return 83; /*alloc fail*/
; 2600 :     else info->palette = data;
; 2601 :   }
; 2602 :   info->palette[4 * info->palettesize + 0] = r;
; 2603 :   info->palette[4 * info->palettesize + 1] = g;
; 2604 :   info->palette[4 * info->palettesize + 2] = b;
; 2605 :   info->palette[4 * info->palettesize + 3] = a;
; 2606 :   info->palettesize++;
; 2607 :   return 0;
; 2608 : }
; 2609 : 
; 2610 : unsigned lodepng_get_bpp(const LodePNGColorMode* info)
; 2611 : {
; 2612 :   /*calculate bits per pixel out of colortype and bitdepth*/
; 2613 :   return lodepng_get_bpp_lct(info->colortype, info->bitdepth);
; 2614 : }
; 2615 : 
; 2616 : unsigned lodepng_get_channels(const LodePNGColorMode* info)
; 2617 : {
; 2618 :   return getNumColorChannels(info->colortype);
; 2619 : }
; 2620 : 
; 2621 : unsigned lodepng_is_greyscale_type(const LodePNGColorMode* info)
; 2622 : {
; 2623 :   return info->colortype == LCT_GREY || info->colortype == LCT_GREY_ALPHA;
; 2624 : }
; 2625 : 
; 2626 : unsigned lodepng_is_alpha_type(const LodePNGColorMode* info)
; 2627 : {
; 2628 :   return (info->colortype & 4) != 0; /*4 or 6*/
; 2629 : }
; 2630 : 
; 2631 : unsigned lodepng_is_palette_type(const LodePNGColorMode* info)
; 2632 : {
; 2633 :   return info->colortype == LCT_PALETTE;
; 2634 : }
; 2635 : 
; 2636 : unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info)
; 2637 : {
; 2638 :   size_t i;
; 2639 :   for(i = 0; i < info->palettesize; i++)
; 2640 :   {
; 2641 :     if(info->palette[i * 4 + 3] < 255) return 1;
; 2642 :   }
; 2643 :   return 0;
; 2644 : }
; 2645 : 
; 2646 : unsigned lodepng_can_have_alpha(const LodePNGColorMode* info)
; 2647 : {
; 2648 :   return info->key_defined
; 2649 :       || lodepng_is_alpha_type(info)
; 2650 :       || lodepng_has_palette_alpha(info);
; 2651 : }
; 2652 : 
; 2653 : size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode* color)
; 2654 : {
; 2655 :   return (w * h * lodepng_get_bpp(color) + 7) / 8;
; 2656 : }
; 2657 : 
; 2658 : size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)
; 2659 : {
; 2660 :   return (w * h * lodepng_get_bpp_lct(colortype, bitdepth) + 7) / 8;
; 2661 : }
; 2662 : 
; 2663 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2664 : 
; 2665 : static void LodePNGUnknownChunks_init(LodePNGInfo* info)
; 2666 : {
; 2667 :   unsigned i;
; 2668 :   for(i = 0; i < 3; i++) info->unknown_chunks_data[i] = 0;
; 2669 :   for(i = 0; i < 3; i++) info->unknown_chunks_size[i] = 0;
; 2670 : }
; 2671 : 
; 2672 : static void LodePNGUnknownChunks_cleanup(LodePNGInfo* info)
; 2673 : {
; 2674 :   unsigned i;
; 2675 :   for(i = 0; i < 3; i++) lodepng_free(info->unknown_chunks_data[i]);
; 2676 : }
; 2677 : 
; 2678 : static unsigned LodePNGUnknownChunks_copy(LodePNGInfo* dest, const LodePNGInfo* src)
; 2679 : {
; 2680 :   unsigned i;
; 2681 : 
; 2682 :   LodePNGUnknownChunks_cleanup(dest);
; 2683 : 
; 2684 :   for(i = 0; i < 3; i++)
; 2685 :   {
; 2686 :     size_t j;
; 2687 :     dest->unknown_chunks_size[i] = src->unknown_chunks_size[i];
; 2688 :     dest->unknown_chunks_data[i] = (unsigned char*)lodepng_malloc(src->unknown_chunks_size[i]);
; 2689 :     if(!dest->unknown_chunks_data[i] && dest->unknown_chunks_size[i]) return 83; /*alloc fail*/
; 2690 :     for(j = 0; j < src->unknown_chunks_size[i]; j++)
; 2691 :     {
; 2692 :       dest->unknown_chunks_data[i][j] = src->unknown_chunks_data[i][j];
; 2693 :     }
; 2694 :   }
; 2695 : 
; 2696 :   return 0;
; 2697 : }
; 2698 : 
; 2699 : /******************************************************************************/
; 2700 : 
; 2701 : static void LodePNGText_init(LodePNGInfo* info)
; 2702 : {
; 2703 :   info->text_num = 0;
; 2704 :   info->text_keys = NULL;
; 2705 :   info->text_strings = NULL;
; 2706 : }
; 2707 : 
; 2708 : static void LodePNGText_cleanup(LodePNGInfo* info)
; 2709 : {
; 2710 :   size_t i;
; 2711 :   for(i = 0; i < info->text_num; i++)
; 2712 :   {
; 2713 :     string_cleanup(&info->text_keys[i]);
; 2714 :     string_cleanup(&info->text_strings[i]);
; 2715 :   }
; 2716 :   lodepng_free(info->text_keys);
; 2717 :   lodepng_free(info->text_strings);
; 2718 : }
; 2719 : 
; 2720 : static unsigned LodePNGText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2721 : {
; 2722 :   size_t i = 0;
; 2723 :   dest->text_keys = 0;
; 2724 :   dest->text_strings = 0;
; 2725 :   dest->text_num = 0;
; 2726 :   for(i = 0; i < source->text_num; i++)
; 2727 :   {
; 2728 :     CERROR_TRY_RETURN(lodepng_add_text(dest, source->text_keys[i], source->text_strings[i]));
; 2729 :   }
; 2730 :   return 0;
; 2731 : }
; 2732 : 
; 2733 : void lodepng_clear_text(LodePNGInfo* info)
; 2734 : {
; 2735 :   LodePNGText_cleanup(info);
; 2736 : }
; 2737 : 
; 2738 : unsigned lodepng_add_text(LodePNGInfo* info, const char* key, const char* str)
; 2739 : {
; 2740 :   char** new_keys = (char**)(lodepng_realloc(info->text_keys, sizeof(char*) * (info->text_num + 1)));
; 2741 :   char** new_strings = (char**)(lodepng_realloc(info->text_strings, sizeof(char*) * (info->text_num + 1)));
; 2742 :   if(!new_keys || !new_strings)
; 2743 :   {
; 2744 :     lodepng_free(new_keys);
; 2745 :     lodepng_free(new_strings);
; 2746 :     return 83; /*alloc fail*/
; 2747 :   }
; 2748 : 
; 2749 :   info->text_num++;
; 2750 :   info->text_keys = new_keys;
; 2751 :   info->text_strings = new_strings;
; 2752 : 
; 2753 :   string_init(&info->text_keys[info->text_num - 1]);
; 2754 :   string_set(&info->text_keys[info->text_num - 1], key);
; 2755 : 
; 2756 :   string_init(&info->text_strings[info->text_num - 1]);
; 2757 :   string_set(&info->text_strings[info->text_num - 1], str);
; 2758 : 
; 2759 :   return 0;
; 2760 : }
; 2761 : 
; 2762 : /******************************************************************************/
; 2763 : 
; 2764 : static void LodePNGIText_init(LodePNGInfo* info)
; 2765 : {
; 2766 :   info->itext_num = 0;
; 2767 :   info->itext_keys = NULL;
; 2768 :   info->itext_langtags = NULL;
; 2769 :   info->itext_transkeys = NULL;
; 2770 :   info->itext_strings = NULL;
; 2771 : }
; 2772 : 
; 2773 : static void LodePNGIText_cleanup(LodePNGInfo* info)
; 2774 : {
; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)
; 2777 :   {
; 2778 :     string_cleanup(&info->itext_keys[i]);
; 2779 :     string_cleanup(&info->itext_langtags[i]);
; 2780 :     string_cleanup(&info->itext_transkeys[i]);
; 2781 :     string_cleanup(&info->itext_strings[i]);
; 2782 :   }
; 2783 :   lodepng_free(info->itext_keys);
; 2784 :   lodepng_free(info->itext_langtags);
; 2785 :   lodepng_free(info->itext_transkeys);
; 2786 :   lodepng_free(info->itext_strings);
; 2787 : }
; 2788 : 
; 2789 : static unsigned LodePNGIText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2790 : {
; 2791 :   size_t i = 0;
; 2792 :   dest->itext_keys = 0;
; 2793 :   dest->itext_langtags = 0;
; 2794 :   dest->itext_transkeys = 0;
; 2795 :   dest->itext_strings = 0;
; 2796 :   dest->itext_num = 0;
; 2797 :   for(i = 0; i < source->itext_num; i++)
; 2798 :   {
; 2799 :     CERROR_TRY_RETURN(lodepng_add_itext(dest, source->itext_keys[i], source->itext_langtags[i],
; 2800 :                                         source->itext_transkeys[i], source->itext_strings[i]));
; 2801 :   }
; 2802 :   return 0;
; 2803 : }
; 2804 : 
; 2805 : void lodepng_clear_itext(LodePNGInfo* info)
; 2806 : {
; 2807 :   LodePNGIText_cleanup(info);
; 2808 : }
; 2809 : 
; 2810 : unsigned lodepng_add_itext(LodePNGInfo* info, const char* key, const char* langtag,
; 2811 :                            const char* transkey, const char* str)
; 2812 : {
; 2813 :   char** new_keys = (char**)(lodepng_realloc(info->itext_keys, sizeof(char*) * (info->itext_num + 1)));
; 2814 :   char** new_langtags = (char**)(lodepng_realloc(info->itext_langtags, sizeof(char*) * (info->itext_num + 1)));
; 2815 :   char** new_transkeys = (char**)(lodepng_realloc(info->itext_transkeys, sizeof(char*) * (info->itext_num + 1)));
; 2816 :   char** new_strings = (char**)(lodepng_realloc(info->itext_strings, sizeof(char*) * (info->itext_num + 1)));
; 2817 :   if(!new_keys || !new_langtags || !new_transkeys || !new_strings)
; 2818 :   {
; 2819 :     lodepng_free(new_keys);
; 2820 :     lodepng_free(new_langtags);
; 2821 :     lodepng_free(new_transkeys);
; 2822 :     lodepng_free(new_strings);
; 2823 :     return 83; /*alloc fail*/
; 2824 :   }
; 2825 : 
; 2826 :   info->itext_num++;
; 2827 :   info->itext_keys = new_keys;
; 2828 :   info->itext_langtags = new_langtags;
; 2829 :   info->itext_transkeys = new_transkeys;
; 2830 :   info->itext_strings = new_strings;
; 2831 : 
; 2832 :   string_init(&info->itext_keys[info->itext_num - 1]);
; 2833 :   string_set(&info->itext_keys[info->itext_num - 1], key);
; 2834 : 
; 2835 :   string_init(&info->itext_langtags[info->itext_num - 1]);
; 2836 :   string_set(&info->itext_langtags[info->itext_num - 1], langtag);
; 2837 : 
; 2838 :   string_init(&info->itext_transkeys[info->itext_num - 1]);
; 2839 :   string_set(&info->itext_transkeys[info->itext_num - 1], transkey);
; 2840 : 
; 2841 :   string_init(&info->itext_strings[info->itext_num - 1]);
; 2842 :   string_set(&info->itext_strings[info->itext_num - 1], str);
; 2843 : 
; 2844 :   return 0;
; 2845 : }
; 2846 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2847 : 
; 2848 : void lodepng_info_init(LodePNGInfo* info)
; 2849 : {
; 2850 :   lodepng_color_mode_init(&info->color);
; 2851 :   info->interlace_method = 0;
; 2852 :   info->compression_method = 0;
; 2853 :   info->filter_method = 0;
; 2854 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2855 :   info->background_defined = 0;
; 2856 :   info->background_r = info->background_g = info->background_b = 0;
; 2857 : 
; 2858 :   LodePNGText_init(info);
; 2859 :   LodePNGIText_init(info);
; 2860 : 
; 2861 :   info->time_defined = 0;
; 2862 :   info->phys_defined = 0;
; 2863 : 
; 2864 :   LodePNGUnknownChunks_init(info);
; 2865 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2866 : }
; 2867 : 
; 2868 : void lodepng_info_cleanup(LodePNGInfo* info)
; 2869 : {
; 2870 :   lodepng_color_mode_cleanup(&info->color);
; 2871 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2872 :   LodePNGText_cleanup(info);
; 2873 :   LodePNGIText_cleanup(info);
; 2874 : 
; 2875 :   LodePNGUnknownChunks_cleanup(info);
; 2876 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2877 : }
; 2878 : 
; 2879 : unsigned lodepng_info_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2880 : {
; 2881 :   lodepng_info_cleanup(dest);
; 2882 :   *dest = *source;
; 2883 :   lodepng_color_mode_init(&dest->color);
; 2884 :   CERROR_TRY_RETURN(lodepng_color_mode_copy(&dest->color, &source->color));
; 2885 : 
; 2886 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2887 :   CERROR_TRY_RETURN(LodePNGText_copy(dest, source));
; 2888 :   CERROR_TRY_RETURN(LodePNGIText_copy(dest, source));
; 2889 : 
; 2890 :   LodePNGUnknownChunks_init(dest);
; 2891 :   CERROR_TRY_RETURN(LodePNGUnknownChunks_copy(dest, source));
; 2892 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2893 :   return 0;
; 2894 : }
; 2895 : 
; 2896 : void lodepng_info_swap(LodePNGInfo* a, LodePNGInfo* b)
; 2897 : {
; 2898 :   LodePNGInfo temp = *a;
; 2899 :   *a = *b;
; 2900 :   *b = temp;
; 2901 : }
; 2902 : 
; 2903 : /* ////////////////////////////////////////////////////////////////////////// */
; 2904 : 
; 2905 : /*index: bitgroup index, bits: bitgroup size(1, 2 or 4, in: bitgroup value, out: octet array to add bits to*/
; 2906 : static void addColorBits(unsigned char* out, size_t index, unsigned bits, unsigned in)
; 2907 : {
; 2908 :   /*p = the partial index in the byte, e.g. with 4 palettebits it is 0 for first half or 1 for second half*/
; 2909 :   unsigned p = index % (8 / bits);
; 2910 :   in &= (1 << bits) - 1; /*filter out any other bits of the input value*/
; 2911 :   in = in << (bits * (8 / bits - p - 1));
; 2912 :   if(p == 0) out[index * bits / 8] = in;
; 2913 :   else out[index * bits / 8] |= in;
; 2914 : }
; 2915 : 
; 2916 : typedef struct ColorTree ColorTree;
; 2917 : 
; 2918 : /*
; 2919 : One node of a color tree
; 2920 : This is the data structure used to count the number of unique colors and to get a palette
; 2921 : index for a color. It's like an octree, but because the alpha channel is used too, each
; 2922 : node has 16 instead of 8 children.
; 2923 : */
; 2924 : struct ColorTree
; 2925 : {
; 2926 :   ColorTree* children[16]; /*up to 16 pointers to ColorTree of next level*/
; 2927 :   int index; /*the payload. Only has a meaningful value if this is in the last level*/
; 2928 : };
; 2929 : 
; 2930 : static void color_tree_init(ColorTree* tree)
; 2931 : {
; 2932 :   int i;
; 2933 :   for(i = 0; i < 16; i++) tree->children[i] = 0;
; 2934 :   tree->index = -1;
; 2935 : }
; 2936 : 
; 2937 : static void color_tree_cleanup(ColorTree* tree)
; 2938 : {
; 2939 :   int i;
; 2940 :   for(i = 0; i < 16; i++)
; 2941 :   {
; 2942 :     if(tree->children[i])
; 2943 :     {
; 2944 :       color_tree_cleanup(tree->children[i]);
; 2945 :       lodepng_free(tree->children[i]);
; 2946 :     }
; 2947 :   }
; 2948 : }
; 2949 : 
; 2950 : /*returns -1 if color not present, its index otherwise*/
; 2951 : static int color_tree_get(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2952 : {
; 2953 :   int bit = 0;
; 2954 :   for(bit = 0; bit < 8; bit++)
; 2955 :   {
; 2956 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
; 2957 :     if(!tree->children[i]) return -1;
; 2958 :     else tree = tree->children[i];
; 2959 :   }
; 2960 :   return tree ? tree->index : -1;
; 2961 : }
; 2962 : 
; 2963 : #ifdef LODEPNG_COMPILE_ENCODER
; 2964 : static int color_tree_has(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2965 : {
; 2966 :   return color_tree_get(tree, r, g, b, a) >= 0;
; 2967 : }
; 2968 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2969 : 
; 2970 : /*color is not allowed to already exist.
; 2971 : Index should be >= 0 (it's signed to be compatible with using -1 for "doesn't exist")*/
; 2972 : static void color_tree_add(ColorTree* tree,
; 2973 :                            unsigned char r, unsigned char g, unsigned char b, unsigned char a, int index)
; 2974 : {
; 2975 :   int bit;
; 2976 :   for(bit = 0; bit < 8; bit++)
; 2977 :   {
; 2978 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
; 2979 :     if(!tree->children[i])
; 2980 :     {
; 2981 :       tree->children[i] = (ColorTree*)lodepng_malloc(sizeof(ColorTree));
; 2982 :       color_tree_init(tree->children[i]);
; 2983 :     }
; 2984 :     tree = tree->children[i];
; 2985 :   }
; 2986 :   tree->index = index;
; 2987 : }
; 2988 : 
; 2989 : /*put a pixel, given its RGBA color, into image of any color type*/
; 2990 : static unsigned rgba8ToPixel(unsigned char* out, size_t i,
; 2991 :                              const LodePNGColorMode* mode, ColorTree* tree /*for palette*/,
; 2992 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2993 : {
; 2994 :   if(mode->colortype == LCT_GREY)
; 2995 :   {
; 2996 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 2997 :     if(mode->bitdepth == 8) out[i] = grey;
; 2998 :     else if(mode->bitdepth == 16) out[i * 2 + 0] = out[i * 2 + 1] = grey;
; 2999 :     else
; 3000 :     {
; 3001 :       /*take the most significant bits of grey*/
; 3002 :       grey = (grey >> (8 - mode->bitdepth)) & ((1 << mode->bitdepth) - 1);
; 3003 :       addColorBits(out, i, mode->bitdepth, grey);
; 3004 :     }
; 3005 :   }
; 3006 :   else if(mode->colortype == LCT_RGB)
; 3007 :   {
; 3008 :     if(mode->bitdepth == 8)
; 3009 :     {
; 3010 :       out[i * 3 + 0] = r;
; 3011 :       out[i * 3 + 1] = g;
; 3012 :       out[i * 3 + 2] = b;
; 3013 :     }
; 3014 :     else
; 3015 :     {
; 3016 :       out[i * 6 + 0] = out[i * 6 + 1] = r;
; 3017 :       out[i * 6 + 2] = out[i * 6 + 3] = g;
; 3018 :       out[i * 6 + 4] = out[i * 6 + 5] = b;
; 3019 :     }
; 3020 :   }
; 3021 :   else if(mode->colortype == LCT_PALETTE)
; 3022 :   {
; 3023 :     int index = color_tree_get(tree, r, g, b, a);
; 3024 :     if(index < 0) return 82; /*color not in palette*/
; 3025 :     if(mode->bitdepth == 8) out[i] = index;
; 3026 :     else addColorBits(out, i, mode->bitdepth, index);
; 3027 :   }
; 3028 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3029 :   {
; 3030 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 3031 :     if(mode->bitdepth == 8)
; 3032 :     {
; 3033 :       out[i * 2 + 0] = grey;
; 3034 :       out[i * 2 + 1] = a;
; 3035 :     }
; 3036 :     else if(mode->bitdepth == 16)
; 3037 :     {
; 3038 :       out[i * 4 + 0] = out[i * 4 + 1] = grey;
; 3039 :       out[i * 4 + 2] = out[i * 4 + 3] = a;
; 3040 :     }
; 3041 :   }
; 3042 :   else if(mode->colortype == LCT_RGBA)
; 3043 :   {
; 3044 :     if(mode->bitdepth == 8)
; 3045 :     {
; 3046 :       out[i * 4 + 0] = r;
; 3047 :       out[i * 4 + 1] = g;
; 3048 :       out[i * 4 + 2] = b;
; 3049 :       out[i * 4 + 3] = a;
; 3050 :     }
; 3051 :     else
; 3052 :     {
; 3053 :       out[i * 8 + 0] = out[i * 8 + 1] = r;
; 3054 :       out[i * 8 + 2] = out[i * 8 + 3] = g;
; 3055 :       out[i * 8 + 4] = out[i * 8 + 5] = b;
; 3056 :       out[i * 8 + 6] = out[i * 8 + 7] = a;
; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/
; 3061 : }
; 3062 : 
; 3063 : /*put a pixel, given its RGBA16 color, into image of any color 16-bitdepth type*/
; 3064 : static unsigned rgba16ToPixel(unsigned char* out, size_t i,
; 3065 :                               const LodePNGColorMode* mode,
; 3066 :                               unsigned short r, unsigned short g, unsigned short b, unsigned short a)
; 3067 : {
; 3068 :   if(mode->bitdepth != 16) return 85; /*must be 16 for this function*/
; 3069 :   if(mode->colortype == LCT_GREY)
; 3070 :   {
; 3071 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3072 :     out[i * 2 + 0] = (grey >> 8) & 255;
; 3073 :     out[i * 2 + 1] = grey & 255;
; 3074 :   }
; 3075 :   else if(mode->colortype == LCT_RGB)
; 3076 :   {
; 3077 :     out[i * 6 + 0] = (r >> 8) & 255;
; 3078 :     out[i * 6 + 1] = r & 255;
; 3079 :     out[i * 6 + 2] = (g >> 8) & 255;
; 3080 :     out[i * 6 + 3] = g & 255;
; 3081 :     out[i * 6 + 4] = (b >> 8) & 255;
; 3082 :     out[i * 6 + 5] = b & 255;
; 3083 :   }
; 3084 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3085 :   {
; 3086 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3087 :     out[i * 4 + 0] = (grey >> 8) & 255;
; 3088 :     out[i * 4 + 1] = grey & 255;
; 3089 :     out[i * 4 + 2] = (a >> 8) & 255;
; 3090 :     out[i * 4 + 3] = a & 255;
; 3091 :   }
; 3092 :   else if(mode->colortype == LCT_RGBA)
; 3093 :   {
; 3094 :     out[i * 8 + 0] = (r >> 8) & 255;
; 3095 :     out[i * 8 + 1] = r & 255;
; 3096 :     out[i * 8 + 2] = (g >> 8) & 255;
; 3097 :     out[i * 8 + 3] = g & 255;
; 3098 :     out[i * 8 + 4] = (b >> 8) & 255;
; 3099 :     out[i * 8 + 5] = b & 255;
; 3100 :     out[i * 8 + 6] = (a >> 8) & 255;
; 3101 :     out[i * 8 + 7] = a & 255;
; 3102 :   }
; 3103 : 
; 3104 :   return 0; /*no error*/
; 3105 : }
; 3106 : 
; 3107 : /*Get RGBA8 color of pixel with index i (y * width + x) from the raw image with given color type.*/
; 3108 : static unsigned getPixelColorRGBA8(unsigned char* r, unsigned char* g,
; 3109 :                                    unsigned char* b, unsigned char* a,
; 3110 :                                    const unsigned char* in, size_t i,
; 3111 :                                    const LodePNGColorMode* mode,
; 3112 :                                    unsigned fix_png)
; 3113 : {
; 3114 :   if(mode->colortype == LCT_GREY)
; 3115 :   {
; 3116 :     if(mode->bitdepth == 8)
; 3117 :     {
; 3118 :       *r = *g = *b = in[i];
; 3119 :       if(mode->key_defined && *r == mode->key_r) *a = 0;
; 3120 :       else *a = 255;
; 3121 :     }
; 3122 :     else if(mode->bitdepth == 16)
; 3123 :     {
; 3124 :       *r = *g = *b = in[i * 2 + 0];
; 3125 :       if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
; 3126 :       else *a = 255;
; 3127 :     }
; 3128 :     else
; 3129 :     {
; 3130 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
; 3131 :       size_t j = i * mode->bitdepth;
; 3132 :       unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3133 :       *r = *g = *b = (value * 255) / highest;
; 3134 :       if(mode->key_defined && value == mode->key_r) *a = 0;
; 3135 :       else *a = 255;
; 3136 :     }
; 3137 :   }
; 3138 :   else if(mode->colortype == LCT_RGB)
; 3139 :   {
; 3140 :     if(mode->bitdepth == 8)
; 3141 :     {
; 3142 :       *r = in[i * 3 + 0]; *g = in[i * 3 + 1]; *b = in[i * 3 + 2];
; 3143 :       if(mode->key_defined && *r == mode->key_r && *g == mode->key_g && *b == mode->key_b) *a = 0;
; 3144 :       else *a = 255;
; 3145 :     }
; 3146 :     else
; 3147 :     {
; 3148 :       *r = in[i * 6 + 0];
; 3149 :       *g = in[i * 6 + 2];
; 3150 :       *b = in[i * 6 + 4];
; 3151 :       if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3152 :          && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3153 :          && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
; 3154 :       else *a = 255;
; 3155 :     }
; 3156 :   }
; 3157 :   else if(mode->colortype == LCT_PALETTE)
; 3158 :   {
; 3159 :     unsigned index;
; 3160 :     if(mode->bitdepth == 8) index = in[i];
; 3161 :     else
; 3162 :     {
; 3163 :       size_t j = i * mode->bitdepth;
; 3164 :       index = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3165 :     }
; 3166 : 
; 3167 :     if(index >= mode->palettesize)
; 3168 :     {
; 3169 :       /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3170 :       if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/
; 3171 :       *r = *g = *b = 0;
; 3172 :       *a = 255;
; 3173 :     }
; 3174 :     else
; 3175 :     {
; 3176 :       *r = mode->palette[index * 4 + 0];
; 3177 :       *g = mode->palette[index * 4 + 1];
; 3178 :       *b = mode->palette[index * 4 + 2];
; 3179 :       *a = mode->palette[index * 4 + 3];
; 3180 :     }
; 3181 :   }
; 3182 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3183 :   {
; 3184 :     if(mode->bitdepth == 8)
; 3185 :     {
; 3186 :       *r = *g = *b = in[i * 2 + 0];
; 3187 :       *a = in[i * 2 + 1];
; 3188 :     }
; 3189 :     else
; 3190 :     {
; 3191 :       *r = *g = *b = in[i * 4 + 0];
; 3192 :       *a = in[i * 4 + 2];
; 3193 :     }
; 3194 :   }
; 3195 :   else if(mode->colortype == LCT_RGBA)
; 3196 :   {
; 3197 :     if(mode->bitdepth == 8)
; 3198 :     {
; 3199 :       *r = in[i * 4 + 0];
; 3200 :       *g = in[i * 4 + 1];
; 3201 :       *b = in[i * 4 + 2];
; 3202 :       *a = in[i * 4 + 3];
; 3203 :     }
; 3204 :     else
; 3205 :     {
; 3206 :       *r = in[i * 8 + 0];
; 3207 :       *g = in[i * 8 + 2];
; 3208 :       *b = in[i * 8 + 4];
; 3209 :       *a = in[i * 8 + 6];
; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/
; 3214 : }
; 3215 : 
; 3216 : /*Similar to getPixelColorRGBA8, but with all the for loops inside of the color
; 3217 : mode test cases, optimized to convert the colors much faster, when converting
; 3218 : to RGBA or RGB with 8 bit per cannel. buffer must be RGBA or RGB output with
; 3219 : enough memory, if has_alpha is true the output is RGBA. mode has the color mode
; 3220 : of the input buffer.*/
; 3221 : static unsigned getPixelColorsRGBA8(unsigned char* buffer, size_t numpixels,
; 3222 :                                     unsigned has_alpha, const unsigned char* in,
; 3223 :                                     const LodePNGColorMode* mode,
; 3224 :                                     unsigned fix_png)
; 3225 : {
; 3226 :   unsigned num_channels = has_alpha ? 4 : 3;
; 3227 :   size_t i;
; 3228 :   if(mode->colortype == LCT_GREY)
; 3229 :   {
; 3230 :     if(mode->bitdepth == 8)
; 3231 :     {
; 3232 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3233 :       {
; 3234 :         buffer[0] = buffer[1] = buffer[2] = in[i];
; 3235 :         if(has_alpha) buffer[3] = mode->key_defined && in[i] == mode->key_r ? 0 : 255;
; 3236 :       }
; 3237 :     }
; 3238 :     else if(mode->bitdepth == 16)
; 3239 :     {
; 3240 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3241 :       {
; 3242 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2];
; 3243 :         if(has_alpha) buffer[3] = mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r ? 0 : 255;
; 3244 :       }
; 3245 :     }
; 3246 :     else
; 3247 :     {
; 3248 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
; 3249 :       size_t j = 0;
; 3250 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3251 :       {
; 3252 :         unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3253 :         buffer[0] = buffer[1] = buffer[2] = (value * 255) / highest;
; 3254 :         if(has_alpha) buffer[3] = mode->key_defined && value == mode->key_r ? 0 : 255;
; 3255 :       }
; 3256 :     }
; 3257 :   }
; 3258 :   else if(mode->colortype == LCT_RGB)
; 3259 :   {
; 3260 :     if(mode->bitdepth == 8)
; 3261 :     {
; 3262 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3263 :       {
; 3264 :         buffer[0] = in[i * 3 + 0];
; 3265 :         buffer[1] = in[i * 3 + 1];
; 3266 :         buffer[2] = in[i * 3 + 2];
; 3267 :         if(has_alpha) buffer[3] = mode->key_defined && buffer[0] == mode->key_r
; 3268 :            && buffer[1]== mode->key_g && buffer[2] == mode->key_b ? 0 : 255;
; 3269 :       }
; 3270 :     }
; 3271 :     else
; 3272 :     {
; 3273 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3274 :       {
; 3275 :         buffer[0] = in[i * 6 + 0];
; 3276 :         buffer[1] = in[i * 6 + 2];
; 3277 :         buffer[2] = in[i * 6 + 4];
; 3278 :         if(has_alpha) buffer[3] = mode->key_defined
; 3279 :            && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3280 :            && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3281 :            && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b ? 0 : 255;
; 3282 :       }
; 3283 :     }
; 3284 :   }
; 3285 :   else if(mode->colortype == LCT_PALETTE)
; 3286 :   {
; 3287 :     unsigned index;
; 3288 :     size_t j = 0;
; 3289 :     for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3290 :     {
; 3291 :       if(mode->bitdepth == 8) index = in[i];
; 3292 :       else index = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3293 : 
; 3294 :       if(index >= mode->palettesize)
; 3295 :       {
; 3296 :         /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3297 :         if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/
; 3298 :         buffer[0] = buffer[1] = buffer[2] = 0;
; 3299 :         if(has_alpha) buffer[3] = 255;
; 3300 :       }
; 3301 :       else
; 3302 :       {
; 3303 :         buffer[0] = mode->palette[index * 4 + 0];
; 3304 :         buffer[1] = mode->palette[index * 4 + 1];
; 3305 :         buffer[2] = mode->palette[index * 4 + 2];
; 3306 :         if(has_alpha) buffer[3] = mode->palette[index * 4 + 3];
; 3307 :       }
; 3308 :     }
; 3309 :   }
; 3310 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3311 :   {
; 3312 :     if(mode->bitdepth == 8)
; 3313 :     {
; 3314 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3315 :       {
; 3316 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2 + 0];
; 3317 :         if(has_alpha) buffer[3] = in[i * 2 + 1];
; 3318 :       }
; 3319 :     }
; 3320 :     else
; 3321 :     {
; 3322 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3323 :       {
; 3324 :         buffer[0] = buffer[1] = buffer[2] = in[i * 4 + 0];
; 3325 :         if(has_alpha) buffer[3] = in[i * 4 + 2];
; 3326 :       }
; 3327 :     }
; 3328 :   }
; 3329 :   else if(mode->colortype == LCT_RGBA)
; 3330 :   {
; 3331 :     if(mode->bitdepth == 8)
; 3332 :     {
; 3333 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3334 :       {
; 3335 :         buffer[0] = in[i * 4 + 0];
; 3336 :         buffer[1] = in[i * 4 + 1];
; 3337 :         buffer[2] = in[i * 4 + 2];
; 3338 :         if(has_alpha) buffer[3] = in[i * 4 + 3];
; 3339 :       }
; 3340 :     }
; 3341 :     else
; 3342 :     {
; 3343 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3344 :       {
; 3345 :         buffer[0] = in[i * 8 + 0];
; 3346 :         buffer[1] = in[i * 8 + 2];
; 3347 :         buffer[2] = in[i * 8 + 4];
; 3348 :         if(has_alpha) buffer[3] = in[i * 8 + 6];
; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/
; 3354 : }
; 3355 : 
; 3356 : /*Get RGBA16 color of pixel with index i (y * width + x) from the raw image with
; 3357 : given color type, but the given color type must be 16-bit itself.*/
; 3358 : static unsigned getPixelColorRGBA16(unsigned short* r, unsigned short* g, unsigned short* b, unsigned short* a,
; 3359 :                                     const unsigned char* in, size_t i, const LodePNGColorMode* mode)
; 3360 : {
; 3361 :   if(mode->bitdepth != 16) return 85; /*error: this function only supports 16-bit input*/
; 3362 : 
; 3363 :   if(mode->colortype == LCT_GREY)
; 3364 :   {
; 3365 :     *r = *g = *b = 256 * in[i * 2 + 0] + in[i * 2 + 1];
; 3366 :     if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
; 3367 :     else *a = 65535;
; 3368 :   }
; 3369 :   else if(mode->colortype == LCT_RGB)
; 3370 :   {
; 3371 :     *r = 256 * in[i * 6 + 0] + in[i * 6 + 1];
; 3372 :     *g = 256 * in[i * 6 + 2] + in[i * 6 + 3];
; 3373 :     *b = 256 * in[i * 6 + 4] + in[i * 6 + 5];
; 3374 :     if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3375 :        && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3376 :        && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
; 3377 :     else *a = 65535;
; 3378 :   }
; 3379 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3380 :   {
; 3381 :     *r = *g = *b = 256 * in[i * 4 + 0] + in[i * 4 + 1];
; 3382 :     *a = 256 * in[i * 4 + 2] + in[i * 4 + 3];
; 3383 :   }
; 3384 :   else if(mode->colortype == LCT_RGBA)
; 3385 :   {
; 3386 :     *r = 256 * in[i * 8 + 0] + in[i * 8 + 1];
; 3387 :     *g = 256 * in[i * 8 + 2] + in[i * 8 + 3];
; 3388 :     *b = 256 * in[i * 8 + 4] + in[i * 8 + 5];
; 3389 :     *a = 256 * in[i * 8 + 6] + in[i * 8 + 7];
; 3390 :   }
; 3391 :   else return 85; /*error: this function only supports 16-bit input, not palettes*/
; 3392 : 
; 3393 :   return 0; /*no error*/
; 3394 : }
; 3395 : 
; 3396 : /*
; 3397 : converts from any color type to 24-bit or 32-bit (later maybe more supported). return value = LodePNG error code
; 3398 : the out buffer must have (w * h * bpp + 7) / 8 bytes, where bpp is the bits per pixel of the output color type
; 3399 : (lodepng_get_bpp) for < 8 bpp images, there may _not_ be padding bits at the end of scanlines.
; 3400 : */
; 3401 : unsigned lodepng_convert(unsigned char* out, const unsigned char* in,
; 3402 :                          LodePNGColorMode* mode_out, const LodePNGColorMode* mode_in,
; 3403 :                          unsigned w, unsigned h, unsigned fix_png)
; 3404 : {
; 3405 :   unsigned error = 0;
; 3406 :   size_t i;
; 3407 :   ColorTree tree;
; 3408 :   size_t numpixels = w * h;
; 3409 : 
; 3410 :   if(lodepng_color_mode_equal(mode_out, mode_in))
; 3411 :   {
; 3412 :     size_t numbytes = lodepng_get_raw_size(w, h, mode_in);
; 3413 :     for(i = 0; i < numbytes; i++) out[i] = in[i];
; 3414 :     return error;
; 3415 :   }
; 3416 : 
; 3417 :   if(mode_out->colortype == LCT_PALETTE)
; 3418 :   {
; 3419 :     size_t palsize = 1 << mode_out->bitdepth;
; 3420 :     if(mode_out->palettesize < palsize) palsize = mode_out->palettesize;
; 3421 :     color_tree_init(&tree);
; 3422 :     for(i = 0; i < palsize; i++)
; 3423 :     {
; 3424 :       unsigned char* p = &mode_out->palette[i * 4];
; 3425 :       color_tree_add(&tree, p[0], p[1], p[2], p[3], i);
; 3426 :     }
; 3427 :   }
; 3428 : 
; 3429 :   if(mode_in->bitdepth == 16 && mode_out->bitdepth == 16)
; 3430 :   {
; 3431 :     for(i = 0; i < numpixels; i++)
; 3432 :     {
; 3433 :       unsigned short r = 0, g = 0, b = 0, a = 0;
; 3434 :       error = getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode_in);
; 3435 :       if(error) break;
; 3436 :       error = rgba16ToPixel(out, i, mode_out, r, g, b, a);
; 3437 :       if(error) break;
; 3438 :     }
; 3439 :   }
; 3440 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGBA)
; 3441 :   {
; 3442 :     error = getPixelColorsRGBA8(out, numpixels, 1, in, mode_in, fix_png);
; 3443 :   }
; 3444 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGB)
; 3445 :   {
; 3446 :     error = getPixelColorsRGBA8(out, numpixels, 0, in, mode_in, fix_png);
; 3447 :   }
; 3448 :   else
; 3449 :   {
; 3450 :     unsigned char r = 0, g = 0, b = 0, a = 0;
; 3451 :     for(i = 0; i < numpixels; i++)
; 3452 :     {
; 3453 :       error = getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode_in, fix_png);
; 3454 :       if(error) break;
; 3455 :       error = rgba8ToPixel(out, i, mode_out, &tree, r, g, b, a);
; 3456 :       if(error) break;
; 3457 :     }
; 3458 :   }
; 3459 : 
; 3460 :   if(mode_out->colortype == LCT_PALETTE)
; 3461 :   {
; 3462 :     color_tree_cleanup(&tree);
; 3463 :   }
; 3464 : 
; 3465 :   return error;
; 3466 : }
; 3467 : 
; 3468 : #ifdef LODEPNG_COMPILE_ENCODER
; 3469 : 
; 3470 : typedef struct ColorProfile
; 3471 : {
; 3472 :   unsigned char sixteenbit; /*needs more than 8 bits per channel*/
; 3473 :   unsigned char sixteenbit_done;
; 3474 : 
; 3475 : 
; 3476 :   unsigned char colored; /*not greyscale*/
; 3477 :   unsigned char colored_done;
; 3478 : 
; 3479 :   unsigned char key; /*a color key is required, or more*/
; 3480 :   unsigned short key_r; /*these values are always in 16-bit bitdepth in the profile*/
; 3481 :   unsigned short key_g;
; 3482 :   unsigned short key_b;
; 3483 :   unsigned char alpha; /*alpha channel, or alpha palette, required*/
; 3484 :   unsigned char alpha_done;
; 3485 : 
; 3486 :   unsigned numcolors;
; 3487 :   ColorTree tree; /*for listing the counted colors, up to 256*/
; 3488 :   unsigned char* palette; /*size 1024. Remember up to the first 256 RGBA colors*/
; 3489 :   unsigned maxnumcolors; /*if more than that amount counted*/
; 3490 :   unsigned char numcolors_done;
; 3491 : 
; 3492 :   unsigned greybits; /*amount of bits required for greyscale (1, 2, 4, 8). Does not take 16 bit into account.*/
; 3493 :   unsigned char greybits_done;
; 3494 : 
; 3495 : } ColorProfile;
; 3496 : 
; 3497 : static void color_profile_init(ColorProfile* profile, const LodePNGColorMode* mode)
; 3498 : {
; 3499 :   profile->sixteenbit = 0;
; 3500 :   profile->sixteenbit_done = mode->bitdepth == 16 ? 0 : 1;
; 3501 : 
; 3502 :   profile->colored = 0;
; 3503 :   profile->colored_done = lodepng_is_greyscale_type(mode) ? 1 : 0;
; 3504 : 
; 3505 :   profile->key = 0;
; 3506 :   profile->alpha = 0;
; 3507 :   profile->alpha_done = lodepng_can_have_alpha(mode) ? 0 : 1;
; 3508 : 
; 3509 :   profile->numcolors = 0;
; 3510 :   color_tree_init(&profile->tree);
; 3511 :   profile->palette = (unsigned char*)lodepng_malloc(1024);
; 3512 :   profile->maxnumcolors = 257;
; 3513 :   if(lodepng_get_bpp(mode) <= 8)
; 3514 :   {
; 3515 :     int bpp = lodepng_get_bpp(mode);
; 3516 :     profile->maxnumcolors = bpp == 1 ? 2 : (bpp == 2 ? 4 : (bpp == 4 ? 16 : 256));
; 3517 :   }
; 3518 :   profile->numcolors_done = 0;
; 3519 : 
; 3520 :   profile->greybits = 1;
; 3521 :   profile->greybits_done = lodepng_get_bpp(mode) == 1 ? 1 : 0;
; 3522 : }
; 3523 : 
; 3524 : static void color_profile_cleanup(ColorProfile* profile)
; 3525 : {
; 3526 :   color_tree_cleanup(&profile->tree);
; 3527 :   lodepng_free(profile->palette);
; 3528 : }
; 3529 : 
; 3530 : /*function used for debug purposes with C++*/
; 3531 : /*void printColorProfile(ColorProfile* p)
; 3532 : {
; 3533 :   std::cout << "sixteenbit: " << (int)p->sixteenbit << std::endl;
; 3534 :   std::cout << "sixteenbit_done: " << (int)p->sixteenbit_done << std::endl;
; 3535 :   std::cout << "colored: " << (int)p->colored << std::endl;
; 3536 :   std::cout << "colored_done: " << (int)p->colored_done << std::endl;
; 3537 :   std::cout << "key: " << (int)p->key << std::endl;
; 3538 :   std::cout << "key_r: " << (int)p->key_r << std::endl;
; 3539 :   std::cout << "key_g: " << (int)p->key_g << std::endl;
; 3540 :   std::cout << "key_b: " << (int)p->key_b << std::endl;
; 3541 :   std::cout << "alpha: " << (int)p->alpha << std::endl;
; 3542 :   std::cout << "alpha_done: " << (int)p->alpha_done << std::endl;
; 3543 :   std::cout << "numcolors: " << (int)p->numcolors << std::endl;
; 3544 :   std::cout << "maxnumcolors: " << (int)p->maxnumcolors << std::endl;
; 3545 :   std::cout << "numcolors_done: " << (int)p->numcolors_done << std::endl;
; 3546 :   std::cout << "greybits: " << (int)p->greybits << std::endl;
; 3547 :   std::cout << "greybits_done: " << (int)p->greybits_done << std::endl;
; 3548 : }*/
; 3549 : 
; 3550 : /*Returns how many bits needed to represent given value (max 8 bit)*/
; 3551 : unsigned getValueRequiredBits(unsigned short value)
; 3552 : {
; 3553 :   if(value == 0 || value == 255) return 1;
; 3554 :   /*The scaling of 2-bit and 4-bit values uses multiples of 85 and 17*/
; 3555 :   if(value % 17 == 0) return value % 85 == 0 ? 2 : 4;
; 3556 :   return 8;
; 3557 : }
; 3558 : 
; 3559 : /*profile must already have been inited with mode.
; 3560 : It's ok to set some parameters of profile to done already.*/
; 3561 : static unsigned get_color_profile(ColorProfile* profile,
; 3562 :                                   const unsigned char* in,
; 3563 :                                   size_t numpixels /*must be full image size, for certain filesize based choices*/,
; 3564 :                                   const LodePNGColorMode* mode,
; 3565 :                                   unsigned fix_png)
; 3566 : {
; 3567 :   unsigned error = 0;
; 3568 :   size_t i;
; 3569 : 
; 3570 :   if(mode->bitdepth == 16)
; 3571 :   {
; 3572 :     for(i = 0; i < numpixels; i++)
; 3573 :     {
; 3574 :       unsigned short r, g, b, a;
; 3575 :       error = getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode);
; 3576 :       if(error) break;
; 3577 : 
; 3578 :       /*a color is considered good for 8-bit if the first byte and the second byte are equal,
; 3579 :         (so if it's divisible through 257), NOT necessarily if the second byte is 0*/
; 3580 :       if(!profile->sixteenbit_done
; 3581 :           && (((r & 255) != ((r >> 8) & 255))
; 3582 :            || ((g & 255) != ((g >> 8) & 255))
; 3583 :            || ((b & 255) != ((b >> 8) & 255))))
; 3584 :       {
; 3585 :         profile->sixteenbit = 1;
; 3586 :         profile->sixteenbit_done = 1;
; 3587 :         profile->greybits_done = 1; /*greybits is not applicable anymore at 16-bit*/
; 3588 :         profile->numcolors_done = 1; /*counting colors no longer useful, palette doesn't support 16-bit*/
; 3589 :       }
; 3590 : 
; 3591 :       if(!profile->colored_done && (r != g || r != b))
; 3592 :       {
; 3593 :         profile->colored = 1;
; 3594 :         profile->colored_done = 1;
; 3595 :         profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3596 :       }
; 3597 : 
; 3598 :       if(!profile->alpha_done && a != 65535)
; 3599 :       {
; 3600 :         /*only use color key if numpixels large enough to justify tRNS chunk size*/
; 3601 :         if(a == 0 && numpixels > 16 && !(profile->key && (r != profile->key_r || g != profile->key_g || b != profile->key_b)))
; 3602 :         {
; 3603 :           if(!profile->alpha && !profile->key)
; 3604 :           {
; 3605 :             profile->key = 1;
; 3606 :             profile->key_r = r;
; 3607 :             profile->key_g = g;
; 3608 :             profile->key_b = b;
; 3609 :           }
; 3610 :         }
; 3611 :         else
; 3612 :         {
; 3613 :           profile->alpha = 1;
; 3614 :           profile->alpha_done = 1;
; 3615 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3616 :         }
; 3617 :       }
; 3618 : 
; 3619 :       /* Color key cannot be used if an opaque pixel also has that RGB color. */
; 3620 :       if(!profile->alpha_done && a == 65535 && profile->key
; 3621 :           && r == profile->key_r && g == profile->key_g && b == profile->key_b)
; 3622 :       {
; 3623 :           profile->alpha = 1;
; 3624 :           profile->alpha_done = 1;
; 3625 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3626 :       }
; 3627 : 
; 3628 :       if(!profile->greybits_done)
; 3629 :       {
; 3630 :         /*assuming 8-bit r, this test does not care about 16-bit*/
; 3631 :         unsigned bits = getValueRequiredBits(r);
; 3632 :         if(bits > profile->greybits) profile->greybits = bits;
; 3633 :         if(profile->greybits >= 8) profile->greybits_done = 1;
; 3634 :       }
; 3635 : 
; 3636 :       if(!profile->numcolors_done)
; 3637 :       {
; 3638 :         /*assuming 8-bit rgba, this test does not care about 16-bit*/
; 3639 :         if(!color_tree_has(&profile->tree, (unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a))
; 3640 :         {
; 3641 :           color_tree_add(&profile->tree, (unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a,
; 3642 :             profile->numcolors);
; 3643 :           if(profile->numcolors < 256)
; 3644 :           {
; 3645 :             unsigned char* p = profile->palette;
; 3646 :             unsigned i = profile->numcolors;
; 3647 :             p[i * 4 + 0] = (unsigned char)r;
; 3648 :             p[i * 4 + 1] = (unsigned char)g;
; 3649 :             p[i * 4 + 2] = (unsigned char)b;
; 3650 :             p[i * 4 + 3] = (unsigned char)a;
; 3651 :           }
; 3652 :           profile->numcolors++;
; 3653 :           if(profile->numcolors >= profile->maxnumcolors) profile->numcolors_done = 1;
; 3654 :         }
; 3655 :       }
; 3656 : 
; 3657 :       if(profile->alpha_done && profile->numcolors_done
; 3658 :       && profile->colored_done && profile->sixteenbit_done && profile->greybits_done)
; 3659 :       {
; 3660 :         break;
; 3661 :       }
; 3662 :     };
; 3663 :   }
; 3664 :   else /* < 16-bit */
; 3665 :   {
; 3666 :     for(i = 0; i < numpixels; i++)
; 3667 :     {
; 3668 :       unsigned char r = 0, g = 0, b = 0, a = 0;
; 3669 :       error = getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode, fix_png);
; 3670 :       if(error) break;
; 3671 : 
; 3672 :       if(!profile->colored_done && (r != g || r != b))
; 3673 :       {
; 3674 :         profile->colored = 1;
; 3675 :         profile->colored_done = 1;
; 3676 :         profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3677 :       }
; 3678 : 
; 3679 :       if(!profile->alpha_done && a != 255)
; 3680 :       {
; 3681 :         if(a == 0 && !(profile->key && (r != profile->key_r || g != profile->key_g || b != profile->key_b)))
; 3682 :         {
; 3683 :           if(!profile->key)
; 3684 :           {
; 3685 :             profile->key = 1;
; 3686 :             profile->key_r = r;
; 3687 :             profile->key_g = g;
; 3688 :             profile->key_b = b;
; 3689 :           }
; 3690 :         }
; 3691 :         else
; 3692 :         {
; 3693 :           profile->alpha = 1;
; 3694 :           profile->alpha_done = 1;
; 3695 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3696 :         }
; 3697 :       }
; 3698 : 
; 3699 :       /* Color key cannot be used if an opaque pixel also has that RGB color. */
; 3700 :       if(!profile->alpha_done && a == 255 && profile->key
; 3701 :           && r == profile->key_r && g == profile->key_g && b == profile->key_b)
; 3702 :       {
; 3703 :           profile->alpha = 1;
; 3704 :           profile->alpha_done = 1;
; 3705 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3706 :       }
; 3707 : 
; 3708 :       if(!profile->greybits_done)
; 3709 :       {
; 3710 :         unsigned bits = getValueRequiredBits(r);
; 3711 :         if(bits > profile->greybits) profile->greybits = bits;
; 3712 :         if(profile->greybits >= 8) profile->greybits_done = 1;
; 3713 :       }
; 3714 : 
; 3715 :       if(!profile->numcolors_done)
; 3716 :       {
; 3717 :         if(!color_tree_has(&profile->tree, r, g, b, a))
; 3718 :         {
; 3719 : 
; 3720 :           color_tree_add(&profile->tree, r, g, b, a, profile->numcolors);
; 3721 :           if(profile->numcolors < 256)
; 3722 :           {
; 3723 :             unsigned char* p = profile->palette;
; 3724 :             unsigned i = profile->numcolors;
; 3725 :             p[i * 4 + 0] = r;
; 3726 :             p[i * 4 + 1] = g;
; 3727 :             p[i * 4 + 2] = b;
; 3728 :             p[i * 4 + 3] = a;
; 3729 :           }
; 3730 :           profile->numcolors++;
; 3731 :           if(profile->numcolors >= profile->maxnumcolors) profile->numcolors_done = 1;
; 3732 :         }
; 3733 :       }
; 3734 : 
; 3735 :       if(profile->alpha_done && profile->numcolors_done && profile->colored_done && profile->greybits_done)
; 3736 :       {
; 3737 :         break;
; 3738 :       }
; 3739 :     };
; 3740 :   }
; 3741 : 
; 3742 :   /*make the profile's key always 16-bit for consistency*/
; 3743 :   if(mode->bitdepth < 16)
; 3744 :   {
; 3745 :     /*repeat each byte twice*/
; 3746 :     profile->key_r *= 257;
; 3747 :     profile->key_g *= 257;
; 3748 :     profile->key_b *= 257;
; 3749 :   }
; 3750 : 
; 3751 :   return error;
; 3752 : }
; 3753 : 
; 3754 : static void setColorKeyFrom16bit(LodePNGColorMode* mode_out, unsigned r, unsigned g, unsigned b, unsigned bitdepth)
; 3755 : {
; 3756 :   unsigned mask = (1 << bitdepth) - 1;
; 3757 :   mode_out->key_defined = 1;
; 3758 :   mode_out->key_r = r & mask;
; 3759 :   mode_out->key_g = g & mask;
; 3760 :   mode_out->key_b = b & mask;
; 3761 : }
; 3762 : 
; 3763 : /*updates values of mode with a potentially smaller color model. mode_out should
; 3764 : contain the user chosen color model, but will be overwritten with the new chosen one.*/
; 3765 : unsigned lodepng_auto_choose_color(LodePNGColorMode* mode_out,
; 3766 :                                    const unsigned char* image, unsigned w, unsigned h,
; 3767 :                                    const LodePNGColorMode* mode_in,
; 3768 :                                    LodePNGAutoConvert auto_convert)
; 3769 : {
; 3770 :   ColorProfile profile;
; 3771 :   unsigned error = 0;
; 3772 :   int no_nibbles = auto_convert == LAC_AUTO_NO_NIBBLES || auto_convert == LAC_AUTO_NO_NIBBLES_NO_PALETTE;
; 3773 :   int no_palette = auto_convert == LAC_AUTO_NO_PALETTE || auto_convert == LAC_AUTO_NO_NIBBLES_NO_PALETTE;
; 3774 : 
; 3775 :   if(auto_convert == LAC_ALPHA)
; 3776 :   {
; 3777 :     if(mode_out->colortype != LCT_RGBA && mode_out->colortype != LCT_GREY_ALPHA) return 0;
; 3778 :   }
; 3779 : 
; 3780 :   color_profile_init(&profile, mode_in);
; 3781 :   if(auto_convert == LAC_ALPHA)
; 3782 :   {
; 3783 :     profile.colored_done = 1;
; 3784 :     profile.greybits_done = 1;
; 3785 :     profile.numcolors_done = 1;
; 3786 :     profile.sixteenbit_done = 1;
; 3787 :   }
; 3788 :   error = get_color_profile(&profile, image, w * h, mode_in, 0 /*fix_png*/);
; 3789 :   if(!error && auto_convert == LAC_ALPHA)
; 3790 :   {
; 3791 :     if(!profile.alpha)
; 3792 :     {
; 3793 :       mode_out->colortype = (mode_out->colortype == LCT_RGBA ? LCT_RGB : LCT_GREY);
; 3794 :       if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3795 :     }
; 3796 :   }
; 3797 :   else if(!error && auto_convert != LAC_ALPHA)
; 3798 :   {
; 3799 :     mode_out->key_defined = 0;
; 3800 : 
; 3801 :     if(profile.sixteenbit)
; 3802 :     {
; 3803 :       mode_out->bitdepth = 16;
; 3804 :       if(profile.alpha)
; 3805 :       {
; 3806 :         mode_out->colortype = profile.colored ? LCT_RGBA : LCT_GREY_ALPHA;
; 3807 :       }
; 3808 :       else
; 3809 :       {
; 3810 :         mode_out->colortype = profile.colored ? LCT_RGB : LCT_GREY;
; 3811 :         if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3812 :       }
; 3813 :     }
; 3814 :     else /*less than 16 bits per channel*/
; 3815 :     {
; 3816 :       /*don't add palette overhead if image hasn't got a lot of pixels*/
; 3817 :       unsigned n = profile.numcolors;
; 3818 :       int palette_ok = !no_palette && n <= 256 && (n * 2 < w * h);
; 3819 :       unsigned palettebits = n <= 2 ? 1 : (n <= 4 ? 2 : (n <= 16 ? 4 : 8));
; 3820 :       int grey_ok = !profile.colored && !profile.alpha; /*grey without alpha, with potentially low bits*/
; 3821 :       if(palette_ok || grey_ok)
; 3822 :       {
; 3823 :         if(!palette_ok || (grey_ok && profile.greybits <= palettebits))
; 3824 :         {
; 3825 :           unsigned grey = profile.key_r;
; 3826 :           mode_out->colortype = LCT_GREY;
; 3827 :           mode_out->bitdepth = profile.greybits;
; 3828 :           if(profile.key) setColorKeyFrom16bit(mode_out, grey, grey, grey, mode_out->bitdepth);
; 3829 :         }
; 3830 :         else
; 3831 :         {
; 3832 :           /*fill in the palette*/
; 3833 :           unsigned i;
; 3834 :           unsigned char* p = profile.palette;
; 3835 :           /*remove potential earlier palette*/
; 3836 :           lodepng_palette_clear(mode_out);
; 3837 :           for(i = 0; i < profile.numcolors; i++)
; 3838 :           {
; 3839 :             error = lodepng_palette_add(mode_out, p[i * 4 + 0], p[i * 4 + 1], p[i * 4 + 2], p[i * 4 + 3]);
; 3840 :             if(error) break;
; 3841 :           }
; 3842 : 
; 3843 :           mode_out->colortype = LCT_PALETTE;
; 3844 :           mode_out->bitdepth = palettebits;
; 3845 :         }
; 3846 :       }
; 3847 :       else /*8-bit per channel*/
; 3848 :       {
; 3849 :         mode_out->bitdepth = 8;
; 3850 :         if(profile.alpha)
; 3851 :         {
; 3852 :           mode_out->colortype = profile.colored ? LCT_RGBA : LCT_GREY_ALPHA;
; 3853 :         }
; 3854 :         else
; 3855 :         {
; 3856 :           mode_out->colortype = profile.colored ? LCT_RGB : LCT_GREY /*LCT_GREY normally won't occur, already done earlier*/;
; 3857 :           if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3858 :         }
; 3859 :       }
; 3860 :     }
; 3861 :   }
; 3862 : 
; 3863 :   color_profile_cleanup(&profile);
; 3864 : 
; 3865 :   if(mode_out->colortype == LCT_PALETTE && mode_in->palettesize == mode_out->palettesize)
; 3866 :   {
; 3867 :     /*In this case keep the palette order of the input, so that the user can choose an optimal one*/
; 3868 :     size_t i;
; 3869 :     for(i = 0; i < mode_in->palettesize * 4; i++)
; 3870 :     {
; 3871 :       mode_out->palette[i] = mode_in->palette[i];
; 3872 :     }
; 3873 :   }
; 3874 : 
; 3875 :   if(no_nibbles && mode_out->bitdepth < 8)
; 3876 :   {
; 3877 :     /*palette can keep its small amount of colors, as long as no indices use it*/
; 3878 :     mode_out->bitdepth = 8;
; 3879 :   }
; 3880 : 
; 3881 :   return error;
; 3882 : }
; 3883 : 
; 3884 : #endif /* #ifdef LODEPNG_COMPILE_ENCODER */
; 3885 : 
; 3886 : /*
; 3887 : Paeth predicter, used by PNG filter type 4
; 3888 : The parameters are of type short, but should come from unsigned chars, the shorts
; 3889 : are only needed to make the paeth calculation correct.
; 3890 : */
; 3891 : static unsigned char paethPredictor(short a, short b, short c)
; 3892 : {
; 3893 :   short pa = abs(b - c);
; 3894 :   short pb = abs(a - c);
; 3895 :   short pc = abs(a + b - c - c);
; 3896 : 
; 3897 :   if(pc < pa && pc < pb) return (unsigned char)c;
; 3898 :   else if(pb < pa) return (unsigned char)b;
; 3899 :   else return (unsigned char)a;
; 3900 : }
; 3901 : 
; 3902 : /*shared values used by multiple Adam7 related functions*/
; 3903 : 
; 3904 : static const unsigned ADAM7_IX[7] = { 0, 4, 0, 2, 0, 1, 0 }; /*x start values*/
; 3905 : static const unsigned ADAM7_IY[7] = { 0, 0, 4, 0, 2, 0, 1 }; /*y start values*/
; 3906 : static const unsigned ADAM7_DX[7] = { 8, 8, 4, 4, 2, 2, 1 }; /*x delta values*/
; 3907 : static const unsigned ADAM7_DY[7] = { 8, 8, 8, 4, 4, 2, 2 }; /*y delta values*/
; 3908 : 
; 3909 : /*
; 3910 : Outputs various dimensions and positions in the image related to the Adam7 reduced images.
; 3911 : passw: output containing the width of the 7 passes
; 3912 : passh: output containing the height of the 7 passes
; 3913 : filter_passstart: output containing the index of the start and end of each
; 3914 :  reduced image with filter bytes
; 3915 : padded_passstart output containing the index of the start and end of each
; 3916 :  reduced image when without filter bytes but with padded scanlines
; 3917 : passstart: output containing the index of the start and end of each reduced
; 3918 :  image without padding between scanlines, but still padding between the images
; 3919 : w, h: width and height of non-interlaced image
; 3920 : bpp: bits per pixel
; 3921 : "padded" is only relevant if bpp is less than 8 and a scanline or image does not
; 3922 :  end at a full byte
; 3923 : */
; 3924 : static void Adam7_getpassvalues(unsigned passw[7], unsigned passh[7], size_t filter_passstart[8],
; 3925 :                                 size_t padded_passstart[8], size_t passstart[8], unsigned w, unsigned h, unsigned bpp)
; 3926 : {
; 3927 :   /*the passstart values have 8 values: the 8th one indicates the byte after the end of the 7th (= last) pass*/
; 3928 :   unsigned i;
; 3929 : 
; 3930 :   /*calculate width and height in pixels of each pass*/
; 3931 :   for(i = 0; i < 7; i++)
; 3932 :   {
; 3933 :     passw[i] = (w + ADAM7_DX[i] - ADAM7_IX[i] - 1) / ADAM7_DX[i];
; 3934 :     passh[i] = (h + ADAM7_DY[i] - ADAM7_IY[i] - 1) / ADAM7_DY[i];
; 3935 :     if(passw[i] == 0) passh[i] = 0;
; 3936 :     if(passh[i] == 0) passw[i] = 0;
; 3937 :   }
; 3938 : 
; 3939 :   filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
; 3940 :   for(i = 0; i < 7; i++)
; 3941 :   {
; 3942 :     /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
; 3943 :     filter_passstart[i + 1] = filter_passstart[i]
; 3944 :                             + ((passw[i] && passh[i]) ? passh[i] * (1 + (passw[i] * bpp + 7) / 8) : 0);
; 3945 :     /*bits padded if needed to fill full byte at end of each scanline*/
; 3946 :     padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7) / 8);
; 3947 :     /*only padded at end of reduced image*/
; 3948 :     passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7) / 8;
; 3949 :   }
; 3950 : }
; 3951 : 
; 3952 : #ifdef LODEPNG_COMPILE_DECODER
; 3953 : 
; 3954 : /* ////////////////////////////////////////////////////////////////////////// */
; 3955 : /* / PNG Decoder                                                            / */
; 3956 : /* ////////////////////////////////////////////////////////////////////////// */
; 3957 : 
; 3958 : /*read the information from the header and store it in the LodePNGInfo. return value is error*/
; 3959 : unsigned lodepng_inspect(unsigned* w, unsigned* h, LodePNGState* state,
; 3960 :                          const unsigned char* in, size_t insize)
; 3961 : {
; 3962 :   LodePNGInfo* info = &state->info_png;
; 3963 :   if(insize == 0 || in == 0)
; 3964 :   {
; 3965 :     CERROR_RETURN_ERROR(state->error, 48); /*error: the given data is empty*/
; 3966 :   }
; 3967 :   if(insize < 29)
; 3968 :   {
; 3969 :     CERROR_RETURN_ERROR(state->error, 27); /*error: the data length is smaller than the length of a PNG header*/
; 3970 :   }
; 3971 : 
; 3972 :   /*when decoding a new PNG image, make sure all parameters created after previous decoding are reset*/
; 3973 :   lodepng_info_cleanup(info);
; 3974 :   lodepng_info_init(info);
; 3975 : 
; 3976 :   if(in[0] != 137 || in[1] != 80 || in[2] != 78 || in[3] != 71
; 3977 :      || in[4] != 13 || in[5] != 10 || in[6] != 26 || in[7] != 10)
; 3978 :   {
; 3979 :     CERROR_RETURN_ERROR(state->error, 28); /*error: the first 8 bytes are not the correct PNG signature*/
; 3980 :   }
; 3981 :   if(in[12] != 'I' || in[13] != 'H' || in[14] != 'D' || in[15] != 'R')
; 3982 :   {
; 3983 :     CERROR_RETURN_ERROR(state->error, 29); /*error: it doesn't start with a IHDR chunk!*/
; 3984 :   }
; 3985 : 
; 3986 :   /*read the values given in the header*/
; 3987 :   *w = lodepng_read32bitInt(&in[16]);
; 3988 :   *h = lodepng_read32bitInt(&in[20]);
; 3989 :   info->color.bitdepth = in[24];
; 3990 :   info->color.colortype = (LodePNGColorType)in[25];
; 3991 :   info->compression_method = in[26];
; 3992 :   info->filter_method = in[27];
; 3993 :   info->interlace_method = in[28];
; 3994 : 
; 3995 :   if(!state->decoder.ignore_crc)
; 3996 :   {
; 3997 :     unsigned CRC = lodepng_read32bitInt(&in[29]);
; 3998 :     unsigned checksum = lodepng_crc32(&in[12], 17);
; 3999 :     if(CRC != checksum)
; 4000 :     {
; 4001 :       CERROR_RETURN_ERROR(state->error, 57); /*invalid CRC*/
; 4002 :     }
; 4003 :   }
; 4004 : 
; 4005 :   /*error: only compression method 0 is allowed in the specification*/
; 4006 :   if(info->compression_method != 0) CERROR_RETURN_ERROR(state->error, 32);
; 4007 :   /*error: only filter method 0 is allowed in the specification*/
; 4008 :   if(info->filter_method != 0) CERROR_RETURN_ERROR(state->error, 33);
; 4009 :   /*error: only interlace methods 0 and 1 exist in the specification*/
; 4010 :   if(info->interlace_method > 1) CERROR_RETURN_ERROR(state->error, 34);
; 4011 : 
; 4012 :   state->error = checkColorValidity(info->color.colortype, info->color.bitdepth);
; 4013 :   return state->error;
; 4014 : }
; 4015 : 
; 4016 : static unsigned unfilterScanline(unsigned char* recon, const unsigned char* scanline, const unsigned char* precon,
; 4017 :                                  size_t bytewidth, unsigned char filterType, size_t length)
; 4018 : {
; 4019 :   /*
; 4020 :   For PNG filter method 0
; 4021 :   unfilter a PNG image scanline by scanline. when the pixels are smaller than 1 byte,
; 4022 :   the filter works byte per byte (bytewidth = 1)
; 4023 :   precon is the previous unfiltered scanline, recon the result, scanline the current one
; 4024 :   the incoming scanlines do NOT include the filtertype byte, that one is given in the parameter filterType instead
; 4025 :   recon and scanline MAY be the same memory address! precon must be disjoint.
; 4026 :   */
; 4027 : 
; 4028 :   size_t i;
; 4029 :   switch(filterType)
; 4030 :   {
; 4031 :     case 0:
; 4032 :       for(i = 0; i < length; i++) recon[i] = scanline[i];
; 4033 :       break;
; 4034 :     case 1:
; 4035 :       for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];
; 4036 :       for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth];
; 4037 :       break;
; 4038 :     case 2:
; 4039 :       if(precon)
; 4040 :       {
; 4041 :         for(i = 0; i < length; i++) recon[i] = scanline[i] + precon[i];
; 4042 :       }
; 4043 :       else
; 4044 :       {
; 4045 :         for(i = 0; i < length; i++) recon[i] = scanline[i];
; 4046 :       }
; 4047 :       break;
; 4048 :     case 3:
; 4049 :       if(precon)
; 4050 :       {
; 4051 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i] + precon[i] / 2;
; 4052 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + ((recon[i - bytewidth] + precon[i]) / 2);
; 4053 :       }
; 4054 :       else
; 4055 :       {
; 4056 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];
; 4057 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth] / 2;
; 4058 :       }
; 4059 :       break;
; 4060 :     case 4:
; 4061 :       if(precon)
; 4062 :       {
; 4063 :         for(i = 0; i < bytewidth; i++)
; 4064 :         {
; 4065 :           recon[i] = (scanline[i] + precon[i]); /*paethPredictor(0, precon[i], 0) is always precon[i]*/
; 4066 :         }
; 4067 :         for(i = bytewidth; i < length; i++)
; 4068 :         {
; 4069 :           recon[i] = (scanline[i] + paethPredictor(recon[i - bytewidth], precon[i], precon[i - bytewidth]));
; 4070 :         }
; 4071 :       }
; 4072 :       else
; 4073 :       {
; 4074 :         for(i = 0; i < bytewidth; i++)
; 4075 :         {
; 4076 :           recon[i] = scanline[i];
; 4077 :         }
; 4078 :         for(i = bytewidth; i < length; i++)
; 4079 :         {
; 4080 :           /*paethPredictor(recon[i - bytewidth], 0, 0) is always recon[i - bytewidth]*/
; 4081 :           recon[i] = (scanline[i] + recon[i - bytewidth]);
; 4082 :         }
; 4083 :       }
; 4084 :       break;
; 4085 :     default: return 36; /*error: unexisting filter type given*/
; 4086 :   }
; 4087 :   return 0;
; 4088 : }
; 4089 : 
; 4090 : static unsigned unfilter(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
; 4091 : {
; 4092 :   /*
; 4093 :   For PNG filter method 0
; 4094 :   this function unfilters a single image (e.g. without interlacing this is called once, with Adam7 seven times)
; 4095 :   out must have enough bytes allocated already, in must have the scanlines + 1 filtertype byte per scanline
; 4096 :   w and h are image dimensions or dimensions of reduced image, bpp is bits per pixel
; 4097 :   in and out are allowed to be the same memory address (but aren't the same size since in has the extra filter bytes)
; 4098 :   */
; 4099 : 
; 4100 :   unsigned y;
; 4101 :   unsigned char* prevline = 0;
; 4102 : 
; 4103 :   /*bytewidth is used for filtering, is 1 when bpp < 8, number of bytes per pixel otherwise*/
; 4104 :   size_t bytewidth = (bpp + 7) / 8;
; 4105 :   size_t linebytes = (w * bpp + 7) / 8;
; 4106 : 
; 4107 :   for(y = 0; y < h; y++)
; 4108 :   {
; 4109 :     size_t outindex = linebytes * y;
; 4110 :     size_t inindex = (1 + linebytes) * y; /*the extra filterbyte added to each row*/
; 4111 :     unsigned char filterType = in[inindex];
; 4112 : 
; 4113 :     CERROR_TRY_RETURN(unfilterScanline(&out[outindex], &in[inindex + 1], prevline, bytewidth, filterType, linebytes));
; 4114 : 
; 4115 :     prevline = &out[outindex];
; 4116 :   }
; 4117 : 
; 4118 :   return 0;
; 4119 : }
; 4120 : 
; 4121 : /*
; 4122 : in: Adam7 interlaced image, with no padding bits between scanlines, but between
; 4123 :  reduced images so that each reduced image starts at a byte.
; 4124 : out: the same pixels, but re-ordered so that they're now a non-interlaced image with size w*h
; 4125 : bpp: bits per pixel
; 4126 : out has the following size in bits: w * h * bpp.
; 4127 : in is possibly bigger due to padding bits between reduced images.
; 4128 : out must be big enough AND must be 0 everywhere if bpp < 8 in the current implementation
; 4129 : (because that's likely a little bit faster)
; 4130 : NOTE: comments about padding bits are only relevant if bpp < 8
; 4131 : */
; 4132 : static void Adam7_deinterlace(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
; 4133 : {
; 4134 :   unsigned passw[7], passh[7];
; 4135 :   size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4136 :   unsigned i;
; 4137 : 
; 4138 :   Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 4139 : 
; 4140 :   if(bpp >= 8)
; 4141 :   {
; 4142 :     for(i = 0; i < 7; i++)
; 4143 :     {
; 4144 :       unsigned x, y, b;
; 4145 :       size_t bytewidth = bpp / 8;
; 4146 :       for(y = 0; y < passh[i]; y++)
; 4147 :       for(x = 0; x < passw[i]; x++)
; 4148 :       {
; 4149 :         size_t pixelinstart = passstart[i] + (y * passw[i] + x) * bytewidth;
; 4150 :         size_t pixeloutstart = ((ADAM7_IY[i] + y * ADAM7_DY[i]) * w + ADAM7_IX[i] + x * ADAM7_DX[i]) * bytewidth;
; 4151 :         for(b = 0; b < bytewidth; b++)
; 4152 :         {
; 4153 :           out[pixeloutstart + b] = in[pixelinstart + b];
; 4154 :         }
; 4155 :       }
; 4156 :     }
; 4157 :   }
; 4158 :   else /*bpp < 8: Adam7 with pixels < 8 bit is a bit trickier: with bit pointers*/
; 4159 :   {
; 4160 :     for(i = 0; i < 7; i++)
; 4161 :     {
; 4162 :       unsigned x, y, b;
; 4163 :       unsigned ilinebits = bpp * passw[i];
; 4164 :       unsigned olinebits = bpp * w;
; 4165 :       size_t obp, ibp; /*bit pointers (for out and in buffer)*/
; 4166 :       for(y = 0; y < passh[i]; y++)
; 4167 :       for(x = 0; x < passw[i]; x++)
; 4168 :       {
; 4169 :         ibp = (8 * passstart[i]) + (y * ilinebits + x * bpp);
; 4170 :         obp = (ADAM7_IY[i] + y * ADAM7_DY[i]) * olinebits + (ADAM7_IX[i] + x * ADAM7_DX[i]) * bpp;
; 4171 :         for(b = 0; b < bpp; b++)
; 4172 :         {
; 4173 :           unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4174 :           /*note that this function assumes the out buffer is completely 0, use setBitOfReversedStream otherwise*/
; 4175 :           setBitOfReversedStream0(&obp, out, bit);
; 4176 :         }
; 4177 :       }
; 4178 :     }
; 4179 :   }
; 4180 : }
; 4181 : 
; 4182 : static void removePaddingBits(unsigned char* out, const unsigned char* in,
; 4183 :                               size_t olinebits, size_t ilinebits, unsigned h)
; 4184 : {
; 4185 :   /*
; 4186 :   After filtering there are still padding bits if scanlines have non multiple of 8 bit amounts. They need
; 4187 :   to be removed (except at last scanline of (Adam7-reduced) image) before working with pure image buffers
; 4188 :   for the Adam7 code, the color convert code and the output to the user.
; 4189 :   in and out are allowed to be the same buffer, in may also be higher but still overlapping; in must
; 4190 :   have >= ilinebits*h bits, out must have >= olinebits*h bits, olinebits must be <= ilinebits
; 4191 :   also used to move bits after earlier such operations happened, e.g. in a sequence of reduced images from Adam7
; 4192 :   only useful if (ilinebits - olinebits) is a value in the range 1..7
; 4193 :   */
; 4194 :   unsigned y;
; 4195 :   size_t diff = ilinebits - olinebits;
; 4196 :   size_t ibp = 0, obp = 0; /*input and output bit pointers*/
; 4197 :   for(y = 0; y < h; y++)
; 4198 :   {
; 4199 :     size_t x;
; 4200 :     for(x = 0; x < olinebits; x++)
; 4201 :     {
; 4202 :       unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4203 :       setBitOfReversedStream(&obp, out, bit);
; 4204 :     }
; 4205 :     ibp += diff;
; 4206 :   }
; 4207 : }
; 4208 : 
; 4209 : /*out must be buffer big enough to contain full image, and in must contain the full decompressed data from
; 4210 : the IDAT chunks (with filter index bytes and possible padding bits)
; 4211 : return value is error*/
; 4212 : static unsigned postProcessScanlines(unsigned char* out, unsigned char* in,
; 4213 :                                      unsigned w, unsigned h, const LodePNGInfo* info_png)
; 4214 : {
; 4215 :   /*
; 4216 :   This function converts the filtered-padded-interlaced data into pure 2D image buffer with the PNG's colortype.
; 4217 :   Steps:
; 4218 :   *) if no Adam7: 1) unfilter 2) remove padding bits (= posible extra bits per scanline if bpp < 8)
; 4219 :   *) if adam7: 1) 7x unfilter 2) 7x remove padding bits 3) Adam7_deinterlace
; 4220 :   NOTE: the in buffer will be overwritten with intermediate data!
; 4221 :   */
; 4222 :   unsigned bpp = lodepng_get_bpp(&info_png->color);
; 4223 :   if(bpp == 0) return 31; /*error: invalid colortype*/
; 4224 : 
; 4225 :   if(info_png->interlace_method == 0)
; 4226 :   {
; 4227 :     if(bpp < 8 && w * bpp != ((w * bpp + 7) / 8) * 8)
; 4228 :     {
; 4229 :       CERROR_TRY_RETURN(unfilter(in, in, w, h, bpp));
; 4230 :       removePaddingBits(out, in, w * bpp, ((w * bpp + 7) / 8) * 8, h);
; 4231 :     }
; 4232 :     /*we can immediatly filter into the out buffer, no other steps needed*/
; 4233 :     else CERROR_TRY_RETURN(unfilter(out, in, w, h, bpp));
; 4234 :   }
; 4235 :   else /*interlace_method is 1 (Adam7)*/
; 4236 :   {
; 4237 :     unsigned passw[7], passh[7]; size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4238 :     unsigned i;
; 4239 : 
; 4240 :     Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 4241 : 
; 4242 :     for(i = 0; i < 7; i++)
; 4243 :     {
; 4244 :       CERROR_TRY_RETURN(unfilter(&in[padded_passstart[i]], &in[filter_passstart[i]], passw[i], passh[i], bpp));
; 4245 :       /*TODO: possible efficiency improvement: if in this reduced image the bits fit nicely in 1 scanline,
; 4246 :       move bytes instead of bits or move not at all*/
; 4247 :       if(bpp < 8)
; 4248 :       {
; 4249 :         /*remove padding bits in scanlines; after this there still may be padding
; 4250 :         bits between the different reduced images: each reduced image still starts nicely at a byte*/
; 4251 :         removePaddingBits(&in[passstart[i]], &in[padded_passstart[i]], passw[i] * bpp,
; 4252 :                           ((passw[i] * bpp + 7) / 8) * 8, passh[i]);
; 4253 :       }
; 4254 :     }
; 4255 : 
; 4256 :     Adam7_deinterlace(out, in, w, h, bpp);
; 4257 :   }
; 4258 : 
; 4259 :   return 0;
; 4260 : }
; 4261 : 
; 4262 : static unsigned readChunk_PLTE(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
; 4263 : {
; 4264 :   unsigned pos = 0, i;
; 4265 :   if(color->palette) lodepng_free(color->palette);
; 4266 :   color->palettesize = chunkLength / 3;
; 4267 :   color->palette = (unsigned char*)lodepng_malloc(4 * color->palettesize);
; 4268 :   if(!color->palette && color->palettesize)
; 4269 :   {
; 4270 :     color->palettesize = 0;
; 4271 :     return 83; /*alloc fail*/
; 4272 :   }
; 4273 :   if(color->palettesize > 256) return 38; /*error: palette too big*/
; 4274 : 
; 4275 :   for(i = 0; i < color->palettesize; i++)
; 4276 :   {
; 4277 :     color->palette[4 * i + 0] = data[pos++]; /*R*/
; 4278 :     color->palette[4 * i + 1] = data[pos++]; /*G*/
; 4279 :     color->palette[4 * i + 2] = data[pos++]; /*B*/
; 4280 :     color->palette[4 * i + 3] = 255; /*alpha*/
; 4281 :   }
; 4282 : 
; 4283 :   return 0; /* OK */
; 4284 : }
; 4285 : 
; 4286 : static unsigned readChunk_tRNS(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
; 4287 : {
; 4288 :   unsigned i;
; 4289 :   if(color->colortype == LCT_PALETTE)
; 4290 :   {
; 4291 :     /*error: more alpha values given than there are palette entries*/
; 4292 :     if(chunkLength > color->palettesize) return 38;
; 4293 : 
; 4294 :     for(i = 0; i < chunkLength; i++) color->palette[4 * i + 3] = data[i];
; 4295 :   }
; 4296 :   else if(color->colortype == LCT_GREY)
; 4297 :   {
; 4298 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4299 :     if(chunkLength != 2) return 30;
; 4300 : 
; 4301 :     color->key_defined = 1;
; 4302 :     color->key_r = color->key_g = color->key_b = 256 * data[0] + data[1];
; 4303 :   }
; 4304 :   else if(color->colortype == LCT_RGB)
; 4305 :   {
; 4306 :     /*error: this chunk must be 6 bytes for RGB image*/
; 4307 :     if(chunkLength != 6) return 41;
; 4308 : 
; 4309 :     color->key_defined = 1;
; 4310 :     color->key_r = 256 * data[0] + data[1];
; 4311 :     color->key_g = 256 * data[2] + data[3];
; 4312 :     color->key_b = 256 * data[4] + data[5];
; 4313 :   }
; 4314 :   else return 42; /*error: tRNS chunk not allowed for other color models*/
; 4315 : 
; 4316 :   return 0; /* OK */
; 4317 : }
; 4318 : 
; 4319 : 
; 4320 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4321 : /*background color chunk (bKGD)*/
; 4322 : static unsigned readChunk_bKGD(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4323 : {
; 4324 :   if(info->color.colortype == LCT_PALETTE)
; 4325 :   {
; 4326 :     /*error: this chunk must be 1 byte for indexed color image*/
; 4327 :     if(chunkLength != 1) return 43;
; 4328 : 
; 4329 :     info->background_defined = 1;
; 4330 :     info->background_r = info->background_g = info->background_b = data[0];
; 4331 :   }
; 4332 :   else if(info->color.colortype == LCT_GREY || info->color.colortype == LCT_GREY_ALPHA)
; 4333 :   {
; 4334 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4335 :     if(chunkLength != 2) return 44;
; 4336 : 
; 4337 :     info->background_defined = 1;
; 4338 :     info->background_r = info->background_g = info->background_b
; 4339 :                                  = 256 * data[0] + data[1];
; 4340 :   }
; 4341 :   else if(info->color.colortype == LCT_RGB || info->color.colortype == LCT_RGBA)
; 4342 :   {
; 4343 :     /*error: this chunk must be 6 bytes for greyscale image*/
; 4344 :     if(chunkLength != 6) return 45;
; 4345 : 
; 4346 :     info->background_defined = 1;
; 4347 :     info->background_r = 256 * data[0] + data[1];
; 4348 :     info->background_g = 256 * data[2] + data[3];
; 4349 :     info->background_b = 256 * data[4] + data[5];
; 4350 :   }
; 4351 : 
; 4352 :   return 0; /* OK */
; 4353 : }
; 4354 : 
; 4355 : /*text chunk (tEXt)*/
; 4356 : static unsigned readChunk_tEXt(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4357 : {
; 4358 :   unsigned error = 0;
; 4359 :   char *key = 0, *str = 0;
; 4360 :   unsigned i;
; 4361 : 
; 4362 :   while(!error) /*not really a while loop, only used to break on error*/
; 4363 :   {
; 4364 :     unsigned length, string2_begin;
; 4365 : 
; 4366 :     length = 0;
; 4367 :     while(length < chunkLength && data[length] != 0) length++;
; 4368 :     /*even though it's not allowed by the standard, no error is thrown if
; 4369 :     there's no null termination char, if the text is empty*/
; 4370 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4371 : 
; 4372 :     key = (char*)lodepng_malloc(length + 1);
; 4373 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4374 : 
; 4375 :     key[length] = 0;
; 4376 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4377 : 
; 4378 :     string2_begin = length + 1; /*skip keyword null terminator*/
; 4379 : 
; 4380 :     length = chunkLength < string2_begin ? 0 : chunkLength - string2_begin;
; 4381 :     str = (char*)lodepng_malloc(length + 1);
; 4382 :     if(!str) CERROR_BREAK(error, 83); /*alloc fail*/
; 4383 : 
; 4384 :     str[length] = 0;
; 4385 :     for(i = 0; i < length; i++) str[i] = data[string2_begin + i];
; 4386 : 
; 4387 :     error = lodepng_add_text(info, key, str);
; 4388 : 
; 4389 :     break;
; 4390 :   }
; 4391 : 
; 4392 :   lodepng_free(key);
; 4393 :   lodepng_free(str);
; 4394 : 
; 4395 :   return error;
; 4396 : }
; 4397 : 
; 4398 : /*compressed text chunk (zTXt)*/
; 4399 : static unsigned readChunk_zTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
; 4400 :                                const unsigned char* data, size_t chunkLength)
; 4401 : {
; 4402 :   unsigned error = 0;
; 4403 :   unsigned i;
; 4404 : 
; 4405 :   unsigned length, string2_begin;
; 4406 :   char *key = 0;
; 4407 :   ucvector decoded;
; 4408 : 
; 4409 :   ucvector_init(&decoded);
; 4410 : 
; 4411 :   while(!error) /*not really a while loop, only used to break on error*/
; 4412 :   {
; 4413 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;
; 4414 :     if(length + 2 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
; 4415 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4416 : 
; 4417 :     key = (char*)lodepng_malloc(length + 1);
; 4418 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4419 : 
; 4420 :     key[length] = 0;
; 4421 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4422 : 
; 4423 :     if(data[length + 1] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
; 4424 : 
; 4425 :     string2_begin = length + 2;
; 4426 :     if(string2_begin > chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
; 4427 : 
; 4428 :     length = chunkLength - string2_begin;
; 4429 :     /*will fail if zlib error, e.g. if length is too small*/
; 4430 :     error = zlib_decompress(&decoded.data, &decoded.size,
; 4431 :                             (unsigned char*)(&data[string2_begin]),
; 4432 :                             length, zlibsettings);
; 4433 :     if(error) break;
; 4434 :     ucvector_push_back(&decoded, 0);
; 4435 : 
; 4436 :     error = lodepng_add_text(info, key, (char*)decoded.data);
; 4437 : 
; 4438 :     break;
; 4439 :   }
; 4440 : 
; 4441 :   lodepng_free(key);
; 4442 :   ucvector_cleanup(&decoded);
; 4443 : 
; 4444 :   return error;
; 4445 : }
; 4446 : 
; 4447 : /*international text chunk (iTXt)*/
; 4448 : static unsigned readChunk_iTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
; 4449 :                                const unsigned char* data, size_t chunkLength)
; 4450 : {
; 4451 :   unsigned error = 0;
; 4452 :   unsigned i;
; 4453 : 
; 4454 :   unsigned length, begin, compressed;
; 4455 :   char *key = 0, *langtag = 0, *transkey = 0;
; 4456 :   ucvector decoded;
; 4457 :   ucvector_init(&decoded);
; 4458 : 
; 4459 :   while(!error) /*not really a while loop, only used to break on error*/
; 4460 :   {
; 4461 :     /*Quick check if the chunk length isn't too small. Even without check
; 4462 :     it'd still fail with other error checks below if it's too short. This just gives a different error code.*/
; 4463 :     if(chunkLength < 5) CERROR_BREAK(error, 30); /*iTXt chunk too short*/
; 4464 : 
; 4465 :     /*read the key*/
; 4466 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;
; 4467 :     if(length + 3 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination char, corrupt?*/
; 4468 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4469 : 
; 4470 :     key = (char*)lodepng_malloc(length + 1);
; 4471 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4472 : 
; 4473 :     key[length] = 0;
; 4474 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4475 : 
; 4476 :     /*read the compression method*/
; 4477 :     compressed = data[length + 1];
; 4478 :     if(data[length + 2] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
; 4479 : 
; 4480 :     /*even though it's not allowed by the standard, no error is thrown if
; 4481 :     there's no null termination char, if the text is empty for the next 3 texts*/
; 4482 : 
; 4483 :     /*read the langtag*/
; 4484 :     begin = length + 3;
; 4485 :     length = 0;
; 4486 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;
; 4487 : 
; 4488 :     langtag = (char*)lodepng_malloc(length + 1);
; 4489 :     if(!langtag) CERROR_BREAK(error, 83); /*alloc fail*/
; 4490 : 
; 4491 :     langtag[length] = 0;
; 4492 :     for(i = 0; i < length; i++) langtag[i] = data[begin + i];
; 4493 : 
; 4494 :     /*read the transkey*/
; 4495 :     begin += length + 1;
; 4496 :     length = 0;
; 4497 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;
; 4498 : 
; 4499 :     transkey = (char*)lodepng_malloc(length + 1);
; 4500 :     if(!transkey) CERROR_BREAK(error, 83); /*alloc fail*/
; 4501 : 
; 4502 :     transkey[length] = 0;
; 4503 :     for(i = 0; i < length; i++) transkey[i] = data[begin + i];
; 4504 : 
; 4505 :     /*read the actual text*/
; 4506 :     begin += length + 1;
; 4507 : 
; 4508 :     length = chunkLength < begin ? 0 : chunkLength - begin;
; 4509 : 
; 4510 :     if(compressed)
; 4511 :     {
; 4512 :       /*will fail if zlib error, e.g. if length is too small*/
; 4513 :       error = zlib_decompress(&decoded.data, &decoded.size,
; 4514 :                               (unsigned char*)(&data[begin]),
; 4515 :                               length, zlibsettings);
; 4516 :       if(error) break;
; 4517 :       if(decoded.allocsize < decoded.size) decoded.allocsize = decoded.size;
; 4518 :       ucvector_push_back(&decoded, 0);
; 4519 :     }
; 4520 :     else
; 4521 :     {
; 4522 :       if(!ucvector_resize(&decoded, length + 1)) CERROR_BREAK(error, 83 /*alloc fail*/);
; 4523 : 
; 4524 :       decoded.data[length] = 0;
; 4525 :       for(i = 0; i < length; i++) decoded.data[i] = data[begin + i];
; 4526 :     }
; 4527 : 
; 4528 :     error = lodepng_add_itext(info, key, langtag, transkey, (char*)decoded.data);
; 4529 : 
; 4530 :     break;
; 4531 :   }
; 4532 : 
; 4533 :   lodepng_free(key);
; 4534 :   lodepng_free(langtag);
; 4535 :   lodepng_free(transkey);
; 4536 :   ucvector_cleanup(&decoded);
; 4537 : 
; 4538 :   return error;
; 4539 : }
; 4540 : 
; 4541 : static unsigned readChunk_tIME(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4542 : {
; 4543 :   if(chunkLength != 7) return 73; /*invalid tIME chunk size*/
; 4544 : 
; 4545 :   info->time_defined = 1;
; 4546 :   info->time.year = 256 * data[0] + data[+ 1];
; 4547 :   info->time.month = data[2];
; 4548 :   info->time.day = data[3];
; 4549 :   info->time.hour = data[4];
; 4550 :   info->time.minute = data[5];
; 4551 :   info->time.second = data[6];
; 4552 : 
; 4553 :   return 0; /* OK */
; 4554 : }
; 4555 : 
; 4556 : static unsigned readChunk_pHYs(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4557 : {
; 4558 :   if(chunkLength != 9) return 74; /*invalid pHYs chunk size*/
; 4559 : 
; 4560 :   info->phys_defined = 1;
; 4561 :   info->phys_x = 16777216 * data[0] + 65536 * data[1] + 256 * data[2] + data[3];
; 4562 :   info->phys_y = 16777216 * data[4] + 65536 * data[5] + 256 * data[6] + data[7];
; 4563 :   info->phys_unit = data[8];
; 4564 : 
; 4565 :   return 0; /* OK */
; 4566 : }
; 4567 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4568 : 
; 4569 : /*read a PNG, the result will be in the same color type as the PNG (hence "generic")*/
; 4570 : static void decodeGeneric(unsigned char** out, unsigned* w, unsigned* h,
; 4571 :                           LodePNGState* state,
; 4572 :                           const unsigned char* in, size_t insize)
; 4573 : {
; 4574 :   unsigned char IEND = 0;
; 4575 :   const unsigned char* chunk;
; 4576 :   size_t i;
; 4577 :   ucvector idat; /*the data from idat chunks*/
; 4578 : 
; 4579 :   /*for unknown chunk order*/
; 4580 :   unsigned unknown = 0;
; 4581 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4582 :   unsigned critical_pos = 1; /*1 = after IHDR, 2 = after PLTE, 3 = after IDAT*/
; 4583 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4584 : 
; 4585 :   /*provide some proper output values if error will happen*/
; 4586 :   *out = 0;
; 4587 : 
; 4588 :   state->error = lodepng_inspect(w, h, state, in, insize); /*reads header and resets other parameters in state->info_png*/
; 4589 :   if(state->error) return;
; 4590 : 
; 4591 :   ucvector_init(&idat);
; 4592 :   chunk = &in[33]; /*first byte of the first chunk after the header*/
; 4593 : 
; 4594 :   /*loop through the chunks, ignoring unknown chunks and stopping at IEND chunk.
; 4595 :   IDAT data is put at the start of the in buffer*/
; 4596 :   while(!IEND && !state->error)
; 4597 :   {
; 4598 :     unsigned chunkLength;
; 4599 :     const unsigned char* data; /*the data in the chunk*/
; 4600 : 
; 4601 :     /*error: size of the in buffer too small to contain next chunk*/
; 4602 :     if((size_t)((chunk - in) + 12) > insize || chunk < in) CERROR_BREAK(state->error, 30);
; 4603 : 
; 4604 :     /*length of the data of the chunk, excluding the length bytes, chunk type and CRC bytes*/
; 4605 :     chunkLength = lodepng_chunk_length(chunk);
; 4606 :     /*error: chunk length larger than the max PNG chunk size*/
; 4607 :     if(chunkLength > 2147483647) CERROR_BREAK(state->error, 63);
; 4608 : 
; 4609 :     if((size_t)((chunk - in) + chunkLength + 12) > insize || (chunk + chunkLength + 12) < in)
; 4610 :     {
; 4611 :       CERROR_BREAK(state->error, 64); /*error: size of the in buffer too small to contain next chunk*/
; 4612 :     }
; 4613 : 
; 4614 :     data = lodepng_chunk_data_const(chunk);
; 4615 : 
; 4616 :     /*IDAT chunk, containing compressed image data*/
; 4617 :     if(lodepng_chunk_type_equals(chunk, "IDAT"))
; 4618 :     {
; 4619 :       size_t oldsize = idat.size;
; 4620 :       if(!ucvector_resize(&idat, oldsize + chunkLength)) CERROR_BREAK(state->error, 83 /*alloc fail*/);
; 4621 :       for(i = 0; i < chunkLength; i++) idat.data[oldsize + i] = data[i];
; 4622 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4623 :       critical_pos = 3;
; 4624 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4625 :     }
; 4626 :     /*IEND chunk*/
; 4627 :     else if(lodepng_chunk_type_equals(chunk, "IEND"))
; 4628 :     {
; 4629 :       IEND = 1;
; 4630 :     }
; 4631 :     /*palette chunk (PLTE)*/
; 4632 :     else if(lodepng_chunk_type_equals(chunk, "PLTE"))
; 4633 :     {
; 4634 :       state->error = readChunk_PLTE(&state->info_png.color, data, chunkLength);
; 4635 :       if(state->error) break;
; 4636 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4637 :       critical_pos = 2;
; 4638 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4639 :     }
; 4640 :     /*palette transparency chunk (tRNS)*/
; 4641 :     else if(lodepng_chunk_type_equals(chunk, "tRNS"))
; 4642 :     {
; 4643 :       state->error = readChunk_tRNS(&state->info_png.color, data, chunkLength);
; 4644 :       if(state->error) break;
; 4645 :     }
; 4646 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4647 :     /*background color chunk (bKGD)*/
; 4648 :     else if(lodepng_chunk_type_equals(chunk, "bKGD"))
; 4649 :     {
; 4650 :       state->error = readChunk_bKGD(&state->info_png, data, chunkLength);
; 4651 :       if(state->error) break;
; 4652 :     }
; 4653 :     /*text chunk (tEXt)*/
; 4654 :     else if(lodepng_chunk_type_equals(chunk, "tEXt"))
; 4655 :     {
; 4656 :       if(state->decoder.read_text_chunks)
; 4657 :       {
; 4658 :         state->error = readChunk_tEXt(&state->info_png, data, chunkLength);
; 4659 :         if(state->error) break;
; 4660 :       }
; 4661 :     }
; 4662 :     /*compressed text chunk (zTXt)*/
; 4663 :     else if(lodepng_chunk_type_equals(chunk, "zTXt"))
; 4664 :     {
; 4665 :       if(state->decoder.read_text_chunks)
; 4666 :       {
; 4667 :         state->error = readChunk_zTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);
; 4668 :         if(state->error) break;
; 4669 :       }
; 4670 :     }
; 4671 :     /*international text chunk (iTXt)*/
; 4672 :     else if(lodepng_chunk_type_equals(chunk, "iTXt"))
; 4673 :     {
; 4674 :       if(state->decoder.read_text_chunks)
; 4675 :       {
; 4676 :         state->error = readChunk_iTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);
; 4677 :         if(state->error) break;
; 4678 :       }
; 4679 :     }
; 4680 :     else if(lodepng_chunk_type_equals(chunk, "tIME"))
; 4681 :     {
; 4682 :       state->error = readChunk_tIME(&state->info_png, data, chunkLength);
; 4683 :       if(state->error) break;
; 4684 :     }
; 4685 :     else if(lodepng_chunk_type_equals(chunk, "pHYs"))
; 4686 :     {
; 4687 :       state->error = readChunk_pHYs(&state->info_png, data, chunkLength);
; 4688 :       if(state->error) break;
; 4689 :     }
; 4690 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4691 :     else /*it's not an implemented chunk type, so ignore it: skip over the data*/
; 4692 :     {
; 4693 :       /*error: unknown critical chunk (5th bit of first byte of chunk type is 0)*/
; 4694 :       if(!lodepng_chunk_ancillary(chunk)) CERROR_BREAK(state->error, 69);
; 4695 : 
; 4696 :       unknown = 1;
; 4697 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4698 :       if(state->decoder.remember_unknown_chunks)
; 4699 :       {
; 4700 :         state->error = lodepng_chunk_append(&state->info_png.unknown_chunks_data[critical_pos - 1],
; 4701 :                                             &state->info_png.unknown_chunks_size[critical_pos - 1], chunk);
; 4702 :         if(state->error) break;
; 4703 :       }
; 4704 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4705 :     }
; 4706 : 
; 4707 :     if(!state->decoder.ignore_crc && !unknown) /*check CRC if wanted, only on known chunk types*/
; 4708 :     {
; 4709 :       if(lodepng_chunk_check_crc(chunk)) CERROR_BREAK(state->error, 57); /*invalid CRC*/
; 4710 :     }
; 4711 : 
; 4712 :     if(!IEND) chunk = lodepng_chunk_next_const(chunk);
; 4713 :   }
; 4714 : 
; 4715 :   if(!state->error)
; 4716 :   {
; 4717 :     ucvector scanlines;
; 4718 :     ucvector_init(&scanlines);
; 4719 : 
; 4720 :     /*maximum final image length is already reserved in the vector's length - this is not really necessary*/
; 4721 :     if(!ucvector_resize(&scanlines, lodepng_get_raw_size(*w, *h, &state->info_png.color) + *h))
; 4722 :     {
; 4723 :       state->error = 83; /*alloc fail*/
; 4724 :     }
; 4725 :     if(!state->error)
; 4726 :     {
; 4727 :       /*decompress with the Zlib decompressor*/
; 4728 :       state->error = zlib_decompress(&scanlines.data, &scanlines.size, idat.data,
; 4729 :                                      idat.size, &state->decoder.zlibsettings);
; 4730 :     }
; 4731 : 
; 4732 :     if(!state->error)
; 4733 :     {
; 4734 :       ucvector outv;
; 4735 :       ucvector_init(&outv);
; 4736 :       if(!ucvector_resizev(&outv,
; 4737 :           lodepng_get_raw_size(*w, *h, &state->info_png.color), 0)) state->error = 83; /*alloc fail*/
; 4738 :       if(!state->error) state->error = postProcessScanlines(outv.data, scanlines.data, *w, *h, &state->info_png);
; 4739 :       *out = outv.data;
; 4740 :     }
; 4741 :     ucvector_cleanup(&scanlines);
; 4742 :   }
; 4743 : 
; 4744 :   ucvector_cleanup(&idat);
; 4745 : }
; 4746 : 
; 4747 : unsigned lodepng_decode(unsigned char** out, unsigned* w, unsigned* h,
; 4748 :                         LodePNGState* state,
; 4749 :                         const unsigned char* in, size_t insize)
; 4750 : {
; 4751 :   *out = 0;
; 4752 :   decodeGeneric(out, w, h, state, in, insize);
; 4753 :   if(state->error) return state->error;
; 4754 :   if(!state->decoder.color_convert || lodepng_color_mode_equal(&state->info_raw, &state->info_png.color))
; 4755 :   {
; 4756 :     /*same color type, no copying or converting of data needed*/
; 4757 :     /*store the info_png color settings on the info_raw so that the info_raw still reflects what colortype
; 4758 :     the raw image has to the end user*/
; 4759 :     if(!state->decoder.color_convert)
; 4760 :     {
; 4761 :       state->error = lodepng_color_mode_copy(&state->info_raw, &state->info_png.color);
; 4762 :       if(state->error) return state->error;
; 4763 :     }
; 4764 :   }
; 4765 :   else
; 4766 :   {
; 4767 :     /*color conversion needed; sort of copy of the data*/
; 4768 :     unsigned char* data = *out;
; 4769 :     size_t outsize;
; 4770 : 
; 4771 :     /*TODO: check if this works according to the statement in the documentation: "The converter can convert
; 4772 :     from greyscale input color type, to 8-bit greyscale or greyscale with alpha"*/
; 4773 :     if(!(state->info_raw.colortype == LCT_RGB || state->info_raw.colortype == LCT_RGBA)
; 4774 :        && !(state->info_raw.bitdepth == 8))
; 4775 :     {
; 4776 :       return 56; /*unsupported color mode conversion*/
; 4777 :     }
; 4778 : 
; 4779 :     outsize = lodepng_get_raw_size(*w, *h, &state->info_raw);
; 4780 :     *out = (unsigned char*)lodepng_malloc(outsize);
; 4781 :     if(!(*out))
; 4782 :     {
; 4783 :       state->error = 83; /*alloc fail*/
; 4784 :     }
; 4785 :     else state->error = lodepng_convert(*out, data, &state->info_raw, &state->info_png.color, *w, *h, state->decoder.fix_png);
; 4786 :     lodepng_free(data);
; 4787 :   }
; 4788 :   return state->error;
; 4789 : }
; 4790 : 
; 4791 : unsigned lodepng_decode_memory(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in,
; 4792 :                                size_t insize, LodePNGColorType colortype, unsigned bitdepth)
; 4793 : {
; 4794 :   unsigned error;
; 4795 :   LodePNGState state;
; 4796 :   lodepng_state_init(&state);
; 4797 :   state.info_raw.colortype = colortype;
; 4798 :   state.info_raw.bitdepth = bitdepth;
; 4799 :   error = lodepng_decode(out, w, h, &state, in, insize);
; 4800 :   lodepng_state_cleanup(&state);
; 4801 :   return error;
; 4802 : }
; 4803 : 
; 4804 : unsigned lodepng_decode32(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4805 : {
; 4806 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGBA, 8);
; 4807 : }
; 4808 : 
; 4809 : unsigned lodepng_decode24(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4810 : {
; 4811 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGB, 8);
; 4812 : }
; 4813 : 
; 4814 : #ifdef LODEPNG_COMPILE_DISK
; 4815 : unsigned lodepng_decode_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename,
; 4816 :                              LodePNGColorType colortype, unsigned bitdepth)
; 4817 : {
; 4818 :   unsigned char* buffer;
; 4819 :   size_t buffersize;
; 4820 :   unsigned error;
; 4821 :   error = lodepng_load_file(&buffer, &buffersize, filename);
; 4822 :   if(!error) error = lodepng_decode_memory(out, w, h, buffer, buffersize, colortype, bitdepth);
; 4823 :   lodepng_free(buffer);
; 4824 :   return error;
; 4825 : }
; 4826 : 
; 4827 : unsigned lodepng_decode32_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4828 : {
; 4829 :   return lodepng_decode_file(out, w, h, filename, LCT_RGBA, 8);
; 4830 : }
; 4831 : 
; 4832 : unsigned lodepng_decode24_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4833 : {
; 4834 :   return lodepng_decode_file(out, w, h, filename, LCT_RGB, 8);
; 4835 : }
; 4836 : #endif /*LODEPNG_COMPILE_DISK*/
; 4837 : 
; 4838 : void lodepng_decoder_settings_init(LodePNGDecoderSettings* settings)
; 4839 : {
; 4840 :   settings->color_convert = 1;
; 4841 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4842 :   settings->read_text_chunks = 1;
; 4843 :   settings->remember_unknown_chunks = 0;
; 4844 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4845 :   settings->ignore_crc = 0;
; 4846 :   settings->fix_png = 0;
; 4847 :   lodepng_decompress_settings_init(&settings->zlibsettings);
; 4848 : }
; 4849 : 
; 4850 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4851 : 
; 4852 : #if defined(LODEPNG_COMPILE_DECODER) || defined(LODEPNG_COMPILE_ENCODER)
; 4853 : 
; 4854 : void lodepng_state_init(LodePNGState* state)
; 4855 : {
; 4856 : #ifdef LODEPNG_COMPILE_DECODER
; 4857 :   lodepng_decoder_settings_init(&state->decoder);
; 4858 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4859 : #ifdef LODEPNG_COMPILE_ENCODER
; 4860 :   lodepng_encoder_settings_init(&state->encoder);
; 4861 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 4862 :   lodepng_color_mode_init(&state->info_raw);
; 4863 :   lodepng_info_init(&state->info_png);
; 4864 :   state->error = 1;
; 4865 : }
; 4866 : 
; 4867 : void lodepng_state_cleanup(LodePNGState* state)
; 4868 : {
; 4869 :   lodepng_color_mode_cleanup(&state->info_raw);
; 4870 :   lodepng_info_cleanup(&state->info_png);

  0002d	e8 00 00 00 00	 call	 ?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z ; lodepng_info_cleanup
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.h

; 644  :   virtual ~LodePNGState(){}

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7LodePNGState@@6B@
  00038	5e		 pop	 esi
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6134 : }

  00039	c3		 ret	 0
??1State@lodepng@@UAE@XZ ENDP				; lodepng::State::~State
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z
_TEXT	SEGMENT
_buffer$ = -328						; size = 4
_h$GSCopy$1$ = -324					; size = 4
_w$GSCopy$1$ = -320					; size = 4
$T2 = -320						; size = 1
_state$3 = -316						; size = 300
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_h$ = 8							; size = 4
_in$ = 12						; size = 4
_insize$ = 16						; size = 4
_colortype$dead$ = 20					; size = 4
_bitdepth$dead$ = 24					; size = 4
?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z PROC ; lodepng::decode, COMDAT
; _out$ = ecx
; _w$ = edx

; 6146 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 95 c0 fe ff
	ff		 mov	 DWORD PTR _w$GSCopy$1$[ebp], edx
  00034	8b d9		 mov	 ebx, ecx
  00036	8b 45 0c	 mov	 eax, DWORD PTR _in$[ebp]
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _h$[ebp]

; 6147 :   unsigned char* buffer;
; 6148 :   unsigned error = lodepng_decode_memory(&buffer, &w, &h, in, insize, colortype, bitdepth);

  0003c	83 ec 08	 sub	 esp, 8
  0003f	89 8d bc fe ff
	ff		 mov	 DWORD PTR _h$GSCopy$1$[ebp], ecx
  00045	ff 75 10	 push	 DWORD PTR _insize$[ebp]
  00048	50		 push	 eax
  00049	51		 push	 ecx
  0004a	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00050	e8 00 00 00 00	 call	 ?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z ; lodepng_decode_memory

; 6149 :   if(buffer && !error)

  00055	8b bd b8 fe ff
	ff		 mov	 edi, DWORD PTR _buffer$[ebp]
  0005b	83 c4 14	 add	 esp, 20			; 00000014H
  0005e	8b f0		 mov	 esi, eax
  00060	85 ff		 test	 edi, edi
  00062	0f 84 b2 00 00
	00		 je	 $LN50@decode
  00068	85 f6		 test	 esi, esi
  0006a	0f 85 aa 00 00
	00		 jne	 $LN50@decode

; 4871 : }
; 4872 : 
; 4873 : void lodepng_state_copy(LodePNGState* dest, const LodePNGState* source)
; 4874 : {
; 4875 :   lodepng_state_cleanup(dest);
; 4876 :   *dest = *source;
; 4877 :   lodepng_color_mode_init(&dest->info_raw);
; 4878 :   lodepng_info_init(&dest->info_png);
; 4879 :   dest->error = lodepng_color_mode_copy(&dest->info_raw, &source->info_raw); if(dest->error) return;
; 4880 :   dest->error = lodepng_info_copy(&dest->info_png, &source->info_png); if(dest->error) return;
; 4881 : }
; 4882 : 
; 4883 : #endif /* defined(LODEPNG_COMPILE_DECODER) || defined(LODEPNG_COMPILE_ENCODER) */
; 4884 : 
; 4885 : #ifdef LODEPNG_COMPILE_ENCODER
; 4886 : 
; 4887 : /* ////////////////////////////////////////////////////////////////////////// */
; 4888 : /* / PNG Encoder                                                            / */
; 4889 : /* ////////////////////////////////////////////////////////////////////////// */
; 4890 : 
; 4891 : /*chunkName must be string of 4 characters*/
; 4892 : static unsigned addChunk(ucvector* out, const char* chunkName, const unsigned char* data, size_t length)
; 4893 : {
; 4894 :   CERROR_TRY_RETURN(lodepng_chunk_create(&out->data, &out->size, (unsigned)length, chunkName, data));
; 4895 :   out->allocsize = out->size; /*fix the allocsize again*/
; 4896 :   return 0;
; 4897 : }
; 4898 : 
; 4899 : static void writeSignature(ucvector* out)
; 4900 : {
; 4901 :   /*8 bytes PNG signature, aka the magic bytes*/
; 4902 :   ucvector_push_back(out, 137);
; 4903 :   ucvector_push_back(out, 80);
; 4904 :   ucvector_push_back(out, 78);
; 4905 :   ucvector_push_back(out, 71);
; 4906 :   ucvector_push_back(out, 13);
; 4907 :   ucvector_push_back(out, 10);
; 4908 :   ucvector_push_back(out, 26);
; 4909 :   ucvector_push_back(out, 10);
; 4910 : }
; 4911 : 
; 4912 : static unsigned addChunk_IHDR(ucvector* out, unsigned w, unsigned h,
; 4913 :                               LodePNGColorType colortype, unsigned bitdepth, unsigned interlace_method)
; 4914 : {
; 4915 :   unsigned error = 0;
; 4916 :   ucvector header;
; 4917 :   ucvector_init(&header);
; 4918 : 
; 4919 :   lodepng_add32bitInt(&header, w); /*width*/
; 4920 :   lodepng_add32bitInt(&header, h); /*height*/
; 4921 :   ucvector_push_back(&header, (unsigned char)bitdepth); /*bit depth*/
; 4922 :   ucvector_push_back(&header, (unsigned char)colortype); /*color type*/
; 4923 :   ucvector_push_back(&header, 0); /*compression method*/
; 4924 :   ucvector_push_back(&header, 0); /*filter method*/
; 4925 :   ucvector_push_back(&header, interlace_method); /*interlace method*/
; 4926 : 
; 4927 :   error = addChunk(out, "IHDR", header.data, header.size);
; 4928 :   ucvector_cleanup(&header);
; 4929 : 
; 4930 :   return error;
; 4931 : }
; 4932 : 
; 4933 : static unsigned addChunk_PLTE(ucvector* out, const LodePNGColorMode* info)
; 4934 : {
; 4935 :   unsigned error = 0;
; 4936 :   size_t i;
; 4937 :   ucvector PLTE;
; 4938 :   ucvector_init(&PLTE);
; 4939 :   for(i = 0; i < info->palettesize * 4; i++)
; 4940 :   {
; 4941 :     /*add all channels except alpha channel*/
; 4942 :     if(i % 4 != 3) ucvector_push_back(&PLTE, info->palette[i]);
; 4943 :   }
; 4944 :   error = addChunk(out, "PLTE", PLTE.data, PLTE.size);
; 4945 :   ucvector_cleanup(&PLTE);
; 4946 : 
; 4947 :   return error;
; 4948 : }
; 4949 : 
; 4950 : static unsigned addChunk_tRNS(ucvector* out, const LodePNGColorMode* info)
; 4951 : {
; 4952 :   unsigned error = 0;
; 4953 :   size_t i;
; 4954 :   ucvector tRNS;
; 4955 :   ucvector_init(&tRNS);
; 4956 :   if(info->colortype == LCT_PALETTE)
; 4957 :   {
; 4958 :     size_t amount = info->palettesize;
; 4959 :     /*the tail of palette values that all have 255 as alpha, does not have to be encoded*/
; 4960 :     for(i = info->palettesize; i > 0; i--)
; 4961 :     {
; 4962 :       if(info->palette[4 * (i - 1) + 3] == 255) amount--;
; 4963 :       else break;
; 4964 :     }
; 4965 :     /*add only alpha channel*/
; 4966 :     for(i = 0; i < amount; i++) ucvector_push_back(&tRNS, info->palette[4 * i + 3]);
; 4967 :   }
; 4968 :   else if(info->colortype == LCT_GREY)
; 4969 :   {
; 4970 :     if(info->key_defined)
; 4971 :     {
; 4972 :       ucvector_push_back(&tRNS, (unsigned char)(info->key_r / 256));
; 4973 :       ucvector_push_back(&tRNS, (unsigned char)(info->key_r % 256));
; 4974 :     }
; 4975 :   }
; 4976 :   else if(info->colortype == LCT_RGB)
; 4977 :   {
; 4978 :     if(info->key_defined)
; 4979 :     {
; 4980 :       ucvector_push_back(&tRNS, (unsigned char)(info->key_r / 256));
; 4981 :       ucvector_push_back(&tRNS, (unsigned char)(info->key_r % 256));
; 4982 :       ucvector_push_back(&tRNS, (unsigned char)(info->key_g / 256));
; 4983 :       ucvector_push_back(&tRNS, (unsigned char)(info->key_g % 256));
; 4984 :       ucvector_push_back(&tRNS, (unsigned char)(info->key_b / 256));
; 4985 :       ucvector_push_back(&tRNS, (unsigned char)(info->key_b % 256));
; 4986 :     }
; 4987 :   }
; 4988 : 
; 4989 :   error = addChunk(out, "tRNS", tRNS.data, tRNS.size);
; 4990 :   ucvector_cleanup(&tRNS);
; 4991 : 
; 4992 :   return error;
; 4993 : }
; 4994 : 
; 4995 : static unsigned addChunk_IDAT(ucvector* out, const unsigned char* data, size_t datasize,
; 4996 :                               LodePNGCompressSettings* zlibsettings)
; 4997 : {
; 4998 :   ucvector zlibdata;
; 4999 :   unsigned error = 0;
; 5000 : 
; 5001 :   /*compress with the Zlib compressor*/
; 5002 :   ucvector_init(&zlibdata);
; 5003 :   error = zlib_compress(&zlibdata.data, &zlibdata.size, data, datasize, zlibsettings);
; 5004 :   if(!error) error = addChunk(out, "IDAT", zlibdata.data, zlibdata.size);
; 5005 :   ucvector_cleanup(&zlibdata);
; 5006 : 
; 5007 :   return error;
; 5008 : }
; 5009 : 
; 5010 : static unsigned addChunk_IEND(ucvector* out)
; 5011 : {
; 5012 :   unsigned error = 0;
; 5013 :   error = addChunk(out, "IEND", 0, 0);
; 5014 :   return error;
; 5015 : }
; 5016 : 
; 5017 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 5018 : 
; 5019 : static unsigned addChunk_tEXt(ucvector* out, const char* keyword, const char* textstring)
; 5020 : {
; 5021 :   unsigned error = 0;
; 5022 :   size_t i;
; 5023 :   ucvector text;
; 5024 :   ucvector_init(&text);
; 5025 :   for(i = 0; keyword[i] != 0; i++) ucvector_push_back(&text, (unsigned char)keyword[i]);
; 5026 :   if(i < 1 || i > 79) return 89; /*error: invalid keyword size*/
; 5027 :   ucvector_push_back(&text, 0); /*0 termination char*/
; 5028 :   for(i = 0; textstring[i] != 0; i++) ucvector_push_back(&text, (unsigned char)textstring[i]);
; 5029 :   error = addChunk(out, "tEXt", text.data, text.size);
; 5030 :   ucvector_cleanup(&text);
; 5031 : 
; 5032 :   return error;
; 5033 : }
; 5034 : 
; 5035 : static unsigned addChunk_zTXt(ucvector* out, const char* keyword, const char* textstring,
; 5036 :                               LodePNGCompressSettings* zlibsettings)
; 5037 : {
; 5038 :   unsigned error = 0;
; 5039 :   ucvector data, compressed;
; 5040 :   size_t i, textsize = strlen(textstring);
; 5041 : 
; 5042 :   ucvector_init(&data);
; 5043 :   ucvector_init(&compressed);
; 5044 :   for(i = 0; keyword[i] != 0; i++) ucvector_push_back(&data, (unsigned char)keyword[i]);
; 5045 :   if(i < 1 || i > 79) return 89; /*error: invalid keyword size*/
; 5046 :   ucvector_push_back(&data, 0); /*0 termination char*/
; 5047 :   ucvector_push_back(&data, 0); /*compression method: 0*/
; 5048 : 
; 5049 :   error = zlib_compress(&compressed.data, &compressed.size,
; 5050 :                         (unsigned char*)textstring, textsize, zlibsettings);
; 5051 :   if(!error)
; 5052 :   {
; 5053 :     for(i = 0; i < compressed.size; i++) ucvector_push_back(&data, compressed.data[i]);
; 5054 :     error = addChunk(out, "zTXt", data.data, data.size);
; 5055 :   }
; 5056 : 
; 5057 :   ucvector_cleanup(&compressed);
; 5058 :   ucvector_cleanup(&data);
; 5059 :   return error;
; 5060 : }
; 5061 : 
; 5062 : static unsigned addChunk_iTXt(ucvector* out, unsigned compressed, const char* keyword, const char* langtag,
; 5063 :                               const char* transkey, const char* textstring, LodePNGCompressSettings* zlibsettings)
; 5064 : {
; 5065 :   unsigned error = 0;
; 5066 :   ucvector data;
; 5067 :   size_t i, textsize = strlen(textstring);
; 5068 : 
; 5069 :   ucvector_init(&data);
; 5070 : 
; 5071 :   for(i = 0; keyword[i] != 0; i++) ucvector_push_back(&data, (unsigned char)keyword[i]);
; 5072 :   if(i < 1 || i > 79) return 89; /*error: invalid keyword size*/
; 5073 :   ucvector_push_back(&data, 0); /*null termination char*/
; 5074 :   ucvector_push_back(&data, compressed ? 1 : 0); /*compression flag*/
; 5075 :   ucvector_push_back(&data, 0); /*compression method*/
; 5076 :   for(i = 0; langtag[i] != 0; i++) ucvector_push_back(&data, (unsigned char)langtag[i]);
; 5077 :   ucvector_push_back(&data, 0); /*null termination char*/
; 5078 :   for(i = 0; transkey[i] != 0; i++) ucvector_push_back(&data, (unsigned char)transkey[i]);
; 5079 :   ucvector_push_back(&data, 0); /*null termination char*/
; 5080 : 
; 5081 :   if(compressed)
; 5082 :   {
; 5083 :     ucvector compressed_data;
; 5084 :     ucvector_init(&compressed_data);
; 5085 :     error = zlib_compress(&compressed_data.data, &compressed_data.size,
; 5086 :                           (unsigned char*)textstring, textsize, zlibsettings);
; 5087 :     if(!error)
; 5088 :     {
; 5089 :       for(i = 0; i < compressed_data.size; i++) ucvector_push_back(&data, compressed_data.data[i]);
; 5090 :     }
; 5091 :     ucvector_cleanup(&compressed_data);
; 5092 :   }
; 5093 :   else /*not compressed*/
; 5094 :   {
; 5095 :     for(i = 0; textstring[i] != 0; i++) ucvector_push_back(&data, (unsigned char)textstring[i]);
; 5096 :   }
; 5097 : 
; 5098 :   if(!error) error = addChunk(out, "iTXt", data.data, data.size);
; 5099 :   ucvector_cleanup(&data);
; 5100 :   return error;
; 5101 : }
; 5102 : 
; 5103 : static unsigned addChunk_bKGD(ucvector* out, const LodePNGInfo* info)
; 5104 : {
; 5105 :   unsigned error = 0;
; 5106 :   ucvector bKGD;
; 5107 :   ucvector_init(&bKGD);
; 5108 :   if(info->color.colortype == LCT_GREY || info->color.colortype == LCT_GREY_ALPHA)
; 5109 :   {
; 5110 :     ucvector_push_back(&bKGD, (unsigned char)(info->background_r / 256));
; 5111 :     ucvector_push_back(&bKGD, (unsigned char)(info->background_r % 256));
; 5112 :   }
; 5113 :   else if(info->color.colortype == LCT_RGB || info->color.colortype == LCT_RGBA)
; 5114 :   {
; 5115 :     ucvector_push_back(&bKGD, (unsigned char)(info->background_r / 256));
; 5116 :     ucvector_push_back(&bKGD, (unsigned char)(info->background_r % 256));
; 5117 :     ucvector_push_back(&bKGD, (unsigned char)(info->background_g / 256));
; 5118 :     ucvector_push_back(&bKGD, (unsigned char)(info->background_g % 256));
; 5119 :     ucvector_push_back(&bKGD, (unsigned char)(info->background_b / 256));
; 5120 :     ucvector_push_back(&bKGD, (unsigned char)(info->background_b % 256));
; 5121 :   }
; 5122 :   else if(info->color.colortype == LCT_PALETTE)
; 5123 :   {
; 5124 :     ucvector_push_back(&bKGD, (unsigned char)(info->background_r % 256)); /*palette index*/
; 5125 :   }
; 5126 : 
; 5127 :   error = addChunk(out, "bKGD", bKGD.data, bKGD.size);
; 5128 :   ucvector_cleanup(&bKGD);
; 5129 : 
; 5130 :   return error;
; 5131 : }
; 5132 : 
; 5133 : static unsigned addChunk_tIME(ucvector* out, const LodePNGTime* time)
; 5134 : {
; 5135 :   unsigned error = 0;
; 5136 :   unsigned char* data = (unsigned char*)lodepng_malloc(7);
; 5137 :   if(!data) return 83; /*alloc fail*/
; 5138 :   data[0] = (unsigned char)(time->year / 256);
; 5139 :   data[1] = (unsigned char)(time->year % 256);
; 5140 :   data[2] = time->month;
; 5141 :   data[3] = time->day;
; 5142 :   data[4] = time->hour;
; 5143 :   data[5] = time->minute;
; 5144 :   data[6] = time->second;
; 5145 :   error = addChunk(out, "tIME", data, 7);
; 5146 :   lodepng_free(data);
; 5147 :   return error;
; 5148 : }
; 5149 : 
; 5150 : static unsigned addChunk_pHYs(ucvector* out, const LodePNGInfo* info)
; 5151 : {
; 5152 :   unsigned error = 0;
; 5153 :   ucvector data;
; 5154 :   ucvector_init(&data);
; 5155 : 
; 5156 :   lodepng_add32bitInt(&data, info->phys_x);
; 5157 :   lodepng_add32bitInt(&data, info->phys_y);
; 5158 :   ucvector_push_back(&data, info->phys_unit);
; 5159 : 
; 5160 :   error = addChunk(out, "pHYs", data.data, data.size);
; 5161 :   ucvector_cleanup(&data);
; 5162 : 
; 5163 :   return error;
; 5164 : }
; 5165 : 
; 5166 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 5167 : 
; 5168 : static void filterScanline(unsigned char* out, const unsigned char* scanline, const unsigned char* prevline,
; 5169 :                            size_t length, size_t bytewidth, unsigned char filterType)
; 5170 : {
; 5171 :   size_t i;
; 5172 :   switch(filterType)
; 5173 :   {
; 5174 :     case 0: /*None*/
; 5175 :       for(i = 0; i < length; i++) out[i] = scanline[i];
; 5176 :       break;
; 5177 :     case 1: /*Sub*/
; 5178 :       if(prevline)
; 5179 :       {
; 5180 :         for(i = 0; i < bytewidth; i++) out[i] = scanline[i];
; 5181 :         for(i = bytewidth; i < length; i++) out[i] = scanline[i] - scanline[i - bytewidth];
; 5182 :       }
; 5183 :       else
; 5184 :       {
; 5185 :         for(i = 0; i < bytewidth; i++) out[i] = scanline[i];
; 5186 :         for(i = bytewidth; i < length; i++) out[i] = scanline[i] - scanline[i - bytewidth];
; 5187 :       }
; 5188 :       break;
; 5189 :     case 2: /*Up*/
; 5190 :       if(prevline)
; 5191 :       {
; 5192 :         for(i = 0; i < length; i++) out[i] = scanline[i] - prevline[i];
; 5193 :       }
; 5194 :       else
; 5195 :       {
; 5196 :         for(i = 0; i < length; i++) out[i] = scanline[i];
; 5197 :       }
; 5198 :       break;
; 5199 :     case 3: /*Average*/
; 5200 :       if(prevline)
; 5201 :       {
; 5202 :         for(i = 0; i < bytewidth; i++) out[i] = scanline[i] - prevline[i] / 2;
; 5203 :         for(i = bytewidth; i < length; i++) out[i] = scanline[i] - ((scanline[i - bytewidth] + prevline[i]) / 2);
; 5204 :       }
; 5205 :       else
; 5206 :       {
; 5207 :         for(i = 0; i < bytewidth; i++) out[i] = scanline[i];
; 5208 :         for(i = bytewidth; i < length; i++) out[i] = scanline[i] - scanline[i - bytewidth] / 2;
; 5209 :       }
; 5210 :       break;
; 5211 :     case 4: /*Paeth*/
; 5212 :       if(prevline)
; 5213 :       {
; 5214 :         /*paethPredictor(0, prevline[i], 0) is always prevline[i]*/
; 5215 :         for(i = 0; i < bytewidth; i++) out[i] = (scanline[i] - prevline[i]);
; 5216 :         for(i = bytewidth; i < length; i++)
; 5217 :         {
; 5218 :           out[i] = (scanline[i] - paethPredictor(scanline[i - bytewidth], prevline[i], prevline[i - bytewidth]));
; 5219 :         }
; 5220 :       }
; 5221 :       else
; 5222 :       {
; 5223 :         for(i = 0; i < bytewidth; i++) out[i] = scanline[i];
; 5224 :         /*paethPredictor(scanline[i - bytewidth], 0, 0) is always scanline[i - bytewidth]*/
; 5225 :         for(i = bytewidth; i < length; i++) out[i] = (scanline[i] - scanline[i - bytewidth]);
; 5226 :       }
; 5227 :       break;
; 5228 :     default: return; /*unexisting filter type given*/
; 5229 :   }
; 5230 : }
; 5231 : 
; 5232 : /* log2 approximation. A slight bit faster than std::log. */
; 5233 : static float flog2(float f)
; 5234 : {
; 5235 :   float result = 0;
; 5236 :   while(f > 32) { result += 4; f /= 16; }
; 5237 :   while(f > 2) { result++; f /= 2; }
; 5238 :   return result + 1.442695f * (f * f * f / 3 - 3 * f * f / 2 + 3 * f - 1.83333f);
; 5239 : }
; 5240 : 
; 5241 : static unsigned filter(unsigned char* out, const unsigned char* in, unsigned w, unsigned h,
; 5242 :                        const LodePNGColorMode* info, const LodePNGEncoderSettings* settings)
; 5243 : {
; 5244 :   /*
; 5245 :   For PNG filter method 0
; 5246 :   out must be a buffer with as size: h + (w * h * bpp + 7) / 8, because there are
; 5247 :   the scanlines with 1 extra byte per scanline
; 5248 :   */
; 5249 : 
; 5250 :   unsigned bpp = lodepng_get_bpp(info);
; 5251 :   /*the width of a scanline in bytes, not including the filter type*/
; 5252 :   size_t linebytes = (w * bpp + 7) / 8;
; 5253 :   /*bytewidth is used for filtering, is 1 when bpp < 8, number of bytes per pixel otherwise*/
; 5254 :   size_t bytewidth = (bpp + 7) / 8;
; 5255 :   const unsigned char* prevline = 0;
; 5256 :   unsigned x, y;
; 5257 :   unsigned error = 0;
; 5258 :   LodePNGFilterStrategy strategy = settings->filter_strategy;
; 5259 : 
; 5260 :   /*
; 5261 :   There is a heuristic called the minimum sum of absolute differences heuristic, suggested by the PNG standard:
; 5262 :    *  If the image type is Palette, or the bit depth is smaller than 8, then do not filter the image (i.e.
; 5263 :       use fixed filtering, with the filter None).
; 5264 :    * (The other case) If the image type is Grayscale or RGB (with or without Alpha), and the bit depth is
; 5265 :      not smaller than 8, then use adaptive filtering heuristic as follows: independently for each row, apply
; 5266 :      all five filters and select the filter that produces the smallest sum of absolute values per row.
; 5267 :   This heuristic is used if filter strategy is LFS_MINSUM and filter_palette_zero is true.
; 5268 : 
; 5269 :   If filter_palette_zero is true and filter_strategy is not LFS_MINSUM, the above heuristic is followed,
; 5270 :   but for "the other case", whatever strategy filter_strategy is set to instead of the minimum sum
; 5271 :   heuristic is used.
; 5272 :   */
; 5273 :   if(settings->filter_palette_zero &&
; 5274 :      (info->colortype == LCT_PALETTE || info->bitdepth < 8)) strategy = LFS_ZERO;
; 5275 : 
; 5276 :   if(bpp == 0) return 31; /*error: invalid color type*/
; 5277 : 
; 5278 :   if(strategy == LFS_ZERO)
; 5279 :   {
; 5280 :     for(y = 0; y < h; y++)
; 5281 :     {
; 5282 :       size_t outindex = (1 + linebytes) * y; /*the extra filterbyte added to each row*/
; 5283 :       size_t inindex = linebytes * y;
; 5284 :       out[outindex] = 0; /*filter type byte*/
; 5285 :       filterScanline(&out[outindex + 1], &in[inindex], prevline, linebytes, bytewidth, 0);
; 5286 :       prevline = &in[inindex];
; 5287 :     }
; 5288 :   }
; 5289 :   else if(strategy == LFS_MINSUM)
; 5290 :   {
; 5291 :     /*adaptive filtering*/
; 5292 :     size_t sum[5];
; 5293 :     ucvector attempt[5]; /*five filtering attempts, one for each filter type*/
; 5294 :     size_t smallest = 0;
; 5295 :     unsigned type, bestType = 0;
; 5296 : 
; 5297 :     for(type = 0; type < 5; type++)
; 5298 :     {
; 5299 :       ucvector_init(&attempt[type]);
; 5300 :       if(!ucvector_resize(&attempt[type], linebytes)) return 83; /*alloc fail*/
; 5301 :     }
; 5302 : 
; 5303 :     if(!error)
; 5304 :     {
; 5305 :       for(y = 0; y < h; y++)
; 5306 :       {
; 5307 :         /*try the 5 filter types*/
; 5308 :         for(type = 0; type < 5; type++)
; 5309 :         {
; 5310 :           filterScanline(attempt[type].data, &in[y * linebytes], prevline, linebytes, bytewidth, type);
; 5311 : 
; 5312 :           /*calculate the sum of the result*/
; 5313 :           sum[type] = 0;
; 5314 :           if(type == 0)
; 5315 :           {
; 5316 :             for(x = 0; x < linebytes; x++) sum[type] += (unsigned char)(attempt[type].data[x]);
; 5317 :           }
; 5318 :           else
; 5319 :           {
; 5320 :             for(x = 0; x < linebytes; x++)
; 5321 :             {
; 5322 :               /*For differences, each byte should be treated as signed, values above 127 are negative
; 5323 :               (converted to signed char). Filtertype 0 isn't a difference though, so use unsigned there.
; 5324 :               This means filtertype 0 is almost never chosen, but that is justified.*/
; 5325 :               signed char s = (signed char)(attempt[type].data[x]);
; 5326 :               sum[type] += s < 0 ? -s : s;
; 5327 :             }
; 5328 :           }
; 5329 : 
; 5330 :           /*check if this is smallest sum (or if type == 0 it's the first case so always store the values)*/
; 5331 :           if(type == 0 || sum[type] < smallest)
; 5332 :           {
; 5333 :             bestType = type;
; 5334 :             smallest = sum[type];
; 5335 :           }
; 5336 :         }
; 5337 : 
; 5338 :         prevline = &in[y * linebytes];
; 5339 : 
; 5340 :         /*now fill the out values*/
; 5341 :         out[y * (linebytes + 1)] = bestType; /*the first byte of a scanline will be the filter type*/
; 5342 :         for(x = 0; x < linebytes; x++) out[y * (linebytes + 1) + 1 + x] = attempt[bestType].data[x];
; 5343 :       }
; 5344 :     }
; 5345 : 
; 5346 :     for(type = 0; type < 5; type++) ucvector_cleanup(&attempt[type]);
; 5347 :   }
; 5348 :   else if(strategy == LFS_ENTROPY)
; 5349 :   {
; 5350 :     float sum[5];
; 5351 :     ucvector attempt[5]; /*five filtering attempts, one for each filter type*/
; 5352 :     float smallest = 0;
; 5353 :     unsigned type, bestType = 0;
; 5354 :     unsigned count[256];
; 5355 : 
; 5356 :     for(type = 0; type < 5; type++)
; 5357 :     {
; 5358 :       ucvector_init(&attempt[type]);
; 5359 :       if(!ucvector_resize(&attempt[type], linebytes)) return 83; /*alloc fail*/
; 5360 :     }
; 5361 : 
; 5362 :     for(y = 0; y < h; y++)
; 5363 :     {
; 5364 :       /*try the 5 filter types*/
; 5365 :       for(type = 0; type < 5; type++)
; 5366 :       {
; 5367 :         filterScanline(attempt[type].data, &in[y * linebytes], prevline, linebytes, bytewidth, type);
; 5368 :         for(x = 0; x < 256; x++) count[x] = 0;
; 5369 :         for(x = 0; x < linebytes; x++) count[attempt[type].data[x]]++;
; 5370 :         count[type]++; /*the filter type itself is part of the scanline*/
; 5371 :         sum[type] = 0;
; 5372 :         for(x = 0; x < 256; x++)
; 5373 :         {
; 5374 :           float p = count[x] / (float)(linebytes + 1);
; 5375 :           sum[type] += count[x] == 0 ? 0 : flog2(1 / p) * p;
; 5376 :         }
; 5377 :         /*check if this is smallest sum (or if type == 0 it's the first case so always store the values)*/
; 5378 :         if(type == 0 || sum[type] < smallest)
; 5379 :         {
; 5380 :           bestType = type;
; 5381 :           smallest = sum[type];
; 5382 :         }
; 5383 :       }
; 5384 : 
; 5385 :       prevline = &in[y * linebytes];
; 5386 : 
; 5387 :       /*now fill the out values*/
; 5388 :       out[y * (linebytes + 1)] = bestType; /*the first byte of a scanline will be the filter type*/
; 5389 :       for(x = 0; x < linebytes; x++) out[y * (linebytes + 1) + 1 + x] = attempt[bestType].data[x];
; 5390 :     }
; 5391 : 
; 5392 :     for(type = 0; type < 5; type++) ucvector_cleanup(&attempt[type]);
; 5393 :   }
; 5394 :   else if(strategy == LFS_PREDEFINED)
; 5395 :   {
; 5396 :     for(y = 0; y < h; y++)
; 5397 :     {
; 5398 :       size_t outindex = (1 + linebytes) * y; /*the extra filterbyte added to each row*/
; 5399 :       size_t inindex = linebytes * y;
; 5400 :       unsigned type = settings->predefined_filters[y];
; 5401 :       out[outindex] = type; /*filter type byte*/
; 5402 :       filterScanline(&out[outindex + 1], &in[inindex], prevline, linebytes, bytewidth, type);
; 5403 :       prevline = &in[inindex];
; 5404 :     }
; 5405 :   }
; 5406 :   else if(strategy == LFS_BRUTE_FORCE)
; 5407 :   {
; 5408 :     /*brute force filter chooser.
; 5409 :     deflate the scanline after every filter attempt to see which one deflates best.
; 5410 :     This is very slow and gives only slightly smaller, sometimes even larger, result*/
; 5411 :     size_t size[5];
; 5412 :     ucvector attempt[5]; /*five filtering attempts, one for each filter type*/
; 5413 :     size_t smallest = 0;
; 5414 :     unsigned type = 0, bestType = 0;
; 5415 :     unsigned char* dummy;
; 5416 :     LodePNGCompressSettings zlibsettings = settings->zlibsettings;
; 5417 :     /*use fixed tree on the attempts so that the tree is not adapted to the filtertype on purpose,
; 5418 :     to simulate the true case where the tree is the same for the whole image. Sometimes it gives
; 5419 :     better result with dynamic tree anyway. Using the fixed tree sometimes gives worse, but in rare
; 5420 :     cases better compression. It does make this a bit less slow, so it's worth doing this.*/
; 5421 :     zlibsettings.btype = 1;
; 5422 :     /*a custom encoder likely doesn't read the btype setting and is optimized for complete PNG
; 5423 :     images only, so disable it*/
; 5424 :     zlibsettings.custom_zlib = 0;
; 5425 :     zlibsettings.custom_deflate = 0;
; 5426 :     for(type = 0; type < 5; type++)
; 5427 :     {
; 5428 :       ucvector_init(&attempt[type]);
; 5429 :       ucvector_resize(&attempt[type], linebytes); /*todo: give error if resize failed*/
; 5430 :     }
; 5431 :     for(y = 0; y < h; y++) /*try the 5 filter types*/
; 5432 :     {
; 5433 :       for(type = 0; type < 5; type++)
; 5434 :       {
; 5435 :         unsigned testsize = attempt[type].size;
; 5436 :         /*if(testsize > 8) testsize /= 8;*/ /*it already works good enough by testing a part of the row*/
; 5437 : 
; 5438 :         filterScanline(attempt[type].data, &in[y * linebytes], prevline, linebytes, bytewidth, type);
; 5439 :         size[type] = 0;
; 5440 :         dummy = 0;
; 5441 :         zlib_compress(&dummy, &size[type], attempt[type].data, testsize, &zlibsettings);
; 5442 :         lodepng_free(dummy);
; 5443 :         /*check if this is smallest size (or if type == 0 it's the first case so always store the values)*/
; 5444 :         if(type == 0 || size[type] < smallest)
; 5445 :         {
; 5446 :           bestType = type;
; 5447 :           smallest = size[type];
; 5448 :         }
; 5449 :       }
; 5450 :       prevline = &in[y * linebytes];
; 5451 :       out[y * (linebytes + 1)] = bestType; /*the first byte of a scanline will be the filter type*/
; 5452 :       for(x = 0; x < linebytes; x++) out[y * (linebytes + 1) + 1 + x] = attempt[bestType].data[x];
; 5453 :     }
; 5454 :     for(type = 0; type < 5; type++) ucvector_cleanup(&attempt[type]);
; 5455 :   }
; 5456 :   else return 88; /* unknown filter strategy */
; 5457 : 
; 5458 :   return error;
; 5459 : }
; 5460 : 
; 5461 : static void addPaddingBits(unsigned char* out, const unsigned char* in,
; 5462 :                            size_t olinebits, size_t ilinebits, unsigned h)
; 5463 : {
; 5464 :   /*The opposite of the removePaddingBits function
; 5465 :   olinebits must be >= ilinebits*/
; 5466 :   unsigned y;
; 5467 :   size_t diff = olinebits - ilinebits;
; 5468 :   size_t obp = 0, ibp = 0; /*bit pointers*/
; 5469 :   for(y = 0; y < h; y++)
; 5470 :   {
; 5471 :     size_t x;
; 5472 :     for(x = 0; x < ilinebits; x++)
; 5473 :     {
; 5474 :       unsigned char bit = readBitFromReversedStream(&ibp, in);
; 5475 :       setBitOfReversedStream(&obp, out, bit);
; 5476 :     }
; 5477 :     /*obp += diff; --> no, fill in some value in the padding bits too, to avoid
; 5478 :     "Use of uninitialised value of size ###" warning from valgrind*/
; 5479 :     for(x = 0; x < diff; x++) setBitOfReversedStream(&obp, out, 0);
; 5480 :   }
; 5481 : }
; 5482 : 
; 5483 : /*
; 5484 : in: non-interlaced image with size w*h
; 5485 : out: the same pixels, but re-ordered according to PNG's Adam7 interlacing, with
; 5486 :  no padding bits between scanlines, but between reduced images so that each
; 5487 :  reduced image starts at a byte.
; 5488 : bpp: bits per pixel
; 5489 : there are no padding bits, not between scanlines, not between reduced images
; 5490 : in has the following size in bits: w * h * bpp.
; 5491 : out is possibly bigger due to padding bits between reduced images
; 5492 : NOTE: comments about padding bits are only relevant if bpp < 8
; 5493 : */
; 5494 : static void Adam7_interlace(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
; 5495 : {
; 5496 :   unsigned passw[7], passh[7];
; 5497 :   size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 5498 :   unsigned i;
; 5499 : 
; 5500 :   Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 5501 : 
; 5502 :   if(bpp >= 8)
; 5503 :   {
; 5504 :     for(i = 0; i < 7; i++)
; 5505 :     {
; 5506 :       unsigned x, y, b;
; 5507 :       size_t bytewidth = bpp / 8;
; 5508 :       for(y = 0; y < passh[i]; y++)
; 5509 :       for(x = 0; x < passw[i]; x++)
; 5510 :       {
; 5511 :         size_t pixelinstart = ((ADAM7_IY[i] + y * ADAM7_DY[i]) * w + ADAM7_IX[i] + x * ADAM7_DX[i]) * bytewidth;
; 5512 :         size_t pixeloutstart = passstart[i] + (y * passw[i] + x) * bytewidth;
; 5513 :         for(b = 0; b < bytewidth; b++)
; 5514 :         {
; 5515 :           out[pixeloutstart + b] = in[pixelinstart + b];
; 5516 :         }
; 5517 :       }
; 5518 :     }
; 5519 :   }
; 5520 :   else /*bpp < 8: Adam7 with pixels < 8 bit is a bit trickier: with bit pointers*/
; 5521 :   {
; 5522 :     for(i = 0; i < 7; i++)
; 5523 :     {
; 5524 :       unsigned x, y, b;
; 5525 :       unsigned ilinebits = bpp * passw[i];
; 5526 :       unsigned olinebits = bpp * w;
; 5527 :       size_t obp, ibp; /*bit pointers (for out and in buffer)*/
; 5528 :       for(y = 0; y < passh[i]; y++)
; 5529 :       for(x = 0; x < passw[i]; x++)
; 5530 :       {
; 5531 :         ibp = (ADAM7_IY[i] + y * ADAM7_DY[i]) * olinebits + (ADAM7_IX[i] + x * ADAM7_DX[i]) * bpp;
; 5532 :         obp = (8 * passstart[i]) + (y * ilinebits + x * bpp);
; 5533 :         for(b = 0; b < bpp; b++)
; 5534 :         {
; 5535 :           unsigned char bit = readBitFromReversedStream(&ibp, in);
; 5536 :           setBitOfReversedStream(&obp, out, bit);
; 5537 :         }
; 5538 :       }
; 5539 :     }
; 5540 :   }
; 5541 : }
; 5542 : 
; 5543 : /*out must be buffer big enough to contain uncompressed IDAT chunk data, and in must contain the full image.
; 5544 : return value is error**/
; 5545 : static unsigned preProcessScanlines(unsigned char** out, size_t* outsize, const unsigned char* in,
; 5546 :                                     unsigned w, unsigned h,
; 5547 :                                     const LodePNGInfo* info_png, const LodePNGEncoderSettings* settings)
; 5548 : {
; 5549 :   /*
; 5550 :   This function converts the pure 2D image with the PNG's colortype, into filtered-padded-interlaced data. Steps:
; 5551 :   *) if no Adam7: 1) add padding bits (= posible extra bits per scanline if bpp < 8) 2) filter
; 5552 :   *) if adam7: 1) Adam7_interlace 2) 7x add padding bits 3) 7x filter
; 5553 :   */
; 5554 :   unsigned bpp = lodepng_get_bpp(&info_png->color);
; 5555 :   unsigned error = 0;
; 5556 : 
; 5557 :   if(info_png->interlace_method == 0)
; 5558 :   {
; 5559 :     *outsize = h + (h * ((w * bpp + 7) / 8)); /*image size plus an extra byte per scanline + possible padding bits*/
; 5560 :     *out = (unsigned char*)lodepng_malloc(*outsize);
; 5561 :     if(!(*out) && (*outsize)) error = 83; /*alloc fail*/
; 5562 : 
; 5563 :     if(!error)
; 5564 :     {
; 5565 :       /*non multiple of 8 bits per scanline, padding bits needed per scanline*/
; 5566 :       if(bpp < 8 && w * bpp != ((w * bpp + 7) / 8) * 8)
; 5567 :       {
; 5568 :         unsigned char* padded = (unsigned char*)lodepng_malloc(h * ((w * bpp + 7) / 8));
; 5569 :         if(!padded) error = 83; /*alloc fail*/
; 5570 :         if(!error)
; 5571 :         {
; 5572 :           addPaddingBits(padded, in, ((w * bpp + 7) / 8) * 8, w * bpp, h);
; 5573 :           error = filter(*out, padded, w, h, &info_png->color, settings);
; 5574 :         }
; 5575 :         lodepng_free(padded);
; 5576 :       }
; 5577 :       else
; 5578 :       {
; 5579 :         /*we can immediatly filter into the out buffer, no other steps needed*/
; 5580 :         error = filter(*out, in, w, h, &info_png->color, settings);
; 5581 :       }
; 5582 :     }
; 5583 :   }
; 5584 :   else /*interlace_method is 1 (Adam7)*/
; 5585 :   {
; 5586 :     unsigned passw[7], passh[7];
; 5587 :     size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 5588 :     unsigned char* adam7;
; 5589 : 
; 5590 :     Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 5591 : 
; 5592 :     *outsize = filter_passstart[7]; /*image size plus an extra byte per scanline + possible padding bits*/
; 5593 :     *out = (unsigned char*)lodepng_malloc(*outsize);
; 5594 :     if(!(*out)) error = 83; /*alloc fail*/
; 5595 : 
; 5596 :     adam7 = (unsigned char*)lodepng_malloc(passstart[7]);
; 5597 :     if(!adam7 && passstart[7]) error = 83; /*alloc fail*/
; 5598 : 
; 5599 :     if(!error)
; 5600 :     {
; 5601 :       unsigned i;
; 5602 : 
; 5603 :       Adam7_interlace(adam7, in, w, h, bpp);
; 5604 :       for(i = 0; i < 7; i++)
; 5605 :       {
; 5606 :         if(bpp < 8)
; 5607 :         {
; 5608 :           unsigned char* padded = (unsigned char*)lodepng_malloc(padded_passstart[i + 1] - padded_passstart[i]);
; 5609 :           if(!padded) ERROR_BREAK(83); /*alloc fail*/
; 5610 :           addPaddingBits(padded, &adam7[passstart[i]],
; 5611 :                          ((passw[i] * bpp + 7) / 8) * 8, passw[i] * bpp, passh[i]);
; 5612 :           error = filter(&(*out)[filter_passstart[i]], padded,
; 5613 :                          passw[i], passh[i], &info_png->color, settings);
; 5614 :           lodepng_free(padded);
; 5615 :         }
; 5616 :         else
; 5617 :         {
; 5618 :           error = filter(&(*out)[filter_passstart[i]], &adam7[padded_passstart[i]],
; 5619 :                          passw[i], passh[i], &info_png->color, settings);
; 5620 :         }
; 5621 : 
; 5622 :         if(error) break;
; 5623 :       }
; 5624 :     }
; 5625 : 
; 5626 :     lodepng_free(adam7);
; 5627 :   }
; 5628 : 
; 5629 :   return error;
; 5630 : }
; 5631 : 
; 5632 : /*
; 5633 : palette must have 4 * palettesize bytes allocated, and given in format RGBARGBARGBARGBA...
; 5634 : returns 0 if the palette is opaque,
; 5635 : returns 1 if the palette has a single color with alpha 0 ==> color key
; 5636 : returns 2 if the palette is semi-translucent.
; 5637 : */
; 5638 : static unsigned getPaletteTranslucency(const unsigned char* palette, size_t palettesize)
; 5639 : {
; 5640 :   size_t i, key = 0;
; 5641 :   unsigned r = 0, g = 0, b = 0; /*the value of the color with alpha 0, so long as color keying is possible*/
; 5642 :   for(i = 0; i < palettesize; i++)
; 5643 :   {
; 5644 :     if(!key && palette[4 * i + 3] == 0)
; 5645 :     {
; 5646 :       r = palette[4 * i + 0]; g = palette[4 * i + 1]; b = palette[4 * i + 2];
; 5647 :       key = 1;
; 5648 :       i = (size_t)(-1); /*restart from beginning, to detect earlier opaque colors with key's value*/
; 5649 :     }
; 5650 :     else if(palette[4 * i + 3] != 255) return 2;
; 5651 :     /*when key, no opaque RGB may have key's RGB*/
; 5652 :     else if(key && r == palette[i * 4 + 0] && g == palette[i * 4 + 1] && b == palette[i * 4 + 2]) return 2;
; 5653 :   }
; 5654 :   return key;
; 5655 : }
; 5656 : 
; 5657 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 5658 : static unsigned addUnknownChunks(ucvector* out, unsigned char* data, size_t datasize)
; 5659 : {
; 5660 :   unsigned char* inchunk = data;
; 5661 :   while((size_t)(inchunk - data) < datasize)
; 5662 :   {
; 5663 :     CERROR_TRY_RETURN(lodepng_chunk_append(&out->data, &out->size, inchunk));
; 5664 :     out->allocsize = out->size; /*fix the allocsize again*/
; 5665 :     inchunk = lodepng_chunk_next(inchunk);
; 5666 :   }
; 5667 :   return 0;
; 5668 : }
; 5669 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 5670 : 
; 5671 : unsigned lodepng_encode(unsigned char** out, size_t* outsize,
; 5672 :                         const unsigned char* image, unsigned w, unsigned h,
; 5673 :                         LodePNGState* state)
; 5674 : {
; 5675 :   LodePNGInfo info;
; 5676 :   ucvector outv;
; 5677 :   unsigned char* data = 0; /*uncompressed version of the IDAT chunk data*/
; 5678 :   size_t datasize = 0;
; 5679 : 
; 5680 :   /*provide some proper output values if error will happen*/
; 5681 :   *out = 0;
; 5682 :   *outsize = 0;
; 5683 :   state->error = 0;
; 5684 : 
; 5685 :   lodepng_info_init(&info);
; 5686 :   lodepng_info_copy(&info, &state->info_png);
; 5687 : 
; 5688 :   if((info.color.colortype == LCT_PALETTE || state->encoder.force_palette)
; 5689 :       && (info.color.palettesize == 0 || info.color.palettesize > 256))
; 5690 :   {
; 5691 :     state->error = 68; /*invalid palette size, it is only allowed to be 1-256*/
; 5692 :     return state->error;
; 5693 :   }
; 5694 : 
; 5695 :   if(state->encoder.auto_convert != LAC_NO)
; 5696 :   {
; 5697 :     state->error = lodepng_auto_choose_color(&info.color, image, w, h, &state->info_raw,
; 5698 :                                              state->encoder.auto_convert);
; 5699 :   }
; 5700 :   if(state->error) return state->error;
; 5701 : 
; 5702 :   if(state->encoder.zlibsettings.windowsize > 32768)
; 5703 :   {
; 5704 :     CERROR_RETURN_ERROR(state->error, 60); /*error: windowsize larger than allowed*/
; 5705 :   }
; 5706 :   if(state->encoder.zlibsettings.btype > 2)
; 5707 :   {
; 5708 :     CERROR_RETURN_ERROR(state->error, 61); /*error: unexisting btype*/
; 5709 :   }
; 5710 :   if(state->info_png.interlace_method > 1)
; 5711 :   {
; 5712 :     CERROR_RETURN_ERROR(state->error, 71); /*error: unexisting interlace mode*/
; 5713 :   }
; 5714 : 
; 5715 :   state->error = checkColorValidity(info.color.colortype, info.color.bitdepth);
; 5716 :   if(state->error) return state->error; /*error: unexisting color type given*/
; 5717 :   state->error = checkColorValidity(state->info_raw.colortype, state->info_raw.bitdepth);
; 5718 :   if(state->error) return state->error; /*error: unexisting color type given*/
; 5719 : 
; 5720 :   if(!lodepng_color_mode_equal(&state->info_raw, &info.color))
; 5721 :   {
; 5722 :     unsigned char* converted;
; 5723 :     size_t size = (w * h * lodepng_get_bpp(&info.color) + 7) / 8;
; 5724 : 
; 5725 :     converted = (unsigned char*)lodepng_malloc(size);
; 5726 :     if(!converted && size) state->error = 83; /*alloc fail*/
; 5727 :     if(!state->error)
; 5728 :     {
; 5729 :       state->error = lodepng_convert(converted, image, &info.color, &state->info_raw, w, h, 0 /*fix_png*/);
; 5730 :     }
; 5731 :     if(!state->error) preProcessScanlines(&data, &datasize, converted, w, h, &info, &state->encoder);
; 5732 :     lodepng_free(converted);
; 5733 :   }
; 5734 :   else preProcessScanlines(&data, &datasize, image, w, h, &info, &state->encoder);
; 5735 : 
; 5736 :   ucvector_init(&outv);
; 5737 :   while(!state->error) /*while only executed once, to break on error*/
; 5738 :   {
; 5739 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 5740 :     size_t i;
; 5741 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 5742 :     /*write signature and chunks*/
; 5743 :     writeSignature(&outv);
; 5744 :     /*IHDR*/
; 5745 :     addChunk_IHDR(&outv, w, h, info.color.colortype, info.color.bitdepth, info.interlace_method);
; 5746 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 5747 :     /*unknown chunks between IHDR and PLTE*/
; 5748 :     if(info.unknown_chunks_data[0])
; 5749 :     {
; 5750 :       state->error = addUnknownChunks(&outv, info.unknown_chunks_data[0], info.unknown_chunks_size[0]);
; 5751 :       if(state->error) break;
; 5752 :     }
; 5753 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 5754 :     /*PLTE*/
; 5755 :     if(info.color.colortype == LCT_PALETTE)
; 5756 :     {
; 5757 :       addChunk_PLTE(&outv, &info.color);
; 5758 :     }
; 5759 :     if(state->encoder.force_palette && (info.color.colortype == LCT_RGB || info.color.colortype == LCT_RGBA))
; 5760 :     {
; 5761 :       addChunk_PLTE(&outv, &info.color);
; 5762 :     }
; 5763 :     /*tRNS*/
; 5764 :     if(info.color.colortype == LCT_PALETTE && getPaletteTranslucency(info.color.palette, info.color.palettesize) != 0)
; 5765 :     {
; 5766 :       addChunk_tRNS(&outv, &info.color);
; 5767 :     }
; 5768 :     if((info.color.colortype == LCT_GREY || info.color.colortype == LCT_RGB) && info.color.key_defined)
; 5769 :     {
; 5770 :       addChunk_tRNS(&outv, &info.color);
; 5771 :     }
; 5772 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 5773 :     /*bKGD (must come between PLTE and the IDAt chunks*/
; 5774 :     if(info.background_defined) addChunk_bKGD(&outv, &info);
; 5775 :     /*pHYs (must come before the IDAT chunks)*/
; 5776 :     if(info.phys_defined) addChunk_pHYs(&outv, &info);
; 5777 : 
; 5778 :     /*unknown chunks between PLTE and IDAT*/
; 5779 :     if(info.unknown_chunks_data[1])
; 5780 :     {
; 5781 :       state->error = addUnknownChunks(&outv, info.unknown_chunks_data[1], info.unknown_chunks_size[1]);
; 5782 :       if(state->error) break;
; 5783 :     }
; 5784 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 5785 :     /*IDAT (multiple IDAT chunks must be consecutive)*/
; 5786 :     state->error = addChunk_IDAT(&outv, data, datasize, &state->encoder.zlibsettings);
; 5787 :     if(state->error) break;
; 5788 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 5789 :     /*tIME*/
; 5790 :     if(info.time_defined) addChunk_tIME(&outv, &info.time);
; 5791 :     /*tEXt and/or zTXt*/
; 5792 :     for(i = 0; i < info.text_num; i++)
; 5793 :     {
; 5794 :       if(strlen(info.text_keys[i]) > 79)
; 5795 :       {
; 5796 :         state->error = 66; /*text chunk too large*/
; 5797 :         break;
; 5798 :       }
; 5799 :       if(strlen(info.text_keys[i]) < 1)
; 5800 :       {
; 5801 :         state->error = 67; /*text chunk too small*/
; 5802 :         break;
; 5803 :       }
; 5804 :       if(state->encoder.text_compression)
; 5805 :         addChunk_zTXt(&outv, info.text_keys[i], info.text_strings[i], &state->encoder.zlibsettings);
; 5806 :       else
; 5807 :         addChunk_tEXt(&outv, info.text_keys[i], info.text_strings[i]);
; 5808 :     }
; 5809 :     /*LodePNG version id in text chunk*/
; 5810 :     if(state->encoder.add_id)
; 5811 :     {
; 5812 :       unsigned alread_added_id_text = 0;
; 5813 :       for(i = 0; i < info.text_num; i++)
; 5814 :       {
; 5815 :         if(!strcmp(info.text_keys[i], "LodePNG"))
; 5816 :         {
; 5817 :           alread_added_id_text = 1;
; 5818 :           break;
; 5819 :         }
; 5820 :       }
; 5821 :       if(alread_added_id_text == 0)
; 5822 :         addChunk_tEXt(&outv, "LodePNG", VERSION_STRING); /*it's shorter as tEXt than as zTXt chunk*/
; 5823 :     }
; 5824 :     /*iTXt*/
; 5825 :     for(i = 0; i < info.itext_num; i++)
; 5826 :     {
; 5827 :       if(strlen(info.itext_keys[i]) > 79)
; 5828 :       {
; 5829 :         state->error = 66; /*text chunk too large*/
; 5830 :         break;
; 5831 :       }
; 5832 :       if(strlen(info.itext_keys[i]) < 1)
; 5833 :       {
; 5834 :         state->error = 67; /*text chunk too small*/
; 5835 :         break;
; 5836 :       }
; 5837 :       addChunk_iTXt(&outv, state->encoder.text_compression,
; 5838 :                     info.itext_keys[i], info.itext_langtags[i], info.itext_transkeys[i], info.itext_strings[i],
; 5839 :                     &state->encoder.zlibsettings);
; 5840 :     }
; 5841 : 
; 5842 :     /*unknown chunks between IDAT and IEND*/
; 5843 :     if(info.unknown_chunks_data[2])
; 5844 :     {
; 5845 :       state->error = addUnknownChunks(&outv, info.unknown_chunks_data[2], info.unknown_chunks_size[2]);
; 5846 :       if(state->error) break;
; 5847 :     }
; 5848 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 5849 :     /*IEND*/
; 5850 :     addChunk_IEND(&outv);
; 5851 : 
; 5852 :     break; /*this isn't really a while loop; no error happened so break out now!*/
; 5853 :   }
; 5854 : 
; 5855 :   lodepng_info_cleanup(&info);
; 5856 :   lodepng_free(data);
; 5857 :   /*instead of cleaning the vector up, give it to the output*/
; 5858 :   *out = outv.data;
; 5859 :   *outsize = outv.size;
; 5860 : 
; 5861 :   return state->error;
; 5862 : }
; 5863 : 
; 5864 : unsigned lodepng_encode_memory(unsigned char** out, size_t* outsize, const unsigned char* image,
; 5865 :                                unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)
; 5866 : {
; 5867 :   unsigned error;
; 5868 :   LodePNGState state;
; 5869 :   lodepng_state_init(&state);
; 5870 :   state.info_raw.colortype = colortype;
; 5871 :   state.info_raw.bitdepth = bitdepth;
; 5872 :   state.info_png.color.colortype = colortype;
; 5873 :   state.info_png.color.bitdepth = bitdepth;
; 5874 :   lodepng_encode(out, outsize, image, w, h, &state);
; 5875 :   error = state.error;
; 5876 :   lodepng_state_cleanup(&state);
; 5877 :   return error;
; 5878 : }
; 5879 : 
; 5880 : unsigned lodepng_encode32(unsigned char** out, size_t* outsize, const unsigned char* image, unsigned w, unsigned h)
; 5881 : {
; 5882 :   return lodepng_encode_memory(out, outsize, image, w, h, LCT_RGBA, 8);
; 5883 : }
; 5884 : 
; 5885 : unsigned lodepng_encode24(unsigned char** out, size_t* outsize, const unsigned char* image, unsigned w, unsigned h)
; 5886 : {
; 5887 :   return lodepng_encode_memory(out, outsize, image, w, h, LCT_RGB, 8);
; 5888 : }
; 5889 : 
; 5890 : #ifdef LODEPNG_COMPILE_DISK
; 5891 : unsigned lodepng_encode_file(const char* filename, const unsigned char* image, unsigned w, unsigned h,
; 5892 :                              LodePNGColorType colortype, unsigned bitdepth)
; 5893 : {
; 5894 :   unsigned char* buffer;
; 5895 :   size_t buffersize;
; 5896 :   unsigned error = lodepng_encode_memory(&buffer, &buffersize, image, w, h, colortype, bitdepth);
; 5897 :   if(!error) error = lodepng_save_file(buffer, buffersize, filename);
; 5898 :   lodepng_free(buffer);
; 5899 :   return error;
; 5900 : }
; 5901 : 
; 5902 : unsigned lodepng_encode32_file(const char* filename, const unsigned char* image, unsigned w, unsigned h)
; 5903 : {
; 5904 :   return lodepng_encode_file(filename, image, w, h, LCT_RGBA, 8);
; 5905 : }
; 5906 : 
; 5907 : unsigned lodepng_encode24_file(const char* filename, const unsigned char* image, unsigned w, unsigned h)
; 5908 : {
; 5909 :   return lodepng_encode_file(filename, image, w, h, LCT_RGB, 8);
; 5910 : }
; 5911 : #endif /*LODEPNG_COMPILE_DISK*/
; 5912 : 
; 5913 : void lodepng_encoder_settings_init(LodePNGEncoderSettings* settings)
; 5914 : {
; 5915 :   lodepng_compress_settings_init(&settings->zlibsettings);
; 5916 :   settings->filter_palette_zero = 1;
; 5917 :   settings->filter_strategy = LFS_MINSUM;
; 5918 :   settings->auto_convert = LAC_AUTO;
; 5919 :   settings->force_palette = 0;
; 5920 :   settings->predefined_filters = 0;
; 5921 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 5922 :   settings->add_id = 0;
; 5923 :   settings->text_compression = 1;
; 5924 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 5925 : }
; 5926 : 
; 5927 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 5928 : #endif /*LODEPNG_COMPILE_PNG*/
; 5929 : 
; 5930 : #ifdef LODEPNG_COMPILE_ERROR_TEXT
; 5931 : /*
; 5932 : This returns the description of a numerical error code in English. This is also
; 5933 : the documentation of all the error codes.
; 5934 : */
; 5935 : const char* lodepng_error_text(unsigned code)
; 5936 : {
; 5937 :   switch(code)
; 5938 :   {
; 5939 :     case 0: return "no error, everything went ok";
; 5940 :     case 1: return "nothing done yet"; /*the Encoder/Decoder has done nothing yet, error checking makes no sense yet*/
; 5941 :     case 10: return "end of input memory reached without huffman end code"; /*while huffman decoding*/
; 5942 :     case 11: return "error in code tree made it jump outside of huffman tree"; /*while huffman decoding*/
; 5943 :     case 13: return "problem while processing dynamic deflate block";
; 5944 :     case 14: return "problem while processing dynamic deflate block";
; 5945 :     case 15: return "problem while processing dynamic deflate block";
; 5946 :     case 16: return "unexisting code while processing dynamic deflate block";
; 5947 :     case 17: return "end of out buffer memory reached while inflating";
; 5948 :     case 18: return "invalid distance code while inflating";
; 5949 :     case 19: return "end of out buffer memory reached while inflating";
; 5950 :     case 20: return "invalid deflate block BTYPE encountered while decoding";
; 5951 :     case 21: return "NLEN is not ones complement of LEN in a deflate block";
; 5952 :      /*end of out buffer memory reached while inflating:
; 5953 :      This can happen if the inflated deflate data is longer than the amount of bytes required to fill up
; 5954 :      all the pixels of the image, given the color depth and image dimensions. Something that doesn't
; 5955 :      happen in a normal, well encoded, PNG image.*/
; 5956 :     case 22: return "end of out buffer memory reached while inflating";
; 5957 :     case 23: return "end of in buffer memory reached while inflating";
; 5958 :     case 24: return "invalid FCHECK in zlib header";
; 5959 :     case 25: return "invalid compression method in zlib header";
; 5960 :     case 26: return "FDICT encountered in zlib header while it's not used for PNG";
; 5961 :     case 27: return "PNG file is smaller than a PNG header";
; 5962 :     /*Checks the magic file header, the first 8 bytes of the PNG file*/
; 5963 :     case 28: return "incorrect PNG signature, it's no PNG or corrupted";
; 5964 :     case 29: return "first chunk is not the header chunk";
; 5965 :     case 30: return "chunk length too large, chunk broken off at end of file";
; 5966 :     case 31: return "illegal PNG color type or bpp";
; 5967 :     case 32: return "illegal PNG compression method";
; 5968 :     case 33: return "illegal PNG filter method";
; 5969 :     case 34: return "illegal PNG interlace method";
; 5970 :     case 35: return "chunk length of a chunk is too large or the chunk too small";
; 5971 :     case 36: return "illegal PNG filter type encountered";
; 5972 :     case 37: return "illegal bit depth for this color type given";
; 5973 :     case 38: return "the palette is too big"; /*more than 256 colors*/
; 5974 :     case 39: return "more palette alpha values given in tRNS chunk than there are colors in the palette";
; 5975 :     case 40: return "tRNS chunk has wrong size for greyscale image";
; 5976 :     case 41: return "tRNS chunk has wrong size for RGB image";
; 5977 :     case 42: return "tRNS chunk appeared while it was not allowed for this color type";
; 5978 :     case 43: return "bKGD chunk has wrong size for palette image";
; 5979 :     case 44: return "bKGD chunk has wrong size for greyscale image";
; 5980 :     case 45: return "bKGD chunk has wrong size for RGB image";
; 5981 :     /*Is the palette too small?*/
; 5982 :     case 46: return "a value in indexed image is larger than the palette size (bitdepth = 8)";
; 5983 :     /*Is the palette too small?*/
; 5984 :     case 47: return "a value in indexed image is larger than the palette size (bitdepth < 8)";
; 5985 :     /*the input data is empty, maybe a PNG file doesn't exist or is in the wrong path*/
; 5986 :     case 48: return "empty input or file doesn't exist";
; 5987 :     case 49: return "jumped past memory while generating dynamic huffman tree";
; 5988 :     case 50: return "jumped past memory while generating dynamic huffman tree";
; 5989 :     case 51: return "jumped past memory while inflating huffman block";
; 5990 :     case 52: return "jumped past memory while inflating";
; 5991 :     case 53: return "size of zlib data too small";
; 5992 :     case 54: return "repeat symbol in tree while there was no value symbol yet";
; 5993 :     /*jumped past tree while generating huffman tree, this could be when the
; 5994 :     tree will have more leaves than symbols after generating it out of the
; 5995 :     given lenghts. They call this an oversubscribed dynamic bit lengths tree in zlib.*/
; 5996 :     case 55: return "jumped past tree while generating huffman tree";
; 5997 :     case 56: return "given output image colortype or bitdepth not supported for color conversion";
; 5998 :     case 57: return "invalid CRC encountered (checking CRC can be disabled)";
; 5999 :     case 58: return "invalid ADLER32 encountered (checking ADLER32 can be disabled)";
; 6000 :     case 59: return "requested color conversion not supported";
; 6001 :     case 60: return "invalid window size given in the settings of the encoder (must be 0-32768)";
; 6002 :     case 61: return "invalid BTYPE given in the settings of the encoder (only 0, 1 and 2 are allowed)";
; 6003 :     /*LodePNG leaves the choice of RGB to greyscale conversion formula to the user.*/
; 6004 :     case 62: return "conversion from color to greyscale not supported";
; 6005 :     case 63: return "length of a chunk too long, max allowed for PNG is 2147483647 bytes per chunk"; /*(2^31-1)*/
; 6006 :     /*this would result in the inability of a deflated block to ever contain an end code. It must be at least 1.*/
; 6007 :     case 64: return "the length of the END symbol 256 in the Huffman tree is 0";
; 6008 :     case 66: return "the length of a text chunk keyword given to the encoder is longer than the maximum of 79 bytes";
; 6009 :     case 67: return "the length of a text chunk keyword given to the encoder is smaller than the minimum of 1 byte";
; 6010 :     case 68: return "tried to encode a PLTE chunk with a palette that has less than 1 or more than 256 colors";
; 6011 :     case 69: return "unknown chunk type with 'critical' flag encountered by the decoder";
; 6012 :     case 71: return "unexisting interlace mode given to encoder (must be 0 or 1)";
; 6013 :     case 72: return "while decoding, unexisting compression method encountering in zTXt or iTXt chunk (it must be 0)";
; 6014 :     case 73: return "invalid tIME chunk size";
; 6015 :     case 74: return "invalid pHYs chunk size";
; 6016 :     /*length could be wrong, or data chopped off*/
; 6017 :     case 75: return "no null termination char found while decoding text chunk";
; 6018 :     case 76: return "iTXt chunk too short to contain required bytes";
; 6019 :     case 77: return "integer overflow in buffer size";
; 6020 :     case 78: return "failed to open file for reading"; /*file doesn't exist or couldn't be opened for reading*/
; 6021 :     case 79: return "failed to open file for writing";
; 6022 :     case 80: return "tried creating a tree of 0 symbols";
; 6023 :     case 81: return "lazy matching at pos 0 is impossible";
; 6024 :     case 82: return "color conversion to palette requested while a color isn't in palette";
; 6025 :     case 83: return "memory allocation failed";
; 6026 :     case 84: return "given image too small to contain all pixels to be encoded";
; 6027 :     case 85: return "internal color conversion bug";
; 6028 :     case 86: return "impossible offset in lz77 encoding (internal bug)";
; 6029 :     case 87: return "must provide custom zlib function pointer if LODEPNG_COMPILE_ZLIB is not defined";
; 6030 :     case 88: return "invalid filter strategy given for LodePNGEncoderSettings.filter_strategy";
; 6031 :     case 89: return "text chunk keyword too short or long: must have size 1-79";
; 6032 :   }
; 6033 :   return "unknown error code";
; 6034 : }
; 6035 : #endif /*LODEPNG_COMPILE_ERROR_TEXT*/
; 6036 : 
; 6037 : /* ////////////////////////////////////////////////////////////////////////// */
; 6038 : /* ////////////////////////////////////////////////////////////////////////// */
; 6039 : /* // C++ Wrapper                                                          // */
; 6040 : /* ////////////////////////////////////////////////////////////////////////// */
; 6041 : /* ////////////////////////////////////////////////////////////////////////// */
; 6042 : 
; 6043 : 
; 6044 : #ifdef LODEPNG_COMPILE_CPP
; 6045 : namespace lodepng
; 6046 : {
; 6047 : 
; 6048 : #ifdef LODEPNG_COMPILE_DISK
; 6049 : void load_file(std::vector<unsigned char>& buffer, const std::string& filename)
; 6050 : {
; 6051 :   std::ifstream file(filename.c_str(), std::ios::in|std::ios::binary|std::ios::ate);
; 6052 : 
; 6053 :   /*get filesize*/
; 6054 :   std::streamsize size = 0;
; 6055 :   if(file.seekg(0, std::ios::end).good()) size = file.tellg();
; 6056 :   if(file.seekg(0, std::ios::beg).good()) size -= file.tellg();
; 6057 : 
; 6058 :   /*read contents of the file into the vector*/
; 6059 :   buffer.resize(size_t(size));
; 6060 :   if(size > 0) file.read((char*)(&buffer[0]), size);
; 6061 : }
; 6062 : 
; 6063 : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 6064 : void save_file(const std::vector<unsigned char>& buffer, const std::string& filename)
; 6065 : {
; 6066 :   std::ofstream file(filename.c_str(), std::ios::out|std::ios::binary);
; 6067 :   file.write(buffer.empty() ? 0 : (char*)&buffer[0], std::streamsize(buffer.size()));
; 6068 : }
; 6069 : #endif //LODEPNG_COMPILE_DISK
; 6070 : 
; 6071 : #ifdef LODEPNG_COMPILE_ZLIB
; 6072 : #ifdef LODEPNG_COMPILE_DECODER
; 6073 : unsigned decompress(std::vector<unsigned char>& out, const unsigned char* in, size_t insize,
; 6074 :                     const LodePNGDecompressSettings& settings)
; 6075 : {
; 6076 :   unsigned char* buffer = 0;
; 6077 :   size_t buffersize = 0;
; 6078 :   unsigned error = zlib_decompress(&buffer, &buffersize, in, insize, &settings);
; 6079 :   if(buffer)
; 6080 :   {
; 6081 :     out.insert(out.end(), &buffer[0], &buffer[buffersize]);
; 6082 :     lodepng_free(buffer);
; 6083 :   }
; 6084 :   return error;
; 6085 : }
; 6086 : 
; 6087 : unsigned decompress(std::vector<unsigned char>& out, const std::vector<unsigned char>& in,
; 6088 :                     const LodePNGDecompressSettings& settings)
; 6089 : {
; 6090 :   return decompress(out, in.empty() ? 0 : &in[0], in.size(), settings);
; 6091 : }
; 6092 : #endif //LODEPNG_COMPILE_DECODER
; 6093 : 
; 6094 : #ifdef LODEPNG_COMPILE_ENCODER
; 6095 : unsigned compress(std::vector<unsigned char>& out, const unsigned char* in, size_t insize,
; 6096 :                   const LodePNGCompressSettings& settings)
; 6097 : {
; 6098 :   unsigned char* buffer = 0;
; 6099 :   size_t buffersize = 0;
; 6100 :   unsigned error = zlib_compress(&buffer, &buffersize, in, insize, &settings);
; 6101 :   if(buffer)
; 6102 :   {
; 6103 :     out.insert(out.end(), &buffer[0], &buffer[buffersize]);
; 6104 :     lodepng_free(buffer);
; 6105 :   }
; 6106 :   return error;
; 6107 : }
; 6108 : 
; 6109 : unsigned compress(std::vector<unsigned char>& out, const std::vector<unsigned char>& in,
; 6110 :                   const LodePNGCompressSettings& settings)
; 6111 : {
; 6112 :   return compress(out, in.empty() ? 0 : &in[0], in.size(), settings);
; 6113 : }
; 6114 : #endif //LODEPNG_COMPILE_ENCODER
; 6115 : #endif //LODEPNG_COMPILE_ZLIB
; 6116 : 
; 6117 : 
; 6118 : #ifdef LODEPNG_COMPILE_PNG
; 6119 : 
; 6120 : State::State()
; 6121 : {
; 6122 :   lodepng_state_init(this);

  00070	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _state$3[ebp]
  00076	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _state$3[ebp], OFFSET ??_7State@lodepng@@6B@
  00080	e8 00 00 00 00	 call	 ?lodepng_state_init@@YAXPAULodePNGState@@@Z ; lodepng_state_init

; 6150 :   {
; 6151 :     State state;

  00085	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));

  00088	ff b5 c0 fe ff
	ff		 push	 DWORD PTR $T2[ebp]
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 2655 :   return (w * h * lodepng_get_bpp(color) + 7) / 8;

  0008e	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _state$3[ebp+104]

; 6152 :     state.info_raw.colortype = colortype;

  00094	c7 85 2c ff ff
	ff 06 00 00 00	 mov	 DWORD PTR _state$3[ebp+104], 6

; 6153 :     state.info_raw.bitdepth = bitdepth;

  0009e	c7 85 30 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR _state$3[ebp+108], 8

; 2655 :   return (w * h * lodepng_get_bpp(color) + 7) / 8;

  000a8	e8 00 00 00 00	 call	 ?lodepng_get_bpp@@YAIPBULodePNGColorMode@@@Z ; lodepng_get_bpp
  000ad	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _h$GSCopy$1$[ebp]
  000b3	0f af 01	 imul	 eax, DWORD PTR [ecx]
  000b6	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _w$GSCopy$1$[ebp]
  000bc	0f af 01	 imul	 eax, DWORD PTR [ecx]
  000bf	83 c0 07	 add	 eax, 7
  000c2	c1 e8 03	 shr	 eax, 3

; 6154 :     size_t buffersize = lodepng_get_raw_size(w, h, &state.info_raw);
; 6155 :     out.insert(out.end(), &buffer[0], &buffer[buffersize]);

  000c5	03 c7		 add	 eax, edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));

  000c7	50		 push	 eax
  000c8	57		 push	 edi
  000c9	ff 73 04	 push	 DWORD PTR [ebx+4]
  000cc	8b cb		 mov	 ecx, ebx
  000ce	e8 00 00 00 00	 call	 ??$_Insert@PAE@?$vector@EV?$allocator@E@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Insert<unsigned char *>
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 73   :   free(ptr);

  000d3	57		 push	 edi
  000d4	e8 00 00 00 00	 call	 _free

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
; 945  :     (*bp)++;
; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);
; 965  :   generateFixedDistanceTree(tree_d);
; 966  : }
; 967  : 
; 968  : /*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
; 969  : static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
; 970  :                                       const unsigned char* in, size_t* bp, size_t inlength)
; 971  : {
; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;
; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/
; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;
; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;
; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;
; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)
; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
; 1009 :     if(error) break;
; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;
; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;
; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;
; 1020 :     while(i < HLIT + HDIST)
; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
; 1023 :       if(code <= 15) /*a length code*/
; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;
; 1026 :         else bitlen_d[i - HLIT] = code;
; 1027 :         i++;
; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/
; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);
; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];
; 1040 :         else value = bitlen_d[i - HLIT - 1];
; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)
; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
; 1045 :           if(i < HLIT) bitlen_ll[i] = value;
; 1046 :           else bitlen_d[i - HLIT] = value;
; 1047 :           i++;
; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/
; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);
; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)
; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1063 :           else bitlen_d[i - HLIT] = 0;
; 1064 :           i++;
; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/
; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);
; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)
; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1080 :           else bitlen_d[i - HLIT] = 0;
; 1081 :           i++;
; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))
; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;
; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/
; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;
; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 1102 :     if(error) break;
; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
; 1104 : 
; 1105 :     break; /*end of error-while*/
; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;
; 1114 : }
; 1115 : 
; 1116 : /*inflate a block with dynamic of fixed Huffman tree*/
; 1117 : static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
; 1118 :                                     size_t* pos, size_t inlength, unsigned btype)
; 1119 : {
; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;
; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/
; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/
; 1136 :     {
; 1137 :       if((*pos) >= out->size)
; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);
; 1143 :       (*pos)++;
; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);
; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
; 1161 :       if(code_d > 29)
; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;
; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/
; 1170 :         break;
; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);
; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);
; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)
; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)
; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];
; 1193 :         (*pos)++;
; 1194 :         backward++;
; 1195 :         if(backward >= start) backward = start - distance;
; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)
; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;
; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;
; 1215 : }
; 1216 : 
; 1217 : static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
; 1218 : {
; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;
; 1223 :   p = (*bp) / 8; /*byte position*/
; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/
; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;
; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;
; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)
; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];
; 1241 : 
; 1242 :   (*bp) = p * 8;
; 1243 : 
; 1244 :   return error;
; 1245 : }
; 1246 : 
; 1247 : static unsigned lodepng_inflatev(ucvector* out,
; 1248 :                                  const unsigned char* in, size_t insize,
; 1249 :                                  const LodePNGDecompressSettings* settings)
; 1250 : {
; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;
; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/
; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)
; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
; 1264 :     BFINAL = readBitFromStream(&bp, in);
; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);
; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
; 1271 : 
; 1272 :     if(error) return error;
; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/
; 1277 : 
; 1278 :   return error;
; 1279 : }
; 1280 : 
; 1281 : unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
; 1282 :                          const unsigned char* in, size_t insize,
; 1283 :                          const LodePNGDecompressSettings* settings)
; 1284 : {
; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);
; 1289 :   *out = v.data;
; 1290 :   *outsize = v.size;
; 1291 :   return error;
; 1292 : }
; 1293 : 
; 1294 : static unsigned inflate(unsigned char** out, size_t* outsize,
; 1295 :                         const unsigned char* in, size_t insize,
; 1296 :                         const LodePNGDecompressSettings* settings)
; 1297 : {
; 1298 :   if(settings->custom_inflate)
; 1299 :   {
; 1300 :     return settings->custom_inflate(out, outsize, in, insize, settings);
; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }
; 1307 : 
; 1308 : #endif /*LODEPNG_COMPILE_DECODER*/
; 1309 : 
; 1310 : #ifdef LODEPNG_COMPILE_ENCODER
; 1311 : 
; 1312 : /* ////////////////////////////////////////////////////////////////////////// */
; 1313 : /* / Deflator (Compressor)                                                  / */
; 1314 : /* ////////////////////////////////////////////////////////////////////////// */
; 1315 : 
; 1316 : static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;
; 1317 : 
; 1318 : /*bitlen is the size in bits of the code*/
; 1319 : static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)
; 1320 : {
; 1321 :   addBitsToStreamReversed(bp, compressed, code, bitlen);
; 1322 : }
; 1323 : 
; 1324 : /*search the index in the array, that has the largest value smaller than or equal to the given value,
; 1325 : given array must be sorted (if no value is smaller, it returns the size of the given array)*/
; 1326 : static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)
; 1327 : {
; 1328 :   /*linear search implementation*/
; 1329 :   /*for(size_t i = 1; i < array_size; i++) if(array[i] > value) return i - 1;
; 1330 :   return array_size - 1;*/
; 1331 : 
; 1332 :   /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
; 1333 :   size_t left  = 1;
; 1334 :   size_t right = array_size - 1;
; 1335 :   while(left <= right)
; 1336 :   {
; 1337 :     size_t mid = (left + right) / 2;
; 1338 :     if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
; 1339 :     else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
; 1340 :     else return mid - 1;
; 1341 :   }
; 1342 :   return array_size - 1;
; 1343 : }
; 1344 : 
; 1345 : static void addLengthDistance(uivector* values, size_t length, size_t distance)
; 1346 : {
; 1347 :   /*values in encoded vector are those used by deflate:
; 1348 :   0-255: literal bytes
; 1349 :   256: end
; 1350 :   257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
; 1351 :   286-287: invalid*/
; 1352 : 
; 1353 :   unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
; 1354 :   unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
; 1355 :   unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
; 1356 :   unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);
; 1357 : 
; 1358 :   uivector_push_back(values, length_code + FIRST_LENGTH_CODE_INDEX);
; 1359 :   uivector_push_back(values, extra_length);
; 1360 :   uivector_push_back(values, dist_code);
; 1361 :   uivector_push_back(values, extra_distance);
; 1362 : }
; 1363 : 
; 1364 : static const unsigned HASH_NUM_VALUES = 65536;
; 1365 : static const unsigned HASH_NUM_CHARACTERS = 3;
; 1366 : static const unsigned HASH_SHIFT = 2;
; 1367 : /*
; 1368 : The HASH_NUM_CHARACTERS value is used to make encoding faster by using longer
; 1369 : sequences to generate a hash value from the stream bytes. Setting it to 3
; 1370 : gives exactly the same compression as the brute force method, since deflate's
; 1371 : run length encoding starts with lengths of 3. Setting it to higher values,
; 1372 : like 6, can make the encoding faster (not always though!), but will cause the
; 1373 : encoding to miss any length between 3 and this value, so that the compression
; 1374 : may be worse (but this can vary too depending on the image, sometimes it is
; 1375 : even a bit better instead).
; 1376 : The HASH_NUM_VALUES is the amount of unique possible hash values that
; 1377 : combinations of bytes can give, the higher it is the more memory is needed, but
; 1378 : if it's too low the advantage of hashing is gone.
; 1379 : */
; 1380 : 
; 1381 : typedef struct Hash
; 1382 : {
; 1383 :   int* head; /*hash value to head circular pos*/
; 1384 :   int* val; /*circular pos to hash value*/
; 1385 :   /*circular pos to prev circular pos*/
; 1386 :   unsigned short* chain;
; 1387 :   unsigned short* zeros;
; 1388 : } Hash;
; 1389 : 
; 1390 : static unsigned hash_init(Hash* hash, unsigned windowsize)
; 1391 : {
; 1392 :   unsigned i;
; 1393 :   hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
; 1394 :   hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
; 1395 :   hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1396 :   hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1397 : 
; 1398 :   if(!hash->head || !hash->val || !hash->chain || !hash->zeros) return 83; /*alloc fail*/
; 1399 : 
; 1400 :   /*initialize hash table*/
; 1401 :   for(i = 0; i < HASH_NUM_VALUES; i++) hash->head[i] = -1;
; 1402 :   for(i = 0; i < windowsize; i++) hash->val[i] = -1;
; 1403 :   for(i = 0; i < windowsize; i++) hash->chain[i] = i; /*same value as index indicates uninitialized*/
; 1404 : 
; 1405 :   return 0;
; 1406 : }
; 1407 : 
; 1408 : static void hash_cleanup(Hash* hash)
; 1409 : {
; 1410 :   lodepng_free(hash->head);
; 1411 :   lodepng_free(hash->val);
; 1412 :   lodepng_free(hash->chain);
; 1413 :   lodepng_free(hash->zeros);
; 1414 : }
; 1415 : 
; 1416 : static unsigned getHash(const unsigned char* data, size_t size, size_t pos)
; 1417 : {
; 1418 :   unsigned result = 0;
; 1419 :   size_t amount, i;
; 1420 :   if(pos >= size) return 0;
; 1421 :   amount = HASH_NUM_CHARACTERS;
; 1422 :   if(pos + amount >= size) amount = size - pos;
; 1423 :   for(i = 0; i < amount; i++) result ^= (data[pos + i] << (i * HASH_SHIFT));
; 1424 :   return result % HASH_NUM_VALUES;
; 1425 : }
; 1426 : 
; 1427 : static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)
; 1428 : {
; 1429 :   const unsigned char* start = data + pos;
; 1430 :   const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
; 1431 :   if(end > data + size) end = data + size;
; 1432 :   data = start;
; 1433 :   while (data != end && *data == 0) data++;
; 1434 :   /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
; 1435 :   return (unsigned)(data - start);
; 1436 : }
; 1437 : 
; 1438 : static void updateHashChain(Hash* hash, size_t pos, int hashval, unsigned windowsize)
; 1439 : {
; 1440 :   unsigned wpos = pos % windowsize;
; 1441 :   hash->val[wpos] = hashval;
; 1442 :   if(hash->head[hashval] != -1) hash->chain[wpos] = hash->head[hashval];
; 1443 :   hash->head[hashval] = wpos;
; 1444 : }
; 1445 : 
; 1446 : /*
; 1447 : LZ77-encode the data. Return value is error code. The input are raw bytes, the output
; 1448 : is in the form of unsigned integers with codes representing for example literal bytes, or
; 1449 : length/distance pairs.
; 1450 : It uses a hash table technique to let it encode faster. When doing LZ77 encoding, a
; 1451 : sliding window (of windowsize) is used, and all past bytes in that window can be used as
; 1452 : the "dictionary". A brute force search through all possible distances would be slow, and
; 1453 : this hash technique is one out of several ways to speed this up.
; 1454 : */
; 1455 : static unsigned encodeLZ77(uivector* out, Hash* hash,
; 1456 :                            const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
; 1457 :                            unsigned minmatch, unsigned nicematch, unsigned lazymatching)
; 1458 : {
; 1459 :   unsigned short numzeros = 0;
; 1460 :   int usezeros = windowsize >= 8192; /*for small window size, the 'max chain length' optimization does a better job*/
; 1461 :   unsigned pos, i, error = 0;
; 1462 :   /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
; 1463 :   unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8;
; 1464 :   unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;
; 1465 : 
; 1466 :   if(!error)
; 1467 :   {
; 1468 :     unsigned offset; /*the offset represents the distance in LZ77 terminology*/
; 1469 :     unsigned length;
; 1470 :     unsigned lazy = 0;
; 1471 :     unsigned lazylength = 0, lazyoffset = 0;
; 1472 :     unsigned hashval;
; 1473 :     unsigned current_offset, current_length;
; 1474 :     const unsigned char *lastptr, *foreptr, *backptr;
; 1475 :     unsigned short hashpos, prevpos;
; 1476 : 
; 1477 :     for(pos = inpos; pos < insize; pos++)
; 1478 :     {
; 1479 :       size_t wpos = pos % windowsize; /*position for in 'circular' hash buffers*/
; 1480 : 
; 1481 :       hashval = getHash(in, insize, pos);
; 1482 :       updateHashChain(hash, pos, hashval, windowsize);
; 1483 : 
; 1484 :       if(usezeros && hashval == 0)
; 1485 :       {
; 1486 :         numzeros = countZeros(in, insize, pos);
; 1487 :         hash->zeros[wpos] = numzeros;
; 1488 :       }
; 1489 : 
; 1490 :       /*the length and offset found for the current position*/
; 1491 :       length = 0;
; 1492 :       offset = 0;
; 1493 : 
; 1494 :       prevpos = hash->head[hashval];
; 1495 :       hashpos = hash->chain[prevpos];
; 1496 : 
; 1497 :       lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];
; 1498 : 
; 1499 :       /*search for the longest string*/
; 1500 :       if(hash->val[wpos] == (int)hashval)
; 1501 :       {
; 1502 :         unsigned chainlength = 0;
; 1503 :         for(;;)
; 1504 :         {
; 1505 :           /*stop when went completely around the circular buffer*/
; 1506 :           if(prevpos < wpos && hashpos > prevpos && hashpos <= wpos) break;
; 1507 :           if(prevpos > wpos && (hashpos <= wpos || hashpos > prevpos)) break;
; 1508 :           if(chainlength++ >= maxchainlength) break;
; 1509 : 
; 1510 :           current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;
; 1511 :           if(current_offset > 0)
; 1512 :           {
; 1513 :             /*test the next characters*/
; 1514 :             foreptr = &in[pos];
; 1515 :             backptr = &in[pos - current_offset];
; 1516 : 
; 1517 :             /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
; 1518 :             if(usezeros && hashval == 0 && hash->val[hashpos] == 0 /*hashval[hashpos] may be out of date*/)
; 1519 :             {
; 1520 :               unsigned short skip = hash->zeros[hashpos];
; 1521 :               if(skip > numzeros) skip = numzeros;
; 1522 :               backptr += skip;
; 1523 :               foreptr += skip;
; 1524 :             }
; 1525 : 
; 1526 :             /* multiple checks at once per array bounds check */
; 1527 :             while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
; 1528 :             {
; 1529 :               ++backptr;
; 1530 :               ++foreptr;
; 1531 :             }
; 1532 :             current_length = (unsigned)(foreptr - &in[pos]);
; 1533 : 
; 1534 :             if(current_length > length)
; 1535 :             {
; 1536 :               length = current_length; /*the longest length*/
; 1537 :               offset = current_offset; /*the offset that is related to this longest length*/
; 1538 :               /*jump out once a length of max length is found (speed gain)*/
; 1539 :               if(current_length >= nicematch || current_length == MAX_SUPPORTED_DEFLATE_LENGTH) break;
; 1540 :             }
; 1541 :           }
; 1542 : 
; 1543 :           if(hashpos == hash->chain[hashpos]) break;
; 1544 : 
; 1545 :           prevpos = hashpos;
; 1546 :           hashpos = hash->chain[hashpos];
; 1547 :         }
; 1548 :       }
; 1549 : 
; 1550 :       if(lazymatching)
; 1551 :       {
; 1552 :         if(!lazy && length >= 3 && length <= maxlazymatch && length < MAX_SUPPORTED_DEFLATE_LENGTH)
; 1553 :         {
; 1554 :           lazy = 1;
; 1555 :           lazylength = length;
; 1556 :           lazyoffset = offset;
; 1557 :           continue; /*try the next byte*/
; 1558 :         }
; 1559 :         if(lazy)
; 1560 :         {
; 1561 :           lazy = 0;
; 1562 :           if(pos == 0) ERROR_BREAK(81);
; 1563 :           if(length > lazylength + 1)
; 1564 :           {
; 1565 :             /*push the previous character as literal*/
; 1566 :             if(!uivector_push_back(out, in[pos - 1])) ERROR_BREAK(83 /*alloc fail*/);
; 1567 :           }
; 1568 :           else
; 1569 :           {
; 1570 :             length = lazylength;
; 1571 :             offset = lazyoffset;
; 1572 :             hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
; 1573 :             pos--;
; 1574 :           }
; 1575 :         }
; 1576 :       }
; 1577 :       if(length >= 3 && offset > windowsize) ERROR_BREAK(86 /*too big (or overflown negative) offset*/);
; 1578 : 
; 1579 :       /**encode it as length/distance pair or literal value**/
; 1580 :       if(length < 3) /*only lengths of 3 or higher are supported as length/distance pair*/
; 1581 :       {
; 1582 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1583 :       }
; 1584 :       else if(length < minmatch || (length == 3 && offset > 4096))
; 1585 :       {
; 1586 :         /*compensate for the fact that longer offsets have more extra bits, a
; 1587 :         length of only 3 may be not worth it then*/
; 1588 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1589 :       }
; 1590 :       else
; 1591 :       {
; 1592 :         addLengthDistance(out, length, offset);
; 1593 :         for(i = 1; i < length; i++)
; 1594 :         {
; 1595 :           pos++;
; 1596 :           hashval = getHash(in, insize, pos);
; 1597 :           updateHashChain(hash, pos, hashval, windowsize);
; 1598 :           if(usezeros && hashval == 0)
; 1599 :           {
; 1600 :             hash->zeros[pos % windowsize] = countZeros(in, insize, pos);
; 1601 :           }
; 1602 :         }
; 1603 :       }
; 1604 : 
; 1605 :     } /*end of the loop through each character of input*/
; 1606 :   } /*end of "if(!error)"*/
; 1607 : 
; 1608 :   return error;
; 1609 : }
; 1610 : 
; 1611 : /* /////////////////////////////////////////////////////////////////////////// */
; 1612 : 
; 1613 : static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)
; 1614 : {
; 1615 :   /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
; 1616 :   2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/
; 1617 : 
; 1618 :   size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
; 1619 :   unsigned datapos = 0;
; 1620 :   for(i = 0; i < numdeflateblocks; i++)
; 1621 :   {
; 1622 :     unsigned BFINAL, BTYPE, LEN, NLEN;
; 1623 :     unsigned char firstbyte;
; 1624 : 
; 1625 :     BFINAL = (i == numdeflateblocks - 1);
; 1626 :     BTYPE = 0;
; 1627 : 
; 1628 :     firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1) << 1) + ((BTYPE & 2) << 1));
; 1629 :     ucvector_push_back(out, firstbyte);
; 1630 : 
; 1631 :     LEN = 65535;
; 1632 :     if(datasize - datapos < 65535) LEN = (unsigned)datasize - datapos;
; 1633 :     NLEN = 65535 - LEN;
; 1634 : 
; 1635 :     ucvector_push_back(out, (unsigned char)(LEN % 256));
; 1636 :     ucvector_push_back(out, (unsigned char)(LEN / 256));
; 1637 :     ucvector_push_back(out, (unsigned char)(NLEN % 256));
; 1638 :     ucvector_push_back(out, (unsigned char)(NLEN / 256));
; 1639 : 
; 1640 :     /*Decompressed data*/
; 1641 :     for(j = 0; j < 65535 && datapos < datasize; j++)
; 1642 :     {
; 1643 :       ucvector_push_back(out, data[datapos++]);
; 1644 :     }
; 1645 :   }
; 1646 : 
; 1647 :   return 0;
; 1648 : }
; 1649 : 
; 1650 : /*
; 1651 : write the lz77-encoded data, which has lit, len and dist codes, to compressed stream using huffman trees.
; 1652 : tree_ll: the tree for lit and len codes.
; 1653 : tree_d: the tree for distance codes.
; 1654 : */
; 1655 : static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
; 1656 :                           const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
; 1657 : {
; 1658 :   size_t i = 0;
; 1659 :   for(i = 0; i < lz77_encoded->size; i++)
; 1660 :   {
; 1661 :     unsigned val = lz77_encoded->data[i];
; 1662 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_ll, val), HuffmanTree_getLength(tree_ll, val));
; 1663 :     if(val > 256) /*for a length code, 3 more things have to be added*/
; 1664 :     {
; 1665 :       unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
; 1666 :       unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
; 1667 :       unsigned length_extra_bits = lz77_encoded->data[++i];
; 1668 : 
; 1669 :       unsigned distance_code = lz77_encoded->data[++i];
; 1670 : 
; 1671 :       unsigned distance_index = distance_code;
; 1672 :       unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
; 1673 :       unsigned distance_extra_bits = lz77_encoded->data[++i];
; 1674 : 
; 1675 :       addBitsToStream(bp, out, length_extra_bits, n_length_extra_bits);
; 1676 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
; 1677 :                        HuffmanTree_getLength(tree_d, distance_code));
; 1678 :       addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
; 1679 :     }
; 1680 :   }
; 1681 : }
; 1682 : 
; 1683 : /*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
; 1684 : static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,
; 1685 :                                const unsigned char* data, size_t datapos, size_t dataend,
; 1686 :                                const LodePNGCompressSettings* settings, int final)
; 1687 : {
; 1688 :   unsigned error = 0;
; 1689 : 
; 1690 :   /*
; 1691 :   A block is compressed as follows: The PNG data is lz77 encoded, resulting in
; 1692 :   literal bytes and length/distance pairs. This is then huffman compressed with
; 1693 :   two huffman trees. One huffman tree is used for the lit and len values ("ll"),
; 1694 :   another huffman tree is used for the dist values ("d"). These two trees are
; 1695 :   stored using their code lengths, and to compress even more these code lengths
; 1696 :   are also run-length encoded and huffman compressed. This gives a huffman tree
; 1697 :   of code lengths "cl". The code lenghts used to describe this third tree are
; 1698 :   the code length code lengths ("clcl").
; 1699 :   */
; 1700 : 
; 1701 :   /*The lz77 encoded data, represented with integers since there will also be length and distance codes in it*/
; 1702 :   uivector lz77_encoded;
; 1703 :   HuffmanTree tree_ll; /*tree for lit,len values*/
; 1704 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1705 :   HuffmanTree tree_cl; /*tree for encoding the code lengths representing tree_ll and tree_d*/
; 1706 :   uivector frequencies_ll; /*frequency of lit,len codes*/
; 1707 :   uivector frequencies_d; /*frequency of dist codes*/
; 1708 :   uivector frequencies_cl; /*frequency of code length codes*/
; 1709 :   uivector bitlen_lld; /*lit,len,dist code lenghts (int bits), literally (without repeat codes).*/
; 1710 :   uivector bitlen_lld_e; /*bitlen_lld encoded with repeat codes (this is a rudemtary run length compression)*/
; 1711 :   /*bitlen_cl is the code length code lengths ("clcl"). The bit lengths of codes to represent tree_cl
; 1712 :   (these are written as is in the file, it would be crazy to compress these using yet another huffman
; 1713 :   tree that needs to be represented by yet another set of code lengths)*/
; 1714 :   uivector bitlen_cl;
; 1715 :   size_t datasize = dataend - datapos;
; 1716 : 
; 1717 :   /*
; 1718 :   Due to the huffman compression of huffman tree representations ("two levels"), there are some anologies:
; 1719 :   bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
; 1720 :   bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
; 1721 :   bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
; 1722 :   */
; 1723 : 
; 1724 :   unsigned BFINAL = final;
; 1725 :   size_t numcodes_ll, numcodes_d, i;
; 1726 :   unsigned HLIT, HDIST, HCLEN;
; 1727 : 
; 1728 :   uivector_init(&lz77_encoded);
; 1729 :   HuffmanTree_init(&tree_ll);
; 1730 :   HuffmanTree_init(&tree_d);
; 1731 :   HuffmanTree_init(&tree_cl);
; 1732 :   uivector_init(&frequencies_ll);
; 1733 :   uivector_init(&frequencies_d);
; 1734 :   uivector_init(&frequencies_cl);
; 1735 :   uivector_init(&bitlen_lld);
; 1736 :   uivector_init(&bitlen_lld_e);
; 1737 :   uivector_init(&bitlen_cl);
; 1738 : 
; 1739 :   /*This while loop never loops due to a break at the end, it is here to
; 1740 :   allow breaking out of it to the cleanup phase on error conditions.*/
; 1741 :   while(!error)
; 1742 :   {
; 1743 :     if(settings->use_lz77)
; 1744 :     {
; 1745 :       error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1746 :                          settings->minmatch, settings->nicematch, settings->lazymatching);
; 1747 :       if(error) break;
; 1748 :     }
; 1749 :     else
; 1750 :     {
; 1751 :       if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83 /*alloc fail*/);
; 1752 :       for(i = datapos; i < dataend; i++) lz77_encoded.data[i] = data[i]; /*no LZ77, but still will be Huffman compressed*/
; 1753 :     }
; 1754 : 
; 1755 :     if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1756 :     if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1757 : 
; 1758 :     /*Count the frequencies of lit, len and dist codes*/
; 1759 :     for(i = 0; i < lz77_encoded.size; i++)
; 1760 :     {
; 1761 :       unsigned symbol = lz77_encoded.data[i];
; 1762 :       frequencies_ll.data[symbol]++;
; 1763 :       if(symbol > 256)
; 1764 :       {
; 1765 :         unsigned dist = lz77_encoded.data[i + 2];
; 1766 :         frequencies_d.data[dist]++;
; 1767 :         i += 3;
; 1768 :       }
; 1769 :     }
; 1770 :     frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/
; 1771 : 
; 1772 :     /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
; 1773 :     error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
; 1774 :     if(error) break;
; 1775 :     /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
; 1776 :     error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
; 1777 :     if(error) break;
; 1778 : 
; 1779 :     numcodes_ll = tree_ll.numcodes; if(numcodes_ll > 286) numcodes_ll = 286;
; 1780 :     numcodes_d = tree_d.numcodes; if(numcodes_d > 30) numcodes_d = 30;
; 1781 :     /*store the code lengths of both generated trees in bitlen_lld*/
; 1782 :     for(i = 0; i < numcodes_ll; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
; 1783 :     for(i = 0; i < numcodes_d; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));
; 1784 : 
; 1785 :     /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
; 1786 :     17 (3-10 zeroes), 18 (11-138 zeroes)*/
; 1787 :     for(i = 0; i < (unsigned)bitlen_lld.size; i++)
; 1788 :     {
; 1789 :       unsigned j = 0; /*amount of repititions*/
; 1790 :       while(i + j + 1 < (unsigned)bitlen_lld.size && bitlen_lld.data[i + j + 1] == bitlen_lld.data[i]) j++;
; 1791 : 
; 1792 :       if(bitlen_lld.data[i] == 0 && j >= 2) /*repeat code for zeroes*/
; 1793 :       {
; 1794 :         j++; /*include the first zero*/
; 1795 :         if(j <= 10) /*repeat code 17 supports max 10 zeroes*/
; 1796 :         {
; 1797 :           uivector_push_back(&bitlen_lld_e, 17);
; 1798 :           uivector_push_back(&bitlen_lld_e, j - 3);
; 1799 :         }
; 1800 :         else /*repeat code 18 supports max 138 zeroes*/
; 1801 :         {
; 1802 :           if(j > 138) j = 138;
; 1803 :           uivector_push_back(&bitlen_lld_e, 18);
; 1804 :           uivector_push_back(&bitlen_lld_e, j - 11);
; 1805 :         }
; 1806 :         i += (j - 1);
; 1807 :       }
; 1808 :       else if(j >= 3) /*repeat code for value other than zero*/
; 1809 :       {
; 1810 :         size_t k;
; 1811 :         unsigned num = j / 6, rest = j % 6;
; 1812 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1813 :         for(k = 0; k < num; k++)
; 1814 :         {
; 1815 :           uivector_push_back(&bitlen_lld_e, 16);
; 1816 :           uivector_push_back(&bitlen_lld_e, 6 - 3);
; 1817 :         }
; 1818 :         if(rest >= 3)
; 1819 :         {
; 1820 :           uivector_push_back(&bitlen_lld_e, 16);
; 1821 :           uivector_push_back(&bitlen_lld_e, rest - 3);
; 1822 :         }
; 1823 :         else j -= rest;
; 1824 :         i += j;
; 1825 :       }
; 1826 :       else /*too short to benefit from repeat code*/
; 1827 :       {
; 1828 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1829 :       }
; 1830 :     }
; 1831 : 
; 1832 :     /*generate tree_cl, the huffmantree of huffmantrees*/
; 1833 : 
; 1834 :     if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1835 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1836 :     {
; 1837 :       frequencies_cl.data[bitlen_lld_e.data[i]]++;
; 1838 :       /*after a repeat code come the bits that specify the number of repetitions,
; 1839 :       those don't need to be in the frequencies_cl calculation*/
; 1840 :       if(bitlen_lld_e.data[i] >= 16) i++;
; 1841 :     }
; 1842 : 
; 1843 :     error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
; 1844 :                                             frequencies_cl.size, frequencies_cl.size, 7);
; 1845 :     if(error) break;
; 1846 : 
; 1847 :     if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
; 1848 :     for(i = 0; i < tree_cl.numcodes; i++)
; 1849 :     {
; 1850 :       /*lenghts of code length tree is in the order as specified by deflate*/
; 1851 :       bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
; 1852 :     }
; 1853 :     while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
; 1854 :     {
; 1855 :       /*remove zeros at the end, but minimum size must be 4*/
; 1856 :       if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
; 1857 :     }
; 1858 :     if(error) break;
; 1859 : 
; 1860 :     /*
; 1861 :     Write everything into the output
; 1862 : 
; 1863 :     After the BFINAL and BTYPE, the dynamic block consists out of the following:
; 1864 :     - 5 bits HLIT, 5 bits HDIST, 4 bits HCLEN
; 1865 :     - (HCLEN+4)*3 bits code lengths of code length alphabet
; 1866 :     - HLIT + 257 code lenghts of lit/length alphabet (encoded using the code length
; 1867 :       alphabet, + possible repetition codes 16, 17, 18)
; 1868 :     - HDIST + 1 code lengths of distance alphabet (encoded using the code length
; 1869 :       alphabet, + possible repetition codes 16, 17, 18)
; 1870 :     - compressed data
; 1871 :     - 256 (end code)
; 1872 :     */
; 1873 : 
; 1874 :     /*Write block type*/
; 1875 :     addBitToStream(bp, out, BFINAL);
; 1876 :     addBitToStream(bp, out, 0); /*first bit of BTYPE "dynamic"*/
; 1877 :     addBitToStream(bp, out, 1); /*second bit of BTYPE "dynamic"*/
; 1878 : 
; 1879 :     /*write the HLIT, HDIST and HCLEN values*/
; 1880 :     HLIT = (unsigned)(numcodes_ll - 257);
; 1881 :     HDIST = (unsigned)(numcodes_d - 1);
; 1882 :     HCLEN = (unsigned)bitlen_cl.size - 4;
; 1883 :     /*trim zeroes for HCLEN. HLIT and HDIST were already trimmed at tree creation*/
; 1884 :     while(!bitlen_cl.data[HCLEN + 4 - 1] && HCLEN > 0) HCLEN--;
; 1885 :     addBitsToStream(bp, out, HLIT, 5);
; 1886 :     addBitsToStream(bp, out, HDIST, 5);
; 1887 :     addBitsToStream(bp, out, HCLEN, 4);
; 1888 : 
; 1889 :     /*write the code lenghts of the code length alphabet*/
; 1890 :     for(i = 0; i < HCLEN + 4; i++) addBitsToStream(bp, out, bitlen_cl.data[i], 3);
; 1891 : 
; 1892 :     /*write the lenghts of the lit/len AND the dist alphabet*/
; 1893 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1894 :     {
; 1895 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
; 1896 :                        HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
; 1897 :       /*extra bits of repeat codes*/
; 1898 :       if(bitlen_lld_e.data[i] == 16) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 2);
; 1899 :       else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
; 1900 :       else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
; 1901 :     }
; 1902 : 
; 1903 :     /*write the compressed data symbols*/
; 1904 :     writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1905 :     /*error: the length of the end code 256 must be larger than 0*/
; 1906 :     if(HuffmanTree_getLength(&tree_ll, 256) == 0) ERROR_BREAK(64);
; 1907 : 
; 1908 :     /*write the end code*/
; 1909 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1910 : 
; 1911 :     break; /*end of error-while*/
; 1912 :   }
; 1913 : 
; 1914 :   /*cleanup*/
; 1915 :   uivector_cleanup(&lz77_encoded);
; 1916 :   HuffmanTree_cleanup(&tree_ll);
; 1917 :   HuffmanTree_cleanup(&tree_d);
; 1918 :   HuffmanTree_cleanup(&tree_cl);
; 1919 :   uivector_cleanup(&frequencies_ll);
; 1920 :   uivector_cleanup(&frequencies_d);
; 1921 :   uivector_cleanup(&frequencies_cl);
; 1922 :   uivector_cleanup(&bitlen_lld_e);
; 1923 :   uivector_cleanup(&bitlen_lld);
; 1924 :   uivector_cleanup(&bitlen_cl);
; 1925 : 
; 1926 :   return error;
; 1927 : }
; 1928 : 
; 1929 : static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,
; 1930 :                              const unsigned char* data,
; 1931 :                              size_t datapos, size_t dataend,
; 1932 :                              const LodePNGCompressSettings* settings, int final)
; 1933 : {
; 1934 :   HuffmanTree tree_ll; /*tree for literal values and length codes*/
; 1935 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1936 : 
; 1937 :   unsigned BFINAL = final;
; 1938 :   unsigned error = 0;
; 1939 :   size_t i;
; 1940 : 
; 1941 :   HuffmanTree_init(&tree_ll);
; 1942 :   HuffmanTree_init(&tree_d);
; 1943 : 
; 1944 :   generateFixedLitLenTree(&tree_ll);
; 1945 :   generateFixedDistanceTree(&tree_d);
; 1946 : 
; 1947 :   addBitToStream(bp, out, BFINAL);
; 1948 :   addBitToStream(bp, out, 1); /*first bit of BTYPE*/
; 1949 :   addBitToStream(bp, out, 0); /*second bit of BTYPE*/
; 1950 : 
; 1951 :   if(settings->use_lz77) /*LZ77 encoded*/
; 1952 :   {
; 1953 :     uivector lz77_encoded;
; 1954 :     uivector_init(&lz77_encoded);
; 1955 :     error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1956 :                        settings->minmatch, settings->nicematch, settings->lazymatching);
; 1957 :     if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1958 :     uivector_cleanup(&lz77_encoded);
; 1959 :   }
; 1960 :   else /*no LZ77, but still will be Huffman compressed*/
; 1961 :   {
; 1962 :     for(i = datapos; i < dataend; i++)
; 1963 :     {
; 1964 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
; 1965 :     }
; 1966 :   }
; 1967 :   /*add END code*/
; 1968 :   if(!error) addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1969 : 
; 1970 :   /*cleanup*/
; 1971 :   HuffmanTree_cleanup(&tree_ll);
; 1972 :   HuffmanTree_cleanup(&tree_d);
; 1973 : 
; 1974 :   return error;
; 1975 : }
; 1976 : 
; 1977 : static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
; 1978 :                                  const LodePNGCompressSettings* settings)
; 1979 : {
; 1980 :   unsigned error = 0;
; 1981 :   size_t i, blocksize, numdeflateblocks;
; 1982 :   size_t bp = 0; /*the bit pointer*/
; 1983 :   Hash hash;
; 1984 : 
; 1985 :   if(settings->btype > 2) return 61;
; 1986 :   else if(settings->btype == 0) return deflateNoCompression(out, in, insize);
; 1987 :   else if(settings->btype == 1) blocksize = insize;
; 1988 :   else /*if(settings->btype == 2)*/
; 1989 :   {
; 1990 :     blocksize = insize / 8 + 8;
; 1991 :     if(blocksize < 65535) blocksize = 65535;
; 1992 :   }
; 1993 : 
; 1994 :   numdeflateblocks = (insize + blocksize - 1) / blocksize;
; 1995 :   if(numdeflateblocks == 0) numdeflateblocks = 1;
; 1996 : 
; 1997 :   error = hash_init(&hash, settings->windowsize);
; 1998 :   if(error) return error;
; 1999 : 
; 2000 :   for(i = 0; i < numdeflateblocks && !error; i++)
; 2001 :   {
; 2002 :     int final = i == numdeflateblocks - 1;
; 2003 :     size_t start = i * blocksize;
; 2004 :     size_t end = start + blocksize;
; 2005 :     if(end > insize) end = insize;
; 2006 : 
; 2007 :     if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
; 2008 :     else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
; 2009 :   }
; 2010 : 
; 2011 :   hash_cleanup(&hash);
; 2012 : 
; 2013 :   return error;
; 2014 : }
; 2015 : 
; 2016 : unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
; 2017 :                          const unsigned char* in, size_t insize,
; 2018 :                          const LodePNGCompressSettings* settings)
; 2019 : {
; 2020 :   unsigned error;
; 2021 :   ucvector v;
; 2022 :   ucvector_init_buffer(&v, *out, *outsize);
; 2023 :   error = lodepng_deflatev(&v, in, insize, settings);
; 2024 :   *out = v.data;
; 2025 :   *outsize = v.size;
; 2026 :   return error;
; 2027 : }
; 2028 : 
; 2029 : static unsigned deflate(unsigned char** out, size_t* outsize,
; 2030 :                         const unsigned char* in, size_t insize,
; 2031 :                         const LodePNGCompressSettings* settings)
; 2032 : {
; 2033 :   if(settings->custom_deflate)
; 2034 :   {
; 2035 :     return settings->custom_deflate(out, outsize, in, insize, settings);
; 2036 :   }
; 2037 :   else
; 2038 :   {
; 2039 :     return lodepng_deflate(out, outsize, in, insize, settings);
; 2040 :   }
; 2041 : }
; 2042 : 
; 2043 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2044 : 
; 2045 : /* ////////////////////////////////////////////////////////////////////////// */
; 2046 : /* / Adler32                                                                  */
; 2047 : /* ////////////////////////////////////////////////////////////////////////// */
; 2048 : 
; 2049 : static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
; 2050 : {
; 2051 :    unsigned s1 = adler & 0xffff;
; 2052 :    unsigned s2 = (adler >> 16) & 0xffff;
; 2053 : 
; 2054 :   while(len > 0)
; 2055 :   {
; 2056 :     /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
; 2057 :     unsigned amount = len > 5550 ? 5550 : len;
; 2058 :     len -= amount;
; 2059 :     while(amount > 0)
; 2060 :     {
; 2061 :       s1 += (*data++);
; 2062 :       s2 += s1;
; 2063 :       amount--;
; 2064 :     }
; 2065 :     s1 %= 65521;
; 2066 :     s2 %= 65521;
; 2067 :   }
; 2068 : 
; 2069 :   return (s2 << 16) | s1;
; 2070 : }
; 2071 : 
; 2072 : /*Return the adler32 of the bytes data[0..len-1]*/
; 2073 : static unsigned adler32(const unsigned char* data, unsigned len)
; 2074 : {
; 2075 :   return update_adler32(1L, data, len);
; 2076 : }
; 2077 : 
; 2078 : /* ////////////////////////////////////////////////////////////////////////// */
; 2079 : /* / Zlib                                                                   / */
; 2080 : /* ////////////////////////////////////////////////////////////////////////// */
; 2081 : 
; 2082 : #ifdef LODEPNG_COMPILE_DECODER
; 2083 : 
; 2084 : unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2085 :                                  size_t insize, const LodePNGDecompressSettings* settings)
; 2086 : {
; 2087 :   unsigned error = 0;
; 2088 :   unsigned CM, CINFO, FDICT;
; 2089 : 
; 2090 :   if(insize < 2) return 53; /*error, size of zlib data too small*/
; 2091 :   /*read information from zlib header*/
; 2092 :   if((in[0] * 256 + in[1]) % 31 != 0)
; 2093 :   {
; 2094 :     /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
; 2095 :     return 24;
; 2096 :   }
; 2097 : 
; 2098 :   CM = in[0] & 15;
; 2099 :   CINFO = (in[0] >> 4) & 15;
; 2100 :   /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
; 2101 :   FDICT = (in[1] >> 5) & 1;
; 2102 :   /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/
; 2103 : 
; 2104 :   if(CM != 8 || CINFO > 7)
; 2105 :   {
; 2106 :     /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
; 2107 :     return 25;
; 2108 :   }
; 2109 :   if(FDICT != 0)
; 2110 :   {
; 2111 :     /*error: the specification of PNG says about the zlib stream:
; 2112 :       "The additional flags shall not specify a preset dictionary."*/
; 2113 :     return 26;
; 2114 :   }
; 2115 : 
; 2116 :   error = inflate(out, outsize, in + 2, insize - 2, settings);
; 2117 :   if(error) return error;
; 2118 : 
; 2119 :   if(!settings->ignore_adler32)
; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/
; 2124 :   }
; 2125 : 
; 2126 :   return 0; /*no error*/
; 2127 : }
; 2128 : 
; 2129 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2130 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2131 : {
; 2132 :   if(settings->custom_zlib)
; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2134 :   else
; 2135 :     return lodepng_zlib_decompress(out, outsize, in, insize, settings);
; 2136 : }
; 2137 : 
; 2138 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2139 : 
; 2140 : #ifdef LODEPNG_COMPILE_ENCODER
; 2141 : 
; 2142 : unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2143 :                                size_t insize, const LodePNGCompressSettings* settings)
; 2144 : {
; 2145 :   /*initially, *out must be NULL and outsize 0, if you just give some random *out
; 2146 :   that's pointing to a non allocated buffer, this'll crash*/
; 2147 :   ucvector outv;
; 2148 :   size_t i;
; 2149 :   unsigned error;
; 2150 :   unsigned char* deflatedata = 0;
; 2151 :   size_t deflatesize = 0;
; 2152 : 
; 2153 :   unsigned ADLER32;
; 2154 :   /*zlib data: 1 byte CMF (CM+CINFO), 1 byte FLG, deflate data, 4 byte ADLER32 checksum of the Decompressed data*/
; 2155 :   unsigned CMF = 120; /*0b01111000: CM 8, CINFO 7. With CINFO 7, any window size up to 32768 can be used.*/
; 2156 :   unsigned FLEVEL = 0;
; 2157 :   unsigned FDICT = 0;
; 2158 :   unsigned CMFFLG = 256 * CMF + FDICT * 32 + FLEVEL * 64;
; 2159 :   unsigned FCHECK = 31 - CMFFLG % 31;
; 2160 :   CMFFLG += FCHECK;
; 2161 : 
; 2162 :   /*ucvector-controlled version of the output buffer, for dynamic array*/
; 2163 :   ucvector_init_buffer(&outv, *out, *outsize);
; 2164 : 
; 2165 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG / 256));
; 2166 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG % 256));
; 2167 : 
; 2168 :   error = deflate(&deflatedata, &deflatesize, in, insize, settings);
; 2169 : 
; 2170 :   if(!error)
; 2171 :   {
; 2172 :     ADLER32 = adler32(in, (unsigned)insize);
; 2173 :     for(i = 0; i < deflatesize; i++) ucvector_push_back(&outv, deflatedata[i]);
; 2174 :     lodepng_free(deflatedata);
; 2175 :     lodepng_add32bitInt(&outv, ADLER32);
; 2176 :   }
; 2177 : 
; 2178 :   *out = outv.data;
; 2179 :   *outsize = outv.size;
; 2180 : 
; 2181 :   return error;
; 2182 : }
; 2183 : 
; 2184 : /* compress using the default or custom zlib function */
; 2185 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2186 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2187 : {
; 2188 :   if(settings->custom_zlib)
; 2189 :   {
; 2190 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2191 :   }
; 2192 :   else
; 2193 :   {
; 2194 :     return lodepng_zlib_compress(out, outsize, in, insize, settings);
; 2195 :   }
; 2196 : }
; 2197 : 
; 2198 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2199 : 
; 2200 : #else /*no LODEPNG_COMPILE_ZLIB*/
; 2201 : 
; 2202 : #ifdef LODEPNG_COMPILE_DECODER
; 2203 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2204 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2205 : {
; 2206 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2207 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2208 : }
; 2209 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2210 : #ifdef LODEPNG_COMPILE_ENCODER
; 2211 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2212 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2213 : {
; 2214 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2215 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2216 : }
; 2217 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2218 : 
; 2219 : #endif /*LODEPNG_COMPILE_ZLIB*/
; 2220 : 
; 2221 : /* ////////////////////////////////////////////////////////////////////////// */
; 2222 : 
; 2223 : #ifdef LODEPNG_COMPILE_ENCODER
; 2224 : 
; 2225 : /*this is a good tradeoff between speed and compression ratio*/
; 2226 : #define DEFAULT_WINDOWSIZE 2048
; 2227 : 
; 2228 : void lodepng_compress_settings_init(LodePNGCompressSettings* settings)
; 2229 : {
; 2230 :   /*compress with dynamic huffman tree (not in the mathematical sense, just not the predefined one)*/
; 2231 :   settings->btype = 2;
; 2232 :   settings->use_lz77 = 1;
; 2233 :   settings->windowsize = DEFAULT_WINDOWSIZE;
; 2234 :   settings->minmatch = 3;
; 2235 :   settings->nicematch = 128;
; 2236 :   settings->lazymatching = 1;
; 2237 : 
; 2238 :   settings->custom_zlib = 0;
; 2239 :   settings->custom_deflate = 0;
; 2240 :   settings->custom_context = 0;
; 2241 : }
; 2242 : 
; 2243 : const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 3, 128, 1, 0, 0, 0};
; 2244 : 
; 2245 : 
; 2246 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2247 : 
; 2248 : #ifdef LODEPNG_COMPILE_DECODER
; 2249 : 
; 2250 : void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings)
; 2251 : {
; 2252 :   settings->ignore_adler32 = 0;
; 2253 : 
; 2254 :   settings->custom_zlib = 0;
; 2255 :   settings->custom_inflate = 0;
; 2256 :   settings->custom_context = 0;
; 2257 : }
; 2258 : 
; 2259 : const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0, 0, 0};
; 2260 : 
; 2261 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2262 : 
; 2263 : /* ////////////////////////////////////////////////////////////////////////// */
; 2264 : /* ////////////////////////////////////////////////////////////////////////// */
; 2265 : /* // End of Zlib related code. Begin of PNG related code.                 // */
; 2266 : /* ////////////////////////////////////////////////////////////////////////// */
; 2267 : /* ////////////////////////////////////////////////////////////////////////// */
; 2268 : 
; 2269 : #ifdef LODEPNG_COMPILE_PNG
; 2270 : 
; 2271 : /* ////////////////////////////////////////////////////////////////////////// */
; 2272 : /* / CRC32                                                                  / */
; 2273 : /* ////////////////////////////////////////////////////////////////////////// */
; 2274 : 
; 2275 : /* CRC polynomial: 0xedb88320 */
; 2276 : static unsigned lodepng_crc32_table[256] = {
; 2277 :            0u, 1996959894u, 3993919788u, 2567524794u,  124634137u, 1886057615u, 3915621685u, 2657392035u,
; 2278 :    249268274u, 2044508324u, 3772115230u, 2547177864u,  162941995u, 2125561021u, 3887607047u, 2428444049u,
; 2279 :    498536548u, 1789927666u, 4089016648u, 2227061214u,  450548861u, 1843258603u, 4107580753u, 2211677639u,
; 2280 :    325883990u, 1684777152u, 4251122042u, 2321926636u,  335633487u, 1661365465u, 4195302755u, 2366115317u,
; 2281 :    997073096u, 1281953886u, 3579855332u, 2724688242u, 1006888145u, 1258607687u, 3524101629u, 2768942443u,
; 2282 :    901097722u, 1119000684u, 3686517206u, 2898065728u,  853044451u, 1172266101u, 3705015759u, 2882616665u,
; 2283 :    651767980u, 1373503546u, 3369554304u, 3218104598u,  565507253u, 1454621731u, 3485111705u, 3099436303u,
; 2284 :    671266974u, 1594198024u, 3322730930u, 2970347812u,  795835527u, 1483230225u, 3244367275u, 3060149565u,
; 2285 :   1994146192u,   31158534u, 2563907772u, 4023717930u, 1907459465u,  112637215u, 2680153253u, 3904427059u,
; 2286 :   2013776290u,  251722036u, 2517215374u, 3775830040u, 2137656763u,  141376813u, 2439277719u, 3865271297u,
; 2287 :   1802195444u,  476864866u, 2238001368u, 4066508878u, 1812370925u,  453092731u, 2181625025u, 4111451223u,
; 2288 :   1706088902u,  314042704u, 2344532202u, 4240017532u, 1658658271u,  366619977u, 2362670323u, 4224994405u,
; 2289 :   1303535960u,  984961486u, 2747007092u, 3569037538u, 1256170817u, 1037604311u, 2765210733u, 3554079995u,
; 2290 :   1131014506u,  879679996u, 2909243462u, 3663771856u, 1141124467u,  855842277u, 2852801631u, 3708648649u,
; 2291 :   1342533948u,  654459306u, 3188396048u, 3373015174u, 1466479909u,  544179635u, 3110523913u, 3462522015u,
; 2292 :   1591671054u,  702138776u, 2966460450u, 3352799412u, 1504918807u,  783551873u, 3082640443u, 3233442989u,
; 2293 :   3988292384u, 2596254646u,   62317068u, 1957810842u, 3939845945u, 2647816111u,   81470997u, 1943803523u,
; 2294 :   3814918930u, 2489596804u,  225274430u, 2053790376u, 3826175755u, 2466906013u,  167816743u, 2097651377u,
; 2295 :   4027552580u, 2265490386u,  503444072u, 1762050814u, 4150417245u, 2154129355u,  426522225u, 1852507879u,
; 2296 :   4275313526u, 2312317920u,  282753626u, 1742555852u, 4189708143u, 2394877945u,  397917763u, 1622183637u,
; 2297 :   3604390888u, 2714866558u,  953729732u, 1340076626u, 3518719985u, 2797360999u, 1068828381u, 1219638859u,
; 2298 :   3624741850u, 2936675148u,  906185462u, 1090812512u, 3747672003u, 2825379669u,  829329135u, 1181335161u,
; 2299 :   3412177804u, 3160834842u,  628085408u, 1382605366u, 3423369109u, 3138078467u,  570562233u, 1426400815u,
; 2300 :   3317316542u, 2998733608u,  733239954u, 1555261956u, 3268935591u, 3050360625u,  752459403u, 1541320221u,
; 2301 :   2607071920u, 3965973030u, 1969922972u,   40735498u, 2617837225u, 3943577151u, 1913087877u,   83908371u,
; 2302 :   2512341634u, 3803740692u, 2075208622u,  213261112u, 2463272603u, 3855990285u, 2094854071u,  198958881u,
; 2303 :   2262029012u, 4057260610u, 1759359992u,  534414190u, 2176718541u, 4139329115u, 1873836001u,  414664567u,
; 2304 :   2282248934u, 4279200368u, 1711684554u,  285281116u, 2405801727u, 4167216745u, 1634467795u,  376229701u,
; 2305 :   2685067896u, 3608007406u, 1308918612u,  956543938u, 2808555105u, 3495958263u, 1231636301u, 1047427035u,
; 2306 :   2932959818u, 3654703836u, 1088359270u,  936918000u, 2847714899u, 3736837829u, 1202900863u,  817233897u,
; 2307 :   3183342108u, 3401237130u, 1404277552u,  615818150u, 3134207493u, 3453421203u, 1423857449u,  601450431u,
; 2308 :   3009837614u, 3294710456u, 1567103746u,  711928724u, 3020668471u, 3272380065u, 1510334235u,  755167117u
; 2309 : };
; 2310 : 
; 2311 : /*Return the CRC of the bytes buf[0..len-1].*/
; 2312 : unsigned lodepng_crc32(const unsigned char* buf, size_t len)
; 2313 : {
; 2314 :   unsigned c = 0xffffffffL;
; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)
; 2318 :   {
; 2319 :     c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
; 2320 :   }
; 2321 :   return c ^ 0xffffffffL;
; 2322 : }
; 2323 : 
; 2324 : /* ////////////////////////////////////////////////////////////////////////// */
; 2325 : /* / Reading and writing single bits and bytes from/to stream for LodePNG   / */
; 2326 : /* ////////////////////////////////////////////////////////////////////////// */
; 2327 : 
; 2328 : static unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream)
; 2329 : {
; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);
; 2331 :   (*bitpointer)++;
; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)
; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
; 2354 :   }
; 2355 :   (*bitpointer)++;
; 2356 : }
; 2357 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2358 : 
; 2359 : static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2360 : {
; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));
; 2363 :   else         bitstream[(*bitpointer) >> 3] |=  (1 << (7 - ((*bitpointer) & 0x7)));
; 2364 :   (*bitpointer)++;
; 2365 : }
; 2366 : 
; 2367 : /* ////////////////////////////////////////////////////////////////////////// */
; 2368 : /* / PNG chunks                                                             / */
; 2369 : /* ////////////////////////////////////////////////////////////////////////// */
; 2370 : 
; 2371 : unsigned lodepng_chunk_length(const unsigned char* chunk)
; 2372 : {
; 2373 :   return lodepng_read32bitInt(&chunk[0]);
; 2374 : }
; 2375 : 
; 2376 : void lodepng_chunk_type(char type[5], const unsigned char* chunk)
; 2377 : {
; 2378 :   unsigned i;
; 2379 :   for(i = 0; i < 4; i++) type[i] = chunk[4 + i];
; 2380 :   type[4] = 0; /*null termination char*/
; 2381 : }
; 2382 : 
; 2383 : unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type)
; 2384 : {
; 2385 :   if(strlen(type) != 4) return 0;
; 2386 :   return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);
; 2387 : }
; 2388 : 
; 2389 : unsigned char lodepng_chunk_ancillary(const unsigned char* chunk)
; 2390 : {
; 2391 :   return((chunk[4] & 32) != 0);
; 2392 : }
; 2393 : 
; 2394 : unsigned char lodepng_chunk_private(const unsigned char* chunk)
; 2395 : {
; 2396 :   return((chunk[6] & 32) != 0);
; 2397 : }
; 2398 : 
; 2399 : unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk)
; 2400 : {
; 2401 :   return((chunk[7] & 32) != 0);
; 2402 : }
; 2403 : 
; 2404 : unsigned char* lodepng_chunk_data(unsigned char* chunk)
; 2405 : {
; 2406 :   return &chunk[8];
; 2407 : }
; 2408 : 
; 2409 : const unsigned char* lodepng_chunk_data_const(const unsigned char* chunk)
; 2410 : {
; 2411 :   return &chunk[8];
; 2412 : }
; 2413 : 
; 2414 : unsigned lodepng_chunk_check_crc(const unsigned char* chunk)
; 2415 : {
; 2416 :   unsigned length = lodepng_chunk_length(chunk);
; 2417 :   unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);
; 2418 :   /*the CRC is taken of the data and the 4 chunk type letters, not the length*/
; 2419 :   unsigned checksum = lodepng_crc32(&chunk[4], length + 4);
; 2420 :   if(CRC != checksum) return 1;
; 2421 :   else return 0;
; 2422 : }
; 2423 : 
; 2424 : void lodepng_chunk_generate_crc(unsigned char* chunk)
; 2425 : {
; 2426 :   unsigned length = lodepng_chunk_length(chunk);
; 2427 :   unsigned CRC = lodepng_crc32(&chunk[4], length + 4);
; 2428 :   lodepng_set32bitInt(chunk + 8 + length, CRC);
; 2429 : }
; 2430 : 
; 2431 : unsigned char* lodepng_chunk_next(unsigned char* chunk)
; 2432 : {
; 2433 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2434 :   return &chunk[total_chunk_length];
; 2435 : }
; 2436 : 
; 2437 : const unsigned char* lodepng_chunk_next_const(const unsigned char* chunk)
; 2438 : {
; 2439 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2440 :   return &chunk[total_chunk_length];
; 2441 : }
; 2442 : 
; 2443 : unsigned lodepng_chunk_append(unsigned char** out, size_t* outlength, const unsigned char* chunk)
; 2444 : {
; 2445 :   unsigned i;
; 2446 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2447 :   unsigned char *chunk_start, *new_buffer;
; 2448 :   size_t new_length = (*outlength) + total_chunk_length;
; 2449 :   if(new_length < total_chunk_length || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2450 : 
; 2451 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2452 :   if(!new_buffer) return 83; /*alloc fail*/
; 2453 :   (*out) = new_buffer;
; 2454 :   (*outlength) = new_length;
; 2455 :   chunk_start = &(*out)[new_length - total_chunk_length];
; 2456 : 
; 2457 :   for(i = 0; i < total_chunk_length; i++) chunk_start[i] = chunk[i];
; 2458 : 
; 2459 :   return 0;
; 2460 : }
; 2461 : 
; 2462 : unsigned lodepng_chunk_create(unsigned char** out, size_t* outlength, unsigned length,
; 2463 :                               const char* type, const unsigned char* data)
; 2464 : {
; 2465 :   unsigned i;
; 2466 :   unsigned char *chunk, *new_buffer;
; 2467 :   size_t new_length = (*outlength) + length + 12;
; 2468 :   if(new_length < length + 12 || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2469 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2470 :   if(!new_buffer) return 83; /*alloc fail*/
; 2471 :   (*out) = new_buffer;
; 2472 :   (*outlength) = new_length;
; 2473 :   chunk = &(*out)[(*outlength) - length - 12];
; 2474 : 
; 2475 :   /*1: length*/
; 2476 :   lodepng_set32bitInt(chunk, (unsigned)length);
; 2477 : 
; 2478 :   /*2: chunk name (4 letters)*/
; 2479 :   chunk[4] = type[0];
; 2480 :   chunk[5] = type[1];
; 2481 :   chunk[6] = type[2];
; 2482 :   chunk[7] = type[3];
; 2483 : 
; 2484 :   /*3: the data*/
; 2485 :   for(i = 0; i < length; i++) chunk[8 + i] = data[i];
; 2486 : 
; 2487 :   /*4: CRC (of the chunkname characters and the data)*/
; 2488 :   lodepng_chunk_generate_crc(chunk);
; 2489 : 
; 2490 :   return 0;
; 2491 : }
; 2492 : 
; 2493 : /* ////////////////////////////////////////////////////////////////////////// */
; 2494 : /* / Color types and such                                                   / */
; 2495 : /* ////////////////////////////////////////////////////////////////////////// */
; 2496 : 
; 2497 : /*return type is a LodePNG error code*/
; 2498 : static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) /*bd = bitdepth*/
; 2499 : {
; 2500 :   switch(colortype)
; 2501 :   {
; 2502 :     case 0: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)) return 37; break; /*grey*/
; 2503 :     case 2: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGB*/
; 2504 :     case 3: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )) return 37; break; /*palette*/
; 2505 :     case 4: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*grey + alpha*/
; 2506 :     case 6: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGBA*/
; 2507 :     default: return 31;
; 2508 :   }
; 2509 :   return 0; /*allowed color type / bits combination*/
; 2510 : }
; 2511 : 
; 2512 : static unsigned getNumColorChannels(LodePNGColorType colortype)
; 2513 : {
; 2514 :   switch(colortype)
; 2515 :   {
; 2516 :     case 0: return 1; /*grey*/
; 2517 :     case 2: return 3; /*RGB*/
; 2518 :     case 3: return 1; /*palette*/
; 2519 :     case 4: return 2; /*grey + alpha*/
; 2520 :     case 6: return 4; /*RGBA*/
; 2521 :   }
; 2522 :   return 0; /*unexisting color type*/
; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;
; 2529 : }
; 2530 : 
; 2531 : /* ////////////////////////////////////////////////////////////////////////// */
; 2532 : 
; 2533 : void lodepng_color_mode_init(LodePNGColorMode* info)
; 2534 : {
; 2535 :   info->key_defined = 0;
; 2536 :   info->key_r = info->key_g = info->key_b = 0;
; 2537 :   info->colortype = LCT_RGBA;
; 2538 :   info->bitdepth = 8;
; 2539 :   info->palette = 0;
; 2540 :   info->palettesize = 0;
; 2541 : }
; 2542 : 
; 2543 : void lodepng_color_mode_cleanup(LodePNGColorMode* info)
; 2544 : {
; 2545 :   lodepng_palette_clear(info);
; 2546 : }
; 2547 : 
; 2548 : unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
; 2549 : {
; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;
; 2553 :   if(source->palette)
; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);
; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];
; 2558 :   }
; 2559 :   return 0;
; 2560 : }
; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);

  000d9	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _state$3[ebp+112]

; 73   :   free(ptr);

  000df	83 c4 04	 add	 esp, 4

; 6123 : }
; 6124 : 
; 6125 : State::State(const State& other)
; 6126 : {
; 6127 :   lodepng_state_init(this);
; 6128 :   lodepng_state_copy(this, &other);
; 6129 : }
; 6130 : 
; 6131 : State::~State()
; 6132 : {

  000e2	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _state$3[ebp], OFFSET ??_7State@lodepng@@6B@

; 74   : }
; 75   : #else /*LODEPNG_COMPILE_ALLOCATORS*/
; 76   : void* lodepng_malloc(size_t size);
; 77   : void* lodepng_realloc(void* ptr, size_t new_size);
; 78   : void lodepng_free(void* ptr);
; 79   : #endif /*LODEPNG_COMPILE_ALLOCATORS*/
; 80   : 
; 81   : /* ////////////////////////////////////////////////////////////////////////// */
; 82   : /* ////////////////////////////////////////////////////////////////////////// */
; 83   : /* // Tools for C, and common code for PNG and Zlib.                       // */
; 84   : /* ////////////////////////////////////////////////////////////////////////// */
; 85   : /* ////////////////////////////////////////////////////////////////////////// */
; 86   : 
; 87   : /*
; 88   : Often in case of an error a value is assigned to a variable and then it breaks
; 89   : out of a loop (to go to the cleanup phase of a function). This macro does that.
; 90   : It makes the error handling code shorter and more readable.
; 91   : 
; 92   : Example: if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83);
; 93   : */
; 94   : #define CERROR_BREAK(errorvar, code)\
; 95   : {\
; 96   :   errorvar = code;\
; 97   :   break;\
; 98   : }
; 99   : 
; 100  : /*version of CERROR_BREAK that assumes the common case where the error variable is named "error"*/
; 101  : #define ERROR_BREAK(code) CERROR_BREAK(error, code)
; 102  : 
; 103  : /*Set error var to the error code, and return it.*/
; 104  : #define CERROR_RETURN_ERROR(errorvar, code)\
; 105  : {\
; 106  :   errorvar = code;\
; 107  :   return code;\
; 108  : }
; 109  : 
; 110  : /*Try the code, if it returns error, also return the error.*/
; 111  : #define CERROR_TRY_RETURN(call)\
; 112  : {\
; 113  :   unsigned error = call;\
; 114  :   if(error) return error;\
; 115  : }
; 116  : 
; 117  : /*
; 118  : About uivector, ucvector and string:
; 119  : -All of them wrap dynamic arrays or text strings in a similar way.
; 120  : -LodePNG was originally written in C++. The vectors replace the std::vectors that were used in the C++ version.
; 121  : -The string tools are made to avoid problems with compilers that declare things like strncat as deprecated.
; 122  : -They're not used in the interface, only internally in this file as static functions.
; 123  : -As with many other structs in this file, the init and cleanup functions serve as ctor and dtor.
; 124  : */
; 125  : 
; 126  : #ifdef LODEPNG_COMPILE_ZLIB
; 127  : /*dynamic vector of unsigned ints*/
; 128  : typedef struct uivector
; 129  : {
; 130  :   unsigned* data;
; 131  :   size_t size; /*size in number of unsigned longs*/
; 132  :   size_t allocsize; /*allocated size in bytes*/
; 133  : } uivector;
; 134  : 
; 135  : static void uivector_cleanup(void* p)
; 136  : {
; 137  :   ((uivector*)p)->size = ((uivector*)p)->allocsize = 0;
; 138  :   lodepng_free(((uivector*)p)->data);
; 139  :   ((uivector*)p)->data = NULL;
; 140  : }
; 141  : 
; 142  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 143  : static unsigned uivector_resize(uivector* p, size_t size)
; 144  : {
; 145  :   if(size * sizeof(unsigned) > p->allocsize)
; 146  :   {
; 147  :     size_t newsize = size * sizeof(unsigned) * 2;
; 148  :     void* data = lodepng_realloc(p->data, newsize);
; 149  :     if(data)
; 150  :     {
; 151  :       p->allocsize = newsize;
; 152  :       p->data = (unsigned*)data;
; 153  :       p->size = size;
; 154  :     }
; 155  :     else return 0;
; 156  :   }
; 157  :   else p->size = size;
; 158  :   return 1;
; 159  : }
; 160  : 
; 161  : /*resize and give all new elements the value*/
; 162  : static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)
; 163  : {
; 164  :   size_t oldsize = p->size, i;
; 165  :   if(!uivector_resize(p, size)) return 0;
; 166  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 167  :   return 1;
; 168  : }
; 169  : 
; 170  : static void uivector_init(uivector* p)
; 171  : {
; 172  :   p->data = NULL;
; 173  :   p->size = p->allocsize = 0;
; 174  : }
; 175  : 
; 176  : #ifdef LODEPNG_COMPILE_ENCODER
; 177  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 178  : static unsigned uivector_push_back(uivector* p, unsigned c)
; 179  : {
; 180  :   if(!uivector_resize(p, p->size + 1)) return 0;
; 181  :   p->data[p->size - 1] = c;
; 182  :   return 1;
; 183  : }
; 184  : 
; 185  : /*copy q to p, returns 1 if success, 0 if failure ==> nothing done*/
; 186  : static unsigned uivector_copy(uivector* p, const uivector* q)
; 187  : {
; 188  :   size_t i;
; 189  :   if(!uivector_resize(p, q->size)) return 0;
; 190  :   for(i = 0; i < q->size; i++) p->data[i] = q->data[i];
; 191  :   return 1;
; 192  : }
; 193  : 
; 194  : static void uivector_swap(uivector* p, uivector* q)
; 195  : {
; 196  :   size_t tmp;
; 197  :   unsigned* tmpp;
; 198  :   tmp = p->size; p->size = q->size; q->size = tmp;
; 199  :   tmp = p->allocsize; p->allocsize = q->allocsize; q->allocsize = tmp;
; 200  :   tmpp = p->data; p->data = q->data; q->data = tmpp;
; 201  : }
; 202  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 203  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 204  : 
; 205  : /* /////////////////////////////////////////////////////////////////////////// */
; 206  : 
; 207  : /*dynamic vector of unsigned chars*/
; 208  : typedef struct ucvector
; 209  : {
; 210  :   unsigned char* data;
; 211  :   size_t size; /*used size*/
; 212  :   size_t allocsize; /*allocated size*/
; 213  : } ucvector;
; 214  : 
; 215  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 216  : static unsigned ucvector_resize(ucvector* p, size_t size)
; 217  : {
; 218  :   if(size * sizeof(unsigned char) > p->allocsize)
; 219  :   {
; 220  :     size_t newsize = size * sizeof(unsigned char) * 2;
; 221  :     void* data = lodepng_realloc(p->data, newsize);
; 222  :     if(data)
; 223  :     {
; 224  :       p->allocsize = newsize;
; 225  :       p->data = (unsigned char*)data;
; 226  :       p->size = size;
; 227  :     }
; 228  :     else return 0; /*error: not enough memory*/
; 229  :   }
; 230  :   else p->size = size;
; 231  :   return 1;
; 232  : }
; 233  : 
; 234  : #ifdef LODEPNG_COMPILE_PNG
; 235  : 
; 236  : static void ucvector_cleanup(void* p)
; 237  : {
; 238  :   ((ucvector*)p)->size = ((ucvector*)p)->allocsize = 0;
; 239  :   lodepng_free(((ucvector*)p)->data);
; 240  :   ((ucvector*)p)->data = NULL;
; 241  : }
; 242  : 
; 243  : static void ucvector_init(ucvector* p)
; 244  : {
; 245  :   p->data = NULL;
; 246  :   p->size = p->allocsize = 0;
; 247  : }
; 248  : 
; 249  : #ifdef LODEPNG_COMPILE_DECODER
; 250  : /*resize and give all new elements the value*/
; 251  : static unsigned ucvector_resizev(ucvector* p, size_t size, unsigned char value)
; 252  : {
; 253  :   size_t oldsize = p->size, i;
; 254  :   if(!ucvector_resize(p, size)) return 0;
; 255  :   for(i = oldsize; i < size; i++) p->data[i] = value;
; 256  :   return 1;
; 257  : }
; 258  : #endif /*LODEPNG_COMPILE_DECODER*/
; 259  : #endif /*LODEPNG_COMPILE_PNG*/
; 260  : 
; 261  : #ifdef LODEPNG_COMPILE_ZLIB
; 262  : /*you can both convert from vector to buffer&size and vica versa. If you use
; 263  : init_buffer to take over a buffer and size, it is not needed to use cleanup*/
; 264  : static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)
; 265  : {
; 266  :   p->data = buffer;
; 267  :   p->allocsize = p->size = size;
; 268  : }
; 269  : #endif /*LODEPNG_COMPILE_ZLIB*/
; 270  : 
; 271  : #if (defined(LODEPNG_COMPILE_PNG) && defined(LODEPNG_COMPILE_ANCILLARY_CHUNKS)) || defined(LODEPNG_COMPILE_ENCODER)
; 272  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 273  : static unsigned ucvector_push_back(ucvector* p, unsigned char c)
; 274  : {
; 275  :   if(!ucvector_resize(p, p->size + 1)) return 0;
; 276  :   p->data[p->size - 1] = c;
; 277  :   return 1;
; 278  : }
; 279  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 280  : 
; 281  : 
; 282  : /* ////////////////////////////////////////////////////////////////////////// */
; 283  : 
; 284  : #ifdef LODEPNG_COMPILE_PNG
; 285  : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 286  : /*returns 1 if success, 0 if failure ==> nothing done*/
; 287  : static unsigned string_resize(char** out, size_t size)
; 288  : {
; 289  :   char* data = (char*)lodepng_realloc(*out, size + 1);
; 290  :   if(data)
; 291  :   {
; 292  :     data[size] = 0; /*null termination char*/
; 293  :     *out = data;
; 294  :   }
; 295  :   return data != 0;
; 296  : }
; 297  : 
; 298  : /*init a {char*, size_t} pair for use as string*/
; 299  : static void string_init(char** out)
; 300  : {
; 301  :   *out = NULL;
; 302  :   string_resize(out, 0);
; 303  : }
; 304  : 
; 305  : /*free the above pair again*/
; 306  : static void string_cleanup(char** out)
; 307  : {
; 308  :   lodepng_free(*out);
; 309  :   *out = NULL;
; 310  : }
; 311  : 
; 312  : static void string_set(char** out, const char* in)
; 313  : {
; 314  :   size_t insize = strlen(in), i = 0;
; 315  :   if(string_resize(out, insize))
; 316  :   {
; 317  :     for(i = 0; i < insize; i++)
; 318  :     {
; 319  :       (*out)[i] = in[i];
; 320  :     }
; 321  :   }
; 322  : }
; 323  : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 324  : #endif /*LODEPNG_COMPILE_PNG*/
; 325  : 
; 326  : /* ////////////////////////////////////////////////////////////////////////// */
; 327  : 
; 328  : unsigned lodepng_read32bitInt(const unsigned char* buffer)
; 329  : {
; 330  :   return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
; 331  : }
; 332  : 
; 333  : #if defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)
; 334  : /*buffer must have at least 4 allocated bytes available*/
; 335  : static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)
; 336  : {
; 337  :   buffer[0] = (unsigned char)((value >> 24) & 0xff);
; 338  :   buffer[1] = (unsigned char)((value >> 16) & 0xff);
; 339  :   buffer[2] = (unsigned char)((value >>  8) & 0xff);
; 340  :   buffer[3] = (unsigned char)((value      ) & 0xff);
; 341  : }
; 342  : #endif /*defined(LODEPNG_COMPILE_PNG) || defined(LODEPNG_COMPILE_ENCODER)*/
; 343  : 
; 344  : #ifdef LODEPNG_COMPILE_ENCODER
; 345  : static void lodepng_add32bitInt(ucvector* buffer, unsigned value)
; 346  : {
; 347  :   ucvector_resize(buffer, buffer->size + 4); /*todo: give error if resize failed*/
; 348  :   lodepng_set32bitInt(&buffer->data[buffer->size - 4], value);
; 349  : }
; 350  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 351  : 
; 352  : /* ////////////////////////////////////////////////////////////////////////// */
; 353  : /* / File IO                                                                / */
; 354  : /* ////////////////////////////////////////////////////////////////////////// */
; 355  : 
; 356  : #ifdef LODEPNG_COMPILE_DISK
; 357  : 
; 358  : unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)
; 359  : {
; 360  :   FILE* file;
; 361  :   long size;
; 362  : 
; 363  :   /*provide some proper output values if error will happen*/
; 364  :   *out = 0;
; 365  :   *outsize = 0;
; 366  : 
; 367  :   file = fopen(filename, "rb");
; 368  :   if(!file) return 78;
; 369  : 
; 370  :   /*get filesize:*/
; 371  :   fseek(file , 0 , SEEK_END);
; 372  :   size = ftell(file);
; 373  :   rewind(file);
; 374  : 
; 375  :   /*read contents of the file into the vector*/
; 376  :   *outsize = 0;
; 377  :   *out = (unsigned char*)lodepng_malloc((size_t)size);
; 378  :   if(size && (*out)) (*outsize) = fread(*out, 1, (size_t)size, file);
; 379  : 
; 380  :   fclose(file);
; 381  :   if(!(*out) && size) return 83; /*the above malloc failed*/
; 382  :   return 0;
; 383  : }
; 384  : 
; 385  : /*write given buffer to the file, overwriting the file, it doesn't append to it.*/
; 386  : unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)
; 387  : {
; 388  :   FILE* file;
; 389  :   file = fopen(filename, "wb" );
; 390  :   if(!file) return 79;
; 391  :   fwrite((char*)buffer , 1 , buffersize, file);
; 392  :   fclose(file);
; 393  :   return 0;
; 394  : }
; 395  : 
; 396  : #endif /*LODEPNG_COMPILE_DISK*/
; 397  : 
; 398  : /* ////////////////////////////////////////////////////////////////////////// */
; 399  : /* ////////////////////////////////////////////////////////////////////////// */
; 400  : /* // End of common code and tools. Begin of Zlib related code.            // */
; 401  : /* ////////////////////////////////////////////////////////////////////////// */
; 402  : /* ////////////////////////////////////////////////////////////////////////// */
; 403  : 
; 404  : #ifdef LODEPNG_COMPILE_ZLIB
; 405  : #ifdef LODEPNG_COMPILE_ENCODER
; 406  : /*TODO: this ignores potential out of memory errors*/
; 407  : static void addBitToStream(size_t* bitpointer, ucvector* bitstream, unsigned char bit)
; 408  : {
; 409  :   /*add a new byte at the end*/
; 410  :   if((*bitpointer) % 8 == 0) ucvector_push_back(bitstream, (unsigned char)0);
; 411  :   /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 412  :   (bitstream->data[bitstream->size - 1]) |= (bit << ((*bitpointer) & 0x7));
; 413  :   (*bitpointer)++;
; 414  : }
; 415  : 
; 416  : static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 417  : {
; 418  :   size_t i;
; 419  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> i) & 1));
; 420  : }
; 421  : 
; 422  : static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)
; 423  : {
; 424  :   size_t i;
; 425  :   for(i = 0; i < nbits; i++) addBitToStream(bitpointer, bitstream, (unsigned char)((value >> (nbits - 1 - i)) & 1));
; 426  : }
; 427  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 428  : 
; 429  : #ifdef LODEPNG_COMPILE_DECODER
; 430  : 
; 431  : #define READBIT(bitpointer, bitstream) ((bitstream[bitpointer >> 3] >> (bitpointer & 0x7)) & (unsigned char)1)
; 432  : 
; 433  : static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)
; 434  : {
; 435  :   unsigned char result = (unsigned char)(READBIT(*bitpointer, bitstream));
; 436  :   (*bitpointer)++;
; 437  :   return result;
; 438  : }
; 439  : 
; 440  : static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 441  : {
; 442  :   unsigned result = 0, i;
; 443  :   for(i = 0; i < nbits; i++)
; 444  :   {
; 445  :     result += ((unsigned)READBIT(*bitpointer, bitstream)) << i;
; 446  :     (*bitpointer)++;
; 447  :   }
; 448  :   return result;
; 449  : }
; 450  : #endif /*LODEPNG_COMPILE_DECODER*/
; 451  : 
; 452  : /* ////////////////////////////////////////////////////////////////////////// */
; 453  : /* / Deflate - Huffman                                                      / */
; 454  : /* ////////////////////////////////////////////////////////////////////////// */
; 455  : 
; 456  : #define FIRST_LENGTH_CODE_INDEX 257
; 457  : #define LAST_LENGTH_CODE_INDEX 285
; 458  : /*256 literals, the end code, some length codes, and 2 unused codes*/
; 459  : #define NUM_DEFLATE_CODE_SYMBOLS 288
; 460  : /*the distance codes have their own symbols, 30 used, 2 unused*/
; 461  : #define NUM_DISTANCE_SYMBOLS 32
; 462  : /*the code length codes. 0-15: code lengths, 16: copy previous 3-6 times, 17: 3-10 zeros, 18: 11-138 zeros*/
; 463  : #define NUM_CODE_LENGTH_CODES 19
; 464  : 
; 465  : /*the base lengths represented by codes 257-285*/
; 466  : static const unsigned LENGTHBASE[29]
; 467  :   = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
; 468  :      67, 83, 99, 115, 131, 163, 195, 227, 258};
; 469  : 
; 470  : /*the extra bits used by codes 257-285 (added to base length)*/
; 471  : static const unsigned LENGTHEXTRA[29]
; 472  :   = {0, 0, 0, 0, 0, 0, 0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
; 473  :       4,  4,  4,   4,   5,   5,   5,   5,   0};
; 474  : 
; 475  : /*the base backwards distances (the bits of distance codes appear after length codes and use their own huffman tree)*/
; 476  : static const unsigned DISTANCEBASE[30]
; 477  :   = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
; 478  :      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
; 479  : 
; 480  : /*the extra bits of backwards distances (added to base)*/
; 481  : static const unsigned DISTANCEEXTRA[30]
; 482  :   = {0, 0, 0, 0, 1, 1, 2,  2,  3,  3,  4,  4,  5,  5,   6,   6,   7,   7,   8,
; 483  :        8,    9,    9,   10,   10,   11,   11,   12,    12,    13,    13};
; 484  : 
; 485  : /*the order in which "code length alphabet code lengths" are stored, out of this
; 486  : the huffman tree of the dynamic huffman tree lengths is generated*/
; 487  : static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]
; 488  :   = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 489  : 
; 490  : /* ////////////////////////////////////////////////////////////////////////// */
; 491  : 
; 492  : /*
; 493  : Huffman tree struct, containing multiple representations of the tree
; 494  : */
; 495  : typedef struct HuffmanTree
; 496  : {
; 497  :   unsigned* tree2d;
; 498  :   unsigned* tree1d;
; 499  :   unsigned* lengths; /*the lengths of the codes of the 1d-tree*/
; 500  :   unsigned maxbitlen; /*maximum number of bits a single code can get*/
; 501  :   unsigned numcodes; /*number of symbols in the alphabet = number of codes*/
; 502  : } HuffmanTree;
; 503  : 
; 504  : /*function used for debug purposes to draw the tree in ascii art with C++*/
; 505  : /*
; 506  : static void HuffmanTree_draw(HuffmanTree* tree)
; 507  : {
; 508  :   std::cout << "tree. length: " << tree->numcodes << " maxbitlen: " << tree->maxbitlen << std::endl;
; 509  :   for(size_t i = 0; i < tree->tree1d.size; i++)
; 510  :   {
; 511  :     if(tree->lengths.data[i])
; 512  :       std::cout << i << " " << tree->tree1d.data[i] << " " << tree->lengths.data[i] << std::endl;
; 513  :   }
; 514  :   std::cout << std::endl;
; 515  : }*/
; 516  : 
; 517  : static void HuffmanTree_init(HuffmanTree* tree)
; 518  : {
; 519  :   tree->tree2d = 0;
; 520  :   tree->tree1d = 0;
; 521  :   tree->lengths = 0;
; 522  : }
; 523  : 
; 524  : static void HuffmanTree_cleanup(HuffmanTree* tree)
; 525  : {
; 526  :   lodepng_free(tree->tree2d);
; 527  :   lodepng_free(tree->tree1d);
; 528  :   lodepng_free(tree->lengths);
; 529  : }
; 530  : 
; 531  : /*the tree representation used by the decoder. return value is error*/
; 532  : static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)
; 533  : {
; 534  :   unsigned nodefilled = 0; /*up to which node it is filled*/
; 535  :   unsigned treepos = 0; /*position in the tree (1 of the numcodes columns)*/
; 536  :   unsigned n, i;
; 537  : 
; 538  :   tree->tree2d = (unsigned*)lodepng_malloc(tree->numcodes * 2 * sizeof(unsigned));
; 539  :   if(!tree->tree2d) return 83; /*alloc fail*/
; 540  : 
; 541  :   /*
; 542  :   convert tree1d[] to tree2d[][]. In the 2D array, a value of 32767 means
; 543  :   uninited, a value >= numcodes is an address to another bit, a value < numcodes
; 544  :   is a code. The 2 rows are the 2 possible bit values (0 or 1), there are as
; 545  :   many columns as codes - 1.
; 546  :   A good huffmann tree has N * 2 - 1 nodes, of which N - 1 are internal nodes.
; 547  :   Here, the internal nodes are stored (what their 0 and 1 option point to).
; 548  :   There is only memory for such good tree currently, if there are more nodes
; 549  :   (due to too long length codes), error 55 will happen
; 550  :   */
; 551  :   for(n = 0; n < tree->numcodes * 2; n++)
; 552  :   {
; 553  :     tree->tree2d[n] = 32767; /*32767 here means the tree2d isn't filled there yet*/
; 554  :   }
; 555  : 
; 556  :   for(n = 0; n < tree->numcodes; n++) /*the codes*/
; 557  :   {
; 558  :     for(i = 0; i < tree->lengths[n]; i++) /*the bits for this code*/
; 559  :     {
; 560  :       unsigned char bit = (unsigned char)((tree->tree1d[n] >> (tree->lengths[n] - i - 1)) & 1);
; 561  :       if(treepos > tree->numcodes - 2) return 55; /*oversubscribed, see comment in lodepng_error_text*/
; 562  :       if(tree->tree2d[2 * treepos + bit] == 32767) /*not yet filled in*/
; 563  :       {
; 564  :         if(i + 1 == tree->lengths[n]) /*last bit*/
; 565  :         {
; 566  :           tree->tree2d[2 * treepos + bit] = n; /*put the current code in it*/
; 567  :           treepos = 0;
; 568  :         }
; 569  :         else
; 570  :         {
; 571  :           /*put address of the next step in here, first that address has to be found of course
; 572  :           (it's just nodefilled + 1)...*/
; 573  :           nodefilled++;
; 574  :           /*addresses encoded with numcodes added to it*/
; 575  :           tree->tree2d[2 * treepos + bit] = nodefilled + tree->numcodes;
; 576  :           treepos = nodefilled;
; 577  :         }
; 578  :       }
; 579  :       else treepos = tree->tree2d[2 * treepos + bit] - tree->numcodes;
; 580  :     }
; 581  :   }
; 582  : 
; 583  :   for(n = 0; n < tree->numcodes * 2; n++)
; 584  :   {
; 585  :     if(tree->tree2d[n] == 32767) tree->tree2d[n] = 0; /*remove possible remaining 32767's*/
; 586  :   }
; 587  : 
; 588  :   return 0;
; 589  : }
; 590  : 
; 591  : /*
; 592  : Second step for the ...makeFromLengths and ...makeFromFrequencies functions.
; 593  : numcodes, lengths and maxbitlen must already be filled in correctly. return
; 594  : value is error.
; 595  : */
; 596  : static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)
; 597  : {
; 598  :   uivector blcount;
; 599  :   uivector nextcode;
; 600  :   unsigned bits, n, error = 0;
; 601  : 
; 602  :   uivector_init(&blcount);
; 603  :   uivector_init(&nextcode);
; 604  : 
; 605  :   tree->tree1d = (unsigned*)lodepng_malloc(tree->numcodes * sizeof(unsigned));
; 606  :   if(!tree->tree1d) error = 83; /*alloc fail*/
; 607  : 
; 608  :   if(!uivector_resizev(&blcount, tree->maxbitlen + 1, 0)
; 609  :   || !uivector_resizev(&nextcode, tree->maxbitlen + 1, 0))
; 610  :     error = 83; /*alloc fail*/
; 611  : 
; 612  :   if(!error)
; 613  :   {
; 614  :     /*step 1: count number of instances of each code length*/
; 615  :     for(bits = 0; bits < tree->numcodes; bits++) blcount.data[tree->lengths[bits]]++;
; 616  :     /*step 2: generate the nextcode values*/
; 617  :     for(bits = 1; bits <= tree->maxbitlen; bits++)
; 618  :     {
; 619  :       nextcode.data[bits] = (nextcode.data[bits - 1] + blcount.data[bits - 1]) << 1;
; 620  :     }
; 621  :     /*step 3: generate all the codes*/
; 622  :     for(n = 0; n < tree->numcodes; n++)
; 623  :     {
; 624  :       if(tree->lengths[n] != 0) tree->tree1d[n] = nextcode.data[tree->lengths[n]]++;
; 625  :     }
; 626  :   }
; 627  : 
; 628  :   uivector_cleanup(&blcount);
; 629  :   uivector_cleanup(&nextcode);
; 630  : 
; 631  :   if(!error) return HuffmanTree_make2DTree(tree);
; 632  :   else return error;
; 633  : }
; 634  : 
; 635  : /*
; 636  : given the code lengths (as stored in the PNG file), generate the tree as defined
; 637  : by Deflate. maxbitlen is the maximum bits that a code in the tree can have.
; 638  : return value is error.
; 639  : */
; 640  : static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,
; 641  :                                             size_t numcodes, unsigned maxbitlen)
; 642  : {
; 643  :   unsigned i;
; 644  :   tree->lengths = (unsigned*)lodepng_malloc(numcodes * sizeof(unsigned));
; 645  :   if(!tree->lengths) return 83; /*alloc fail*/
; 646  :   for(i = 0; i < numcodes; i++) tree->lengths[i] = bitlen[i];
; 647  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 648  :   tree->maxbitlen = maxbitlen;
; 649  :   return HuffmanTree_makeFromLengths2(tree);
; 650  : }
; 651  : 
; 652  : #ifdef LODEPNG_COMPILE_ENCODER
; 653  : 
; 654  : /*
; 655  : A coin, this is the terminology used for the package-merge algorithm and the
; 656  : coin collector's problem. This is used to generate the huffman tree.
; 657  : A coin can be multiple coins (when they're merged)
; 658  : */
; 659  : typedef struct Coin
; 660  : {
; 661  :   uivector symbols;
; 662  :   float weight; /*the sum of all weights in this coin*/
; 663  : } Coin;
; 664  : 
; 665  : static void coin_init(Coin* c)
; 666  : {
; 667  :   uivector_init(&c->symbols);
; 668  : }
; 669  : 
; 670  : /*argument c is void* so that this dtor can be given as function pointer to the vector resize function*/
; 671  : static void coin_cleanup(void* c)
; 672  : {
; 673  :   uivector_cleanup(&((Coin*)c)->symbols);
; 674  : }
; 675  : 
; 676  : static void coin_copy(Coin* c1, const Coin* c2)
; 677  : {
; 678  :   c1->weight = c2->weight;
; 679  :   uivector_copy(&c1->symbols, &c2->symbols);
; 680  : }
; 681  : 
; 682  : static void add_coins(Coin* c1, const Coin* c2)
; 683  : {
; 684  :   size_t i;
; 685  :   for(i = 0; i < c2->symbols.size; i++) uivector_push_back(&c1->symbols, c2->symbols.data[i]);
; 686  :   c1->weight += c2->weight;
; 687  : }
; 688  : 
; 689  : static void init_coins(Coin* coins, size_t num)
; 690  : {
; 691  :   size_t i;
; 692  :   for(i = 0; i < num; i++) coin_init(&coins[i]);
; 693  : }
; 694  : 
; 695  : static void cleanup_coins(Coin* coins, size_t num)
; 696  : {
; 697  :   size_t i;
; 698  :   for(i = 0; i < num; i++) coin_cleanup(&coins[i]);
; 699  : }
; 700  : 
; 701  : /*
; 702  : This uses a simple combsort to sort the data. This function is not critical for
; 703  : overall encoding speed and the data amount isn't that large.
; 704  : */
; 705  : static void sort_coins(Coin* data, size_t amount)
; 706  : {
; 707  :   size_t gap = amount;
; 708  :   unsigned char swapped = 0;
; 709  :   while((gap > 1) || swapped)
; 710  :   {
; 711  :     size_t i;
; 712  :     gap = (gap * 10) / 13; /*shrink factor 1.3*/
; 713  :     if(gap == 9 || gap == 10) gap = 11; /*combsort11*/
; 714  :     if(gap < 1) gap = 1;
; 715  :     swapped = 0;
; 716  :     for(i = 0; i < amount - gap; i++)
; 717  :     {
; 718  :       size_t j = i + gap;
; 719  :       if(data[j].weight < data[i].weight)
; 720  :       {
; 721  :         float temp = data[j].weight; data[j].weight = data[i].weight; data[i].weight = temp;
; 722  :         uivector_swap(&data[i].symbols, &data[j].symbols);
; 723  :         swapped = 1;
; 724  :       }
; 725  :     }
; 726  :   }
; 727  : }
; 728  : 
; 729  : static unsigned append_symbol_coins(Coin* coins, const unsigned* frequencies, unsigned numcodes, size_t sum)
; 730  : {
; 731  :   unsigned i;
; 732  :   unsigned j = 0; /*index of present symbols*/
; 733  :   for(i = 0; i < numcodes; i++)
; 734  :   {
; 735  :     if(frequencies[i] != 0) /*only include symbols that are present*/
; 736  :     {
; 737  :       coins[j].weight = frequencies[i] / (float)sum;
; 738  :       uivector_push_back(&coins[j].symbols, i);
; 739  :       j++;
; 740  :     }
; 741  :   }
; 742  :   return 0;
; 743  : }
; 744  : 
; 745  : unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,
; 746  :                                       size_t numcodes, unsigned maxbitlen)
; 747  : {
; 748  :   unsigned i, j;
; 749  :   size_t sum = 0, numpresent = 0;
; 750  :   unsigned error = 0;
; 751  :   Coin* coins; /*the coins of the currently calculated row*/
; 752  :   Coin* prev_row; /*the previous row of coins*/
; 753  :   unsigned numcoins;
; 754  :   unsigned coinmem;
; 755  : 
; 756  :   if(numcodes == 0) return 80; /*error: a tree of 0 symbols is not supposed to be made*/
; 757  : 
; 758  :   for(i = 0; i < numcodes; i++)
; 759  :   {
; 760  :     if(frequencies[i] > 0)
; 761  :     {
; 762  :       numpresent++;
; 763  :       sum += frequencies[i];
; 764  :     }
; 765  :   }
; 766  : 
; 767  :   for(i = 0; i < numcodes; i++) lengths[i] = 0;
; 768  : 
; 769  :   /*ensure at least two present symbols. There should be at least one symbol
; 770  :   according to RFC 1951 section 3.2.7. To decoders incorrectly require two. To
; 771  :   make these work as well ensure there are at least two symbols. The
; 772  :   Package-Merge code below also doesn't work correctly if there's only one
; 773  :   symbol, it'd give it the theoritical 0 bits but in practice zlib wants 1 bit*/
; 774  :   if(numpresent == 0)
; 775  :   {
; 776  :     lengths[0] = lengths[1] = 1; /*note that for RFC 1951 section 3.2.7, only lengths[0] = 1 is needed*/
; 777  :   }
; 778  :   else if(numpresent == 1)
; 779  :   {
; 780  :     for(i = 0; i < numcodes; i++)
; 781  :     {
; 782  :       if(frequencies[i])
; 783  :       {
; 784  :         lengths[i] = 1;
; 785  :         lengths[i == 0 ? 1 : 0] = 1;
; 786  :         break;
; 787  :       }
; 788  :     }
; 789  :   }
; 790  :   else
; 791  :   {
; 792  :     /*Package-Merge algorithm represented by coin collector's problem
; 793  :     For every symbol, maxbitlen coins will be created*/
; 794  : 
; 795  :     coinmem = numpresent * 2; /*max amount of coins needed with the current algo*/
; 796  :     coins = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 797  :     prev_row = (Coin*)lodepng_malloc(sizeof(Coin) * coinmem);
; 798  :     if(!coins || !prev_row)
; 799  :     {
; 800  :       lodepng_free(coins);
; 801  :       lodepng_free(prev_row);
; 802  :       return 83; /*alloc fail*/
; 803  :     }
; 804  :     init_coins(coins, coinmem);
; 805  :     init_coins(prev_row, coinmem);
; 806  : 
; 807  :     /*first row, lowest denominator*/
; 808  :     error = append_symbol_coins(coins, frequencies, numcodes, sum);
; 809  :     numcoins = numpresent;
; 810  :     sort_coins(coins, numcoins);
; 811  :     if(!error)
; 812  :     {
; 813  :       unsigned numprev = 0;
; 814  :       for(j = 1; j <= maxbitlen && !error; j++) /*each of the remaining rows*/
; 815  :       {
; 816  :         unsigned tempnum;
; 817  :         Coin* tempcoins;
; 818  :         /*swap prev_row and coins, and their amounts*/
; 819  :         tempcoins = prev_row; prev_row = coins; coins = tempcoins;
; 820  :         tempnum = numprev; numprev = numcoins; numcoins = tempnum;
; 821  : 
; 822  :         cleanup_coins(coins, numcoins);
; 823  :         init_coins(coins, numcoins);
; 824  : 
; 825  :         numcoins = 0;
; 826  : 
; 827  :         /*fill in the merged coins of the previous row*/
; 828  :         for(i = 0; i + 1 < numprev; i += 2)
; 829  :         {
; 830  :           /*merge prev_row[i] and prev_row[i + 1] into new coin*/
; 831  :           Coin* coin = &coins[numcoins++];
; 832  :           coin_copy(coin, &prev_row[i]);
; 833  :           add_coins(coin, &prev_row[i + 1]);
; 834  :         }
; 835  :         /*fill in all the original symbols again*/
; 836  :         if(j < maxbitlen)
; 837  :         {
; 838  :           error = append_symbol_coins(coins + numcoins, frequencies, numcodes, sum);
; 839  :           numcoins += numpresent;
; 840  :         }
; 841  :         sort_coins(coins, numcoins);
; 842  :       }
; 843  :     }
; 844  : 
; 845  :     if(!error)
; 846  :     {
; 847  :       /*calculate the lenghts of each symbol, as the amount of times a coin of each symbol is used*/
; 848  :       for(i = 0; i < numpresent - 1; i++)
; 849  :       {
; 850  :         Coin* coin = &coins[i];
; 851  :         for(j = 0; j < coin->symbols.size; j++) lengths[coin->symbols.data[j]]++;
; 852  :       }
; 853  :     }
; 854  : 
; 855  :     cleanup_coins(coins, coinmem);
; 856  :     lodepng_free(coins);
; 857  :     cleanup_coins(prev_row, coinmem);
; 858  :     lodepng_free(prev_row);
; 859  :   }
; 860  : 
; 861  :   return error;
; 862  : }
; 863  : 
; 864  : /*Create the Huffman tree given the symbol frequencies*/
; 865  : static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,
; 866  :                                                 size_t mincodes, size_t numcodes, unsigned maxbitlen)
; 867  : {
; 868  :   unsigned error = 0;
; 869  :   while(!frequencies[numcodes - 1] && numcodes > mincodes) numcodes--; /*trim zeroes*/
; 870  :   tree->maxbitlen = maxbitlen;
; 871  :   tree->numcodes = (unsigned)numcodes; /*number of symbols*/
; 872  :   tree->lengths = (unsigned*)lodepng_realloc(tree->lengths, numcodes * sizeof(unsigned));
; 873  :   if(!tree->lengths) return 83; /*alloc fail*/
; 874  :   /*initialize all lengths to 0*/
; 875  :   memset(tree->lengths, 0, numcodes * sizeof(unsigned));
; 876  : 
; 877  :   error = lodepng_huffman_code_lengths(tree->lengths, frequencies, numcodes, maxbitlen);
; 878  :   if(!error) error = HuffmanTree_makeFromLengths2(tree);
; 879  :   return error;
; 880  : }
; 881  : 
; 882  : static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)
; 883  : {
; 884  :   return tree->tree1d[index];
; 885  : }
; 886  : 
; 887  : static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)
; 888  : {
; 889  :   return tree->lengths[index];
; 890  : }
; 891  : #endif /*LODEPNG_COMPILE_ENCODER*/
; 892  : 
; 893  : /*get the literal and length code tree of a deflated block with fixed tree, as per the deflate specification*/
; 894  : static unsigned generateFixedLitLenTree(HuffmanTree* tree)
; 895  : {
; 896  :   unsigned i, error = 0;
; 897  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 898  :   if(!bitlen) return 83; /*alloc fail*/
; 899  : 
; 900  :   /*288 possible codes: 0-255=literals, 256=endcode, 257-285=lengthcodes, 286-287=unused*/
; 901  :   for(i =   0; i <= 143; i++) bitlen[i] = 8;
; 902  :   for(i = 144; i <= 255; i++) bitlen[i] = 9;
; 903  :   for(i = 256; i <= 279; i++) bitlen[i] = 7;
; 904  :   for(i = 280; i <= 287; i++) bitlen[i] = 8;
; 905  : 
; 906  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 907  : 
; 908  :   lodepng_free(bitlen);
; 909  :   return error;
; 910  : }
; 911  : 
; 912  : /*get the distance code tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 913  : static unsigned generateFixedDistanceTree(HuffmanTree* tree)
; 914  : {
; 915  :   unsigned i, error = 0;
; 916  :   unsigned* bitlen = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 917  :   if(!bitlen) return 83; /*alloc fail*/
; 918  : 
; 919  :   /*there are 32 distance codes, but 30-31 are unused*/
; 920  :   for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen[i] = 5;
; 921  :   error = HuffmanTree_makeFromLengths(tree, bitlen, NUM_DISTANCE_SYMBOLS, 15);
; 922  : 
; 923  :   lodepng_free(bitlen);
; 924  :   return error;
; 925  : }
; 926  : 
; 927  : #ifdef LODEPNG_COMPILE_DECODER
; 928  : 
; 929  : /*
; 930  : returns the code, or (unsigned)(-1) if error happened
; 931  : inbitlength is the length of the complete buffer, in bits (so its byte length times 8)
; 932  : */
; 933  : static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,
; 934  :                                     const HuffmanTree* codetree, size_t inbitlength)
; 935  : {
; 936  :   unsigned treepos = 0, ct;
; 937  :   for(;;)
; 938  :   {
; 939  :     if(*bp >= inbitlength) return (unsigned)(-1); /*error: end of input memory reached without endcode*/
; 940  :     /*
; 941  :     decode the symbol from the tree. The "readBitFromStream" code is inlined in
; 942  :     the expression below because this is the biggest bottleneck while decoding
; 943  :     */
; 944  :     ct = codetree->tree2d[(treepos << 1) + READBIT(*bp, in)];
; 945  :     (*bp)++;
; 946  :     if(ct < codetree->numcodes) return ct; /*the symbol is decoded, return it*/
; 947  :     else treepos = ct - codetree->numcodes; /*symbol not yet decoded, instead move tree position*/
; 948  : 
; 949  :     if(treepos >= codetree->numcodes) return (unsigned)(-1); /*error: it appeared outside the codetree*/
; 950  :   }
; 951  : }
; 952  : #endif /*LODEPNG_COMPILE_DECODER*/
; 953  : 
; 954  : #ifdef LODEPNG_COMPILE_DECODER
; 955  : 
; 956  : /* ////////////////////////////////////////////////////////////////////////// */
; 957  : /* / Inflator (Decompressor)                                                / */
; 958  : /* ////////////////////////////////////////////////////////////////////////// */
; 959  : 
; 960  : /*get the tree of a deflated block with fixed tree, as specified in the deflate specification*/
; 961  : static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)
; 962  : {
; 963  :   /*TODO: check for out of memory errors*/
; 964  :   generateFixedLitLenTree(tree_ll);
; 965  :   generateFixedDistanceTree(tree_d);
; 966  : }
; 967  : 
; 968  : /*get the tree of a deflated block with dynamic tree, the tree itself is also Huffman compressed with a known tree*/
; 969  : static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,
; 970  :                                       const unsigned char* in, size_t* bp, size_t inlength)
; 971  : {
; 972  :   /*make sure that length values that aren't filled in will be 0, or a wrong tree will be generated*/
; 973  :   unsigned error = 0;
; 974  :   unsigned n, HLIT, HDIST, HCLEN, i;
; 975  :   size_t inbitlength = inlength * 8;
; 976  : 
; 977  :   /*see comments in deflateDynamic for explanation of the context and these variables, it is analogous*/
; 978  :   unsigned* bitlen_ll = 0; /*lit,len code lengths*/
; 979  :   unsigned* bitlen_d = 0; /*dist code lengths*/
; 980  :   /*code length code lengths ("clcl"), the bit lengths of the huffman tree used to compress bitlen_ll and bitlen_d*/
; 981  :   unsigned* bitlen_cl = 0;
; 982  :   HuffmanTree tree_cl; /*the code tree for code length codes (the huffman tree for compressed huffman trees)*/
; 983  : 
; 984  :   if((*bp) >> 3 >= inlength - 2) return 49; /*error: the bit pointer is or will go past the memory*/
; 985  : 
; 986  :   /*number of literal/length codes + 257. Unlike the spec, the value 257 is added to it here already*/
; 987  :   HLIT =  readBitsFromStream(bp, in, 5) + 257;
; 988  :   /*number of distance codes. Unlike the spec, the value 1 is added to it here already*/
; 989  :   HDIST = readBitsFromStream(bp, in, 5) + 1;
; 990  :   /*number of code length codes. Unlike the spec, the value 4 is added to it here already*/
; 991  :   HCLEN = readBitsFromStream(bp, in, 4) + 4;
; 992  : 
; 993  :   HuffmanTree_init(&tree_cl);
; 994  : 
; 995  :   while(!error)
; 996  :   {
; 997  :     /*read the code length codes out of 3 * (amount of code length codes) bits*/
; 998  : 
; 999  :     bitlen_cl = (unsigned*)lodepng_malloc(NUM_CODE_LENGTH_CODES * sizeof(unsigned));
; 1000 :     if(!bitlen_cl) ERROR_BREAK(83 /*alloc fail*/);
; 1001 : 
; 1002 :     for(i = 0; i < NUM_CODE_LENGTH_CODES; i++)
; 1003 :     {
; 1004 :       if(i < HCLEN) bitlen_cl[CLCL_ORDER[i]] = readBitsFromStream(bp, in, 3);
; 1005 :       else bitlen_cl[CLCL_ORDER[i]] = 0; /*if not, it must stay 0*/
; 1006 :     }
; 1007 : 
; 1008 :     error = HuffmanTree_makeFromLengths(&tree_cl, bitlen_cl, NUM_CODE_LENGTH_CODES, 7);
; 1009 :     if(error) break;
; 1010 : 
; 1011 :     /*now we can use this tree to read the lengths for the tree that this function will return*/
; 1012 :     bitlen_ll = (unsigned*)lodepng_malloc(NUM_DEFLATE_CODE_SYMBOLS * sizeof(unsigned));
; 1013 :     bitlen_d = (unsigned*)lodepng_malloc(NUM_DISTANCE_SYMBOLS * sizeof(unsigned));
; 1014 :     if(!bitlen_ll || !bitlen_d) ERROR_BREAK(83 /*alloc fail*/);
; 1015 :     for(i = 0; i < NUM_DEFLATE_CODE_SYMBOLS; i++) bitlen_ll[i] = 0;
; 1016 :     for(i = 0; i < NUM_DISTANCE_SYMBOLS; i++) bitlen_d[i] = 0;
; 1017 : 
; 1018 :     /*i is the current symbol we're reading in the part that contains the code lengths of lit/len and dist codes*/
; 1019 :     i = 0;
; 1020 :     while(i < HLIT + HDIST)
; 1021 :     {
; 1022 :       unsigned code = huffmanDecodeSymbol(in, bp, &tree_cl, inbitlength);
; 1023 :       if(code <= 15) /*a length code*/
; 1024 :       {
; 1025 :         if(i < HLIT) bitlen_ll[i] = code;
; 1026 :         else bitlen_d[i - HLIT] = code;
; 1027 :         i++;
; 1028 :       }
; 1029 :       else if(code == 16) /*repeat previous*/
; 1030 :       {
; 1031 :         unsigned replength = 3; /*read in the 2 bits that indicate repeat length (3-6)*/
; 1032 :         unsigned value; /*set value to the previous code*/
; 1033 : 
; 1034 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1035 :         if (i == 0) ERROR_BREAK(54); /*can't repeat previous if i is 0*/
; 1036 : 
; 1037 :         replength += readBitsFromStream(bp, in, 2);
; 1038 : 
; 1039 :         if(i < HLIT + 1) value = bitlen_ll[i - 1];
; 1040 :         else value = bitlen_d[i - HLIT - 1];
; 1041 :         /*repeat this value in the next lengths*/
; 1042 :         for(n = 0; n < replength; n++)
; 1043 :         {
; 1044 :           if(i >= HLIT + HDIST) ERROR_BREAK(13); /*error: i is larger than the amount of codes*/
; 1045 :           if(i < HLIT) bitlen_ll[i] = value;
; 1046 :           else bitlen_d[i - HLIT] = value;
; 1047 :           i++;
; 1048 :         }
; 1049 :       }
; 1050 :       else if(code == 17) /*repeat "0" 3-10 times*/
; 1051 :       {
; 1052 :         unsigned replength = 3; /*read in the bits that indicate repeat length*/
; 1053 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1054 : 
; 1055 :         replength += readBitsFromStream(bp, in, 3);
; 1056 : 
; 1057 :         /*repeat this value in the next lengths*/
; 1058 :         for(n = 0; n < replength; n++)
; 1059 :         {
; 1060 :           if(i >= HLIT + HDIST) ERROR_BREAK(14); /*error: i is larger than the amount of codes*/
; 1061 : 
; 1062 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1063 :           else bitlen_d[i - HLIT] = 0;
; 1064 :           i++;
; 1065 :         }
; 1066 :       }
; 1067 :       else if(code == 18) /*repeat "0" 11-138 times*/
; 1068 :       {
; 1069 :         unsigned replength = 11; /*read in the bits that indicate repeat length*/
; 1070 :         if(*bp >= inbitlength) ERROR_BREAK(50); /*error, bit pointer jumps past memory*/
; 1071 : 
; 1072 :         replength += readBitsFromStream(bp, in, 7);
; 1073 : 
; 1074 :         /*repeat this value in the next lengths*/
; 1075 :         for(n = 0; n < replength; n++)
; 1076 :         {
; 1077 :           if(i >= HLIT + HDIST) ERROR_BREAK(15); /*error: i is larger than the amount of codes*/
; 1078 : 
; 1079 :           if(i < HLIT) bitlen_ll[i] = 0;
; 1080 :           else bitlen_d[i - HLIT] = 0;
; 1081 :           i++;
; 1082 :         }
; 1083 :       }
; 1084 :       else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1085 :       {
; 1086 :         if(code == (unsigned)(-1))
; 1087 :         {
; 1088 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1089 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1090 :           error = (*bp) > inbitlength ? 10 : 11;
; 1091 :         }
; 1092 :         else error = 16; /*unexisting code, this can never happen*/
; 1093 :         break;
; 1094 :       }
; 1095 :     }
; 1096 :     if(error) break;
; 1097 : 
; 1098 :     if(bitlen_ll[256] == 0) ERROR_BREAK(64); /*the length of the end code 256 must be larger than 0*/
; 1099 : 
; 1100 :     /*now we've finally got HLIT and HDIST, so generate the code trees, and the function is done*/
; 1101 :     error = HuffmanTree_makeFromLengths(tree_ll, bitlen_ll, NUM_DEFLATE_CODE_SYMBOLS, 15);
; 1102 :     if(error) break;
; 1103 :     error = HuffmanTree_makeFromLengths(tree_d, bitlen_d, NUM_DISTANCE_SYMBOLS, 15);
; 1104 : 
; 1105 :     break; /*end of error-while*/
; 1106 :   }
; 1107 : 
; 1108 :   lodepng_free(bitlen_cl);
; 1109 :   lodepng_free(bitlen_ll);
; 1110 :   lodepng_free(bitlen_d);
; 1111 :   HuffmanTree_cleanup(&tree_cl);
; 1112 : 
; 1113 :   return error;
; 1114 : }
; 1115 : 
; 1116 : /*inflate a block with dynamic of fixed Huffman tree*/
; 1117 : static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,
; 1118 :                                     size_t* pos, size_t inlength, unsigned btype)
; 1119 : {
; 1120 :   unsigned error = 0;
; 1121 :   HuffmanTree tree_ll; /*the huffman tree for literal and length codes*/
; 1122 :   HuffmanTree tree_d; /*the huffman tree for distance codes*/
; 1123 :   size_t inbitlength = inlength * 8;
; 1124 : 
; 1125 :   HuffmanTree_init(&tree_ll);
; 1126 :   HuffmanTree_init(&tree_d);
; 1127 : 
; 1128 :   if(btype == 1) getTreeInflateFixed(&tree_ll, &tree_d);
; 1129 :   else if(btype == 2) error = getTreeInflateDynamic(&tree_ll, &tree_d, in, bp, inlength);
; 1130 : 
; 1131 :   while(!error) /*decode all symbols until end reached, breaks at end code*/
; 1132 :   {
; 1133 :     /*code_ll is literal, length or end code*/
; 1134 :     unsigned code_ll = huffmanDecodeSymbol(in, bp, &tree_ll, inbitlength);
; 1135 :     if(code_ll <= 255) /*literal symbol*/
; 1136 :     {
; 1137 :       if((*pos) >= out->size)
; 1138 :       {
; 1139 :         /*reserve more room at once*/
; 1140 :         if(!ucvector_resize(out, ((*pos) + 1) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1141 :       }
; 1142 :       out->data[(*pos)] = (unsigned char)(code_ll);
; 1143 :       (*pos)++;
; 1144 :     }
; 1145 :     else if(code_ll >= FIRST_LENGTH_CODE_INDEX && code_ll <= LAST_LENGTH_CODE_INDEX) /*length code*/
; 1146 :     {
; 1147 :       unsigned code_d, distance;
; 1148 :       unsigned numextrabits_l, numextrabits_d; /*extra bits for length and distance*/
; 1149 :       size_t start, forward, backward, length;
; 1150 : 
; 1151 :       /*part 1: get length base*/
; 1152 :       length = LENGTHBASE[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1153 : 
; 1154 :       /*part 2: get extra bits and add the value of that to length*/
; 1155 :       numextrabits_l = LENGTHEXTRA[code_ll - FIRST_LENGTH_CODE_INDEX];
; 1156 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1157 :       length += readBitsFromStream(bp, in, numextrabits_l);
; 1158 : 
; 1159 :       /*part 3: get distance code*/
; 1160 :       code_d = huffmanDecodeSymbol(in, bp, &tree_d, inbitlength);
; 1161 :       if(code_d > 29)
; 1162 :       {
; 1163 :         if(code_ll == (unsigned)(-1)) /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1164 :         {
; 1165 :           /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1166 :           (10=no endcode, 11=wrong jump outside of tree)*/
; 1167 :           error = (*bp) > inlength * 8 ? 10 : 11;
; 1168 :         }
; 1169 :         else error = 18; /*error: invalid distance code (30-31 are never used)*/
; 1170 :         break;
; 1171 :       }
; 1172 :       distance = DISTANCEBASE[code_d];
; 1173 : 
; 1174 :       /*part 4: get extra bits from distance*/
; 1175 :       numextrabits_d = DISTANCEEXTRA[code_d];
; 1176 :       if(*bp >= inbitlength) ERROR_BREAK(51); /*error, bit pointer will jump past memory*/
; 1177 : 
; 1178 :       distance += readBitsFromStream(bp, in, numextrabits_d);
; 1179 : 
; 1180 :       /*part 5: fill in all the out[n] values based on the length and dist*/
; 1181 :       start = (*pos);
; 1182 :       if(distance > start) ERROR_BREAK(52); /*too long backward distance*/
; 1183 :       backward = start - distance;
; 1184 :       if((*pos) + length >= out->size)
; 1185 :       {
; 1186 :         /*reserve more room at once*/
; 1187 :         if(!ucvector_resize(out, ((*pos) + length) * 2)) ERROR_BREAK(83 /*alloc fail*/);
; 1188 :       }
; 1189 : 
; 1190 :       for(forward = 0; forward < length; forward++)
; 1191 :       {
; 1192 :         out->data[(*pos)] = out->data[backward];
; 1193 :         (*pos)++;
; 1194 :         backward++;
; 1195 :         if(backward >= start) backward = start - distance;
; 1196 :       }
; 1197 :     }
; 1198 :     else if(code_ll == 256)
; 1199 :     {
; 1200 :       break; /*end code, break the loop*/
; 1201 :     }
; 1202 :     else /*if(code == (unsigned)(-1))*/ /*huffmanDecodeSymbol returns (unsigned)(-1) in case of error*/
; 1203 :     {
; 1204 :       /*return error code 10 or 11 depending on the situation that happened in huffmanDecodeSymbol
; 1205 :       (10=no endcode, 11=wrong jump outside of tree)*/
; 1206 :       error = (*bp) > inlength * 8 ? 10 : 11;
; 1207 :       break;
; 1208 :     }
; 1209 :   }
; 1210 : 
; 1211 :   HuffmanTree_cleanup(&tree_ll);
; 1212 :   HuffmanTree_cleanup(&tree_d);
; 1213 : 
; 1214 :   return error;
; 1215 : }
; 1216 : 
; 1217 : static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)
; 1218 : {
; 1219 :   /*go to first boundary of byte*/
; 1220 :   size_t p;
; 1221 :   unsigned LEN, NLEN, n, error = 0;
; 1222 :   while(((*bp) & 0x7) != 0) (*bp)++;
; 1223 :   p = (*bp) / 8; /*byte position*/
; 1224 : 
; 1225 :   /*read LEN (2 bytes) and NLEN (2 bytes)*/
; 1226 :   if(p >= inlength - 4) return 52; /*error, bit pointer will jump past memory*/
; 1227 :   LEN = in[p] + 256 * in[p + 1]; p += 2;
; 1228 :   NLEN = in[p] + 256 * in[p + 1]; p += 2;
; 1229 : 
; 1230 :   /*check if 16-bit NLEN is really the one's complement of LEN*/
; 1231 :   if(LEN + NLEN != 65535) return 21; /*error: NLEN is not one's complement of LEN*/
; 1232 : 
; 1233 :   if((*pos) + LEN >= out->size)
; 1234 :   {
; 1235 :     if(!ucvector_resize(out, (*pos) + LEN)) return 83; /*alloc fail*/
; 1236 :   }
; 1237 : 
; 1238 :   /*read the literal data: LEN bytes are now stored in the out buffer*/
; 1239 :   if(p + LEN > inlength) return 23; /*error: reading outside of in buffer*/
; 1240 :   for(n = 0; n < LEN; n++) out->data[(*pos)++] = in[p++];
; 1241 : 
; 1242 :   (*bp) = p * 8;
; 1243 : 
; 1244 :   return error;
; 1245 : }
; 1246 : 
; 1247 : static unsigned lodepng_inflatev(ucvector* out,
; 1248 :                                  const unsigned char* in, size_t insize,
; 1249 :                                  const LodePNGDecompressSettings* settings)
; 1250 : {
; 1251 :   /*bit pointer in the "in" data, current byte is bp >> 3, current bit is bp & 0x7 (from lsb to msb of the byte)*/
; 1252 :   size_t bp = 0;
; 1253 :   unsigned BFINAL = 0;
; 1254 :   size_t pos = 0; /*byte position in the out buffer*/
; 1255 : 
; 1256 :   unsigned error = 0;
; 1257 : 
; 1258 :   (void)settings;
; 1259 : 
; 1260 :   while(!BFINAL)
; 1261 :   {
; 1262 :     unsigned BTYPE;
; 1263 :     if(bp + 2 >= insize * 8) return 52; /*error, bit pointer will jump past memory*/
; 1264 :     BFINAL = readBitFromStream(&bp, in);
; 1265 :     BTYPE = 1 * readBitFromStream(&bp, in);
; 1266 :     BTYPE += 2 * readBitFromStream(&bp, in);
; 1267 : 
; 1268 :     if(BTYPE == 3) return 20; /*error: invalid BTYPE*/
; 1269 :     else if(BTYPE == 0) error = inflateNoCompression(out, in, &bp, &pos, insize); /*no compression*/
; 1270 :     else error = inflateHuffmanBlock(out, in, &bp, &pos, insize, BTYPE); /*compression, BTYPE 01 or 10*/
; 1271 : 
; 1272 :     if(error) return error;
; 1273 :   }
; 1274 : 
; 1275 :   /*Only now we know the true size of out, resize it to that*/
; 1276 :   if(!ucvector_resize(out, pos)) error = 83; /*alloc fail*/
; 1277 : 
; 1278 :   return error;
; 1279 : }
; 1280 : 
; 1281 : unsigned lodepng_inflate(unsigned char** out, size_t* outsize,
; 1282 :                          const unsigned char* in, size_t insize,
; 1283 :                          const LodePNGDecompressSettings* settings)
; 1284 : {
; 1285 :   unsigned error;
; 1286 :   ucvector v;
; 1287 :   ucvector_init_buffer(&v, *out, *outsize);
; 1288 :   error = lodepng_inflatev(&v, in, insize, settings);
; 1289 :   *out = v.data;
; 1290 :   *outsize = v.size;
; 1291 :   return error;
; 1292 : }
; 1293 : 
; 1294 : static unsigned inflate(unsigned char** out, size_t* outsize,
; 1295 :                         const unsigned char* in, size_t insize,
; 1296 :                         const LodePNGDecompressSettings* settings)
; 1297 : {
; 1298 :   if(settings->custom_inflate)
; 1299 :   {
; 1300 :     return settings->custom_inflate(out, outsize, in, insize, settings);
; 1301 :   }
; 1302 :   else
; 1303 :   {
; 1304 :     return lodepng_inflate(out, outsize, in, insize, settings);
; 1305 :   }
; 1306 : }
; 1307 : 
; 1308 : #endif /*LODEPNG_COMPILE_DECODER*/
; 1309 : 
; 1310 : #ifdef LODEPNG_COMPILE_ENCODER
; 1311 : 
; 1312 : /* ////////////////////////////////////////////////////////////////////////// */
; 1313 : /* / Deflator (Compressor)                                                  / */
; 1314 : /* ////////////////////////////////////////////////////////////////////////// */
; 1315 : 
; 1316 : static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;
; 1317 : 
; 1318 : /*bitlen is the size in bits of the code*/
; 1319 : static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)
; 1320 : {
; 1321 :   addBitsToStreamReversed(bp, compressed, code, bitlen);
; 1322 : }
; 1323 : 
; 1324 : /*search the index in the array, that has the largest value smaller than or equal to the given value,
; 1325 : given array must be sorted (if no value is smaller, it returns the size of the given array)*/
; 1326 : static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)
; 1327 : {
; 1328 :   /*linear search implementation*/
; 1329 :   /*for(size_t i = 1; i < array_size; i++) if(array[i] > value) return i - 1;
; 1330 :   return array_size - 1;*/
; 1331 : 
; 1332 :   /*binary search implementation (not that much faster) (precondition: array_size > 0)*/
; 1333 :   size_t left  = 1;
; 1334 :   size_t right = array_size - 1;
; 1335 :   while(left <= right)
; 1336 :   {
; 1337 :     size_t mid = (left + right) / 2;
; 1338 :     if(array[mid] <= value) left = mid + 1; /*the value to find is more to the right*/
; 1339 :     else if(array[mid - 1] > value) right = mid - 1; /*the value to find is more to the left*/
; 1340 :     else return mid - 1;
; 1341 :   }
; 1342 :   return array_size - 1;
; 1343 : }
; 1344 : 
; 1345 : static void addLengthDistance(uivector* values, size_t length, size_t distance)
; 1346 : {
; 1347 :   /*values in encoded vector are those used by deflate:
; 1348 :   0-255: literal bytes
; 1349 :   256: end
; 1350 :   257-285: length/distance pair (length code, followed by extra length bits, distance code, extra distance bits)
; 1351 :   286-287: invalid*/
; 1352 : 
; 1353 :   unsigned length_code = (unsigned)searchCodeIndex(LENGTHBASE, 29, length);
; 1354 :   unsigned extra_length = (unsigned)(length - LENGTHBASE[length_code]);
; 1355 :   unsigned dist_code = (unsigned)searchCodeIndex(DISTANCEBASE, 30, distance);
; 1356 :   unsigned extra_distance = (unsigned)(distance - DISTANCEBASE[dist_code]);
; 1357 : 
; 1358 :   uivector_push_back(values, length_code + FIRST_LENGTH_CODE_INDEX);
; 1359 :   uivector_push_back(values, extra_length);
; 1360 :   uivector_push_back(values, dist_code);
; 1361 :   uivector_push_back(values, extra_distance);
; 1362 : }
; 1363 : 
; 1364 : static const unsigned HASH_NUM_VALUES = 65536;
; 1365 : static const unsigned HASH_NUM_CHARACTERS = 3;
; 1366 : static const unsigned HASH_SHIFT = 2;
; 1367 : /*
; 1368 : The HASH_NUM_CHARACTERS value is used to make encoding faster by using longer
; 1369 : sequences to generate a hash value from the stream bytes. Setting it to 3
; 1370 : gives exactly the same compression as the brute force method, since deflate's
; 1371 : run length encoding starts with lengths of 3. Setting it to higher values,
; 1372 : like 6, can make the encoding faster (not always though!), but will cause the
; 1373 : encoding to miss any length between 3 and this value, so that the compression
; 1374 : may be worse (but this can vary too depending on the image, sometimes it is
; 1375 : even a bit better instead).
; 1376 : The HASH_NUM_VALUES is the amount of unique possible hash values that
; 1377 : combinations of bytes can give, the higher it is the more memory is needed, but
; 1378 : if it's too low the advantage of hashing is gone.
; 1379 : */
; 1380 : 
; 1381 : typedef struct Hash
; 1382 : {
; 1383 :   int* head; /*hash value to head circular pos*/
; 1384 :   int* val; /*circular pos to hash value*/
; 1385 :   /*circular pos to prev circular pos*/
; 1386 :   unsigned short* chain;
; 1387 :   unsigned short* zeros;
; 1388 : } Hash;
; 1389 : 
; 1390 : static unsigned hash_init(Hash* hash, unsigned windowsize)
; 1391 : {
; 1392 :   unsigned i;
; 1393 :   hash->head = (int*)lodepng_malloc(sizeof(int) * HASH_NUM_VALUES);
; 1394 :   hash->val = (int*)lodepng_malloc(sizeof(int) * windowsize);
; 1395 :   hash->chain = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1396 :   hash->zeros = (unsigned short*)lodepng_malloc(sizeof(unsigned short) * windowsize);
; 1397 : 
; 1398 :   if(!hash->head || !hash->val || !hash->chain || !hash->zeros) return 83; /*alloc fail*/
; 1399 : 
; 1400 :   /*initialize hash table*/
; 1401 :   for(i = 0; i < HASH_NUM_VALUES; i++) hash->head[i] = -1;
; 1402 :   for(i = 0; i < windowsize; i++) hash->val[i] = -1;
; 1403 :   for(i = 0; i < windowsize; i++) hash->chain[i] = i; /*same value as index indicates uninitialized*/
; 1404 : 
; 1405 :   return 0;
; 1406 : }
; 1407 : 
; 1408 : static void hash_cleanup(Hash* hash)
; 1409 : {
; 1410 :   lodepng_free(hash->head);
; 1411 :   lodepng_free(hash->val);
; 1412 :   lodepng_free(hash->chain);
; 1413 :   lodepng_free(hash->zeros);
; 1414 : }
; 1415 : 
; 1416 : static unsigned getHash(const unsigned char* data, size_t size, size_t pos)
; 1417 : {
; 1418 :   unsigned result = 0;
; 1419 :   size_t amount, i;
; 1420 :   if(pos >= size) return 0;
; 1421 :   amount = HASH_NUM_CHARACTERS;
; 1422 :   if(pos + amount >= size) amount = size - pos;
; 1423 :   for(i = 0; i < amount; i++) result ^= (data[pos + i] << (i * HASH_SHIFT));
; 1424 :   return result % HASH_NUM_VALUES;
; 1425 : }
; 1426 : 
; 1427 : static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)
; 1428 : {
; 1429 :   const unsigned char* start = data + pos;
; 1430 :   const unsigned char* end = start + MAX_SUPPORTED_DEFLATE_LENGTH;
; 1431 :   if(end > data + size) end = data + size;
; 1432 :   data = start;
; 1433 :   while (data != end && *data == 0) data++;
; 1434 :   /*subtracting two addresses returned as 32-bit number (max value is MAX_SUPPORTED_DEFLATE_LENGTH)*/
; 1435 :   return (unsigned)(data - start);
; 1436 : }
; 1437 : 
; 1438 : static void updateHashChain(Hash* hash, size_t pos, int hashval, unsigned windowsize)
; 1439 : {
; 1440 :   unsigned wpos = pos % windowsize;
; 1441 :   hash->val[wpos] = hashval;
; 1442 :   if(hash->head[hashval] != -1) hash->chain[wpos] = hash->head[hashval];
; 1443 :   hash->head[hashval] = wpos;
; 1444 : }
; 1445 : 
; 1446 : /*
; 1447 : LZ77-encode the data. Return value is error code. The input are raw bytes, the output
; 1448 : is in the form of unsigned integers with codes representing for example literal bytes, or
; 1449 : length/distance pairs.
; 1450 : It uses a hash table technique to let it encode faster. When doing LZ77 encoding, a
; 1451 : sliding window (of windowsize) is used, and all past bytes in that window can be used as
; 1452 : the "dictionary". A brute force search through all possible distances would be slow, and
; 1453 : this hash technique is one out of several ways to speed this up.
; 1454 : */
; 1455 : static unsigned encodeLZ77(uivector* out, Hash* hash,
; 1456 :                            const unsigned char* in, size_t inpos, size_t insize, unsigned windowsize,
; 1457 :                            unsigned minmatch, unsigned nicematch, unsigned lazymatching)
; 1458 : {
; 1459 :   unsigned short numzeros = 0;
; 1460 :   int usezeros = windowsize >= 8192; /*for small window size, the 'max chain length' optimization does a better job*/
; 1461 :   unsigned pos, i, error = 0;
; 1462 :   /*for large window lengths, assume the user wants no compression loss. Otherwise, max hash chain length speedup.*/
; 1463 :   unsigned maxchainlength = windowsize >= 8192 ? windowsize : windowsize / 8;
; 1464 :   unsigned maxlazymatch = windowsize >= 8192 ? MAX_SUPPORTED_DEFLATE_LENGTH : 64;
; 1465 : 
; 1466 :   if(!error)
; 1467 :   {
; 1468 :     unsigned offset; /*the offset represents the distance in LZ77 terminology*/
; 1469 :     unsigned length;
; 1470 :     unsigned lazy = 0;
; 1471 :     unsigned lazylength = 0, lazyoffset = 0;
; 1472 :     unsigned hashval;
; 1473 :     unsigned current_offset, current_length;
; 1474 :     const unsigned char *lastptr, *foreptr, *backptr;
; 1475 :     unsigned short hashpos, prevpos;
; 1476 : 
; 1477 :     for(pos = inpos; pos < insize; pos++)
; 1478 :     {
; 1479 :       size_t wpos = pos % windowsize; /*position for in 'circular' hash buffers*/
; 1480 : 
; 1481 :       hashval = getHash(in, insize, pos);
; 1482 :       updateHashChain(hash, pos, hashval, windowsize);
; 1483 : 
; 1484 :       if(usezeros && hashval == 0)
; 1485 :       {
; 1486 :         numzeros = countZeros(in, insize, pos);
; 1487 :         hash->zeros[wpos] = numzeros;
; 1488 :       }
; 1489 : 
; 1490 :       /*the length and offset found for the current position*/
; 1491 :       length = 0;
; 1492 :       offset = 0;
; 1493 : 
; 1494 :       prevpos = hash->head[hashval];
; 1495 :       hashpos = hash->chain[prevpos];
; 1496 : 
; 1497 :       lastptr = &in[insize < pos + MAX_SUPPORTED_DEFLATE_LENGTH ? insize : pos + MAX_SUPPORTED_DEFLATE_LENGTH];
; 1498 : 
; 1499 :       /*search for the longest string*/
; 1500 :       if(hash->val[wpos] == (int)hashval)
; 1501 :       {
; 1502 :         unsigned chainlength = 0;
; 1503 :         for(;;)
; 1504 :         {
; 1505 :           /*stop when went completely around the circular buffer*/
; 1506 :           if(prevpos < wpos && hashpos > prevpos && hashpos <= wpos) break;
; 1507 :           if(prevpos > wpos && (hashpos <= wpos || hashpos > prevpos)) break;
; 1508 :           if(chainlength++ >= maxchainlength) break;
; 1509 : 
; 1510 :           current_offset = hashpos <= wpos ? wpos - hashpos : wpos - hashpos + windowsize;
; 1511 :           if(current_offset > 0)
; 1512 :           {
; 1513 :             /*test the next characters*/
; 1514 :             foreptr = &in[pos];
; 1515 :             backptr = &in[pos - current_offset];
; 1516 : 
; 1517 :             /*common case in PNGs is lots of zeros. Quickly skip over them as a speedup*/
; 1518 :             if(usezeros && hashval == 0 && hash->val[hashpos] == 0 /*hashval[hashpos] may be out of date*/)
; 1519 :             {
; 1520 :               unsigned short skip = hash->zeros[hashpos];
; 1521 :               if(skip > numzeros) skip = numzeros;
; 1522 :               backptr += skip;
; 1523 :               foreptr += skip;
; 1524 :             }
; 1525 : 
; 1526 :             /* multiple checks at once per array bounds check */
; 1527 :             while(foreptr != lastptr && *backptr == *foreptr) /*maximum supported length by deflate is max length*/
; 1528 :             {
; 1529 :               ++backptr;
; 1530 :               ++foreptr;
; 1531 :             }
; 1532 :             current_length = (unsigned)(foreptr - &in[pos]);
; 1533 : 
; 1534 :             if(current_length > length)
; 1535 :             {
; 1536 :               length = current_length; /*the longest length*/
; 1537 :               offset = current_offset; /*the offset that is related to this longest length*/
; 1538 :               /*jump out once a length of max length is found (speed gain)*/
; 1539 :               if(current_length >= nicematch || current_length == MAX_SUPPORTED_DEFLATE_LENGTH) break;
; 1540 :             }
; 1541 :           }
; 1542 : 
; 1543 :           if(hashpos == hash->chain[hashpos]) break;
; 1544 : 
; 1545 :           prevpos = hashpos;
; 1546 :           hashpos = hash->chain[hashpos];
; 1547 :         }
; 1548 :       }
; 1549 : 
; 1550 :       if(lazymatching)
; 1551 :       {
; 1552 :         if(!lazy && length >= 3 && length <= maxlazymatch && length < MAX_SUPPORTED_DEFLATE_LENGTH)
; 1553 :         {
; 1554 :           lazy = 1;
; 1555 :           lazylength = length;
; 1556 :           lazyoffset = offset;
; 1557 :           continue; /*try the next byte*/
; 1558 :         }
; 1559 :         if(lazy)
; 1560 :         {
; 1561 :           lazy = 0;
; 1562 :           if(pos == 0) ERROR_BREAK(81);
; 1563 :           if(length > lazylength + 1)
; 1564 :           {
; 1565 :             /*push the previous character as literal*/
; 1566 :             if(!uivector_push_back(out, in[pos - 1])) ERROR_BREAK(83 /*alloc fail*/);
; 1567 :           }
; 1568 :           else
; 1569 :           {
; 1570 :             length = lazylength;
; 1571 :             offset = lazyoffset;
; 1572 :             hash->head[hashval] = -1; /*the same hashchain update will be done, this ensures no wrong alteration*/
; 1573 :             pos--;
; 1574 :           }
; 1575 :         }
; 1576 :       }
; 1577 :       if(length >= 3 && offset > windowsize) ERROR_BREAK(86 /*too big (or overflown negative) offset*/);
; 1578 : 
; 1579 :       /**encode it as length/distance pair or literal value**/
; 1580 :       if(length < 3) /*only lengths of 3 or higher are supported as length/distance pair*/
; 1581 :       {
; 1582 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1583 :       }
; 1584 :       else if(length < minmatch || (length == 3 && offset > 4096))
; 1585 :       {
; 1586 :         /*compensate for the fact that longer offsets have more extra bits, a
; 1587 :         length of only 3 may be not worth it then*/
; 1588 :         if(!uivector_push_back(out, in[pos])) ERROR_BREAK(83 /*alloc fail*/);
; 1589 :       }
; 1590 :       else
; 1591 :       {
; 1592 :         addLengthDistance(out, length, offset);
; 1593 :         for(i = 1; i < length; i++)
; 1594 :         {
; 1595 :           pos++;
; 1596 :           hashval = getHash(in, insize, pos);
; 1597 :           updateHashChain(hash, pos, hashval, windowsize);
; 1598 :           if(usezeros && hashval == 0)
; 1599 :           {
; 1600 :             hash->zeros[pos % windowsize] = countZeros(in, insize, pos);
; 1601 :           }
; 1602 :         }
; 1603 :       }
; 1604 : 
; 1605 :     } /*end of the loop through each character of input*/
; 1606 :   } /*end of "if(!error)"*/
; 1607 : 
; 1608 :   return error;
; 1609 : }
; 1610 : 
; 1611 : /* /////////////////////////////////////////////////////////////////////////// */
; 1612 : 
; 1613 : static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)
; 1614 : {
; 1615 :   /*non compressed deflate block data: 1 bit BFINAL,2 bits BTYPE,(5 bits): it jumps to start of next byte,
; 1616 :   2 bytes LEN, 2 bytes NLEN, LEN bytes literal DATA*/
; 1617 : 
; 1618 :   size_t i, j, numdeflateblocks = (datasize + 65534) / 65535;
; 1619 :   unsigned datapos = 0;
; 1620 :   for(i = 0; i < numdeflateblocks; i++)
; 1621 :   {
; 1622 :     unsigned BFINAL, BTYPE, LEN, NLEN;
; 1623 :     unsigned char firstbyte;
; 1624 : 
; 1625 :     BFINAL = (i == numdeflateblocks - 1);
; 1626 :     BTYPE = 0;
; 1627 : 
; 1628 :     firstbyte = (unsigned char)(BFINAL + ((BTYPE & 1) << 1) + ((BTYPE & 2) << 1));
; 1629 :     ucvector_push_back(out, firstbyte);
; 1630 : 
; 1631 :     LEN = 65535;
; 1632 :     if(datasize - datapos < 65535) LEN = (unsigned)datasize - datapos;
; 1633 :     NLEN = 65535 - LEN;
; 1634 : 
; 1635 :     ucvector_push_back(out, (unsigned char)(LEN % 256));
; 1636 :     ucvector_push_back(out, (unsigned char)(LEN / 256));
; 1637 :     ucvector_push_back(out, (unsigned char)(NLEN % 256));
; 1638 :     ucvector_push_back(out, (unsigned char)(NLEN / 256));
; 1639 : 
; 1640 :     /*Decompressed data*/
; 1641 :     for(j = 0; j < 65535 && datapos < datasize; j++)
; 1642 :     {
; 1643 :       ucvector_push_back(out, data[datapos++]);
; 1644 :     }
; 1645 :   }
; 1646 : 
; 1647 :   return 0;
; 1648 : }
; 1649 : 
; 1650 : /*
; 1651 : write the lz77-encoded data, which has lit, len and dist codes, to compressed stream using huffman trees.
; 1652 : tree_ll: the tree for lit and len codes.
; 1653 : tree_d: the tree for distance codes.
; 1654 : */
; 1655 : static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,
; 1656 :                           const HuffmanTree* tree_ll, const HuffmanTree* tree_d)
; 1657 : {
; 1658 :   size_t i = 0;
; 1659 :   for(i = 0; i < lz77_encoded->size; i++)
; 1660 :   {
; 1661 :     unsigned val = lz77_encoded->data[i];
; 1662 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_ll, val), HuffmanTree_getLength(tree_ll, val));
; 1663 :     if(val > 256) /*for a length code, 3 more things have to be added*/
; 1664 :     {
; 1665 :       unsigned length_index = val - FIRST_LENGTH_CODE_INDEX;
; 1666 :       unsigned n_length_extra_bits = LENGTHEXTRA[length_index];
; 1667 :       unsigned length_extra_bits = lz77_encoded->data[++i];
; 1668 : 
; 1669 :       unsigned distance_code = lz77_encoded->data[++i];
; 1670 : 
; 1671 :       unsigned distance_index = distance_code;
; 1672 :       unsigned n_distance_extra_bits = DISTANCEEXTRA[distance_index];
; 1673 :       unsigned distance_extra_bits = lz77_encoded->data[++i];
; 1674 : 
; 1675 :       addBitsToStream(bp, out, length_extra_bits, n_length_extra_bits);
; 1676 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(tree_d, distance_code),
; 1677 :                        HuffmanTree_getLength(tree_d, distance_code));
; 1678 :       addBitsToStream(bp, out, distance_extra_bits, n_distance_extra_bits);
; 1679 :     }
; 1680 :   }
; 1681 : }
; 1682 : 
; 1683 : /*Deflate for a block of type "dynamic", that is, with freely, optimally, created huffman trees*/
; 1684 : static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,
; 1685 :                                const unsigned char* data, size_t datapos, size_t dataend,
; 1686 :                                const LodePNGCompressSettings* settings, int final)
; 1687 : {
; 1688 :   unsigned error = 0;
; 1689 : 
; 1690 :   /*
; 1691 :   A block is compressed as follows: The PNG data is lz77 encoded, resulting in
; 1692 :   literal bytes and length/distance pairs. This is then huffman compressed with
; 1693 :   two huffman trees. One huffman tree is used for the lit and len values ("ll"),
; 1694 :   another huffman tree is used for the dist values ("d"). These two trees are
; 1695 :   stored using their code lengths, and to compress even more these code lengths
; 1696 :   are also run-length encoded and huffman compressed. This gives a huffman tree
; 1697 :   of code lengths "cl". The code lenghts used to describe this third tree are
; 1698 :   the code length code lengths ("clcl").
; 1699 :   */
; 1700 : 
; 1701 :   /*The lz77 encoded data, represented with integers since there will also be length and distance codes in it*/
; 1702 :   uivector lz77_encoded;
; 1703 :   HuffmanTree tree_ll; /*tree for lit,len values*/
; 1704 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1705 :   HuffmanTree tree_cl; /*tree for encoding the code lengths representing tree_ll and tree_d*/
; 1706 :   uivector frequencies_ll; /*frequency of lit,len codes*/
; 1707 :   uivector frequencies_d; /*frequency of dist codes*/
; 1708 :   uivector frequencies_cl; /*frequency of code length codes*/
; 1709 :   uivector bitlen_lld; /*lit,len,dist code lenghts (int bits), literally (without repeat codes).*/
; 1710 :   uivector bitlen_lld_e; /*bitlen_lld encoded with repeat codes (this is a rudemtary run length compression)*/
; 1711 :   /*bitlen_cl is the code length code lengths ("clcl"). The bit lengths of codes to represent tree_cl
; 1712 :   (these are written as is in the file, it would be crazy to compress these using yet another huffman
; 1713 :   tree that needs to be represented by yet another set of code lengths)*/
; 1714 :   uivector bitlen_cl;
; 1715 :   size_t datasize = dataend - datapos;
; 1716 : 
; 1717 :   /*
; 1718 :   Due to the huffman compression of huffman tree representations ("two levels"), there are some anologies:
; 1719 :   bitlen_lld is to tree_cl what data is to tree_ll and tree_d.
; 1720 :   bitlen_lld_e is to bitlen_lld what lz77_encoded is to data.
; 1721 :   bitlen_cl is to bitlen_lld_e what bitlen_lld is to lz77_encoded.
; 1722 :   */
; 1723 : 
; 1724 :   unsigned BFINAL = final;
; 1725 :   size_t numcodes_ll, numcodes_d, i;
; 1726 :   unsigned HLIT, HDIST, HCLEN;
; 1727 : 
; 1728 :   uivector_init(&lz77_encoded);
; 1729 :   HuffmanTree_init(&tree_ll);
; 1730 :   HuffmanTree_init(&tree_d);
; 1731 :   HuffmanTree_init(&tree_cl);
; 1732 :   uivector_init(&frequencies_ll);
; 1733 :   uivector_init(&frequencies_d);
; 1734 :   uivector_init(&frequencies_cl);
; 1735 :   uivector_init(&bitlen_lld);
; 1736 :   uivector_init(&bitlen_lld_e);
; 1737 :   uivector_init(&bitlen_cl);
; 1738 : 
; 1739 :   /*This while loop never loops due to a break at the end, it is here to
; 1740 :   allow breaking out of it to the cleanup phase on error conditions.*/
; 1741 :   while(!error)
; 1742 :   {
; 1743 :     if(settings->use_lz77)
; 1744 :     {
; 1745 :       error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1746 :                          settings->minmatch, settings->nicematch, settings->lazymatching);
; 1747 :       if(error) break;
; 1748 :     }
; 1749 :     else
; 1750 :     {
; 1751 :       if(!uivector_resize(&lz77_encoded, datasize)) ERROR_BREAK(83 /*alloc fail*/);
; 1752 :       for(i = datapos; i < dataend; i++) lz77_encoded.data[i] = data[i]; /*no LZ77, but still will be Huffman compressed*/
; 1753 :     }
; 1754 : 
; 1755 :     if(!uivector_resizev(&frequencies_ll, 286, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1756 :     if(!uivector_resizev(&frequencies_d, 30, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1757 : 
; 1758 :     /*Count the frequencies of lit, len and dist codes*/
; 1759 :     for(i = 0; i < lz77_encoded.size; i++)
; 1760 :     {
; 1761 :       unsigned symbol = lz77_encoded.data[i];
; 1762 :       frequencies_ll.data[symbol]++;
; 1763 :       if(symbol > 256)
; 1764 :       {
; 1765 :         unsigned dist = lz77_encoded.data[i + 2];
; 1766 :         frequencies_d.data[dist]++;
; 1767 :         i += 3;
; 1768 :       }
; 1769 :     }
; 1770 :     frequencies_ll.data[256] = 1; /*there will be exactly 1 end code, at the end of the block*/
; 1771 : 
; 1772 :     /*Make both huffman trees, one for the lit and len codes, one for the dist codes*/
; 1773 :     error = HuffmanTree_makeFromFrequencies(&tree_ll, frequencies_ll.data, 257, frequencies_ll.size, 15);
; 1774 :     if(error) break;
; 1775 :     /*2, not 1, is chosen for mincodes: some buggy PNG decoders require at least 2 symbols in the dist tree*/
; 1776 :     error = HuffmanTree_makeFromFrequencies(&tree_d, frequencies_d.data, 2, frequencies_d.size, 15);
; 1777 :     if(error) break;
; 1778 : 
; 1779 :     numcodes_ll = tree_ll.numcodes; if(numcodes_ll > 286) numcodes_ll = 286;
; 1780 :     numcodes_d = tree_d.numcodes; if(numcodes_d > 30) numcodes_d = 30;
; 1781 :     /*store the code lengths of both generated trees in bitlen_lld*/
; 1782 :     for(i = 0; i < numcodes_ll; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_ll, (unsigned)i));
; 1783 :     for(i = 0; i < numcodes_d; i++) uivector_push_back(&bitlen_lld, HuffmanTree_getLength(&tree_d, (unsigned)i));
; 1784 : 
; 1785 :     /*run-length compress bitlen_ldd into bitlen_lld_e by using repeat codes 16 (copy length 3-6 times),
; 1786 :     17 (3-10 zeroes), 18 (11-138 zeroes)*/
; 1787 :     for(i = 0; i < (unsigned)bitlen_lld.size; i++)
; 1788 :     {
; 1789 :       unsigned j = 0; /*amount of repititions*/
; 1790 :       while(i + j + 1 < (unsigned)bitlen_lld.size && bitlen_lld.data[i + j + 1] == bitlen_lld.data[i]) j++;
; 1791 : 
; 1792 :       if(bitlen_lld.data[i] == 0 && j >= 2) /*repeat code for zeroes*/
; 1793 :       {
; 1794 :         j++; /*include the first zero*/
; 1795 :         if(j <= 10) /*repeat code 17 supports max 10 zeroes*/
; 1796 :         {
; 1797 :           uivector_push_back(&bitlen_lld_e, 17);
; 1798 :           uivector_push_back(&bitlen_lld_e, j - 3);
; 1799 :         }
; 1800 :         else /*repeat code 18 supports max 138 zeroes*/
; 1801 :         {
; 1802 :           if(j > 138) j = 138;
; 1803 :           uivector_push_back(&bitlen_lld_e, 18);
; 1804 :           uivector_push_back(&bitlen_lld_e, j - 11);
; 1805 :         }
; 1806 :         i += (j - 1);
; 1807 :       }
; 1808 :       else if(j >= 3) /*repeat code for value other than zero*/
; 1809 :       {
; 1810 :         size_t k;
; 1811 :         unsigned num = j / 6, rest = j % 6;
; 1812 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1813 :         for(k = 0; k < num; k++)
; 1814 :         {
; 1815 :           uivector_push_back(&bitlen_lld_e, 16);
; 1816 :           uivector_push_back(&bitlen_lld_e, 6 - 3);
; 1817 :         }
; 1818 :         if(rest >= 3)
; 1819 :         {
; 1820 :           uivector_push_back(&bitlen_lld_e, 16);
; 1821 :           uivector_push_back(&bitlen_lld_e, rest - 3);
; 1822 :         }
; 1823 :         else j -= rest;
; 1824 :         i += j;
; 1825 :       }
; 1826 :       else /*too short to benefit from repeat code*/
; 1827 :       {
; 1828 :         uivector_push_back(&bitlen_lld_e, bitlen_lld.data[i]);
; 1829 :       }
; 1830 :     }
; 1831 : 
; 1832 :     /*generate tree_cl, the huffmantree of huffmantrees*/
; 1833 : 
; 1834 :     if(!uivector_resizev(&frequencies_cl, NUM_CODE_LENGTH_CODES, 0)) ERROR_BREAK(83 /*alloc fail*/);
; 1835 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1836 :     {
; 1837 :       frequencies_cl.data[bitlen_lld_e.data[i]]++;
; 1838 :       /*after a repeat code come the bits that specify the number of repetitions,
; 1839 :       those don't need to be in the frequencies_cl calculation*/
; 1840 :       if(bitlen_lld_e.data[i] >= 16) i++;
; 1841 :     }
; 1842 : 
; 1843 :     error = HuffmanTree_makeFromFrequencies(&tree_cl, frequencies_cl.data,
; 1844 :                                             frequencies_cl.size, frequencies_cl.size, 7);
; 1845 :     if(error) break;
; 1846 : 
; 1847 :     if(!uivector_resize(&bitlen_cl, tree_cl.numcodes)) ERROR_BREAK(83 /*alloc fail*/);
; 1848 :     for(i = 0; i < tree_cl.numcodes; i++)
; 1849 :     {
; 1850 :       /*lenghts of code length tree is in the order as specified by deflate*/
; 1851 :       bitlen_cl.data[i] = HuffmanTree_getLength(&tree_cl, CLCL_ORDER[i]);
; 1852 :     }
; 1853 :     while(bitlen_cl.data[bitlen_cl.size - 1] == 0 && bitlen_cl.size > 4)
; 1854 :     {
; 1855 :       /*remove zeros at the end, but minimum size must be 4*/
; 1856 :       if(!uivector_resize(&bitlen_cl, bitlen_cl.size - 1)) ERROR_BREAK(83 /*alloc fail*/);
; 1857 :     }
; 1858 :     if(error) break;
; 1859 : 
; 1860 :     /*
; 1861 :     Write everything into the output
; 1862 : 
; 1863 :     After the BFINAL and BTYPE, the dynamic block consists out of the following:
; 1864 :     - 5 bits HLIT, 5 bits HDIST, 4 bits HCLEN
; 1865 :     - (HCLEN+4)*3 bits code lengths of code length alphabet
; 1866 :     - HLIT + 257 code lenghts of lit/length alphabet (encoded using the code length
; 1867 :       alphabet, + possible repetition codes 16, 17, 18)
; 1868 :     - HDIST + 1 code lengths of distance alphabet (encoded using the code length
; 1869 :       alphabet, + possible repetition codes 16, 17, 18)
; 1870 :     - compressed data
; 1871 :     - 256 (end code)
; 1872 :     */
; 1873 : 
; 1874 :     /*Write block type*/
; 1875 :     addBitToStream(bp, out, BFINAL);
; 1876 :     addBitToStream(bp, out, 0); /*first bit of BTYPE "dynamic"*/
; 1877 :     addBitToStream(bp, out, 1); /*second bit of BTYPE "dynamic"*/
; 1878 : 
; 1879 :     /*write the HLIT, HDIST and HCLEN values*/
; 1880 :     HLIT = (unsigned)(numcodes_ll - 257);
; 1881 :     HDIST = (unsigned)(numcodes_d - 1);
; 1882 :     HCLEN = (unsigned)bitlen_cl.size - 4;
; 1883 :     /*trim zeroes for HCLEN. HLIT and HDIST were already trimmed at tree creation*/
; 1884 :     while(!bitlen_cl.data[HCLEN + 4 - 1] && HCLEN > 0) HCLEN--;
; 1885 :     addBitsToStream(bp, out, HLIT, 5);
; 1886 :     addBitsToStream(bp, out, HDIST, 5);
; 1887 :     addBitsToStream(bp, out, HCLEN, 4);
; 1888 : 
; 1889 :     /*write the code lenghts of the code length alphabet*/
; 1890 :     for(i = 0; i < HCLEN + 4; i++) addBitsToStream(bp, out, bitlen_cl.data[i], 3);
; 1891 : 
; 1892 :     /*write the lenghts of the lit/len AND the dist alphabet*/
; 1893 :     for(i = 0; i < bitlen_lld_e.size; i++)
; 1894 :     {
; 1895 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_cl, bitlen_lld_e.data[i]),
; 1896 :                        HuffmanTree_getLength(&tree_cl, bitlen_lld_e.data[i]));
; 1897 :       /*extra bits of repeat codes*/
; 1898 :       if(bitlen_lld_e.data[i] == 16) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 2);
; 1899 :       else if(bitlen_lld_e.data[i] == 17) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 3);
; 1900 :       else if(bitlen_lld_e.data[i] == 18) addBitsToStream(bp, out, bitlen_lld_e.data[++i], 7);
; 1901 :     }
; 1902 : 
; 1903 :     /*write the compressed data symbols*/
; 1904 :     writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1905 :     /*error: the length of the end code 256 must be larger than 0*/
; 1906 :     if(HuffmanTree_getLength(&tree_ll, 256) == 0) ERROR_BREAK(64);
; 1907 : 
; 1908 :     /*write the end code*/
; 1909 :     addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1910 : 
; 1911 :     break; /*end of error-while*/
; 1912 :   }
; 1913 : 
; 1914 :   /*cleanup*/
; 1915 :   uivector_cleanup(&lz77_encoded);
; 1916 :   HuffmanTree_cleanup(&tree_ll);
; 1917 :   HuffmanTree_cleanup(&tree_d);
; 1918 :   HuffmanTree_cleanup(&tree_cl);
; 1919 :   uivector_cleanup(&frequencies_ll);
; 1920 :   uivector_cleanup(&frequencies_d);
; 1921 :   uivector_cleanup(&frequencies_cl);
; 1922 :   uivector_cleanup(&bitlen_lld_e);
; 1923 :   uivector_cleanup(&bitlen_lld);
; 1924 :   uivector_cleanup(&bitlen_cl);
; 1925 : 
; 1926 :   return error;
; 1927 : }
; 1928 : 
; 1929 : static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,
; 1930 :                              const unsigned char* data,
; 1931 :                              size_t datapos, size_t dataend,
; 1932 :                              const LodePNGCompressSettings* settings, int final)
; 1933 : {
; 1934 :   HuffmanTree tree_ll; /*tree for literal values and length codes*/
; 1935 :   HuffmanTree tree_d; /*tree for distance codes*/
; 1936 : 
; 1937 :   unsigned BFINAL = final;
; 1938 :   unsigned error = 0;
; 1939 :   size_t i;
; 1940 : 
; 1941 :   HuffmanTree_init(&tree_ll);
; 1942 :   HuffmanTree_init(&tree_d);
; 1943 : 
; 1944 :   generateFixedLitLenTree(&tree_ll);
; 1945 :   generateFixedDistanceTree(&tree_d);
; 1946 : 
; 1947 :   addBitToStream(bp, out, BFINAL);
; 1948 :   addBitToStream(bp, out, 1); /*first bit of BTYPE*/
; 1949 :   addBitToStream(bp, out, 0); /*second bit of BTYPE*/
; 1950 : 
; 1951 :   if(settings->use_lz77) /*LZ77 encoded*/
; 1952 :   {
; 1953 :     uivector lz77_encoded;
; 1954 :     uivector_init(&lz77_encoded);
; 1955 :     error = encodeLZ77(&lz77_encoded, hash, data, datapos, dataend, settings->windowsize,
; 1956 :                        settings->minmatch, settings->nicematch, settings->lazymatching);
; 1957 :     if(!error) writeLZ77data(bp, out, &lz77_encoded, &tree_ll, &tree_d);
; 1958 :     uivector_cleanup(&lz77_encoded);
; 1959 :   }
; 1960 :   else /*no LZ77, but still will be Huffman compressed*/
; 1961 :   {
; 1962 :     for(i = datapos; i < dataend; i++)
; 1963 :     {
; 1964 :       addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, data[i]), HuffmanTree_getLength(&tree_ll, data[i]));
; 1965 :     }
; 1966 :   }
; 1967 :   /*add END code*/
; 1968 :   if(!error) addHuffmanSymbol(bp, out, HuffmanTree_getCode(&tree_ll, 256), HuffmanTree_getLength(&tree_ll, 256));
; 1969 : 
; 1970 :   /*cleanup*/
; 1971 :   HuffmanTree_cleanup(&tree_ll);
; 1972 :   HuffmanTree_cleanup(&tree_d);
; 1973 : 
; 1974 :   return error;
; 1975 : }
; 1976 : 
; 1977 : static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,
; 1978 :                                  const LodePNGCompressSettings* settings)
; 1979 : {
; 1980 :   unsigned error = 0;
; 1981 :   size_t i, blocksize, numdeflateblocks;
; 1982 :   size_t bp = 0; /*the bit pointer*/
; 1983 :   Hash hash;
; 1984 : 
; 1985 :   if(settings->btype > 2) return 61;
; 1986 :   else if(settings->btype == 0) return deflateNoCompression(out, in, insize);
; 1987 :   else if(settings->btype == 1) blocksize = insize;
; 1988 :   else /*if(settings->btype == 2)*/
; 1989 :   {
; 1990 :     blocksize = insize / 8 + 8;
; 1991 :     if(blocksize < 65535) blocksize = 65535;
; 1992 :   }
; 1993 : 
; 1994 :   numdeflateblocks = (insize + blocksize - 1) / blocksize;
; 1995 :   if(numdeflateblocks == 0) numdeflateblocks = 1;
; 1996 : 
; 1997 :   error = hash_init(&hash, settings->windowsize);
; 1998 :   if(error) return error;
; 1999 : 
; 2000 :   for(i = 0; i < numdeflateblocks && !error; i++)
; 2001 :   {
; 2002 :     int final = i == numdeflateblocks - 1;
; 2003 :     size_t start = i * blocksize;
; 2004 :     size_t end = start + blocksize;
; 2005 :     if(end > insize) end = insize;
; 2006 : 
; 2007 :     if(settings->btype == 1) error = deflateFixed(out, &bp, &hash, in, start, end, settings, final);
; 2008 :     else if(settings->btype == 2) error = deflateDynamic(out, &bp, &hash, in, start, end, settings, final);
; 2009 :   }
; 2010 : 
; 2011 :   hash_cleanup(&hash);
; 2012 : 
; 2013 :   return error;
; 2014 : }
; 2015 : 
; 2016 : unsigned lodepng_deflate(unsigned char** out, size_t* outsize,
; 2017 :                          const unsigned char* in, size_t insize,
; 2018 :                          const LodePNGCompressSettings* settings)
; 2019 : {
; 2020 :   unsigned error;
; 2021 :   ucvector v;
; 2022 :   ucvector_init_buffer(&v, *out, *outsize);
; 2023 :   error = lodepng_deflatev(&v, in, insize, settings);
; 2024 :   *out = v.data;
; 2025 :   *outsize = v.size;
; 2026 :   return error;
; 2027 : }
; 2028 : 
; 2029 : static unsigned deflate(unsigned char** out, size_t* outsize,
; 2030 :                         const unsigned char* in, size_t insize,
; 2031 :                         const LodePNGCompressSettings* settings)
; 2032 : {
; 2033 :   if(settings->custom_deflate)
; 2034 :   {
; 2035 :     return settings->custom_deflate(out, outsize, in, insize, settings);
; 2036 :   }
; 2037 :   else
; 2038 :   {
; 2039 :     return lodepng_deflate(out, outsize, in, insize, settings);
; 2040 :   }
; 2041 : }
; 2042 : 
; 2043 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2044 : 
; 2045 : /* ////////////////////////////////////////////////////////////////////////// */
; 2046 : /* / Adler32                                                                  */
; 2047 : /* ////////////////////////////////////////////////////////////////////////// */
; 2048 : 
; 2049 : static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
; 2050 : {
; 2051 :    unsigned s1 = adler & 0xffff;
; 2052 :    unsigned s2 = (adler >> 16) & 0xffff;
; 2053 : 
; 2054 :   while(len > 0)
; 2055 :   {
; 2056 :     /*at least 5550 sums can be done before the sums overflow, saving a lot of module divisions*/
; 2057 :     unsigned amount = len > 5550 ? 5550 : len;
; 2058 :     len -= amount;
; 2059 :     while(amount > 0)
; 2060 :     {
; 2061 :       s1 += (*data++);
; 2062 :       s2 += s1;
; 2063 :       amount--;
; 2064 :     }
; 2065 :     s1 %= 65521;
; 2066 :     s2 %= 65521;
; 2067 :   }
; 2068 : 
; 2069 :   return (s2 << 16) | s1;
; 2070 : }
; 2071 : 
; 2072 : /*Return the adler32 of the bytes data[0..len-1]*/
; 2073 : static unsigned adler32(const unsigned char* data, unsigned len)
; 2074 : {
; 2075 :   return update_adler32(1L, data, len);
; 2076 : }
; 2077 : 
; 2078 : /* ////////////////////////////////////////////////////////////////////////// */
; 2079 : /* / Zlib                                                                   / */
; 2080 : /* ////////////////////////////////////////////////////////////////////////// */
; 2081 : 
; 2082 : #ifdef LODEPNG_COMPILE_DECODER
; 2083 : 
; 2084 : unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2085 :                                  size_t insize, const LodePNGDecompressSettings* settings)
; 2086 : {
; 2087 :   unsigned error = 0;
; 2088 :   unsigned CM, CINFO, FDICT;
; 2089 : 
; 2090 :   if(insize < 2) return 53; /*error, size of zlib data too small*/
; 2091 :   /*read information from zlib header*/
; 2092 :   if((in[0] * 256 + in[1]) % 31 != 0)
; 2093 :   {
; 2094 :     /*error: 256 * in[0] + in[1] must be a multiple of 31, the FCHECK value is supposed to be made that way*/
; 2095 :     return 24;
; 2096 :   }
; 2097 : 
; 2098 :   CM = in[0] & 15;
; 2099 :   CINFO = (in[0] >> 4) & 15;
; 2100 :   /*FCHECK = in[1] & 31;*/ /*FCHECK is already tested above*/
; 2101 :   FDICT = (in[1] >> 5) & 1;
; 2102 :   /*FLEVEL = (in[1] >> 6) & 3;*/ /*FLEVEL is not used here*/
; 2103 : 
; 2104 :   if(CM != 8 || CINFO > 7)
; 2105 :   {
; 2106 :     /*error: only compression method 8: inflate with sliding window of 32k is supported by the PNG spec*/
; 2107 :     return 25;
; 2108 :   }
; 2109 :   if(FDICT != 0)
; 2110 :   {
; 2111 :     /*error: the specification of PNG says about the zlib stream:
; 2112 :       "The additional flags shall not specify a preset dictionary."*/
; 2113 :     return 26;
; 2114 :   }
; 2115 : 
; 2116 :   error = inflate(out, outsize, in + 2, insize - 2, settings);
; 2117 :   if(error) return error;
; 2118 : 
; 2119 :   if(!settings->ignore_adler32)
; 2120 :   {
; 2121 :     unsigned ADLER32 = lodepng_read32bitInt(&in[insize - 4]);
; 2122 :     unsigned checksum = adler32(*out, (unsigned)(*outsize));
; 2123 :     if(checksum != ADLER32) return 58; /*error, adler checksum not correct, data must be corrupted*/
; 2124 :   }
; 2125 : 
; 2126 :   return 0; /*no error*/
; 2127 : }
; 2128 : 
; 2129 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2130 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2131 : {
; 2132 :   if(settings->custom_zlib)
; 2133 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2134 :   else
; 2135 :     return lodepng_zlib_decompress(out, outsize, in, insize, settings);
; 2136 : }
; 2137 : 
; 2138 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2139 : 
; 2140 : #ifdef LODEPNG_COMPILE_ENCODER
; 2141 : 
; 2142 : unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2143 :                                size_t insize, const LodePNGCompressSettings* settings)
; 2144 : {
; 2145 :   /*initially, *out must be NULL and outsize 0, if you just give some random *out
; 2146 :   that's pointing to a non allocated buffer, this'll crash*/
; 2147 :   ucvector outv;
; 2148 :   size_t i;
; 2149 :   unsigned error;
; 2150 :   unsigned char* deflatedata = 0;
; 2151 :   size_t deflatesize = 0;
; 2152 : 
; 2153 :   unsigned ADLER32;
; 2154 :   /*zlib data: 1 byte CMF (CM+CINFO), 1 byte FLG, deflate data, 4 byte ADLER32 checksum of the Decompressed data*/
; 2155 :   unsigned CMF = 120; /*0b01111000: CM 8, CINFO 7. With CINFO 7, any window size up to 32768 can be used.*/
; 2156 :   unsigned FLEVEL = 0;
; 2157 :   unsigned FDICT = 0;
; 2158 :   unsigned CMFFLG = 256 * CMF + FDICT * 32 + FLEVEL * 64;
; 2159 :   unsigned FCHECK = 31 - CMFFLG % 31;
; 2160 :   CMFFLG += FCHECK;
; 2161 : 
; 2162 :   /*ucvector-controlled version of the output buffer, for dynamic array*/
; 2163 :   ucvector_init_buffer(&outv, *out, *outsize);
; 2164 : 
; 2165 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG / 256));
; 2166 :   ucvector_push_back(&outv, (unsigned char)(CMFFLG % 256));
; 2167 : 
; 2168 :   error = deflate(&deflatedata, &deflatesize, in, insize, settings);
; 2169 : 
; 2170 :   if(!error)
; 2171 :   {
; 2172 :     ADLER32 = adler32(in, (unsigned)insize);
; 2173 :     for(i = 0; i < deflatesize; i++) ucvector_push_back(&outv, deflatedata[i]);
; 2174 :     lodepng_free(deflatedata);
; 2175 :     lodepng_add32bitInt(&outv, ADLER32);
; 2176 :   }
; 2177 : 
; 2178 :   *out = outv.data;
; 2179 :   *outsize = outv.size;
; 2180 : 
; 2181 :   return error;
; 2182 : }
; 2183 : 
; 2184 : /* compress using the default or custom zlib function */
; 2185 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2186 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2187 : {
; 2188 :   if(settings->custom_zlib)
; 2189 :   {
; 2190 :     return settings->custom_zlib(out, outsize, in, insize, settings);
; 2191 :   }
; 2192 :   else
; 2193 :   {
; 2194 :     return lodepng_zlib_compress(out, outsize, in, insize, settings);
; 2195 :   }
; 2196 : }
; 2197 : 
; 2198 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2199 : 
; 2200 : #else /*no LODEPNG_COMPILE_ZLIB*/
; 2201 : 
; 2202 : #ifdef LODEPNG_COMPILE_DECODER
; 2203 : static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2204 :                                 size_t insize, const LodePNGDecompressSettings* settings)
; 2205 : {
; 2206 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2207 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2208 : }
; 2209 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2210 : #ifdef LODEPNG_COMPILE_ENCODER
; 2211 : static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,
; 2212 :                               size_t insize, const LodePNGCompressSettings* settings)
; 2213 : {
; 2214 :   if (!settings->custom_zlib) return 87; /*no custom zlib function provided */
; 2215 :   return settings->custom_zlib(out, outsize, in, insize, settings);
; 2216 : }
; 2217 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2218 : 
; 2219 : #endif /*LODEPNG_COMPILE_ZLIB*/
; 2220 : 
; 2221 : /* ////////////////////////////////////////////////////////////////////////// */
; 2222 : 
; 2223 : #ifdef LODEPNG_COMPILE_ENCODER
; 2224 : 
; 2225 : /*this is a good tradeoff between speed and compression ratio*/
; 2226 : #define DEFAULT_WINDOWSIZE 2048
; 2227 : 
; 2228 : void lodepng_compress_settings_init(LodePNGCompressSettings* settings)
; 2229 : {
; 2230 :   /*compress with dynamic huffman tree (not in the mathematical sense, just not the predefined one)*/
; 2231 :   settings->btype = 2;
; 2232 :   settings->use_lz77 = 1;
; 2233 :   settings->windowsize = DEFAULT_WINDOWSIZE;
; 2234 :   settings->minmatch = 3;
; 2235 :   settings->nicematch = 128;
; 2236 :   settings->lazymatching = 1;
; 2237 : 
; 2238 :   settings->custom_zlib = 0;
; 2239 :   settings->custom_deflate = 0;
; 2240 :   settings->custom_context = 0;
; 2241 : }
; 2242 : 
; 2243 : const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 3, 128, 1, 0, 0, 0};
; 2244 : 
; 2245 : 
; 2246 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2247 : 
; 2248 : #ifdef LODEPNG_COMPILE_DECODER
; 2249 : 
; 2250 : void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings)
; 2251 : {
; 2252 :   settings->ignore_adler32 = 0;
; 2253 : 
; 2254 :   settings->custom_zlib = 0;
; 2255 :   settings->custom_inflate = 0;
; 2256 :   settings->custom_context = 0;
; 2257 : }
; 2258 : 
; 2259 : const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0, 0, 0};
; 2260 : 
; 2261 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2262 : 
; 2263 : /* ////////////////////////////////////////////////////////////////////////// */
; 2264 : /* ////////////////////////////////////////////////////////////////////////// */
; 2265 : /* // End of Zlib related code. Begin of PNG related code.                 // */
; 2266 : /* ////////////////////////////////////////////////////////////////////////// */
; 2267 : /* ////////////////////////////////////////////////////////////////////////// */
; 2268 : 
; 2269 : #ifdef LODEPNG_COMPILE_PNG
; 2270 : 
; 2271 : /* ////////////////////////////////////////////////////////////////////////// */
; 2272 : /* / CRC32                                                                  / */
; 2273 : /* ////////////////////////////////////////////////////////////////////////// */
; 2274 : 
; 2275 : /* CRC polynomial: 0xedb88320 */
; 2276 : static unsigned lodepng_crc32_table[256] = {
; 2277 :            0u, 1996959894u, 3993919788u, 2567524794u,  124634137u, 1886057615u, 3915621685u, 2657392035u,
; 2278 :    249268274u, 2044508324u, 3772115230u, 2547177864u,  162941995u, 2125561021u, 3887607047u, 2428444049u,
; 2279 :    498536548u, 1789927666u, 4089016648u, 2227061214u,  450548861u, 1843258603u, 4107580753u, 2211677639u,
; 2280 :    325883990u, 1684777152u, 4251122042u, 2321926636u,  335633487u, 1661365465u, 4195302755u, 2366115317u,
; 2281 :    997073096u, 1281953886u, 3579855332u, 2724688242u, 1006888145u, 1258607687u, 3524101629u, 2768942443u,
; 2282 :    901097722u, 1119000684u, 3686517206u, 2898065728u,  853044451u, 1172266101u, 3705015759u, 2882616665u,
; 2283 :    651767980u, 1373503546u, 3369554304u, 3218104598u,  565507253u, 1454621731u, 3485111705u, 3099436303u,
; 2284 :    671266974u, 1594198024u, 3322730930u, 2970347812u,  795835527u, 1483230225u, 3244367275u, 3060149565u,
; 2285 :   1994146192u,   31158534u, 2563907772u, 4023717930u, 1907459465u,  112637215u, 2680153253u, 3904427059u,
; 2286 :   2013776290u,  251722036u, 2517215374u, 3775830040u, 2137656763u,  141376813u, 2439277719u, 3865271297u,
; 2287 :   1802195444u,  476864866u, 2238001368u, 4066508878u, 1812370925u,  453092731u, 2181625025u, 4111451223u,
; 2288 :   1706088902u,  314042704u, 2344532202u, 4240017532u, 1658658271u,  366619977u, 2362670323u, 4224994405u,
; 2289 :   1303535960u,  984961486u, 2747007092u, 3569037538u, 1256170817u, 1037604311u, 2765210733u, 3554079995u,
; 2290 :   1131014506u,  879679996u, 2909243462u, 3663771856u, 1141124467u,  855842277u, 2852801631u, 3708648649u,
; 2291 :   1342533948u,  654459306u, 3188396048u, 3373015174u, 1466479909u,  544179635u, 3110523913u, 3462522015u,
; 2292 :   1591671054u,  702138776u, 2966460450u, 3352799412u, 1504918807u,  783551873u, 3082640443u, 3233442989u,
; 2293 :   3988292384u, 2596254646u,   62317068u, 1957810842u, 3939845945u, 2647816111u,   81470997u, 1943803523u,
; 2294 :   3814918930u, 2489596804u,  225274430u, 2053790376u, 3826175755u, 2466906013u,  167816743u, 2097651377u,
; 2295 :   4027552580u, 2265490386u,  503444072u, 1762050814u, 4150417245u, 2154129355u,  426522225u, 1852507879u,
; 2296 :   4275313526u, 2312317920u,  282753626u, 1742555852u, 4189708143u, 2394877945u,  397917763u, 1622183637u,
; 2297 :   3604390888u, 2714866558u,  953729732u, 1340076626u, 3518719985u, 2797360999u, 1068828381u, 1219638859u,
; 2298 :   3624741850u, 2936675148u,  906185462u, 1090812512u, 3747672003u, 2825379669u,  829329135u, 1181335161u,
; 2299 :   3412177804u, 3160834842u,  628085408u, 1382605366u, 3423369109u, 3138078467u,  570562233u, 1426400815u,
; 2300 :   3317316542u, 2998733608u,  733239954u, 1555261956u, 3268935591u, 3050360625u,  752459403u, 1541320221u,
; 2301 :   2607071920u, 3965973030u, 1969922972u,   40735498u, 2617837225u, 3943577151u, 1913087877u,   83908371u,
; 2302 :   2512341634u, 3803740692u, 2075208622u,  213261112u, 2463272603u, 3855990285u, 2094854071u,  198958881u,
; 2303 :   2262029012u, 4057260610u, 1759359992u,  534414190u, 2176718541u, 4139329115u, 1873836001u,  414664567u,
; 2304 :   2282248934u, 4279200368u, 1711684554u,  285281116u, 2405801727u, 4167216745u, 1634467795u,  376229701u,
; 2305 :   2685067896u, 3608007406u, 1308918612u,  956543938u, 2808555105u, 3495958263u, 1231636301u, 1047427035u,
; 2306 :   2932959818u, 3654703836u, 1088359270u,  936918000u, 2847714899u, 3736837829u, 1202900863u,  817233897u,
; 2307 :   3183342108u, 3401237130u, 1404277552u,  615818150u, 3134207493u, 3453421203u, 1423857449u,  601450431u,
; 2308 :   3009837614u, 3294710456u, 1567103746u,  711928724u, 3020668471u, 3272380065u, 1510334235u,  755167117u
; 2309 : };
; 2310 : 
; 2311 : /*Return the CRC of the bytes buf[0..len-1].*/
; 2312 : unsigned lodepng_crc32(const unsigned char* buf, size_t len)
; 2313 : {
; 2314 :   unsigned c = 0xffffffffL;
; 2315 :   size_t n;
; 2316 : 
; 2317 :   for(n = 0; n < len; n++)
; 2318 :   {
; 2319 :     c = lodepng_crc32_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
; 2320 :   }
; 2321 :   return c ^ 0xffffffffL;
; 2322 : }
; 2323 : 
; 2324 : /* ////////////////////////////////////////////////////////////////////////// */
; 2325 : /* / Reading and writing single bits and bytes from/to stream for LodePNG   / */
; 2326 : /* ////////////////////////////////////////////////////////////////////////// */
; 2327 : 
; 2328 : static unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream)
; 2329 : {
; 2330 :   unsigned char result = (unsigned char)((bitstream[(*bitpointer) >> 3] >> (7 - ((*bitpointer) & 0x7))) & 1);
; 2331 :   (*bitpointer)++;
; 2332 :   return result;
; 2333 : }
; 2334 : 
; 2335 : static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)
; 2336 : {
; 2337 :   unsigned result = 0;
; 2338 :   size_t i;
; 2339 :   for(i = nbits - 1; i < nbits; i--)
; 2340 :   {
; 2341 :     result += (unsigned)readBitFromReversedStream(bitpointer, bitstream) << i;
; 2342 :   }
; 2343 :   return result;
; 2344 : }
; 2345 : 
; 2346 : #ifdef LODEPNG_COMPILE_DECODER
; 2347 : static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2348 : {
; 2349 :   /*the current bit in bitstream must be 0 for this to work*/
; 2350 :   if(bit)
; 2351 :   {
; 2352 :     /*earlier bit of huffman code is in a lesser significant bit of an earlier byte*/
; 2353 :     bitstream[(*bitpointer) >> 3] |= (bit << (7 - ((*bitpointer) & 0x7)));
; 2354 :   }
; 2355 :   (*bitpointer)++;
; 2356 : }
; 2357 : #endif /*LODEPNG_COMPILE_DECODER*/
; 2358 : 
; 2359 : static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)
; 2360 : {
; 2361 :   /*the current bit in bitstream may be 0 or 1 for this to work*/
; 2362 :   if(bit == 0) bitstream[(*bitpointer) >> 3] &=  (unsigned char)(~(1 << (7 - ((*bitpointer) & 0x7))));
; 2363 :   else         bitstream[(*bitpointer) >> 3] |=  (1 << (7 - ((*bitpointer) & 0x7)));
; 2364 :   (*bitpointer)++;
; 2365 : }
; 2366 : 
; 2367 : /* ////////////////////////////////////////////////////////////////////////// */
; 2368 : /* / PNG chunks                                                             / */
; 2369 : /* ////////////////////////////////////////////////////////////////////////// */
; 2370 : 
; 2371 : unsigned lodepng_chunk_length(const unsigned char* chunk)
; 2372 : {
; 2373 :   return lodepng_read32bitInt(&chunk[0]);
; 2374 : }
; 2375 : 
; 2376 : void lodepng_chunk_type(char type[5], const unsigned char* chunk)
; 2377 : {
; 2378 :   unsigned i;
; 2379 :   for(i = 0; i < 4; i++) type[i] = chunk[4 + i];
; 2380 :   type[4] = 0; /*null termination char*/
; 2381 : }
; 2382 : 
; 2383 : unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type)
; 2384 : {
; 2385 :   if(strlen(type) != 4) return 0;
; 2386 :   return (chunk[4] == type[0] && chunk[5] == type[1] && chunk[6] == type[2] && chunk[7] == type[3]);
; 2387 : }
; 2388 : 
; 2389 : unsigned char lodepng_chunk_ancillary(const unsigned char* chunk)
; 2390 : {
; 2391 :   return((chunk[4] & 32) != 0);
; 2392 : }
; 2393 : 
; 2394 : unsigned char lodepng_chunk_private(const unsigned char* chunk)
; 2395 : {
; 2396 :   return((chunk[6] & 32) != 0);
; 2397 : }
; 2398 : 
; 2399 : unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk)
; 2400 : {
; 2401 :   return((chunk[7] & 32) != 0);
; 2402 : }
; 2403 : 
; 2404 : unsigned char* lodepng_chunk_data(unsigned char* chunk)
; 2405 : {
; 2406 :   return &chunk[8];
; 2407 : }
; 2408 : 
; 2409 : const unsigned char* lodepng_chunk_data_const(const unsigned char* chunk)
; 2410 : {
; 2411 :   return &chunk[8];
; 2412 : }
; 2413 : 
; 2414 : unsigned lodepng_chunk_check_crc(const unsigned char* chunk)
; 2415 : {
; 2416 :   unsigned length = lodepng_chunk_length(chunk);
; 2417 :   unsigned CRC = lodepng_read32bitInt(&chunk[length + 8]);
; 2418 :   /*the CRC is taken of the data and the 4 chunk type letters, not the length*/
; 2419 :   unsigned checksum = lodepng_crc32(&chunk[4], length + 4);
; 2420 :   if(CRC != checksum) return 1;
; 2421 :   else return 0;
; 2422 : }
; 2423 : 
; 2424 : void lodepng_chunk_generate_crc(unsigned char* chunk)
; 2425 : {
; 2426 :   unsigned length = lodepng_chunk_length(chunk);
; 2427 :   unsigned CRC = lodepng_crc32(&chunk[4], length + 4);
; 2428 :   lodepng_set32bitInt(chunk + 8 + length, CRC);
; 2429 : }
; 2430 : 
; 2431 : unsigned char* lodepng_chunk_next(unsigned char* chunk)
; 2432 : {
; 2433 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2434 :   return &chunk[total_chunk_length];
; 2435 : }
; 2436 : 
; 2437 : const unsigned char* lodepng_chunk_next_const(const unsigned char* chunk)
; 2438 : {
; 2439 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2440 :   return &chunk[total_chunk_length];
; 2441 : }
; 2442 : 
; 2443 : unsigned lodepng_chunk_append(unsigned char** out, size_t* outlength, const unsigned char* chunk)
; 2444 : {
; 2445 :   unsigned i;
; 2446 :   unsigned total_chunk_length = lodepng_chunk_length(chunk) + 12;
; 2447 :   unsigned char *chunk_start, *new_buffer;
; 2448 :   size_t new_length = (*outlength) + total_chunk_length;
; 2449 :   if(new_length < total_chunk_length || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2450 : 
; 2451 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2452 :   if(!new_buffer) return 83; /*alloc fail*/
; 2453 :   (*out) = new_buffer;
; 2454 :   (*outlength) = new_length;
; 2455 :   chunk_start = &(*out)[new_length - total_chunk_length];
; 2456 : 
; 2457 :   for(i = 0; i < total_chunk_length; i++) chunk_start[i] = chunk[i];
; 2458 : 
; 2459 :   return 0;
; 2460 : }
; 2461 : 
; 2462 : unsigned lodepng_chunk_create(unsigned char** out, size_t* outlength, unsigned length,
; 2463 :                               const char* type, const unsigned char* data)
; 2464 : {
; 2465 :   unsigned i;
; 2466 :   unsigned char *chunk, *new_buffer;
; 2467 :   size_t new_length = (*outlength) + length + 12;
; 2468 :   if(new_length < length + 12 || new_length < (*outlength)) return 77; /*integer overflow happened*/
; 2469 :   new_buffer = (unsigned char*)lodepng_realloc(*out, new_length);
; 2470 :   if(!new_buffer) return 83; /*alloc fail*/
; 2471 :   (*out) = new_buffer;
; 2472 :   (*outlength) = new_length;
; 2473 :   chunk = &(*out)[(*outlength) - length - 12];
; 2474 : 
; 2475 :   /*1: length*/
; 2476 :   lodepng_set32bitInt(chunk, (unsigned)length);
; 2477 : 
; 2478 :   /*2: chunk name (4 letters)*/
; 2479 :   chunk[4] = type[0];
; 2480 :   chunk[5] = type[1];
; 2481 :   chunk[6] = type[2];
; 2482 :   chunk[7] = type[3];
; 2483 : 
; 2484 :   /*3: the data*/
; 2485 :   for(i = 0; i < length; i++) chunk[8 + i] = data[i];
; 2486 : 
; 2487 :   /*4: CRC (of the chunkname characters and the data)*/
; 2488 :   lodepng_chunk_generate_crc(chunk);
; 2489 : 
; 2490 :   return 0;
; 2491 : }
; 2492 : 
; 2493 : /* ////////////////////////////////////////////////////////////////////////// */
; 2494 : /* / Color types and such                                                   / */
; 2495 : /* ////////////////////////////////////////////////////////////////////////// */
; 2496 : 
; 2497 : /*return type is a LodePNG error code*/
; 2498 : static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) /*bd = bitdepth*/
; 2499 : {
; 2500 :   switch(colortype)
; 2501 :   {
; 2502 :     case 0: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8 || bd == 16)) return 37; break; /*grey*/
; 2503 :     case 2: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGB*/
; 2504 :     case 3: if(!(bd == 1 || bd == 2 || bd == 4 || bd == 8            )) return 37; break; /*palette*/
; 2505 :     case 4: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*grey + alpha*/
; 2506 :     case 6: if(!(                                 bd == 8 || bd == 16)) return 37; break; /*RGBA*/
; 2507 :     default: return 31;
; 2508 :   }
; 2509 :   return 0; /*allowed color type / bits combination*/
; 2510 : }
; 2511 : 
; 2512 : static unsigned getNumColorChannels(LodePNGColorType colortype)
; 2513 : {
; 2514 :   switch(colortype)
; 2515 :   {
; 2516 :     case 0: return 1; /*grey*/
; 2517 :     case 2: return 3; /*RGB*/
; 2518 :     case 3: return 1; /*palette*/
; 2519 :     case 4: return 2; /*grey + alpha*/
; 2520 :     case 6: return 4; /*RGBA*/
; 2521 :   }
; 2522 :   return 0; /*unexisting color type*/
; 2523 : }
; 2524 : 
; 2525 : static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)
; 2526 : {
; 2527 :   /*bits per pixel is amount of channels * bits per channel*/
; 2528 :   return getNumColorChannels(colortype) * bitdepth;
; 2529 : }
; 2530 : 
; 2531 : /* ////////////////////////////////////////////////////////////////////////// */
; 2532 : 
; 2533 : void lodepng_color_mode_init(LodePNGColorMode* info)
; 2534 : {
; 2535 :   info->key_defined = 0;
; 2536 :   info->key_r = info->key_g = info->key_b = 0;
; 2537 :   info->colortype = LCT_RGBA;
; 2538 :   info->bitdepth = 8;
; 2539 :   info->palette = 0;
; 2540 :   info->palettesize = 0;
; 2541 : }
; 2542 : 
; 2543 : void lodepng_color_mode_cleanup(LodePNGColorMode* info)
; 2544 : {
; 2545 :   lodepng_palette_clear(info);
; 2546 : }
; 2547 : 
; 2548 : unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)
; 2549 : {
; 2550 :   size_t i;
; 2551 :   lodepng_color_mode_cleanup(dest);
; 2552 :   *dest = *source;
; 2553 :   if(source->palette)
; 2554 :   {
; 2555 :     dest->palette = (unsigned char*)lodepng_malloc(1024);
; 2556 :     if(!dest->palette && source->palettesize) return 83; /*alloc fail*/
; 2557 :     for(i = 0; i < source->palettesize * 4; i++) dest->palette[i] = source->palette[i];
; 2558 :   }
; 2559 :   return 0;
; 2560 : }
; 2561 : 
; 2562 : static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)
; 2563 : {
; 2564 :   size_t i;
; 2565 :   if(a->colortype != b->colortype) return 0;
; 2566 :   if(a->bitdepth != b->bitdepth) return 0;
; 2567 :   if(a->key_defined != b->key_defined) return 0;
; 2568 :   if(a->key_defined)
; 2569 :   {
; 2570 :     if(a->key_r != b->key_r) return 0;
; 2571 :     if(a->key_g != b->key_g) return 0;
; 2572 :     if(a->key_b != b->key_b) return 0;
; 2573 :   }
; 2574 :   if(a->palettesize != b->palettesize) return 0;
; 2575 :   for(i = 0; i < a->palettesize * 4; i++)
; 2576 :   {
; 2577 :     if(a->palette[i] != b->palette[i]) return 0;
; 2578 :   }
; 2579 :   return 1;
; 2580 : }
; 2581 : 
; 2582 : void lodepng_palette_clear(LodePNGColorMode* info)
; 2583 : {
; 2584 :   if(info->palette) lodepng_free(info->palette);

  000ec	85 c0		 test	 eax, eax
  000ee	74 09		 je	 SHORT $LN48@decode

; 73   :   free(ptr);

  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 _free
  000f6	83 c4 04	 add	 esp, 4
$LN48@decode:

; 2656 : }
; 2657 : 
; 2658 : size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)
; 2659 : {
; 2660 :   return (w * h * lodepng_get_bpp_lct(colortype, bitdepth) + 7) / 8;
; 2661 : }
; 2662 : 
; 2663 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2664 : 
; 2665 : static void LodePNGUnknownChunks_init(LodePNGInfo* info)
; 2666 : {
; 2667 :   unsigned i;
; 2668 :   for(i = 0; i < 3; i++) info->unknown_chunks_data[i] = 0;
; 2669 :   for(i = 0; i < 3; i++) info->unknown_chunks_size[i] = 0;
; 2670 : }
; 2671 : 
; 2672 : static void LodePNGUnknownChunks_cleanup(LodePNGInfo* info)
; 2673 : {
; 2674 :   unsigned i;
; 2675 :   for(i = 0; i < 3; i++) lodepng_free(info->unknown_chunks_data[i]);
; 2676 : }
; 2677 : 
; 2678 : static unsigned LodePNGUnknownChunks_copy(LodePNGInfo* dest, const LodePNGInfo* src)
; 2679 : {
; 2680 :   unsigned i;
; 2681 : 
; 2682 :   LodePNGUnknownChunks_cleanup(dest);
; 2683 : 
; 2684 :   for(i = 0; i < 3; i++)
; 2685 :   {
; 2686 :     size_t j;
; 2687 :     dest->unknown_chunks_size[i] = src->unknown_chunks_size[i];
; 2688 :     dest->unknown_chunks_data[i] = (unsigned char*)lodepng_malloc(src->unknown_chunks_size[i]);
; 2689 :     if(!dest->unknown_chunks_data[i] && dest->unknown_chunks_size[i]) return 83; /*alloc fail*/
; 2690 :     for(j = 0; j < src->unknown_chunks_size[i]; j++)
; 2691 :     {
; 2692 :       dest->unknown_chunks_data[i][j] = src->unknown_chunks_data[i][j];
; 2693 :     }
; 2694 :   }
; 2695 : 
; 2696 :   return 0;
; 2697 : }
; 2698 : 
; 2699 : /******************************************************************************/
; 2700 : 
; 2701 : static void LodePNGText_init(LodePNGInfo* info)
; 2702 : {
; 2703 :   info->text_num = 0;
; 2704 :   info->text_keys = NULL;
; 2705 :   info->text_strings = NULL;
; 2706 : }
; 2707 : 
; 2708 : static void LodePNGText_cleanup(LodePNGInfo* info)
; 2709 : {
; 2710 :   size_t i;
; 2711 :   for(i = 0; i < info->text_num; i++)
; 2712 :   {
; 2713 :     string_cleanup(&info->text_keys[i]);
; 2714 :     string_cleanup(&info->text_strings[i]);
; 2715 :   }
; 2716 :   lodepng_free(info->text_keys);
; 2717 :   lodepng_free(info->text_strings);
; 2718 : }
; 2719 : 
; 2720 : static unsigned LodePNGText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2721 : {
; 2722 :   size_t i = 0;
; 2723 :   dest->text_keys = 0;
; 2724 :   dest->text_strings = 0;
; 2725 :   dest->text_num = 0;
; 2726 :   for(i = 0; i < source->text_num; i++)
; 2727 :   {
; 2728 :     CERROR_TRY_RETURN(lodepng_add_text(dest, source->text_keys[i], source->text_strings[i]));
; 2729 :   }
; 2730 :   return 0;
; 2731 : }
; 2732 : 
; 2733 : void lodepng_clear_text(LodePNGInfo* info)
; 2734 : {
; 2735 :   LodePNGText_cleanup(info);
; 2736 : }
; 2737 : 
; 2738 : unsigned lodepng_add_text(LodePNGInfo* info, const char* key, const char* str)
; 2739 : {
; 2740 :   char** new_keys = (char**)(lodepng_realloc(info->text_keys, sizeof(char*) * (info->text_num + 1)));
; 2741 :   char** new_strings = (char**)(lodepng_realloc(info->text_strings, sizeof(char*) * (info->text_num + 1)));
; 2742 :   if(!new_keys || !new_strings)
; 2743 :   {
; 2744 :     lodepng_free(new_keys);
; 2745 :     lodepng_free(new_strings);
; 2746 :     return 83; /*alloc fail*/
; 2747 :   }
; 2748 : 
; 2749 :   info->text_num++;
; 2750 :   info->text_keys = new_keys;
; 2751 :   info->text_strings = new_strings;
; 2752 : 
; 2753 :   string_init(&info->text_keys[info->text_num - 1]);
; 2754 :   string_set(&info->text_keys[info->text_num - 1], key);
; 2755 : 
; 2756 :   string_init(&info->text_strings[info->text_num - 1]);
; 2757 :   string_set(&info->text_strings[info->text_num - 1], str);
; 2758 : 
; 2759 :   return 0;
; 2760 : }
; 2761 : 
; 2762 : /******************************************************************************/
; 2763 : 
; 2764 : static void LodePNGIText_init(LodePNGInfo* info)
; 2765 : {
; 2766 :   info->itext_num = 0;
; 2767 :   info->itext_keys = NULL;
; 2768 :   info->itext_langtags = NULL;
; 2769 :   info->itext_transkeys = NULL;
; 2770 :   info->itext_strings = NULL;
; 2771 : }
; 2772 : 
; 2773 : static void LodePNGIText_cleanup(LodePNGInfo* info)
; 2774 : {
; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)
; 2777 :   {
; 2778 :     string_cleanup(&info->itext_keys[i]);
; 2779 :     string_cleanup(&info->itext_langtags[i]);
; 2780 :     string_cleanup(&info->itext_transkeys[i]);
; 2781 :     string_cleanup(&info->itext_strings[i]);
; 2782 :   }
; 2783 :   lodepng_free(info->itext_keys);
; 2784 :   lodepng_free(info->itext_langtags);
; 2785 :   lodepng_free(info->itext_transkeys);
; 2786 :   lodepng_free(info->itext_strings);
; 2787 : }
; 2788 : 
; 2789 : static unsigned LodePNGIText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2790 : {
; 2791 :   size_t i = 0;
; 2792 :   dest->itext_keys = 0;
; 2793 :   dest->itext_langtags = 0;
; 2794 :   dest->itext_transkeys = 0;
; 2795 :   dest->itext_strings = 0;
; 2796 :   dest->itext_num = 0;
; 2797 :   for(i = 0; i < source->itext_num; i++)
; 2798 :   {
; 2799 :     CERROR_TRY_RETURN(lodepng_add_itext(dest, source->itext_keys[i], source->itext_langtags[i],
; 2800 :                                         source->itext_transkeys[i], source->itext_strings[i]));
; 2801 :   }
; 2802 :   return 0;
; 2803 : }
; 2804 : 
; 2805 : void lodepng_clear_itext(LodePNGInfo* info)
; 2806 : {
; 2807 :   LodePNGIText_cleanup(info);
; 2808 : }
; 2809 : 
; 2810 : unsigned lodepng_add_itext(LodePNGInfo* info, const char* key, const char* langtag,
; 2811 :                            const char* transkey, const char* str)
; 2812 : {
; 2813 :   char** new_keys = (char**)(lodepng_realloc(info->itext_keys, sizeof(char*) * (info->itext_num + 1)));
; 2814 :   char** new_langtags = (char**)(lodepng_realloc(info->itext_langtags, sizeof(char*) * (info->itext_num + 1)));
; 2815 :   char** new_transkeys = (char**)(lodepng_realloc(info->itext_transkeys, sizeof(char*) * (info->itext_num + 1)));
; 2816 :   char** new_strings = (char**)(lodepng_realloc(info->itext_strings, sizeof(char*) * (info->itext_num + 1)));
; 2817 :   if(!new_keys || !new_langtags || !new_transkeys || !new_strings)
; 2818 :   {
; 2819 :     lodepng_free(new_keys);
; 2820 :     lodepng_free(new_langtags);
; 2821 :     lodepng_free(new_transkeys);
; 2822 :     lodepng_free(new_strings);
; 2823 :     return 83; /*alloc fail*/
; 2824 :   }
; 2825 : 
; 2826 :   info->itext_num++;
; 2827 :   info->itext_keys = new_keys;
; 2828 :   info->itext_langtags = new_langtags;
; 2829 :   info->itext_transkeys = new_transkeys;
; 2830 :   info->itext_strings = new_strings;
; 2831 : 
; 2832 :   string_init(&info->itext_keys[info->itext_num - 1]);
; 2833 :   string_set(&info->itext_keys[info->itext_num - 1], key);
; 2834 : 
; 2835 :   string_init(&info->itext_langtags[info->itext_num - 1]);
; 2836 :   string_set(&info->itext_langtags[info->itext_num - 1], langtag);
; 2837 : 
; 2838 :   string_init(&info->itext_transkeys[info->itext_num - 1]);
; 2839 :   string_set(&info->itext_transkeys[info->itext_num - 1], transkey);
; 2840 : 
; 2841 :   string_init(&info->itext_strings[info->itext_num - 1]);
; 2842 :   string_set(&info->itext_strings[info->itext_num - 1], str);
; 2843 : 
; 2844 :   return 0;
; 2845 : }
; 2846 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2847 : 
; 2848 : void lodepng_info_init(LodePNGInfo* info)
; 2849 : {
; 2850 :   lodepng_color_mode_init(&info->color);
; 2851 :   info->interlace_method = 0;
; 2852 :   info->compression_method = 0;
; 2853 :   info->filter_method = 0;
; 2854 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2855 :   info->background_defined = 0;
; 2856 :   info->background_r = info->background_g = info->background_b = 0;
; 2857 : 
; 2858 :   LodePNGText_init(info);
; 2859 :   LodePNGIText_init(info);
; 2860 : 
; 2861 :   info->time_defined = 0;
; 2862 :   info->phys_defined = 0;
; 2863 : 
; 2864 :   LodePNGUnknownChunks_init(info);
; 2865 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2866 : }
; 2867 : 
; 2868 : void lodepng_info_cleanup(LodePNGInfo* info)
; 2869 : {
; 2870 :   lodepng_color_mode_cleanup(&info->color);
; 2871 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2872 :   LodePNGText_cleanup(info);
; 2873 :   LodePNGIText_cleanup(info);
; 2874 : 
; 2875 :   LodePNGUnknownChunks_cleanup(info);
; 2876 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2877 : }
; 2878 : 
; 2879 : unsigned lodepng_info_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2880 : {
; 2881 :   lodepng_info_cleanup(dest);
; 2882 :   *dest = *source;
; 2883 :   lodepng_color_mode_init(&dest->color);
; 2884 :   CERROR_TRY_RETURN(lodepng_color_mode_copy(&dest->color, &source->color));
; 2885 : 
; 2886 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2887 :   CERROR_TRY_RETURN(LodePNGText_copy(dest, source));
; 2888 :   CERROR_TRY_RETURN(LodePNGIText_copy(dest, source));
; 2889 : 
; 2890 :   LodePNGUnknownChunks_init(dest);
; 2891 :   CERROR_TRY_RETURN(LodePNGUnknownChunks_copy(dest, source));
; 2892 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2893 :   return 0;
; 2894 : }
; 2895 : 
; 2896 : void lodepng_info_swap(LodePNGInfo* a, LodePNGInfo* b)
; 2897 : {
; 2898 :   LodePNGInfo temp = *a;
; 2899 :   *a = *b;
; 2900 :   *b = temp;
; 2901 : }
; 2902 : 
; 2903 : /* ////////////////////////////////////////////////////////////////////////// */
; 2904 : 
; 2905 : /*index: bitgroup index, bits: bitgroup size(1, 2 or 4, in: bitgroup value, out: octet array to add bits to*/
; 2906 : static void addColorBits(unsigned char* out, size_t index, unsigned bits, unsigned in)
; 2907 : {
; 2908 :   /*p = the partial index in the byte, e.g. with 4 palettebits it is 0 for first half or 1 for second half*/
; 2909 :   unsigned p = index % (8 / bits);
; 2910 :   in &= (1 << bits) - 1; /*filter out any other bits of the input value*/
; 2911 :   in = in << (bits * (8 / bits - p - 1));
; 2912 :   if(p == 0) out[index * bits / 8] = in;
; 2913 :   else out[index * bits / 8] |= in;
; 2914 : }
; 2915 : 
; 2916 : typedef struct ColorTree ColorTree;
; 2917 : 
; 2918 : /*
; 2919 : One node of a color tree
; 2920 : This is the data structure used to count the number of unique colors and to get a palette
; 2921 : index for a color. It's like an octree, but because the alpha channel is used too, each
; 2922 : node has 16 instead of 8 children.
; 2923 : */
; 2924 : struct ColorTree
; 2925 : {
; 2926 :   ColorTree* children[16]; /*up to 16 pointers to ColorTree of next level*/
; 2927 :   int index; /*the payload. Only has a meaningful value if this is in the last level*/
; 2928 : };
; 2929 : 
; 2930 : static void color_tree_init(ColorTree* tree)
; 2931 : {
; 2932 :   int i;
; 2933 :   for(i = 0; i < 16; i++) tree->children[i] = 0;
; 2934 :   tree->index = -1;
; 2935 : }
; 2936 : 
; 2937 : static void color_tree_cleanup(ColorTree* tree)
; 2938 : {
; 2939 :   int i;
; 2940 :   for(i = 0; i < 16; i++)
; 2941 :   {
; 2942 :     if(tree->children[i])
; 2943 :     {
; 2944 :       color_tree_cleanup(tree->children[i]);
; 2945 :       lodepng_free(tree->children[i]);
; 2946 :     }
; 2947 :   }
; 2948 : }
; 2949 : 
; 2950 : /*returns -1 if color not present, its index otherwise*/
; 2951 : static int color_tree_get(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2952 : {
; 2953 :   int bit = 0;
; 2954 :   for(bit = 0; bit < 8; bit++)
; 2955 :   {
; 2956 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
; 2957 :     if(!tree->children[i]) return -1;
; 2958 :     else tree = tree->children[i];
; 2959 :   }
; 2960 :   return tree ? tree->index : -1;
; 2961 : }
; 2962 : 
; 2963 : #ifdef LODEPNG_COMPILE_ENCODER
; 2964 : static int color_tree_has(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2965 : {
; 2966 :   return color_tree_get(tree, r, g, b, a) >= 0;
; 2967 : }
; 2968 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2969 : 
; 2970 : /*color is not allowed to already exist.
; 2971 : Index should be >= 0 (it's signed to be compatible with using -1 for "doesn't exist")*/
; 2972 : static void color_tree_add(ColorTree* tree,
; 2973 :                            unsigned char r, unsigned char g, unsigned char b, unsigned char a, int index)
; 2974 : {
; 2975 :   int bit;
; 2976 :   for(bit = 0; bit < 8; bit++)
; 2977 :   {
; 2978 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
; 2979 :     if(!tree->children[i])
; 2980 :     {
; 2981 :       tree->children[i] = (ColorTree*)lodepng_malloc(sizeof(ColorTree));
; 2982 :       color_tree_init(tree->children[i]);
; 2983 :     }
; 2984 :     tree = tree->children[i];
; 2985 :   }
; 2986 :   tree->index = index;
; 2987 : }
; 2988 : 
; 2989 : /*put a pixel, given its RGBA color, into image of any color type*/
; 2990 : static unsigned rgba8ToPixel(unsigned char* out, size_t i,
; 2991 :                              const LodePNGColorMode* mode, ColorTree* tree /*for palette*/,
; 2992 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2993 : {
; 2994 :   if(mode->colortype == LCT_GREY)
; 2995 :   {
; 2996 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 2997 :     if(mode->bitdepth == 8) out[i] = grey;
; 2998 :     else if(mode->bitdepth == 16) out[i * 2 + 0] = out[i * 2 + 1] = grey;
; 2999 :     else
; 3000 :     {
; 3001 :       /*take the most significant bits of grey*/
; 3002 :       grey = (grey >> (8 - mode->bitdepth)) & ((1 << mode->bitdepth) - 1);
; 3003 :       addColorBits(out, i, mode->bitdepth, grey);
; 3004 :     }
; 3005 :   }
; 3006 :   else if(mode->colortype == LCT_RGB)
; 3007 :   {
; 3008 :     if(mode->bitdepth == 8)
; 3009 :     {
; 3010 :       out[i * 3 + 0] = r;
; 3011 :       out[i * 3 + 1] = g;
; 3012 :       out[i * 3 + 2] = b;
; 3013 :     }
; 3014 :     else
; 3015 :     {
; 3016 :       out[i * 6 + 0] = out[i * 6 + 1] = r;
; 3017 :       out[i * 6 + 2] = out[i * 6 + 3] = g;
; 3018 :       out[i * 6 + 4] = out[i * 6 + 5] = b;
; 3019 :     }
; 3020 :   }
; 3021 :   else if(mode->colortype == LCT_PALETTE)
; 3022 :   {
; 3023 :     int index = color_tree_get(tree, r, g, b, a);
; 3024 :     if(index < 0) return 82; /*color not in palette*/
; 3025 :     if(mode->bitdepth == 8) out[i] = index;
; 3026 :     else addColorBits(out, i, mode->bitdepth, index);
; 3027 :   }
; 3028 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3029 :   {
; 3030 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 3031 :     if(mode->bitdepth == 8)
; 3032 :     {
; 3033 :       out[i * 2 + 0] = grey;
; 3034 :       out[i * 2 + 1] = a;
; 3035 :     }
; 3036 :     else if(mode->bitdepth == 16)
; 3037 :     {
; 3038 :       out[i * 4 + 0] = out[i * 4 + 1] = grey;
; 3039 :       out[i * 4 + 2] = out[i * 4 + 3] = a;
; 3040 :     }
; 3041 :   }
; 3042 :   else if(mode->colortype == LCT_RGBA)
; 3043 :   {
; 3044 :     if(mode->bitdepth == 8)
; 3045 :     {
; 3046 :       out[i * 4 + 0] = r;
; 3047 :       out[i * 4 + 1] = g;
; 3048 :       out[i * 4 + 2] = b;
; 3049 :       out[i * 4 + 3] = a;
; 3050 :     }
; 3051 :     else
; 3052 :     {
; 3053 :       out[i * 8 + 0] = out[i * 8 + 1] = r;
; 3054 :       out[i * 8 + 2] = out[i * 8 + 3] = g;
; 3055 :       out[i * 8 + 4] = out[i * 8 + 5] = b;
; 3056 :       out[i * 8 + 6] = out[i * 8 + 7] = a;
; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/
; 3061 : }
; 3062 : 
; 3063 : /*put a pixel, given its RGBA16 color, into image of any color 16-bitdepth type*/
; 3064 : static unsigned rgba16ToPixel(unsigned char* out, size_t i,
; 3065 :                               const LodePNGColorMode* mode,
; 3066 :                               unsigned short r, unsigned short g, unsigned short b, unsigned short a)
; 3067 : {
; 3068 :   if(mode->bitdepth != 16) return 85; /*must be 16 for this function*/
; 3069 :   if(mode->colortype == LCT_GREY)
; 3070 :   {
; 3071 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3072 :     out[i * 2 + 0] = (grey >> 8) & 255;
; 3073 :     out[i * 2 + 1] = grey & 255;
; 3074 :   }
; 3075 :   else if(mode->colortype == LCT_RGB)
; 3076 :   {
; 3077 :     out[i * 6 + 0] = (r >> 8) & 255;
; 3078 :     out[i * 6 + 1] = r & 255;
; 3079 :     out[i * 6 + 2] = (g >> 8) & 255;
; 3080 :     out[i * 6 + 3] = g & 255;
; 3081 :     out[i * 6 + 4] = (b >> 8) & 255;
; 3082 :     out[i * 6 + 5] = b & 255;
; 3083 :   }
; 3084 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3085 :   {
; 3086 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3087 :     out[i * 4 + 0] = (grey >> 8) & 255;
; 3088 :     out[i * 4 + 1] = grey & 255;
; 3089 :     out[i * 4 + 2] = (a >> 8) & 255;
; 3090 :     out[i * 4 + 3] = a & 255;
; 3091 :   }
; 3092 :   else if(mode->colortype == LCT_RGBA)
; 3093 :   {
; 3094 :     out[i * 8 + 0] = (r >> 8) & 255;
; 3095 :     out[i * 8 + 1] = r & 255;
; 3096 :     out[i * 8 + 2] = (g >> 8) & 255;
; 3097 :     out[i * 8 + 3] = g & 255;
; 3098 :     out[i * 8 + 4] = (b >> 8) & 255;
; 3099 :     out[i * 8 + 5] = b & 255;
; 3100 :     out[i * 8 + 6] = (a >> 8) & 255;
; 3101 :     out[i * 8 + 7] = a & 255;
; 3102 :   }
; 3103 : 
; 3104 :   return 0; /*no error*/
; 3105 : }
; 3106 : 
; 3107 : /*Get RGBA8 color of pixel with index i (y * width + x) from the raw image with given color type.*/
; 3108 : static unsigned getPixelColorRGBA8(unsigned char* r, unsigned char* g,
; 3109 :                                    unsigned char* b, unsigned char* a,
; 3110 :                                    const unsigned char* in, size_t i,
; 3111 :                                    const LodePNGColorMode* mode,
; 3112 :                                    unsigned fix_png)
; 3113 : {
; 3114 :   if(mode->colortype == LCT_GREY)
; 3115 :   {
; 3116 :     if(mode->bitdepth == 8)
; 3117 :     {
; 3118 :       *r = *g = *b = in[i];
; 3119 :       if(mode->key_defined && *r == mode->key_r) *a = 0;
; 3120 :       else *a = 255;
; 3121 :     }
; 3122 :     else if(mode->bitdepth == 16)
; 3123 :     {
; 3124 :       *r = *g = *b = in[i * 2 + 0];
; 3125 :       if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
; 3126 :       else *a = 255;
; 3127 :     }
; 3128 :     else
; 3129 :     {
; 3130 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
; 3131 :       size_t j = i * mode->bitdepth;
; 3132 :       unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3133 :       *r = *g = *b = (value * 255) / highest;
; 3134 :       if(mode->key_defined && value == mode->key_r) *a = 0;
; 3135 :       else *a = 255;
; 3136 :     }
; 3137 :   }
; 3138 :   else if(mode->colortype == LCT_RGB)
; 3139 :   {
; 3140 :     if(mode->bitdepth == 8)
; 3141 :     {
; 3142 :       *r = in[i * 3 + 0]; *g = in[i * 3 + 1]; *b = in[i * 3 + 2];
; 3143 :       if(mode->key_defined && *r == mode->key_r && *g == mode->key_g && *b == mode->key_b) *a = 0;
; 3144 :       else *a = 255;
; 3145 :     }
; 3146 :     else
; 3147 :     {
; 3148 :       *r = in[i * 6 + 0];
; 3149 :       *g = in[i * 6 + 2];
; 3150 :       *b = in[i * 6 + 4];
; 3151 :       if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3152 :          && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3153 :          && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
; 3154 :       else *a = 255;
; 3155 :     }
; 3156 :   }
; 3157 :   else if(mode->colortype == LCT_PALETTE)
; 3158 :   {
; 3159 :     unsigned index;
; 3160 :     if(mode->bitdepth == 8) index = in[i];
; 3161 :     else
; 3162 :     {
; 3163 :       size_t j = i * mode->bitdepth;
; 3164 :       index = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3165 :     }
; 3166 : 
; 3167 :     if(index >= mode->palettesize)
; 3168 :     {
; 3169 :       /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3170 :       if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/
; 3171 :       *r = *g = *b = 0;
; 3172 :       *a = 255;
; 3173 :     }
; 3174 :     else
; 3175 :     {
; 3176 :       *r = mode->palette[index * 4 + 0];
; 3177 :       *g = mode->palette[index * 4 + 1];
; 3178 :       *b = mode->palette[index * 4 + 2];
; 3179 :       *a = mode->palette[index * 4 + 3];
; 3180 :     }
; 3181 :   }
; 3182 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3183 :   {
; 3184 :     if(mode->bitdepth == 8)
; 3185 :     {
; 3186 :       *r = *g = *b = in[i * 2 + 0];
; 3187 :       *a = in[i * 2 + 1];
; 3188 :     }
; 3189 :     else
; 3190 :     {
; 3191 :       *r = *g = *b = in[i * 4 + 0];
; 3192 :       *a = in[i * 4 + 2];
; 3193 :     }
; 3194 :   }
; 3195 :   else if(mode->colortype == LCT_RGBA)
; 3196 :   {
; 3197 :     if(mode->bitdepth == 8)
; 3198 :     {
; 3199 :       *r = in[i * 4 + 0];
; 3200 :       *g = in[i * 4 + 1];
; 3201 :       *b = in[i * 4 + 2];
; 3202 :       *a = in[i * 4 + 3];
; 3203 :     }
; 3204 :     else
; 3205 :     {
; 3206 :       *r = in[i * 8 + 0];
; 3207 :       *g = in[i * 8 + 2];
; 3208 :       *b = in[i * 8 + 4];
; 3209 :       *a = in[i * 8 + 6];
; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/
; 3214 : }
; 3215 : 
; 3216 : /*Similar to getPixelColorRGBA8, but with all the for loops inside of the color
; 3217 : mode test cases, optimized to convert the colors much faster, when converting
; 3218 : to RGBA or RGB with 8 bit per cannel. buffer must be RGBA or RGB output with
; 3219 : enough memory, if has_alpha is true the output is RGBA. mode has the color mode
; 3220 : of the input buffer.*/
; 3221 : static unsigned getPixelColorsRGBA8(unsigned char* buffer, size_t numpixels,
; 3222 :                                     unsigned has_alpha, const unsigned char* in,
; 3223 :                                     const LodePNGColorMode* mode,
; 3224 :                                     unsigned fix_png)
; 3225 : {
; 3226 :   unsigned num_channels = has_alpha ? 4 : 3;
; 3227 :   size_t i;
; 3228 :   if(mode->colortype == LCT_GREY)
; 3229 :   {
; 3230 :     if(mode->bitdepth == 8)
; 3231 :     {
; 3232 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3233 :       {
; 3234 :         buffer[0] = buffer[1] = buffer[2] = in[i];
; 3235 :         if(has_alpha) buffer[3] = mode->key_defined && in[i] == mode->key_r ? 0 : 255;
; 3236 :       }
; 3237 :     }
; 3238 :     else if(mode->bitdepth == 16)
; 3239 :     {
; 3240 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3241 :       {
; 3242 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2];
; 3243 :         if(has_alpha) buffer[3] = mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r ? 0 : 255;
; 3244 :       }
; 3245 :     }
; 3246 :     else
; 3247 :     {
; 3248 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
; 3249 :       size_t j = 0;
; 3250 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3251 :       {
; 3252 :         unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3253 :         buffer[0] = buffer[1] = buffer[2] = (value * 255) / highest;
; 3254 :         if(has_alpha) buffer[3] = mode->key_defined && value == mode->key_r ? 0 : 255;
; 3255 :       }
; 3256 :     }
; 3257 :   }
; 3258 :   else if(mode->colortype == LCT_RGB)
; 3259 :   {
; 3260 :     if(mode->bitdepth == 8)
; 3261 :     {
; 3262 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3263 :       {
; 3264 :         buffer[0] = in[i * 3 + 0];
; 3265 :         buffer[1] = in[i * 3 + 1];
; 3266 :         buffer[2] = in[i * 3 + 2];
; 3267 :         if(has_alpha) buffer[3] = mode->key_defined && buffer[0] == mode->key_r
; 3268 :            && buffer[1]== mode->key_g && buffer[2] == mode->key_b ? 0 : 255;
; 3269 :       }
; 3270 :     }
; 3271 :     else
; 3272 :     {
; 3273 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3274 :       {
; 3275 :         buffer[0] = in[i * 6 + 0];
; 3276 :         buffer[1] = in[i * 6 + 2];
; 3277 :         buffer[2] = in[i * 6 + 4];
; 3278 :         if(has_alpha) buffer[3] = mode->key_defined
; 3279 :            && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3280 :            && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3281 :            && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b ? 0 : 255;
; 3282 :       }
; 3283 :     }
; 3284 :   }
; 3285 :   else if(mode->colortype == LCT_PALETTE)
; 3286 :   {
; 3287 :     unsigned index;
; 3288 :     size_t j = 0;
; 3289 :     for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3290 :     {
; 3291 :       if(mode->bitdepth == 8) index = in[i];
; 3292 :       else index = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3293 : 
; 3294 :       if(index >= mode->palettesize)
; 3295 :       {
; 3296 :         /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3297 :         if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/
; 3298 :         buffer[0] = buffer[1] = buffer[2] = 0;
; 3299 :         if(has_alpha) buffer[3] = 255;
; 3300 :       }
; 3301 :       else
; 3302 :       {
; 3303 :         buffer[0] = mode->palette[index * 4 + 0];
; 3304 :         buffer[1] = mode->palette[index * 4 + 1];
; 3305 :         buffer[2] = mode->palette[index * 4 + 2];
; 3306 :         if(has_alpha) buffer[3] = mode->palette[index * 4 + 3];
; 3307 :       }
; 3308 :     }
; 3309 :   }
; 3310 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3311 :   {
; 3312 :     if(mode->bitdepth == 8)
; 3313 :     {
; 3314 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3315 :       {
; 3316 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2 + 0];
; 3317 :         if(has_alpha) buffer[3] = in[i * 2 + 1];
; 3318 :       }
; 3319 :     }
; 3320 :     else
; 3321 :     {
; 3322 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3323 :       {
; 3324 :         buffer[0] = buffer[1] = buffer[2] = in[i * 4 + 0];
; 3325 :         if(has_alpha) buffer[3] = in[i * 4 + 2];
; 3326 :       }
; 3327 :     }
; 3328 :   }
; 3329 :   else if(mode->colortype == LCT_RGBA)
; 3330 :   {
; 3331 :     if(mode->bitdepth == 8)
; 3332 :     {
; 3333 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3334 :       {
; 3335 :         buffer[0] = in[i * 4 + 0];
; 3336 :         buffer[1] = in[i * 4 + 1];
; 3337 :         buffer[2] = in[i * 4 + 2];
; 3338 :         if(has_alpha) buffer[3] = in[i * 4 + 3];
; 3339 :       }
; 3340 :     }
; 3341 :     else
; 3342 :     {
; 3343 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3344 :       {
; 3345 :         buffer[0] = in[i * 8 + 0];
; 3346 :         buffer[1] = in[i * 8 + 2];
; 3347 :         buffer[2] = in[i * 8 + 4];
; 3348 :         if(has_alpha) buffer[3] = in[i * 8 + 6];
; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/
; 3354 : }
; 3355 : 
; 3356 : /*Get RGBA16 color of pixel with index i (y * width + x) from the raw image with
; 3357 : given color type, but the given color type must be 16-bit itself.*/
; 3358 : static unsigned getPixelColorRGBA16(unsigned short* r, unsigned short* g, unsigned short* b, unsigned short* a,
; 3359 :                                     const unsigned char* in, size_t i, const LodePNGColorMode* mode)
; 3360 : {
; 3361 :   if(mode->bitdepth != 16) return 85; /*error: this function only supports 16-bit input*/
; 3362 : 
; 3363 :   if(mode->colortype == LCT_GREY)
; 3364 :   {
; 3365 :     *r = *g = *b = 256 * in[i * 2 + 0] + in[i * 2 + 1];
; 3366 :     if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
; 3367 :     else *a = 65535;
; 3368 :   }
; 3369 :   else if(mode->colortype == LCT_RGB)
; 3370 :   {
; 3371 :     *r = 256 * in[i * 6 + 0] + in[i * 6 + 1];
; 3372 :     *g = 256 * in[i * 6 + 2] + in[i * 6 + 3];
; 3373 :     *b = 256 * in[i * 6 + 4] + in[i * 6 + 5];
; 3374 :     if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3375 :        && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3376 :        && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
; 3377 :     else *a = 65535;
; 3378 :   }
; 3379 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3380 :   {
; 3381 :     *r = *g = *b = 256 * in[i * 4 + 0] + in[i * 4 + 1];
; 3382 :     *a = 256 * in[i * 4 + 2] + in[i * 4 + 3];
; 3383 :   }
; 3384 :   else if(mode->colortype == LCT_RGBA)
; 3385 :   {
; 3386 :     *r = 256 * in[i * 8 + 0] + in[i * 8 + 1];
; 3387 :     *g = 256 * in[i * 8 + 2] + in[i * 8 + 3];
; 3388 :     *b = 256 * in[i * 8 + 4] + in[i * 8 + 5];
; 3389 :     *a = 256 * in[i * 8 + 6] + in[i * 8 + 7];
; 3390 :   }
; 3391 :   else return 85; /*error: this function only supports 16-bit input, not palettes*/
; 3392 : 
; 3393 :   return 0; /*no error*/
; 3394 : }
; 3395 : 
; 3396 : /*
; 3397 : converts from any color type to 24-bit or 32-bit (later maybe more supported). return value = LodePNG error code
; 3398 : the out buffer must have (w * h * bpp + 7) / 8 bytes, where bpp is the bits per pixel of the output color type
; 3399 : (lodepng_get_bpp) for < 8 bpp images, there may _not_ be padding bits at the end of scanlines.
; 3400 : */
; 3401 : unsigned lodepng_convert(unsigned char* out, const unsigned char* in,
; 3402 :                          LodePNGColorMode* mode_out, const LodePNGColorMode* mode_in,
; 3403 :                          unsigned w, unsigned h, unsigned fix_png)
; 3404 : {
; 3405 :   unsigned error = 0;
; 3406 :   size_t i;
; 3407 :   ColorTree tree;
; 3408 :   size_t numpixels = w * h;
; 3409 : 
; 3410 :   if(lodepng_color_mode_equal(mode_out, mode_in))
; 3411 :   {
; 3412 :     size_t numbytes = lodepng_get_raw_size(w, h, mode_in);
; 3413 :     for(i = 0; i < numbytes; i++) out[i] = in[i];
; 3414 :     return error;
; 3415 :   }
; 3416 : 
; 3417 :   if(mode_out->colortype == LCT_PALETTE)
; 3418 :   {
; 3419 :     size_t palsize = 1 << mode_out->bitdepth;
; 3420 :     if(mode_out->palettesize < palsize) palsize = mode_out->palettesize;
; 3421 :     color_tree_init(&tree);
; 3422 :     for(i = 0; i < palsize; i++)
; 3423 :     {
; 3424 :       unsigned char* p = &mode_out->palette[i * 4];
; 3425 :       color_tree_add(&tree, p[0], p[1], p[2], p[3], i);
; 3426 :     }
; 3427 :   }
; 3428 : 
; 3429 :   if(mode_in->bitdepth == 16 && mode_out->bitdepth == 16)
; 3430 :   {
; 3431 :     for(i = 0; i < numpixels; i++)
; 3432 :     {
; 3433 :       unsigned short r = 0, g = 0, b = 0, a = 0;
; 3434 :       error = getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode_in);
; 3435 :       if(error) break;
; 3436 :       error = rgba16ToPixel(out, i, mode_out, r, g, b, a);
; 3437 :       if(error) break;
; 3438 :     }
; 3439 :   }
; 3440 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGBA)
; 3441 :   {
; 3442 :     error = getPixelColorsRGBA8(out, numpixels, 1, in, mode_in, fix_png);
; 3443 :   }
; 3444 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGB)
; 3445 :   {
; 3446 :     error = getPixelColorsRGBA8(out, numpixels, 0, in, mode_in, fix_png);
; 3447 :   }
; 3448 :   else
; 3449 :   {
; 3450 :     unsigned char r = 0, g = 0, b = 0, a = 0;
; 3451 :     for(i = 0; i < numpixels; i++)
; 3452 :     {
; 3453 :       error = getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode_in, fix_png);
; 3454 :       if(error) break;
; 3455 :       error = rgba8ToPixel(out, i, mode_out, &tree, r, g, b, a);
; 3456 :       if(error) break;
; 3457 :     }
; 3458 :   }
; 3459 : 
; 3460 :   if(mode_out->colortype == LCT_PALETTE)
; 3461 :   {
; 3462 :     color_tree_cleanup(&tree);
; 3463 :   }
; 3464 : 
; 3465 :   return error;
; 3466 : }
; 3467 : 
; 3468 : #ifdef LODEPNG_COMPILE_ENCODER
; 3469 : 
; 3470 : typedef struct ColorProfile
; 3471 : {
; 3472 :   unsigned char sixteenbit; /*needs more than 8 bits per channel*/
; 3473 :   unsigned char sixteenbit_done;
; 3474 : 
; 3475 : 
; 3476 :   unsigned char colored; /*not greyscale*/
; 3477 :   unsigned char colored_done;
; 3478 : 
; 3479 :   unsigned char key; /*a color key is required, or more*/
; 3480 :   unsigned short key_r; /*these values are always in 16-bit bitdepth in the profile*/
; 3481 :   unsigned short key_g;
; 3482 :   unsigned short key_b;
; 3483 :   unsigned char alpha; /*alpha channel, or alpha palette, required*/
; 3484 :   unsigned char alpha_done;
; 3485 : 
; 3486 :   unsigned numcolors;
; 3487 :   ColorTree tree; /*for listing the counted colors, up to 256*/
; 3488 :   unsigned char* palette; /*size 1024. Remember up to the first 256 RGBA colors*/
; 3489 :   unsigned maxnumcolors; /*if more than that amount counted*/
; 3490 :   unsigned char numcolors_done;
; 3491 : 
; 3492 :   unsigned greybits; /*amount of bits required for greyscale (1, 2, 4, 8). Does not take 16 bit into account.*/
; 3493 :   unsigned char greybits_done;
; 3494 : 
; 3495 : } ColorProfile;
; 3496 : 
; 3497 : static void color_profile_init(ColorProfile* profile, const LodePNGColorMode* mode)
; 3498 : {
; 3499 :   profile->sixteenbit = 0;
; 3500 :   profile->sixteenbit_done = mode->bitdepth == 16 ? 0 : 1;
; 3501 : 
; 3502 :   profile->colored = 0;
; 3503 :   profile->colored_done = lodepng_is_greyscale_type(mode) ? 1 : 0;
; 3504 : 
; 3505 :   profile->key = 0;
; 3506 :   profile->alpha = 0;
; 3507 :   profile->alpha_done = lodepng_can_have_alpha(mode) ? 0 : 1;
; 3508 : 
; 3509 :   profile->numcolors = 0;
; 3510 :   color_tree_init(&profile->tree);
; 3511 :   profile->palette = (unsigned char*)lodepng_malloc(1024);
; 3512 :   profile->maxnumcolors = 257;
; 3513 :   if(lodepng_get_bpp(mode) <= 8)
; 3514 :   {
; 3515 :     int bpp = lodepng_get_bpp(mode);
; 3516 :     profile->maxnumcolors = bpp == 1 ? 2 : (bpp == 2 ? 4 : (bpp == 4 ? 16 : 256));
; 3517 :   }
; 3518 :   profile->numcolors_done = 0;
; 3519 : 
; 3520 :   profile->greybits = 1;
; 3521 :   profile->greybits_done = lodepng_get_bpp(mode) == 1 ? 1 : 0;
; 3522 : }
; 3523 : 
; 3524 : static void color_profile_cleanup(ColorProfile* profile)
; 3525 : {
; 3526 :   color_tree_cleanup(&profile->tree);
; 3527 :   lodepng_free(profile->palette);
; 3528 : }
; 3529 : 
; 3530 : /*function used for debug purposes with C++*/
; 3531 : /*void printColorProfile(ColorProfile* p)
; 3532 : {
; 3533 :   std::cout << "sixteenbit: " << (int)p->sixteenbit << std::endl;
; 3534 :   std::cout << "sixteenbit_done: " << (int)p->sixteenbit_done << std::endl;
; 3535 :   std::cout << "colored: " << (int)p->colored << std::endl;
; 3536 :   std::cout << "colored_done: " << (int)p->colored_done << std::endl;
; 3537 :   std::cout << "key: " << (int)p->key << std::endl;
; 3538 :   std::cout << "key_r: " << (int)p->key_r << std::endl;
; 3539 :   std::cout << "key_g: " << (int)p->key_g << std::endl;
; 3540 :   std::cout << "key_b: " << (int)p->key_b << std::endl;
; 3541 :   std::cout << "alpha: " << (int)p->alpha << std::endl;
; 3542 :   std::cout << "alpha_done: " << (int)p->alpha_done << std::endl;
; 3543 :   std::cout << "numcolors: " << (int)p->numcolors << std::endl;
; 3544 :   std::cout << "maxnumcolors: " << (int)p->maxnumcolors << std::endl;
; 3545 :   std::cout << "numcolors_done: " << (int)p->numcolors_done << std::endl;
; 3546 :   std::cout << "greybits: " << (int)p->greybits << std::endl;
; 3547 :   std::cout << "greybits_done: " << (int)p->greybits_done << std::endl;
; 3548 : }*/
; 3549 : 
; 3550 : /*Returns how many bits needed to represent given value (max 8 bit)*/
; 3551 : unsigned getValueRequiredBits(unsigned short value)
; 3552 : {
; 3553 :   if(value == 0 || value == 255) return 1;
; 3554 :   /*The scaling of 2-bit and 4-bit values uses multiples of 85 and 17*/
; 3555 :   if(value % 17 == 0) return value % 85 == 0 ? 2 : 4;
; 3556 :   return 8;
; 3557 : }
; 3558 : 
; 3559 : /*profile must already have been inited with mode.
; 3560 : It's ok to set some parameters of profile to done already.*/
; 3561 : static unsigned get_color_profile(ColorProfile* profile,
; 3562 :                                   const unsigned char* in,
; 3563 :                                   size_t numpixels /*must be full image size, for certain filesize based choices*/,
; 3564 :                                   const LodePNGColorMode* mode,
; 3565 :                                   unsigned fix_png)
; 3566 : {
; 3567 :   unsigned error = 0;
; 3568 :   size_t i;
; 3569 : 
; 3570 :   if(mode->bitdepth == 16)
; 3571 :   {
; 3572 :     for(i = 0; i < numpixels; i++)
; 3573 :     {
; 3574 :       unsigned short r, g, b, a;
; 3575 :       error = getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode);
; 3576 :       if(error) break;
; 3577 : 
; 3578 :       /*a color is considered good for 8-bit if the first byte and the second byte are equal,
; 3579 :         (so if it's divisible through 257), NOT necessarily if the second byte is 0*/
; 3580 :       if(!profile->sixteenbit_done
; 3581 :           && (((r & 255) != ((r >> 8) & 255))
; 3582 :            || ((g & 255) != ((g >> 8) & 255))
; 3583 :            || ((b & 255) != ((b >> 8) & 255))))
; 3584 :       {
; 3585 :         profile->sixteenbit = 1;
; 3586 :         profile->sixteenbit_done = 1;
; 3587 :         profile->greybits_done = 1; /*greybits is not applicable anymore at 16-bit*/
; 3588 :         profile->numcolors_done = 1; /*counting colors no longer useful, palette doesn't support 16-bit*/
; 3589 :       }
; 3590 : 
; 3591 :       if(!profile->colored_done && (r != g || r != b))
; 3592 :       {
; 3593 :         profile->colored = 1;
; 3594 :         profile->colored_done = 1;
; 3595 :         profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3596 :       }
; 3597 : 
; 3598 :       if(!profile->alpha_done && a != 65535)
; 3599 :       {
; 3600 :         /*only use color key if numpixels large enough to justify tRNS chunk size*/
; 3601 :         if(a == 0 && numpixels > 16 && !(profile->key && (r != profile->key_r || g != profile->key_g || b != profile->key_b)))
; 3602 :         {
; 3603 :           if(!profile->alpha && !profile->key)
; 3604 :           {
; 3605 :             profile->key = 1;
; 3606 :             profile->key_r = r;
; 3607 :             profile->key_g = g;
; 3608 :             profile->key_b = b;
; 3609 :           }
; 3610 :         }
; 3611 :         else
; 3612 :         {
; 3613 :           profile->alpha = 1;
; 3614 :           profile->alpha_done = 1;
; 3615 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3616 :         }
; 3617 :       }
; 3618 : 
; 3619 :       /* Color key cannot be used if an opaque pixel also has that RGB color. */
; 3620 :       if(!profile->alpha_done && a == 65535 && profile->key
; 3621 :           && r == profile->key_r && g == profile->key_g && b == profile->key_b)
; 3622 :       {
; 3623 :           profile->alpha = 1;
; 3624 :           profile->alpha_done = 1;
; 3625 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3626 :       }
; 3627 : 
; 3628 :       if(!profile->greybits_done)
; 3629 :       {
; 3630 :         /*assuming 8-bit r, this test does not care about 16-bit*/
; 3631 :         unsigned bits = getValueRequiredBits(r);
; 3632 :         if(bits > profile->greybits) profile->greybits = bits;
; 3633 :         if(profile->greybits >= 8) profile->greybits_done = 1;
; 3634 :       }
; 3635 : 
; 3636 :       if(!profile->numcolors_done)
; 3637 :       {
; 3638 :         /*assuming 8-bit rgba, this test does not care about 16-bit*/
; 3639 :         if(!color_tree_has(&profile->tree, (unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a))
; 3640 :         {
; 3641 :           color_tree_add(&profile->tree, (unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a,
; 3642 :             profile->numcolors);
; 3643 :           if(profile->numcolors < 256)
; 3644 :           {
; 3645 :             unsigned char* p = profile->palette;
; 3646 :             unsigned i = profile->numcolors;
; 3647 :             p[i * 4 + 0] = (unsigned char)r;
; 3648 :             p[i * 4 + 1] = (unsigned char)g;
; 3649 :             p[i * 4 + 2] = (unsigned char)b;
; 3650 :             p[i * 4 + 3] = (unsigned char)a;
; 3651 :           }
; 3652 :           profile->numcolors++;
; 3653 :           if(profile->numcolors >= profile->maxnumcolors) profile->numcolors_done = 1;
; 3654 :         }
; 3655 :       }
; 3656 : 
; 3657 :       if(profile->alpha_done && profile->numcolors_done
; 3658 :       && profile->colored_done && profile->sixteenbit_done && profile->greybits_done)
; 3659 :       {
; 3660 :         break;
; 3661 :       }
; 3662 :     };
; 3663 :   }
; 3664 :   else /* < 16-bit */
; 3665 :   {
; 3666 :     for(i = 0; i < numpixels; i++)
; 3667 :     {
; 3668 :       unsigned char r = 0, g = 0, b = 0, a = 0;
; 3669 :       error = getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode, fix_png);
; 3670 :       if(error) break;
; 3671 : 
; 3672 :       if(!profile->colored_done && (r != g || r != b))
; 3673 :       {
; 3674 :         profile->colored = 1;
; 3675 :         profile->colored_done = 1;
; 3676 :         profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3677 :       }
; 3678 : 
; 3679 :       if(!profile->alpha_done && a != 255)
; 3680 :       {
; 3681 :         if(a == 0 && !(profile->key && (r != profile->key_r || g != profile->key_g || b != profile->key_b)))
; 3682 :         {
; 3683 :           if(!profile->key)
; 3684 :           {
; 3685 :             profile->key = 1;
; 3686 :             profile->key_r = r;
; 3687 :             profile->key_g = g;
; 3688 :             profile->key_b = b;
; 3689 :           }
; 3690 :         }
; 3691 :         else
; 3692 :         {
; 3693 :           profile->alpha = 1;
; 3694 :           profile->alpha_done = 1;
; 3695 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3696 :         }
; 3697 :       }
; 3698 : 
; 3699 :       /* Color key cannot be used if an opaque pixel also has that RGB color. */
; 3700 :       if(!profile->alpha_done && a == 255 && profile->key
; 3701 :           && r == profile->key_r && g == profile->key_g && b == profile->key_b)
; 3702 :       {
; 3703 :           profile->alpha = 1;
; 3704 :           profile->alpha_done = 1;
; 3705 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3706 :       }
; 3707 : 
; 3708 :       if(!profile->greybits_done)
; 3709 :       {
; 3710 :         unsigned bits = getValueRequiredBits(r);
; 3711 :         if(bits > profile->greybits) profile->greybits = bits;
; 3712 :         if(profile->greybits >= 8) profile->greybits_done = 1;
; 3713 :       }
; 3714 : 
; 3715 :       if(!profile->numcolors_done)
; 3716 :       {
; 3717 :         if(!color_tree_has(&profile->tree, r, g, b, a))
; 3718 :         {
; 3719 : 
; 3720 :           color_tree_add(&profile->tree, r, g, b, a, profile->numcolors);
; 3721 :           if(profile->numcolors < 256)
; 3722 :           {
; 3723 :             unsigned char* p = profile->palette;
; 3724 :             unsigned i = profile->numcolors;
; 3725 :             p[i * 4 + 0] = r;
; 3726 :             p[i * 4 + 1] = g;
; 3727 :             p[i * 4 + 2] = b;
; 3728 :             p[i * 4 + 3] = a;
; 3729 :           }
; 3730 :           profile->numcolors++;
; 3731 :           if(profile->numcolors >= profile->maxnumcolors) profile->numcolors_done = 1;
; 3732 :         }
; 3733 :       }
; 3734 : 
; 3735 :       if(profile->alpha_done && profile->numcolors_done && profile->colored_done && profile->greybits_done)
; 3736 :       {
; 3737 :         break;
; 3738 :       }
; 3739 :     };
; 3740 :   }
; 3741 : 
; 3742 :   /*make the profile's key always 16-bit for consistency*/
; 3743 :   if(mode->bitdepth < 16)
; 3744 :   {
; 3745 :     /*repeat each byte twice*/
; 3746 :     profile->key_r *= 257;
; 3747 :     profile->key_g *= 257;
; 3748 :     profile->key_b *= 257;
; 3749 :   }
; 3750 : 
; 3751 :   return error;
; 3752 : }
; 3753 : 
; 3754 : static void setColorKeyFrom16bit(LodePNGColorMode* mode_out, unsigned r, unsigned g, unsigned b, unsigned bitdepth)
; 3755 : {
; 3756 :   unsigned mask = (1 << bitdepth) - 1;
; 3757 :   mode_out->key_defined = 1;
; 3758 :   mode_out->key_r = r & mask;
; 3759 :   mode_out->key_g = g & mask;
; 3760 :   mode_out->key_b = b & mask;
; 3761 : }
; 3762 : 
; 3763 : /*updates values of mode with a potentially smaller color model. mode_out should
; 3764 : contain the user chosen color model, but will be overwritten with the new chosen one.*/
; 3765 : unsigned lodepng_auto_choose_color(LodePNGColorMode* mode_out,
; 3766 :                                    const unsigned char* image, unsigned w, unsigned h,
; 3767 :                                    const LodePNGColorMode* mode_in,
; 3768 :                                    LodePNGAutoConvert auto_convert)
; 3769 : {
; 3770 :   ColorProfile profile;
; 3771 :   unsigned error = 0;
; 3772 :   int no_nibbles = auto_convert == LAC_AUTO_NO_NIBBLES || auto_convert == LAC_AUTO_NO_NIBBLES_NO_PALETTE;
; 3773 :   int no_palette = auto_convert == LAC_AUTO_NO_PALETTE || auto_convert == LAC_AUTO_NO_NIBBLES_NO_PALETTE;
; 3774 : 
; 3775 :   if(auto_convert == LAC_ALPHA)
; 3776 :   {
; 3777 :     if(mode_out->colortype != LCT_RGBA && mode_out->colortype != LCT_GREY_ALPHA) return 0;
; 3778 :   }
; 3779 : 
; 3780 :   color_profile_init(&profile, mode_in);
; 3781 :   if(auto_convert == LAC_ALPHA)
; 3782 :   {
; 3783 :     profile.colored_done = 1;
; 3784 :     profile.greybits_done = 1;
; 3785 :     profile.numcolors_done = 1;
; 3786 :     profile.sixteenbit_done = 1;
; 3787 :   }
; 3788 :   error = get_color_profile(&profile, image, w * h, mode_in, 0 /*fix_png*/);
; 3789 :   if(!error && auto_convert == LAC_ALPHA)
; 3790 :   {
; 3791 :     if(!profile.alpha)
; 3792 :     {
; 3793 :       mode_out->colortype = (mode_out->colortype == LCT_RGBA ? LCT_RGB : LCT_GREY);
; 3794 :       if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3795 :     }
; 3796 :   }
; 3797 :   else if(!error && auto_convert != LAC_ALPHA)
; 3798 :   {
; 3799 :     mode_out->key_defined = 0;
; 3800 : 
; 3801 :     if(profile.sixteenbit)
; 3802 :     {
; 3803 :       mode_out->bitdepth = 16;
; 3804 :       if(profile.alpha)
; 3805 :       {
; 3806 :         mode_out->colortype = profile.colored ? LCT_RGBA : LCT_GREY_ALPHA;
; 3807 :       }
; 3808 :       else
; 3809 :       {
; 3810 :         mode_out->colortype = profile.colored ? LCT_RGB : LCT_GREY;
; 3811 :         if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3812 :       }
; 3813 :     }
; 3814 :     else /*less than 16 bits per channel*/
; 3815 :     {
; 3816 :       /*don't add palette overhead if image hasn't got a lot of pixels*/
; 3817 :       unsigned n = profile.numcolors;
; 3818 :       int palette_ok = !no_palette && n <= 256 && (n * 2 < w * h);
; 3819 :       unsigned palettebits = n <= 2 ? 1 : (n <= 4 ? 2 : (n <= 16 ? 4 : 8));
; 3820 :       int grey_ok = !profile.colored && !profile.alpha; /*grey without alpha, with potentially low bits*/
; 3821 :       if(palette_ok || grey_ok)
; 3822 :       {
; 3823 :         if(!palette_ok || (grey_ok && profile.greybits <= palettebits))
; 3824 :         {
; 3825 :           unsigned grey = profile.key_r;
; 3826 :           mode_out->colortype = LCT_GREY;
; 3827 :           mode_out->bitdepth = profile.greybits;
; 3828 :           if(profile.key) setColorKeyFrom16bit(mode_out, grey, grey, grey, mode_out->bitdepth);
; 3829 :         }
; 3830 :         else
; 3831 :         {
; 3832 :           /*fill in the palette*/
; 3833 :           unsigned i;
; 3834 :           unsigned char* p = profile.palette;
; 3835 :           /*remove potential earlier palette*/
; 3836 :           lodepng_palette_clear(mode_out);
; 3837 :           for(i = 0; i < profile.numcolors; i++)
; 3838 :           {
; 3839 :             error = lodepng_palette_add(mode_out, p[i * 4 + 0], p[i * 4 + 1], p[i * 4 + 2], p[i * 4 + 3]);
; 3840 :             if(error) break;
; 3841 :           }
; 3842 : 
; 3843 :           mode_out->colortype = LCT_PALETTE;
; 3844 :           mode_out->bitdepth = palettebits;
; 3845 :         }
; 3846 :       }
; 3847 :       else /*8-bit per channel*/
; 3848 :       {
; 3849 :         mode_out->bitdepth = 8;
; 3850 :         if(profile.alpha)
; 3851 :         {
; 3852 :           mode_out->colortype = profile.colored ? LCT_RGBA : LCT_GREY_ALPHA;
; 3853 :         }
; 3854 :         else
; 3855 :         {
; 3856 :           mode_out->colortype = profile.colored ? LCT_RGB : LCT_GREY /*LCT_GREY normally won't occur, already done earlier*/;
; 3857 :           if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3858 :         }
; 3859 :       }
; 3860 :     }
; 3861 :   }
; 3862 : 
; 3863 :   color_profile_cleanup(&profile);
; 3864 : 
; 3865 :   if(mode_out->colortype == LCT_PALETTE && mode_in->palettesize == mode_out->palettesize)
; 3866 :   {
; 3867 :     /*In this case keep the palette order of the input, so that the user can choose an optimal one*/
; 3868 :     size_t i;
; 3869 :     for(i = 0; i < mode_in->palettesize * 4; i++)
; 3870 :     {
; 3871 :       mode_out->palette[i] = mode_in->palette[i];
; 3872 :     }
; 3873 :   }
; 3874 : 
; 3875 :   if(no_nibbles && mode_out->bitdepth < 8)
; 3876 :   {
; 3877 :     /*palette can keep its small amount of colors, as long as no indices use it*/
; 3878 :     mode_out->bitdepth = 8;
; 3879 :   }
; 3880 : 
; 3881 :   return error;
; 3882 : }
; 3883 : 
; 3884 : #endif /* #ifdef LODEPNG_COMPILE_ENCODER */
; 3885 : 
; 3886 : /*
; 3887 : Paeth predicter, used by PNG filter type 4
; 3888 : The parameters are of type short, but should come from unsigned chars, the shorts
; 3889 : are only needed to make the paeth calculation correct.
; 3890 : */
; 3891 : static unsigned char paethPredictor(short a, short b, short c)
; 3892 : {
; 3893 :   short pa = abs(b - c);
; 3894 :   short pb = abs(a - c);
; 3895 :   short pc = abs(a + b - c - c);
; 3896 : 
; 3897 :   if(pc < pa && pc < pb) return (unsigned char)c;
; 3898 :   else if(pb < pa) return (unsigned char)b;
; 3899 :   else return (unsigned char)a;
; 3900 : }
; 3901 : 
; 3902 : /*shared values used by multiple Adam7 related functions*/
; 3903 : 
; 3904 : static const unsigned ADAM7_IX[7] = { 0, 4, 0, 2, 0, 1, 0 }; /*x start values*/
; 3905 : static const unsigned ADAM7_IY[7] = { 0, 0, 4, 0, 2, 0, 1 }; /*y start values*/
; 3906 : static const unsigned ADAM7_DX[7] = { 8, 8, 4, 4, 2, 2, 1 }; /*x delta values*/
; 3907 : static const unsigned ADAM7_DY[7] = { 8, 8, 8, 4, 4, 2, 2 }; /*y delta values*/
; 3908 : 
; 3909 : /*
; 3910 : Outputs various dimensions and positions in the image related to the Adam7 reduced images.
; 3911 : passw: output containing the width of the 7 passes
; 3912 : passh: output containing the height of the 7 passes
; 3913 : filter_passstart: output containing the index of the start and end of each
; 3914 :  reduced image with filter bytes
; 3915 : padded_passstart output containing the index of the start and end of each
; 3916 :  reduced image when without filter bytes but with padded scanlines
; 3917 : passstart: output containing the index of the start and end of each reduced
; 3918 :  image without padding between scanlines, but still padding between the images
; 3919 : w, h: width and height of non-interlaced image
; 3920 : bpp: bits per pixel
; 3921 : "padded" is only relevant if bpp is less than 8 and a scanline or image does not
; 3922 :  end at a full byte
; 3923 : */
; 3924 : static void Adam7_getpassvalues(unsigned passw[7], unsigned passh[7], size_t filter_passstart[8],
; 3925 :                                 size_t padded_passstart[8], size_t passstart[8], unsigned w, unsigned h, unsigned bpp)
; 3926 : {
; 3927 :   /*the passstart values have 8 values: the 8th one indicates the byte after the end of the 7th (= last) pass*/
; 3928 :   unsigned i;
; 3929 : 
; 3930 :   /*calculate width and height in pixels of each pass*/
; 3931 :   for(i = 0; i < 7; i++)
; 3932 :   {
; 3933 :     passw[i] = (w + ADAM7_DX[i] - ADAM7_IX[i] - 1) / ADAM7_DX[i];
; 3934 :     passh[i] = (h + ADAM7_DY[i] - ADAM7_IY[i] - 1) / ADAM7_DY[i];
; 3935 :     if(passw[i] == 0) passh[i] = 0;
; 3936 :     if(passh[i] == 0) passw[i] = 0;
; 3937 :   }
; 3938 : 
; 3939 :   filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
; 3940 :   for(i = 0; i < 7; i++)
; 3941 :   {
; 3942 :     /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
; 3943 :     filter_passstart[i + 1] = filter_passstart[i]
; 3944 :                             + ((passw[i] && passh[i]) ? passh[i] * (1 + (passw[i] * bpp + 7) / 8) : 0);
; 3945 :     /*bits padded if needed to fill full byte at end of each scanline*/
; 3946 :     padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7) / 8);
; 3947 :     /*only padded at end of reduced image*/
; 3948 :     passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7) / 8;
; 3949 :   }
; 3950 : }
; 3951 : 
; 3952 : #ifdef LODEPNG_COMPILE_DECODER
; 3953 : 
; 3954 : /* ////////////////////////////////////////////////////////////////////////// */
; 3955 : /* / PNG Decoder                                                            / */
; 3956 : /* ////////////////////////////////////////////////////////////////////////// */
; 3957 : 
; 3958 : /*read the information from the header and store it in the LodePNGInfo. return value is error*/
; 3959 : unsigned lodepng_inspect(unsigned* w, unsigned* h, LodePNGState* state,
; 3960 :                          const unsigned char* in, size_t insize)
; 3961 : {
; 3962 :   LodePNGInfo* info = &state->info_png;
; 3963 :   if(insize == 0 || in == 0)
; 3964 :   {
; 3965 :     CERROR_RETURN_ERROR(state->error, 48); /*error: the given data is empty*/
; 3966 :   }
; 3967 :   if(insize < 29)
; 3968 :   {
; 3969 :     CERROR_RETURN_ERROR(state->error, 27); /*error: the data length is smaller than the length of a PNG header*/
; 3970 :   }
; 3971 : 
; 3972 :   /*when decoding a new PNG image, make sure all parameters created after previous decoding are reset*/
; 3973 :   lodepng_info_cleanup(info);
; 3974 :   lodepng_info_init(info);
; 3975 : 
; 3976 :   if(in[0] != 137 || in[1] != 80 || in[2] != 78 || in[3] != 71
; 3977 :      || in[4] != 13 || in[5] != 10 || in[6] != 26 || in[7] != 10)
; 3978 :   {
; 3979 :     CERROR_RETURN_ERROR(state->error, 28); /*error: the first 8 bytes are not the correct PNG signature*/
; 3980 :   }
; 3981 :   if(in[12] != 'I' || in[13] != 'H' || in[14] != 'D' || in[15] != 'R')
; 3982 :   {
; 3983 :     CERROR_RETURN_ERROR(state->error, 29); /*error: it doesn't start with a IHDR chunk!*/
; 3984 :   }
; 3985 : 
; 3986 :   /*read the values given in the header*/
; 3987 :   *w = lodepng_read32bitInt(&in[16]);
; 3988 :   *h = lodepng_read32bitInt(&in[20]);
; 3989 :   info->color.bitdepth = in[24];
; 3990 :   info->color.colortype = (LodePNGColorType)in[25];
; 3991 :   info->compression_method = in[26];
; 3992 :   info->filter_method = in[27];
; 3993 :   info->interlace_method = in[28];
; 3994 : 
; 3995 :   if(!state->decoder.ignore_crc)
; 3996 :   {
; 3997 :     unsigned CRC = lodepng_read32bitInt(&in[29]);
; 3998 :     unsigned checksum = lodepng_crc32(&in[12], 17);
; 3999 :     if(CRC != checksum)
; 4000 :     {
; 4001 :       CERROR_RETURN_ERROR(state->error, 57); /*invalid CRC*/
; 4002 :     }
; 4003 :   }
; 4004 : 
; 4005 :   /*error: only compression method 0 is allowed in the specification*/
; 4006 :   if(info->compression_method != 0) CERROR_RETURN_ERROR(state->error, 32);
; 4007 :   /*error: only filter method 0 is allowed in the specification*/
; 4008 :   if(info->filter_method != 0) CERROR_RETURN_ERROR(state->error, 33);
; 4009 :   /*error: only interlace methods 0 and 1 exist in the specification*/
; 4010 :   if(info->interlace_method > 1) CERROR_RETURN_ERROR(state->error, 34);
; 4011 : 
; 4012 :   state->error = checkColorValidity(info->color.colortype, info->color.bitdepth);
; 4013 :   return state->error;
; 4014 : }
; 4015 : 
; 4016 : static unsigned unfilterScanline(unsigned char* recon, const unsigned char* scanline, const unsigned char* precon,
; 4017 :                                  size_t bytewidth, unsigned char filterType, size_t length)
; 4018 : {
; 4019 :   /*
; 4020 :   For PNG filter method 0
; 4021 :   unfilter a PNG image scanline by scanline. when the pixels are smaller than 1 byte,
; 4022 :   the filter works byte per byte (bytewidth = 1)
; 4023 :   precon is the previous unfiltered scanline, recon the result, scanline the current one
; 4024 :   the incoming scanlines do NOT include the filtertype byte, that one is given in the parameter filterType instead
; 4025 :   recon and scanline MAY be the same memory address! precon must be disjoint.
; 4026 :   */
; 4027 : 
; 4028 :   size_t i;
; 4029 :   switch(filterType)
; 4030 :   {
; 4031 :     case 0:
; 4032 :       for(i = 0; i < length; i++) recon[i] = scanline[i];
; 4033 :       break;
; 4034 :     case 1:
; 4035 :       for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];
; 4036 :       for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth];
; 4037 :       break;
; 4038 :     case 2:
; 4039 :       if(precon)
; 4040 :       {
; 4041 :         for(i = 0; i < length; i++) recon[i] = scanline[i] + precon[i];
; 4042 :       }
; 4043 :       else
; 4044 :       {
; 4045 :         for(i = 0; i < length; i++) recon[i] = scanline[i];
; 4046 :       }
; 4047 :       break;
; 4048 :     case 3:
; 4049 :       if(precon)
; 4050 :       {
; 4051 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i] + precon[i] / 2;
; 4052 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + ((recon[i - bytewidth] + precon[i]) / 2);
; 4053 :       }
; 4054 :       else
; 4055 :       {
; 4056 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];
; 4057 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth] / 2;
; 4058 :       }
; 4059 :       break;
; 4060 :     case 4:
; 4061 :       if(precon)
; 4062 :       {
; 4063 :         for(i = 0; i < bytewidth; i++)
; 4064 :         {
; 4065 :           recon[i] = (scanline[i] + precon[i]); /*paethPredictor(0, precon[i], 0) is always precon[i]*/
; 4066 :         }
; 4067 :         for(i = bytewidth; i < length; i++)
; 4068 :         {
; 4069 :           recon[i] = (scanline[i] + paethPredictor(recon[i - bytewidth], precon[i], precon[i - bytewidth]));
; 4070 :         }
; 4071 :       }
; 4072 :       else
; 4073 :       {
; 4074 :         for(i = 0; i < bytewidth; i++)
; 4075 :         {
; 4076 :           recon[i] = scanline[i];
; 4077 :         }
; 4078 :         for(i = bytewidth; i < length; i++)
; 4079 :         {
; 4080 :           /*paethPredictor(recon[i - bytewidth], 0, 0) is always recon[i - bytewidth]*/
; 4081 :           recon[i] = (scanline[i] + recon[i - bytewidth]);
; 4082 :         }
; 4083 :       }
; 4084 :       break;
; 4085 :     default: return 36; /*error: unexisting filter type given*/
; 4086 :   }
; 4087 :   return 0;
; 4088 : }
; 4089 : 
; 4090 : static unsigned unfilter(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
; 4091 : {
; 4092 :   /*
; 4093 :   For PNG filter method 0
; 4094 :   this function unfilters a single image (e.g. without interlacing this is called once, with Adam7 seven times)
; 4095 :   out must have enough bytes allocated already, in must have the scanlines + 1 filtertype byte per scanline
; 4096 :   w and h are image dimensions or dimensions of reduced image, bpp is bits per pixel
; 4097 :   in and out are allowed to be the same memory address (but aren't the same size since in has the extra filter bytes)
; 4098 :   */
; 4099 : 
; 4100 :   unsigned y;
; 4101 :   unsigned char* prevline = 0;
; 4102 : 
; 4103 :   /*bytewidth is used for filtering, is 1 when bpp < 8, number of bytes per pixel otherwise*/
; 4104 :   size_t bytewidth = (bpp + 7) / 8;
; 4105 :   size_t linebytes = (w * bpp + 7) / 8;
; 4106 : 
; 4107 :   for(y = 0; y < h; y++)
; 4108 :   {
; 4109 :     size_t outindex = linebytes * y;
; 4110 :     size_t inindex = (1 + linebytes) * y; /*the extra filterbyte added to each row*/
; 4111 :     unsigned char filterType = in[inindex];
; 4112 : 
; 4113 :     CERROR_TRY_RETURN(unfilterScanline(&out[outindex], &in[inindex + 1], prevline, bytewidth, filterType, linebytes));
; 4114 : 
; 4115 :     prevline = &out[outindex];
; 4116 :   }
; 4117 : 
; 4118 :   return 0;
; 4119 : }
; 4120 : 
; 4121 : /*
; 4122 : in: Adam7 interlaced image, with no padding bits between scanlines, but between
; 4123 :  reduced images so that each reduced image starts at a byte.
; 4124 : out: the same pixels, but re-ordered so that they're now a non-interlaced image with size w*h
; 4125 : bpp: bits per pixel
; 4126 : out has the following size in bits: w * h * bpp.
; 4127 : in is possibly bigger due to padding bits between reduced images.
; 4128 : out must be big enough AND must be 0 everywhere if bpp < 8 in the current implementation
; 4129 : (because that's likely a little bit faster)
; 4130 : NOTE: comments about padding bits are only relevant if bpp < 8
; 4131 : */
; 4132 : static void Adam7_deinterlace(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
; 4133 : {
; 4134 :   unsigned passw[7], passh[7];
; 4135 :   size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4136 :   unsigned i;
; 4137 : 
; 4138 :   Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 4139 : 
; 4140 :   if(bpp >= 8)
; 4141 :   {
; 4142 :     for(i = 0; i < 7; i++)
; 4143 :     {
; 4144 :       unsigned x, y, b;
; 4145 :       size_t bytewidth = bpp / 8;
; 4146 :       for(y = 0; y < passh[i]; y++)
; 4147 :       for(x = 0; x < passw[i]; x++)
; 4148 :       {
; 4149 :         size_t pixelinstart = passstart[i] + (y * passw[i] + x) * bytewidth;
; 4150 :         size_t pixeloutstart = ((ADAM7_IY[i] + y * ADAM7_DY[i]) * w + ADAM7_IX[i] + x * ADAM7_DX[i]) * bytewidth;
; 4151 :         for(b = 0; b < bytewidth; b++)
; 4152 :         {
; 4153 :           out[pixeloutstart + b] = in[pixelinstart + b];
; 4154 :         }
; 4155 :       }
; 4156 :     }
; 4157 :   }
; 4158 :   else /*bpp < 8: Adam7 with pixels < 8 bit is a bit trickier: with bit pointers*/
; 4159 :   {
; 4160 :     for(i = 0; i < 7; i++)
; 4161 :     {
; 4162 :       unsigned x, y, b;
; 4163 :       unsigned ilinebits = bpp * passw[i];
; 4164 :       unsigned olinebits = bpp * w;
; 4165 :       size_t obp, ibp; /*bit pointers (for out and in buffer)*/
; 4166 :       for(y = 0; y < passh[i]; y++)
; 4167 :       for(x = 0; x < passw[i]; x++)
; 4168 :       {
; 4169 :         ibp = (8 * passstart[i]) + (y * ilinebits + x * bpp);
; 4170 :         obp = (ADAM7_IY[i] + y * ADAM7_DY[i]) * olinebits + (ADAM7_IX[i] + x * ADAM7_DX[i]) * bpp;
; 4171 :         for(b = 0; b < bpp; b++)
; 4172 :         {
; 4173 :           unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4174 :           /*note that this function assumes the out buffer is completely 0, use setBitOfReversedStream otherwise*/
; 4175 :           setBitOfReversedStream0(&obp, out, bit);
; 4176 :         }
; 4177 :       }
; 4178 :     }
; 4179 :   }
; 4180 : }
; 4181 : 
; 4182 : static void removePaddingBits(unsigned char* out, const unsigned char* in,
; 4183 :                               size_t olinebits, size_t ilinebits, unsigned h)
; 4184 : {
; 4185 :   /*
; 4186 :   After filtering there are still padding bits if scanlines have non multiple of 8 bit amounts. They need
; 4187 :   to be removed (except at last scanline of (Adam7-reduced) image) before working with pure image buffers
; 4188 :   for the Adam7 code, the color convert code and the output to the user.
; 4189 :   in and out are allowed to be the same buffer, in may also be higher but still overlapping; in must
; 4190 :   have >= ilinebits*h bits, out must have >= olinebits*h bits, olinebits must be <= ilinebits
; 4191 :   also used to move bits after earlier such operations happened, e.g. in a sequence of reduced images from Adam7
; 4192 :   only useful if (ilinebits - olinebits) is a value in the range 1..7
; 4193 :   */
; 4194 :   unsigned y;
; 4195 :   size_t diff = ilinebits - olinebits;
; 4196 :   size_t ibp = 0, obp = 0; /*input and output bit pointers*/
; 4197 :   for(y = 0; y < h; y++)
; 4198 :   {
; 4199 :     size_t x;
; 4200 :     for(x = 0; x < olinebits; x++)
; 4201 :     {
; 4202 :       unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4203 :       setBitOfReversedStream(&obp, out, bit);
; 4204 :     }
; 4205 :     ibp += diff;
; 4206 :   }
; 4207 : }
; 4208 : 
; 4209 : /*out must be buffer big enough to contain full image, and in must contain the full decompressed data from
; 4210 : the IDAT chunks (with filter index bytes and possible padding bits)
; 4211 : return value is error*/
; 4212 : static unsigned postProcessScanlines(unsigned char* out, unsigned char* in,
; 4213 :                                      unsigned w, unsigned h, const LodePNGInfo* info_png)
; 4214 : {
; 4215 :   /*
; 4216 :   This function converts the filtered-padded-interlaced data into pure 2D image buffer with the PNG's colortype.
; 4217 :   Steps:
; 4218 :   *) if no Adam7: 1) unfilter 2) remove padding bits (= posible extra bits per scanline if bpp < 8)
; 4219 :   *) if adam7: 1) 7x unfilter 2) 7x remove padding bits 3) Adam7_deinterlace
; 4220 :   NOTE: the in buffer will be overwritten with intermediate data!
; 4221 :   */
; 4222 :   unsigned bpp = lodepng_get_bpp(&info_png->color);
; 4223 :   if(bpp == 0) return 31; /*error: invalid colortype*/
; 4224 : 
; 4225 :   if(info_png->interlace_method == 0)
; 4226 :   {
; 4227 :     if(bpp < 8 && w * bpp != ((w * bpp + 7) / 8) * 8)
; 4228 :     {
; 4229 :       CERROR_TRY_RETURN(unfilter(in, in, w, h, bpp));
; 4230 :       removePaddingBits(out, in, w * bpp, ((w * bpp + 7) / 8) * 8, h);
; 4231 :     }
; 4232 :     /*we can immediatly filter into the out buffer, no other steps needed*/
; 4233 :     else CERROR_TRY_RETURN(unfilter(out, in, w, h, bpp));
; 4234 :   }
; 4235 :   else /*interlace_method is 1 (Adam7)*/
; 4236 :   {
; 4237 :     unsigned passw[7], passh[7]; size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4238 :     unsigned i;
; 4239 : 
; 4240 :     Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 4241 : 
; 4242 :     for(i = 0; i < 7; i++)
; 4243 :     {
; 4244 :       CERROR_TRY_RETURN(unfilter(&in[padded_passstart[i]], &in[filter_passstart[i]], passw[i], passh[i], bpp));
; 4245 :       /*TODO: possible efficiency improvement: if in this reduced image the bits fit nicely in 1 scanline,
; 4246 :       move bytes instead of bits or move not at all*/
; 4247 :       if(bpp < 8)
; 4248 :       {
; 4249 :         /*remove padding bits in scanlines; after this there still may be padding
; 4250 :         bits between the different reduced images: each reduced image still starts nicely at a byte*/
; 4251 :         removePaddingBits(&in[passstart[i]], &in[padded_passstart[i]], passw[i] * bpp,
; 4252 :                           ((passw[i] * bpp + 7) / 8) * 8, passh[i]);
; 4253 :       }
; 4254 :     }
; 4255 : 
; 4256 :     Adam7_deinterlace(out, in, w, h, bpp);
; 4257 :   }
; 4258 : 
; 4259 :   return 0;
; 4260 : }
; 4261 : 
; 4262 : static unsigned readChunk_PLTE(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
; 4263 : {
; 4264 :   unsigned pos = 0, i;
; 4265 :   if(color->palette) lodepng_free(color->palette);
; 4266 :   color->palettesize = chunkLength / 3;
; 4267 :   color->palette = (unsigned char*)lodepng_malloc(4 * color->palettesize);
; 4268 :   if(!color->palette && color->palettesize)
; 4269 :   {
; 4270 :     color->palettesize = 0;
; 4271 :     return 83; /*alloc fail*/
; 4272 :   }
; 4273 :   if(color->palettesize > 256) return 38; /*error: palette too big*/
; 4274 : 
; 4275 :   for(i = 0; i < color->palettesize; i++)
; 4276 :   {
; 4277 :     color->palette[4 * i + 0] = data[pos++]; /*R*/
; 4278 :     color->palette[4 * i + 1] = data[pos++]; /*G*/
; 4279 :     color->palette[4 * i + 2] = data[pos++]; /*B*/
; 4280 :     color->palette[4 * i + 3] = 255; /*alpha*/
; 4281 :   }
; 4282 : 
; 4283 :   return 0; /* OK */
; 4284 : }
; 4285 : 
; 4286 : static unsigned readChunk_tRNS(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
; 4287 : {
; 4288 :   unsigned i;
; 4289 :   if(color->colortype == LCT_PALETTE)
; 4290 :   {
; 4291 :     /*error: more alpha values given than there are palette entries*/
; 4292 :     if(chunkLength > color->palettesize) return 38;
; 4293 : 
; 4294 :     for(i = 0; i < chunkLength; i++) color->palette[4 * i + 3] = data[i];
; 4295 :   }
; 4296 :   else if(color->colortype == LCT_GREY)
; 4297 :   {
; 4298 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4299 :     if(chunkLength != 2) return 30;
; 4300 : 
; 4301 :     color->key_defined = 1;
; 4302 :     color->key_r = color->key_g = color->key_b = 256 * data[0] + data[1];
; 4303 :   }
; 4304 :   else if(color->colortype == LCT_RGB)
; 4305 :   {
; 4306 :     /*error: this chunk must be 6 bytes for RGB image*/
; 4307 :     if(chunkLength != 6) return 41;
; 4308 : 
; 4309 :     color->key_defined = 1;
; 4310 :     color->key_r = 256 * data[0] + data[1];
; 4311 :     color->key_g = 256 * data[2] + data[3];
; 4312 :     color->key_b = 256 * data[4] + data[5];
; 4313 :   }
; 4314 :   else return 42; /*error: tRNS chunk not allowed for other color models*/
; 4315 : 
; 4316 :   return 0; /* OK */
; 4317 : }
; 4318 : 
; 4319 : 
; 4320 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4321 : /*background color chunk (bKGD)*/
; 4322 : static unsigned readChunk_bKGD(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4323 : {
; 4324 :   if(info->color.colortype == LCT_PALETTE)
; 4325 :   {
; 4326 :     /*error: this chunk must be 1 byte for indexed color image*/
; 4327 :     if(chunkLength != 1) return 43;
; 4328 : 
; 4329 :     info->background_defined = 1;
; 4330 :     info->background_r = info->background_g = info->background_b = data[0];
; 4331 :   }
; 4332 :   else if(info->color.colortype == LCT_GREY || info->color.colortype == LCT_GREY_ALPHA)
; 4333 :   {
; 4334 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4335 :     if(chunkLength != 2) return 44;
; 4336 : 
; 4337 :     info->background_defined = 1;
; 4338 :     info->background_r = info->background_g = info->background_b
; 4339 :                                  = 256 * data[0] + data[1];
; 4340 :   }
; 4341 :   else if(info->color.colortype == LCT_RGB || info->color.colortype == LCT_RGBA)
; 4342 :   {
; 4343 :     /*error: this chunk must be 6 bytes for greyscale image*/
; 4344 :     if(chunkLength != 6) return 45;
; 4345 : 
; 4346 :     info->background_defined = 1;
; 4347 :     info->background_r = 256 * data[0] + data[1];
; 4348 :     info->background_g = 256 * data[2] + data[3];
; 4349 :     info->background_b = 256 * data[4] + data[5];
; 4350 :   }
; 4351 : 
; 4352 :   return 0; /* OK */
; 4353 : }
; 4354 : 
; 4355 : /*text chunk (tEXt)*/
; 4356 : static unsigned readChunk_tEXt(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4357 : {
; 4358 :   unsigned error = 0;
; 4359 :   char *key = 0, *str = 0;
; 4360 :   unsigned i;
; 4361 : 
; 4362 :   while(!error) /*not really a while loop, only used to break on error*/
; 4363 :   {
; 4364 :     unsigned length, string2_begin;
; 4365 : 
; 4366 :     length = 0;
; 4367 :     while(length < chunkLength && data[length] != 0) length++;
; 4368 :     /*even though it's not allowed by the standard, no error is thrown if
; 4369 :     there's no null termination char, if the text is empty*/
; 4370 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4371 : 
; 4372 :     key = (char*)lodepng_malloc(length + 1);
; 4373 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4374 : 
; 4375 :     key[length] = 0;
; 4376 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4377 : 
; 4378 :     string2_begin = length + 1; /*skip keyword null terminator*/
; 4379 : 
; 4380 :     length = chunkLength < string2_begin ? 0 : chunkLength - string2_begin;
; 4381 :     str = (char*)lodepng_malloc(length + 1);
; 4382 :     if(!str) CERROR_BREAK(error, 83); /*alloc fail*/
; 4383 : 
; 4384 :     str[length] = 0;
; 4385 :     for(i = 0; i < length; i++) str[i] = data[string2_begin + i];
; 4386 : 
; 4387 :     error = lodepng_add_text(info, key, str);
; 4388 : 
; 4389 :     break;
; 4390 :   }
; 4391 : 
; 4392 :   lodepng_free(key);
; 4393 :   lodepng_free(str);
; 4394 : 
; 4395 :   return error;
; 4396 : }
; 4397 : 
; 4398 : /*compressed text chunk (zTXt)*/
; 4399 : static unsigned readChunk_zTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
; 4400 :                                const unsigned char* data, size_t chunkLength)
; 4401 : {
; 4402 :   unsigned error = 0;
; 4403 :   unsigned i;
; 4404 : 
; 4405 :   unsigned length, string2_begin;
; 4406 :   char *key = 0;
; 4407 :   ucvector decoded;
; 4408 : 
; 4409 :   ucvector_init(&decoded);
; 4410 : 
; 4411 :   while(!error) /*not really a while loop, only used to break on error*/
; 4412 :   {
; 4413 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;
; 4414 :     if(length + 2 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
; 4415 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4416 : 
; 4417 :     key = (char*)lodepng_malloc(length + 1);
; 4418 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4419 : 
; 4420 :     key[length] = 0;
; 4421 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4422 : 
; 4423 :     if(data[length + 1] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
; 4424 : 
; 4425 :     string2_begin = length + 2;
; 4426 :     if(string2_begin > chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
; 4427 : 
; 4428 :     length = chunkLength - string2_begin;
; 4429 :     /*will fail if zlib error, e.g. if length is too small*/
; 4430 :     error = zlib_decompress(&decoded.data, &decoded.size,
; 4431 :                             (unsigned char*)(&data[string2_begin]),
; 4432 :                             length, zlibsettings);
; 4433 :     if(error) break;
; 4434 :     ucvector_push_back(&decoded, 0);
; 4435 : 
; 4436 :     error = lodepng_add_text(info, key, (char*)decoded.data);
; 4437 : 
; 4438 :     break;
; 4439 :   }
; 4440 : 
; 4441 :   lodepng_free(key);
; 4442 :   ucvector_cleanup(&decoded);
; 4443 : 
; 4444 :   return error;
; 4445 : }
; 4446 : 
; 4447 : /*international text chunk (iTXt)*/
; 4448 : static unsigned readChunk_iTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
; 4449 :                                const unsigned char* data, size_t chunkLength)
; 4450 : {
; 4451 :   unsigned error = 0;
; 4452 :   unsigned i;
; 4453 : 
; 4454 :   unsigned length, begin, compressed;
; 4455 :   char *key = 0, *langtag = 0, *transkey = 0;
; 4456 :   ucvector decoded;
; 4457 :   ucvector_init(&decoded);
; 4458 : 
; 4459 :   while(!error) /*not really a while loop, only used to break on error*/
; 4460 :   {
; 4461 :     /*Quick check if the chunk length isn't too small. Even without check
; 4462 :     it'd still fail with other error checks below if it's too short. This just gives a different error code.*/
; 4463 :     if(chunkLength < 5) CERROR_BREAK(error, 30); /*iTXt chunk too short*/
; 4464 : 
; 4465 :     /*read the key*/
; 4466 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;
; 4467 :     if(length + 3 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination char, corrupt?*/
; 4468 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4469 : 
; 4470 :     key = (char*)lodepng_malloc(length + 1);
; 4471 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4472 : 
; 4473 :     key[length] = 0;
; 4474 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4475 : 
; 4476 :     /*read the compression method*/
; 4477 :     compressed = data[length + 1];
; 4478 :     if(data[length + 2] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
; 4479 : 
; 4480 :     /*even though it's not allowed by the standard, no error is thrown if
; 4481 :     there's no null termination char, if the text is empty for the next 3 texts*/
; 4482 : 
; 4483 :     /*read the langtag*/
; 4484 :     begin = length + 3;
; 4485 :     length = 0;
; 4486 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;
; 4487 : 
; 4488 :     langtag = (char*)lodepng_malloc(length + 1);
; 4489 :     if(!langtag) CERROR_BREAK(error, 83); /*alloc fail*/
; 4490 : 
; 4491 :     langtag[length] = 0;
; 4492 :     for(i = 0; i < length; i++) langtag[i] = data[begin + i];
; 4493 : 
; 4494 :     /*read the transkey*/
; 4495 :     begin += length + 1;
; 4496 :     length = 0;
; 4497 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;
; 4498 : 
; 4499 :     transkey = (char*)lodepng_malloc(length + 1);
; 4500 :     if(!transkey) CERROR_BREAK(error, 83); /*alloc fail*/
; 4501 : 
; 4502 :     transkey[length] = 0;
; 4503 :     for(i = 0; i < length; i++) transkey[i] = data[begin + i];
; 4504 : 
; 4505 :     /*read the actual text*/
; 4506 :     begin += length + 1;
; 4507 : 
; 4508 :     length = chunkLength < begin ? 0 : chunkLength - begin;
; 4509 : 
; 4510 :     if(compressed)
; 4511 :     {
; 4512 :       /*will fail if zlib error, e.g. if length is too small*/
; 4513 :       error = zlib_decompress(&decoded.data, &decoded.size,
; 4514 :                               (unsigned char*)(&data[begin]),
; 4515 :                               length, zlibsettings);
; 4516 :       if(error) break;
; 4517 :       if(decoded.allocsize < decoded.size) decoded.allocsize = decoded.size;
; 4518 :       ucvector_push_back(&decoded, 0);
; 4519 :     }
; 4520 :     else
; 4521 :     {
; 4522 :       if(!ucvector_resize(&decoded, length + 1)) CERROR_BREAK(error, 83 /*alloc fail*/);
; 4523 : 
; 4524 :       decoded.data[length] = 0;
; 4525 :       for(i = 0; i < length; i++) decoded.data[i] = data[begin + i];
; 4526 :     }
; 4527 : 
; 4528 :     error = lodepng_add_itext(info, key, langtag, transkey, (char*)decoded.data);
; 4529 : 
; 4530 :     break;
; 4531 :   }
; 4532 : 
; 4533 :   lodepng_free(key);
; 4534 :   lodepng_free(langtag);
; 4535 :   lodepng_free(transkey);
; 4536 :   ucvector_cleanup(&decoded);
; 4537 : 
; 4538 :   return error;
; 4539 : }
; 4540 : 
; 4541 : static unsigned readChunk_tIME(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4542 : {
; 4543 :   if(chunkLength != 7) return 73; /*invalid tIME chunk size*/
; 4544 : 
; 4545 :   info->time_defined = 1;
; 4546 :   info->time.year = 256 * data[0] + data[+ 1];
; 4547 :   info->time.month = data[2];
; 4548 :   info->time.day = data[3];
; 4549 :   info->time.hour = data[4];
; 4550 :   info->time.minute = data[5];
; 4551 :   info->time.second = data[6];
; 4552 : 
; 4553 :   return 0; /* OK */
; 4554 : }
; 4555 : 
; 4556 : static unsigned readChunk_pHYs(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4557 : {
; 4558 :   if(chunkLength != 9) return 74; /*invalid pHYs chunk size*/
; 4559 : 
; 4560 :   info->phys_defined = 1;
; 4561 :   info->phys_x = 16777216 * data[0] + 65536 * data[1] + 256 * data[2] + data[3];
; 4562 :   info->phys_y = 16777216 * data[4] + 65536 * data[5] + 256 * data[6] + data[7];
; 4563 :   info->phys_unit = data[8];
; 4564 : 
; 4565 :   return 0; /* OK */
; 4566 : }
; 4567 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4568 : 
; 4569 : /*read a PNG, the result will be in the same color type as the PNG (hence "generic")*/
; 4570 : static void decodeGeneric(unsigned char** out, unsigned* w, unsigned* h,
; 4571 :                           LodePNGState* state,
; 4572 :                           const unsigned char* in, size_t insize)
; 4573 : {
; 4574 :   unsigned char IEND = 0;
; 4575 :   const unsigned char* chunk;
; 4576 :   size_t i;
; 4577 :   ucvector idat; /*the data from idat chunks*/
; 4578 : 
; 4579 :   /*for unknown chunk order*/
; 4580 :   unsigned unknown = 0;
; 4581 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4582 :   unsigned critical_pos = 1; /*1 = after IHDR, 2 = after PLTE, 3 = after IDAT*/
; 4583 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4584 : 
; 4585 :   /*provide some proper output values if error will happen*/
; 4586 :   *out = 0;
; 4587 : 
; 4588 :   state->error = lodepng_inspect(w, h, state, in, insize); /*reads header and resets other parameters in state->info_png*/
; 4589 :   if(state->error) return;
; 4590 : 
; 4591 :   ucvector_init(&idat);
; 4592 :   chunk = &in[33]; /*first byte of the first chunk after the header*/
; 4593 : 
; 4594 :   /*loop through the chunks, ignoring unknown chunks and stopping at IEND chunk.
; 4595 :   IDAT data is put at the start of the in buffer*/
; 4596 :   while(!IEND && !state->error)
; 4597 :   {
; 4598 :     unsigned chunkLength;
; 4599 :     const unsigned char* data; /*the data in the chunk*/
; 4600 : 
; 4601 :     /*error: size of the in buffer too small to contain next chunk*/
; 4602 :     if((size_t)((chunk - in) + 12) > insize || chunk < in) CERROR_BREAK(state->error, 30);
; 4603 : 
; 4604 :     /*length of the data of the chunk, excluding the length bytes, chunk type and CRC bytes*/
; 4605 :     chunkLength = lodepng_chunk_length(chunk);
; 4606 :     /*error: chunk length larger than the max PNG chunk size*/
; 4607 :     if(chunkLength > 2147483647) CERROR_BREAK(state->error, 63);
; 4608 : 
; 4609 :     if((size_t)((chunk - in) + chunkLength + 12) > insize || (chunk + chunkLength + 12) < in)
; 4610 :     {
; 4611 :       CERROR_BREAK(state->error, 64); /*error: size of the in buffer too small to contain next chunk*/
; 4612 :     }
; 4613 : 
; 4614 :     data = lodepng_chunk_data_const(chunk);
; 4615 : 
; 4616 :     /*IDAT chunk, containing compressed image data*/
; 4617 :     if(lodepng_chunk_type_equals(chunk, "IDAT"))
; 4618 :     {
; 4619 :       size_t oldsize = idat.size;
; 4620 :       if(!ucvector_resize(&idat, oldsize + chunkLength)) CERROR_BREAK(state->error, 83 /*alloc fail*/);
; 4621 :       for(i = 0; i < chunkLength; i++) idat.data[oldsize + i] = data[i];
; 4622 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4623 :       critical_pos = 3;
; 4624 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4625 :     }
; 4626 :     /*IEND chunk*/
; 4627 :     else if(lodepng_chunk_type_equals(chunk, "IEND"))
; 4628 :     {
; 4629 :       IEND = 1;
; 4630 :     }
; 4631 :     /*palette chunk (PLTE)*/
; 4632 :     else if(lodepng_chunk_type_equals(chunk, "PLTE"))
; 4633 :     {
; 4634 :       state->error = readChunk_PLTE(&state->info_png.color, data, chunkLength);
; 4635 :       if(state->error) break;
; 4636 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4637 :       critical_pos = 2;
; 4638 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4639 :     }
; 4640 :     /*palette transparency chunk (tRNS)*/
; 4641 :     else if(lodepng_chunk_type_equals(chunk, "tRNS"))
; 4642 :     {
; 4643 :       state->error = readChunk_tRNS(&state->info_png.color, data, chunkLength);
; 4644 :       if(state->error) break;
; 4645 :     }
; 4646 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4647 :     /*background color chunk (bKGD)*/
; 4648 :     else if(lodepng_chunk_type_equals(chunk, "bKGD"))
; 4649 :     {
; 4650 :       state->error = readChunk_bKGD(&state->info_png, data, chunkLength);
; 4651 :       if(state->error) break;
; 4652 :     }
; 4653 :     /*text chunk (tEXt)*/
; 4654 :     else if(lodepng_chunk_type_equals(chunk, "tEXt"))
; 4655 :     {
; 4656 :       if(state->decoder.read_text_chunks)
; 4657 :       {
; 4658 :         state->error = readChunk_tEXt(&state->info_png, data, chunkLength);
; 4659 :         if(state->error) break;
; 4660 :       }
; 4661 :     }
; 4662 :     /*compressed text chunk (zTXt)*/
; 4663 :     else if(lodepng_chunk_type_equals(chunk, "zTXt"))
; 4664 :     {
; 4665 :       if(state->decoder.read_text_chunks)
; 4666 :       {
; 4667 :         state->error = readChunk_zTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);
; 4668 :         if(state->error) break;
; 4669 :       }
; 4670 :     }
; 4671 :     /*international text chunk (iTXt)*/
; 4672 :     else if(lodepng_chunk_type_equals(chunk, "iTXt"))
; 4673 :     {
; 4674 :       if(state->decoder.read_text_chunks)
; 4675 :       {
; 4676 :         state->error = readChunk_iTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);
; 4677 :         if(state->error) break;
; 4678 :       }
; 4679 :     }
; 4680 :     else if(lodepng_chunk_type_equals(chunk, "tIME"))
; 4681 :     {
; 4682 :       state->error = readChunk_tIME(&state->info_png, data, chunkLength);
; 4683 :       if(state->error) break;
; 4684 :     }
; 4685 :     else if(lodepng_chunk_type_equals(chunk, "pHYs"))
; 4686 :     {
; 4687 :       state->error = readChunk_pHYs(&state->info_png, data, chunkLength);
; 4688 :       if(state->error) break;
; 4689 :     }
; 4690 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4691 :     else /*it's not an implemented chunk type, so ignore it: skip over the data*/
; 4692 :     {
; 4693 :       /*error: unknown critical chunk (5th bit of first byte of chunk type is 0)*/
; 4694 :       if(!lodepng_chunk_ancillary(chunk)) CERROR_BREAK(state->error, 69);
; 4695 : 
; 4696 :       unknown = 1;
; 4697 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4698 :       if(state->decoder.remember_unknown_chunks)
; 4699 :       {
; 4700 :         state->error = lodepng_chunk_append(&state->info_png.unknown_chunks_data[critical_pos - 1],
; 4701 :                                             &state->info_png.unknown_chunks_size[critical_pos - 1], chunk);
; 4702 :         if(state->error) break;
; 4703 :       }
; 4704 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4705 :     }
; 4706 : 
; 4707 :     if(!state->decoder.ignore_crc && !unknown) /*check CRC if wanted, only on known chunk types*/
; 4708 :     {
; 4709 :       if(lodepng_chunk_check_crc(chunk)) CERROR_BREAK(state->error, 57); /*invalid CRC*/
; 4710 :     }
; 4711 : 
; 4712 :     if(!IEND) chunk = lodepng_chunk_next_const(chunk);
; 4713 :   }
; 4714 : 
; 4715 :   if(!state->error)
; 4716 :   {
; 4717 :     ucvector scanlines;
; 4718 :     ucvector_init(&scanlines);
; 4719 : 
; 4720 :     /*maximum final image length is already reserved in the vector's length - this is not really necessary*/
; 4721 :     if(!ucvector_resize(&scanlines, lodepng_get_raw_size(*w, *h, &state->info_png.color) + *h))
; 4722 :     {
; 4723 :       state->error = 83; /*alloc fail*/
; 4724 :     }
; 4725 :     if(!state->error)
; 4726 :     {
; 4727 :       /*decompress with the Zlib decompressor*/
; 4728 :       state->error = zlib_decompress(&scanlines.data, &scanlines.size, idat.data,
; 4729 :                                      idat.size, &state->decoder.zlibsettings);
; 4730 :     }
; 4731 : 
; 4732 :     if(!state->error)
; 4733 :     {
; 4734 :       ucvector outv;
; 4735 :       ucvector_init(&outv);
; 4736 :       if(!ucvector_resizev(&outv,
; 4737 :           lodepng_get_raw_size(*w, *h, &state->info_png.color), 0)) state->error = 83; /*alloc fail*/
; 4738 :       if(!state->error) state->error = postProcessScanlines(outv.data, scanlines.data, *w, *h, &state->info_png);
; 4739 :       *out = outv.data;
; 4740 :     }
; 4741 :     ucvector_cleanup(&scanlines);
; 4742 :   }
; 4743 : 
; 4744 :   ucvector_cleanup(&idat);
; 4745 : }
; 4746 : 
; 4747 : unsigned lodepng_decode(unsigned char** out, unsigned* w, unsigned* h,
; 4748 :                         LodePNGState* state,
; 4749 :                         const unsigned char* in, size_t insize)
; 4750 : {
; 4751 :   *out = 0;
; 4752 :   decodeGeneric(out, w, h, state, in, insize);
; 4753 :   if(state->error) return state->error;
; 4754 :   if(!state->decoder.color_convert || lodepng_color_mode_equal(&state->info_raw, &state->info_png.color))
; 4755 :   {
; 4756 :     /*same color type, no copying or converting of data needed*/
; 4757 :     /*store the info_png color settings on the info_raw so that the info_raw still reflects what colortype
; 4758 :     the raw image has to the end user*/
; 4759 :     if(!state->decoder.color_convert)
; 4760 :     {
; 4761 :       state->error = lodepng_color_mode_copy(&state->info_raw, &state->info_png.color);
; 4762 :       if(state->error) return state->error;
; 4763 :     }
; 4764 :   }
; 4765 :   else
; 4766 :   {
; 4767 :     /*color conversion needed; sort of copy of the data*/
; 4768 :     unsigned char* data = *out;
; 4769 :     size_t outsize;
; 4770 : 
; 4771 :     /*TODO: check if this works according to the statement in the documentation: "The converter can convert
; 4772 :     from greyscale input color type, to 8-bit greyscale or greyscale with alpha"*/
; 4773 :     if(!(state->info_raw.colortype == LCT_RGB || state->info_raw.colortype == LCT_RGBA)
; 4774 :        && !(state->info_raw.bitdepth == 8))
; 4775 :     {
; 4776 :       return 56; /*unsupported color mode conversion*/
; 4777 :     }
; 4778 : 
; 4779 :     outsize = lodepng_get_raw_size(*w, *h, &state->info_raw);
; 4780 :     *out = (unsigned char*)lodepng_malloc(outsize);
; 4781 :     if(!(*out))
; 4782 :     {
; 4783 :       state->error = 83; /*alloc fail*/
; 4784 :     }
; 4785 :     else state->error = lodepng_convert(*out, data, &state->info_raw, &state->info_png.color, *w, *h, state->decoder.fix_png);
; 4786 :     lodepng_free(data);
; 4787 :   }
; 4788 :   return state->error;
; 4789 : }
; 4790 : 
; 4791 : unsigned lodepng_decode_memory(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in,
; 4792 :                                size_t insize, LodePNGColorType colortype, unsigned bitdepth)
; 4793 : {
; 4794 :   unsigned error;
; 4795 :   LodePNGState state;
; 4796 :   lodepng_state_init(&state);
; 4797 :   state.info_raw.colortype = colortype;
; 4798 :   state.info_raw.bitdepth = bitdepth;
; 4799 :   error = lodepng_decode(out, w, h, &state, in, insize);
; 4800 :   lodepng_state_cleanup(&state);
; 4801 :   return error;
; 4802 : }
; 4803 : 
; 4804 : unsigned lodepng_decode32(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4805 : {
; 4806 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGBA, 8);
; 4807 : }
; 4808 : 
; 4809 : unsigned lodepng_decode24(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4810 : {
; 4811 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGB, 8);
; 4812 : }
; 4813 : 
; 4814 : #ifdef LODEPNG_COMPILE_DISK
; 4815 : unsigned lodepng_decode_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename,
; 4816 :                              LodePNGColorType colortype, unsigned bitdepth)
; 4817 : {
; 4818 :   unsigned char* buffer;
; 4819 :   size_t buffersize;
; 4820 :   unsigned error;
; 4821 :   error = lodepng_load_file(&buffer, &buffersize, filename);
; 4822 :   if(!error) error = lodepng_decode_memory(out, w, h, buffer, buffersize, colortype, bitdepth);
; 4823 :   lodepng_free(buffer);
; 4824 :   return error;
; 4825 : }
; 4826 : 
; 4827 : unsigned lodepng_decode32_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4828 : {
; 4829 :   return lodepng_decode_file(out, w, h, filename, LCT_RGBA, 8);
; 4830 : }
; 4831 : 
; 4832 : unsigned lodepng_decode24_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4833 : {
; 4834 :   return lodepng_decode_file(out, w, h, filename, LCT_RGB, 8);
; 4835 : }
; 4836 : #endif /*LODEPNG_COMPILE_DISK*/
; 4837 : 
; 4838 : void lodepng_decoder_settings_init(LodePNGDecoderSettings* settings)
; 4839 : {
; 4840 :   settings->color_convert = 1;
; 4841 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4842 :   settings->read_text_chunks = 1;
; 4843 :   settings->remember_unknown_chunks = 0;
; 4844 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4845 :   settings->ignore_crc = 0;
; 4846 :   settings->fix_png = 0;
; 4847 :   lodepng_decompress_settings_init(&settings->zlibsettings);
; 4848 : }
; 4849 : 
; 4850 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4851 : 
; 4852 : #if defined(LODEPNG_COMPILE_DECODER) || defined(LODEPNG_COMPILE_ENCODER)
; 4853 : 
; 4854 : void lodepng_state_init(LodePNGState* state)
; 4855 : {
; 4856 : #ifdef LODEPNG_COMPILE_DECODER
; 4857 :   lodepng_decoder_settings_init(&state->decoder);
; 4858 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4859 : #ifdef LODEPNG_COMPILE_ENCODER
; 4860 :   lodepng_encoder_settings_init(&state->encoder);
; 4861 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 4862 :   lodepng_color_mode_init(&state->info_raw);
; 4863 :   lodepng_info_init(&state->info_png);
; 4864 :   state->error = 1;
; 4865 : }
; 4866 : 
; 4867 : void lodepng_state_cleanup(LodePNGState* state)
; 4868 : {
; 4869 :   lodepng_color_mode_cleanup(&state->info_raw);
; 4870 :   lodepng_info_cleanup(&state->info_png);

  000f9	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _state$3[ebp+136]

; 2585 :   info->palette = 0;

  000ff	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _state$3[ebp+112], 0

; 2586 :   info->palettesize = 0;

  00109	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _state$3[ebp+116], 0

; 2656 : }
; 2657 : 
; 2658 : size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)
; 2659 : {
; 2660 :   return (w * h * lodepng_get_bpp_lct(colortype, bitdepth) + 7) / 8;
; 2661 : }
; 2662 : 
; 2663 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2664 : 
; 2665 : static void LodePNGUnknownChunks_init(LodePNGInfo* info)
; 2666 : {
; 2667 :   unsigned i;
; 2668 :   for(i = 0; i < 3; i++) info->unknown_chunks_data[i] = 0;
; 2669 :   for(i = 0; i < 3; i++) info->unknown_chunks_size[i] = 0;
; 2670 : }
; 2671 : 
; 2672 : static void LodePNGUnknownChunks_cleanup(LodePNGInfo* info)
; 2673 : {
; 2674 :   unsigned i;
; 2675 :   for(i = 0; i < 3; i++) lodepng_free(info->unknown_chunks_data[i]);
; 2676 : }
; 2677 : 
; 2678 : static unsigned LodePNGUnknownChunks_copy(LodePNGInfo* dest, const LodePNGInfo* src)
; 2679 : {
; 2680 :   unsigned i;
; 2681 : 
; 2682 :   LodePNGUnknownChunks_cleanup(dest);
; 2683 : 
; 2684 :   for(i = 0; i < 3; i++)
; 2685 :   {
; 2686 :     size_t j;
; 2687 :     dest->unknown_chunks_size[i] = src->unknown_chunks_size[i];
; 2688 :     dest->unknown_chunks_data[i] = (unsigned char*)lodepng_malloc(src->unknown_chunks_size[i]);
; 2689 :     if(!dest->unknown_chunks_data[i] && dest->unknown_chunks_size[i]) return 83; /*alloc fail*/
; 2690 :     for(j = 0; j < src->unknown_chunks_size[i]; j++)
; 2691 :     {
; 2692 :       dest->unknown_chunks_data[i][j] = src->unknown_chunks_data[i][j];
; 2693 :     }
; 2694 :   }
; 2695 : 
; 2696 :   return 0;
; 2697 : }
; 2698 : 
; 2699 : /******************************************************************************/
; 2700 : 
; 2701 : static void LodePNGText_init(LodePNGInfo* info)
; 2702 : {
; 2703 :   info->text_num = 0;
; 2704 :   info->text_keys = NULL;
; 2705 :   info->text_strings = NULL;
; 2706 : }
; 2707 : 
; 2708 : static void LodePNGText_cleanup(LodePNGInfo* info)
; 2709 : {
; 2710 :   size_t i;
; 2711 :   for(i = 0; i < info->text_num; i++)
; 2712 :   {
; 2713 :     string_cleanup(&info->text_keys[i]);
; 2714 :     string_cleanup(&info->text_strings[i]);
; 2715 :   }
; 2716 :   lodepng_free(info->text_keys);
; 2717 :   lodepng_free(info->text_strings);
; 2718 : }
; 2719 : 
; 2720 : static unsigned LodePNGText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2721 : {
; 2722 :   size_t i = 0;
; 2723 :   dest->text_keys = 0;
; 2724 :   dest->text_strings = 0;
; 2725 :   dest->text_num = 0;
; 2726 :   for(i = 0; i < source->text_num; i++)
; 2727 :   {
; 2728 :     CERROR_TRY_RETURN(lodepng_add_text(dest, source->text_keys[i], source->text_strings[i]));
; 2729 :   }
; 2730 :   return 0;
; 2731 : }
; 2732 : 
; 2733 : void lodepng_clear_text(LodePNGInfo* info)
; 2734 : {
; 2735 :   LodePNGText_cleanup(info);
; 2736 : }
; 2737 : 
; 2738 : unsigned lodepng_add_text(LodePNGInfo* info, const char* key, const char* str)
; 2739 : {
; 2740 :   char** new_keys = (char**)(lodepng_realloc(info->text_keys, sizeof(char*) * (info->text_num + 1)));
; 2741 :   char** new_strings = (char**)(lodepng_realloc(info->text_strings, sizeof(char*) * (info->text_num + 1)));
; 2742 :   if(!new_keys || !new_strings)
; 2743 :   {
; 2744 :     lodepng_free(new_keys);
; 2745 :     lodepng_free(new_strings);
; 2746 :     return 83; /*alloc fail*/
; 2747 :   }
; 2748 : 
; 2749 :   info->text_num++;
; 2750 :   info->text_keys = new_keys;
; 2751 :   info->text_strings = new_strings;
; 2752 : 
; 2753 :   string_init(&info->text_keys[info->text_num - 1]);
; 2754 :   string_set(&info->text_keys[info->text_num - 1], key);
; 2755 : 
; 2756 :   string_init(&info->text_strings[info->text_num - 1]);
; 2757 :   string_set(&info->text_strings[info->text_num - 1], str);
; 2758 : 
; 2759 :   return 0;
; 2760 : }
; 2761 : 
; 2762 : /******************************************************************************/
; 2763 : 
; 2764 : static void LodePNGIText_init(LodePNGInfo* info)
; 2765 : {
; 2766 :   info->itext_num = 0;
; 2767 :   info->itext_keys = NULL;
; 2768 :   info->itext_langtags = NULL;
; 2769 :   info->itext_transkeys = NULL;
; 2770 :   info->itext_strings = NULL;
; 2771 : }
; 2772 : 
; 2773 : static void LodePNGIText_cleanup(LodePNGInfo* info)
; 2774 : {
; 2775 :   size_t i;
; 2776 :   for(i = 0; i < info->itext_num; i++)
; 2777 :   {
; 2778 :     string_cleanup(&info->itext_keys[i]);
; 2779 :     string_cleanup(&info->itext_langtags[i]);
; 2780 :     string_cleanup(&info->itext_transkeys[i]);
; 2781 :     string_cleanup(&info->itext_strings[i]);
; 2782 :   }
; 2783 :   lodepng_free(info->itext_keys);
; 2784 :   lodepng_free(info->itext_langtags);
; 2785 :   lodepng_free(info->itext_transkeys);
; 2786 :   lodepng_free(info->itext_strings);
; 2787 : }
; 2788 : 
; 2789 : static unsigned LodePNGIText_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2790 : {
; 2791 :   size_t i = 0;
; 2792 :   dest->itext_keys = 0;
; 2793 :   dest->itext_langtags = 0;
; 2794 :   dest->itext_transkeys = 0;
; 2795 :   dest->itext_strings = 0;
; 2796 :   dest->itext_num = 0;
; 2797 :   for(i = 0; i < source->itext_num; i++)
; 2798 :   {
; 2799 :     CERROR_TRY_RETURN(lodepng_add_itext(dest, source->itext_keys[i], source->itext_langtags[i],
; 2800 :                                         source->itext_transkeys[i], source->itext_strings[i]));
; 2801 :   }
; 2802 :   return 0;
; 2803 : }
; 2804 : 
; 2805 : void lodepng_clear_itext(LodePNGInfo* info)
; 2806 : {
; 2807 :   LodePNGIText_cleanup(info);
; 2808 : }
; 2809 : 
; 2810 : unsigned lodepng_add_itext(LodePNGInfo* info, const char* key, const char* langtag,
; 2811 :                            const char* transkey, const char* str)
; 2812 : {
; 2813 :   char** new_keys = (char**)(lodepng_realloc(info->itext_keys, sizeof(char*) * (info->itext_num + 1)));
; 2814 :   char** new_langtags = (char**)(lodepng_realloc(info->itext_langtags, sizeof(char*) * (info->itext_num + 1)));
; 2815 :   char** new_transkeys = (char**)(lodepng_realloc(info->itext_transkeys, sizeof(char*) * (info->itext_num + 1)));
; 2816 :   char** new_strings = (char**)(lodepng_realloc(info->itext_strings, sizeof(char*) * (info->itext_num + 1)));
; 2817 :   if(!new_keys || !new_langtags || !new_transkeys || !new_strings)
; 2818 :   {
; 2819 :     lodepng_free(new_keys);
; 2820 :     lodepng_free(new_langtags);
; 2821 :     lodepng_free(new_transkeys);
; 2822 :     lodepng_free(new_strings);
; 2823 :     return 83; /*alloc fail*/
; 2824 :   }
; 2825 : 
; 2826 :   info->itext_num++;
; 2827 :   info->itext_keys = new_keys;
; 2828 :   info->itext_langtags = new_langtags;
; 2829 :   info->itext_transkeys = new_transkeys;
; 2830 :   info->itext_strings = new_strings;
; 2831 : 
; 2832 :   string_init(&info->itext_keys[info->itext_num - 1]);
; 2833 :   string_set(&info->itext_keys[info->itext_num - 1], key);
; 2834 : 
; 2835 :   string_init(&info->itext_langtags[info->itext_num - 1]);
; 2836 :   string_set(&info->itext_langtags[info->itext_num - 1], langtag);
; 2837 : 
; 2838 :   string_init(&info->itext_transkeys[info->itext_num - 1]);
; 2839 :   string_set(&info->itext_transkeys[info->itext_num - 1], transkey);
; 2840 : 
; 2841 :   string_init(&info->itext_strings[info->itext_num - 1]);
; 2842 :   string_set(&info->itext_strings[info->itext_num - 1], str);
; 2843 : 
; 2844 :   return 0;
; 2845 : }
; 2846 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2847 : 
; 2848 : void lodepng_info_init(LodePNGInfo* info)
; 2849 : {
; 2850 :   lodepng_color_mode_init(&info->color);
; 2851 :   info->interlace_method = 0;
; 2852 :   info->compression_method = 0;
; 2853 :   info->filter_method = 0;
; 2854 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2855 :   info->background_defined = 0;
; 2856 :   info->background_r = info->background_g = info->background_b = 0;
; 2857 : 
; 2858 :   LodePNGText_init(info);
; 2859 :   LodePNGIText_init(info);
; 2860 : 
; 2861 :   info->time_defined = 0;
; 2862 :   info->phys_defined = 0;
; 2863 : 
; 2864 :   LodePNGUnknownChunks_init(info);
; 2865 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2866 : }
; 2867 : 
; 2868 : void lodepng_info_cleanup(LodePNGInfo* info)
; 2869 : {
; 2870 :   lodepng_color_mode_cleanup(&info->color);
; 2871 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2872 :   LodePNGText_cleanup(info);
; 2873 :   LodePNGIText_cleanup(info);
; 2874 : 
; 2875 :   LodePNGUnknownChunks_cleanup(info);
; 2876 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2877 : }
; 2878 : 
; 2879 : unsigned lodepng_info_copy(LodePNGInfo* dest, const LodePNGInfo* source)
; 2880 : {
; 2881 :   lodepng_info_cleanup(dest);
; 2882 :   *dest = *source;
; 2883 :   lodepng_color_mode_init(&dest->color);
; 2884 :   CERROR_TRY_RETURN(lodepng_color_mode_copy(&dest->color, &source->color));
; 2885 : 
; 2886 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 2887 :   CERROR_TRY_RETURN(LodePNGText_copy(dest, source));
; 2888 :   CERROR_TRY_RETURN(LodePNGIText_copy(dest, source));
; 2889 : 
; 2890 :   LodePNGUnknownChunks_init(dest);
; 2891 :   CERROR_TRY_RETURN(LodePNGUnknownChunks_copy(dest, source));
; 2892 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 2893 :   return 0;
; 2894 : }
; 2895 : 
; 2896 : void lodepng_info_swap(LodePNGInfo* a, LodePNGInfo* b)
; 2897 : {
; 2898 :   LodePNGInfo temp = *a;
; 2899 :   *a = *b;
; 2900 :   *b = temp;
; 2901 : }
; 2902 : 
; 2903 : /* ////////////////////////////////////////////////////////////////////////// */
; 2904 : 
; 2905 : /*index: bitgroup index, bits: bitgroup size(1, 2 or 4, in: bitgroup value, out: octet array to add bits to*/
; 2906 : static void addColorBits(unsigned char* out, size_t index, unsigned bits, unsigned in)
; 2907 : {
; 2908 :   /*p = the partial index in the byte, e.g. with 4 palettebits it is 0 for first half or 1 for second half*/
; 2909 :   unsigned p = index % (8 / bits);
; 2910 :   in &= (1 << bits) - 1; /*filter out any other bits of the input value*/
; 2911 :   in = in << (bits * (8 / bits - p - 1));
; 2912 :   if(p == 0) out[index * bits / 8] = in;
; 2913 :   else out[index * bits / 8] |= in;
; 2914 : }
; 2915 : 
; 2916 : typedef struct ColorTree ColorTree;
; 2917 : 
; 2918 : /*
; 2919 : One node of a color tree
; 2920 : This is the data structure used to count the number of unique colors and to get a palette
; 2921 : index for a color. It's like an octree, but because the alpha channel is used too, each
; 2922 : node has 16 instead of 8 children.
; 2923 : */
; 2924 : struct ColorTree
; 2925 : {
; 2926 :   ColorTree* children[16]; /*up to 16 pointers to ColorTree of next level*/
; 2927 :   int index; /*the payload. Only has a meaningful value if this is in the last level*/
; 2928 : };
; 2929 : 
; 2930 : static void color_tree_init(ColorTree* tree)
; 2931 : {
; 2932 :   int i;
; 2933 :   for(i = 0; i < 16; i++) tree->children[i] = 0;
; 2934 :   tree->index = -1;
; 2935 : }
; 2936 : 
; 2937 : static void color_tree_cleanup(ColorTree* tree)
; 2938 : {
; 2939 :   int i;
; 2940 :   for(i = 0; i < 16; i++)
; 2941 :   {
; 2942 :     if(tree->children[i])
; 2943 :     {
; 2944 :       color_tree_cleanup(tree->children[i]);
; 2945 :       lodepng_free(tree->children[i]);
; 2946 :     }
; 2947 :   }
; 2948 : }
; 2949 : 
; 2950 : /*returns -1 if color not present, its index otherwise*/
; 2951 : static int color_tree_get(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2952 : {
; 2953 :   int bit = 0;
; 2954 :   for(bit = 0; bit < 8; bit++)
; 2955 :   {
; 2956 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
; 2957 :     if(!tree->children[i]) return -1;
; 2958 :     else tree = tree->children[i];
; 2959 :   }
; 2960 :   return tree ? tree->index : -1;
; 2961 : }
; 2962 : 
; 2963 : #ifdef LODEPNG_COMPILE_ENCODER
; 2964 : static int color_tree_has(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2965 : {
; 2966 :   return color_tree_get(tree, r, g, b, a) >= 0;
; 2967 : }
; 2968 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 2969 : 
; 2970 : /*color is not allowed to already exist.
; 2971 : Index should be >= 0 (it's signed to be compatible with using -1 for "doesn't exist")*/
; 2972 : static void color_tree_add(ColorTree* tree,
; 2973 :                            unsigned char r, unsigned char g, unsigned char b, unsigned char a, int index)
; 2974 : {
; 2975 :   int bit;
; 2976 :   for(bit = 0; bit < 8; bit++)
; 2977 :   {
; 2978 :     int i = 8 * ((r >> bit) & 1) + 4 * ((g >> bit) & 1) + 2 * ((b >> bit) & 1) + 1 * ((a >> bit) & 1);
; 2979 :     if(!tree->children[i])
; 2980 :     {
; 2981 :       tree->children[i] = (ColorTree*)lodepng_malloc(sizeof(ColorTree));
; 2982 :       color_tree_init(tree->children[i]);
; 2983 :     }
; 2984 :     tree = tree->children[i];
; 2985 :   }
; 2986 :   tree->index = index;
; 2987 : }
; 2988 : 
; 2989 : /*put a pixel, given its RGBA color, into image of any color type*/
; 2990 : static unsigned rgba8ToPixel(unsigned char* out, size_t i,
; 2991 :                              const LodePNGColorMode* mode, ColorTree* tree /*for palette*/,
; 2992 :                              unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 2993 : {
; 2994 :   if(mode->colortype == LCT_GREY)
; 2995 :   {
; 2996 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 2997 :     if(mode->bitdepth == 8) out[i] = grey;
; 2998 :     else if(mode->bitdepth == 16) out[i * 2 + 0] = out[i * 2 + 1] = grey;
; 2999 :     else
; 3000 :     {
; 3001 :       /*take the most significant bits of grey*/
; 3002 :       grey = (grey >> (8 - mode->bitdepth)) & ((1 << mode->bitdepth) - 1);
; 3003 :       addColorBits(out, i, mode->bitdepth, grey);
; 3004 :     }
; 3005 :   }
; 3006 :   else if(mode->colortype == LCT_RGB)
; 3007 :   {
; 3008 :     if(mode->bitdepth == 8)
; 3009 :     {
; 3010 :       out[i * 3 + 0] = r;
; 3011 :       out[i * 3 + 1] = g;
; 3012 :       out[i * 3 + 2] = b;
; 3013 :     }
; 3014 :     else
; 3015 :     {
; 3016 :       out[i * 6 + 0] = out[i * 6 + 1] = r;
; 3017 :       out[i * 6 + 2] = out[i * 6 + 3] = g;
; 3018 :       out[i * 6 + 4] = out[i * 6 + 5] = b;
; 3019 :     }
; 3020 :   }
; 3021 :   else if(mode->colortype == LCT_PALETTE)
; 3022 :   {
; 3023 :     int index = color_tree_get(tree, r, g, b, a);
; 3024 :     if(index < 0) return 82; /*color not in palette*/
; 3025 :     if(mode->bitdepth == 8) out[i] = index;
; 3026 :     else addColorBits(out, i, mode->bitdepth, index);
; 3027 :   }
; 3028 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3029 :   {
; 3030 :     unsigned char grey = r; /*((unsigned short)r + g + b) / 3*/;
; 3031 :     if(mode->bitdepth == 8)
; 3032 :     {
; 3033 :       out[i * 2 + 0] = grey;
; 3034 :       out[i * 2 + 1] = a;
; 3035 :     }
; 3036 :     else if(mode->bitdepth == 16)
; 3037 :     {
; 3038 :       out[i * 4 + 0] = out[i * 4 + 1] = grey;
; 3039 :       out[i * 4 + 2] = out[i * 4 + 3] = a;
; 3040 :     }
; 3041 :   }
; 3042 :   else if(mode->colortype == LCT_RGBA)
; 3043 :   {
; 3044 :     if(mode->bitdepth == 8)
; 3045 :     {
; 3046 :       out[i * 4 + 0] = r;
; 3047 :       out[i * 4 + 1] = g;
; 3048 :       out[i * 4 + 2] = b;
; 3049 :       out[i * 4 + 3] = a;
; 3050 :     }
; 3051 :     else
; 3052 :     {
; 3053 :       out[i * 8 + 0] = out[i * 8 + 1] = r;
; 3054 :       out[i * 8 + 2] = out[i * 8 + 3] = g;
; 3055 :       out[i * 8 + 4] = out[i * 8 + 5] = b;
; 3056 :       out[i * 8 + 6] = out[i * 8 + 7] = a;
; 3057 :     }
; 3058 :   }
; 3059 : 
; 3060 :   return 0; /*no error*/
; 3061 : }
; 3062 : 
; 3063 : /*put a pixel, given its RGBA16 color, into image of any color 16-bitdepth type*/
; 3064 : static unsigned rgba16ToPixel(unsigned char* out, size_t i,
; 3065 :                               const LodePNGColorMode* mode,
; 3066 :                               unsigned short r, unsigned short g, unsigned short b, unsigned short a)
; 3067 : {
; 3068 :   if(mode->bitdepth != 16) return 85; /*must be 16 for this function*/
; 3069 :   if(mode->colortype == LCT_GREY)
; 3070 :   {
; 3071 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3072 :     out[i * 2 + 0] = (grey >> 8) & 255;
; 3073 :     out[i * 2 + 1] = grey & 255;
; 3074 :   }
; 3075 :   else if(mode->colortype == LCT_RGB)
; 3076 :   {
; 3077 :     out[i * 6 + 0] = (r >> 8) & 255;
; 3078 :     out[i * 6 + 1] = r & 255;
; 3079 :     out[i * 6 + 2] = (g >> 8) & 255;
; 3080 :     out[i * 6 + 3] = g & 255;
; 3081 :     out[i * 6 + 4] = (b >> 8) & 255;
; 3082 :     out[i * 6 + 5] = b & 255;
; 3083 :   }
; 3084 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3085 :   {
; 3086 :     unsigned short grey = r; /*((unsigned)r + g + b) / 3*/;
; 3087 :     out[i * 4 + 0] = (grey >> 8) & 255;
; 3088 :     out[i * 4 + 1] = grey & 255;
; 3089 :     out[i * 4 + 2] = (a >> 8) & 255;
; 3090 :     out[i * 4 + 3] = a & 255;
; 3091 :   }
; 3092 :   else if(mode->colortype == LCT_RGBA)
; 3093 :   {
; 3094 :     out[i * 8 + 0] = (r >> 8) & 255;
; 3095 :     out[i * 8 + 1] = r & 255;
; 3096 :     out[i * 8 + 2] = (g >> 8) & 255;
; 3097 :     out[i * 8 + 3] = g & 255;
; 3098 :     out[i * 8 + 4] = (b >> 8) & 255;
; 3099 :     out[i * 8 + 5] = b & 255;
; 3100 :     out[i * 8 + 6] = (a >> 8) & 255;
; 3101 :     out[i * 8 + 7] = a & 255;
; 3102 :   }
; 3103 : 
; 3104 :   return 0; /*no error*/
; 3105 : }
; 3106 : 
; 3107 : /*Get RGBA8 color of pixel with index i (y * width + x) from the raw image with given color type.*/
; 3108 : static unsigned getPixelColorRGBA8(unsigned char* r, unsigned char* g,
; 3109 :                                    unsigned char* b, unsigned char* a,
; 3110 :                                    const unsigned char* in, size_t i,
; 3111 :                                    const LodePNGColorMode* mode,
; 3112 :                                    unsigned fix_png)
; 3113 : {
; 3114 :   if(mode->colortype == LCT_GREY)
; 3115 :   {
; 3116 :     if(mode->bitdepth == 8)
; 3117 :     {
; 3118 :       *r = *g = *b = in[i];
; 3119 :       if(mode->key_defined && *r == mode->key_r) *a = 0;
; 3120 :       else *a = 255;
; 3121 :     }
; 3122 :     else if(mode->bitdepth == 16)
; 3123 :     {
; 3124 :       *r = *g = *b = in[i * 2 + 0];
; 3125 :       if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
; 3126 :       else *a = 255;
; 3127 :     }
; 3128 :     else
; 3129 :     {
; 3130 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
; 3131 :       size_t j = i * mode->bitdepth;
; 3132 :       unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3133 :       *r = *g = *b = (value * 255) / highest;
; 3134 :       if(mode->key_defined && value == mode->key_r) *a = 0;
; 3135 :       else *a = 255;
; 3136 :     }
; 3137 :   }
; 3138 :   else if(mode->colortype == LCT_RGB)
; 3139 :   {
; 3140 :     if(mode->bitdepth == 8)
; 3141 :     {
; 3142 :       *r = in[i * 3 + 0]; *g = in[i * 3 + 1]; *b = in[i * 3 + 2];
; 3143 :       if(mode->key_defined && *r == mode->key_r && *g == mode->key_g && *b == mode->key_b) *a = 0;
; 3144 :       else *a = 255;
; 3145 :     }
; 3146 :     else
; 3147 :     {
; 3148 :       *r = in[i * 6 + 0];
; 3149 :       *g = in[i * 6 + 2];
; 3150 :       *b = in[i * 6 + 4];
; 3151 :       if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3152 :          && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3153 :          && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
; 3154 :       else *a = 255;
; 3155 :     }
; 3156 :   }
; 3157 :   else if(mode->colortype == LCT_PALETTE)
; 3158 :   {
; 3159 :     unsigned index;
; 3160 :     if(mode->bitdepth == 8) index = in[i];
; 3161 :     else
; 3162 :     {
; 3163 :       size_t j = i * mode->bitdepth;
; 3164 :       index = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3165 :     }
; 3166 : 
; 3167 :     if(index >= mode->palettesize)
; 3168 :     {
; 3169 :       /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3170 :       if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/
; 3171 :       *r = *g = *b = 0;
; 3172 :       *a = 255;
; 3173 :     }
; 3174 :     else
; 3175 :     {
; 3176 :       *r = mode->palette[index * 4 + 0];
; 3177 :       *g = mode->palette[index * 4 + 1];
; 3178 :       *b = mode->palette[index * 4 + 2];
; 3179 :       *a = mode->palette[index * 4 + 3];
; 3180 :     }
; 3181 :   }
; 3182 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3183 :   {
; 3184 :     if(mode->bitdepth == 8)
; 3185 :     {
; 3186 :       *r = *g = *b = in[i * 2 + 0];
; 3187 :       *a = in[i * 2 + 1];
; 3188 :     }
; 3189 :     else
; 3190 :     {
; 3191 :       *r = *g = *b = in[i * 4 + 0];
; 3192 :       *a = in[i * 4 + 2];
; 3193 :     }
; 3194 :   }
; 3195 :   else if(mode->colortype == LCT_RGBA)
; 3196 :   {
; 3197 :     if(mode->bitdepth == 8)
; 3198 :     {
; 3199 :       *r = in[i * 4 + 0];
; 3200 :       *g = in[i * 4 + 1];
; 3201 :       *b = in[i * 4 + 2];
; 3202 :       *a = in[i * 4 + 3];
; 3203 :     }
; 3204 :     else
; 3205 :     {
; 3206 :       *r = in[i * 8 + 0];
; 3207 :       *g = in[i * 8 + 2];
; 3208 :       *b = in[i * 8 + 4];
; 3209 :       *a = in[i * 8 + 6];
; 3210 :     }
; 3211 :   }
; 3212 : 
; 3213 :   return 0; /*no error*/
; 3214 : }
; 3215 : 
; 3216 : /*Similar to getPixelColorRGBA8, but with all the for loops inside of the color
; 3217 : mode test cases, optimized to convert the colors much faster, when converting
; 3218 : to RGBA or RGB with 8 bit per cannel. buffer must be RGBA or RGB output with
; 3219 : enough memory, if has_alpha is true the output is RGBA. mode has the color mode
; 3220 : of the input buffer.*/
; 3221 : static unsigned getPixelColorsRGBA8(unsigned char* buffer, size_t numpixels,
; 3222 :                                     unsigned has_alpha, const unsigned char* in,
; 3223 :                                     const LodePNGColorMode* mode,
; 3224 :                                     unsigned fix_png)
; 3225 : {
; 3226 :   unsigned num_channels = has_alpha ? 4 : 3;
; 3227 :   size_t i;
; 3228 :   if(mode->colortype == LCT_GREY)
; 3229 :   {
; 3230 :     if(mode->bitdepth == 8)
; 3231 :     {
; 3232 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3233 :       {
; 3234 :         buffer[0] = buffer[1] = buffer[2] = in[i];
; 3235 :         if(has_alpha) buffer[3] = mode->key_defined && in[i] == mode->key_r ? 0 : 255;
; 3236 :       }
; 3237 :     }
; 3238 :     else if(mode->bitdepth == 16)
; 3239 :     {
; 3240 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3241 :       {
; 3242 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2];
; 3243 :         if(has_alpha) buffer[3] = mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r ? 0 : 255;
; 3244 :       }
; 3245 :     }
; 3246 :     else
; 3247 :     {
; 3248 :       unsigned highest = ((1U << mode->bitdepth) - 1U); /*highest possible value for this bit depth*/
; 3249 :       size_t j = 0;
; 3250 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3251 :       {
; 3252 :         unsigned value = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3253 :         buffer[0] = buffer[1] = buffer[2] = (value * 255) / highest;
; 3254 :         if(has_alpha) buffer[3] = mode->key_defined && value == mode->key_r ? 0 : 255;
; 3255 :       }
; 3256 :     }
; 3257 :   }
; 3258 :   else if(mode->colortype == LCT_RGB)
; 3259 :   {
; 3260 :     if(mode->bitdepth == 8)
; 3261 :     {
; 3262 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3263 :       {
; 3264 :         buffer[0] = in[i * 3 + 0];
; 3265 :         buffer[1] = in[i * 3 + 1];
; 3266 :         buffer[2] = in[i * 3 + 2];
; 3267 :         if(has_alpha) buffer[3] = mode->key_defined && buffer[0] == mode->key_r
; 3268 :            && buffer[1]== mode->key_g && buffer[2] == mode->key_b ? 0 : 255;
; 3269 :       }
; 3270 :     }
; 3271 :     else
; 3272 :     {
; 3273 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3274 :       {
; 3275 :         buffer[0] = in[i * 6 + 0];
; 3276 :         buffer[1] = in[i * 6 + 2];
; 3277 :         buffer[2] = in[i * 6 + 4];
; 3278 :         if(has_alpha) buffer[3] = mode->key_defined
; 3279 :            && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3280 :            && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3281 :            && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b ? 0 : 255;
; 3282 :       }
; 3283 :     }
; 3284 :   }
; 3285 :   else if(mode->colortype == LCT_PALETTE)
; 3286 :   {
; 3287 :     unsigned index;
; 3288 :     size_t j = 0;
; 3289 :     for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3290 :     {
; 3291 :       if(mode->bitdepth == 8) index = in[i];
; 3292 :       else index = readBitsFromReversedStream(&j, in, mode->bitdepth);
; 3293 : 
; 3294 :       if(index >= mode->palettesize)
; 3295 :       {
; 3296 :         /*This is an error according to the PNG spec, but fix_png can ignore it*/
; 3297 :         if(!fix_png) return (mode->bitdepth == 8 ? 46 : 47); /*index out of palette*/
; 3298 :         buffer[0] = buffer[1] = buffer[2] = 0;
; 3299 :         if(has_alpha) buffer[3] = 255;
; 3300 :       }
; 3301 :       else
; 3302 :       {
; 3303 :         buffer[0] = mode->palette[index * 4 + 0];
; 3304 :         buffer[1] = mode->palette[index * 4 + 1];
; 3305 :         buffer[2] = mode->palette[index * 4 + 2];
; 3306 :         if(has_alpha) buffer[3] = mode->palette[index * 4 + 3];
; 3307 :       }
; 3308 :     }
; 3309 :   }
; 3310 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3311 :   {
; 3312 :     if(mode->bitdepth == 8)
; 3313 :     {
; 3314 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3315 :       {
; 3316 :         buffer[0] = buffer[1] = buffer[2] = in[i * 2 + 0];
; 3317 :         if(has_alpha) buffer[3] = in[i * 2 + 1];
; 3318 :       }
; 3319 :     }
; 3320 :     else
; 3321 :     {
; 3322 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3323 :       {
; 3324 :         buffer[0] = buffer[1] = buffer[2] = in[i * 4 + 0];
; 3325 :         if(has_alpha) buffer[3] = in[i * 4 + 2];
; 3326 :       }
; 3327 :     }
; 3328 :   }
; 3329 :   else if(mode->colortype == LCT_RGBA)
; 3330 :   {
; 3331 :     if(mode->bitdepth == 8)
; 3332 :     {
; 3333 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3334 :       {
; 3335 :         buffer[0] = in[i * 4 + 0];
; 3336 :         buffer[1] = in[i * 4 + 1];
; 3337 :         buffer[2] = in[i * 4 + 2];
; 3338 :         if(has_alpha) buffer[3] = in[i * 4 + 3];
; 3339 :       }
; 3340 :     }
; 3341 :     else
; 3342 :     {
; 3343 :       for(i = 0; i < numpixels; i++, buffer += num_channels)
; 3344 :       {
; 3345 :         buffer[0] = in[i * 8 + 0];
; 3346 :         buffer[1] = in[i * 8 + 2];
; 3347 :         buffer[2] = in[i * 8 + 4];
; 3348 :         if(has_alpha) buffer[3] = in[i * 8 + 6];
; 3349 :       }
; 3350 :     }
; 3351 :   }
; 3352 : 
; 3353 :   return 0; /*no error*/
; 3354 : }
; 3355 : 
; 3356 : /*Get RGBA16 color of pixel with index i (y * width + x) from the raw image with
; 3357 : given color type, but the given color type must be 16-bit itself.*/
; 3358 : static unsigned getPixelColorRGBA16(unsigned short* r, unsigned short* g, unsigned short* b, unsigned short* a,
; 3359 :                                     const unsigned char* in, size_t i, const LodePNGColorMode* mode)
; 3360 : {
; 3361 :   if(mode->bitdepth != 16) return 85; /*error: this function only supports 16-bit input*/
; 3362 : 
; 3363 :   if(mode->colortype == LCT_GREY)
; 3364 :   {
; 3365 :     *r = *g = *b = 256 * in[i * 2 + 0] + in[i * 2 + 1];
; 3366 :     if(mode->key_defined && 256U * in[i * 2 + 0] + in[i * 2 + 1] == mode->key_r) *a = 0;
; 3367 :     else *a = 65535;
; 3368 :   }
; 3369 :   else if(mode->colortype == LCT_RGB)
; 3370 :   {
; 3371 :     *r = 256 * in[i * 6 + 0] + in[i * 6 + 1];
; 3372 :     *g = 256 * in[i * 6 + 2] + in[i * 6 + 3];
; 3373 :     *b = 256 * in[i * 6 + 4] + in[i * 6 + 5];
; 3374 :     if(mode->key_defined && 256U * in[i * 6 + 0] + in[i * 6 + 1] == mode->key_r
; 3375 :        && 256U * in[i * 6 + 2] + in[i * 6 + 3] == mode->key_g
; 3376 :        && 256U * in[i * 6 + 4] + in[i * 6 + 5] == mode->key_b) *a = 0;
; 3377 :     else *a = 65535;
; 3378 :   }
; 3379 :   else if(mode->colortype == LCT_GREY_ALPHA)
; 3380 :   {
; 3381 :     *r = *g = *b = 256 * in[i * 4 + 0] + in[i * 4 + 1];
; 3382 :     *a = 256 * in[i * 4 + 2] + in[i * 4 + 3];
; 3383 :   }
; 3384 :   else if(mode->colortype == LCT_RGBA)
; 3385 :   {
; 3386 :     *r = 256 * in[i * 8 + 0] + in[i * 8 + 1];
; 3387 :     *g = 256 * in[i * 8 + 2] + in[i * 8 + 3];
; 3388 :     *b = 256 * in[i * 8 + 4] + in[i * 8 + 5];
; 3389 :     *a = 256 * in[i * 8 + 6] + in[i * 8 + 7];
; 3390 :   }
; 3391 :   else return 85; /*error: this function only supports 16-bit input, not palettes*/
; 3392 : 
; 3393 :   return 0; /*no error*/
; 3394 : }
; 3395 : 
; 3396 : /*
; 3397 : converts from any color type to 24-bit or 32-bit (later maybe more supported). return value = LodePNG error code
; 3398 : the out buffer must have (w * h * bpp + 7) / 8 bytes, where bpp is the bits per pixel of the output color type
; 3399 : (lodepng_get_bpp) for < 8 bpp images, there may _not_ be padding bits at the end of scanlines.
; 3400 : */
; 3401 : unsigned lodepng_convert(unsigned char* out, const unsigned char* in,
; 3402 :                          LodePNGColorMode* mode_out, const LodePNGColorMode* mode_in,
; 3403 :                          unsigned w, unsigned h, unsigned fix_png)
; 3404 : {
; 3405 :   unsigned error = 0;
; 3406 :   size_t i;
; 3407 :   ColorTree tree;
; 3408 :   size_t numpixels = w * h;
; 3409 : 
; 3410 :   if(lodepng_color_mode_equal(mode_out, mode_in))
; 3411 :   {
; 3412 :     size_t numbytes = lodepng_get_raw_size(w, h, mode_in);
; 3413 :     for(i = 0; i < numbytes; i++) out[i] = in[i];
; 3414 :     return error;
; 3415 :   }
; 3416 : 
; 3417 :   if(mode_out->colortype == LCT_PALETTE)
; 3418 :   {
; 3419 :     size_t palsize = 1 << mode_out->bitdepth;
; 3420 :     if(mode_out->palettesize < palsize) palsize = mode_out->palettesize;
; 3421 :     color_tree_init(&tree);
; 3422 :     for(i = 0; i < palsize; i++)
; 3423 :     {
; 3424 :       unsigned char* p = &mode_out->palette[i * 4];
; 3425 :       color_tree_add(&tree, p[0], p[1], p[2], p[3], i);
; 3426 :     }
; 3427 :   }
; 3428 : 
; 3429 :   if(mode_in->bitdepth == 16 && mode_out->bitdepth == 16)
; 3430 :   {
; 3431 :     for(i = 0; i < numpixels; i++)
; 3432 :     {
; 3433 :       unsigned short r = 0, g = 0, b = 0, a = 0;
; 3434 :       error = getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode_in);
; 3435 :       if(error) break;
; 3436 :       error = rgba16ToPixel(out, i, mode_out, r, g, b, a);
; 3437 :       if(error) break;
; 3438 :     }
; 3439 :   }
; 3440 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGBA)
; 3441 :   {
; 3442 :     error = getPixelColorsRGBA8(out, numpixels, 1, in, mode_in, fix_png);
; 3443 :   }
; 3444 :   else if(mode_out->bitdepth == 8 && mode_out->colortype == LCT_RGB)
; 3445 :   {
; 3446 :     error = getPixelColorsRGBA8(out, numpixels, 0, in, mode_in, fix_png);
; 3447 :   }
; 3448 :   else
; 3449 :   {
; 3450 :     unsigned char r = 0, g = 0, b = 0, a = 0;
; 3451 :     for(i = 0; i < numpixels; i++)
; 3452 :     {
; 3453 :       error = getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode_in, fix_png);
; 3454 :       if(error) break;
; 3455 :       error = rgba8ToPixel(out, i, mode_out, &tree, r, g, b, a);
; 3456 :       if(error) break;
; 3457 :     }
; 3458 :   }
; 3459 : 
; 3460 :   if(mode_out->colortype == LCT_PALETTE)
; 3461 :   {
; 3462 :     color_tree_cleanup(&tree);
; 3463 :   }
; 3464 : 
; 3465 :   return error;
; 3466 : }
; 3467 : 
; 3468 : #ifdef LODEPNG_COMPILE_ENCODER
; 3469 : 
; 3470 : typedef struct ColorProfile
; 3471 : {
; 3472 :   unsigned char sixteenbit; /*needs more than 8 bits per channel*/
; 3473 :   unsigned char sixteenbit_done;
; 3474 : 
; 3475 : 
; 3476 :   unsigned char colored; /*not greyscale*/
; 3477 :   unsigned char colored_done;
; 3478 : 
; 3479 :   unsigned char key; /*a color key is required, or more*/
; 3480 :   unsigned short key_r; /*these values are always in 16-bit bitdepth in the profile*/
; 3481 :   unsigned short key_g;
; 3482 :   unsigned short key_b;
; 3483 :   unsigned char alpha; /*alpha channel, or alpha palette, required*/
; 3484 :   unsigned char alpha_done;
; 3485 : 
; 3486 :   unsigned numcolors;
; 3487 :   ColorTree tree; /*for listing the counted colors, up to 256*/
; 3488 :   unsigned char* palette; /*size 1024. Remember up to the first 256 RGBA colors*/
; 3489 :   unsigned maxnumcolors; /*if more than that amount counted*/
; 3490 :   unsigned char numcolors_done;
; 3491 : 
; 3492 :   unsigned greybits; /*amount of bits required for greyscale (1, 2, 4, 8). Does not take 16 bit into account.*/
; 3493 :   unsigned char greybits_done;
; 3494 : 
; 3495 : } ColorProfile;
; 3496 : 
; 3497 : static void color_profile_init(ColorProfile* profile, const LodePNGColorMode* mode)
; 3498 : {
; 3499 :   profile->sixteenbit = 0;
; 3500 :   profile->sixteenbit_done = mode->bitdepth == 16 ? 0 : 1;
; 3501 : 
; 3502 :   profile->colored = 0;
; 3503 :   profile->colored_done = lodepng_is_greyscale_type(mode) ? 1 : 0;
; 3504 : 
; 3505 :   profile->key = 0;
; 3506 :   profile->alpha = 0;
; 3507 :   profile->alpha_done = lodepng_can_have_alpha(mode) ? 0 : 1;
; 3508 : 
; 3509 :   profile->numcolors = 0;
; 3510 :   color_tree_init(&profile->tree);
; 3511 :   profile->palette = (unsigned char*)lodepng_malloc(1024);
; 3512 :   profile->maxnumcolors = 257;
; 3513 :   if(lodepng_get_bpp(mode) <= 8)
; 3514 :   {
; 3515 :     int bpp = lodepng_get_bpp(mode);
; 3516 :     profile->maxnumcolors = bpp == 1 ? 2 : (bpp == 2 ? 4 : (bpp == 4 ? 16 : 256));
; 3517 :   }
; 3518 :   profile->numcolors_done = 0;
; 3519 : 
; 3520 :   profile->greybits = 1;
; 3521 :   profile->greybits_done = lodepng_get_bpp(mode) == 1 ? 1 : 0;
; 3522 : }
; 3523 : 
; 3524 : static void color_profile_cleanup(ColorProfile* profile)
; 3525 : {
; 3526 :   color_tree_cleanup(&profile->tree);
; 3527 :   lodepng_free(profile->palette);
; 3528 : }
; 3529 : 
; 3530 : /*function used for debug purposes with C++*/
; 3531 : /*void printColorProfile(ColorProfile* p)
; 3532 : {
; 3533 :   std::cout << "sixteenbit: " << (int)p->sixteenbit << std::endl;
; 3534 :   std::cout << "sixteenbit_done: " << (int)p->sixteenbit_done << std::endl;
; 3535 :   std::cout << "colored: " << (int)p->colored << std::endl;
; 3536 :   std::cout << "colored_done: " << (int)p->colored_done << std::endl;
; 3537 :   std::cout << "key: " << (int)p->key << std::endl;
; 3538 :   std::cout << "key_r: " << (int)p->key_r << std::endl;
; 3539 :   std::cout << "key_g: " << (int)p->key_g << std::endl;
; 3540 :   std::cout << "key_b: " << (int)p->key_b << std::endl;
; 3541 :   std::cout << "alpha: " << (int)p->alpha << std::endl;
; 3542 :   std::cout << "alpha_done: " << (int)p->alpha_done << std::endl;
; 3543 :   std::cout << "numcolors: " << (int)p->numcolors << std::endl;
; 3544 :   std::cout << "maxnumcolors: " << (int)p->maxnumcolors << std::endl;
; 3545 :   std::cout << "numcolors_done: " << (int)p->numcolors_done << std::endl;
; 3546 :   std::cout << "greybits: " << (int)p->greybits << std::endl;
; 3547 :   std::cout << "greybits_done: " << (int)p->greybits_done << std::endl;
; 3548 : }*/
; 3549 : 
; 3550 : /*Returns how many bits needed to represent given value (max 8 bit)*/
; 3551 : unsigned getValueRequiredBits(unsigned short value)
; 3552 : {
; 3553 :   if(value == 0 || value == 255) return 1;
; 3554 :   /*The scaling of 2-bit and 4-bit values uses multiples of 85 and 17*/
; 3555 :   if(value % 17 == 0) return value % 85 == 0 ? 2 : 4;
; 3556 :   return 8;
; 3557 : }
; 3558 : 
; 3559 : /*profile must already have been inited with mode.
; 3560 : It's ok to set some parameters of profile to done already.*/
; 3561 : static unsigned get_color_profile(ColorProfile* profile,
; 3562 :                                   const unsigned char* in,
; 3563 :                                   size_t numpixels /*must be full image size, for certain filesize based choices*/,
; 3564 :                                   const LodePNGColorMode* mode,
; 3565 :                                   unsigned fix_png)
; 3566 : {
; 3567 :   unsigned error = 0;
; 3568 :   size_t i;
; 3569 : 
; 3570 :   if(mode->bitdepth == 16)
; 3571 :   {
; 3572 :     for(i = 0; i < numpixels; i++)
; 3573 :     {
; 3574 :       unsigned short r, g, b, a;
; 3575 :       error = getPixelColorRGBA16(&r, &g, &b, &a, in, i, mode);
; 3576 :       if(error) break;
; 3577 : 
; 3578 :       /*a color is considered good for 8-bit if the first byte and the second byte are equal,
; 3579 :         (so if it's divisible through 257), NOT necessarily if the second byte is 0*/
; 3580 :       if(!profile->sixteenbit_done
; 3581 :           && (((r & 255) != ((r >> 8) & 255))
; 3582 :            || ((g & 255) != ((g >> 8) & 255))
; 3583 :            || ((b & 255) != ((b >> 8) & 255))))
; 3584 :       {
; 3585 :         profile->sixteenbit = 1;
; 3586 :         profile->sixteenbit_done = 1;
; 3587 :         profile->greybits_done = 1; /*greybits is not applicable anymore at 16-bit*/
; 3588 :         profile->numcolors_done = 1; /*counting colors no longer useful, palette doesn't support 16-bit*/
; 3589 :       }
; 3590 : 
; 3591 :       if(!profile->colored_done && (r != g || r != b))
; 3592 :       {
; 3593 :         profile->colored = 1;
; 3594 :         profile->colored_done = 1;
; 3595 :         profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3596 :       }
; 3597 : 
; 3598 :       if(!profile->alpha_done && a != 65535)
; 3599 :       {
; 3600 :         /*only use color key if numpixels large enough to justify tRNS chunk size*/
; 3601 :         if(a == 0 && numpixels > 16 && !(profile->key && (r != profile->key_r || g != profile->key_g || b != profile->key_b)))
; 3602 :         {
; 3603 :           if(!profile->alpha && !profile->key)
; 3604 :           {
; 3605 :             profile->key = 1;
; 3606 :             profile->key_r = r;
; 3607 :             profile->key_g = g;
; 3608 :             profile->key_b = b;
; 3609 :           }
; 3610 :         }
; 3611 :         else
; 3612 :         {
; 3613 :           profile->alpha = 1;
; 3614 :           profile->alpha_done = 1;
; 3615 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3616 :         }
; 3617 :       }
; 3618 : 
; 3619 :       /* Color key cannot be used if an opaque pixel also has that RGB color. */
; 3620 :       if(!profile->alpha_done && a == 65535 && profile->key
; 3621 :           && r == profile->key_r && g == profile->key_g && b == profile->key_b)
; 3622 :       {
; 3623 :           profile->alpha = 1;
; 3624 :           profile->alpha_done = 1;
; 3625 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3626 :       }
; 3627 : 
; 3628 :       if(!profile->greybits_done)
; 3629 :       {
; 3630 :         /*assuming 8-bit r, this test does not care about 16-bit*/
; 3631 :         unsigned bits = getValueRequiredBits(r);
; 3632 :         if(bits > profile->greybits) profile->greybits = bits;
; 3633 :         if(profile->greybits >= 8) profile->greybits_done = 1;
; 3634 :       }
; 3635 : 
; 3636 :       if(!profile->numcolors_done)
; 3637 :       {
; 3638 :         /*assuming 8-bit rgba, this test does not care about 16-bit*/
; 3639 :         if(!color_tree_has(&profile->tree, (unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a))
; 3640 :         {
; 3641 :           color_tree_add(&profile->tree, (unsigned char)r, (unsigned char)g, (unsigned char)b, (unsigned char)a,
; 3642 :             profile->numcolors);
; 3643 :           if(profile->numcolors < 256)
; 3644 :           {
; 3645 :             unsigned char* p = profile->palette;
; 3646 :             unsigned i = profile->numcolors;
; 3647 :             p[i * 4 + 0] = (unsigned char)r;
; 3648 :             p[i * 4 + 1] = (unsigned char)g;
; 3649 :             p[i * 4 + 2] = (unsigned char)b;
; 3650 :             p[i * 4 + 3] = (unsigned char)a;
; 3651 :           }
; 3652 :           profile->numcolors++;
; 3653 :           if(profile->numcolors >= profile->maxnumcolors) profile->numcolors_done = 1;
; 3654 :         }
; 3655 :       }
; 3656 : 
; 3657 :       if(profile->alpha_done && profile->numcolors_done
; 3658 :       && profile->colored_done && profile->sixteenbit_done && profile->greybits_done)
; 3659 :       {
; 3660 :         break;
; 3661 :       }
; 3662 :     };
; 3663 :   }
; 3664 :   else /* < 16-bit */
; 3665 :   {
; 3666 :     for(i = 0; i < numpixels; i++)
; 3667 :     {
; 3668 :       unsigned char r = 0, g = 0, b = 0, a = 0;
; 3669 :       error = getPixelColorRGBA8(&r, &g, &b, &a, in, i, mode, fix_png);
; 3670 :       if(error) break;
; 3671 : 
; 3672 :       if(!profile->colored_done && (r != g || r != b))
; 3673 :       {
; 3674 :         profile->colored = 1;
; 3675 :         profile->colored_done = 1;
; 3676 :         profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3677 :       }
; 3678 : 
; 3679 :       if(!profile->alpha_done && a != 255)
; 3680 :       {
; 3681 :         if(a == 0 && !(profile->key && (r != profile->key_r || g != profile->key_g || b != profile->key_b)))
; 3682 :         {
; 3683 :           if(!profile->key)
; 3684 :           {
; 3685 :             profile->key = 1;
; 3686 :             profile->key_r = r;
; 3687 :             profile->key_g = g;
; 3688 :             profile->key_b = b;
; 3689 :           }
; 3690 :         }
; 3691 :         else
; 3692 :         {
; 3693 :           profile->alpha = 1;
; 3694 :           profile->alpha_done = 1;
; 3695 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3696 :         }
; 3697 :       }
; 3698 : 
; 3699 :       /* Color key cannot be used if an opaque pixel also has that RGB color. */
; 3700 :       if(!profile->alpha_done && a == 255 && profile->key
; 3701 :           && r == profile->key_r && g == profile->key_g && b == profile->key_b)
; 3702 :       {
; 3703 :           profile->alpha = 1;
; 3704 :           profile->alpha_done = 1;
; 3705 :           profile->greybits_done = 1; /*greybits is not applicable anymore*/
; 3706 :       }
; 3707 : 
; 3708 :       if(!profile->greybits_done)
; 3709 :       {
; 3710 :         unsigned bits = getValueRequiredBits(r);
; 3711 :         if(bits > profile->greybits) profile->greybits = bits;
; 3712 :         if(profile->greybits >= 8) profile->greybits_done = 1;
; 3713 :       }
; 3714 : 
; 3715 :       if(!profile->numcolors_done)
; 3716 :       {
; 3717 :         if(!color_tree_has(&profile->tree, r, g, b, a))
; 3718 :         {
; 3719 : 
; 3720 :           color_tree_add(&profile->tree, r, g, b, a, profile->numcolors);
; 3721 :           if(profile->numcolors < 256)
; 3722 :           {
; 3723 :             unsigned char* p = profile->palette;
; 3724 :             unsigned i = profile->numcolors;
; 3725 :             p[i * 4 + 0] = r;
; 3726 :             p[i * 4 + 1] = g;
; 3727 :             p[i * 4 + 2] = b;
; 3728 :             p[i * 4 + 3] = a;
; 3729 :           }
; 3730 :           profile->numcolors++;
; 3731 :           if(profile->numcolors >= profile->maxnumcolors) profile->numcolors_done = 1;
; 3732 :         }
; 3733 :       }
; 3734 : 
; 3735 :       if(profile->alpha_done && profile->numcolors_done && profile->colored_done && profile->greybits_done)
; 3736 :       {
; 3737 :         break;
; 3738 :       }
; 3739 :     };
; 3740 :   }
; 3741 : 
; 3742 :   /*make the profile's key always 16-bit for consistency*/
; 3743 :   if(mode->bitdepth < 16)
; 3744 :   {
; 3745 :     /*repeat each byte twice*/
; 3746 :     profile->key_r *= 257;
; 3747 :     profile->key_g *= 257;
; 3748 :     profile->key_b *= 257;
; 3749 :   }
; 3750 : 
; 3751 :   return error;
; 3752 : }
; 3753 : 
; 3754 : static void setColorKeyFrom16bit(LodePNGColorMode* mode_out, unsigned r, unsigned g, unsigned b, unsigned bitdepth)
; 3755 : {
; 3756 :   unsigned mask = (1 << bitdepth) - 1;
; 3757 :   mode_out->key_defined = 1;
; 3758 :   mode_out->key_r = r & mask;
; 3759 :   mode_out->key_g = g & mask;
; 3760 :   mode_out->key_b = b & mask;
; 3761 : }
; 3762 : 
; 3763 : /*updates values of mode with a potentially smaller color model. mode_out should
; 3764 : contain the user chosen color model, but will be overwritten with the new chosen one.*/
; 3765 : unsigned lodepng_auto_choose_color(LodePNGColorMode* mode_out,
; 3766 :                                    const unsigned char* image, unsigned w, unsigned h,
; 3767 :                                    const LodePNGColorMode* mode_in,
; 3768 :                                    LodePNGAutoConvert auto_convert)
; 3769 : {
; 3770 :   ColorProfile profile;
; 3771 :   unsigned error = 0;
; 3772 :   int no_nibbles = auto_convert == LAC_AUTO_NO_NIBBLES || auto_convert == LAC_AUTO_NO_NIBBLES_NO_PALETTE;
; 3773 :   int no_palette = auto_convert == LAC_AUTO_NO_PALETTE || auto_convert == LAC_AUTO_NO_NIBBLES_NO_PALETTE;
; 3774 : 
; 3775 :   if(auto_convert == LAC_ALPHA)
; 3776 :   {
; 3777 :     if(mode_out->colortype != LCT_RGBA && mode_out->colortype != LCT_GREY_ALPHA) return 0;
; 3778 :   }
; 3779 : 
; 3780 :   color_profile_init(&profile, mode_in);
; 3781 :   if(auto_convert == LAC_ALPHA)
; 3782 :   {
; 3783 :     profile.colored_done = 1;
; 3784 :     profile.greybits_done = 1;
; 3785 :     profile.numcolors_done = 1;
; 3786 :     profile.sixteenbit_done = 1;
; 3787 :   }
; 3788 :   error = get_color_profile(&profile, image, w * h, mode_in, 0 /*fix_png*/);
; 3789 :   if(!error && auto_convert == LAC_ALPHA)
; 3790 :   {
; 3791 :     if(!profile.alpha)
; 3792 :     {
; 3793 :       mode_out->colortype = (mode_out->colortype == LCT_RGBA ? LCT_RGB : LCT_GREY);
; 3794 :       if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3795 :     }
; 3796 :   }
; 3797 :   else if(!error && auto_convert != LAC_ALPHA)
; 3798 :   {
; 3799 :     mode_out->key_defined = 0;
; 3800 : 
; 3801 :     if(profile.sixteenbit)
; 3802 :     {
; 3803 :       mode_out->bitdepth = 16;
; 3804 :       if(profile.alpha)
; 3805 :       {
; 3806 :         mode_out->colortype = profile.colored ? LCT_RGBA : LCT_GREY_ALPHA;
; 3807 :       }
; 3808 :       else
; 3809 :       {
; 3810 :         mode_out->colortype = profile.colored ? LCT_RGB : LCT_GREY;
; 3811 :         if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3812 :       }
; 3813 :     }
; 3814 :     else /*less than 16 bits per channel*/
; 3815 :     {
; 3816 :       /*don't add palette overhead if image hasn't got a lot of pixels*/
; 3817 :       unsigned n = profile.numcolors;
; 3818 :       int palette_ok = !no_palette && n <= 256 && (n * 2 < w * h);
; 3819 :       unsigned palettebits = n <= 2 ? 1 : (n <= 4 ? 2 : (n <= 16 ? 4 : 8));
; 3820 :       int grey_ok = !profile.colored && !profile.alpha; /*grey without alpha, with potentially low bits*/
; 3821 :       if(palette_ok || grey_ok)
; 3822 :       {
; 3823 :         if(!palette_ok || (grey_ok && profile.greybits <= palettebits))
; 3824 :         {
; 3825 :           unsigned grey = profile.key_r;
; 3826 :           mode_out->colortype = LCT_GREY;
; 3827 :           mode_out->bitdepth = profile.greybits;
; 3828 :           if(profile.key) setColorKeyFrom16bit(mode_out, grey, grey, grey, mode_out->bitdepth);
; 3829 :         }
; 3830 :         else
; 3831 :         {
; 3832 :           /*fill in the palette*/
; 3833 :           unsigned i;
; 3834 :           unsigned char* p = profile.palette;
; 3835 :           /*remove potential earlier palette*/
; 3836 :           lodepng_palette_clear(mode_out);
; 3837 :           for(i = 0; i < profile.numcolors; i++)
; 3838 :           {
; 3839 :             error = lodepng_palette_add(mode_out, p[i * 4 + 0], p[i * 4 + 1], p[i * 4 + 2], p[i * 4 + 3]);
; 3840 :             if(error) break;
; 3841 :           }
; 3842 : 
; 3843 :           mode_out->colortype = LCT_PALETTE;
; 3844 :           mode_out->bitdepth = palettebits;
; 3845 :         }
; 3846 :       }
; 3847 :       else /*8-bit per channel*/
; 3848 :       {
; 3849 :         mode_out->bitdepth = 8;
; 3850 :         if(profile.alpha)
; 3851 :         {
; 3852 :           mode_out->colortype = profile.colored ? LCT_RGBA : LCT_GREY_ALPHA;
; 3853 :         }
; 3854 :         else
; 3855 :         {
; 3856 :           mode_out->colortype = profile.colored ? LCT_RGB : LCT_GREY /*LCT_GREY normally won't occur, already done earlier*/;
; 3857 :           if(profile.key) setColorKeyFrom16bit(mode_out, profile.key_r, profile.key_g, profile.key_b, mode_out->bitdepth);
; 3858 :         }
; 3859 :       }
; 3860 :     }
; 3861 :   }
; 3862 : 
; 3863 :   color_profile_cleanup(&profile);
; 3864 : 
; 3865 :   if(mode_out->colortype == LCT_PALETTE && mode_in->palettesize == mode_out->palettesize)
; 3866 :   {
; 3867 :     /*In this case keep the palette order of the input, so that the user can choose an optimal one*/
; 3868 :     size_t i;
; 3869 :     for(i = 0; i < mode_in->palettesize * 4; i++)
; 3870 :     {
; 3871 :       mode_out->palette[i] = mode_in->palette[i];
; 3872 :     }
; 3873 :   }
; 3874 : 
; 3875 :   if(no_nibbles && mode_out->bitdepth < 8)
; 3876 :   {
; 3877 :     /*palette can keep its small amount of colors, as long as no indices use it*/
; 3878 :     mode_out->bitdepth = 8;
; 3879 :   }
; 3880 : 
; 3881 :   return error;
; 3882 : }
; 3883 : 
; 3884 : #endif /* #ifdef LODEPNG_COMPILE_ENCODER */
; 3885 : 
; 3886 : /*
; 3887 : Paeth predicter, used by PNG filter type 4
; 3888 : The parameters are of type short, but should come from unsigned chars, the shorts
; 3889 : are only needed to make the paeth calculation correct.
; 3890 : */
; 3891 : static unsigned char paethPredictor(short a, short b, short c)
; 3892 : {
; 3893 :   short pa = abs(b - c);
; 3894 :   short pb = abs(a - c);
; 3895 :   short pc = abs(a + b - c - c);
; 3896 : 
; 3897 :   if(pc < pa && pc < pb) return (unsigned char)c;
; 3898 :   else if(pb < pa) return (unsigned char)b;
; 3899 :   else return (unsigned char)a;
; 3900 : }
; 3901 : 
; 3902 : /*shared values used by multiple Adam7 related functions*/
; 3903 : 
; 3904 : static const unsigned ADAM7_IX[7] = { 0, 4, 0, 2, 0, 1, 0 }; /*x start values*/
; 3905 : static const unsigned ADAM7_IY[7] = { 0, 0, 4, 0, 2, 0, 1 }; /*y start values*/
; 3906 : static const unsigned ADAM7_DX[7] = { 8, 8, 4, 4, 2, 2, 1 }; /*x delta values*/
; 3907 : static const unsigned ADAM7_DY[7] = { 8, 8, 8, 4, 4, 2, 2 }; /*y delta values*/
; 3908 : 
; 3909 : /*
; 3910 : Outputs various dimensions and positions in the image related to the Adam7 reduced images.
; 3911 : passw: output containing the width of the 7 passes
; 3912 : passh: output containing the height of the 7 passes
; 3913 : filter_passstart: output containing the index of the start and end of each
; 3914 :  reduced image with filter bytes
; 3915 : padded_passstart output containing the index of the start and end of each
; 3916 :  reduced image when without filter bytes but with padded scanlines
; 3917 : passstart: output containing the index of the start and end of each reduced
; 3918 :  image without padding between scanlines, but still padding between the images
; 3919 : w, h: width and height of non-interlaced image
; 3920 : bpp: bits per pixel
; 3921 : "padded" is only relevant if bpp is less than 8 and a scanline or image does not
; 3922 :  end at a full byte
; 3923 : */
; 3924 : static void Adam7_getpassvalues(unsigned passw[7], unsigned passh[7], size_t filter_passstart[8],
; 3925 :                                 size_t padded_passstart[8], size_t passstart[8], unsigned w, unsigned h, unsigned bpp)
; 3926 : {
; 3927 :   /*the passstart values have 8 values: the 8th one indicates the byte after the end of the 7th (= last) pass*/
; 3928 :   unsigned i;
; 3929 : 
; 3930 :   /*calculate width and height in pixels of each pass*/
; 3931 :   for(i = 0; i < 7; i++)
; 3932 :   {
; 3933 :     passw[i] = (w + ADAM7_DX[i] - ADAM7_IX[i] - 1) / ADAM7_DX[i];
; 3934 :     passh[i] = (h + ADAM7_DY[i] - ADAM7_IY[i] - 1) / ADAM7_DY[i];
; 3935 :     if(passw[i] == 0) passh[i] = 0;
; 3936 :     if(passh[i] == 0) passw[i] = 0;
; 3937 :   }
; 3938 : 
; 3939 :   filter_passstart[0] = padded_passstart[0] = passstart[0] = 0;
; 3940 :   for(i = 0; i < 7; i++)
; 3941 :   {
; 3942 :     /*if passw[i] is 0, it's 0 bytes, not 1 (no filtertype-byte)*/
; 3943 :     filter_passstart[i + 1] = filter_passstart[i]
; 3944 :                             + ((passw[i] && passh[i]) ? passh[i] * (1 + (passw[i] * bpp + 7) / 8) : 0);
; 3945 :     /*bits padded if needed to fill full byte at end of each scanline*/
; 3946 :     padded_passstart[i + 1] = padded_passstart[i] + passh[i] * ((passw[i] * bpp + 7) / 8);
; 3947 :     /*only padded at end of reduced image*/
; 3948 :     passstart[i + 1] = passstart[i] + (passh[i] * passw[i] * bpp + 7) / 8;
; 3949 :   }
; 3950 : }
; 3951 : 
; 3952 : #ifdef LODEPNG_COMPILE_DECODER
; 3953 : 
; 3954 : /* ////////////////////////////////////////////////////////////////////////// */
; 3955 : /* / PNG Decoder                                                            / */
; 3956 : /* ////////////////////////////////////////////////////////////////////////// */
; 3957 : 
; 3958 : /*read the information from the header and store it in the LodePNGInfo. return value is error*/
; 3959 : unsigned lodepng_inspect(unsigned* w, unsigned* h, LodePNGState* state,
; 3960 :                          const unsigned char* in, size_t insize)
; 3961 : {
; 3962 :   LodePNGInfo* info = &state->info_png;
; 3963 :   if(insize == 0 || in == 0)
; 3964 :   {
; 3965 :     CERROR_RETURN_ERROR(state->error, 48); /*error: the given data is empty*/
; 3966 :   }
; 3967 :   if(insize < 29)
; 3968 :   {
; 3969 :     CERROR_RETURN_ERROR(state->error, 27); /*error: the data length is smaller than the length of a PNG header*/
; 3970 :   }
; 3971 : 
; 3972 :   /*when decoding a new PNG image, make sure all parameters created after previous decoding are reset*/
; 3973 :   lodepng_info_cleanup(info);
; 3974 :   lodepng_info_init(info);
; 3975 : 
; 3976 :   if(in[0] != 137 || in[1] != 80 || in[2] != 78 || in[3] != 71
; 3977 :      || in[4] != 13 || in[5] != 10 || in[6] != 26 || in[7] != 10)
; 3978 :   {
; 3979 :     CERROR_RETURN_ERROR(state->error, 28); /*error: the first 8 bytes are not the correct PNG signature*/
; 3980 :   }
; 3981 :   if(in[12] != 'I' || in[13] != 'H' || in[14] != 'D' || in[15] != 'R')
; 3982 :   {
; 3983 :     CERROR_RETURN_ERROR(state->error, 29); /*error: it doesn't start with a IHDR chunk!*/
; 3984 :   }
; 3985 : 
; 3986 :   /*read the values given in the header*/
; 3987 :   *w = lodepng_read32bitInt(&in[16]);
; 3988 :   *h = lodepng_read32bitInt(&in[20]);
; 3989 :   info->color.bitdepth = in[24];
; 3990 :   info->color.colortype = (LodePNGColorType)in[25];
; 3991 :   info->compression_method = in[26];
; 3992 :   info->filter_method = in[27];
; 3993 :   info->interlace_method = in[28];
; 3994 : 
; 3995 :   if(!state->decoder.ignore_crc)
; 3996 :   {
; 3997 :     unsigned CRC = lodepng_read32bitInt(&in[29]);
; 3998 :     unsigned checksum = lodepng_crc32(&in[12], 17);
; 3999 :     if(CRC != checksum)
; 4000 :     {
; 4001 :       CERROR_RETURN_ERROR(state->error, 57); /*invalid CRC*/
; 4002 :     }
; 4003 :   }
; 4004 : 
; 4005 :   /*error: only compression method 0 is allowed in the specification*/
; 4006 :   if(info->compression_method != 0) CERROR_RETURN_ERROR(state->error, 32);
; 4007 :   /*error: only filter method 0 is allowed in the specification*/
; 4008 :   if(info->filter_method != 0) CERROR_RETURN_ERROR(state->error, 33);
; 4009 :   /*error: only interlace methods 0 and 1 exist in the specification*/
; 4010 :   if(info->interlace_method > 1) CERROR_RETURN_ERROR(state->error, 34);
; 4011 : 
; 4012 :   state->error = checkColorValidity(info->color.colortype, info->color.bitdepth);
; 4013 :   return state->error;
; 4014 : }
; 4015 : 
; 4016 : static unsigned unfilterScanline(unsigned char* recon, const unsigned char* scanline, const unsigned char* precon,
; 4017 :                                  size_t bytewidth, unsigned char filterType, size_t length)
; 4018 : {
; 4019 :   /*
; 4020 :   For PNG filter method 0
; 4021 :   unfilter a PNG image scanline by scanline. when the pixels are smaller than 1 byte,
; 4022 :   the filter works byte per byte (bytewidth = 1)
; 4023 :   precon is the previous unfiltered scanline, recon the result, scanline the current one
; 4024 :   the incoming scanlines do NOT include the filtertype byte, that one is given in the parameter filterType instead
; 4025 :   recon and scanline MAY be the same memory address! precon must be disjoint.
; 4026 :   */
; 4027 : 
; 4028 :   size_t i;
; 4029 :   switch(filterType)
; 4030 :   {
; 4031 :     case 0:
; 4032 :       for(i = 0; i < length; i++) recon[i] = scanline[i];
; 4033 :       break;
; 4034 :     case 1:
; 4035 :       for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];
; 4036 :       for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth];
; 4037 :       break;
; 4038 :     case 2:
; 4039 :       if(precon)
; 4040 :       {
; 4041 :         for(i = 0; i < length; i++) recon[i] = scanline[i] + precon[i];
; 4042 :       }
; 4043 :       else
; 4044 :       {
; 4045 :         for(i = 0; i < length; i++) recon[i] = scanline[i];
; 4046 :       }
; 4047 :       break;
; 4048 :     case 3:
; 4049 :       if(precon)
; 4050 :       {
; 4051 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i] + precon[i] / 2;
; 4052 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + ((recon[i - bytewidth] + precon[i]) / 2);
; 4053 :       }
; 4054 :       else
; 4055 :       {
; 4056 :         for(i = 0; i < bytewidth; i++) recon[i] = scanline[i];
; 4057 :         for(i = bytewidth; i < length; i++) recon[i] = scanline[i] + recon[i - bytewidth] / 2;
; 4058 :       }
; 4059 :       break;
; 4060 :     case 4:
; 4061 :       if(precon)
; 4062 :       {
; 4063 :         for(i = 0; i < bytewidth; i++)
; 4064 :         {
; 4065 :           recon[i] = (scanline[i] + precon[i]); /*paethPredictor(0, precon[i], 0) is always precon[i]*/
; 4066 :         }
; 4067 :         for(i = bytewidth; i < length; i++)
; 4068 :         {
; 4069 :           recon[i] = (scanline[i] + paethPredictor(recon[i - bytewidth], precon[i], precon[i - bytewidth]));
; 4070 :         }
; 4071 :       }
; 4072 :       else
; 4073 :       {
; 4074 :         for(i = 0; i < bytewidth; i++)
; 4075 :         {
; 4076 :           recon[i] = scanline[i];
; 4077 :         }
; 4078 :         for(i = bytewidth; i < length; i++)
; 4079 :         {
; 4080 :           /*paethPredictor(recon[i - bytewidth], 0, 0) is always recon[i - bytewidth]*/
; 4081 :           recon[i] = (scanline[i] + recon[i - bytewidth]);
; 4082 :         }
; 4083 :       }
; 4084 :       break;
; 4085 :     default: return 36; /*error: unexisting filter type given*/
; 4086 :   }
; 4087 :   return 0;
; 4088 : }
; 4089 : 
; 4090 : static unsigned unfilter(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
; 4091 : {
; 4092 :   /*
; 4093 :   For PNG filter method 0
; 4094 :   this function unfilters a single image (e.g. without interlacing this is called once, with Adam7 seven times)
; 4095 :   out must have enough bytes allocated already, in must have the scanlines + 1 filtertype byte per scanline
; 4096 :   w and h are image dimensions or dimensions of reduced image, bpp is bits per pixel
; 4097 :   in and out are allowed to be the same memory address (but aren't the same size since in has the extra filter bytes)
; 4098 :   */
; 4099 : 
; 4100 :   unsigned y;
; 4101 :   unsigned char* prevline = 0;
; 4102 : 
; 4103 :   /*bytewidth is used for filtering, is 1 when bpp < 8, number of bytes per pixel otherwise*/
; 4104 :   size_t bytewidth = (bpp + 7) / 8;
; 4105 :   size_t linebytes = (w * bpp + 7) / 8;
; 4106 : 
; 4107 :   for(y = 0; y < h; y++)
; 4108 :   {
; 4109 :     size_t outindex = linebytes * y;
; 4110 :     size_t inindex = (1 + linebytes) * y; /*the extra filterbyte added to each row*/
; 4111 :     unsigned char filterType = in[inindex];
; 4112 : 
; 4113 :     CERROR_TRY_RETURN(unfilterScanline(&out[outindex], &in[inindex + 1], prevline, bytewidth, filterType, linebytes));
; 4114 : 
; 4115 :     prevline = &out[outindex];
; 4116 :   }
; 4117 : 
; 4118 :   return 0;
; 4119 : }
; 4120 : 
; 4121 : /*
; 4122 : in: Adam7 interlaced image, with no padding bits between scanlines, but between
; 4123 :  reduced images so that each reduced image starts at a byte.
; 4124 : out: the same pixels, but re-ordered so that they're now a non-interlaced image with size w*h
; 4125 : bpp: bits per pixel
; 4126 : out has the following size in bits: w * h * bpp.
; 4127 : in is possibly bigger due to padding bits between reduced images.
; 4128 : out must be big enough AND must be 0 everywhere if bpp < 8 in the current implementation
; 4129 : (because that's likely a little bit faster)
; 4130 : NOTE: comments about padding bits are only relevant if bpp < 8
; 4131 : */
; 4132 : static void Adam7_deinterlace(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)
; 4133 : {
; 4134 :   unsigned passw[7], passh[7];
; 4135 :   size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4136 :   unsigned i;
; 4137 : 
; 4138 :   Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 4139 : 
; 4140 :   if(bpp >= 8)
; 4141 :   {
; 4142 :     for(i = 0; i < 7; i++)
; 4143 :     {
; 4144 :       unsigned x, y, b;
; 4145 :       size_t bytewidth = bpp / 8;
; 4146 :       for(y = 0; y < passh[i]; y++)
; 4147 :       for(x = 0; x < passw[i]; x++)
; 4148 :       {
; 4149 :         size_t pixelinstart = passstart[i] + (y * passw[i] + x) * bytewidth;
; 4150 :         size_t pixeloutstart = ((ADAM7_IY[i] + y * ADAM7_DY[i]) * w + ADAM7_IX[i] + x * ADAM7_DX[i]) * bytewidth;
; 4151 :         for(b = 0; b < bytewidth; b++)
; 4152 :         {
; 4153 :           out[pixeloutstart + b] = in[pixelinstart + b];
; 4154 :         }
; 4155 :       }
; 4156 :     }
; 4157 :   }
; 4158 :   else /*bpp < 8: Adam7 with pixels < 8 bit is a bit trickier: with bit pointers*/
; 4159 :   {
; 4160 :     for(i = 0; i < 7; i++)
; 4161 :     {
; 4162 :       unsigned x, y, b;
; 4163 :       unsigned ilinebits = bpp * passw[i];
; 4164 :       unsigned olinebits = bpp * w;
; 4165 :       size_t obp, ibp; /*bit pointers (for out and in buffer)*/
; 4166 :       for(y = 0; y < passh[i]; y++)
; 4167 :       for(x = 0; x < passw[i]; x++)
; 4168 :       {
; 4169 :         ibp = (8 * passstart[i]) + (y * ilinebits + x * bpp);
; 4170 :         obp = (ADAM7_IY[i] + y * ADAM7_DY[i]) * olinebits + (ADAM7_IX[i] + x * ADAM7_DX[i]) * bpp;
; 4171 :         for(b = 0; b < bpp; b++)
; 4172 :         {
; 4173 :           unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4174 :           /*note that this function assumes the out buffer is completely 0, use setBitOfReversedStream otherwise*/
; 4175 :           setBitOfReversedStream0(&obp, out, bit);
; 4176 :         }
; 4177 :       }
; 4178 :     }
; 4179 :   }
; 4180 : }
; 4181 : 
; 4182 : static void removePaddingBits(unsigned char* out, const unsigned char* in,
; 4183 :                               size_t olinebits, size_t ilinebits, unsigned h)
; 4184 : {
; 4185 :   /*
; 4186 :   After filtering there are still padding bits if scanlines have non multiple of 8 bit amounts. They need
; 4187 :   to be removed (except at last scanline of (Adam7-reduced) image) before working with pure image buffers
; 4188 :   for the Adam7 code, the color convert code and the output to the user.
; 4189 :   in and out are allowed to be the same buffer, in may also be higher but still overlapping; in must
; 4190 :   have >= ilinebits*h bits, out must have >= olinebits*h bits, olinebits must be <= ilinebits
; 4191 :   also used to move bits after earlier such operations happened, e.g. in a sequence of reduced images from Adam7
; 4192 :   only useful if (ilinebits - olinebits) is a value in the range 1..7
; 4193 :   */
; 4194 :   unsigned y;
; 4195 :   size_t diff = ilinebits - olinebits;
; 4196 :   size_t ibp = 0, obp = 0; /*input and output bit pointers*/
; 4197 :   for(y = 0; y < h; y++)
; 4198 :   {
; 4199 :     size_t x;
; 4200 :     for(x = 0; x < olinebits; x++)
; 4201 :     {
; 4202 :       unsigned char bit = readBitFromReversedStream(&ibp, in);
; 4203 :       setBitOfReversedStream(&obp, out, bit);
; 4204 :     }
; 4205 :     ibp += diff;
; 4206 :   }
; 4207 : }
; 4208 : 
; 4209 : /*out must be buffer big enough to contain full image, and in must contain the full decompressed data from
; 4210 : the IDAT chunks (with filter index bytes and possible padding bits)
; 4211 : return value is error*/
; 4212 : static unsigned postProcessScanlines(unsigned char* out, unsigned char* in,
; 4213 :                                      unsigned w, unsigned h, const LodePNGInfo* info_png)
; 4214 : {
; 4215 :   /*
; 4216 :   This function converts the filtered-padded-interlaced data into pure 2D image buffer with the PNG's colortype.
; 4217 :   Steps:
; 4218 :   *) if no Adam7: 1) unfilter 2) remove padding bits (= posible extra bits per scanline if bpp < 8)
; 4219 :   *) if adam7: 1) 7x unfilter 2) 7x remove padding bits 3) Adam7_deinterlace
; 4220 :   NOTE: the in buffer will be overwritten with intermediate data!
; 4221 :   */
; 4222 :   unsigned bpp = lodepng_get_bpp(&info_png->color);
; 4223 :   if(bpp == 0) return 31; /*error: invalid colortype*/
; 4224 : 
; 4225 :   if(info_png->interlace_method == 0)
; 4226 :   {
; 4227 :     if(bpp < 8 && w * bpp != ((w * bpp + 7) / 8) * 8)
; 4228 :     {
; 4229 :       CERROR_TRY_RETURN(unfilter(in, in, w, h, bpp));
; 4230 :       removePaddingBits(out, in, w * bpp, ((w * bpp + 7) / 8) * 8, h);
; 4231 :     }
; 4232 :     /*we can immediatly filter into the out buffer, no other steps needed*/
; 4233 :     else CERROR_TRY_RETURN(unfilter(out, in, w, h, bpp));
; 4234 :   }
; 4235 :   else /*interlace_method is 1 (Adam7)*/
; 4236 :   {
; 4237 :     unsigned passw[7], passh[7]; size_t filter_passstart[8], padded_passstart[8], passstart[8];
; 4238 :     unsigned i;
; 4239 : 
; 4240 :     Adam7_getpassvalues(passw, passh, filter_passstart, padded_passstart, passstart, w, h, bpp);
; 4241 : 
; 4242 :     for(i = 0; i < 7; i++)
; 4243 :     {
; 4244 :       CERROR_TRY_RETURN(unfilter(&in[padded_passstart[i]], &in[filter_passstart[i]], passw[i], passh[i], bpp));
; 4245 :       /*TODO: possible efficiency improvement: if in this reduced image the bits fit nicely in 1 scanline,
; 4246 :       move bytes instead of bits or move not at all*/
; 4247 :       if(bpp < 8)
; 4248 :       {
; 4249 :         /*remove padding bits in scanlines; after this there still may be padding
; 4250 :         bits between the different reduced images: each reduced image still starts nicely at a byte*/
; 4251 :         removePaddingBits(&in[passstart[i]], &in[padded_passstart[i]], passw[i] * bpp,
; 4252 :                           ((passw[i] * bpp + 7) / 8) * 8, passh[i]);
; 4253 :       }
; 4254 :     }
; 4255 : 
; 4256 :     Adam7_deinterlace(out, in, w, h, bpp);
; 4257 :   }
; 4258 : 
; 4259 :   return 0;
; 4260 : }
; 4261 : 
; 4262 : static unsigned readChunk_PLTE(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
; 4263 : {
; 4264 :   unsigned pos = 0, i;
; 4265 :   if(color->palette) lodepng_free(color->palette);
; 4266 :   color->palettesize = chunkLength / 3;
; 4267 :   color->palette = (unsigned char*)lodepng_malloc(4 * color->palettesize);
; 4268 :   if(!color->palette && color->palettesize)
; 4269 :   {
; 4270 :     color->palettesize = 0;
; 4271 :     return 83; /*alloc fail*/
; 4272 :   }
; 4273 :   if(color->palettesize > 256) return 38; /*error: palette too big*/
; 4274 : 
; 4275 :   for(i = 0; i < color->palettesize; i++)
; 4276 :   {
; 4277 :     color->palette[4 * i + 0] = data[pos++]; /*R*/
; 4278 :     color->palette[4 * i + 1] = data[pos++]; /*G*/
; 4279 :     color->palette[4 * i + 2] = data[pos++]; /*B*/
; 4280 :     color->palette[4 * i + 3] = 255; /*alpha*/
; 4281 :   }
; 4282 : 
; 4283 :   return 0; /* OK */
; 4284 : }
; 4285 : 
; 4286 : static unsigned readChunk_tRNS(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)
; 4287 : {
; 4288 :   unsigned i;
; 4289 :   if(color->colortype == LCT_PALETTE)
; 4290 :   {
; 4291 :     /*error: more alpha values given than there are palette entries*/
; 4292 :     if(chunkLength > color->palettesize) return 38;
; 4293 : 
; 4294 :     for(i = 0; i < chunkLength; i++) color->palette[4 * i + 3] = data[i];
; 4295 :   }
; 4296 :   else if(color->colortype == LCT_GREY)
; 4297 :   {
; 4298 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4299 :     if(chunkLength != 2) return 30;
; 4300 : 
; 4301 :     color->key_defined = 1;
; 4302 :     color->key_r = color->key_g = color->key_b = 256 * data[0] + data[1];
; 4303 :   }
; 4304 :   else if(color->colortype == LCT_RGB)
; 4305 :   {
; 4306 :     /*error: this chunk must be 6 bytes for RGB image*/
; 4307 :     if(chunkLength != 6) return 41;
; 4308 : 
; 4309 :     color->key_defined = 1;
; 4310 :     color->key_r = 256 * data[0] + data[1];
; 4311 :     color->key_g = 256 * data[2] + data[3];
; 4312 :     color->key_b = 256 * data[4] + data[5];
; 4313 :   }
; 4314 :   else return 42; /*error: tRNS chunk not allowed for other color models*/
; 4315 : 
; 4316 :   return 0; /* OK */
; 4317 : }
; 4318 : 
; 4319 : 
; 4320 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4321 : /*background color chunk (bKGD)*/
; 4322 : static unsigned readChunk_bKGD(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4323 : {
; 4324 :   if(info->color.colortype == LCT_PALETTE)
; 4325 :   {
; 4326 :     /*error: this chunk must be 1 byte for indexed color image*/
; 4327 :     if(chunkLength != 1) return 43;
; 4328 : 
; 4329 :     info->background_defined = 1;
; 4330 :     info->background_r = info->background_g = info->background_b = data[0];
; 4331 :   }
; 4332 :   else if(info->color.colortype == LCT_GREY || info->color.colortype == LCT_GREY_ALPHA)
; 4333 :   {
; 4334 :     /*error: this chunk must be 2 bytes for greyscale image*/
; 4335 :     if(chunkLength != 2) return 44;
; 4336 : 
; 4337 :     info->background_defined = 1;
; 4338 :     info->background_r = info->background_g = info->background_b
; 4339 :                                  = 256 * data[0] + data[1];
; 4340 :   }
; 4341 :   else if(info->color.colortype == LCT_RGB || info->color.colortype == LCT_RGBA)
; 4342 :   {
; 4343 :     /*error: this chunk must be 6 bytes for greyscale image*/
; 4344 :     if(chunkLength != 6) return 45;
; 4345 : 
; 4346 :     info->background_defined = 1;
; 4347 :     info->background_r = 256 * data[0] + data[1];
; 4348 :     info->background_g = 256 * data[2] + data[3];
; 4349 :     info->background_b = 256 * data[4] + data[5];
; 4350 :   }
; 4351 : 
; 4352 :   return 0; /* OK */
; 4353 : }
; 4354 : 
; 4355 : /*text chunk (tEXt)*/
; 4356 : static unsigned readChunk_tEXt(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4357 : {
; 4358 :   unsigned error = 0;
; 4359 :   char *key = 0, *str = 0;
; 4360 :   unsigned i;
; 4361 : 
; 4362 :   while(!error) /*not really a while loop, only used to break on error*/
; 4363 :   {
; 4364 :     unsigned length, string2_begin;
; 4365 : 
; 4366 :     length = 0;
; 4367 :     while(length < chunkLength && data[length] != 0) length++;
; 4368 :     /*even though it's not allowed by the standard, no error is thrown if
; 4369 :     there's no null termination char, if the text is empty*/
; 4370 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4371 : 
; 4372 :     key = (char*)lodepng_malloc(length + 1);
; 4373 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4374 : 
; 4375 :     key[length] = 0;
; 4376 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4377 : 
; 4378 :     string2_begin = length + 1; /*skip keyword null terminator*/
; 4379 : 
; 4380 :     length = chunkLength < string2_begin ? 0 : chunkLength - string2_begin;
; 4381 :     str = (char*)lodepng_malloc(length + 1);
; 4382 :     if(!str) CERROR_BREAK(error, 83); /*alloc fail*/
; 4383 : 
; 4384 :     str[length] = 0;
; 4385 :     for(i = 0; i < length; i++) str[i] = data[string2_begin + i];
; 4386 : 
; 4387 :     error = lodepng_add_text(info, key, str);
; 4388 : 
; 4389 :     break;
; 4390 :   }
; 4391 : 
; 4392 :   lodepng_free(key);
; 4393 :   lodepng_free(str);
; 4394 : 
; 4395 :   return error;
; 4396 : }
; 4397 : 
; 4398 : /*compressed text chunk (zTXt)*/
; 4399 : static unsigned readChunk_zTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
; 4400 :                                const unsigned char* data, size_t chunkLength)
; 4401 : {
; 4402 :   unsigned error = 0;
; 4403 :   unsigned i;
; 4404 : 
; 4405 :   unsigned length, string2_begin;
; 4406 :   char *key = 0;
; 4407 :   ucvector decoded;
; 4408 : 
; 4409 :   ucvector_init(&decoded);
; 4410 : 
; 4411 :   while(!error) /*not really a while loop, only used to break on error*/
; 4412 :   {
; 4413 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;
; 4414 :     if(length + 2 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
; 4415 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4416 : 
; 4417 :     key = (char*)lodepng_malloc(length + 1);
; 4418 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4419 : 
; 4420 :     key[length] = 0;
; 4421 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4422 : 
; 4423 :     if(data[length + 1] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
; 4424 : 
; 4425 :     string2_begin = length + 2;
; 4426 :     if(string2_begin > chunkLength) CERROR_BREAK(error, 75); /*no null termination, corrupt?*/
; 4427 : 
; 4428 :     length = chunkLength - string2_begin;
; 4429 :     /*will fail if zlib error, e.g. if length is too small*/
; 4430 :     error = zlib_decompress(&decoded.data, &decoded.size,
; 4431 :                             (unsigned char*)(&data[string2_begin]),
; 4432 :                             length, zlibsettings);
; 4433 :     if(error) break;
; 4434 :     ucvector_push_back(&decoded, 0);
; 4435 : 
; 4436 :     error = lodepng_add_text(info, key, (char*)decoded.data);
; 4437 : 
; 4438 :     break;
; 4439 :   }
; 4440 : 
; 4441 :   lodepng_free(key);
; 4442 :   ucvector_cleanup(&decoded);
; 4443 : 
; 4444 :   return error;
; 4445 : }
; 4446 : 
; 4447 : /*international text chunk (iTXt)*/
; 4448 : static unsigned readChunk_iTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,
; 4449 :                                const unsigned char* data, size_t chunkLength)
; 4450 : {
; 4451 :   unsigned error = 0;
; 4452 :   unsigned i;
; 4453 : 
; 4454 :   unsigned length, begin, compressed;
; 4455 :   char *key = 0, *langtag = 0, *transkey = 0;
; 4456 :   ucvector decoded;
; 4457 :   ucvector_init(&decoded);
; 4458 : 
; 4459 :   while(!error) /*not really a while loop, only used to break on error*/
; 4460 :   {
; 4461 :     /*Quick check if the chunk length isn't too small. Even without check
; 4462 :     it'd still fail with other error checks below if it's too short. This just gives a different error code.*/
; 4463 :     if(chunkLength < 5) CERROR_BREAK(error, 30); /*iTXt chunk too short*/
; 4464 : 
; 4465 :     /*read the key*/
; 4466 :     for(length = 0; length < chunkLength && data[length] != 0; length++) ;
; 4467 :     if(length + 3 >= chunkLength) CERROR_BREAK(error, 75); /*no null termination char, corrupt?*/
; 4468 :     if(length < 1 || length > 79) CERROR_BREAK(error, 89); /*keyword too short or long*/
; 4469 : 
; 4470 :     key = (char*)lodepng_malloc(length + 1);
; 4471 :     if(!key) CERROR_BREAK(error, 83); /*alloc fail*/
; 4472 : 
; 4473 :     key[length] = 0;
; 4474 :     for(i = 0; i < length; i++) key[i] = data[i];
; 4475 : 
; 4476 :     /*read the compression method*/
; 4477 :     compressed = data[length + 1];
; 4478 :     if(data[length + 2] != 0) CERROR_BREAK(error, 72); /*the 0 byte indicating compression must be 0*/
; 4479 : 
; 4480 :     /*even though it's not allowed by the standard, no error is thrown if
; 4481 :     there's no null termination char, if the text is empty for the next 3 texts*/
; 4482 : 
; 4483 :     /*read the langtag*/
; 4484 :     begin = length + 3;
; 4485 :     length = 0;
; 4486 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;
; 4487 : 
; 4488 :     langtag = (char*)lodepng_malloc(length + 1);
; 4489 :     if(!langtag) CERROR_BREAK(error, 83); /*alloc fail*/
; 4490 : 
; 4491 :     langtag[length] = 0;
; 4492 :     for(i = 0; i < length; i++) langtag[i] = data[begin + i];
; 4493 : 
; 4494 :     /*read the transkey*/
; 4495 :     begin += length + 1;
; 4496 :     length = 0;
; 4497 :     for(i = begin; i < chunkLength && data[i] != 0; i++) length++;
; 4498 : 
; 4499 :     transkey = (char*)lodepng_malloc(length + 1);
; 4500 :     if(!transkey) CERROR_BREAK(error, 83); /*alloc fail*/
; 4501 : 
; 4502 :     transkey[length] = 0;
; 4503 :     for(i = 0; i < length; i++) transkey[i] = data[begin + i];
; 4504 : 
; 4505 :     /*read the actual text*/
; 4506 :     begin += length + 1;
; 4507 : 
; 4508 :     length = chunkLength < begin ? 0 : chunkLength - begin;
; 4509 : 
; 4510 :     if(compressed)
; 4511 :     {
; 4512 :       /*will fail if zlib error, e.g. if length is too small*/
; 4513 :       error = zlib_decompress(&decoded.data, &decoded.size,
; 4514 :                               (unsigned char*)(&data[begin]),
; 4515 :                               length, zlibsettings);
; 4516 :       if(error) break;
; 4517 :       if(decoded.allocsize < decoded.size) decoded.allocsize = decoded.size;
; 4518 :       ucvector_push_back(&decoded, 0);
; 4519 :     }
; 4520 :     else
; 4521 :     {
; 4522 :       if(!ucvector_resize(&decoded, length + 1)) CERROR_BREAK(error, 83 /*alloc fail*/);
; 4523 : 
; 4524 :       decoded.data[length] = 0;
; 4525 :       for(i = 0; i < length; i++) decoded.data[i] = data[begin + i];
; 4526 :     }
; 4527 : 
; 4528 :     error = lodepng_add_itext(info, key, langtag, transkey, (char*)decoded.data);
; 4529 : 
; 4530 :     break;
; 4531 :   }
; 4532 : 
; 4533 :   lodepng_free(key);
; 4534 :   lodepng_free(langtag);
; 4535 :   lodepng_free(transkey);
; 4536 :   ucvector_cleanup(&decoded);
; 4537 : 
; 4538 :   return error;
; 4539 : }
; 4540 : 
; 4541 : static unsigned readChunk_tIME(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4542 : {
; 4543 :   if(chunkLength != 7) return 73; /*invalid tIME chunk size*/
; 4544 : 
; 4545 :   info->time_defined = 1;
; 4546 :   info->time.year = 256 * data[0] + data[+ 1];
; 4547 :   info->time.month = data[2];
; 4548 :   info->time.day = data[3];
; 4549 :   info->time.hour = data[4];
; 4550 :   info->time.minute = data[5];
; 4551 :   info->time.second = data[6];
; 4552 : 
; 4553 :   return 0; /* OK */
; 4554 : }
; 4555 : 
; 4556 : static unsigned readChunk_pHYs(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)
; 4557 : {
; 4558 :   if(chunkLength != 9) return 74; /*invalid pHYs chunk size*/
; 4559 : 
; 4560 :   info->phys_defined = 1;
; 4561 :   info->phys_x = 16777216 * data[0] + 65536 * data[1] + 256 * data[2] + data[3];
; 4562 :   info->phys_y = 16777216 * data[4] + 65536 * data[5] + 256 * data[6] + data[7];
; 4563 :   info->phys_unit = data[8];
; 4564 : 
; 4565 :   return 0; /* OK */
; 4566 : }
; 4567 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4568 : 
; 4569 : /*read a PNG, the result will be in the same color type as the PNG (hence "generic")*/
; 4570 : static void decodeGeneric(unsigned char** out, unsigned* w, unsigned* h,
; 4571 :                           LodePNGState* state,
; 4572 :                           const unsigned char* in, size_t insize)
; 4573 : {
; 4574 :   unsigned char IEND = 0;
; 4575 :   const unsigned char* chunk;
; 4576 :   size_t i;
; 4577 :   ucvector idat; /*the data from idat chunks*/
; 4578 : 
; 4579 :   /*for unknown chunk order*/
; 4580 :   unsigned unknown = 0;
; 4581 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4582 :   unsigned critical_pos = 1; /*1 = after IHDR, 2 = after PLTE, 3 = after IDAT*/
; 4583 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4584 : 
; 4585 :   /*provide some proper output values if error will happen*/
; 4586 :   *out = 0;
; 4587 : 
; 4588 :   state->error = lodepng_inspect(w, h, state, in, insize); /*reads header and resets other parameters in state->info_png*/
; 4589 :   if(state->error) return;
; 4590 : 
; 4591 :   ucvector_init(&idat);
; 4592 :   chunk = &in[33]; /*first byte of the first chunk after the header*/
; 4593 : 
; 4594 :   /*loop through the chunks, ignoring unknown chunks and stopping at IEND chunk.
; 4595 :   IDAT data is put at the start of the in buffer*/
; 4596 :   while(!IEND && !state->error)
; 4597 :   {
; 4598 :     unsigned chunkLength;
; 4599 :     const unsigned char* data; /*the data in the chunk*/
; 4600 : 
; 4601 :     /*error: size of the in buffer too small to contain next chunk*/
; 4602 :     if((size_t)((chunk - in) + 12) > insize || chunk < in) CERROR_BREAK(state->error, 30);
; 4603 : 
; 4604 :     /*length of the data of the chunk, excluding the length bytes, chunk type and CRC bytes*/
; 4605 :     chunkLength = lodepng_chunk_length(chunk);
; 4606 :     /*error: chunk length larger than the max PNG chunk size*/
; 4607 :     if(chunkLength > 2147483647) CERROR_BREAK(state->error, 63);
; 4608 : 
; 4609 :     if((size_t)((chunk - in) + chunkLength + 12) > insize || (chunk + chunkLength + 12) < in)
; 4610 :     {
; 4611 :       CERROR_BREAK(state->error, 64); /*error: size of the in buffer too small to contain next chunk*/
; 4612 :     }
; 4613 : 
; 4614 :     data = lodepng_chunk_data_const(chunk);
; 4615 : 
; 4616 :     /*IDAT chunk, containing compressed image data*/
; 4617 :     if(lodepng_chunk_type_equals(chunk, "IDAT"))
; 4618 :     {
; 4619 :       size_t oldsize = idat.size;
; 4620 :       if(!ucvector_resize(&idat, oldsize + chunkLength)) CERROR_BREAK(state->error, 83 /*alloc fail*/);
; 4621 :       for(i = 0; i < chunkLength; i++) idat.data[oldsize + i] = data[i];
; 4622 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4623 :       critical_pos = 3;
; 4624 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4625 :     }
; 4626 :     /*IEND chunk*/
; 4627 :     else if(lodepng_chunk_type_equals(chunk, "IEND"))
; 4628 :     {
; 4629 :       IEND = 1;
; 4630 :     }
; 4631 :     /*palette chunk (PLTE)*/
; 4632 :     else if(lodepng_chunk_type_equals(chunk, "PLTE"))
; 4633 :     {
; 4634 :       state->error = readChunk_PLTE(&state->info_png.color, data, chunkLength);
; 4635 :       if(state->error) break;
; 4636 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4637 :       critical_pos = 2;
; 4638 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4639 :     }
; 4640 :     /*palette transparency chunk (tRNS)*/
; 4641 :     else if(lodepng_chunk_type_equals(chunk, "tRNS"))
; 4642 :     {
; 4643 :       state->error = readChunk_tRNS(&state->info_png.color, data, chunkLength);
; 4644 :       if(state->error) break;
; 4645 :     }
; 4646 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4647 :     /*background color chunk (bKGD)*/
; 4648 :     else if(lodepng_chunk_type_equals(chunk, "bKGD"))
; 4649 :     {
; 4650 :       state->error = readChunk_bKGD(&state->info_png, data, chunkLength);
; 4651 :       if(state->error) break;
; 4652 :     }
; 4653 :     /*text chunk (tEXt)*/
; 4654 :     else if(lodepng_chunk_type_equals(chunk, "tEXt"))
; 4655 :     {
; 4656 :       if(state->decoder.read_text_chunks)
; 4657 :       {
; 4658 :         state->error = readChunk_tEXt(&state->info_png, data, chunkLength);
; 4659 :         if(state->error) break;
; 4660 :       }
; 4661 :     }
; 4662 :     /*compressed text chunk (zTXt)*/
; 4663 :     else if(lodepng_chunk_type_equals(chunk, "zTXt"))
; 4664 :     {
; 4665 :       if(state->decoder.read_text_chunks)
; 4666 :       {
; 4667 :         state->error = readChunk_zTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);
; 4668 :         if(state->error) break;
; 4669 :       }
; 4670 :     }
; 4671 :     /*international text chunk (iTXt)*/
; 4672 :     else if(lodepng_chunk_type_equals(chunk, "iTXt"))
; 4673 :     {
; 4674 :       if(state->decoder.read_text_chunks)
; 4675 :       {
; 4676 :         state->error = readChunk_iTXt(&state->info_png, &state->decoder.zlibsettings, data, chunkLength);
; 4677 :         if(state->error) break;
; 4678 :       }
; 4679 :     }
; 4680 :     else if(lodepng_chunk_type_equals(chunk, "tIME"))
; 4681 :     {
; 4682 :       state->error = readChunk_tIME(&state->info_png, data, chunkLength);
; 4683 :       if(state->error) break;
; 4684 :     }
; 4685 :     else if(lodepng_chunk_type_equals(chunk, "pHYs"))
; 4686 :     {
; 4687 :       state->error = readChunk_pHYs(&state->info_png, data, chunkLength);
; 4688 :       if(state->error) break;
; 4689 :     }
; 4690 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4691 :     else /*it's not an implemented chunk type, so ignore it: skip over the data*/
; 4692 :     {
; 4693 :       /*error: unknown critical chunk (5th bit of first byte of chunk type is 0)*/
; 4694 :       if(!lodepng_chunk_ancillary(chunk)) CERROR_BREAK(state->error, 69);
; 4695 : 
; 4696 :       unknown = 1;
; 4697 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4698 :       if(state->decoder.remember_unknown_chunks)
; 4699 :       {
; 4700 :         state->error = lodepng_chunk_append(&state->info_png.unknown_chunks_data[critical_pos - 1],
; 4701 :                                             &state->info_png.unknown_chunks_size[critical_pos - 1], chunk);
; 4702 :         if(state->error) break;
; 4703 :       }
; 4704 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4705 :     }
; 4706 : 
; 4707 :     if(!state->decoder.ignore_crc && !unknown) /*check CRC if wanted, only on known chunk types*/
; 4708 :     {
; 4709 :       if(lodepng_chunk_check_crc(chunk)) CERROR_BREAK(state->error, 57); /*invalid CRC*/
; 4710 :     }
; 4711 : 
; 4712 :     if(!IEND) chunk = lodepng_chunk_next_const(chunk);
; 4713 :   }
; 4714 : 
; 4715 :   if(!state->error)
; 4716 :   {
; 4717 :     ucvector scanlines;
; 4718 :     ucvector_init(&scanlines);
; 4719 : 
; 4720 :     /*maximum final image length is already reserved in the vector's length - this is not really necessary*/
; 4721 :     if(!ucvector_resize(&scanlines, lodepng_get_raw_size(*w, *h, &state->info_png.color) + *h))
; 4722 :     {
; 4723 :       state->error = 83; /*alloc fail*/
; 4724 :     }
; 4725 :     if(!state->error)
; 4726 :     {
; 4727 :       /*decompress with the Zlib decompressor*/
; 4728 :       state->error = zlib_decompress(&scanlines.data, &scanlines.size, idat.data,
; 4729 :                                      idat.size, &state->decoder.zlibsettings);
; 4730 :     }
; 4731 : 
; 4732 :     if(!state->error)
; 4733 :     {
; 4734 :       ucvector outv;
; 4735 :       ucvector_init(&outv);
; 4736 :       if(!ucvector_resizev(&outv,
; 4737 :           lodepng_get_raw_size(*w, *h, &state->info_png.color), 0)) state->error = 83; /*alloc fail*/
; 4738 :       if(!state->error) state->error = postProcessScanlines(outv.data, scanlines.data, *w, *h, &state->info_png);
; 4739 :       *out = outv.data;
; 4740 :     }
; 4741 :     ucvector_cleanup(&scanlines);
; 4742 :   }
; 4743 : 
; 4744 :   ucvector_cleanup(&idat);
; 4745 : }
; 4746 : 
; 4747 : unsigned lodepng_decode(unsigned char** out, unsigned* w, unsigned* h,
; 4748 :                         LodePNGState* state,
; 4749 :                         const unsigned char* in, size_t insize)
; 4750 : {
; 4751 :   *out = 0;
; 4752 :   decodeGeneric(out, w, h, state, in, insize);
; 4753 :   if(state->error) return state->error;
; 4754 :   if(!state->decoder.color_convert || lodepng_color_mode_equal(&state->info_raw, &state->info_png.color))
; 4755 :   {
; 4756 :     /*same color type, no copying or converting of data needed*/
; 4757 :     /*store the info_png color settings on the info_raw so that the info_raw still reflects what colortype
; 4758 :     the raw image has to the end user*/
; 4759 :     if(!state->decoder.color_convert)
; 4760 :     {
; 4761 :       state->error = lodepng_color_mode_copy(&state->info_raw, &state->info_png.color);
; 4762 :       if(state->error) return state->error;
; 4763 :     }
; 4764 :   }
; 4765 :   else
; 4766 :   {
; 4767 :     /*color conversion needed; sort of copy of the data*/
; 4768 :     unsigned char* data = *out;
; 4769 :     size_t outsize;
; 4770 : 
; 4771 :     /*TODO: check if this works according to the statement in the documentation: "The converter can convert
; 4772 :     from greyscale input color type, to 8-bit greyscale or greyscale with alpha"*/
; 4773 :     if(!(state->info_raw.colortype == LCT_RGB || state->info_raw.colortype == LCT_RGBA)
; 4774 :        && !(state->info_raw.bitdepth == 8))
; 4775 :     {
; 4776 :       return 56; /*unsupported color mode conversion*/
; 4777 :     }
; 4778 : 
; 4779 :     outsize = lodepng_get_raw_size(*w, *h, &state->info_raw);
; 4780 :     *out = (unsigned char*)lodepng_malloc(outsize);
; 4781 :     if(!(*out))
; 4782 :     {
; 4783 :       state->error = 83; /*alloc fail*/
; 4784 :     }
; 4785 :     else state->error = lodepng_convert(*out, data, &state->info_raw, &state->info_png.color, *w, *h, state->decoder.fix_png);
; 4786 :     lodepng_free(data);
; 4787 :   }
; 4788 :   return state->error;
; 4789 : }
; 4790 : 
; 4791 : unsigned lodepng_decode_memory(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in,
; 4792 :                                size_t insize, LodePNGColorType colortype, unsigned bitdepth)
; 4793 : {
; 4794 :   unsigned error;
; 4795 :   LodePNGState state;
; 4796 :   lodepng_state_init(&state);
; 4797 :   state.info_raw.colortype = colortype;
; 4798 :   state.info_raw.bitdepth = bitdepth;
; 4799 :   error = lodepng_decode(out, w, h, &state, in, insize);
; 4800 :   lodepng_state_cleanup(&state);
; 4801 :   return error;
; 4802 : }
; 4803 : 
; 4804 : unsigned lodepng_decode32(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4805 : {
; 4806 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGBA, 8);
; 4807 : }
; 4808 : 
; 4809 : unsigned lodepng_decode24(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)
; 4810 : {
; 4811 :   return lodepng_decode_memory(out, w, h, in, insize, LCT_RGB, 8);
; 4812 : }
; 4813 : 
; 4814 : #ifdef LODEPNG_COMPILE_DISK
; 4815 : unsigned lodepng_decode_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename,
; 4816 :                              LodePNGColorType colortype, unsigned bitdepth)
; 4817 : {
; 4818 :   unsigned char* buffer;
; 4819 :   size_t buffersize;
; 4820 :   unsigned error;
; 4821 :   error = lodepng_load_file(&buffer, &buffersize, filename);
; 4822 :   if(!error) error = lodepng_decode_memory(out, w, h, buffer, buffersize, colortype, bitdepth);
; 4823 :   lodepng_free(buffer);
; 4824 :   return error;
; 4825 : }
; 4826 : 
; 4827 : unsigned lodepng_decode32_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4828 : {
; 4829 :   return lodepng_decode_file(out, w, h, filename, LCT_RGBA, 8);
; 4830 : }
; 4831 : 
; 4832 : unsigned lodepng_decode24_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)
; 4833 : {
; 4834 :   return lodepng_decode_file(out, w, h, filename, LCT_RGB, 8);
; 4835 : }
; 4836 : #endif /*LODEPNG_COMPILE_DISK*/
; 4837 : 
; 4838 : void lodepng_decoder_settings_init(LodePNGDecoderSettings* settings)
; 4839 : {
; 4840 :   settings->color_convert = 1;
; 4841 : #ifdef LODEPNG_COMPILE_ANCILLARY_CHUNKS
; 4842 :   settings->read_text_chunks = 1;
; 4843 :   settings->remember_unknown_chunks = 0;
; 4844 : #endif /*LODEPNG_COMPILE_ANCILLARY_CHUNKS*/
; 4845 :   settings->ignore_crc = 0;
; 4846 :   settings->fix_png = 0;
; 4847 :   lodepng_decompress_settings_init(&settings->zlibsettings);
; 4848 : }
; 4849 : 
; 4850 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4851 : 
; 4852 : #if defined(LODEPNG_COMPILE_DECODER) || defined(LODEPNG_COMPILE_ENCODER)
; 4853 : 
; 4854 : void lodepng_state_init(LodePNGState* state)
; 4855 : {
; 4856 : #ifdef LODEPNG_COMPILE_DECODER
; 4857 :   lodepng_decoder_settings_init(&state->decoder);
; 4858 : #endif /*LODEPNG_COMPILE_DECODER*/
; 4859 : #ifdef LODEPNG_COMPILE_ENCODER
; 4860 :   lodepng_encoder_settings_init(&state->encoder);
; 4861 : #endif /*LODEPNG_COMPILE_ENCODER*/
; 4862 :   lodepng_color_mode_init(&state->info_raw);
; 4863 :   lodepng_info_init(&state->info_png);
; 4864 :   state->error = 1;
; 4865 : }
; 4866 : 
; 4867 : void lodepng_state_cleanup(LodePNGState* state)
; 4868 : {
; 4869 :   lodepng_color_mode_cleanup(&state->info_raw);
; 4870 :   lodepng_info_cleanup(&state->info_png);

  00113	e8 00 00 00 00	 call	 ?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z ; lodepng_info_cleanup

; 6156 :     lodepng_free(buffer);
; 6157 :   }
; 6158 :   return error;

  00118	8b c6		 mov	 eax, esi
$LN50@decode:

; 6159 : }

  0011a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00124	59		 pop	 ecx
  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	5b		 pop	 ebx
  00128	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012b	33 cd		 xor	 ecx, ebp
  0012d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z$0:
  00000	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _state$3[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1State@lodepng@@UAE@XZ ; lodepng::State::~State
__ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a b4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-332]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z ENDP ; lodepng::decode
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
;	COMDAT ?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV23@W4LodePNGColorType@@I@Z
_TEXT	SEGMENT
_h$ = 8							; size = 4
_in$ = 12						; size = 4
_colortype$dead$ = 16					; size = 4
_bitdepth$dead$ = 20					; size = 4
?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV23@W4LodePNGColorType@@I@Z PROC ; lodepng::decode, COMDAT
; _out$ = ecx
; _w$ = edx

; 6163 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1097 : 		return (this->_Myfirst == this->_Mylast);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _in$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 30		 mov	 esi, DWORD PTR [eax]
  0000a	57		 push	 edi
  0000b	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6164 :   return decode(out, w, h, in.empty() ? 0 : &in[0], (unsigned)in.size(), colortype, bitdepth);

  0000e	33 db		 xor	 ebx, ebx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1097 : 		return (this->_Myfirst == this->_Mylast);

  00010	3b f7		 cmp	 esi, edi
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6164 :   return decode(out, w, h, in.empty() ? 0 : &in[0], (unsigned)in.size(), colortype, bitdepth);

  00012	8b c6		 mov	 eax, esi
  00014	0f 44 c3	 cmove	 eax, ebx
  00017	83 ec 08	 sub	 esp, 8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  0001a	2b fe		 sub	 edi, esi
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6164 :   return decode(out, w, h, in.empty() ? 0 : &in[0], (unsigned)in.size(), colortype, bitdepth);

  0001c	57		 push	 edi
  0001d	50		 push	 eax
  0001e	ff 75 08	 push	 DWORD PTR _h$[ebp]
  00021	e8 00 00 00 00	 call	 ?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z ; lodepng::decode
  00026	83 c4 14	 add	 esp, 20			; 00000014H
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx

; 6165 : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV23@W4LodePNGColorType@@I@Z ENDP ; lodepng::decode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 87   : 		{	// destroy the object

  00000	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00003	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00006	c7 44 08 f8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0000e	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00017	89 44 0a f4	 mov	 DWORD PTR [edx+ecx-12], eax

; 88   : 		}

  0001b	c3		 ret	 0
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2, COMDAT
; _this$ = ecx

; 92   : 		}

  00000	c3		 ret	 0
?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
__Ok$2 = -24						; size = 8
__$EHRec$ = -12						; size = 12
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = ecx

; 585  : 		{	// flush output stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0000d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00013	50		 push	 eax
  00014	83 ec 10	 sub	 esp, 16			; 00000010H
  00017	56		 push	 esi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c4		 xor	 eax, esp
  0001f	50		 push	 eax
  00020	8d 44 24 18	 lea	 eax, DWORD PTR __$EHRec$[esp+36]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 96   : 		return (_Mystrbuf);

  0002c	8b 06		 mov	 eax, DWORD PTR [esi]
  0002e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00031	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 586  : 		if (_Myios::rdbuf() != 0)

  00035	85 c9		 test	 ecx, ecx
  00037	0f 84 a8 00 00
	00		 je	 $LN70@flush

; 105  : 				_Myostr.rdbuf()->_Lock();

  0003d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003f	89 74 24 0c	 mov	 DWORD PTR __Ok$2[esp+36], esi
  00043	ff 50 04	 call	 DWORD PTR [eax+4]

; 112  : 			}
; 113  : 
; 114  : 		_Myt& _Myostr;	// the output stream, for _Unlock call at destruction
; 115  : 
; 116  : 	private:
; 117  : 		_Sentry_base& operator=(const _Sentry_base&);
; 118  : 		};
; 119  : 
; 120  : 	class sentry
; 121  : 		: public _Sentry_base
; 122  : 		{	// stores thread lock and state of stream
; 123  : 	public:
; 124  : 		explicit __CLR_OR_THIS_CALL sentry(_Myt& _Ostr)
; 125  : 			: _Sentry_base(_Ostr)
; 126  : 			{	// construct locking and testing stream

  00046	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 328  : 		}
; 329  : 
; 330  : 	void __CLR_OR_THIS_CALL setstate(iostate _State, bool _Exreraise)
; 331  : 		{	// merge in state argument, possibly reraise exception
; 332  : 		if (_State != goodbit)
; 333  : 			clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
; 334  : 		}
; 335  : 
; 336  : 	void __CLR_OR_THIS_CALL setstate(iostate _State)
; 337  : 		{	// merge in state argument
; 338  : 		if (_State != goodbit)
; 339  : 			clear((iostate)((int)rdstate() | (int)_State), false);
; 340  : 		}
; 341  : 
; 342  : 	void __CLR_OR_THIS_CALL setstate(io_state _State)
; 343  : 		{	// merge in state argument, old style
; 344  : 		setstate((iostate)_State);
; 345  : 		}
; 346  : 
; 347  : 	bool __CLR_OR_THIS_CALL good() const
; 348  : 		{	// test if no state bits are set
; 349  : 		return (rdstate() == goodbit);

  00053	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 127  : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00058	75 0d		 jne	 SHORT $LN8@flush
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 84   : 		return (_Tiestr);

  0005a	8b 4c 30 3c	 mov	 ecx, DWORD PTR [eax+esi+60]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 127  : 			if (_Ostr.good() && _Ostr.tie() != 0)

  0005e	85 c9		 test	 ecx, ecx
  00060	74 05		 je	 SHORT $LN8@flush

; 128  : 				_Ostr.tie()->flush();

  00062	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN8@flush:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  00067	8b 06		 mov	 eax, DWORD PTR [esi]
  00069	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 328  : 		}
; 329  : 
; 330  : 	void __CLR_OR_THIS_CALL setstate(iostate _State, bool _Exreraise)
; 331  : 		{	// merge in state argument, possibly reraise exception
; 332  : 		if (_State != goodbit)
; 333  : 			clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
; 334  : 		}
; 335  : 
; 336  : 	void __CLR_OR_THIS_CALL setstate(iostate _State)
; 337  : 		{	// merge in state argument
; 338  : 		if (_State != goodbit)
; 339  : 			clear((iostate)((int)rdstate() | (int)_State), false);
; 340  : 		}
; 341  : 
; 342  : 	void __CLR_OR_THIS_CALL setstate(io_state _State)
; 343  : 		{	// merge in state argument, old style
; 344  : 		setstate((iostate)_State);
; 345  : 		}
; 346  : 
; 347  : 	bool __CLR_OR_THIS_CALL good() const
; 348  : 		{	// test if no state bits are set
; 349  : 		return (rdstate() == goodbit);

  0006c	83 7c 31 0c 00	 cmp	 DWORD PTR [ecx+esi+12], 0
  00071	0f 94 c0	 sete	 al
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 129  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00074	88 44 24 10	 mov	 BYTE PTR __Ok$2[esp+40], al

; 587  : 			{	// buffer exists, flush it
; 588  : 			const sentry _Ok(*this);

  00078	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 1

; 137  : 
; 138  :  #else /* _HAS_EXCEPTIONS */
; 139  : 			this->_Myostr._Osfx();
; 140  :  #endif /* _HAS_EXCEPTIONS */
; 141  : 			}
; 142  : 
; 143  : 		_TYPEDEF_BOOL_TYPE;
; 144  : 
; 145  : 		__CLR_OR_THIS_CALL _OPERATOR_BOOL() const
; 146  : 			{	// test if stream state okay
; 147  : 			return (_Ok ? _CONVERTIBLE_TO_TRUE : 0);

  00080	84 c0		 test	 al, al

; 590  : 			if (_Ok && _Myios::rdbuf()->pubsync() == -1)

  00082	74 37		 je	 SHORT $LN52@flush
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 96   : 		return (_Mystrbuf);

  00084	8b 4c 31 38	 mov	 ecx, DWORD PTR [ecx+esi+56]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 141  : 		return (sync());

  00088	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008a	ff 50 34	 call	 DWORD PTR [eax+52]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 590  : 			if (_Ok && _Myios::rdbuf()->pubsync() == -1)

  0008d	83 f8 ff	 cmp	 eax, -1
  00090	75 29		 jne	 SHORT $LN52@flush

; 591  : 				_Myios::setstate(ios_base::badbit);	// sync failed

  00092	8b 06		 mov	 eax, DWORD PTR [esi]
  00094	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  00097	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 591  : 				_Myios::setstate(ios_base::badbit);	// sync failed

  0009b	03 ce		 add	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  0009d	83 c8 04	 or	 eax, 4

; 54   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  000a0	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  000a4	75 03		 jne	 SHORT $LN44@flush
  000a6	83 c8 04	 or	 eax, 4
$LN44@flush:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 302  : 		_Mystate = (iostate)(_State & _Statmask);

  000a9	83 e0 17	 and	 eax, 23			; 00000017H
  000ac	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 303  : 		if ((_Mystate & _Except) == 0)

  000af	85 41 10	 test	 DWORD PTR [ecx+16], eax
  000b2	74 07		 je	 SHORT $LN52@flush
  000b4	6a 00		 push	 0
  000b6	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN52@flush:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 592  : 			}

  000bb	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1

; 130  : 			}
; 131  : 
; 132  : 		__CLR_OR_THIS_CALL ~sentry() _NOEXCEPT
; 133  : 			{	// destroy the object
; 134  :  #if _HAS_EXCEPTIONS
; 135  : 			if (!_XSTD uncaught_exception())

  000c3	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  000c8	84 c0		 test	 al, al
  000ca	75 07		 jne	 SHORT $LN59@flush

; 136  : 				this->_Myostr._Osfx();

  000cc	8b ce		 mov	 ecx, esi
  000ce	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN59@flush:

; 106  : 			}
; 107  : 
; 108  : 		__CLR_OR_THIS_CALL ~_Sentry_base() _NOEXCEPT
; 109  : 			{	// destroy after unlocking
; 110  : 			if (_Myostr.rdbuf() != 0)

  000d3	8b 06		 mov	 eax, DWORD PTR [esi]
  000d5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000d8	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  000dc	85 c9		 test	 ecx, ecx
  000de	74 05		 je	 SHORT $LN70@flush

; 111  : 				_Myostr.rdbuf()->_Unlock();

  000e0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e2	ff 50 08	 call	 DWORD PTR [eax+8]
$LN70@flush:

; 593  : 		return (*this);

  000e5	8b c6		 mov	 eax, esi

; 594  : 		}

  000e7	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000eb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f2	59		 pop	 ecx
  000f3	5e		 pop	 esi
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$1:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Ok$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR __Ok$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 ec	 lea	 eax, DWORD PTR [edx-20]
  00017	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
;	COMDAT ?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z
_TEXT	SEGMENT
__Ok$ = -32						; size = 8
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Str$ = 8						; size = 4
__Count$ = 12						; size = 8
?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z PROC ; std::basic_istream<char,std::char_traits<char> >::read, COMDAT
; _this$ = ecx

; 721  : 		{	// read up to _Count characters into buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 723  : 		ios_base::iostate _State = ios_base::goodbit;

  00030	33 ff		 xor	 edi, edi

; 724  : 		_Chcount = 0;

  00032	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00035	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 96   : 		return (_Mystrbuf);

  00038	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 723  : 		ios_base::iostate _State = ios_base::goodbit;

  0003a	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 96   : 		return (_Mystrbuf);

  0003d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 88   : 			{	// lock the stream buffer, if there

  00040	89 75 e0	 mov	 DWORD PTR __Ok$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 96   : 		return (_Mystrbuf);

  00043	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 89   : 			if (_Myistr.rdbuf() != 0)

  00047	85 c9		 test	 ecx, ecx
  00049	74 05		 je	 SHORT $LN14@read

; 90   : 				_Myistr.rdbuf()->_Lock();

  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 04	 call	 DWORD PTR [eax+4]
$LN14@read:

; 97   : 			}
; 98   : 
; 99   : 		_Myt& _Myistr;	// the input stream, for _Unlock call at destruction
; 100  : 
; 101  : 	private:
; 102  : 		_Sentry_base& operator=(const _Sentry_base&);
; 103  : 		};
; 104  : 
; 105  : 	class sentry
; 106  : 		: public _Sentry_base
; 107  : 		{	// stores thread lock and result of _Ipfx call
; 108  : 	public:
; 109  : 		explicit __CLR_OR_THIS_CALL sentry(_Myt& _Istr, bool _Noskip = false)
; 110  : 			: _Sentry_base(_Istr)
; 111  : 			{	// construct locking and calling _Ipfx
; 112  : 			_Ok = this->_Myistr._Ipfx(_Noskip);

  00050	51		 push	 ecx
  00051	8b ce		 mov	 ecx, esi
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0005a	e8 00 00 00 00	 call	 ?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z ; std::basic_istream<char,std::char_traits<char> >::_Ipfx
  0005f	88 45 e4	 mov	 BYTE PTR __Ok$[ebp+4], al

; 725  : 		const sentry _Ok(*this, true);

  00062	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 113  : 			}
; 114  : 
; 115  : 		_TYPEDEF_BOOL_TYPE;
; 116  : 
; 117  : 		__CLR_OR_THIS_CALL _OPERATOR_BOOL() const
; 118  : 			{	// test if _Ipfx succeeded
; 119  : 			return (_Ok ? _CONVERTIBLE_TO_TRUE : 0);

  00069	84 c0		 test	 al, al

; 726  : 
; 727  : 		if (_Ok)

  0006b	74 75		 je	 SHORT $LN9@read
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 159  : 		return (xsgetn(_Ptr, _Count));

  0006d	ff 75 10	 push	 DWORD PTR __Count$[ebp+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 729  : 			_TRY_IO_BEGIN

  00070	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 96   : 		return (_Mystrbuf);

  00074	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 159  : 		return (xsgetn(_Ptr, _Count));

  00076	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 96   : 		return (_Mystrbuf);

  00079	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 159  : 		return (xsgetn(_Ptr, _Count));

  0007c	ff 75 08	 push	 DWORD PTR __Str$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 96   : 		return (_Mystrbuf);

  0007f	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 159  : 		return (xsgetn(_Ptr, _Count));

  00083	8b 01		 mov	 eax, DWORD PTR [ecx]
  00085	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00088	ff d0		 call	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 731  : 			_Chcount += _Num;

  0008a	01 46 08	 add	 DWORD PTR [esi+8], eax
  0008d	11 56 0c	 adc	 DWORD PTR [esi+12], edx

; 732  : 			if (_Num != _Count)

  00090	3b 45 0c	 cmp	 eax, DWORD PTR __Count$[ebp]
  00093	75 05		 jne	 SHORT $LN80@read
  00095	3b 55 10	 cmp	 edx, DWORD PTR __Count$[ebp+4]
  00098	74 41		 je	 SHORT $LN1@read
$LN80@read:

; 733  : 				_State |= ios_base::eofbit | ios_base::failbit;	// short read

  0009a	bf 03 00 00 00	 mov	 edi, 3
  0009f	eb 3a		 jmp	 SHORT $LN1@read
__catch$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z$0:

; 734  : 			_CATCH_IO_END

  000a1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  000a9	8b 44 0a 0c	 mov	 eax, DWORD PTR [edx+ecx+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 734  : 			_CATCH_IO_END

  000ad	03 d1		 add	 edx, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  000af	83 c8 04	 or	 eax, 4

; 54   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  000b2	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  000b6	75 03		 jne	 SHORT $LN34@read
  000b8	83 c8 04	 or	 eax, 4
$LN34@read:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 302  : 		_Mystate = (iostate)(_State & _Statmask);

  000bb	83 e0 17	 and	 eax, 23			; 00000017H
  000be	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 303  : 		if ((_Mystate & _Except) == 0)

  000c1	85 42 10	 test	 DWORD PTR [edx+16], eax
  000c4	74 09		 je	 SHORT $LN42@read
  000c6	6a 01		 push	 1
  000c8	8b ca		 mov	 ecx, edx
  000ca	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN42@read:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 734  : 			_CATCH_IO_END

  000cf	b8 00 00 00 00	 mov	 eax, $LN10@read
  000d4	c3		 ret	 0
$LN10@read:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
  000d5	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000d8	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
$LN1@read:
  000db	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
$LN9@read:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 735  : 			}
; 736  : 
; 737  : 		_Myios::setstate(_State);

  000e2	8b 06		 mov	 eax, DWORD PTR [esi]
  000e4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e7	03 ce		 add	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 65   : 		if (_State != goodbit)

  000e9	85 ff		 test	 edi, edi
  000eb	74 20		 je	 SHORT $LN64@read
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  000ed	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  000f0	0b c7		 or	 eax, edi

; 54   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  000f2	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  000f6	75 03		 jne	 SHORT $LN56@read
  000f8	83 c8 04	 or	 eax, 4
$LN56@read:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 302  : 		_Mystate = (iostate)(_State & _Statmask);

  000fb	83 e0 17	 and	 eax, 23			; 00000017H
  000fe	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 303  : 		if ((_Mystate & _Except) == 0)

  00101	85 41 10	 test	 DWORD PTR [ecx+16], eax
  00104	74 07		 je	 SHORT $LN64@read
  00106	6a 00		 push	 0
  00108	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN64@read:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 738  : 		return (*this);

  0010d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 91   : 			}
; 92   : 
; 93   : 		__CLR_OR_THIS_CALL ~_Sentry_base() _NOEXCEPT
; 94   : 			{	// destroy after unlocking
; 95   : 			if (_Myistr.rdbuf() != 0)

  00114	8b 06		 mov	 eax, DWORD PTR [esi]
  00116	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00119	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  0011d	85 c9		 test	 ecx, ecx
  0011f	74 05		 je	 SHORT $LN81@read

; 96   : 				_Myistr.rdbuf()->_Unlock();

  00121	8b 01		 mov	 eax, DWORD PTR [ecx]
  00123	ff 50 08	 call	 DWORD PTR [eax+8]
$LN81@read:

; 738  : 		return (*this);

  00126	8b c6		 mov	 eax, esi

; 739  : 		}

  00128	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0012b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00132	59		 pop	 ecx
  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z$3:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z$2:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
__ehhandler$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::read
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
;	COMDAT ?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z
_TEXT	SEGMENT
$T2 = -52						; size = 24
__Ok$ = -24						; size = 8
__$EHRec$ = -12						; size = 12
__Off$dead$ = 8						; size = 8
__Way$ = 16						; size = 4
?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z PROC ; std::basic_istream<char,std::char_traits<char> >::seekg, COMDAT
; _this$ = ecx

; 860  : 		{	// change input stream position by _Off, according to _Way

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002d	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
  00031	03 ce		 add	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 863  : 		_Myios::clear(_Oldstate & ~ios_base::eofbit);

  00033	83 e0 fe	 and	 eax, -2			; fffffffeH
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 54   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00036	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0003a	75 03		 jne	 SHORT $LN9@seekg
  0003c	83 c8 04	 or	 eax, 4
$LN9@seekg:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 302  : 		_Mystate = (iostate)(_State & _Statmask);

  0003f	83 e0 17	 and	 eax, 23			; 00000017H
  00042	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 303  : 		if ((_Mystate & _Except) == 0)

  00045	85 41 10	 test	 DWORD PTR [ecx+16], eax
  00048	74 07		 je	 SHORT $LN17@seekg
  0004a	6a 00		 push	 0
  0004c	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN17@seekg:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 96   : 		return (_Mystrbuf);

  00051	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 88   : 			{	// lock the stream buffer, if there

  00053	89 75 e8	 mov	 DWORD PTR __Ok$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 96   : 		return (_Mystrbuf);

  00056	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00059	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 89   : 			if (_Myistr.rdbuf() != 0)

  0005d	85 c9		 test	 ecx, ecx
  0005f	74 05		 je	 SHORT $LN27@seekg

; 90   : 				_Myistr.rdbuf()->_Lock();

  00061	8b 01		 mov	 eax, DWORD PTR [ecx]
  00063	ff 50 04	 call	 DWORD PTR [eax+4]
$LN27@seekg:

; 97   : 			}
; 98   : 
; 99   : 		_Myt& _Myistr;	// the input stream, for _Unlock call at destruction
; 100  : 
; 101  : 	private:
; 102  : 		_Sentry_base& operator=(const _Sentry_base&);
; 103  : 		};
; 104  : 
; 105  : 	class sentry
; 106  : 		: public _Sentry_base
; 107  : 		{	// stores thread lock and result of _Ipfx call
; 108  : 	public:
; 109  : 		explicit __CLR_OR_THIS_CALL sentry(_Myt& _Istr, bool _Noskip = false)
; 110  : 			: _Sentry_base(_Istr)
; 111  : 			{	// construct locking and calling _Ipfx
; 112  : 			_Ok = this->_Myistr._Ipfx(_Noskip);

  00066	51		 push	 ecx
  00067	8b ce		 mov	 ecx, esi
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00070	e8 00 00 00 00	 call	 ?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z ; std::basic_istream<char,std::char_traits<char> >::_Ipfx
  00075	88 45 ec	 mov	 BYTE PTR __Ok$[ebp+4], al

; 864  : 		const sentry _Ok(*this, true);

  00078	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  0007f	8b 06		 mov	 eax, DWORD PTR [esi]
  00081	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 328  : 		}
; 329  : 
; 330  : 	void __CLR_OR_THIS_CALL setstate(iostate _State, bool _Exreraise)
; 331  : 		{	// merge in state argument, possibly reraise exception
; 332  : 		if (_State != goodbit)
; 333  : 			clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
; 334  : 		}
; 335  : 
; 336  : 	void __CLR_OR_THIS_CALL setstate(iostate _State)
; 337  : 		{	// merge in state argument
; 338  : 		if (_State != goodbit)
; 339  : 			clear((iostate)((int)rdstate() | (int)_State), false);
; 340  : 		}
; 341  : 
; 342  : 	void __CLR_OR_THIS_CALL setstate(io_state _State)
; 343  : 		{	// merge in state argument, old style
; 344  : 		setstate((iostate)_State);
; 345  : 		}
; 346  : 
; 347  : 	bool __CLR_OR_THIS_CALL good() const
; 348  : 		{	// test if no state bits are set
; 349  : 		return (rdstate() == goodbit);
; 350  : 		}
; 351  : 
; 352  : 	bool __CLR_OR_THIS_CALL eof() const
; 353  : 		{	// test if eofbit is set in stream state
; 354  : 		return ((int)rdstate() & (int)eofbit);
; 355  : 		}
; 356  : 
; 357  : 	bool __CLR_OR_THIS_CALL fail() const
; 358  : 		{	// test if badbit or failbit is set in stream state
; 359  : 		return (((int)rdstate()
; 360  : 			& ((int)badbit | (int)failbit)) != 0);

  00084	f6 44 30 0c 06	 test	 BYTE PTR [eax+esi+12], 6
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 868  : 				ios_base::in) == _BADOFF)

  00089	75 5b		 jne	 SHORT $LN59@seekg
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 96   : 		return (_Mystrbuf);

  0008b	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 91   : 		return (seekoff(_Off, _Way, _Mode));

  0008f	6a 01		 push	 1
  00091	ff 75 10	 push	 DWORD PTR __Way$[ebp]
  00094	8b 01		 mov	 eax, DWORD PTR [ecx]
  00096	6a 00		 push	 0
  00098	6a 00		 push	 0
  0009a	8d 55 cc	 lea	 edx, DWORD PTR $T2[ebp]
  0009d	52		 push	 edx
  0009e	ff 50 28	 call	 DWORD PTR [eax+40]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 68   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

  000a1	8b 45 cc	 mov	 eax, DWORD PTR $T2[ebp]
  000a4	03 45 d4	 add	 eax, DWORD PTR $T2[ebp+8]
  000a7	8b 4d d0	 mov	 ecx, DWORD PTR $T2[ebp+4]
  000aa	13 4d d8	 adc	 ecx, DWORD PTR $T2[ebp+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 868  : 				ios_base::in) == _BADOFF)

  000ad	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?_BADOFF@std@@3_JB
  000b3	75 31		 jne	 SHORT $LN59@seekg
  000b5	3b 0d 04 00 00
	00		 cmp	 ecx, DWORD PTR ?_BADOFF@std@@3_JB+4
  000bb	75 29		 jne	 SHORT $LN59@seekg

; 869  : 			_Myios::setstate(_State | ios_base::failbit);

  000bd	8b 06		 mov	 eax, DWORD PTR [esi]
  000bf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  000c2	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 869  : 			_Myios::setstate(_State | ios_base::failbit);

  000c6	03 ce		 add	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  000c8	83 c8 02	 or	 eax, 2

; 54   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  000cb	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  000cf	75 03		 jne	 SHORT $LN51@seekg
  000d1	83 c8 04	 or	 eax, 4
$LN51@seekg:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 302  : 		_Mystate = (iostate)(_State & _Statmask);

  000d4	83 e0 17	 and	 eax, 23			; 00000017H
  000d7	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 303  : 		if ((_Mystate & _Except) == 0)

  000da	85 41 10	 test	 DWORD PTR [ecx+16], eax
  000dd	74 07		 je	 SHORT $LN59@seekg
  000df	6a 00		 push	 0
  000e1	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN59@seekg:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 870  : 		return (*this);

  000e6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 91   : 			}
; 92   : 
; 93   : 		__CLR_OR_THIS_CALL ~_Sentry_base() _NOEXCEPT
; 94   : 			{	// destroy after unlocking
; 95   : 			if (_Myistr.rdbuf() != 0)

  000ed	8b 06		 mov	 eax, DWORD PTR [esi]
  000ef	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f2	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  000f6	85 c9		 test	 ecx, ecx
  000f8	74 05		 je	 SHORT $LN75@seekg

; 96   : 				_Myistr.rdbuf()->_Unlock();

  000fa	8b 01		 mov	 eax, DWORD PTR [ecx]
  000fc	ff 50 08	 call	 DWORD PTR [eax+8]
$LN75@seekg:

; 870  : 		return (*this);

  000ff	8b c6		 mov	 eax, esi

; 871  : 		}

  00101	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00104	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010b	59		 pop	 ecx
  0010c	5e		 pop	 esi
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z$1:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z$0:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
__ehhandler$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::seekg
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
;	COMDAT ?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ
_TEXT	SEGMENT
__Ok$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::tellg, COMDAT
; _this$ = ecx

; 874  : 		{	// return input stream position

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 96   : 		return (_Mystrbuf);

  00029	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 88   : 			{	// lock the stream buffer, if there

  0002b	89 75 ec	 mov	 DWORD PTR __Ok$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 96   : 		return (_Mystrbuf);

  0002e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00031	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 89   : 			if (_Myistr.rdbuf() != 0)

  00035	85 c9		 test	 ecx, ecx
  00037	74 05		 je	 SHORT $LN9@tellg

; 90   : 				_Myistr.rdbuf()->_Lock();

  00039	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003b	ff 50 04	 call	 DWORD PTR [eax+4]
$LN9@tellg:

; 97   : 			}
; 98   : 
; 99   : 		_Myt& _Myistr;	// the input stream, for _Unlock call at destruction
; 100  : 
; 101  : 	private:
; 102  : 		_Sentry_base& operator=(const _Sentry_base&);
; 103  : 		};
; 104  : 
; 105  : 	class sentry
; 106  : 		: public _Sentry_base
; 107  : 		{	// stores thread lock and result of _Ipfx call
; 108  : 	public:
; 109  : 		explicit __CLR_OR_THIS_CALL sentry(_Myt& _Istr, bool _Noskip = false)
; 110  : 			: _Sentry_base(_Istr)
; 111  : 			{	// construct locking and calling _Ipfx
; 112  : 			_Ok = this->_Myistr._Ipfx(_Noskip);

  0003e	51		 push	 ecx
  0003f	8b ce		 mov	 ecx, esi
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	e8 00 00 00 00	 call	 ?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z ; std::basic_istream<char,std::char_traits<char> >::_Ipfx
  0004d	88 45 f0	 mov	 BYTE PTR __Ok$[ebp+4], al
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 91   : 		return (seekoff(_Off, _Way, _Mode));

  00050	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 875  : 		const sentry _Ok(*this, true);

  00053	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  0005a	8b 06		 mov	 eax, DWORD PTR [esi]
  0005c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 328  : 		}
; 329  : 
; 330  : 	void __CLR_OR_THIS_CALL setstate(iostate _State, bool _Exreraise)
; 331  : 		{	// merge in state argument, possibly reraise exception
; 332  : 		if (_State != goodbit)
; 333  : 			clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
; 334  : 		}
; 335  : 
; 336  : 	void __CLR_OR_THIS_CALL setstate(iostate _State)
; 337  : 		{	// merge in state argument
; 338  : 		if (_State != goodbit)
; 339  : 			clear((iostate)((int)rdstate() | (int)_State), false);
; 340  : 		}
; 341  : 
; 342  : 	void __CLR_OR_THIS_CALL setstate(io_state _State)
; 343  : 		{	// merge in state argument, old style
; 344  : 		setstate((iostate)_State);
; 345  : 		}
; 346  : 
; 347  : 	bool __CLR_OR_THIS_CALL good() const
; 348  : 		{	// test if no state bits are set
; 349  : 		return (rdstate() == goodbit);
; 350  : 		}
; 351  : 
; 352  : 	bool __CLR_OR_THIS_CALL eof() const
; 353  : 		{	// test if eofbit is set in stream state
; 354  : 		return ((int)rdstate() & (int)eofbit);
; 355  : 		}
; 356  : 
; 357  : 	bool __CLR_OR_THIS_CALL fail() const
; 358  : 		{	// test if badbit or failbit is set in stream state
; 359  : 		return (((int)rdstate()
; 360  : 			& ((int)badbit | (int)failbit)) != 0);

  0005f	f6 44 30 0c 06	 test	 BYTE PTR [eax+esi+12], 6
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 877  : 		if (!this->fail())

  00064	75 14		 jne	 SHORT $LN2@tellg
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 96   : 		return (_Mystrbuf);

  00066	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 91   : 		return (seekoff(_Off, _Way, _Mode));

  0006a	6a 01		 push	 1
  0006c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006e	6a 01		 push	 1
  00070	6a 00		 push	 0
  00072	6a 00		 push	 0
  00074	57		 push	 edi
  00075	ff 50 28	 call	 DWORD PTR [eax+40]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 879  : 				ios_base::cur, ios_base::in));

  00078	eb 24		 jmp	 SHORT $LN56@tellg
$LN2@tellg:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 43   : 		{	// construct with stream offset

  0007a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_BADOFF@std@@3_JB
  0007f	89 07		 mov	 DWORD PTR [edi], eax
  00081	a1 04 00 00 00	 mov	 eax, DWORD PTR ?_BADOFF@std@@3_JB+4
  00086	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00089	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00090	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00097	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
$LN56@tellg:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 881  : 			return (pos_type(_BADOFF));

  0009e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 91   : 			}
; 92   : 
; 93   : 		__CLR_OR_THIS_CALL ~_Sentry_base() _NOEXCEPT
; 94   : 			{	// destroy after unlocking
; 95   : 			if (_Myistr.rdbuf() != 0)

  000a5	8b 06		 mov	 eax, DWORD PTR [esi]
  000a7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000aa	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
  000ae	85 c9		 test	 ecx, ecx
  000b0	74 05		 je	 SHORT $LN37@tellg

; 96   : 				_Myistr.rdbuf()->_Unlock();

  000b2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b4	ff 52 08	 call	 DWORD PTR [edx+8]
$LN37@tellg:

; 881  : 			return (pos_type(_BADOFF));

  000b7	8b c7		 mov	 eax, edi

; 882  : 		}

  000b9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c3	59		 pop	 ecx
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ$0:
  00008	8d 4d ec	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
__ehhandler$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::tellg
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Istr$ = 8						; size = 4
__Noskip$dead$ = 12					; size = 1
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 111  : 			{	// construct locking and calling _Ipfx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 88   : 			{	// lock the stream buffer, if there

  00029	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0002c	89 16		 mov	 DWORD PTR [esi], edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 96   : 		return (_Mystrbuf);

  0002e	8b 02		 mov	 eax, DWORD PTR [edx]
  00030	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00033	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 89   : 			if (_Myistr.rdbuf() != 0)

  00037	85 c9		 test	 ecx, ecx
  00039	74 05		 je	 SHORT $LN4@sentry

; 90   : 				_Myistr.rdbuf()->_Lock();

  0003b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003d	ff 50 04	 call	 DWORD PTR [eax+4]
$LN4@sentry:

; 111  : 			{	// construct locking and calling _Ipfx

  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 112  : 			_Ok = this->_Myistr._Ipfx(_Noskip);

  00047	51		 push	 ecx
  00048	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004a	e8 00 00 00 00	 call	 ?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z ; std::basic_istream<char,std::char_traits<char> >::_Ipfx
  0004f	88 46 04	 mov	 BYTE PTR [esi+4], al

; 113  : 			}

  00052	8b c6		 mov	 eax, esi
  00054	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00057	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005e	59		 pop	 ecx
  0005f	5e		 pop	 esi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_istream@DU?$char_traits@D@std@@@std@@@2@HXZ
_TEXT	SEGMENT
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_istream@DU?$char_traits@D@std@@@std@@@2@HXZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_istream<char,std::char_traits<char> > >::*, COMDAT
; _this$ = ecx

; 119  : 			return (_Ok ? _CONVERTIBLE_TO_TRUE : 0);

  00000	33 c0		 xor	 eax, eax
  00002	38 41 04	 cmp	 BYTE PTR [ecx+4], al
  00005	0f 95 c0	 setne	 al
  00008	48		 dec	 eax

; 120  : 			}

  00009	c3		 ret	 0
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_istream@DU?$char_traits@D@std@@@std@@@2@HXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_istream<char,std::char_traits<char> > >::*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 95   : 			if (_Myistr.rdbuf() != 0)

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	8b 01		 mov	 eax, DWORD PTR [ecx]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00007	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 05		 je	 SHORT $LN1@Sentry_bas

; 96   : 				_Myistr.rdbuf()->_Unlock();

  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	ff 60 08	 jmp	 DWORD PTR [eax+8]
$LN1@Sentry_bas:

; 97   : 			}

  00014	c3		 ret	 0
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::snextc, COMDAT
; _this$ = ecx

; 163  : 		{	// point to next character and return it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00003	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	85 c0		 test	 eax, eax
  0000a	74 3b		 je	 SHORT $LN17@snextc
  0000c	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]

; 167  : 				? _Traits::eof() : sgetc());

  00011	83 fa 01	 cmp	 edx, 1
  00014	7e 12		 jle	 SHORT $LN5@snextc

; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;

  00016	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00019	89 01		 mov	 DWORD PTR [ecx], eax

; 272  : 		return (++(*_IGnext));

  0001b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	41		 inc	 ecx
  00021	89 08		 mov	 DWORD PTR [eax], ecx
$LN47@snextc:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  00023	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00026	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 168  : 		}

  00027	c3		 ret	 0
$LN5@snextc:

; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00028	85 c0		 test	 eax, eax
  0002a	74 1b		 je	 SHORT $LN17@snextc
  0002c	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0002f	8b 01		 mov	 eax, DWORD PTR [ecx]

; 147  : 			? _Traits::to_int_type(*_Gninc()) : uflow());

  00031	85 c0		 test	 eax, eax
  00033	7e 12		 jle	 SHORT $LN17@snextc

; 169  : 
; 170  : 	int_type __CLR_OR_THIS_CALL sputbackc(_Elem _Ch)
; 171  : 		{	// put back _Ch
; 172  : 		return (gptr() != 0 && eback() < gptr()
; 173  : 			&& _Traits::eq(_Ch, gptr()[-1])
; 174  : 			? _Traits::to_int_type(*_Gndec())
; 175  : 			: pbackfail(_Traits::to_int_type(_Ch)));
; 176  : 		}
; 177  : 
; 178  : 	void __CLR_OR_THIS_CALL stossc()
; 179  : 		{	// point past a character
; 180  : 		if (0 < _Gnavail())
; 181  : 			_Gninc();
; 182  : 		else
; 183  : 			uflow();
; 184  : 		}
; 185  : 
; 186  : 	int_type __CLR_OR_THIS_CALL sungetc()
; 187  : 		{	// back up one position
; 188  : 		return (gptr() != 0 && eback() < gptr()
; 189  : 			? _Traits::to_int_type(*_Gndec()) : pbackfail());
; 190  : 		}
; 191  : 
; 192  : 	int_type __CLR_OR_THIS_CALL sputc(_Elem _Ch)
; 193  : 		{	// put a character
; 194  : 		return (0 < _Pnavail()
; 195  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 196  : 			: overflow(_Traits::to_int_type(_Ch)));
; 197  : 		}
; 198  : 
; 199  : 	streamsize __CLR_OR_THIS_CALL sputn(const _Elem *_Ptr,
; 200  : 		streamsize _Count)
; 201  : 		{	// put _Count characters from array beginning at _Ptr
; 202  : 		return (xsputn(_Ptr, _Count));
; 203  : 		}
; 204  : 
; 205  : 	virtual void __CLR_OR_THIS_CALL _Lock()
; 206  : 		{	// set the thread lock (overridden by basic_filebuf)
; 207  : 		}
; 208  : 
; 209  : 	virtual void __CLR_OR_THIS_CALL _Unlock()
; 210  : 		{	// clear the thread lock (overridden by basic_filebuf)
; 211  : 		}
; 212  : 
; 213  : protected:
; 214  : 	_Elem *__CLR_OR_THIS_CALL eback() const
; 215  : 		{	// return beginning of read buffer
; 216  : 		return (*_IGfirst);
; 217  : 		}
; 218  : 
; 219  : 	_Elem *__CLR_OR_THIS_CALL gptr() const
; 220  : 		{	// return current position in read buffer
; 221  : 		return (*_IGnext);
; 222  : 		}
; 223  : 
; 224  : 	_Elem *__CLR_OR_THIS_CALL pbase() const
; 225  : 		{	// return beginning of write buffer
; 226  : 		return (*_IPfirst);
; 227  : 		}
; 228  : 
; 229  : 	_Elem *__CLR_OR_THIS_CALL pptr() const
; 230  : 		{	// return current position in write buffer
; 231  : 		return (*_IPnext);
; 232  : 		}
; 233  : 
; 234  : 	_Elem *__CLR_OR_THIS_CALL egptr() const
; 235  : 		{	// return end of read buffer
; 236  : 		return (*_IGnext + *_IGcount);
; 237  : 		}
; 238  : 
; 239  : 	void __CLR_OR_THIS_CALL gbump(int _Off)
; 240  : 		{	// alter current position in read buffer by _Off
; 241  : 		*_IGcount -= _Off;
; 242  : 		*_IGnext += _Off;
; 243  : 		}
; 244  : 
; 245  : 	void __CLR_OR_THIS_CALL setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
; 246  : 		{	// set pointers for read buffer
; 247  : 		*_IGfirst = _First;
; 248  : 		*_IGnext = _Next;
; 249  : 		*_IGcount = (int)(_Last - _Next);
; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;

  00035	48		 dec	 eax
  00036	89 01		 mov	 DWORD PTR [ecx], eax

; 266  : 		return ((*_IGnext)++);

  00038	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0003b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003d	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00040	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  00042	0f b6 02	 movzx	 eax, BYTE PTR [edx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 147  : 			? _Traits::to_int_type(*_Gninc()) : uflow());

  00045	eb 07		 jmp	 SHORT $LN18@snextc
$LN17@snextc:
  00047	8b 06		 mov	 eax, DWORD PTR [esi]
  00049	8b ce		 mov	 ecx, esi
  0004b	ff 50 1c	 call	 DWORD PTR [eax+28]
$LN18@snextc:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  0004e	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 167  : 				? _Traits::eof() : sgetc());

  00051	75 04		 jne	 SHORT $LN3@snextc
  00053	0b c0		 or	 eax, eax
  00055	5e		 pop	 esi

; 168  : 		}

  00056	c3		 ret	 0
$LN3@snextc:

; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00057	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	85 c9		 test	 ecx, ecx
  0005e	74 08		 je	 SHORT $LN35@snextc
  00060	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 148  : 		}
; 149  : 
; 150  : 	int_type __CLR_OR_THIS_CALL sgetc()
; 151  : 		{	// get a character and don't point past it
; 152  : 		return (0 < _Gnavail()
; 153  : 			? _Traits::to_int_type(*gptr()) : underflow());

  00063	83 38 00	 cmp	 DWORD PTR [eax], 0
  00066	7f bb		 jg	 SHORT $LN47@snextc
$LN35@snextc:
  00068	8b 06		 mov	 eax, DWORD PTR [esi]
  0006a	8b ce		 mov	 ecx, esi
  0006c	5e		 pop	 esi
  0006d	ff 60 18	 jmp	 DWORD PTR [eax+24]
?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::snextc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$dead$ = 12					; size = 4
__Prot$dead$ = 16					; size = 4
_$initVBases$dead$ = 20					; size = 4
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 743  : 		{	// construct with named file and specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi
  0002c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 187  : 	__CLR_OR_THIS_CALL basic_ios()

  00039	c7 47 70 00 00
	00 00		 mov	 DWORD PTR [edi+112], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 743  : 		{	// construct with named file and specified mode

  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 35   : 		{	// construct from stream buffer pointer

  00047	8b 07		 mov	 eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 743  : 		{	// construct with named file and specified mode

  00049	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 35   : 		{	// construct from stream buffer pointer

  0004c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004f	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00056	c7 04 07 00 00
	00 00		 mov	 DWORD PTR [edi+eax], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0005d	8b 07		 mov	 eax, DWORD PTR [edi]
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 36   : 		_Myios::init(_Strbuf, _Isstd);

  00062	51		 push	 ecx
  00063	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  00066	89 44 39 fc	 mov	 DWORD PTR [ecx+edi-4], eax
  0006a	8b 07		 mov	 eax, DWORD PTR [edi]
  0006c	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00073	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  0007a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007d	56		 push	 esi
  0007e	03 cf		 add	 ecx, edi
  00080	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 743  : 		{	// construct with named file and specified mode

  00085	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0008c	8b 07		 mov	 eax, DWORD PTR [edi]
  0008e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00091	c7 04 07 00 00
	00 00		 mov	 DWORD PTR [edi+eax], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  00098	8b 07		 mov	 eax, DWORD PTR [edi]
  0009a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009d	8d 41 90	 lea	 eax, DWORD PTR [ecx-112]
  000a0	89 44 39 fc	 mov	 DWORD PTR [ecx+edi-4], eax

; 146  : 		{	// construct from pointer to C stream

  000a4	8b ce		 mov	 ecx, esi
  000a6	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 313  : 		_IGfirst = &_Gfirst;

  000ab	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ae	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 315  : 		_IGnext = &_Gnext;

  000b1	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  000b4	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 316  : 		_IPnext = &_Pnext;

  000b7	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  000ba	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 317  : 		_IGcount = &_Gcount;

  000bd	8d 46 24	 lea	 eax, DWORD PTR [esi+36]
  000c0	89 46 2c	 mov	 DWORD PTR [esi+44], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 146  : 		{	// construct from pointer to C stream

  000c3	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@

; 147  : 		_Init(_File, _Newfl);
; 148  : 		}
; 149  : 
; 150  : 	virtual __CLR_OR_THIS_CALL ~basic_filebuf() _NOEXCEPT
; 151  : 		{	// destroy the object
; 152  : 		if (_Myfile != 0)
; 153  : 			_Reset_back();	// revert from _Mychar buffer
; 154  : 		if (_Closef)
; 155  : 			close();
; 156  : 		}
; 157  : 
; 158  : 	typedef typename _Traits::int_type int_type;
; 159  : 	typedef typename _Traits::pos_type pos_type;
; 160  : 	typedef typename _Traits::off_type off_type;
; 161  : 
; 162  : 	basic_filebuf(_Uninitialized)
; 163  : 		: _Mysb(_Noinit)
; 164  : 		{	// construct uninitialized
; 165  : 		}
; 166  : 
; 167  : 	basic_filebuf(_Myt&& _Right)
; 168  : 		{	// construct by copying _Right
; 169  : 		_Init(_Right._Myfile, _Newfl);	// match buffering styles
; 170  : 		_Init((_Filet *)0, _Closefl);	// then make *this look closed
; 171  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 172  : 		}
; 173  : 
; 174  : 	_Myt& operator=(_Myt&& _Right)
; 175  : 		{	// assign from _Right
; 176  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 177  : 		return (*this);
; 178  : 		}
; 179  : 
; 180  : 	void _Assign_rv(_Myt&& _Right)
; 181  : 		{	// assign by moving _Right
; 182  : 		if (this != &_Right)
; 183  : 			{	// different, worth moving
; 184  : 			close();
; 185  : 			this->swap(_Right);
; 186  : 			}
; 187  : 		}
; 188  : 
; 189  : 	void swap(_Myt& _Right)
; 190  : 		{	// swap with _Right
; 191  : 		if (this != &_Right)
; 192  : 			{	// different, worth swapping
; 193  : 			// save values altered by _Init
; 194  : 			_Filet *_Myfile_sav = _Myfile;
; 195  : 			const _Cvt *_Pcvt_sav = _Pcvt;
; 196  : 			typename _Traits::state_type _State_sav = _State;
; 197  : 			bool _Wrotesome_sav = _Wrotesome;
; 198  : 			bool _Closef_sav = _Closef;
; 199  : 			bool _Set_eback_sav = _Mysb::eback() == &_Mychar;
; 200  : 			bool _Set_eback_live = _Mysb::gptr() == &_Mychar;
; 201  : 
; 202  : 			_Elem *_Pfirst = _Mysb::pbase();
; 203  : 			_Elem *_Pnext = _Mysb::pptr();
; 204  : 			_Elem *_Pend = _Mysb::epptr();
; 205  : 			_Elem *_Gfirst = _Mysb::eback();
; 206  : 			_Elem *_Gnext = _Mysb::gptr();
; 207  : 			_Elem *_Gend = _Mysb::egptr();
; 208  : 
; 209  : 			// reinitialize *this
; 210  : 			_Init(_Right._Myfile, _Right._Myfile != 0 ? _Openfl : _Newfl);
; 211  : 			_Mysb::setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
; 212  : 			if (_Right.eback() != &_Right._Mychar)
; 213  : 				_Mysb::setg(_Right.eback(), _Right.gptr(), _Right.egptr());
; 214  : 			else if (_Right.gptr() != &_Right._Mychar)
; 215  : 				_Mysb::setg(&_Mychar, &_Mychar + 1, &_Mychar + 1);
; 216  : 			else
; 217  : 				_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);
; 218  : 
; 219  : 			_Pcvt = _Right._Pcvt;
; 220  : 			_State = _Right._State;
; 221  : 			_Wrotesome = _Right._Wrotesome;
; 222  : 			_Closef = _Right._Closef;
; 223  : 
; 224  : 			// reinitialize _Right
; 225  : 			_Right._Init(_Myfile_sav, _Myfile_sav != 0 ? _Openfl : _Newfl);
; 226  : 			_Right.setp(_Pfirst, _Pnext, _Pend);
; 227  : 			if (!_Set_eback_sav)
; 228  : 				_Right.setg(_Gfirst, _Gnext, _Gend);
; 229  : 			else if (!_Set_eback_live)
; 230  : 				_Right.setg(&_Right._Mychar, &_Right._Mychar + 1,
; 231  : 					&_Right._Mychar + 1);
; 232  : 			else
; 233  : 				_Right.setg(&_Right._Mychar, &_Right._Mychar,
; 234  : 					&_Right._Mychar + 1);
; 235  : 
; 236  : 			_Right._Pcvt = _Pcvt_sav;
; 237  : 			_Right._State = _State_sav;
; 238  : 			_Right._Wrotesome = _Wrotesome_sav;
; 239  : 			_Right._Closef = _Closef_sav;
; 240  : 
; 241  : 			// swap ancillary data
; 242  : 			_STD swap(_Set_eback, _Right._Set_eback);
; 243  : 			_STD swap(_Set_egptr, _Right._Set_egptr);
; 244  : 			_STD swap(_Mychar, _Right._Mychar);
; 245  : 			_STD swap(_Mysb::_Plocale, _Right._Plocale);
; 246  : 			}
; 247  : 		}
; 248  : 
; 249  : private:
; 250  : 		basic_filebuf(const _Myt& _Right);	// not defined
; 251  : 		_Myt& operator=(const _Myt&);	// not defined
; 252  : public:
; 253  : 	enum _Initfl
; 254  : 		{	// reasons for a call to _Init
; 255  : 		_Newfl, _Openfl, _Closefl};
; 256  : 
; 257  : 	bool is_open() const
; 258  : 		{	// test if C stream has been opened
; 259  : 		return (_Myfile != 0);
; 260  : 		}
; 261  : 
; 262  : 	_Myt *open(const char *_Filename,
; 263  : 		ios_base::openmode _Mode,
; 264  : 		int _Prot = (int)ios_base::_Openprot)
; 265  : 		{	// open a C stream with specified mode
; 266  : 		_Filet *_File;
; 267  : 		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
; 268  : 			return (0);	// open failed
; 269  : 
; 270  : 		_Init(_File, _Openfl);
; 271  : 		_Initcvt(&_USE(_Mysb::getloc(), _Cvt));
; 272  : 		return (this);	// open succeeded
; 273  : 		}
; 274  : 
; 275  :  #if _HAS_CPP0X
; 276  : 	_Myt *open(const string& _Str,
; 277  : 		ios_base::openmode _Mode,
; 278  : 		int _Prot = (int)ios_base::_Openprot)
; 279  : 		{	// open a C stream with specified mode
; 280  : 		return (open(_Str.c_str(), _Mode, _Prot));
; 281  : 		}
; 282  :  #endif /* _HAS_CPP0X */
; 283  : 
; 284  : 	_Myt *open(const char *_Filename, ios_base::open_mode _Mode)
; 285  : 		{	// open a C stream with specified mode (old style)
; 286  : 		return (open(_Filename, (ios_base::openmode)_Mode));
; 287  : 		}
; 288  : 
; 289  : 	_Myt *open(const wchar_t *_Filename,
; 290  : 		ios_base::openmode _Mode,
; 291  : 		int _Prot = (int)ios_base::_Openprot)
; 292  : 		{	// open a wide-named C stream -- EXTENSION
; 293  : 		_Filet *_File;
; 294  : 		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
; 295  : 			return (0);	// open failed
; 296  : 
; 297  : 		_Init(_File, _Openfl);
; 298  : 		_Initcvt(&_USE(_Mysb::getloc(), _Cvt));
; 299  : 		return (this);	// open succeeded
; 300  : 		}
; 301  : 
; 302  :  #if _HAS_CPP0X
; 303  : 	_Myt *open(const wstring& _Str,
; 304  : 		ios_base::openmode _Mode,
; 305  : 		int _Prot = (int)ios_base::_Openprot)
; 306  : 		{	// open a wide-named C stream -- EXTENSION
; 307  : 		return (open(_Str.c_str(), _Mode, _Prot));
; 308  : 		}
; 309  :  #endif /* _HAS_CPP0X */
; 310  : 
; 311  : 	_Myt *open(const wchar_t *_Filename,
; 312  : 		ios_base::open_mode _Mode)
; 313  : 		{	// open a wide-named C stream (old style) -- EXTENSION
; 314  : 		return (open(_Filename, (ios_base::openmode)_Mode));
; 315  : 		}
; 316  : 
; 317  :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 318  : 	_Myt *open(const unsigned short *_Filename,
; 319  : 		ios_base::openmode _Mode,
; 320  : 		int _Prot = (int)ios_base::_Openprot)
; 321  : 		{	// open a wide-named C stream -- EXTENSION
; 322  : 		_Filet *_File;
; 323  : 		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
; 324  : 			return (0);	// open failed
; 325  : 
; 326  : 		_Init(_File, _Openfl);
; 327  : 		_Initcvt(&_USE(_Mysb::getloc(), _Cvt));
; 328  : 		return (this);	// open succeeded
; 329  : 		}
; 330  : 
; 331  : 	_Myt *open(const unsigned short *_Filename,
; 332  : 		ios_base::open_mode _Mode)
; 333  : 		{	// open a wide-named C stream (old style) -- EXTENSION
; 334  : 		return (open(_Filename, (ios_base::openmode)_Mode));
; 335  : 		}
; 336  :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 337  : 
; 338  : 	_Myt *close()
; 339  : 		{	// close the C stream
; 340  : 		_Myt *_Ans = this;
; 341  : 		if (_Myfile == 0)
; 342  : 			_Ans = 0;
; 343  : 		else
; 344  : 			{	// put any homing sequence and close file
; 345  : 			if (!_Endwrite())
; 346  : 				_Ans = 0;
; 347  : 			if (fclose(_Myfile) != 0)
; 348  : 				_Ans = 0;
; 349  : 			}
; 350  : 		_Init(0, _Closefl);
; 351  : 		return (_Ans);
; 352  : 		}
; 353  : 
; 354  : 	virtual void __CLR_OR_THIS_CALL _Lock()
; 355  : 		{	// lock file instead of stream buffer
; 356  : 		if (_Myfile)
; 357  : 			_CSTD _lock_file(_Myfile);
; 358  : 		}
; 359  : 
; 360  : 	virtual void __CLR_OR_THIS_CALL _Unlock()
; 361  : 		{	// unlock file instead of stream buffer
; 362  : 		if (_Myfile)
; 363  : 			_CSTD _unlock_file(_Myfile);
; 364  : 		}
; 365  : 
; 366  : protected:
; 367  : 	virtual int_type __CLR_OR_THIS_CALL overflow(int_type _Meta =
; 368  : 		_Traits::eof())
; 369  : 		{	// put an element to stream
; 370  : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))
; 371  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code
; 372  : 		else if (_Mysb::pptr() != 0
; 373  : 			&& _Mysb::pptr() < _Mysb::epptr())
; 374  : 			{	// room in buffer, store it
; 375  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
; 376  : 			return (_Meta);
; 377  : 			}
; 378  : 		else if (_Myfile == 0)
; 379  : 			return (_Traits::eof());	// no open C stream, fail
; 380  : 		_Reset_back();	// revert from _Mychar buffer
; 381  : 		if (_Pcvt == 0)
; 382  : 			return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)
; 383  : 				? _Meta : _Traits::eof());	// no codecvt facet, put as is
; 384  : 		else
; 385  : 			{	// put using codecvt facet
; 386  : 			const int _STRING_INC = 8;
; 387  : 			const _Elem _Ch = _Traits::to_char_type(_Meta);
; 388  : 			const _Elem *_Src;
; 389  : 			char *_Dest;
; 390  : 
; 391  : 			string _Str(_STRING_INC, '\0');
; 392  : 			for (; ; )
; 393  : 				switch (_Pcvt->out(_State,
; 394  : 					&_Ch, &_Ch + 1, _Src,
; 395  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
; 396  : 				{	// test result of converting one element
; 397  : 				case codecvt_base::partial:
; 398  : 				case codecvt_base::ok:
; 399  : 					{	// converted something, try to put it out
; 400  : 					size_t _Count = _Dest - &*_Str.begin();
; 401  : 					if (0 < _Count && _Count !=
; 402  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))
; 403  : 						return (_Traits::eof());	// write failed
; 404  : 
; 405  : 					_Wrotesome = true;	// write succeeded
; 406  : 					if (_Src != &_Ch)
; 407  : 						return (_Meta);	// converted whole element
; 408  : 
; 409  : 					if (0 < _Count)
; 410  : 						;
; 411  : 					else if (_Str.size() < 4 * _STRING_INC)
; 412  : 						_Str.append(_STRING_INC, '\0');	// try with more space
; 413  : 					else
; 414  : 						return (_Traits::eof());	// conversion failed
; 415  : 					break;
; 416  : 					}
; 417  : 
; 418  : 				case codecvt_base::noconv:
; 419  : 					return (_Fputc(_Ch, _Myfile) ? _Meta
; 420  : 						: _Traits::eof());	// no conversion, put as is
; 421  : 
; 422  : 				default:
; 423  : 					return (_Traits::eof());	// conversion failed
; 424  : 				}
; 425  : 			}
; 426  : 	}
; 427  : 
; 428  : 	virtual int_type __CLR_OR_THIS_CALL pbackfail(int_type _Meta =
; 429  : 		_Traits::eof())
; 430  : 		{	// put an element back to stream
; 431  : 		if (_Mysb::gptr() != 0
; 432  : 			&& _Mysb::eback() < _Mysb::gptr()
; 433  : 			&& (_Traits::eq_int_type(_Traits::eof(), _Meta)
; 434  : 			|| _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
; 435  : 				_Meta)))
; 436  : 			{	// just back up position
; 437  : 			_Mysb::_Gndec();
; 438  : 			return (_Traits::not_eof(_Meta));
; 439  : 			}
; 440  : 		else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))
; 441  : 			return (_Traits::eof());	// no open C stream or EOF, fail
; 442  : 		else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))
; 443  : 			return (_Meta);	// no facet and unget succeeded, return
; 444  : 		else if (_Mysb::gptr() != &_Mychar)
; 445  : 			{	// putback to _Mychar
; 446  : 			_Mychar = _Traits::to_char_type(_Meta);
; 447  : 			_Set_back();	// switch to _Mychar buffer
; 448  : 			return (_Meta);
; 449  : 			}
; 450  : 		else
; 451  : 			return (_Traits::eof());	// nowhere to put back
; 452  : 	}
; 453  : 
; 454  : 	virtual int_type __CLR_OR_THIS_CALL underflow()
; 455  : 		{	// get an element from stream, but don't point past it
; 456  : 		int_type _Meta;
; 457  : 		if (_Mysb::gptr() != 0
; 458  : 			&& _Mysb::gptr() < _Mysb::egptr())
; 459  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered
; 460  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
; 461  : 			return (_Meta);	// uflow failed, return EOF
; 462  : 		else
; 463  : 			{	// get a char, don't point past it
; 464  : 			pbackfail(_Meta);
; 465  : 			return (_Meta);
; 466  : 			}
; 467  : 		}
; 468  : 
; 469  : 	virtual int_type __CLR_OR_THIS_CALL uflow()
; 470  : 		{	// get an element from stream, point past it
; 471  : 		if (_Mysb::gptr() != 0
; 472  : 			&& _Mysb::gptr() < _Mysb::egptr())
; 473  : 			return (_Traits::to_int_type(
; 474  : 				*_Mysb::_Gninc()));	// return buffered
; 475  : 		else if (_Myfile == 0)
; 476  : 			return (_Traits::eof());	// no open C stream, fail
; 477  : 		_Reset_back();	// revert from _Mychar buffer
; 478  : 		if (_Pcvt == 0)
; 479  : 			{	// no codecvt facet, just get it
; 480  : 			_Elem _Ch = 0;
; 481  : 			return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch)
; 482  : 				: _Traits::eof());
; 483  : 			}
; 484  : 		else
; 485  : 			{	// build string until codecvt succeeds
; 486  : 			string _Str;
; 487  : 
; 488  : 			for (; ; )
; 489  : 				{	// get using codecvt facet
; 490  : 				_Elem _Ch, *_Dest;
; 491  : 				const char *_Src;
; 492  : 				int _Nleft;
; 493  : 				int _Meta = fgetc(_Myfile);
; 494  : 
; 495  : 				if (_Meta == EOF)
; 496  : 					return (_Traits::eof());	// partial char?
; 497  : 
; 498  : 				_Str.append(1, (char)_Meta);	// append byte and convert
; 499  : 				switch (_Pcvt->in(_State,
; 500  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Src,
; 501  : 					&_Ch, &_Ch + 1, _Dest))
; 502  : 					{	// test result of converting one element
; 503  : 				case codecvt_base::partial:
; 504  : 				case codecvt_base::ok:
; 505  : 					if (_Dest != &_Ch)
; 506  : 						{	// got an element, put back excess and deliver it
; 507  : 						_Nleft = (int)(&*_Str.begin() + _Str.size() - _Src);
; 508  : 						for (; 0 < _Nleft; )
; 509  : 							ungetc(_Src[--_Nleft], _Myfile);
; 510  : 						return (_Traits::to_int_type(_Ch));
; 511  : 						}
; 512  : 					else
; 513  : 						_Str.erase((size_t)0,	// partial, discard used input
; 514  : 							(size_t)(_Src - &*_Str.begin()));
; 515  : 					break;
; 516  : 
; 517  : 				case codecvt_base::noconv:
; 518  : 					if (_Str.size() < sizeof (_Elem))
; 519  : 						break;	// no conversion, but need more chars
; 520  : 
; 521  : 					_CRT_SECURE_MEMCPY(&_Ch, sizeof (_Elem), &*_Str.begin(),
; 522  : 						sizeof (_Elem));	// copy raw bytes to element
; 523  : 
; 524  : 					return (_Traits::to_int_type(_Ch));	// return result
; 525  : 
; 526  : 				default:
; 527  : 					return (_Traits::eof());	// conversion failed
; 528  : 					}
; 529  : 				}
; 530  : 			}
; 531  : 		}
; 532  : 
; 533  : 	virtual pos_type __CLR_OR_THIS_CALL seekoff(off_type _Off,
; 534  : 		ios_base::seekdir _Way,
; 535  : 		ios_base::openmode =
; 536  : 			(ios_base::openmode)(ios_base::in | ios_base::out))
; 537  : 		{	// change position by _Off
; 538  : 		fpos_t _Fileposition;
; 539  : 
; 540  : 		if (_Mysb::gptr() == &_Mychar	// something putback
; 541  : 			&& _Way == ios_base::cur	// a relative seek
; 542  : 			&& _Pcvt == 0)	// not converting
; 543  : 			_Off -= (off_type)sizeof (_Elem);	// back up over _Elem bytes
; 544  : 
; 545  : 		if (_Myfile == 0 || !_Endwrite()
; 546  : 			|| (_Off != 0 || _Way != ios_base::cur)
; 547  : 				&& _FSEEK_OFF(_Myfile, _Off, _Way) != 0
; 548  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)
; 549  : 			return (pos_type(_BADOFF));	// report failure
; 550  : 
; 551  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback
; 552  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,
; 553  : 			_Fileposition));	// return new position
; 554  : 		}
; 555  : 
; 556  : 	virtual pos_type __CLR_OR_THIS_CALL seekpos(pos_type _Pos,
; 557  : 		ios_base::openmode =
; 558  : 			(ios_base::openmode)(ios_base::in | ios_base::out))
; 559  : 		{	// change position to _Pos
; 560  : 		fpos_t _Fileposition = _POS_TYPE_TO_FPOS_T(_Pos);
; 561  : 		off_type _Off = (off_type)_Pos - (off_type)_FPOSOFF(_Fileposition);
; 562  : 
; 563  : 		if (_Myfile == 0 || !_Endwrite()
; 564  : 			|| fsetpos(_Myfile, &_Fileposition) != 0
; 565  : 			|| _Off != 0 && _FSEEK_OFF(_Myfile, _Off, SEEK_CUR) != 0
; 566  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)
; 567  : 			return (pos_type(_BADOFF));	// report failure
; 568  : 
; 569  : 		_State = _POS_TYPE_TO_STATE(_Pos);
; 570  : 
; 571  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback
; 572  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,
; 573  : 			_Fileposition));	// return new position
; 574  : 		}
; 575  : 
; 576  : 	virtual _Mysb *__CLR_OR_THIS_CALL setbuf(_Elem *_Buffer, streamsize _Count)
; 577  : 		{	// offer _Buffer to C stream
; 578  : 		if (_Myfile == 0 || setvbuf(_Myfile, (char *)_Buffer,
; 579  : 			_Buffer == 0 && _Count == 0 ? _IONBF : _IOFBF,
; 580  : 			(size_t)_Count * sizeof (_Elem)) != 0)
; 581  : 			return (0);	// failed
; 582  : 		else
; 583  : 			{	// new buffer, reinitialize pointers
; 584  : 			_Init(_Myfile, _Openfl);
; 585  : 			return (this);
; 586  : 			}
; 587  : 		}
; 588  : 
; 589  : 	virtual int __CLR_OR_THIS_CALL sync()
; 590  : 		{	// synchronize C stream with external file
; 591  : 		return (_Myfile == 0
; 592  : 			|| _Traits::eq_int_type(_Traits::eof(), overflow())
; 593  : 			|| 0 <= fflush(_Myfile) ? 0 : -1);
; 594  : 		}
; 595  : 
; 596  : 	virtual void __CLR_OR_THIS_CALL imbue(const locale& _Loc)
; 597  : 		{	// set locale to argument (capture nontrivial codecvt facet)
; 598  : 		_Initcvt(&_USE(_Loc, _Cvt));
; 599  : 		}
; 600  : 
; 601  : 	void _Init(_Filet *_File, _Initfl _Which)
; 602  : 		{	// initialize to C stream _File after {new, open, close}
; 603  : 		__PURE_APPDOMAIN_GLOBAL static _Myst _Stinit;	// initial state
; 604  : 
; 605  : 		_Closef = _Which == _Openfl;

  000c9	c6 46 4c 00	 mov	 BYTE PTR [esi+76], 0

; 606  : 		_Wrotesome = false;

  000cd	c6 46 45 00	 mov	 BYTE PTR [esi+69], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 314  : 		_IPfirst = &_Pfirst;

  000d1	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  000d4	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 318  : 		_IPcount = &_Pcount;

  000d7	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  000da	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;
; 266  : 		return ((*_IGnext)++);
; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);
; 278  : 		}
; 279  : 
; 280  : 	void __CLR_OR_THIS_CALL pbump(int _Off)
; 281  : 		{	// alter current position in write buffer by _Off
; 282  : 		*_IPcount -= _Off;
; 283  : 		*_IPnext += _Off;
; 284  : 		}
; 285  : 
; 286  : 	void __CLR_OR_THIS_CALL setp(_Elem *_First, _Elem *_Last)
; 287  : 		{	// set pointers for write buffer
; 288  : 		*_IPfirst = _First;

  000dd	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 289  : 		*_IPnext = _First;

  000e3	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000e6	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 290  : 		*_IPcount = (int)(_Last - _First);

  000ec	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000ef	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 247  : 		*_IGfirst = _First;

  000f5	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000f8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 248  : 		*_IGnext = _Next;

  000fe	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00101	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 249  : 		*_IGcount = (int)(_Last - _Next);

  00107	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0010a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 629  : 		_State = _Stinit;

  00110	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
  00115	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
  0011c	89 46 48	 mov	 DWORD PTR [esi+72], eax

; 630  : 		_Pcvt = 0;	// pointer to codecvt facet

  0011f	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 744  : 		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)

  00126	83 ec 08	 sub	 esp, 8
  00129	8b ce		 mov	 ecx, esi
  0012b	ff 75 08	 push	 DWORD PTR __Filename$[ebp]
  0012e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00132	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  00137	85 c0		 test	 eax, eax
  00139	75 29		 jne	 SHORT $LN58@basic_ifst

; 745  : 			_Myios::setstate(ios_base::failbit);

  0013b	8b 07		 mov	 eax, DWORD PTR [edi]
  0013d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00140	8b 44 39 0c	 mov	 eax, DWORD PTR [ecx+edi+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 745  : 			_Myios::setstate(ios_base::failbit);

  00144	03 cf		 add	 ecx, edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00146	83 c8 02	 or	 eax, 2

; 54   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00149	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0014d	75 03		 jne	 SHORT $LN43@basic_ifst
  0014f	83 c8 04	 or	 eax, 4
$LN43@basic_ifst:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 302  : 		_Mystate = (iostate)(_State & _Statmask);

  00152	83 e0 17	 and	 eax, 23			; 00000017H
  00155	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 303  : 		if ((_Mystate & _Except) == 0)

  00158	85 41 10	 test	 DWORD PTR [ecx+16], eax
  0015b	74 07		 je	 SHORT $LN58@basic_ifst
  0015d	6a 00		 push	 0
  0015f	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN58@basic_ifst:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 746  : 		}

  00164	8b c7		 mov	 eax, edi
  00166	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00169	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00170	59		 pop	 ecx
  00171	5f		 pop	 edi
  00172	5e		 pop	 esi
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN6@basic_ifst
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 70	 add	 ecx, 112		; 00000070H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN6@basic_ifst:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1:
  0001c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 18	 add	 ecx, 24			; 00000018H
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2:
  00027	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 c1 10	 add	 ecx, 16			; 00000010H
  0002d	e9 00 00 00 00	 jmp	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z:
  00032	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00036	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00039	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  00048	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?end@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::end, COMDAT
; _this$ = ecx

; 991  : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 992  : 		return (iterator(this->_Mylast, this));
; 993  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::resize, COMDAT
; _this$ = ecx

; 1059 : 		{	// determine new length, padding as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi

; 1076 : 
; 1077 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1078 : 		{	// determine new length, padding with _Val elements as needed
; 1079 : 		if (_Newsize < size())
; 1080 : 			erase(begin() + _Newsize, end());
; 1081 : 		else if (size() < _Newsize)
; 1082 : 			_Insert_n(end(), _Newsize - size(), _Val);
; 1083 : 		}
; 1084 : 
; 1085 : 	size_type size() const _NOEXCEPT
; 1086 : 		{	// return length of sequence
; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00007	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0000a	8b 13		 mov	 edx, DWORD PTR [ebx]

; 1060 : 		if (_Newsize < size())

  0000c	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]

; 1076 : 
; 1077 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1078 : 		{	// determine new length, padding with _Val elements as needed
; 1079 : 		if (_Newsize < size())
; 1080 : 			erase(begin() + _Newsize, end());
; 1081 : 		else if (size() < _Newsize)
; 1082 : 			_Insert_n(end(), _Newsize - size(), _Val);
; 1083 : 		}
; 1084 : 
; 1085 : 	size_type size() const _NOEXCEPT
; 1086 : 		{	// return length of sequence
; 1087 : 		return (this->_Mylast - this->_Myfirst);

  0000f	8b c8		 mov	 ecx, eax
  00011	2b ca		 sub	 ecx, edx

; 1060 : 		if (_Newsize < size())

  00013	3b ce		 cmp	 ecx, esi
  00015	76 30		 jbe	 SHORT $LN129@resize

; 170  : 		_Ptr += _Off;

  00017	03 f2		 add	 esi, edx

; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		_Compat(_Right);
; 205  : 		return (this->_Ptr == _Right._Ptr);

  00019	3b f2		 cmp	 esi, edx

; 1088 : 		}
; 1089 : 
; 1090 : 	size_type max_size() const _NOEXCEPT
; 1091 : 		{	// return maximum possible length of sequence
; 1092 : 		return (this->_Getal().max_size());
; 1093 : 		}
; 1094 : 
; 1095 : 	bool empty() const _NOEXCEPT
; 1096 : 		{	// test if sequence is empty
; 1097 : 		return (this->_Myfirst == this->_Mylast);
; 1098 : 		}
; 1099 : 
; 1100 : 	_Alloc get_allocator() const _NOEXCEPT
; 1101 : 		{	// return allocator object for values
; 1102 : 		return (this->_Getal());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_reference at(size_type _Pos) const
; 1106 : 		{	// subscript nonmutable sequence with checking
; 1107 : 		if (size() <= _Pos)
; 1108 : 			_Xran();
; 1109 : 		return (*(this->_Myfirst + _Pos));
; 1110 : 		}
; 1111 : 
; 1112 : 	reference at(size_type _Pos)
; 1113 : 		{	// subscript mutable sequence with checking
; 1114 : 		if (size() <= _Pos)
; 1115 : 			_Xran();
; 1116 : 		return (*(this->_Myfirst + _Pos));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_reference operator[](size_type _Pos) const
; 1120 : 		{	// subscript nonmutable sequence
; 1121 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 : 		if (size() <= _Pos)
; 1123 : 			{	// report error
; 1124 : 			_DEBUG_ERROR("vector subscript out of range");
; 1125 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1126 : 			}
; 1127 : 
; 1128 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1129 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1130 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1131 : 
; 1132 : 		return (*(this->_Myfirst + _Pos));
; 1133 : 		}
; 1134 : 
; 1135 : 	reference operator[](size_type _Pos)
; 1136 : 		{	// subscript mutable sequence
; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));
; 1149 : 		}
; 1150 : 
; 1151 :  #if _HAS_CPP0X
; 1152 : 	pointer data() _NOEXCEPT
; 1153 : 		{	// return address of first element
; 1154 : 		return (this->_Myfirst);
; 1155 : 		}
; 1156 : 
; 1157 : 	const_pointer data() const _NOEXCEPT
; 1158 : 		{	// return address of first element
; 1159 : 		return (this->_Myfirst);
; 1160 : 		}
; 1161 :  #endif /* _HAS_CPP0X */
; 1162 : 
; 1163 : 	reference front()
; 1164 : 		{	// return first element of mutable sequence
; 1165 : 		return (*begin());
; 1166 : 		}
; 1167 : 
; 1168 : 	const_reference front() const
; 1169 : 		{	// return first element of nonmutable sequence
; 1170 : 		return (*begin());
; 1171 : 		}
; 1172 : 
; 1173 : 	reference back()
; 1174 : 		{	// return last element of mutable sequence
; 1175 : 		return (*(end() - 1));
; 1176 : 		}
; 1177 : 
; 1178 : 	const_reference back() const
; 1179 : 		{	// return last element of nonmutable sequence
; 1180 : 		return (*(end() - 1));
; 1181 : 		}
; 1182 : 
; 1183 : 	void push_back(const value_type& _Val)
; 1184 : 		{	// insert element at end
; 1185 : 		if (_Inside(_STD addressof(_Val)))
; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1188 : 			if (this->_Mylast == this->_Myend)
; 1189 : 				_Reserve(1);
; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);
; 1193 : 			++this->_Mylast;
; 1194 : 			}
; 1195 : 		else
; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)
; 1198 : 				_Reserve(1);
; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);
; 1202 : 			++this->_Mylast;
; 1203 : 			}
; 1204 : 		}
; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())

  0001b	75 09		 jne	 SHORT $LN38@resize
  0001d	5e		 pop	 esi

; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;

  0001e	89 53 04	 mov	 DWORD PTR [ebx+4], edx
  00021	5b		 pop	 ebx

; 1074 : 			}
; 1075 : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN38@resize:

; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		_Compat(_Right);
; 205  : 		return (this->_Ptr == _Right._Ptr);

  00026	3b f0		 cmp	 esi, eax

; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)

  00028	74 47		 je	 SHORT $LN2@resize
  0002a	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2475 : 	ptrdiff_t _Count = _Last - _First;

  0002b	8b f8		 mov	 edi, eax
  0002d	2b f8		 sub	 edi, eax

; 2476 : 	_CSTD memmove(&*_Dest, &*_First,
; 2477 : 		_Count * sizeof (*_First));

  0002f	57		 push	 edi
  00030	50		 push	 eax
  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 _memmove
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2478 : 	return (_Dest + _Count);

  0003a	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1073 : 			this->_Mylast += _Newsize - size();

  0003f	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00042	5b		 pop	 ebx

; 1074 : 			}
; 1075 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN129@resize:

; 1061 : 			erase(begin() + _Newsize, end());
; 1062 : 		else if (size() < _Newsize)

  00047	73 28		 jae	 SHORT $LN2@resize

; 1063 : 			{	// pad as needed
; 1064 : 			_Alty _Alval(this->_Getal());
; 1065 : 			_Reserve(_Newsize - size());

  00049	2b d0		 sub	 edx, eax
  0004b	03 d6		 add	 edx, esi
  0004d	52		 push	 edx
  0004e	8b cb		 mov	 ecx, ebx
  00050	e8 00 00 00 00	 call	 ?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reserve
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2699 : 	_CSTD memset(_Dest, _Val, _Count);

  00055	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00058	8b 03		 mov	 eax, DWORD PTR [ebx]
  0005a	2b c1		 sub	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1068 : 				_Alval);

  0005c	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2699 : 	_CSTD memset(_Dest, _Val, _Count);

  0005e	50		 push	 eax
  0005f	6a 00		 push	 0
  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 _memset
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1073 : 			this->_Mylast += _Newsize - size();

  00067	8b 03		 mov	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2699 : 	_CSTD memset(_Dest, _Val, _Count);

  00069	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1073 : 			this->_Mylast += _Newsize - size();

  0006c	03 c6		 add	 eax, esi
  0006e	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN2@resize:
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx

; 1074 : 			}
; 1075 : 		}

  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::size, COMDAT
; _this$ = ecx

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1088 : 		}

  00005	c3		 ret	 0
?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?empty@?$vector@EV?$allocator@E@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@EV?$allocator@E@std@@@std@@QBE_NXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::empty, COMDAT
; _this$ = ecx

; 1097 : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	33 c0		 xor	 eax, eax
  00004	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00007	0f 94 c0	 sete	 al

; 1098 : 		}

  0000a	c3		 ret	 0
?empty@?$vector@EV?$allocator@E@std@@@std@@QBE_NXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??A?$vector@EV?$allocator@E@std@@@std@@QBEABEI@Z
_TEXT	SEGMENT
__Pos$dead$ = 8						; size = 4
??A?$vector@EV?$allocator@E@std@@@std@@QBEABEI@Z PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::operator[], COMDAT
; _this$ = ecx

; 1121 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 : 		if (size() <= _Pos)
; 1123 : 			{	// report error
; 1124 : 			_DEBUG_ERROR("vector subscript out of range");
; 1125 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1126 : 			}
; 1127 : 
; 1128 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1129 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1130 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1131 : 
; 1132 : 		return (*(this->_Myfirst + _Pos));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1133 : 		}

  00002	c2 04 00	 ret	 4
??A?$vector@EV?$allocator@E@std@@@std@@QBEABEI@Z ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 1080 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 a0	 mov	 eax, DWORD PTR [esi-96]

; 1081 : 		}

  00006	8d 4e a4	 lea	 ecx, DWORD PTR [esi-92]
  00009	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000c	c7 44 30 a0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-96], OFFSET ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  00014	8b 46 a0	 mov	 eax, DWORD PTR [esi-96]
  00017	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001a	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  0001d	89 44 32 9c	 mov	 DWORD PTR [edx+esi-100], eax
  00021	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 87   : 		{	// destroy the object

  00026	8b 46 a0	 mov	 eax, DWORD PTR [esi-96]
  00029	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002c	c7 44 30 a0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-96], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00034	8b 46 a0	 mov	 eax, DWORD PTR [esi-96]
  00037	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003a	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0003d	89 44 31 9c	 mov	 DWORD PTR [ecx+esi-100], eax
  00041	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 1081 : 		}

  00042	c3		 ret	 0
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 71 f8	 lea	 esi, DWORD PTR [ecx-8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 87   : 		{	// destroy the object

  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 532  : 		_Ios_base_dtor(this);

  0000f	52		 push	 edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 87   : 		{	// destroy the object

  00010	c7 44 10 f8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00018	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  00021	89 44 11 f4	 mov	 DWORD PTR [ecx+edx-12], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 531  : 		{	// destroy the object

  00025	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ios_base@std@@6B@

; 532  : 		_Ios_base_dtor(this);

  0002b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00030	83 c4 04	 add	 esp, 4
  00033	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00037	74 09		 je	 SHORT $LN12@scalar
  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003f	83 c4 04	 add	 esp, 4
$LN12@scalar:
  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8d 79 a0	 lea	 edi, DWORD PTR [ecx-96]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 1080 : 		{	// destroy the object

  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8d 77 60	 lea	 esi, DWORD PTR [edi+96]
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	c7 44 30 a0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-96], OFFSET ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  00018	8b 46 a0	 mov	 eax, DWORD PTR [esi-96]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	8d 41 a0	 lea	 eax, DWORD PTR [ecx-96]
  00021	89 44 31 9c	 mov	 DWORD PTR [ecx+esi-100], eax

; 1081 : 		}

  00025	8d 4e a4	 lea	 ecx, DWORD PTR [esi-92]
  00028	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 87   : 		{	// destroy the object

  0002d	8b 46 a0	 mov	 eax, DWORD PTR [esi-96]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 532  : 		_Ios_base_dtor(this);

  00030	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 87   : 		{	// destroy the object

  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	c7 44 30 a0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-96], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0003c	8b 46 a0	 mov	 eax, DWORD PTR [esi-96]
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  00045	89 44 31 9c	 mov	 DWORD PTR [ecx+esi-100], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 531  : 		{	// destroy the object

  00049	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@

; 532  : 		_Ios_base_dtor(this);

  0004f	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00054	83 c4 04	 add	 esp, 4
  00057	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0005b	74 09		 je	 SHORT $LN14@scalar
  0005d	57		 push	 edi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00063	83 c4 04	 add	 esp, 4
$LN14@scalar:
  00066	8b c7		 mov	 eax, edi
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
;	COMDAT ?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Noskip$dead$ = 8					; size = 1
?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::_Ipfx, COMDAT
; _this$ = ecx

; 130  : 		{	// test stream state and skip whitespace as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002a	03 ce		 add	 ecx, esi

; 328  : 		}
; 329  : 
; 330  : 	void __CLR_OR_THIS_CALL setstate(iostate _State, bool _Exreraise)
; 331  : 		{	// merge in state argument, possibly reraise exception
; 332  : 		if (_State != goodbit)
; 333  : 			clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
; 334  : 		}
; 335  : 
; 336  : 	void __CLR_OR_THIS_CALL setstate(iostate _State)
; 337  : 		{	// merge in state argument
; 338  : 		if (_State != goodbit)
; 339  : 			clear((iostate)((int)rdstate() | (int)_State), false);
; 340  : 		}
; 341  : 
; 342  : 	void __CLR_OR_THIS_CALL setstate(io_state _State)
; 343  : 		{	// merge in state argument, old style
; 344  : 		setstate((iostate)_State);
; 345  : 		}
; 346  : 
; 347  : 	bool __CLR_OR_THIS_CALL good() const
; 348  : 		{	// test if no state bits are set
; 349  : 		return (rdstate() == goodbit);

  0002c	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 131  : 		if (this->good())

  00030	75 2f		 jne	 SHORT $LN1@Ipfx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 84   : 		return (_Tiestr);

  00032	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 133  : 			if (_Myios::tie() != 0)

  00035	85 c9		 test	 ecx, ecx
  00037	74 07		 je	 SHORT $LL39@Ipfx

; 134  : 				_Myios::tie()->flush();

  00039	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
  0003e	8b ff		 npad	 2
$LL39@Ipfx:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00045	03 ce		 add	 ecx, esi

; 328  : 		}
; 329  : 
; 330  : 	void __CLR_OR_THIS_CALL setstate(iostate _State, bool _Exreraise)
; 331  : 		{	// merge in state argument, possibly reraise exception
; 332  : 		if (_State != goodbit)
; 333  : 			clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
; 334  : 		}
; 335  : 
; 336  : 	void __CLR_OR_THIS_CALL setstate(iostate _State)
; 337  : 		{	// merge in state argument
; 338  : 		if (_State != goodbit)
; 339  : 			clear((iostate)((int)rdstate() | (int)_State), false);
; 340  : 		}
; 341  : 
; 342  : 	void __CLR_OR_THIS_CALL setstate(io_state _State)
; 343  : 		{	// merge in state argument, old style
; 344  : 		setstate((iostate)_State);
; 345  : 		}
; 346  : 
; 347  : 	bool __CLR_OR_THIS_CALL good() const
; 348  : 		{	// test if no state bits are set
; 349  : 		return (rdstate() == goodbit);

  00047	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 155  : 			if (this->good())

  0004b	75 14		 jne	 SHORT $LN1@Ipfx

; 156  : 				return (true);

  0004d	b0 01		 mov	 al, 1

; 160  : 		}

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	5e		 pop	 esi
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN1@Ipfx:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00061	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00064	83 c8 02	 or	 eax, 2

; 54   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00067	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0006b	75 03		 jne	 SHORT $LN113@Ipfx
  0006d	83 c8 04	 or	 eax, 4
$LN113@Ipfx:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 302  : 		_Mystate = (iostate)(_State & _Statmask);

  00070	83 e0 17	 and	 eax, 23			; 00000017H
  00073	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 303  : 		if ((_Mystate & _Except) == 0)

  00076	85 41 10	 test	 DWORD PTR [ecx+16], eax
  00079	74 07		 je	 SHORT $LN121@Ipfx
  0007b	6a 00		 push	 0
  0007d	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN121@Ipfx:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 159  : 		return (false);

  00082	32 c0		 xor	 al, al

; 160  : 		}

  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5e		 pop	 esi
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Ipfx
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 88   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 89   : 			if (_Myistr.rdbuf() != 0)

  0000b	8b 02		 mov	 eax, DWORD PTR [edx]
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
  00014	85 c9		 test	 ecx, ecx
  00016	74 05		 je	 SHORT $LN8@Sentry_bas

; 90   : 				_Myistr.rdbuf()->_Lock();

  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	ff 50 04	 call	 DWORD PTR [eax+4]
$LN8@Sentry_bas:

; 91   : 			}

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?pubseekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@_JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$dead$ = 12					; size = 8
__Way$ = 20						; size = 4
__Mode$dead$ = 24					; size = 4
?pubseekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@_JHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubseekoff, COMDAT
; _this$ = ecx

; 90   : 		{	// change position by _Off, according to _Way, _Mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 91   : 		return (seekoff(_Off, _Way, _Mode));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	6a 01		 push	 1
  00007	ff 75 14	 push	 DWORD PTR __Way$[ebp]
  0000a	6a 00		 push	 0
  0000c	6a 00		 push	 0
  0000e	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00011	ff 50 28	 call	 DWORD PTR [eax+40]
  00014	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 92   : 		}

  00017	5d		 pop	 ebp
  00018	c2 14 00	 ret	 20			; 00000014H
?pubseekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@_JHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubseekoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT
; _this$ = ecx

; 141  : 		return (sync());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 34	 jmp	 DWORD PTR [eax+52]
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?sgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPAD_J@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?sgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sgetn, COMDAT
; _this$ = ecx

; 158  : 		{	// get up to _Count characters into array beginning at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 159  : 		return (xsgetn(_Ptr, _Count));

  00003	ff 75 10	 push	 DWORD PTR __Count$[ebp+4]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0000b	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0000e	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00011	ff d0		 call	 eax

; 160  : 		}

  00013	5d		 pop	 ebp
  00014	c2 0c 00	 ret	 12			; 0000000cH
?sgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sgetn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gnpreinc, COMDAT
; _this$ = ecx

; 271  : 		--*_IGcount;

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 272  : 		return (++(*_IGnext));

  00005	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	40		 inc	 eax
  0000b	89 01		 mov	 DWORD PTR [ecx], eax

; 273  : 		}

  0000d	c3		 ret	 0
?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gnpreinc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T2 = 8							; size = 4
__Filename$ = 8						; size = 4
__Mode$dead$ = 12					; size = 4
__Prot$dead$ = 16					; size = 4
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::open, COMDAT
; _this$ = ecx

; 265  : 		{	// open a C stream with specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 266  : 		_Filet *_File;
; 267  : 		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)

  00025	83 7e 50 00	 cmp	 DWORD PTR [esi+80], 0
  00029	75 73		 jne	 SHORT $LN1@open
  0002b	6a 40		 push	 64			; 00000040H
  0002d	6a 25		 push	 37			; 00000025H
  0002f	ff 75 08	 push	 DWORD PTR __Filename$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z ; std::_Fiopen
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	85 c0		 test	 eax, eax
  0003c	74 60		 je	 SHORT $LN1@open

; 269  : 
; 270  : 		_Init(_File, _Openfl);

  0003e	6a 01		 push	 1
  00040	50		 push	 eax
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 271  : 		_Initcvt(&_USE(_Mysb::getloc(), _Cvt));

  00048	8d 45 08	 lea	 eax, DWORD PTR $T2[ebp]
  0004b	50		 push	 eax
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ ; std::basic_streambuf<char,std::char_traits<char> >::getloc
  00053	50		 push	 eax
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005b	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
  00060	83 c4 04	 add	 esp, 4
  00063	8b ce		 mov	 ecx, esi
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
  0006b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 422  : 		if (_Ptr != 0)

  00072	8b 4d 08	 mov	 ecx, DWORD PTR $T2[ebp]
  00075	85 c9		 test	 ecx, ecx
  00077	74 11		 je	 SHORT $LN9@open

; 423  : 			_DELETE_CRT(_Ptr->_Decref());

  00079	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007b	ff 50 08	 call	 DWORD PTR [eax+8]
  0007e	85 c0		 test	 eax, eax
  00080	74 08		 je	 SHORT $LN9@open
  00082	8b 10		 mov	 edx, DWORD PTR [eax]
  00084	6a 01		 push	 1
  00086	8b c8		 mov	 ecx, eax
  00088	ff 12		 call	 DWORD PTR [edx]
$LN9@open:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 272  : 		return (this);	// open succeeded

  0008a	8b c6		 mov	 eax, esi

; 273  : 		}

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5e		 pop	 esi
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
$LN1@open:

; 268  : 			return (0);	// open failed

  0009e	33 c0		 xor	 eax, eax

; 273  : 		}

  000a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000aa	59		 pop	 ecx
  000ab	5e		 pop	 esi
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::open
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::begin, COMDAT
; _this$ = ecx

; 981  : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 982  : 		return (iterator(this->_Myfirst, this));
; 983  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@0@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::erase, COMDAT
; _this$ = ecx

; 1381 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1382 : 		if (_First_arg == begin() && _Last_arg == end())

  00003	8b 45 10	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	57		 push	 edi

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		_Compat(_Right);
; 205  : 		return (this->_Ptr == _Right._Ptr);

  0000a	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __First_arg$[ebp]
  0000f	3b f9		 cmp	 edi, ecx

; 1382 : 		if (_First_arg == begin() && _Last_arg == end())

  00011	75 13		 jne	 SHORT $LN4@erase

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		_Compat(_Right);
; 205  : 		return (this->_Ptr == _Right._Ptr);

  00013	3b 43 04	 cmp	 eax, DWORD PTR [ebx+4]

; 1382 : 		if (_First_arg == begin() && _Last_arg == end())

  00016	75 0e		 jne	 SHORT $LN4@erase

; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;

  00018	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN77@erase:

; 47   : 		{	// construct with pointer _Parg

  0001b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	89 38		 mov	 DWORD PTR [eax], edi
  00020	5f		 pop	 edi
  00021	5b		 pop	 ebx

; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
$LN4@erase:

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		_Compat(_Right);
; 205  : 		return (this->_Ptr == _Right._Ptr);

  00026	3b f8		 cmp	 edi, eax

; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)

  00028	74 f1		 je	 SHORT $LN77@erase
  0002a	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2475 : 	ptrdiff_t _Count = _Last - _First;

  0002b	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  0002e	2b f0		 sub	 esi, eax

; 2477 : 		_Count * sizeof (*_First));

  00030	56		 push	 esi
  00031	50		 push	 eax
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 47   : 		{	// construct with pointer _Parg

  00038	8b 4d 0c	 mov	 ecx, DWORD PTR __First_arg$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2477 : 		_Count * sizeof (*_First));

  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2478 : 	return (_Dest + _Count);

  0003e	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1406 : 				this->_Mylast = _Ptr;

  00041	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 47   : 		{	// construct with pointer _Parg

  00044	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00047	5e		 pop	 esi
  00048	5f		 pop	 edi
  00049	89 08		 mov	 DWORD PTR [eax], ecx
  0004b	5b		 pop	 ebx

; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}

  0004c	5d		 pop	 ebp
  0004d	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@0@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reserve, COMDAT
; _this$ = ecx

; 1525 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 968  : 		}
; 969  : 
; 970  : 	size_type _Unused_capacity() const _NOEXCEPT
; 971  : 		{	// micro-optimization for capacity() - size()
; 972  : 		return (this->_Myend - this->_Mylast);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	56		 push	 esi
  00007	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000a	8b c2		 mov	 eax, edx
  0000c	57		 push	 edi

; 1526 : 		if (_Unused_capacity() < _Count)

  0000d	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]

; 968  : 		}
; 969  : 
; 970  : 	size_type _Unused_capacity() const _NOEXCEPT
; 971  : 		{	// micro-optimization for capacity() - size()
; 972  : 		return (this->_Myend - this->_Mylast);

  00010	2b c6		 sub	 eax, esi

; 1526 : 		if (_Unused_capacity() < _Count)

  00012	3b c7		 cmp	 eax, edi
  00014	73 44		 jae	 SHORT $LN2@Reserve

; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)

  00016	53		 push	 ebx
  00017	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00019	8b c3		 mov	 eax, ebx
  0001b	2b c6		 sub	 eax, esi
  0001d	48		 dec	 eax
  0001e	3b c7		 cmp	 eax, edi
  00020	72 3e		 jb	 SHORT $LN43@Reserve

; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

  00022	2b f3		 sub	 esi, ebx

; 967  : 		return (this->_Myend - this->_Myfirst);

  00024	2b d3		 sub	 edx, ebx

; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

  00026	03 f7		 add	 esi, edi

; 973  : 		}
; 974  : 
; 975  : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 976  : 		{	// micro-optimization for capacity() != size()
; 977  : 		return (this->_Myend != this->_Mylast);
; 978  : 		}
; 979  : 
; 980  : 	iterator begin() _NOEXCEPT
; 981  : 		{	// return iterator for beginning of mutable sequence
; 982  : 		return (iterator(this->_Myfirst, this));
; 983  : 		}
; 984  : 
; 985  : 	const_iterator begin() const _NOEXCEPT
; 986  : 		{	// return iterator for beginning of nonmutable sequence
; 987  : 		return (const_iterator(this->_Myfirst, this));
; 988  : 		}
; 989  : 
; 990  : 	iterator end() _NOEXCEPT
; 991  : 		{	// return iterator for end of mutable sequence
; 992  : 		return (iterator(this->_Mylast, this));
; 993  : 		}
; 994  : 
; 995  : 	const_iterator end() const _NOEXCEPT
; 996  : 		{	// return iterator for end of nonmutable sequence
; 997  : 		return (const_iterator(this->_Mylast, this));
; 998  : 		}
; 999  : 
; 1000 : 	iterator _Make_iter(const_iterator _Where) const
; 1001 : 		{	// make iterator from const_iterator
; 1002 : 		return (iterator(_Where._Ptr, this));
; 1003 : 		}
; 1004 : 
; 1005 : 	reverse_iterator rbegin() _NOEXCEPT
; 1006 : 		{	// return iterator for beginning of reversed mutable sequence
; 1007 : 		return (reverse_iterator(end()));
; 1008 : 		}
; 1009 : 
; 1010 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1011 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1012 : 		return (const_reverse_iterator(end()));
; 1013 : 		}
; 1014 : 
; 1015 : 	reverse_iterator rend() _NOEXCEPT
; 1016 : 		{	// return iterator for end of reversed mutable sequence
; 1017 : 		return (reverse_iterator(begin()));
; 1018 : 		}
; 1019 : 
; 1020 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1021 : 		{	// return iterator for end of reversed nonmutable sequence
; 1022 : 		return (const_reverse_iterator(begin()));
; 1023 : 		}
; 1024 : 
; 1025 :  #if _HAS_CPP0X
; 1026 : 	const_iterator cbegin() const _NOEXCEPT
; 1027 : 		{	// return iterator for beginning of nonmutable sequence
; 1028 : 		return (((const _Myt *)this)->begin());
; 1029 : 		}
; 1030 : 
; 1031 : 	const_iterator cend() const _NOEXCEPT
; 1032 : 		{	// return iterator for end of nonmutable sequence
; 1033 : 		return (((const _Myt *)this)->end());
; 1034 : 		}
; 1035 : 
; 1036 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1037 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1038 : 		return (((const _Myt *)this)->rbegin());
; 1039 : 		}
; 1040 : 
; 1041 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1042 : 		{	// return iterator for end of reversed nonmutable sequence
; 1043 : 		return (((const _Myt *)this)->rend());
; 1044 : 		}
; 1045 : 
; 1046 : 	void shrink_to_fit()
; 1047 : 		{	// reduce capacity
; 1048 : 		if (_Has_unused_capacity())
; 1049 : 			{	// worth shrinking, do it
; 1050 : 			if (empty())
; 1051 : 				_Tidy();
; 1052 : 			else
; 1053 : 				_Reallocate(size());
; 1054 : 			}
; 1055 : 		}
; 1056 :  #endif /* _HAS_CPP0X */
; 1057 : 
; 1058 : 	void resize(size_type _Newsize)
; 1059 : 		{	// determine new length, padding as needed
; 1060 : 		if (_Newsize < size())
; 1061 : 			erase(begin() + _Newsize, end());
; 1062 : 		else if (size() < _Newsize)
; 1063 : 			{	// pad as needed
; 1064 : 			_Alty _Alval(this->_Getal());
; 1065 : 			_Reserve(_Newsize - size());
; 1066 : 			_TRY_BEGIN
; 1067 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1068 : 				_Alval);
; 1069 : 			_CATCH_ALL
; 1070 : 			_Tidy();
; 1071 : 			_RERAISE;
; 1072 : 			_CATCH_END
; 1073 : 			this->_Mylast += _Newsize - size();
; 1074 : 			}
; 1075 : 		}
; 1076 : 
; 1077 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1078 : 		{	// determine new length, padding with _Val elements as needed
; 1079 : 		if (_Newsize < size())
; 1080 : 			erase(begin() + _Newsize, end());
; 1081 : 		else if (size() < _Newsize)
; 1082 : 			_Insert_n(end(), _Newsize - size(), _Val);
; 1083 : 		}
; 1084 : 
; 1085 : 	size_type size() const _NOEXCEPT
; 1086 : 		{	// return length of sequence
; 1087 : 		return (this->_Mylast - this->_Myfirst);
; 1088 : 		}
; 1089 : 
; 1090 : 	size_type max_size() const _NOEXCEPT
; 1091 : 		{	// return maximum possible length of sequence
; 1092 : 		return (this->_Getal().max_size());
; 1093 : 		}
; 1094 : 
; 1095 : 	bool empty() const _NOEXCEPT
; 1096 : 		{	// test if sequence is empty
; 1097 : 		return (this->_Myfirst == this->_Mylast);
; 1098 : 		}
; 1099 : 
; 1100 : 	_Alloc get_allocator() const _NOEXCEPT
; 1101 : 		{	// return allocator object for values
; 1102 : 		return (this->_Getal());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_reference at(size_type _Pos) const
; 1106 : 		{	// subscript nonmutable sequence with checking
; 1107 : 		if (size() <= _Pos)
; 1108 : 			_Xran();
; 1109 : 		return (*(this->_Myfirst + _Pos));
; 1110 : 		}
; 1111 : 
; 1112 : 	reference at(size_type _Pos)
; 1113 : 		{	// subscript mutable sequence with checking
; 1114 : 		if (size() <= _Pos)
; 1115 : 			_Xran();
; 1116 : 		return (*(this->_Myfirst + _Pos));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_reference operator[](size_type _Pos) const
; 1120 : 		{	// subscript nonmutable sequence
; 1121 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 : 		if (size() <= _Pos)
; 1123 : 			{	// report error
; 1124 : 			_DEBUG_ERROR("vector subscript out of range");
; 1125 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1126 : 			}
; 1127 : 
; 1128 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1129 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1130 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1131 : 
; 1132 : 		return (*(this->_Myfirst + _Pos));
; 1133 : 		}
; 1134 : 
; 1135 : 	reference operator[](size_type _Pos)
; 1136 : 		{	// subscript mutable sequence
; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));
; 1149 : 		}
; 1150 : 
; 1151 :  #if _HAS_CPP0X
; 1152 : 	pointer data() _NOEXCEPT
; 1153 : 		{	// return address of first element
; 1154 : 		return (this->_Myfirst);
; 1155 : 		}
; 1156 : 
; 1157 : 	const_pointer data() const _NOEXCEPT
; 1158 : 		{	// return address of first element
; 1159 : 		return (this->_Myfirst);
; 1160 : 		}
; 1161 :  #endif /* _HAS_CPP0X */
; 1162 : 
; 1163 : 	reference front()
; 1164 : 		{	// return first element of mutable sequence
; 1165 : 		return (*begin());
; 1166 : 		}
; 1167 : 
; 1168 : 	const_reference front() const
; 1169 : 		{	// return first element of nonmutable sequence
; 1170 : 		return (*begin());
; 1171 : 		}
; 1172 : 
; 1173 : 	reference back()
; 1174 : 		{	// return last element of mutable sequence
; 1175 : 		return (*(end() - 1));
; 1176 : 		}
; 1177 : 
; 1178 : 	const_reference back() const
; 1179 : 		{	// return last element of nonmutable sequence
; 1180 : 		return (*(end() - 1));
; 1181 : 		}
; 1182 : 
; 1183 : 	void push_back(const value_type& _Val)
; 1184 : 		{	// insert element at end
; 1185 : 		if (_Inside(_STD addressof(_Val)))
; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1188 : 			if (this->_Mylast == this->_Myend)
; 1189 : 				_Reserve(1);
; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);
; 1193 : 			++this->_Mylast;
; 1194 : 			}
; 1195 : 		else
; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)
; 1198 : 				_Reserve(1);
; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);
; 1202 : 			++this->_Mylast;
; 1203 : 			}
; 1204 : 		}
; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00028	8b fa		 mov	 edi, edx
  0002a	d1 ef		 shr	 edi, 1
  0002c	83 c8 ff	 or	 eax, -1
  0002f	2b c7		 sub	 eax, edi
  00031	5b		 pop	 ebx
  00032	3b c2		 cmp	 eax, edx
  00034	73 12		 jae	 SHORT $LN27@Reserve
  00036	33 d2		 xor	 edx, edx

; 1489 : 		if (_Capacity < _Count)

  00038	3b d6		 cmp	 edx, esi
  0003a	5f		 pop	 edi
  0003b	0f 42 d6	 cmovb	 edx, esi
  0003e	5e		 pop	 esi

; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

  0003f	89 55 08	 mov	 DWORD PTR __Count$[ebp], edx

; 1531 : 			}
; 1532 : 		}

  00042	5d		 pop	 ebp

; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

  00043	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reallocate
$LN27@Reserve:

; 973  : 		}
; 974  : 
; 975  : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 976  : 		{	// micro-optimization for capacity() != size()
; 977  : 		return (this->_Myend != this->_Mylast);
; 978  : 		}
; 979  : 
; 980  : 	iterator begin() _NOEXCEPT
; 981  : 		{	// return iterator for beginning of mutable sequence
; 982  : 		return (iterator(this->_Myfirst, this));
; 983  : 		}
; 984  : 
; 985  : 	const_iterator begin() const _NOEXCEPT
; 986  : 		{	// return iterator for beginning of nonmutable sequence
; 987  : 		return (const_iterator(this->_Myfirst, this));
; 988  : 		}
; 989  : 
; 990  : 	iterator end() _NOEXCEPT
; 991  : 		{	// return iterator for end of mutable sequence
; 992  : 		return (iterator(this->_Mylast, this));
; 993  : 		}
; 994  : 
; 995  : 	const_iterator end() const _NOEXCEPT
; 996  : 		{	// return iterator for end of nonmutable sequence
; 997  : 		return (const_iterator(this->_Mylast, this));
; 998  : 		}
; 999  : 
; 1000 : 	iterator _Make_iter(const_iterator _Where) const
; 1001 : 		{	// make iterator from const_iterator
; 1002 : 		return (iterator(_Where._Ptr, this));
; 1003 : 		}
; 1004 : 
; 1005 : 	reverse_iterator rbegin() _NOEXCEPT
; 1006 : 		{	// return iterator for beginning of reversed mutable sequence
; 1007 : 		return (reverse_iterator(end()));
; 1008 : 		}
; 1009 : 
; 1010 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1011 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1012 : 		return (const_reverse_iterator(end()));
; 1013 : 		}
; 1014 : 
; 1015 : 	reverse_iterator rend() _NOEXCEPT
; 1016 : 		{	// return iterator for end of reversed mutable sequence
; 1017 : 		return (reverse_iterator(begin()));
; 1018 : 		}
; 1019 : 
; 1020 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1021 : 		{	// return iterator for end of reversed nonmutable sequence
; 1022 : 		return (const_reverse_iterator(begin()));
; 1023 : 		}
; 1024 : 
; 1025 :  #if _HAS_CPP0X
; 1026 : 	const_iterator cbegin() const _NOEXCEPT
; 1027 : 		{	// return iterator for beginning of nonmutable sequence
; 1028 : 		return (((const _Myt *)this)->begin());
; 1029 : 		}
; 1030 : 
; 1031 : 	const_iterator cend() const _NOEXCEPT
; 1032 : 		{	// return iterator for end of nonmutable sequence
; 1033 : 		return (((const _Myt *)this)->end());
; 1034 : 		}
; 1035 : 
; 1036 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1037 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1038 : 		return (((const _Myt *)this)->rbegin());
; 1039 : 		}
; 1040 : 
; 1041 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1042 : 		{	// return iterator for end of reversed nonmutable sequence
; 1043 : 		return (((const _Myt *)this)->rend());
; 1044 : 		}
; 1045 : 
; 1046 : 	void shrink_to_fit()
; 1047 : 		{	// reduce capacity
; 1048 : 		if (_Has_unused_capacity())
; 1049 : 			{	// worth shrinking, do it
; 1050 : 			if (empty())
; 1051 : 				_Tidy();
; 1052 : 			else
; 1053 : 				_Reallocate(size());
; 1054 : 			}
; 1055 : 		}
; 1056 :  #endif /* _HAS_CPP0X */
; 1057 : 
; 1058 : 	void resize(size_type _Newsize)
; 1059 : 		{	// determine new length, padding as needed
; 1060 : 		if (_Newsize < size())
; 1061 : 			erase(begin() + _Newsize, end());
; 1062 : 		else if (size() < _Newsize)
; 1063 : 			{	// pad as needed
; 1064 : 			_Alty _Alval(this->_Getal());
; 1065 : 			_Reserve(_Newsize - size());
; 1066 : 			_TRY_BEGIN
; 1067 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1068 : 				_Alval);
; 1069 : 			_CATCH_ALL
; 1070 : 			_Tidy();
; 1071 : 			_RERAISE;
; 1072 : 			_CATCH_END
; 1073 : 			this->_Mylast += _Newsize - size();
; 1074 : 			}
; 1075 : 		}
; 1076 : 
; 1077 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1078 : 		{	// determine new length, padding with _Val elements as needed
; 1079 : 		if (_Newsize < size())
; 1080 : 			erase(begin() + _Newsize, end());
; 1081 : 		else if (size() < _Newsize)
; 1082 : 			_Insert_n(end(), _Newsize - size(), _Val);
; 1083 : 		}
; 1084 : 
; 1085 : 	size_type size() const _NOEXCEPT
; 1086 : 		{	// return length of sequence
; 1087 : 		return (this->_Mylast - this->_Myfirst);
; 1088 : 		}
; 1089 : 
; 1090 : 	size_type max_size() const _NOEXCEPT
; 1091 : 		{	// return maximum possible length of sequence
; 1092 : 		return (this->_Getal().max_size());
; 1093 : 		}
; 1094 : 
; 1095 : 	bool empty() const _NOEXCEPT
; 1096 : 		{	// test if sequence is empty
; 1097 : 		return (this->_Myfirst == this->_Mylast);
; 1098 : 		}
; 1099 : 
; 1100 : 	_Alloc get_allocator() const _NOEXCEPT
; 1101 : 		{	// return allocator object for values
; 1102 : 		return (this->_Getal());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_reference at(size_type _Pos) const
; 1106 : 		{	// subscript nonmutable sequence with checking
; 1107 : 		if (size() <= _Pos)
; 1108 : 			_Xran();
; 1109 : 		return (*(this->_Myfirst + _Pos));
; 1110 : 		}
; 1111 : 
; 1112 : 	reference at(size_type _Pos)
; 1113 : 		{	// subscript mutable sequence with checking
; 1114 : 		if (size() <= _Pos)
; 1115 : 			_Xran();
; 1116 : 		return (*(this->_Myfirst + _Pos));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_reference operator[](size_type _Pos) const
; 1120 : 		{	// subscript nonmutable sequence
; 1121 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 : 		if (size() <= _Pos)
; 1123 : 			{	// report error
; 1124 : 			_DEBUG_ERROR("vector subscript out of range");
; 1125 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1126 : 			}
; 1127 : 
; 1128 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1129 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1130 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1131 : 
; 1132 : 		return (*(this->_Myfirst + _Pos));
; 1133 : 		}
; 1134 : 
; 1135 : 	reference operator[](size_type _Pos)
; 1136 : 		{	// subscript mutable sequence
; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));
; 1149 : 		}
; 1150 : 
; 1151 :  #if _HAS_CPP0X
; 1152 : 	pointer data() _NOEXCEPT
; 1153 : 		{	// return address of first element
; 1154 : 		return (this->_Myfirst);
; 1155 : 		}
; 1156 : 
; 1157 : 	const_pointer data() const _NOEXCEPT
; 1158 : 		{	// return address of first element
; 1159 : 		return (this->_Myfirst);
; 1160 : 		}
; 1161 :  #endif /* _HAS_CPP0X */
; 1162 : 
; 1163 : 	reference front()
; 1164 : 		{	// return first element of mutable sequence
; 1165 : 		return (*begin());
; 1166 : 		}
; 1167 : 
; 1168 : 	const_reference front() const
; 1169 : 		{	// return first element of nonmutable sequence
; 1170 : 		return (*begin());
; 1171 : 		}
; 1172 : 
; 1173 : 	reference back()
; 1174 : 		{	// return last element of mutable sequence
; 1175 : 		return (*(end() - 1));
; 1176 : 		}
; 1177 : 
; 1178 : 	const_reference back() const
; 1179 : 		{	// return last element of nonmutable sequence
; 1180 : 		return (*(end() - 1));
; 1181 : 		}
; 1182 : 
; 1183 : 	void push_back(const value_type& _Val)
; 1184 : 		{	// insert element at end
; 1185 : 		if (_Inside(_STD addressof(_Val)))
; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1188 : 			if (this->_Mylast == this->_Myend)
; 1189 : 				_Reserve(1);
; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);
; 1193 : 			++this->_Mylast;
; 1194 : 			}
; 1195 : 		else
; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)
; 1198 : 				_Reserve(1);
; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);
; 1202 : 			++this->_Mylast;
; 1203 : 			}
; 1204 : 		}
; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00048	03 d7		 add	 edx, edi

; 1489 : 		if (_Capacity < _Count)

  0004a	3b d6		 cmp	 edx, esi
  0004c	5f		 pop	 edi
  0004d	0f 42 d6	 cmovb	 edx, esi
  00050	5e		 pop	 esi

; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

  00051	89 55 08	 mov	 DWORD PTR __Count$[ebp], edx

; 1531 : 			}
; 1532 : 		}

  00054	5d		 pop	 ebp

; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

  00055	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reallocate
$LN2@Reserve:
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi

; 1531 : 			}
; 1532 : 		}

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
$LN43@Reserve:

; 1533 : 
; 1534 : 	void _Tidy()
; 1535 : 		{	// free all storage
; 1536 : 		if (this->_Myfirst != pointer())
; 1537 : 			{	// something to free, destroy and deallocate it
; 1538 : 			this->_Orphan_all();
; 1539 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1540 : 			this->_Getal().deallocate(this->_Myfirst,
; 1541 : 				this->_Myend - this->_Myfirst);
; 1542 : 			this->_Myfirst = pointer();
; 1543 : 			this->_Mylast = pointer();
; 1544 : 			this->_Myend = pointer();
; 1545 : 			}
; 1546 : 		}
; 1547 : 
; 1548 : 	template<class _Iter>
; 1549 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1550 : 		{	// copy initializing [_First, _Last), using allocator
; 1551 : 		_Alty _Alval(this->_Getal());
; 1552 : 		return (_Uninitialized_copy(_First, _Last,
; 1553 : 			_Ptr, _Alval));
; 1554 : 		}
; 1555 : 
; 1556 : 	template<class _Iter>
; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1558 : 		{	// move initializing [_First, _Last), using allocator
; 1559 : 		_Alty _Alval(this->_Getal());
; 1560 : 		return (_Uninitialized_move(_First, _Last,
; 1561 : 			_Ptr, _Alval));
; 1562 : 		}
; 1563 : 
; 1564 : 	iterator _Insert_n(const_iterator _Where,
; 1565 : 		size_type _Count, const value_type& _Val)
; 1566 : 		{	// insert _Count * _Val at _Where
; 1567 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1568 : 		if (_VICONT(_Where) != this
; 1569 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1570 : 			|| this->_Mylast < _VIPTR(_Where))
; 1571 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1572 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 
; 1574 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1575 : 		if (_Count == 0)
; 1576 : 			;
; 1577 : 		else if (_Unused_capacity() < _Count)
; 1578 : 			{	// not enough room, reallocate
; 1579 : 			if (max_size() - size() < _Count)
; 1580 : 				_Xlen();	// result too long
; 1581 : 
; 1582 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1583 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1584 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst;
; 1585 : 			int _Ncopied = 0;
; 1586 : 
; 1587 : 			_TRY_BEGIN
; 1588 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1589 : 				_STD addressof(_Val));	// add new stuff
; 1590 : 			++_Ncopied;
; 1591 : 			_Umove(this->_Myfirst, _VIPTR(_Where),
; 1592 : 				_Newvec);	// copy prefix
; 1593 : 			++_Ncopied;
; 1594 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1595 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1596 : 			_CATCH_ALL
; 1597 : 			if (1 < _Ncopied)
; 1598 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1599 : 			if (0 < _Ncopied)
; 1600 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1601 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1602 : 			_RERAISE;
; 1603 : 			_CATCH_END
; 1604 : 
; 1605 : 			_Count += size();
; 1606 : 			if (this->_Myfirst != pointer())
; 1607 : 				{	// destroy and deallocate old array
; 1608 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1609 : 				this->_Getal().deallocate(this->_Myfirst,
; 1610 : 					this->_Myend - this->_Myfirst);
; 1611 : 				}
; 1612 : 
; 1613 : 			this->_Orphan_all();
; 1614 : 			this->_Myend = _Newvec + _Capacity;
; 1615 : 			this->_Mylast = _Newvec + _Count;
; 1616 : 			this->_Myfirst = _Newvec;
; 1617 : 			}
; 1618 : 		else if ((size_type)(this->_Mylast - _VIPTR(_Where))
; 1619 : 			< _Count)
; 1620 : 			{	// new stuff spills off end
; 1621 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1622 : 
; 1623 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1624 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1625 : 
; 1626 : 			_TRY_BEGIN
; 1627 : 			_Ufill(this->_Mylast,
; 1628 : 				_Count - (this->_Mylast - _VIPTR(_Where)),
; 1629 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1630 : 			_CATCH_ALL
; 1631 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1632 : 				this->_Mylast + _Count);
; 1633 : 			_RERAISE;
; 1634 : 			_CATCH_END
; 1635 : 
; 1636 : 			this->_Mylast += _Count;
; 1637 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1638 : 			_STD fill(_VIPTR(_Where), this->_Mylast - _Count,
; 1639 : 				_Tmp);	// insert up to old end
; 1640 : 			}
; 1641 : 		else
; 1642 : 			{	// new stuff can all be assigned
; 1643 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1644 : 
; 1645 : 			pointer _Oldend = this->_Mylast;
; 1646 : 			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1647 : 				this->_Mylast);	// copy suffix
; 1648 : 
; 1649 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1650 : 			_Copy_backward(_VIPTR(_Where), _Oldend - _Count,
; 1651 : 				_Oldend);	// copy hole
; 1652 : 			_STD fill(_VIPTR(_Where),
; 1653 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1654 : 			}
; 1655 : 		return (begin() + _Off);
; 1656 : 		}
; 1657 : 
; 1658 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1659 : 		{	// copy initializing _Count * _Val, using allocator
; 1660 : 		_Alty _Alval(this->_Getal());
; 1661 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
; 1662 : 		return (_Ptr + _Count);
; 1663 : 		}
; 1664 : 
; 1665 : 	__declspec(noreturn) void _Xlen() const
; 1666 : 		{	// report a length_error
; 1667 : 		_Xlength_error("vector<T> too long");

  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00065	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN45@Reserve:
$LN42@Reserve:
  0006a	cc		 int	 3
?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >, COMDAT
; _this$ = ecx

; 306  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 307  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator+, COMDAT
; _this$ = ecx

; 365  : 		{	// return this + integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 		_Ptr += _Off;

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	03 4d 0c	 add	 ecx, DWORD PTR __Off$[ebp]

; 366  : 		_Myiter _Tmp = *this;
; 367  : 		return (_Tmp += _Off);

  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 368  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 08 00	 ret	 8
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 126  : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 103  : 			{	// lock the stream buffer, if there

  0002a	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0002d	89 37		 mov	 DWORD PTR [edi], esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 96   : 		return (_Mystrbuf);

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 104  : 			if (_Myostr.rdbuf() != 0)

  00038	85 c9		 test	 ecx, ecx
  0003a	74 05		 je	 SHORT $LN5@sentry

; 105  : 				_Myostr.rdbuf()->_Lock();

  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	ff 50 04	 call	 DWORD PTR [eax+4]
$LN5@sentry:

; 126  : 			{	// construct locking and testing stream

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 349  : 		return (rdstate() == goodbit);

  0004d	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 127  : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00052	75 0d		 jne	 SHORT $LN1@sentry
  00054	8b 4c 30 3c	 mov	 ecx, DWORD PTR [eax+esi+60]
  00058	85 c9		 test	 ecx, ecx
  0005a	74 05		 je	 SHORT $LN1@sentry

; 128  : 				_Ostr.tie()->flush();

  0005c	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN1@sentry:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 349  : 		return (rdstate() == goodbit);

  00061	8b 06		 mov	 eax, DWORD PTR [esi]
  00063	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00066	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  0006b	0f 94 c0	 sete	 al
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 129  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  0006e	88 47 04	 mov	 BYTE PTR [edi+4], al

; 130  : 			}

  00071	8b c7		 mov	 eax, edi
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 133  : 			{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 134  :  #if _HAS_EXCEPTIONS
; 135  : 			if (!_XSTD uncaught_exception())

  00003	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00008	84 c0		 test	 al, al
  0000a	75 07		 jne	 SHORT $LN1@sentry

; 136  : 				this->_Myostr._Osfx();

  0000c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000e	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN1@sentry:

; 110  : 			if (_Myostr.rdbuf() != 0)

  00013	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00015	8b 01		 mov	 eax, DWORD PTR [ecx]
  00017	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001a	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  0001e	85 c9		 test	 ecx, ecx
  00020	74 06		 je	 SHORT $LN4@sentry

; 111  : 				_Myostr.rdbuf()->_Unlock();

  00022	8b 01		 mov	 eax, DWORD PTR [ecx]

; 137  : 
; 138  :  #else /* _HAS_EXCEPTIONS */
; 139  : 			this->_Myostr._Osfx();
; 140  :  #endif /* _HAS_EXCEPTIONS */
; 141  : 			}

  00024	5e		 pop	 esi

; 111  : 				_Myostr.rdbuf()->_Unlock();

  00025	ff 60 08	 jmp	 DWORD PTR [eax+8]
$LN4@sentry:

; 137  : 
; 138  :  #else /* _HAS_EXCEPTIONS */
; 139  : 			this->_Myostr._Osfx();
; 140  :  #endif /* _HAS_EXCEPTIONS */
; 141  : 			}

  00028	5e		 pop	 esi
  00029	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_ostream@DU?$char_traits@D@std@@@std@@@2@HXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_ostream@DU?$char_traits@D@std@@@std@@@2@HXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_ostream<char,std::char_traits<char> > >::*, COMDAT
; _this$ = ecx

; 147  : 			return (_Ok ? _CONVERTIBLE_TO_TRUE : 0);

  00000	33 c0		 xor	 eax, eax
  00002	38 41 04	 cmp	 BYTE PTR [ecx+4], al
  00005	0f 95 c0	 setne	 al
  00008	48		 dec	 eax

; 148  : 			}

  00009	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_ostream@DU?$char_traits@D@std@@@std@@@2@HXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_ostream<char,std::char_traits<char> > >::*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 170  : 		{	// perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00029	8b f1		 mov	 esi, ecx

; 171  : 		_TRY_BEGIN

  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  00032	8b 06		 mov	 eax, DWORD PTR [esi]
  00034	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 328  : 		}
; 329  : 
; 330  : 	void __CLR_OR_THIS_CALL setstate(iostate _State, bool _Exreraise)
; 331  : 		{	// merge in state argument, possibly reraise exception
; 332  : 		if (_State != goodbit)
; 333  : 			clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
; 334  : 		}
; 335  : 
; 336  : 	void __CLR_OR_THIS_CALL setstate(iostate _State)
; 337  : 		{	// merge in state argument
; 338  : 		if (_State != goodbit)
; 339  : 			clear((iostate)((int)rdstate() | (int)_State), false);
; 340  : 		}
; 341  : 
; 342  : 	void __CLR_OR_THIS_CALL setstate(io_state _State)
; 343  : 		{	// merge in state argument, old style
; 344  : 		setstate((iostate)_State);
; 345  : 		}
; 346  : 
; 347  : 	bool __CLR_OR_THIS_CALL good() const
; 348  : 		{	// test if no state bits are set
; 349  : 		return (rdstate() == goodbit);

  00037	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 172  : 		if (this->good() && this->flags() & ios_base::unitbuf)

  0003c	75 3e		 jne	 SHORT $LN9@Osfx
  0003e	f6 44 30 14 02	 test	 BYTE PTR [eax+esi+20], 2
  00043	74 37		 je	 SHORT $LN9@Osfx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 96   : 		return (_Mystrbuf);

  00045	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 141  : 		return (sync());

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	ff 50 34	 call	 DWORD PTR [eax+52]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 173  : 			if (_Myios::rdbuf()->pubsync() == -1)	// flush stream as needed

  0004e	83 f8 ff	 cmp	 eax, -1
  00051	75 29		 jne	 SHORT $LN9@Osfx

; 174  : 				_Myios::setstate(ios_base::badbit);

  00053	8b 06		 mov	 eax, DWORD PTR [esi]
  00055	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  00058	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 174  : 				_Myios::setstate(ios_base::badbit);

  0005c	03 ce		 add	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  0005e	83 c8 04	 or	 eax, 4

; 54   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00061	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00065	75 03		 jne	 SHORT $LN27@Osfx
  00067	83 c8 04	 or	 eax, 4
$LN27@Osfx:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 302  : 		_Mystate = (iostate)(_State & _Statmask);

  0006a	83 e0 17	 and	 eax, 23			; 00000017H
  0006d	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 303  : 		if ((_Mystate & _Except) == 0)

  00070	85 41 10	 test	 DWORD PTR [ecx+16], eax
  00073	74 07		 je	 SHORT $LN9@Osfx
  00075	6a 00		 push	 0
  00077	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN9@Osfx:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream

; 177  : 		}

  0007c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0007f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00086	59		 pop	 ecx
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:

; 175  : 		_CATCH_ALL
; 176  : 		_CATCH_END

  0008e	b8 00 00 00 00	 mov	 eax, $LN9@Osfx
  00093	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT
; _this$ = ecx

; 84   : 		return (_Tiestr);

  00000	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]

; 85   : 		}

  00003	c3		 ret	 0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 972  : 		return (this->_Myend - this->_Mylast);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]

; 973  : 		}

  00006	c3		 ret	 0
?_Unused_capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Make_iter, COMDAT
; _this$dead$ = ecx

; 1001 : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1002 : 		return (iterator(_Where._Ptr, this));
; 1003 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@EV?$allocator@E@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size, COMDAT
; _this$dead$ = ecx

; 1092 : 		return (this->_Getal().max_size());

  00000	83 c8 ff	 or	 eax, -1

; 1093 : 		}

  00003	c3		 ret	 0
?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::clear, COMDAT
; _this$ = ecx

; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1417 : 		}

  00005	c3		 ret	 0
?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@EV?$allocator@E@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@EV?$allocator@E@std@@@std@@IBEII@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Grow_to, COMDAT
; _this$ = ecx

; 1484 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 967  : 		return (this->_Myend - this->_Myfirst);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	2b 11		 sub	 edx, DWORD PTR [ecx]

; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00008	83 c8 ff	 or	 eax, -1
  0000b	8b ca		 mov	 ecx, edx
  0000d	d1 e9		 shr	 ecx, 1
  0000f	2b c1		 sub	 eax, ecx
  00011	3b c2		 cmp	 eax, edx
  00013	73 0f		 jae	 SHORT $LN4@Grow_to
  00015	33 d2		 xor	 edx, edx

; 1489 : 		if (_Capacity < _Count)

  00017	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  0001a	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1490 : 			_Capacity = _Count;
; 1491 : 		return (_Capacity);

  0001e	8b c2		 mov	 eax, edx

; 1492 : 		}

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN4@Grow_to:

; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00024	03 d1		 add	 edx, ecx

; 1489 : 		if (_Capacity < _Count)

  00026	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00029	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1490 : 			_Capacity = _Count;
; 1491 : 		return (_Capacity);

  0002d	8b c2		 mov	 eax, edx

; 1492 : 		}

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?_Grow_to@?$vector@EV?$allocator@E@std@@@std@@IBEII@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$1$ = 8						; size = 4
__Count$ = 8						; size = 4
?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reallocate, COMDAT
; _this$ = ecx

; 1500 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]
  00009	33 f6		 xor	 esi, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1500 : 		{	// move to array of exactly _Count elements

  0000b	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  0000d	85 ff		 test	 edi, edi
  0000f	74 14		 je	 SHORT $LN16@Reallocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00011	83 ff ff	 cmp	 edi, -1
  00014	77 50		 ja	 SHORT $LN51@Reallocate
  00016	57		 push	 edi
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b f0		 mov	 esi, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 f6		 test	 esi, esi
  00023	74 41		 je	 SHORT $LN51@Reallocate
$LN16@Reallocate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

  00025	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 461  : 	size_t _Count = (size_t)(_Last - _First);

  00027	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0002a	2b c1		 sub	 eax, ecx

; 463  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0002c	50		 push	 eax
  0002d	51		 push	 ecx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00034	8b 03		 mov	 eax, DWORD PTR [ebx]
  00036	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00039	2b c8		 sub	 ecx, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 463  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  0003e	89 4d 08	 mov	 DWORD PTR __Size$1$[ebp], ecx

; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1507 : 		_RERAISE;
; 1508 : 		_CATCH_END
; 1509 : 
; 1510 : 		size_type _Size = size();
; 1511 : 		if (this->_Myfirst != pointer())

  00041	85 c0		 test	 eax, eax
  00043	74 0c		 je	 SHORT $LN46@Reallocate
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR __Size$1$[ebp]
  0004e	83 c4 04	 add	 esp, 4
$LN46@Reallocate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1519 : 		this->_Myend = _Ptr + _Count;

  00051	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00054	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  00057	5f		 pop	 edi

; 1520 : 		this->_Mylast = _Ptr + _Size;

  00058	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]

; 1521 : 		this->_Myfirst = _Ptr;

  0005b	89 33		 mov	 DWORD PTR [ebx], esi
  0005d	5e		 pop	 esi
  0005e	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00061	5b		 pop	 ebx

; 1522 : 		}

  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
$LN51@Reallocate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00066	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN53@Reallocate:
$LN50@Reallocate:
  0006b	cc		 int	 3
?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen, COMDAT
; _this$dead$ = ecx

; 1667 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator+=, COMDAT
; _this$ = ecx

; 359  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 		_Ptr += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	01 01		 add	 DWORD PTR [ecx], eax

; 360  : 		*(_Mybase *)this += _Off;
; 361  : 		return (*this);

  00008	8b c1		 mov	 eax, ecx

; 362  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$dead$ = 12					; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 		_Compat(_Right);
; 205  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	33 c0		 xor	 eax, eax
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 206  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator!=, COMDAT
; _this$ = ecx

; 209  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 205  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]

; 210  : 		return (!(*this == _Right));

  00008	33 c0		 xor	 eax, eax

; 205  : 		return (this->_Ptr == _Right._Ptr);

  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 210  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 211  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 103  : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 104  : 			if (_Myostr.rdbuf() != 0)

  0000b	8b 02		 mov	 eax, DWORD PTR [edx]
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
  00014	85 c9		 test	 ecx, ecx
  00016	74 05		 je	 SHORT $LN8@Sentry_bas

; 105  : 				_Myostr.rdbuf()->_Lock();

  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	ff 50 04	 call	 DWORD PTR [eax+4]
$LN8@Sentry_bas:

; 106  : 			}

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 110  : 			if (_Myostr.rdbuf() != 0)

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	8b 01		 mov	 eax, DWORD PTR [ecx]
  00004	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00007	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 05		 je	 SHORT $LN1@Sentry_bas

; 111  : 				_Myostr.rdbuf()->_Unlock();

  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	ff 60 08	 jmp	 DWORD PTR [eax+8]
$LN1@Sentry_bas:

; 112  : 			}

  00014	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity, COMDAT
; _this$ = ecx

; 967  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]

; 968  : 		}

  00005	c3		 ret	 0
?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEPAEI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEPAEI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned char> >::allocate, COMDAT
; _this$dead$ = ecx

; 875  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 14		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	83 f8 ff	 cmp	 eax, -1
  0000f	77 15		 ja	 SHORT $LN14@allocate
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	8b c8		 mov	 ecx, eax
  00019	83 c4 04	 add	 esp, 4
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 876  : 		return (_Mybase::allocate(_Count));

  00020	8b c1		 mov	 eax, ecx

; 877  : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00026	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  0002b	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEPAEI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned char> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<unsigned char> >::max_size, COMDAT
; _this$dead$ = ecx

; 914  : 		return (_Mytraits::max_size(*this));

  00000	83 c8 ff	 or	 eax, -1

; 915  : 		}

  00003	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<unsigned char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator+=, COMDAT
; _this$ = ecx

; 153  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	01 01		 add	 DWORD PTR [ecx], eax

; 171  : 		return (*this);

  00008	8b c1		 mov	 eax, ecx

; 172  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Compat, COMDAT
; _this$dead$ = ecx

; 255  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned char> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@E@std@@QAEPAEI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@E@std@@QAEPAEI@Z PROC		; std::allocator<unsigned char>::allocate, COMDAT
; _this$dead$ = ecx

; 590  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 14		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	83 f8 ff	 cmp	 eax, -1
  0000f	77 15		 ja	 SHORT $LN11@allocate
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	8b c8		 mov	 ecx, eax
  00019	83 c4 04	 add	 esp, 4
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 591  : 		return (_Allocate(_Count, (pointer)0));

  00020	8b c1		 mov	 eax, ecx

; 592  : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00026	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  0002b	cc		 int	 3
?allocate@?$allocator@E@std@@QAEPAEI@Z ENDP		; std::allocator<unsigned char>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@E@std@@@std@@SAIABV?$allocator@E@2@@Z
_TEXT	SEGMENT
?max_size@?$allocator_traits@V?$allocator@E@std@@@std@@SAIABV?$allocator@E@2@@Z PROC ; std::allocator_traits<std::allocator<unsigned char> >::max_size, COMDAT
; __Al$dead$ = ecx

; 762  : 		return (_Al.max_size());

  00000	83 c8 ff	 or	 eax, -1

; 763  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@E@std@@@std@@SAIABV?$allocator@E@2@@Z ENDP ; std::allocator_traits<std::allocator<unsigned char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@E@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@E@std@@QBEIXZ PROC		; std::allocator<unsigned char>::max_size, COMDAT
; _this$dead$ = ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	83 c8 ff	 or	 eax, -1

; 629  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@E@std@@QBEIXZ ENDP		; std::allocator<unsigned char>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$insert@PAE@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
$T1 = 12						; size = 1
__Where$ = 12						; size = 4
__First$ = 16						; size = 4
__Last$ = 20						; size = 4
??$insert@PAE@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::insert<unsigned char *>, COMDAT
; _this$ = ecx

; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi

; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));

  00008	ff 75 0c	 push	 DWORD PTR $T1[ebp]
  0000b	8b f9		 mov	 edi, ecx
  0000d	ff 75 14	 push	 DWORD PTR __Last$[ebp]
  00010	8b f0		 mov	 esi, eax
  00012	ff 75 10	 push	 DWORD PTR __First$[ebp]
  00015	2b 37		 sub	 esi, DWORD PTR [edi]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??$_Insert@PAE@?$vector@EV?$allocator@E@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Insert<unsigned char *>

; 170  : 		_Ptr += _Off;

  0001d	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		_Compat(_Right);
; 205  : 		return (this->_Ptr == _Right._Ptr);
; 206  : 		}
; 207  : 
; 208  : 	bool operator!=(const _Myiter& _Right) const
; 209  : 		{	// test for iterator inequality
; 210  : 		return (!(*this == _Right));
; 211  : 		}
; 212  : 
; 213  : 	bool operator<(const _Myiter& _Right) const
; 214  : 		{	// test if this < _Right
; 215  : 		_Compat(_Right);
; 216  : 		return (this->_Ptr < _Right._Ptr);
; 217  : 		}
; 218  : 
; 219  : 	bool operator>(const _Myiter& _Right) const
; 220  : 		{	// test if this > _Right
; 221  : 		return (_Right < *this);
; 222  : 		}
; 223  : 
; 224  : 	bool operator<=(const _Myiter& _Right) const
; 225  : 		{	// test if this <= _Right
; 226  : 		return (!(_Right < *this));
; 227  : 		}
; 228  : 
; 229  : 	bool operator>=(const _Myiter& _Right) const
; 230  : 		{	// test if this >= _Right
; 231  : 		return (!(*this < _Right));
; 232  : 		}
; 233  : 
; 234  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 235  : 	void _Compat(const _Myiter& _Right) const
; 236  : 		{	// test for compatible iterator pair
; 237  : 		if (this->_Getcont() == 0
; 238  : 			|| this->_Getcont() != _Right._Getcont())
; 239  : 			{	// report error
; 240  : 			_DEBUG_ERROR("vector iterators incompatible");
; 241  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 242  : 			}
; 243  : 		}
; 244  : 
; 245  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 246  : 	void _Compat(const _Myiter& _Right) const
; 247  : 		{	// test for compatible iterator pair
; 248  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 249  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 250  : 		}
; 251  : 
; 252  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 253  : 	void _Compat(const _Myiter&) const
; 254  : 		{	// test for compatible iterator pair
; 255  : 		}
; 256  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 257  : 
; 258  : 	_Tptr _Ptr;	// pointer to element in vector
; 259  : 	};
; 260  : 
; 261  : template<class _Myvec> inline
; 262  : 	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
; 263  : 		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
; 264  : 	{	// convert to unchecked
; 265  : 	return (_Iter._Unchecked());
; 266  : 	}
; 267  : 
; 268  : template<class _Myvec> inline
; 269  : 	_Vector_const_iterator<_Myvec>&
; 270  : 		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
; 271  : 			typename _Vector_const_iterator<_Myvec>
; 272  : 				::_Unchecked_type _Right)
; 273  : 	{	// convert to checked
; 274  : 	return (_Iter._Rechecked(_Right));
; 275  : 	}
; 276  : 
; 277  : template<class _Myvec> inline
; 278  : 	_Vector_const_iterator<_Myvec> operator+(
; 279  : 		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
; 280  : 		_Vector_const_iterator<_Myvec> _Next)
; 281  : 	{	// add offset to iterator
; 282  : 	return (_Next += _Off);
; 283  : 	}
; 284  : 
; 285  : 		// TEMPLATE CLASS _Vector_iterator
; 286  : template<class _Myvec>
; 287  : 	class _Vector_iterator
; 288  : 		: public _Vector_const_iterator<_Myvec>
; 289  : 	{	// iterator for mutable vector
; 290  : public:
; 291  : 	typedef _Vector_iterator<_Myvec> _Myiter;
; 292  : 	typedef _Vector_const_iterator<_Myvec> _Mybase;
; 293  : 	typedef random_access_iterator_tag iterator_category;
; 294  : 
; 295  : 	typedef typename _Myvec::value_type value_type;
; 296  : 	typedef typename _Myvec::difference_type difference_type;
; 297  : 	typedef typename _Myvec::pointer pointer;
; 298  : 	typedef typename _Myvec::reference reference;
; 299  : 
; 300  : 	_Vector_iterator()
; 301  : 		{	// construct with null vector pointer
; 302  : 		}
; 303  : 
; 304  : 	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
; 305  : 		: _Mybase(_Parg, _Pvector)
; 306  : 		{	// construct with pointer _Parg
; 307  : 		}
; 308  : 
; 309  : 	typedef pointer _Unchecked_type;
; 310  : 
; 311  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 312  : 		{	// reset from unchecked iterator
; 313  : 		this->_Ptr = _Right;
; 314  : 		return (*this);
; 315  : 		}
; 316  : 
; 317  : 	_Unchecked_type _Unchecked() const
; 318  : 		{	// make an unchecked iterator
; 319  : 		return (_Unchecked_type(this->_Ptr));
; 320  : 		}
; 321  : 
; 322  : 	reference operator*() const
; 323  : 		{	// return designated object
; 324  : 		return ((reference)**(_Mybase *)this);
; 325  : 		}
; 326  : 
; 327  : 	pointer operator->() const
; 328  : 		{	// return pointer to class object
; 329  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 330  : 		}
; 331  : 
; 332  : 	_Myiter& operator++()
; 333  : 		{	// preincrement
; 334  : 		++*(_Mybase *)this;
; 335  : 		return (*this);
; 336  : 		}
; 337  : 
; 338  : 	_Myiter operator++(int)
; 339  : 		{	// postincrement
; 340  : 		_Myiter _Tmp = *this;
; 341  : 		++*this;
; 342  : 		return (_Tmp);
; 343  : 		}
; 344  : 
; 345  : 	_Myiter& operator--()
; 346  : 		{	// predecrement
; 347  : 		--*(_Mybase *)this;
; 348  : 		return (*this);
; 349  : 		}
; 350  : 
; 351  : 	_Myiter operator--(int)
; 352  : 		{	// postdecrement
; 353  : 		_Myiter _Tmp = *this;
; 354  : 		--*this;
; 355  : 		return (_Tmp);
; 356  : 		}
; 357  : 
; 358  : 	_Myiter& operator+=(difference_type _Off)
; 359  : 		{	// increment by integer
; 360  : 		*(_Mybase *)this += _Off;
; 361  : 		return (*this);
; 362  : 		}
; 363  : 
; 364  : 	_Myiter operator+(difference_type _Off) const
; 365  : 		{	// return this + integer
; 366  : 		_Myiter _Tmp = *this;
; 367  : 		return (_Tmp += _Off);

  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 170  : 		_Ptr += _Off;

  00022	03 ce		 add	 ecx, esi
  00024	5f		 pop	 edi

; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		_Compat(_Right);
; 205  : 		return (this->_Ptr == _Right._Ptr);
; 206  : 		}
; 207  : 
; 208  : 	bool operator!=(const _Myiter& _Right) const
; 209  : 		{	// test for iterator inequality
; 210  : 		return (!(*this == _Right));
; 211  : 		}
; 212  : 
; 213  : 	bool operator<(const _Myiter& _Right) const
; 214  : 		{	// test if this < _Right
; 215  : 		_Compat(_Right);
; 216  : 		return (this->_Ptr < _Right._Ptr);
; 217  : 		}
; 218  : 
; 219  : 	bool operator>(const _Myiter& _Right) const
; 220  : 		{	// test if this > _Right
; 221  : 		return (_Right < *this);
; 222  : 		}
; 223  : 
; 224  : 	bool operator<=(const _Myiter& _Right) const
; 225  : 		{	// test if this <= _Right
; 226  : 		return (!(_Right < *this));
; 227  : 		}
; 228  : 
; 229  : 	bool operator>=(const _Myiter& _Right) const
; 230  : 		{	// test if this >= _Right
; 231  : 		return (!(*this < _Right));
; 232  : 		}
; 233  : 
; 234  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 235  : 	void _Compat(const _Myiter& _Right) const
; 236  : 		{	// test for compatible iterator pair
; 237  : 		if (this->_Getcont() == 0
; 238  : 			|| this->_Getcont() != _Right._Getcont())
; 239  : 			{	// report error
; 240  : 			_DEBUG_ERROR("vector iterators incompatible");
; 241  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 242  : 			}
; 243  : 		}
; 244  : 
; 245  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 246  : 	void _Compat(const _Myiter& _Right) const
; 247  : 		{	// test for compatible iterator pair
; 248  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 249  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 250  : 		}
; 251  : 
; 252  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 253  : 	void _Compat(const _Myiter&) const
; 254  : 		{	// test for compatible iterator pair
; 255  : 		}
; 256  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 257  : 
; 258  : 	_Tptr _Ptr;	// pointer to element in vector
; 259  : 	};
; 260  : 
; 261  : template<class _Myvec> inline
; 262  : 	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
; 263  : 		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
; 264  : 	{	// convert to unchecked
; 265  : 	return (_Iter._Unchecked());
; 266  : 	}
; 267  : 
; 268  : template<class _Myvec> inline
; 269  : 	_Vector_const_iterator<_Myvec>&
; 270  : 		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
; 271  : 			typename _Vector_const_iterator<_Myvec>
; 272  : 				::_Unchecked_type _Right)
; 273  : 	{	// convert to checked
; 274  : 	return (_Iter._Rechecked(_Right));
; 275  : 	}
; 276  : 
; 277  : template<class _Myvec> inline
; 278  : 	_Vector_const_iterator<_Myvec> operator+(
; 279  : 		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
; 280  : 		_Vector_const_iterator<_Myvec> _Next)
; 281  : 	{	// add offset to iterator
; 282  : 	return (_Next += _Off);
; 283  : 	}
; 284  : 
; 285  : 		// TEMPLATE CLASS _Vector_iterator
; 286  : template<class _Myvec>
; 287  : 	class _Vector_iterator
; 288  : 		: public _Vector_const_iterator<_Myvec>
; 289  : 	{	// iterator for mutable vector
; 290  : public:
; 291  : 	typedef _Vector_iterator<_Myvec> _Myiter;
; 292  : 	typedef _Vector_const_iterator<_Myvec> _Mybase;
; 293  : 	typedef random_access_iterator_tag iterator_category;
; 294  : 
; 295  : 	typedef typename _Myvec::value_type value_type;
; 296  : 	typedef typename _Myvec::difference_type difference_type;
; 297  : 	typedef typename _Myvec::pointer pointer;
; 298  : 	typedef typename _Myvec::reference reference;
; 299  : 
; 300  : 	_Vector_iterator()
; 301  : 		{	// construct with null vector pointer
; 302  : 		}
; 303  : 
; 304  : 	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
; 305  : 		: _Mybase(_Parg, _Pvector)
; 306  : 		{	// construct with pointer _Parg
; 307  : 		}
; 308  : 
; 309  : 	typedef pointer _Unchecked_type;
; 310  : 
; 311  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 312  : 		{	// reset from unchecked iterator
; 313  : 		this->_Ptr = _Right;
; 314  : 		return (*this);
; 315  : 		}
; 316  : 
; 317  : 	_Unchecked_type _Unchecked() const
; 318  : 		{	// make an unchecked iterator
; 319  : 		return (_Unchecked_type(this->_Ptr));
; 320  : 		}
; 321  : 
; 322  : 	reference operator*() const
; 323  : 		{	// return designated object
; 324  : 		return ((reference)**(_Mybase *)this);
; 325  : 		}
; 326  : 
; 327  : 	pointer operator->() const
; 328  : 		{	// return pointer to class object
; 329  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 330  : 		}
; 331  : 
; 332  : 	_Myiter& operator++()
; 333  : 		{	// preincrement
; 334  : 		++*(_Mybase *)this;
; 335  : 		return (*this);
; 336  : 		}
; 337  : 
; 338  : 	_Myiter operator++(int)
; 339  : 		{	// postincrement
; 340  : 		_Myiter _Tmp = *this;
; 341  : 		++*this;
; 342  : 		return (_Tmp);
; 343  : 		}
; 344  : 
; 345  : 	_Myiter& operator--()
; 346  : 		{	// predecrement
; 347  : 		--*(_Mybase *)this;
; 348  : 		return (*this);
; 349  : 		}
; 350  : 
; 351  : 	_Myiter operator--(int)
; 352  : 		{	// postdecrement
; 353  : 		_Myiter _Tmp = *this;
; 354  : 		--*this;
; 355  : 		return (_Tmp);
; 356  : 		}
; 357  : 
; 358  : 	_Myiter& operator+=(difference_type _Off)
; 359  : 		{	// increment by integer
; 360  : 		*(_Mybase *)this += _Off;
; 361  : 		return (*this);
; 362  : 		}
; 363  : 
; 364  : 	_Myiter operator+(difference_type _Off) const
; 365  : 		{	// return this + integer
; 366  : 		_Myiter _Tmp = *this;
; 367  : 		return (_Tmp += _Off);

  00025	89 08		 mov	 DWORD PTR [eax], ecx
  00027	5e		 pop	 esi

; 1262 : 		return (begin() + _Off);
; 1263 : 		}

  00028	5d		 pop	 ebp
  00029	c2 10 00	 ret	 16			; 00000010H
??$insert@PAE@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::insert<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_default_fill_n@PAEIU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Uninitialized_default_fill_n@PAEIU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z PROC ; std::_Uninitialized_default_fill_n<unsigned char *,unsigned int,std::_Wrap_alloc<std::allocator<unsigned char> > >, COMDAT
; __First$ = ecx
; __Count$ = edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2699 : 	_CSTD memset(_Dest, _Val, _Count);

  00000	52		 push	 edx
  00001	6a 00		 push	 0
  00003	51		 push	 ecx
  00004	e8 00 00 00 00	 call	 _memset
  00009	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 671  : 	}

  0000c	c3		 ret	 0
??$_Uninitialized_default_fill_n@PAEIU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z ENDP ; std::_Uninitialized_default_fill_n<unsigned char *,unsigned int,std::_Wrap_alloc<std::allocator<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Move@PAEPAE@std@@YAPAEPAE00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move@PAEPAE@std@@YAPAEPAE00@Z PROC			; std::_Move<unsigned char *,unsigned char *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 2485 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2476 : 	_CSTD memmove(&*_Dest, &*_First,
; 2477 : 		_Count * sizeof (*_First));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi

; 2485 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00008	8b fa		 mov	 edi, edx

; 2475 : 	ptrdiff_t _Count = _Last - _First;

  0000a	2b f9		 sub	 edi, ecx

; 2476 : 	_CSTD memmove(&*_Dest, &*_First,
; 2477 : 		_Count * sizeof (*_First));

  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2478 : 	return (_Dest + _Count);

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 2486 : 	return (_Move(_First, _Last,
; 2487 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2488 : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Move@PAEPAE@std@@YAPAEPAE00@Z ENDP			; std::_Move<unsigned char *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove<unsigned char *>, COMDAT
; _this$dead$ = ecx

; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 461  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000a	2b f0		 sub	 esi, eax

; 462  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 463  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  00011	e8 00 00 00 00	 call	 _memmove
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	03 c6		 add	 eax, esi
  0001b	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1562 : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@E@std@@YAPAEIPAE@Z
_TEXT	SEGMENT
??$_Allocate@E@std@@YAPAEIPAE@Z PROC			; std::_Allocate<unsigned char>, COMDAT
; __Count$ = ecx

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)
; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00000	83 f9 ff	 cmp	 ecx, -1
  00003	77 0d		 ja	 SHORT $LN1@Allocate
  00005	51		 push	 ecx
  00006	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000b	83 c4 04	 add	 esp, 4
  0000e	85 c0		 test	 eax, eax
  00010	75 05		 jne	 SHORT $LN7@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00012	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN7@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}

  00017	c3		 ret	 0
??$_Allocate@E@std@@YAPAEIPAE@Z ENDP			; std::_Allocate<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Iter_cat@PAE@std@@YA?AUrandom_access_iterator_tag@0@ABQAE@Z
_TEXT	SEGMENT
??$_Iter_cat@PAE@std@@YA?AUrandom_access_iterator_tag@0@ABQAE@Z PROC ; std::_Iter_cat<unsigned char *>, COMDAT
; ___$ReturnUdt$ = ecx
; ___formal$dead$ = edx

; 399  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 400  : 	return (_Cat);

  00000	8b c1		 mov	 eax, ecx

; 401  : 	}

  00002	c3		 ret	 0
??$_Iter_cat@PAE@std@@YA?AUrandom_access_iterator_tag@0@ABQAE@Z ENDP ; std::_Iter_cat<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Insert@PAE@?$vector@EV?$allocator@E@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__Ptr$1$ = -4						; size = 4
__Where$ = 8						; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Insert@PAE@?$vector@EV?$allocator@E@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Insert<unsigned char *>, COMDAT
; _this$ = ecx

; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 815  : 	_Off += _Last - _First;

  00004	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  0000c	2b f2		 sub	 esi, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,

  0000e	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 815  : 	_Off += _Last - _First;

  00010	89 75 10	 mov	 DWORD PTR __Last$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1308 : 		if (_Count == 0)

  00013	0f 84 f7 00 00
	00		 je	 $LN151@Insert

; 968  : 		}
; 969  : 
; 970  : 	size_type _Unused_capacity() const _NOEXCEPT
; 971  : 		{	// micro-optimization for capacity() - size()
; 972  : 		return (this->_Myend - this->_Mylast);

  00019	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001c	57		 push	 edi
  0001d	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]
  00020	8b c7		 mov	 eax, edi
  00022	2b c1		 sub	 eax, ecx

; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)

  00024	3b c6		 cmp	 eax, esi
  00026	0f 83 b8 00 00
	00		 jae	 $LN5@Insert

; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)

  0002c	8b 13		 mov	 edx, DWORD PTR [ebx]
  0002e	8b c2		 mov	 eax, edx
  00030	2b c1		 sub	 eax, ecx
  00032	48		 dec	 eax
  00033	3b c6		 cmp	 eax, esi
  00035	0f 82 dd 00 00
	00		 jb	 $LN155@Insert

; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);

  0003b	2b ca		 sub	 ecx, edx

; 967  : 		return (this->_Myend - this->_Myfirst);

  0003d	2b fa		 sub	 edi, edx

; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0003f	8b d7		 mov	 edx, edi
  00041	d1 ea		 shr	 edx, 1
  00043	83 c8 ff	 or	 eax, -1
  00046	2b c2		 sub	 eax, edx

; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);

  00048	03 ce		 add	 ecx, esi

; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0004a	3b c7		 cmp	 eax, edi
  0004c	73 04		 jae	 SHORT $LN42@Insert
  0004e	33 ff		 xor	 edi, edi
  00050	eb 02		 jmp	 SHORT $LN43@Insert
$LN42@Insert:
  00052	03 fa		 add	 edi, edx
$LN43@Insert:

; 1489 : 		if (_Capacity < _Count)

  00054	3b f9		 cmp	 edi, ecx
  00056	0f 42 f9	 cmovb	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 23   : 	void *_Ptr = 0;

  00059	33 c9		 xor	 ecx, ecx
  0005b	89 4d fc	 mov	 DWORD PTR __Ptr$1$[ebp], ecx

; 24   : 
; 25   : 	if (_Count == 0)

  0005e	85 ff		 test	 edi, edi
  00060	74 1f		 je	 SHORT $LN63@Insert

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00062	83 ff ff	 cmp	 edi, -1
  00065	0f 87 b7 00 00
	00		 ja	 $LN157@Insert
  0006b	57		 push	 edi
  0006c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00071	8b c8		 mov	 ecx, eax
  00073	83 c4 04	 add	 esp, 4
  00076	89 45 fc	 mov	 DWORD PTR __Ptr$1$[ebp], eax
  00079	85 c9		 test	 ecx, ecx
  0007b	0f 84 a1 00 00
	00		 je	 $LN157@Insert
$LN63@Insert:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1321 : 				_Newvec);	// copy prefix

  00081	8b 03		 mov	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 461  : 	size_t _Count = (size_t)(_Last - _First);

  00083	8b 75 08	 mov	 esi, DWORD PTR __Where$[ebp]
  00086	2b f0		 sub	 esi, eax

; 463  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00088	56		 push	 esi
  00089	50		 push	 eax
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 _memmove
  00090	03 c6		 add	 eax, esi

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00092	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  00095	56		 push	 esi
  00096	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 _memmove

; 461  : 	size_t _Count = (size_t)(_Last - _First);

  0009f	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]
  000a2	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  000a5	2b d1		 sub	 edx, ecx

; 463  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000a7	52		 push	 edx

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000a8	03 c6		 add	 eax, esi

; 463  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1331 : 			_Count += size();

  000b1	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000b3	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000b6	2b c1		 sub	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 463  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000b8	83 c4 24	 add	 esp, 36			; 00000024H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1331 : 			_Count += size();

  000bb	03 f0		 add	 esi, eax

; 1332 : 			if (this->_Myfirst != pointer())

  000bd	85 c9		 test	 ecx, ecx
  000bf	74 09		 je	 SHORT $LN110@Insert
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c7	83 c4 04	 add	 esp, 4
$LN110@Insert:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1340 : 			this->_Myend = _Newvec + _Capacity;

  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __Ptr$1$[ebp]

; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;

  000cd	89 0b		 mov	 DWORD PTR [ebx], ecx
  000cf	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  000d2	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  000d5	5f		 pop	 edi
  000d6	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  000d9	5e		 pop	 esi
  000da	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  000dd	5b		 pop	 ebx

; 1352 : 		}

  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 10 00	 ret	 16			; 00000010H
$LN5@Insert:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000e4	56		 push	 esi
  000e5	52		 push	 edx
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1348 : 				this->_Mylast + _Count);

  000ec	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3436 : 	if (_First != _Mid && _Mid != _Last)

  000ef	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1348 : 				this->_Mylast + _Count);

  000f5	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3436 : 	if (_First != _Mid && _Mid != _Last)

  000f8	3b ca		 cmp	 ecx, edx
  000fa	74 10		 je	 SHORT $LN133@Insert
  000fc	3b d0		 cmp	 edx, eax
  000fe	74 0c		 je	 SHORT $LN133@Insert

; 816  : 	}
; 817  : 
; 818  : template<class _InIt> inline
; 819  : 	typename iterator_traits<_InIt>::difference_type
; 820  : 		distance(_InIt _First, _InIt _Last)
; 821  : 	{	// return distance between iterators
; 822  : 	typename iterator_traits<_InIt>::difference_type _Off = 0;
; 823  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));
; 824  : 	return (_Off);
; 825  : 	}
; 826  : 
; 827  : template<class _InIt,
; 828  : 	class _Diff> inline
; 829  : 		void _Distance(_InIt _First, _InIt _Last, _Diff& _Off)
; 830  : 	{	// add to _Off distance between iterators
; 831  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));
; 832  : 	}
; 833  : 
; 834  :  #if _HAS_CPP0X
; 835  : 		// TEMPLATE FUNCTION next
; 836  : template<class _FwdIt> inline
; 837  : 	_FwdIt next(_FwdIt _First,
; 838  : 		typename iterator_traits<_FwdIt>::difference_type _Off = 1)
; 839  : 	{	// increment iterator
; 840  : 	static_assert((is_base_of<forward_iterator_tag,
; 841  : 		typename iterator_traits<_FwdIt>::iterator_category>::value),
; 842  : 		"next requires forward iterator");
; 843  : 
; 844  : 	_STD advance(_First, _Off);
; 845  : 	return (_First);
; 846  : 	}
; 847  : 
; 848  : 		// TEMPLATE FUNCTION prev
; 849  : template<class _BidIt> inline
; 850  : 	_BidIt prev(_BidIt _First,
; 851  : 		typename iterator_traits<_BidIt>::difference_type _Off = 1)
; 852  : 	{	// decrement iterator
; 853  : 	static_assert((is_base_of<bidirectional_iterator_tag,
; 854  : 		typename iterator_traits<_BidIt>::iterator_category>::value),
; 855  : 		"prev requires bidirectional iterator");
; 856  : 
; 857  : 	_STD advance(_First, -_Off);
; 858  : 	return (_First);
; 859  : 	}
; 860  : 
; 861  : template<class _Container>
; 862  : 	auto inline begin(_Container& _Cont) -> decltype(_Cont.begin())
; 863  : 	{	// get beginning of sequence
; 864  : 	return (_Cont.begin());
; 865  : 	}
; 866  : 
; 867  : template<class _Container>
; 868  : 	auto inline begin(const _Container& _Cont) -> decltype(_Cont.begin())
; 869  : 	{	// get beginning of sequence
; 870  : 	return (_Cont.begin());
; 871  : 	}
; 872  : 
; 873  : template<class _Container>
; 874  : 	auto inline end(_Container& _Cont) -> decltype(_Cont.end())
; 875  : 	{	// get end of sequence
; 876  : 	return (_Cont.end());
; 877  : 	}
; 878  : 
; 879  : template<class _Container>
; 880  : 	auto inline end(const _Container& _Cont) -> decltype(_Cont.end())
; 881  : 	{	// get end of sequence
; 882  : 	return (_Cont.end());
; 883  : 	}
; 884  : 
; 885  : template<class _Ty,
; 886  : 	size_t _Size> inline
; 887  : 	_Ty *begin(_Ty (&_Array)[_Size])
; 888  : 	{	// get beginning of array
; 889  : 	return (_Array);
; 890  : 	}
; 891  : 
; 892  : template<class _Ty,
; 893  : 	size_t _Size> inline
; 894  : 	_Ty *end(_Ty (&_Array)[_Size])
; 895  : 	{	// get end of array
; 896  : 	return (_Array + _Size);
; 897  : 	}
; 898  :  #endif /* _HAS_CPP0X */
; 899  : 
; 900  : 		// TEMPLATE CLASS _Revranit
; 901  : template<class _Ty>
; 902  : 	struct pointer_traits;
; 903  : 
; 904  : template<class _RanIt,
; 905  : 	class _Base>
; 906  : 	class _Revranit
; 907  : 		: public _Base
; 908  : 	{	// wrap iterator to run it backwards
; 909  : public:
; 910  : 	typedef _Revranit<_RanIt, _Base> _Myt;
; 911  :  	typedef typename _Base::difference_type difference_type;
; 912  : 	typedef typename _Base::pointer pointer;
; 913  : 	typedef typename _Base::reference reference;
; 914  : 	typedef _RanIt iterator_type;
; 915  : 
; 916  : 	_Revranit()
; 917  : 		{	// construct with default wrapped iterator
; 918  : 		}
; 919  : 
; 920  : 	explicit _Revranit(_RanIt _Right)
; 921  : 		: current(_Right)
; 922  : 		{	// construct wrapped iterator from _Right
; 923  : 		}
; 924  : 
; 925  : 	template<class _RanIt2,
; 926  : 		class _Base2>
; 927  : 		_Revranit(const _Revranit<_RanIt2, _Base2>& _Right)
; 928  : 		: current(_Right.base())
; 929  : 		{	// initialize with compatible base
; 930  : 		}
; 931  : 
; 932  : 	_RanIt base() const
; 933  : 		{	// return wrapped iterator
; 934  : 		return (current);
; 935  : 		}
; 936  : 
; 937  : 	reference operator*() const
; 938  : 		{	// return designated value
; 939  : 		_RanIt _Tmp = current;
; 940  : 		return (*--_Tmp);
; 941  : 		}
; 942  : 
; 943  : 	pointer operator->() const
; 944  : 		{	// return pointer to class object
; 945  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 946  : 		}
; 947  : 
; 948  : 	_Myt& operator++()
; 949  : 		{	// preincrement
; 950  : 		--current;
; 951  : 		return (*this);
; 952  : 		}
; 953  : 
; 954  : 	_Myt operator++(int)
; 955  : 		{	// postincrement
; 956  : 		_Myt _Tmp = *this;
; 957  : 		--current;
; 958  : 		return (_Tmp);
; 959  : 		}
; 960  : 
; 961  : 	_Myt& operator--()
; 962  : 		{	// predecrement
; 963  : 		++current;
; 964  : 		return (*this);
; 965  : 		}
; 966  : 
; 967  : 	_Myt operator--(int)
; 968  : 		{	// postdecrement
; 969  : 		_Myt _Tmp = *this;
; 970  : 		++current;
; 971  : 		return (_Tmp);
; 972  : 		}
; 973  : 
; 974  : 	template<class _RanIt2,
; 975  : 		class _Base2>
; 976  : 		bool _Equal(const _Revranit<_RanIt2, _Base2>& _Right) const
; 977  : 		{	// test for iterator equality
; 978  : 		return (current == _Right.base());
; 979  : 		}
; 980  : 
; 981  : // N.B. functions valid for random-access iterators only beyond this point
; 982  : 
; 983  : 	_Myt& operator+=(difference_type _Off)
; 984  : 		{	// increment by integer
; 985  : 		current -= _Off;
; 986  : 		return (*this);
; 987  : 		}
; 988  : 
; 989  : 	_Myt operator+(difference_type _Off) const
; 990  : 		{	// return this + integer
; 991  : 		return (_Myt(current - _Off));
; 992  : 		}
; 993  : 
; 994  : 	_Myt& operator-=(difference_type _Off)
; 995  : 		{	// decrement by integer
; 996  : 		current += _Off;
; 997  : 		return (*this);
; 998  : 		}
; 999  : 
; 1000 : 	_Myt operator-(difference_type _Off) const
; 1001 : 		{	// return this - integer
; 1002 : 		return (_Myt(current + _Off));
; 1003 : 		}
; 1004 : 
; 1005 : 	reference operator[](difference_type _Off) const
; 1006 : 		{	// subscript
; 1007 : 		return (*(*this + _Off));
; 1008 : 		}
; 1009 : 
; 1010 : 	template<class _RanIt2,
; 1011 : 		class _Base2>
; 1012 : 		bool _Less(const _Revranit<_RanIt2, _Base2>& _Right) const
; 1013 : 		{	// test if this < _Right
; 1014 : 		return (_Right.base() < current);
; 1015 : 		}
; 1016 : 
; 1017 : 	difference_type operator-(const _Myt& _Right) const
; 1018 : 		{	// return difference of iterators
; 1019 : 		return (_Right.base() - current);
; 1020 : 		}
; 1021 : 
; 1022 : protected:
; 1023 : 	_RanIt current;	// the wrapped iterator
; 1024 : 	};
; 1025 : 
; 1026 : 		// _Revranit TEMPLATE OPERATORS
; 1027 : template<class _RanIt,
; 1028 : 	class _Base,
; 1029 : 	class _Diff> inline
; 1030 : 	_Revranit<_RanIt, _Base>
; 1031 : 		operator+(_Diff _Off,
; 1032 : 		const _Revranit<_RanIt, _Base>& _Right)
; 1033 : 	{	// return reverse_iterator + integer
; 1034 : 	return (_Right + _Off);
; 1035 : 	}
; 1036 : 
; 1037 : template<class _RanIt1,
; 1038 : 	class _Base1,
; 1039 : 	class _RanIt2,
; 1040 : 	class _Base2>
; 1041 : 	auto inline operator-(
; 1042 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1043 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1044 : 			-> decltype(_Right.base() - _Left.base())
; 1045 : 	{	// return difference of reverse_iterators
; 1046 : 	return (_Right.base() - _Left.base());
; 1047 : 	}
; 1048 : 
; 1049 : template<class _RanIt1,
; 1050 : 	class _Base1,
; 1051 : 	class _RanIt2,
; 1052 : 	class _Base2> inline
; 1053 : 	bool operator==(
; 1054 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1055 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1056 : 	{	// test for reverse_iterator equality
; 1057 : 	return (_Left._Equal(_Right));
; 1058 : 	}
; 1059 : 
; 1060 : template<class _RanIt1,
; 1061 : 	class _Base1,
; 1062 : 	class _RanIt2,
; 1063 : 	class _Base2> inline
; 1064 : 	bool operator!=(
; 1065 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1066 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1067 : 	{	// test for reverse_iterator inequality
; 1068 : 	return (!(_Left == _Right));
; 1069 : 	}
; 1070 : 
; 1071 : template<class _RanIt1,
; 1072 : 	class _Base1,
; 1073 : 	class _RanIt2,
; 1074 : 	class _Base2> inline
; 1075 : 	bool operator<(
; 1076 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1077 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1078 : 	{	// test for reverse_iterator < reverse_iterator
; 1079 : 	return (_Left._Less(_Right));
; 1080 : 	}
; 1081 : 
; 1082 : template<class _RanIt1,
; 1083 : 	class _Base1,
; 1084 : 	class _RanIt2,
; 1085 : 	class _Base2> inline
; 1086 : 	bool operator>(
; 1087 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1088 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1089 : 	{	// test for reverse_iterator > reverse_iterator
; 1090 : 	return (_Right < _Left);
; 1091 : 	}
; 1092 : 
; 1093 : template<class _RanIt1,
; 1094 : 	class _Base1,
; 1095 : 	class _RanIt2,
; 1096 : 	class _Base2> inline
; 1097 : 	bool operator<=(
; 1098 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1099 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1100 : 	{	// test for reverse_iterator <= reverse_iterator
; 1101 : 	return (!(_Right < _Left));
; 1102 : 	}
; 1103 : 
; 1104 : template<class _RanIt1,
; 1105 : 	class _Base1,
; 1106 : 	class _RanIt2,
; 1107 : 	class _Base2> inline
; 1108 : 	bool operator>=(
; 1109 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1110 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1111 : 	{	// test for reverse_iterator >= reverse_iterator
; 1112 : 	return (!(_Left < _Right));
; 1113 : 	}
; 1114 : 
; 1115 : 		// TEMPLATE CLASS reverse_iterator
; 1116 : template<class _RanIt>
; 1117 : 	class reverse_iterator
; 1118 : 		: public _Revranit<_RanIt, iterator<
; 1119 : 			typename iterator_traits<_RanIt>::iterator_category,
; 1120 : 			typename iterator_traits<_RanIt>::value_type,
; 1121 : 			typename iterator_traits<_RanIt>::difference_type,
; 1122 : 			typename iterator_traits<_RanIt>::pointer,
; 1123 : 			typename iterator_traits<_RanIt>::reference> >
; 1124 : 	{	// wrap iterator to run it backwards
; 1125 : 	typedef reverse_iterator<_RanIt> _Myt;
; 1126 : 	typedef _Revranit<_RanIt, iterator<
; 1127 : 		typename iterator_traits<_RanIt>::iterator_category,
; 1128 : 		typename iterator_traits<_RanIt>::value_type,
; 1129 : 		typename iterator_traits<_RanIt>::difference_type,
; 1130 : 		typename iterator_traits<_RanIt>::pointer,
; 1131 : 		typename iterator_traits<_RanIt>::reference> > _Mybase;
; 1132 : 
; 1133 : public:
; 1134 :  	typedef typename iterator_traits<_RanIt>::difference_type difference_type;
; 1135 : 	typedef typename iterator_traits<_RanIt>::pointer pointer;
; 1136 : 	typedef typename iterator_traits<_RanIt>::reference reference;
; 1137 : 	typedef _RanIt iterator_type;
; 1138 : 
; 1139 : 	reverse_iterator()
; 1140 : 		{	// construct with default wrapped iterator
; 1141 : 		}
; 1142 : 
; 1143 : 	explicit reverse_iterator(_RanIt _Right)
; 1144 : 		: _Mybase(_Right)
; 1145 : 		{	// construct wrapped iterator from _Right
; 1146 : 		}
; 1147 : 
; 1148 : 	template<class _Other>
; 1149 : 		reverse_iterator(const reverse_iterator<_Other>& _Right)
; 1150 : 		: _Mybase(_Right.base())
; 1151 : 		{	// initialize with compatible base
; 1152 : 		}
; 1153 : 
; 1154 : 	template<class _Other>
; 1155 : 		_Myt& operator=(const reverse_iterator<_Other>& _Right)
; 1156 : 		{	// assign with compatible base
; 1157 : 		this->current = _Right.base();
; 1158 : 		return (*this);
; 1159 : 		}
; 1160 : 
; 1161 : 	reverse_iterator(_Mybase _Right)
; 1162 : 		: _Mybase(_Right)
; 1163 : 		{	// construct wrapped iterator from base object
; 1164 : 		}
; 1165 : 
; 1166 : 	_Myt& operator++()
; 1167 : 		{	// preincrement
; 1168 : 		++*((_Mybase *)this);
; 1169 : 		return (*this);
; 1170 : 		}
; 1171 : 
; 1172 : 	_Myt operator++(int)
; 1173 : 		{	// postincrement
; 1174 : 		_Myt _Tmp = *this;
; 1175 : 		++*this;
; 1176 : 		return (_Tmp);
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& operator--()
; 1180 : 		{	// predecrement
; 1181 : 		--*((_Mybase *)this);
; 1182 : 		return (*this);
; 1183 : 		}
; 1184 : 
; 1185 : 	_Myt operator--(int)
; 1186 : 		{	// postdecrement
; 1187 : 		_Myt _Tmp = *this;
; 1188 : 		--*this;
; 1189 : 		return (_Tmp);
; 1190 : 		}
; 1191 : 
; 1192 : 	_Myt& operator+=(difference_type _Off)
; 1193 : 		{	// increment by integer
; 1194 : 		*((_Mybase *)this) += _Off;
; 1195 : 		return (*this);
; 1196 : 		}
; 1197 : 
; 1198 : 	_Myt operator+(difference_type _Off) const
; 1199 : 		{	// return this + integer
; 1200 : 		_Myt _Tmp = *this;
; 1201 : 		return (_Tmp += _Off);
; 1202 : 		}
; 1203 : 
; 1204 : 	_Myt& operator-=(difference_type _Off)
; 1205 : 		{	// decrement by integer
; 1206 : 		*((_Mybase *)this) -= _Off;
; 1207 : 		return (*this);
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt operator-(difference_type _Off) const
; 1211 : 		{	// return this - integer
; 1212 : 		_Myt _Tmp = *this;
; 1213 : 		return (_Tmp -= _Off);
; 1214 : 		}
; 1215 : 	};
; 1216 : 
; 1217 : template<class _RanIt>
; 1218 : 	struct _Is_checked_helper<reverse_iterator<_RanIt> >
; 1219 : 		: public _Is_checked_helper<_RanIt>
; 1220 : 	{	// mark reverse_iterator as checked if its wrapped iterator is checked
; 1221 : 	};
; 1222 : 
; 1223 : 		// reverse_iterator TEMPLATE OPERATORS
; 1224 : template<class _RanIt,
; 1225 : 	class _Diff> inline
; 1226 : 	reverse_iterator<_RanIt> operator+(_Diff _Off,
; 1227 : 		const reverse_iterator<_RanIt>& _Right)
; 1228 : 	{	// return reverse_iterator + integer
; 1229 : 	return (_Right + _Off);
; 1230 : 	}
; 1231 : 
; 1232 : template<class _RanIt1,
; 1233 : 	class _RanIt2>
; 1234 : 	auto inline operator-(const reverse_iterator<_RanIt1>& _Left,
; 1235 : 		const reverse_iterator<_RanIt2>& _Right)
; 1236 : 			-> decltype(_Right.base() - _Left.base())
; 1237 : 	{	// return difference of reverse_iterators
; 1238 : 	return (_Right.base() - _Left.base());
; 1239 : 	}
; 1240 : 
; 1241 : template<class _RanIt1,
; 1242 : 	class _RanIt2> inline
; 1243 : 	bool operator==(const reverse_iterator<_RanIt1>& _Left,
; 1244 : 		const reverse_iterator<_RanIt2>& _Right)
; 1245 : 	{	// test for reverse_iterator equality
; 1246 : 	return (_Left._Equal(_Right));
; 1247 : 	}
; 1248 : 
; 1249 : template<class _RanIt1,
; 1250 : 	class _RanIt2> inline
; 1251 : 	bool operator!=(const reverse_iterator<_RanIt1>& _Left,
; 1252 : 		const reverse_iterator<_RanIt2>& _Right)
; 1253 : 	{	// test for reverse_iterator inequality
; 1254 : 	return (!(_Left == _Right));
; 1255 : 	}
; 1256 : 
; 1257 : template<class _RanIt1,
; 1258 : 	class _RanIt2> inline
; 1259 : 	bool operator<(const reverse_iterator<_RanIt1>& _Left,
; 1260 : 		const reverse_iterator<_RanIt2>& _Right)
; 1261 : 	{	// test for reverse_iterator < reverse_iterator
; 1262 : 	return (_Left._Less(_Right));
; 1263 : 	}
; 1264 : 
; 1265 : template<class _RanIt1,
; 1266 : 	class _RanIt2> inline
; 1267 : 	bool operator>(const reverse_iterator<_RanIt1>& _Left,
; 1268 : 		const reverse_iterator<_RanIt2>& _Right)
; 1269 : 	{	// test for reverse_iterator > reverse_iterator
; 1270 : 	return (_Right < _Left);
; 1271 : 	}
; 1272 : 
; 1273 : template<class _RanIt1,
; 1274 : 	class _RanIt2> inline
; 1275 : 	bool operator<=(const reverse_iterator<_RanIt1>& _Left,
; 1276 : 		const reverse_iterator<_RanIt2>& _Right)
; 1277 : 	{	// test for reverse_iterator <= reverse_iterator
; 1278 : 	return (!(_Right < _Left));
; 1279 : 	}
; 1280 : 
; 1281 : template<class _RanIt1,
; 1282 : 	class _RanIt2> inline
; 1283 : 	bool operator>=(const reverse_iterator<_RanIt1>& _Left,
; 1284 : 		const reverse_iterator<_RanIt2>& _Right)
; 1285 : 	{	// test for reverse_iterator >= reverse_iterator
; 1286 : 	return (!(_Left < _Right));
; 1287 : 	}
; 1288 : 
; 1289 : 		// TEMPLATE CLASS _Array_const_iterator
; 1290 : template<class _Ty,
; 1291 : 	size_t _Size>
; 1292 : 	class _Array_const_iterator
; 1293 : 		: public _Iterator012<random_access_iterator_tag,
; 1294 : 			_Ty,
; 1295 : 			ptrdiff_t,
; 1296 : 			const _Ty *,
; 1297 : 			const _Ty&,
; 1298 : 			_Iterator_base>
; 1299 : 	{	// iterator for nonmutable array
; 1300 : public:
; 1301 : 	typedef _Array_const_iterator<_Ty, _Size> _Myiter;
; 1302 : 	typedef random_access_iterator_tag iterator_category;
; 1303 : 
; 1304 : 	typedef _Ty value_type;
; 1305 : 	typedef size_t size_type;
; 1306 : 	typedef ptrdiff_t difference_type;
; 1307 : 	typedef const _Ty *pointer;
; 1308 : 	typedef const _Ty& reference;
; 1309 : 	enum {_EEN_SIZE = _Size};	// helper for expression evaluator
; 1310 : 	enum {_EEN_IDL =
; 1311 : 		_ITERATOR_DEBUG_LEVEL};	// helper for expression evaluator
; 1312 : 
; 1313 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 1314 : 	_Array_const_iterator()
; 1315 : 		{	// construct with null pointer
; 1316 : 		_Ptr = 0;
; 1317 : 		}
; 1318 : 
; 1319 : 	explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
; 1320 : 		{	// construct with pointer and offset
; 1321 : 		_Ptr = _Parg + _Off;
; 1322 : 		}
; 1323 : 
; 1324 : 	typedef pointer _Unchecked_type;
; 1325 : 
; 1326 : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 1327 : 		{	// reset from unchecked iterator
; 1328 : 		_Ptr = _Right;
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	_Unchecked_type _Unchecked() const
; 1333 : 		{	// make an unchecked iterator
; 1334 : 		return (_Ptr);
; 1335 : 		}
; 1336 : 
; 1337 : 	reference operator*() const
; 1338 : 		{	// return designated object
; 1339 : 		return (*_Ptr);
; 1340 : 		}
; 1341 : 
; 1342 : 	pointer operator->() const
; 1343 : 		{	// return pointer to class object
; 1344 : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 1345 : 		}
; 1346 : 
; 1347 : 	_Myiter& operator++()
; 1348 : 		{	// preincrement
; 1349 : 		++_Ptr;
; 1350 : 		return (*this);
; 1351 : 		}
; 1352 : 
; 1353 : 	_Myiter operator++(int)
; 1354 : 		{	// postincrement
; 1355 : 		_Myiter _Tmp = *this;
; 1356 : 		++*this;
; 1357 : 		return (_Tmp);
; 1358 : 		}
; 1359 : 
; 1360 : 	_Myiter& operator--()
; 1361 : 		{	// predecrement
; 1362 : 		--_Ptr;
; 1363 : 		return (*this);
; 1364 : 		}
; 1365 : 
; 1366 : 	_Myiter operator--(int)
; 1367 : 		{	// postdecrement
; 1368 : 		_Myiter _Tmp = *this;
; 1369 : 		--*this;
; 1370 : 		return (_Tmp);
; 1371 : 		}
; 1372 : 
; 1373 : 	_Myiter& operator+=(difference_type _Off)
; 1374 : 		{	// increment by integer
; 1375 : 		_Ptr += _Off;
; 1376 : 		return (*this);
; 1377 : 		}
; 1378 : 
; 1379 : 	_Myiter operator+(difference_type _Off) const
; 1380 : 		{	// return this + integer
; 1381 : 		_Myiter _Tmp = *this;
; 1382 : 		return (_Tmp += _Off);
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myiter& operator-=(difference_type _Off)
; 1386 : 		{	// decrement by integer
; 1387 : 		return (*this += -_Off);
; 1388 : 		}
; 1389 : 
; 1390 : 	_Myiter operator-(difference_type _Off) const
; 1391 : 		{	// return this - integer
; 1392 : 		_Myiter _Tmp = *this;
; 1393 : 		return (_Tmp -= _Off);
; 1394 : 		}
; 1395 : 
; 1396 : 	difference_type operator-(const _Myiter& _Right) const
; 1397 : 		{	// return difference of iterators
; 1398 : 		return (_Ptr - _Right._Ptr);
; 1399 : 		}
; 1400 : 
; 1401 : 	reference operator[](difference_type _Off) const
; 1402 : 		{	// subscript
; 1403 : 		return (*(*this + _Off));
; 1404 : 		}
; 1405 : 
; 1406 : 	bool operator==(const _Myiter& _Right) const
; 1407 : 		{	// test for iterator equality
; 1408 : 		return (_Ptr == _Right._Ptr);
; 1409 : 		}
; 1410 : 
; 1411 : 	bool operator!=(const _Myiter& _Right) const
; 1412 : 		{	// test for iterator inequality
; 1413 : 		return (!(*this == _Right));
; 1414 : 		}
; 1415 : 
; 1416 : 	bool operator<(const _Myiter& _Right) const
; 1417 : 		{	// test if this < _Right
; 1418 : 		return (_Ptr < _Right._Ptr);
; 1419 : 		}
; 1420 : 
; 1421 : 	bool operator>(const _Myiter& _Right) const
; 1422 : 		{	// test if this > _Right
; 1423 : 		return (_Right < *this);
; 1424 : 		}
; 1425 : 
; 1426 : 	bool operator<=(const _Myiter& _Right) const
; 1427 : 		{	// test if this <= _Right
; 1428 : 		return (!(_Right < *this));
; 1429 : 		}
; 1430 : 
; 1431 : 	bool operator>=(const _Myiter& _Right) const
; 1432 : 		{	// test if this >= _Right
; 1433 : 		return (!(*this < _Right));
; 1434 : 		}
; 1435 : 
; 1436 : 	pointer _Ptr;	// beginning of array
; 1437 : 
; 1438 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 1439 : 	_Array_const_iterator()
; 1440 : 		{	// construct with null pointer
; 1441 : 		_Ptr = 0;
; 1442 : 		_Idx = 0;
; 1443 : 		}
; 1444 : 
; 1445 : 	explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
; 1446 : 		{	// construct with pointer and offset
; 1447 : 		_Ptr = _Parg;
; 1448 : 		_Idx = _Off;
; 1449 : 		}
; 1450 : 
; 1451 : 	typedef pointer _Unchecked_type;
; 1452 : 
; 1453 : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 1454 : 		{	// reset from unchecked iterator
; 1455 : 		_Idx = _Right - _Ptr;
; 1456 : 		return (*this);
; 1457 : 		}
; 1458 : 
; 1459 : 	_Unchecked_type _Unchecked() const
; 1460 : 		{	// make an unchecked iterator
; 1461 : 		return (_Ptr + _Idx);
; 1462 : 		}
; 1463 : 
; 1464 : 	reference operator*() const
; 1465 : 		{	// return designated object
; 1466 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1467 : 		if (_Ptr == 0
; 1468 : 			|| _Size <= _Idx)
; 1469 : 			{	// report error
; 1470 : 			_DEBUG_ERROR("array iterator not dereferencable");
; 1471 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1472 : 			}
; 1473 : 
; 1474 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1475 : 		_SCL_SECURE_VALIDATE(_Ptr != 0);
; 1476 : 		_SCL_SECURE_VALIDATE_RANGE(_Idx < _Size);
; 1477 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1478 : 
; 1479 : 		_Analysis_assume_(_Ptr != 0);
; 1480 : 
; 1481 : 		return (_Ptr[_Idx]);
; 1482 : 		}
; 1483 : 
; 1484 : 	pointer operator->() const
; 1485 : 		{	// return pointer to class object
; 1486 : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 1487 : 		}
; 1488 : 
; 1489 : 	_Myiter& operator++()
; 1490 : 		{	// preincrement
; 1491 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1492 : 		if (_Ptr == 0
; 1493 : 			|| _Size <= _Idx)
; 1494 : 			{	// report error
; 1495 : 			_DEBUG_ERROR("array iterator not incrementable");
; 1496 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1497 : 			}
; 1498 : 
; 1499 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1500 : 		_SCL_SECURE_VALIDATE(_Ptr != 0);
; 1501 : 		_SCL_SECURE_VALIDATE_RANGE(_Idx < _Size);
; 1502 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1503 : 
; 1504 : 		++_Idx;
; 1505 : 		return (*this);
; 1506 : 		}
; 1507 : 
; 1508 : 	_Myiter operator++(int)
; 1509 : 		{	// postincrement
; 1510 : 		_Myiter _Tmp = *this;
; 1511 : 		++*this;
; 1512 : 		return (_Tmp);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myiter& operator--()
; 1516 : 		{	// predecrement
; 1517 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1518 : 		if (_Ptr == 0
; 1519 : 			|| _Idx <= 0)
; 1520 : 			{	// report error
; 1521 : 			_DEBUG_ERROR("array iterator not decrementable");
; 1522 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1523 : 			}
; 1524 : 
; 1525 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1526 : 		_SCL_SECURE_VALIDATE(_Ptr != 0);
; 1527 : 		_SCL_SECURE_VALIDATE_RANGE(0 < _Idx);
; 1528 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1529 : 
; 1530 : 		--_Idx;
; 1531 : 		return (*this);
; 1532 : 		}
; 1533 : 
; 1534 : 	_Myiter operator--(int)
; 1535 : 		{	// postdecrement
; 1536 : 		_Myiter _Tmp = *this;
; 1537 : 		--*this;
; 1538 : 		return (_Tmp);
; 1539 : 		}
; 1540 : 
; 1541 : 	_Myiter& operator+=(difference_type _Off)
; 1542 : 		{	// increment by integer
; 1543 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1544 : 		if (_Size < _Idx + _Off)
; 1545 : 			{	// report error
; 1546 : 			_DEBUG_ERROR("array iterator + offset out of range");
; 1547 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1548 : 			}
; 1549 : 
; 1550 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1551 : 		_SCL_SECURE_VALIDATE_RANGE(_Idx + _Off <= _Size);
; 1552 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1553 : 
; 1554 : 		_Idx += _Off;
; 1555 : 		return (*this);
; 1556 : 		}
; 1557 : 
; 1558 : 	_Myiter operator+(difference_type _Off) const
; 1559 : 		{	// return this + integer
; 1560 : 		_Myiter _Tmp = *this;
; 1561 : 		return (_Tmp += _Off);
; 1562 : 		}
; 1563 : 
; 1564 : 	_Myiter& operator-=(difference_type _Off)
; 1565 : 		{	// decrement by integer
; 1566 : 		return (*this += -_Off);
; 1567 : 		}
; 1568 : 
; 1569 : 	_Myiter operator-(difference_type _Off) const
; 1570 : 		{	// return this - integer
; 1571 : 		_Myiter _Tmp = *this;
; 1572 : 		return (_Tmp -= _Off);
; 1573 : 		}
; 1574 : 
; 1575 : 	difference_type operator-(const _Myiter& _Right) const
; 1576 : 		{	// return difference of iterators
; 1577 : 		_Compat(_Right);
; 1578 : 		return (_Idx < _Right._Idx
; 1579 : 			? -(difference_type)(_Right._Idx - _Idx)
; 1580 : 			: (difference_type)_Idx - _Right._Idx);
; 1581 : 		}
; 1582 : 
; 1583 : 	reference operator[](difference_type _Off) const
; 1584 : 		{	// subscript
; 1585 : 		return (*(*this + _Off));
; 1586 : 		}
; 1587 : 
; 1588 : 	bool operator==(const _Myiter& _Right) const
; 1589 : 		{	// test for iterator equality
; 1590 : 		_Compat(_Right);
; 1591 : 		return (_Idx == _Right._Idx);
; 1592 : 		}
; 1593 : 
; 1594 : 	bool operator!=(const _Myiter& _Right) const
; 1595 : 		{	// test for iterator inequality
; 1596 : 		return (!(*this == _Right));
; 1597 : 		}
; 1598 : 
; 1599 : 	bool operator<(const _Myiter& _Right) const
; 1600 : 		{	// test if this < _Right
; 1601 : 		_Compat(_Right);
; 1602 : 		return (_Idx < _Right._Idx);
; 1603 : 		}
; 1604 : 
; 1605 : 	bool operator>(const _Myiter& _Right) const
; 1606 : 		{	// test if this > _Right
; 1607 : 		return (_Right < *this);
; 1608 : 		}
; 1609 : 
; 1610 : 	bool operator<=(const _Myiter& _Right) const
; 1611 : 		{	// test if this <= _Right
; 1612 : 		return (!(_Right < *this));
; 1613 : 		}
; 1614 : 
; 1615 : 	bool operator>=(const _Myiter& _Right) const
; 1616 : 		{	// test if this >= _Right
; 1617 : 		return (!(*this < _Right));
; 1618 : 		}
; 1619 : 
; 1620 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1621 : 	void _Compat(const _Myiter& _Right) const
; 1622 : 		{	// test for compatible iterator pair
; 1623 : 		if (_Ptr != _Right._Ptr)
; 1624 : 			{	// report error
; 1625 : 			_DEBUG_ERROR("array iterators incompatible");
; 1626 : 			_SCL_SECURE_INVALID_ARGUMENT;
; 1627 : 			}
; 1628 : 		}
; 1629 : 
; 1630 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1631 : 	void _Compat(const _Myiter& _Right) const
; 1632 : 		{	// test for compatible iterator pair
; 1633 : 		_SCL_SECURE_VALIDATE_RANGE(_Ptr == _Right._Ptr);
; 1634 : 		}
; 1635 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1636 : 
; 1637 : 	pointer _Ptr;	// beginning of array
; 1638 : 	size_t _Idx;	// offset into array
; 1639 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 1640 : 	};
; 1641 : 
; 1642 : template<class _Ty,
; 1643 : 	size_t _Size> inline
; 1644 : 	typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type
; 1645 : 		_Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)
; 1646 : 	{	// convert to unchecked
; 1647 : 	return (_Iter._Unchecked());
; 1648 : 	}
; 1649 : 
; 1650 : template<class _Ty,
; 1651 : 	size_t _Size> inline
; 1652 : 	_Array_const_iterator<_Ty, _Size>&
; 1653 : 		_Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
; 1654 : 			typename _Array_const_iterator<_Ty, _Size>
; 1655 : 				::_Unchecked_type _Right)
; 1656 : 	{	// convert to checked
; 1657 : 	return (_Iter._Rechecked(_Right));
; 1658 : 	}
; 1659 : 
; 1660 : template<class _Ty,
; 1661 : 	size_t _Size> inline
; 1662 : 	_Array_const_iterator<_Ty, _Size> operator+(
; 1663 : 		typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,
; 1664 : 		_Array_const_iterator<_Ty, _Size> _Next)
; 1665 : 	{	// add offset to iterator
; 1666 : 	return (_Next += _Off);
; 1667 : 	}
; 1668 : 
; 1669 : 		// TEMPLATE CLASS _Array_iterator
; 1670 : template<class _Ty,
; 1671 : 	size_t _Size>
; 1672 : 	class _Array_iterator
; 1673 : 		: public _Array_const_iterator<_Ty, _Size>
; 1674 : 	{	// iterator for mutable array
; 1675 : public:
; 1676 : 	typedef _Array_iterator<_Ty, _Size> _Myiter;
; 1677 : 	typedef _Array_const_iterator<_Ty, _Size> _Mybase;
; 1678 : 	typedef random_access_iterator_tag iterator_category;
; 1679 : 
; 1680 : 	typedef _Ty value_type;
; 1681 : 	typedef size_t size_type;
; 1682 : 	typedef ptrdiff_t difference_type;
; 1683 : 	typedef _Ty *pointer;
; 1684 : 	typedef _Ty& reference;
; 1685 : 
; 1686 : 	_Array_iterator()
; 1687 : 		{	// construct with null pointer
; 1688 : 		}
; 1689 : 
; 1690 : 	explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
; 1691 : 		: _Mybase(_Parg, _Off)
; 1692 : 		{	// construct with pointer and offset
; 1693 : 		}
; 1694 : 	enum {_EEN_SIZE = _Size};	// helper for expression evaluator
; 1695 : 	enum {_EEN_IDL =
; 1696 : 		_ITERATOR_DEBUG_LEVEL};	// helper for expression evaluator
; 1697 : 
; 1698 : 	typedef pointer _Unchecked_type;
; 1699 : 
; 1700 : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 1701 : 		{	// reset from unchecked iterator
; 1702 : 		((_Mybase *)this)->_Rechecked(_Right);
; 1703 : 		return (*this);
; 1704 : 		}
; 1705 : 
; 1706 : 	_Unchecked_type _Unchecked() const
; 1707 : 		{	// make an unchecked iterator
; 1708 : 		return ((pointer)((_Mybase *)this)->_Unchecked());
; 1709 : 		}
; 1710 : 
; 1711 : 	reference operator*() const
; 1712 : 		{	// return designated object
; 1713 : 		return ((reference)**(_Mybase *)this);
; 1714 : 		}
; 1715 : 
; 1716 : 	pointer operator->() const
; 1717 : 		{	// return pointer to class object
; 1718 : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 1719 : 		}
; 1720 : 
; 1721 : 	_Myiter& operator++()
; 1722 : 		{	// preincrement
; 1723 : 		++*(_Mybase *)this;
; 1724 : 		return (*this);
; 1725 : 		}
; 1726 : 
; 1727 : 	_Myiter operator++(int)
; 1728 : 		{	// postincrement
; 1729 : 		_Myiter _Tmp = *this;
; 1730 : 		++*this;
; 1731 : 		return (_Tmp);
; 1732 : 		}
; 1733 : 
; 1734 : 	_Myiter& operator--()
; 1735 : 		{	// predecrement
; 1736 : 		--*(_Mybase *)this;
; 1737 : 		return (*this);
; 1738 : 		}
; 1739 : 
; 1740 : 	_Myiter operator--(int)
; 1741 : 		{	// postdecrement
; 1742 : 		_Myiter _Tmp = *this;
; 1743 : 		--*this;
; 1744 : 		return (_Tmp);
; 1745 : 		}
; 1746 : 
; 1747 : 	_Myiter& operator+=(difference_type _Off)
; 1748 : 		{	// increment by integer
; 1749 : 		*(_Mybase *)this += _Off;
; 1750 : 		return (*this);
; 1751 : 		}
; 1752 : 
; 1753 : 	_Myiter operator+(difference_type _Off) const
; 1754 : 		{	// return this + integer
; 1755 : 		_Myiter _Tmp = *this;
; 1756 : 		return (_Tmp += _Off);
; 1757 : 		}
; 1758 : 
; 1759 : 	_Myiter& operator-=(difference_type _Off)
; 1760 : 		{	// decrement by integer
; 1761 : 		return (*this += -_Off);
; 1762 : 		}
; 1763 : 
; 1764 : 	_Myiter operator-(difference_type _Off) const
; 1765 : 		{	// return this - integer
; 1766 : 		_Myiter _Tmp = *this;
; 1767 : 		return (_Tmp -= _Off);
; 1768 : 		}
; 1769 : 
; 1770 : 	difference_type operator-(const _Mybase& _Right) const
; 1771 : 		{	// return difference of iterators
; 1772 : 		return (*(_Mybase *)this - _Right);
; 1773 : 		}
; 1774 : 
; 1775 : 	reference operator[](difference_type _Off) const
; 1776 : 		{	// subscript
; 1777 : 		return (*(*this + _Off));
; 1778 : 		}
; 1779 : 	};
; 1780 : 
; 1781 : template<class _Ty,
; 1782 : 	size_t _Size> inline
; 1783 : 	typename _Array_iterator<_Ty, _Size>::_Unchecked_type
; 1784 : 		_Unchecked(_Array_iterator<_Ty, _Size> _Iter)
; 1785 : 	{	// convert to unchecked
; 1786 : 	return (_Iter._Unchecked());
; 1787 : 	}
; 1788 : 
; 1789 : template<class _Ty,
; 1790 : 	size_t _Size> inline
; 1791 : 	_Array_iterator<_Ty, _Size>&
; 1792 : 		_Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
; 1793 : 			typename _Array_iterator<_Ty, _Size>
; 1794 : 				::_Unchecked_type _Right)
; 1795 : 	{	// convert to checked
; 1796 : 	return (_Iter._Rechecked(_Right));
; 1797 : 	}
; 1798 : 
; 1799 : template<class _Ty,
; 1800 : 	size_t _Size> inline
; 1801 : 	_Array_iterator<_Ty, _Size> operator+(
; 1802 : 		typename _Array_iterator<_Ty, _Size>::difference_type _Off,
; 1803 : 		_Array_iterator<_Ty, _Size> _Next)
; 1804 : 	{	// add offset to iterator
; 1805 : 	return (_Next += _Off);
; 1806 : 	}
; 1807 : 
; 1808 : 		// TEMPLATE CLASS move_iterator
; 1809 : template<class _RanIt>
; 1810 : 	class move_iterator
; 1811 : 	{	// wrap iterator to move rvalues
; 1812 : public:
; 1813 : 	typedef move_iterator<_RanIt> _Myt;
; 1814 :  	typedef typename iterator_traits<_RanIt>::iterator_category
; 1815 : 		iterator_category;
; 1816 :  	typedef typename iterator_traits<_RanIt>::value_type
; 1817 : 		value_type;
; 1818 :  	typedef typename iterator_traits<_RanIt>::difference_type
; 1819 : 		difference_type;
; 1820 : 	typedef _RanIt pointer;
; 1821 : 	typedef value_type&& reference;
; 1822 : 	typedef _RanIt iterator_type;
; 1823 : 
; 1824 : 	move_iterator()
; 1825 : 		{	// construct with default wrapped iterator
; 1826 : 		}
; 1827 : 
; 1828 : 	explicit move_iterator(iterator_type _Right)
; 1829 : 		: current(_Right)
; 1830 : 		{	// construct wrapped iterator from _Right
; 1831 : 		}
; 1832 : 
; 1833 : 	template<class _RanIt2>
; 1834 : 		move_iterator(const move_iterator<_RanIt2>& _Right)
; 1835 : 		: current(_Right.base())
; 1836 : 		{	// initialize with compatible base
; 1837 : 		}
; 1838 : 
; 1839 : 	template<class _RanIt2>
; 1840 : 		_Myt& operator=(const move_iterator<_RanIt2>& _Right)
; 1841 : 		{	// assign with compatible base
; 1842 : 		current = _Right.base();
; 1843 : 		return (*this);
; 1844 : 		}
; 1845 : 
; 1846 : 	_RanIt base() const
; 1847 : 		{	// return wrapped iterator
; 1848 : 		return (current);
; 1849 : 		}
; 1850 : 
; 1851 : 	reference operator*() const
; 1852 : 		{	// return designated value
; 1853 : 		return (_STD move(*current));
; 1854 : 		}
; 1855 : 
; 1856 : 	pointer operator->() const
; 1857 : 		{	// return pointer to class object
; 1858 : 		return (current);
; 1859 : 		}
; 1860 : 
; 1861 : 	_Myt& operator++()
; 1862 : 		{	// preincrement
; 1863 : 		++current;
; 1864 : 		return (*this);
; 1865 : 		}
; 1866 : 
; 1867 : 	_Myt operator++(int)
; 1868 : 		{	// postincrement
; 1869 : 		_Myt _Tmp = *this;
; 1870 : 		++current;
; 1871 : 		return (_Tmp);
; 1872 : 		}
; 1873 : 
; 1874 : 	_Myt& operator--()
; 1875 : 		{	// predecrement
; 1876 : 		--current;
; 1877 : 		return (*this);
; 1878 : 		}
; 1879 : 
; 1880 : 	_Myt operator--(int)
; 1881 : 		{	// postdecrement
; 1882 : 		_Myt _Tmp = *this;
; 1883 : 		--current;
; 1884 : 		return (_Tmp);
; 1885 : 		}
; 1886 : 
; 1887 : 	template<class _RanIt2>
; 1888 : 		bool _Equal(const move_iterator<_RanIt2>& _Right) const
; 1889 : 		{	// test for iterator equality
; 1890 : 		return (current == _Right.base());
; 1891 : 		}
; 1892 : 
; 1893 : // N.B. functions valid for random-access iterators only beyond this point
; 1894 : 
; 1895 : 	_Myt& operator+=(difference_type _Off)
; 1896 : 		{	// increment by integer
; 1897 : 		current += _Off;
; 1898 : 		return (*this);
; 1899 : 		}
; 1900 : 
; 1901 : 	_Myt operator+(difference_type _Off) const
; 1902 : 		{	// return this + integer
; 1903 : 		return (_Myt(current + _Off));
; 1904 : 		}
; 1905 : 
; 1906 : 	_Myt& operator-=(difference_type _Off)
; 1907 : 		{	// decrement by integer
; 1908 : 		current -= _Off;
; 1909 : 		return (*this);
; 1910 : 		}
; 1911 : 
; 1912 : 	_Myt operator-(difference_type _Off) const
; 1913 : 		{	// return this - integer
; 1914 : 		return (_Myt(current - _Off));
; 1915 : 		}
; 1916 : 
; 1917 : 	reference operator[](difference_type _Off) const
; 1918 : 		{	// subscript
; 1919 : 		return (_STD move(current[_Off]));
; 1920 : 		}
; 1921 : 
; 1922 : 	template<class _RanIt2>
; 1923 : 		bool _Less(const move_iterator<_RanIt2>& _Right) const
; 1924 : 		{	// test if this < _Right
; 1925 : 		return (current < _Right.base());
; 1926 : 		}
; 1927 : 
; 1928 : 	difference_type operator-(const _Myt& _Right) const
; 1929 : 		{	// return difference of iterators
; 1930 : 		return (current - _Right.base());
; 1931 : 		}
; 1932 : 
; 1933 : protected:
; 1934 : 	iterator_type current;	// the wrapped iterator
; 1935 : 	};
; 1936 : 
; 1937 : template<class _RanIt>
; 1938 : 	struct _Is_checked_helper<move_iterator<_RanIt> >
; 1939 : 		: public _Is_checked_helper<_RanIt>
; 1940 : 	{	// mark move_iterator as checked if its wrapped iterator is checked
; 1941 : 	};
; 1942 : 
; 1943 : 		// move_iterator TEMPLATE OPERATORS
; 1944 : template<class _RanIt,
; 1945 : 	class _Diff> inline
; 1946 : 	move_iterator<_RanIt>
; 1947 : 		operator+(_Diff _Off,
; 1948 : 		const move_iterator<_RanIt>& _Right)
; 1949 : 	{	// return move_iterator + integer
; 1950 : 	return (_Right + _Off);
; 1951 : 	}
; 1952 : 
; 1953 : template<class _RanIt1,
; 1954 : 	class _RanIt2>
; 1955 : 	auto inline operator-(
; 1956 : 		move_iterator<_RanIt1>& _Left,
; 1957 : 		const move_iterator<_RanIt2>& _Right)
; 1958 : 			-> decltype(_Left.base() - _Right.base())
; 1959 : 	{	// test for move_iterator equality
; 1960 : 	return (_Left.base() - _Right.base());
; 1961 : 	}
; 1962 : 
; 1963 : template<class _RanIt1,
; 1964 : 	class _RanIt2> inline
; 1965 : 	bool operator==(
; 1966 : 		const move_iterator<_RanIt1>& _Left,
; 1967 : 		const move_iterator<_RanIt2>& _Right)
; 1968 : 	{	// test for move_iterator equality
; 1969 : 	return (_Left._Equal(_Right));
; 1970 : 	}
; 1971 : 
; 1972 : template<class _RanIt1,
; 1973 : 	class _RanIt2> inline
; 1974 : 	bool operator!=(
; 1975 : 		const move_iterator<_RanIt1>& _Left,
; 1976 : 		const move_iterator<_RanIt2>& _Right)
; 1977 : 	{	// test for move_iterator inequality
; 1978 : 	return (!(_Left == _Right));
; 1979 : 	}
; 1980 : 
; 1981 : template<class _RanIt1,
; 1982 : 	class _RanIt2> inline
; 1983 : 	bool operator<(
; 1984 : 		const move_iterator<_RanIt1>& _Left,
; 1985 : 		const move_iterator<_RanIt2>& _Right)
; 1986 : 	{	// test for move_iterator < move_iterator
; 1987 : 	return (_Left._Less(_Right));
; 1988 : 	}
; 1989 : 
; 1990 : template<class _RanIt1,
; 1991 : 	class _RanIt2> inline
; 1992 : 	bool operator>(
; 1993 : 		const move_iterator<_RanIt1>& _Left,
; 1994 : 		const move_iterator<_RanIt2>& _Right)
; 1995 : 	{	// test for move_iterator > move_iterator
; 1996 : 	return (_Right < _Left);
; 1997 : 	}
; 1998 : 
; 1999 : template<class _RanIt1,
; 2000 : 	class _RanIt2> inline
; 2001 : 	bool operator<=(
; 2002 : 		const move_iterator<_RanIt1>& _Left,
; 2003 : 		const move_iterator<_RanIt2>& _Right)
; 2004 : 	{	// test for move_iterator <= move_iterator
; 2005 : 	return (!(_Right < _Left));
; 2006 : 	}
; 2007 : 
; 2008 : template<class _RanIt1,
; 2009 : 	class _RanIt2> inline
; 2010 : 	bool operator>=(
; 2011 : 		const move_iterator<_RanIt1>& _Left,
; 2012 : 		const move_iterator<_RanIt2>& _Right)
; 2013 : 	{	// test for move_iterator >= move_iterator
; 2014 : 	return (!(_Left < _Right));
; 2015 : 	}
; 2016 : 
; 2017 : 		// TEMPLATE FUNCTION make_move_iterator
; 2018 : template<class _RanIt> inline
; 2019 : 	move_iterator<_RanIt> make_move_iterator(_RanIt _Iter)
; 2020 : 	{	// make move_iterator from iterator
; 2021 : 	return (move_iterator<_RanIt>(_Iter));
; 2022 : 	}
; 2023 : 
; 2024 : 		//	ALGORITHM STUFF (from <algorithm>)
; 2025 : 		// TEMPLATE FUNCTION max
; 2026 : template<class _Ty> inline
; 2027 : 
; 2028 : 	_Post_equal_to_(_Left < _Right ? _Right : _Left)
; 2029 : 
; 2030 : 	const _Ty& (max)(const _Ty& _Left, const _Ty& _Right)
; 2031 : 	{	// return larger of _Left and _Right
; 2032 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);
; 2033 : 	}
; 2034 : 
; 2035 : 		// TEMPLATE FUNCTION max WITH PRED
; 2036 : template<class _Ty,
; 2037 : 	class _Pr> inline
; 2038 : 	const _Ty& (max)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
; 2039 : 	{	// return larger of _Left and _Right using _Pred
; 2040 : 	return (_DEBUG_LT_PRED(_Pred, _Left, _Right) ? _Right : _Left);
; 2041 : 	}
; 2042 : 
; 2043 : 		// TEMPLATE FUNCTION min
; 2044 : template<class _Ty> inline
; 2045 : 
; 2046 : 	_Post_equal_to_(_Right < _Left ? _Right : _Left)
; 2047 : 
; 2048 : 	const _Ty& (min)(const _Ty& _Left, const _Ty& _Right)
; 2049 : 	{	// return smaller of _Left and _Right
; 2050 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);
; 2051 : 	}
; 2052 : 
; 2053 : 		// TEMPLATE FUNCTION min WITH PRED
; 2054 : template<class _Ty,
; 2055 : 	class _Pr> inline
; 2056 : 	const _Ty& (min)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
; 2057 : 	{	// return smaller of _Left and _Right using _Pred
; 2058 : 	return (_DEBUG_LT_PRED(_Pred, _Right, _Left) ? _Right : _Left);
; 2059 : 	}
; 2060 : 
; 2061 : 		// TEMPLATE FUNCTION minmax
; 2062 : template<class _Ty> inline
; 2063 : 	pair<const _Ty&, const _Ty&>
; 2064 : 		minmax(const _Ty& _Left, const _Ty& _Right)
; 2065 : 	{	// return pair(leftmost/smaller, rightmost/larger) of _Left and _Right
; 2066 : 	return (_Right < _Left
; 2067 : 		? pair<const _Ty&, const _Ty&>(_Right, _Left)
; 2068 : 		: pair<const _Ty&, const _Ty&>(_Left, _Right));
; 2069 : 	}
; 2070 : 
; 2071 : 		// TEMPLATE FUNCTION minmax WITH PRED
; 2072 : template<class _Ty,
; 2073 : 	class _Pr> inline
; 2074 : 	pair<const _Ty&, const _Ty&>
; 2075 : 		minmax(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
; 2076 : 	{	// return pair(leftmost/smaller, rightmost/larger) of _Left and _Right
; 2077 : 	return (_Pred(_Right, _Left)
; 2078 : 		? pair<const _Ty&, const _Ty&>(_Right, _Left)
; 2079 : 		: pair<const _Ty&, const _Ty&>(_Left, _Right));
; 2080 : 	}
; 2081 : 
; 2082 : 		// TEMPLATE FUNCTION copy
; 2083 : template<class _InIt,
; 2084 : 	class _OutIt> inline
; 2085 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2086 : 		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
; 2087 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators
; 2088 : 	for (; _First != _Last; ++_Dest, ++_First)
; 2089 : 		*_Dest = *_First;
; 2090 : 	return (_Dest);
; 2091 : 	}
; 2092 : 
; 2093 : template<class _InIt,
; 2094 : 	class _OutIt> inline
; 2095 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2096 : 		_OutIt _Dest, _Scalar_ptr_iterator_tag)
; 2097 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars
; 2098 : 	ptrdiff_t _Count = _Last - _First;
; 2099 : 	_CSTD memmove(&*_Dest, &*_First,
; 2100 : 		_Count * sizeof (*_First));
; 2101 : 	return (_Dest + _Count);
; 2102 : 	}
; 2103 : 
; 2104 : template<class _InIt,
; 2105 : 	class _OutIt> inline
; 2106 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2107 : 		_OutIt _Dest)
; 2108 : 	{	// copy [_First, _Last) to [_Dest, ...)
; 2109 : 	return (_Copy_impl(_First, _Last,
; 2110 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2111 : 	}
; 2112 : 
; 2113 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2114 : template<class _InIt,
; 2115 : 	class _OutIt> inline
; 2116 : 	_OutIt copy(_InIt _First, _InIt _Last,
; 2117 : 		_OutIt _Dest)
; 2118 : 	{	// copy [_First, _Last) to [_Dest, ...)
; 2119 : 	return (_Rechecked(_Dest,
; 2120 : 		_Copy_impl(_Unchecked(_First), _Unchecked(_Last),
; 2121 : 			_Unchecked(_Dest))));
; 2122 : 	}
; 2123 : 
; 2124 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2125 : template<class _InIt,
; 2126 : 	class _OutIt> inline
; 2127 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2128 : 		_OutIt _Dest, input_iterator_tag, output_iterator_tag)
; 2129 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators
; 2130 : 	return (_Copy_impl(_First, _Last,
; 2131 : 		_Dest));
; 2132 : 	}
; 2133 : 
; 2134 : template<class _InIt,
; 2135 : 	class _OutIt> inline
; 2136 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2137 : 		_OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
; 2138 : 	{	// copy [_First, _Last) to [_Dest, ...), random-access iterators
; 2139 : 	_OutIt _Ans = _Dest + (_Last - _First);	// also checks range
; 2140 : 	_Copy_impl(_First, _Last,
; 2141 : 		_Unchecked(_Dest));
; 2142 : 	return (_Ans);
; 2143 : 	}
; 2144 : 
; 2145 : template<class _InIt,
; 2146 : 	class _OutIt> inline
; 2147 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2148 : 		_OutIt _Dest, true_type)
; 2149 : 	{	// copy [_First, _Last) to [_Dest, ...), checked dest
; 2150 : 	return (_Copy_impl(_First, _Last,
; 2151 : 		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
; 2152 : 	}
; 2153 : 
; 2154 : template<class _InIt,
; 2155 : 	class _OutIt> inline
; 2156 : _SCL_INSECURE_DEPRECATE
; 2157 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2158 : 		_OutIt _Dest, false_type)
; 2159 : 	{	// copy [_First, _Last) to [_Dest, ...), unchecked dest
; 2160 : 	return (_Copy_impl(_First, _Last,
; 2161 : 		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
; 2162 : 	}
; 2163 : 
; 2164 : template<class _InIt,
; 2165 : 	class _OutIt> inline
; 2166 : 	_OutIt copy(_InIt _First, _InIt _Last,
; 2167 : 		_OutIt _Dest)
; 2168 : 	{	// copy [_First, _Last) to [_Dest, ...)
; 2169 : 	if (_First == _Last)
; 2170 : 		return (_Dest);
; 2171 : 	else
; 2172 : 		{	// worth copying, check then copy
; 2173 : 		_DEBUG_RANGE(_First, _Last);
; 2174 : 		_DEBUG_POINTER(_Dest);
; 2175 : 		return (_Copy_impl(_Unchecked(_First), _Unchecked(_Last),
; 2176 : 			_Dest, _Is_checked(_Dest)));
; 2177 : 		}
; 2178 : 	}
; 2179 : 
; 2180 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2181 : template<class _InIt,
; 2182 : 	class _OutTy,
; 2183 : 	size_t _OutSize> inline
; 2184 : 	_OutTy *copy(_InIt _First, _InIt _Last,
; 2185 : 		_OutTy (&_Dest)[_OutSize])
; 2186 : 	{	// copy [_First, _Last) to [_Dest, ...)
; 2187 : 	return (_Unchecked(
; 2188 : 		_STD copy(_First, _Last,
; 2189 : 			_Array_iterator<_OutTy, _OutSize>(_Dest))));
; 2190 : 	}
; 2191 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2193 : 
; 2194 :  #if _HAS_CPP0X
; 2195 : 		// TEMPLATE FUNCTION copy_n
; 2196 : template<class _InIt,
; 2197 : 	class _Diff,
; 2198 : 	class _OutIt> inline
; 2199 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2200 : 		_OutIt _Dest, input_iterator_tag)
; 2201 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), input iterators
; 2202 : 	*_Dest = *_First;	// 0 < _Count has been guaranteed
; 2203 : 	while (0 < --_Count)
; 2204 : 		*++_Dest = *++_First;
; 2205 : 	return (++_Dest);
; 2206 : 	}
; 2207 : 
; 2208 : template<class _InIt,
; 2209 : 	class _Diff,
; 2210 : 	class _OutIt> inline
; 2211 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2212 : 		_OutIt _Dest, forward_iterator_tag)
; 2213 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), forward iterators
; 2214 : 	for (; 0 < _Count; --_Count, ++_Dest, ++_First)
; 2215 : 		*_Dest = *_First;
; 2216 : 	return (_Dest);
; 2217 : 	}
; 2218 : 
; 2219 : template<class _InIt,
; 2220 : 	class _Diff,
; 2221 : 	class _OutIt> inline
; 2222 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2223 : 		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
; 2224 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), arbitrary iterators
; 2225 : 	return (_Copy_n(_First, _Count,
; 2226 : 		_Dest, _Iter_cat(_First)));
; 2227 : 	}
; 2228 : template<class _InIt,
; 2229 : 	class _Diff,
; 2230 : 	class _OutIt> inline
; 2231 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2232 : 		_OutIt _Dest, _Scalar_ptr_iterator_tag)
; 2233 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), pointers to scalars
; 2234 : 	_CSTD memmove(&*_Dest, &*_First,
; 2235 : 		_Count * sizeof (*_First));
; 2236 : 	return (_Dest + _Count);
; 2237 : 	}
; 2238 : 
; 2239 : template<class _InIt,
; 2240 : 	class _Diff,
; 2241 : 	class _OutIt> inline
; 2242 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2243 : 		_OutIt _Dest)
; 2244 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), unchecked
; 2245 : 	return (_Copy_n(_First, _Count,
; 2246 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2247 : 	}
; 2248 : 
; 2249 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2250 : template<class _InIt,
; 2251 : 	class _Diff,
; 2252 : 	class _OutIt> inline
; 2253 : 	_OutIt copy_n(_InIt _First, _Diff _Count,
; 2254 : 		_OutIt _Dest)
; 2255 : 	{	// copy [_First, _First + _Count) to [_Dest, ...)
; 2256 : 	if (_Count <= 0)
; 2257 : 		return (_Dest);
; 2258 : 	else
; 2259 : 		return (_Rechecked(_Dest,
; 2260 : 			_Copy_n(_Unchecked(_First), _Count,
; 2261 : 				_Unchecked(_Dest))));
; 2262 : 	}
; 2263 : 
; 2264 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2265 : template<class _InIt,
; 2266 : 	class _Diff,
; 2267 : 	class _OutIt> inline
; 2268 : 	_OutIt _Copy_n2(_InIt _First, _Diff _Count,
; 2269 : 		_OutIt _Dest, output_iterator_tag)
; 2270 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), arbitrary dest
; 2271 : 	return (_Copy_n(_First, _Count,
; 2272 : 		_Dest));
; 2273 : 	}
; 2274 : 
; 2275 : template<class _InIt,
; 2276 : 	class _Diff,
; 2277 : 	class _OutIt> inline
; 2278 : 	_OutIt _Copy_n2(_InIt _First, _Diff _Count,
; 2279 : 		_OutIt _Dest, random_access_iterator_tag)
; 2280 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), random-access dest
; 2281 : 	_OutIt _Ans = _Dest + _Count;	// also checks range
; 2282 : 	_Copy_n(_First, _Count,
; 2283 : 		_Unchecked(_Dest));
; 2284 : 	return (_Ans);
; 2285 : 	}
; 2286 : 
; 2287 : template<class _InIt,
; 2288 : 	class _Diff,
; 2289 : 	class _OutIt> inline
; 2290 : 	_OutIt _Copy_n1(_InIt _First, _Diff _Count,
; 2291 : 		_OutIt _Dest, input_iterator_tag)
; 2292 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), arbitrary input
; 2293 : 	return (_Copy_n2(_First, _Count,
; 2294 : 		_Dest, _Iter_cat(_Dest)));
; 2295 : 	}
; 2296 : 
; 2297 : template<class _InIt,
; 2298 : 	class _Diff,
; 2299 : 	class _OutIt> inline
; 2300 : 	_OutIt _Copy_n1(_InIt _First, _Diff _Count,
; 2301 : 		_OutIt _Dest, random_access_iterator_tag)
; 2302 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), random-access input
; 2303 : 	_InIt _Last = _First + _Count;	// also checks range
; 2304 : 	_Last = _Last;	// to quiet diagnostics
; 2305 : 	return (_Copy_n2(_Unchecked(_First), _Count,
; 2306 : 		_Dest, _Iter_cat(_Dest)));
; 2307 : 	}
; 2308 : 
; 2309 : template<class _InIt,
; 2310 : 	class _Diff,
; 2311 : 	class _OutIt> inline
; 2312 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2313 : 		_OutIt _Dest, true_type)
; 2314 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), checked dest
; 2315 : 	return (_Copy_n1(_First, _Count,
; 2316 : 		_Dest, _Iter_cat(_First)));
; 2317 : 	}
; 2318 : 
; 2319 : template<class _InIt,
; 2320 : 	class _Diff,
; 2321 : 	class _OutIt> inline
; 2322 : _SCL_INSECURE_DEPRECATE
; 2323 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2324 : 		_OutIt _Dest, false_type)
; 2325 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), unchecked dest
; 2326 : 	return (_Copy_n1(_First, _Count,
; 2327 : 		_Dest, _Iter_cat(_First)));
; 2328 : 	}
; 2329 : 
; 2330 : template<class _InIt,
; 2331 : 	class _Diff,
; 2332 : 	class _OutIt> inline
; 2333 : 	_OutIt copy_n(_InIt _First, _Diff _Count,
; 2334 : 		_OutIt _Dest)
; 2335 : 	{	// copy [_First, _First + _Count) to [_Dest, ...)
; 2336 : 	_DEBUG_POINTER(_First);
; 2337 : 	_DEBUG_POINTER(_Dest);
; 2338 : 	if (_Count <= 0)
; 2339 : 		return (_Dest);
; 2340 : 	else
; 2341 : 		return (_Copy_n(_First, _Count,
; 2342 : 			_Dest, _Is_checked(_Dest)));
; 2343 : 	}
; 2344 : 
; 2345 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2346 : template<class _InTy,
; 2347 : 	size_t _InSize,
; 2348 : 	class _Diff,
; 2349 : 	class _OutIt> inline
; 2350 : 	_OutIt copy_n(_InTy (&_First)[_InSize], _Diff _Count,
; 2351 : 		_OutIt _Dest)
; 2352 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), array input
; 2353 : 	return (_STD copy_n(_Array_iterator<_InTy, _InSize>(_First), _Count,
; 2354 : 		_Dest));
; 2355 : 	}
; 2356 : 
; 2357 : template<class _InIt,
; 2358 : 	class _Diff,
; 2359 : 	class _OutTy,
; 2360 : 	size_t _OutSize> inline
; 2361 : 	_OutTy *copy_n(_InIt _First, _Diff _Count,
; 2362 : 		_OutTy (&_Dest)[_OutSize])
; 2363 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), array dest
; 2364 : 	return (_Unchecked(
; 2365 : 		_STD copy_n(_First, _Count,
; 2366 : 			_Array_iterator<_OutTy, _OutSize>(_Dest))));
; 2367 : 	}
; 2368 : 
; 2369 : template<class _InTy,
; 2370 : 	size_t _InSize,
; 2371 : 	class _Diff,
; 2372 : 	class _OutTy,
; 2373 : 	size_t _OutSize> inline
; 2374 : 	_OutTy *copy_n(_InTy (&_First)[_InSize], _Diff _Count,
; 2375 : 		_OutTy (&_Dest)[_OutSize])
; 2376 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), array input/dest
; 2377 : 	return (_Unchecked(
; 2378 : 		_STD copy_n(_Array_iterator<_InTy, _InSize>(_First), _Count,
; 2379 : 			_Array_iterator<_OutTy, _OutSize>(_Dest))));
; 2380 : 	}
; 2381 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2382 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2383 :  #endif /* _HAS_CPP0X */
; 2384 : 
; 2385 : 		// TEMPLATE FUNCTION copy_backward
; 2386 : template<class _BidIt1,
; 2387 : 	class _BidIt2> inline
; 2388 : 	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2389 : 		_BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
; 2390 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators
; 2391 : 	while (_First != _Last)
; 2392 : 		*--_Dest = *--_Last;
; 2393 : 	return (_Dest);
; 2394 : 	}
; 2395 : 
; 2396 : template<class _InIt,
; 2397 : 	class _OutIt> inline
; 2398 : 	_OutIt _Copy_backward(_InIt _First, _InIt _Last,
; 2399 : 		_OutIt _Dest, _Scalar_ptr_iterator_tag)
; 2400 : 	{	// copy [_First, _Last) backwards to [..., _Dest), pointers to scalars
; 2401 : 	ptrdiff_t _Count = _Last - _First;
; 2402 : 	_CSTD memmove(&*_Dest - _Count, &*_First,
; 2403 : 		_Count * sizeof (*_First));
; 2404 : 	return (_Dest - _Count);
; 2405 : 	}
; 2406 : 
; 2407 : template<class _BidIt1,
; 2408 : 	class _BidIt2> inline
; 2409 : 	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2410 : 		_BidIt2 _Dest)
; 2411 : 	{	// copy [_First, _Last) backwards to [..., _Dest), unchecked
; 2412 : 	return (_Copy_backward(_First, _Last,
; 2413 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2414 : 	}
; 2415 : 
; 2416 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2417 : template<class _BidIt1,
; 2418 : 	class _BidIt2> inline
; 2419 : 	_BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2420 : 		_BidIt2 _Dest)
; 2421 : 	{	// copy [_First, _Last) backwards to [..., _Dest)
; 2422 : 	return (_Rechecked(_Dest,
; 2423 : 		_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
; 2424 : 			_Unchecked(_Dest))));
; 2425 : 	}
; 2426 : 
; 2427 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2428 : template<class _BidIt1,
; 2429 : 	class _BidIt2> inline
; 2430 : 	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2431 : 		_BidIt2 _Dest, true_type)
; 2432 : 	{	// copy [_First, _Last) backwards to [..., _Dest), checked dest
; 2433 : 	return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
; 2434 : 		_Dest));
; 2435 : 	}
; 2436 : 
; 2437 : template<class _BidIt1,
; 2438 : 	class _BidIt2> inline
; 2439 : _SCL_INSECURE_DEPRECATE
; 2440 : 	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2441 : 		_BidIt2 _Dest, false_type)
; 2442 : 	{	// copy [_First, _Last) backwards to [..., _Dest), unchecked dest
; 2443 : 	return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
; 2444 : 		_Dest));
; 2445 : 	}
; 2446 : 
; 2447 : template<class _BidIt1,
; 2448 : 	class _BidIt2> inline
; 2449 : 	_BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2450 : 		_BidIt2 _Dest)
; 2451 : 	{	// copy [_First, _Last) backwards to [..., _Dest)
; 2452 : 	_DEBUG_RANGE(_First, _Last);
; 2453 : 	_DEBUG_POINTER(_Dest);
; 2454 : 	return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
; 2455 : 		_Dest, _Is_checked(_Dest)));
; 2456 : 	}
; 2457 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2458 : 
; 2459 : 		// TEMPLATE FUNCTION move
; 2460 : template<class _InIt,
; 2461 : 	class _OutIt> inline
; 2462 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2463 : 		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
; 2464 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators
; 2465 : 	for (; _First != _Last; ++_Dest, ++_First)
; 2466 : 		*_Dest = _STD move(*_First);
; 2467 : 	return (_Dest);
; 2468 : 	}
; 2469 : 
; 2470 : template<class _InIt,
; 2471 : 	class _OutIt> inline
; 2472 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2473 : 		_OutIt _Dest, _Scalar_ptr_iterator_tag)
; 2474 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars
; 2475 : 	ptrdiff_t _Count = _Last - _First;
; 2476 : 	_CSTD memmove(&*_Dest, &*_First,
; 2477 : 		_Count * sizeof (*_First));
; 2478 : 	return (_Dest + _Count);
; 2479 : 	}
; 2480 : 
; 2481 : template<class _InIt,
; 2482 : 	class _OutIt> inline
; 2483 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2484 : 		_OutIt _Dest)
; 2485 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked
; 2486 : 	return (_Move(_First, _Last,
; 2487 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2488 : 	}
; 2489 : 
; 2490 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2491 : template<class _InIt,
; 2492 : 	class _OutIt> inline
; 2493 : 	_OutIt move(_InIt _First, _InIt _Last,
; 2494 : 		_OutIt _Dest)
; 2495 : 	{	// move [_First, _Last) to [_Dest, ...)
; 2496 : 	return (_Rechecked(_Dest,
; 2497 : 		_Move(_Unchecked(_First), _Unchecked(_Last),
; 2498 : 			_Unchecked(_Dest))));
; 2499 : 	}
; 2500 : 
; 2501 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2502 : template<class _InIt,
; 2503 : 	class _OutIt> inline
; 2504 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2505 : 		_OutIt _Dest, input_iterator_tag, output_iterator_tag)
; 2506 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators
; 2507 : 	return (_Move(_First, _Last,
; 2508 : 		_Dest));
; 2509 : 	}
; 2510 : 
; 2511 : template<class _InIt,
; 2512 : 	class _OutIt> inline
; 2513 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2514 : 		_OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
; 2515 : 	{	// move [_First, _Last) to [_Dest, ...), random-access iterators
; 2516 : 	_OutIt _Ans = _Dest + (_Last - _First);	// also checks range
; 2517 : 	_Move(_First, _Last,
; 2518 : 		_Unchecked(_Dest));
; 2519 : 	return (_Ans);
; 2520 : 	}
; 2521 : 
; 2522 : template<class _InIt,
; 2523 : 	class _OutIt> inline
; 2524 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2525 : 		_OutIt _Dest, true_type)
; 2526 : 	{	// move [_First, _Last) to [_Dest, ...), checked dest
; 2527 : 	return (_Move(_First, _Last,
; 2528 : 		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
; 2529 : 	}
; 2530 : 
; 2531 : template<class _InIt,
; 2532 : 	class _OutIt> inline
; 2533 : _SCL_INSECURE_DEPRECATE
; 2534 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2535 : 		_OutIt _Dest, false_type)
; 2536 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked dest
; 2537 : 	return (_Move(_First, _Last,
; 2538 : 		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
; 2539 : 	}
; 2540 : 
; 2541 : template<class _InIt,
; 2542 : 	class _OutIt> inline
; 2543 : 	_OutIt move(_InIt _First, _InIt _Last,
; 2544 : 		_OutIt _Dest)
; 2545 : 	{	// move [_First, _Last) to [_Dest, ...)
; 2546 : 	_DEBUG_RANGE(_First, _Last);
; 2547 : 	_DEBUG_POINTER(_Dest);
; 2548 : 	return (_Move(_Unchecked(_First), _Unchecked(_Last),
; 2549 : 		_Dest, _Is_checked(_Dest)));
; 2550 : 	}
; 2551 : 
; 2552 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2553 : template<class _InIt,
; 2554 : 	class _OutTy,
; 2555 : 	size_t _OutSize> inline
; 2556 : 	_OutTy *move(_InIt _First, _InIt _Last,
; 2557 : 		_OutTy (&_Dest)[_OutSize])
; 2558 : 	{	// move [_First, _Last) to [_Dest, ...)
; 2559 : 	return (_Unchecked(
; 2560 : 		_STD move(_First, _Last,
; 2561 : 			_Array_iterator<_OutTy, _OutSize>(_Dest))));
; 2562 : 	}
; 2563 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2564 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2565 : 
; 2566 : 		// TEMPLATE FUNCTION move_backward
; 2567 : template<class _BidIt1,
; 2568 : 	class _BidIt2> inline
; 2569 : 	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2570 : 		_BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
; 2571 : 	{	// move [_First, _Last) backwards to [..., _Dest), arbitrary iterators
; 2572 : 	while (_First != _Last)
; 2573 : 		*--_Dest = _STD move(*--_Last);
; 2574 : 	return (_Dest);
; 2575 : 	}
; 2576 : 
; 2577 : template<class _InIt,
; 2578 : 	class _OutIt> inline
; 2579 : 	_OutIt _Move_backward(_InIt _First, _InIt _Last,
; 2580 : 		_OutIt _Dest, _Scalar_ptr_iterator_tag)
; 2581 : 	{	// move [_First, _Last) backwards to [..., _Dest), pointers to scalars
; 2582 : 	ptrdiff_t _Count = _Last - _First;
; 2583 : 	_CSTD memmove(&*_Dest - _Count, &*_First,
; 2584 : 		_Count * sizeof (*_First));
; 2585 : 	return (_Dest - _Count);
; 2586 : 	}
; 2587 : 
; 2588 : template<class _BidIt1,
; 2589 : 	class _BidIt2> inline
; 2590 : 	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2591 : 		_BidIt2 _Dest)
; 2592 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked
; 2593 : 	return (_Move_backward(_First, _Last,
; 2594 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2595 : 	}
; 2596 : 
; 2597 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2598 : template<class _BidIt1,
; 2599 : 	class _BidIt2> inline
; 2600 : 	_BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2601 : 		_BidIt2 _Dest)
; 2602 : 	{	// move [_First, _Last) backwards to [..., _Dest)
; 2603 : 	return (_Rechecked(_Dest,
; 2604 : 		_Move_backward(_Unchecked(_First), _Unchecked(_Last),
; 2605 : 			_Unchecked(_Dest))));
; 2606 : 	}
; 2607 : 
; 2608 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2609 : template<class _BidIt1,
; 2610 : 	class _BidIt2> inline
; 2611 : 	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2612 : 		_BidIt2 _Dest, true_type)
; 2613 : 	{	// move [_First, _Last) backwards to [..., _Dest), checked dest
; 2614 : 	return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
; 2615 : 		_Dest));
; 2616 : 	}
; 2617 : 
; 2618 : template<class _BidIt1,
; 2619 : 	class _BidIt2> inline
; 2620 : _SCL_INSECURE_DEPRECATE
; 2621 : 	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2622 : 		_BidIt2 _Dest, false_type)
; 2623 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked dest
; 2624 : 	return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
; 2625 : 		_Dest));
; 2626 : 	}
; 2627 : 
; 2628 : template<class _BidIt1,
; 2629 : 	class _BidIt2> inline
; 2630 : 	_BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2631 : 		_BidIt2 _Dest)
; 2632 : 	{	// move [_First, _Last) backwards to [..., _Dest)
; 2633 : 	_DEBUG_RANGE(_First, _Last);
; 2634 : 	_DEBUG_POINTER(_Dest);
; 2635 : 	return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
; 2636 : 		_Dest, _Is_checked(_Dest)));
; 2637 : 	}
; 2638 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2639 : 
; 2640 : 		// TEMPLATE FUNCTION fill
; 2641 : template<class _FwdIt,
; 2642 : 	class _Ty> inline
; 2643 : 	void _Fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
; 2644 : 	{	// copy _Val through [_First, _Last)
; 2645 : 	for (; _First != _Last; ++_First)
; 2646 : 		*_First = _Val;
; 2647 : 	}
; 2648 : 
; 2649 : inline void _Fill(char *_First, char *_Last, char _Val)
; 2650 : 	{	// copy char _Val through [_First, _Last)
; 2651 : 	_CSTD memset(_First, _Val, _Last - _First);
; 2652 : 	}
; 2653 : 
; 2654 : inline void _Fill(signed char *_First, signed char *_Last, signed char _Val)
; 2655 : 	{	// copy signed char _Val through [_First, _Last)
; 2656 : 	_CSTD memset(_First, _Val, _Last - _First);
; 2657 : 	}
; 2658 : 
; 2659 : inline void _Fill(unsigned char *_First, unsigned char *_Last, unsigned char _Val)
; 2660 : 	{	// copy unsigned char _Val through [_First, _Last)
; 2661 : 	_CSTD memset(_First, _Val, _Last - _First);
; 2662 : 	}
; 2663 : 
; 2664 : template<class _FwdIt,
; 2665 : 	class _Ty> inline
; 2666 : 	void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
; 2667 : 	{	// copy _Val through [_First, _Last)
; 2668 : 	_DEBUG_RANGE(_First, _Last);
; 2669 : 	_Fill(_Unchecked(_First), _Unchecked(_Last), _Val);
; 2670 : 	}
; 2671 : 
; 2672 : 		// TEMPLATE FUNCTION fill_n
; 2673 : template<class _OutIt,
; 2674 : 	class _Diff,
; 2675 : 	class _Ty> inline
; 2676 : 	_OutIt _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
; 2677 : 	{	// copy _Val _Count times through [_Dest, ...)
; 2678 : 	for (; 0 < _Count; --_Count, ++_Dest)
; 2679 : 		*_Dest = _Val;
; 2680 : 	return (_Dest);
; 2681 : 	}
; 2682 : 
; 2683 : inline char *_Fill_n(char *_Dest, size_t _Count, char _Val)
; 2684 : 	{	// copy char _Val _Count times through [_Dest, ...)
; 2685 : 	_CSTD memset(_Dest, _Val, _Count);
; 2686 : 	return (_Dest + _Count);
; 2687 : 	}
; 2688 : 
; 2689 : inline signed char *_Fill_n(signed char *_Dest, size_t _Count,
; 2690 : 	signed char _Val)
; 2691 : 	{	// copy signed char _Val _Count times through [_Dest, ...)
; 2692 : 	_CSTD memset(_Dest, _Val, _Count);
; 2693 : 	return (_Dest + _Count);
; 2694 : 	}
; 2695 : 
; 2696 : inline unsigned char *_Fill_n(unsigned char *_Dest, size_t _Count,
; 2697 : 	unsigned char _Val)
; 2698 : 	{	// copy unsigned char _Val _Count times through [_Dest, ...)
; 2699 : 	_CSTD memset(_Dest, _Val, _Count);
; 2700 : 	return (_Dest + _Count);
; 2701 : 	}
; 2702 : 
; 2703 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2704 : template<class _OutIt,
; 2705 : 	class _Diff,
; 2706 : 	class _Ty> inline
; 2707 : 	_OutIt fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
; 2708 : 	{	// copy _Val _Count times through [_Dest, ...)
; 2709 : 	return (_Rechecked(_Dest, _Fill_n(_Unchecked(_Dest), _Count, _Val)));
; 2710 : 	}
; 2711 : 
; 2712 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2713 : template<class _OutIt,
; 2714 : 	class _Diff,
; 2715 : 	class _Ty> inline
; 2716 : 	_OutIt _Fill_n1(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
; 2717 : 		output_iterator_tag)
; 2718 : 	{	// copy _Val _Count times through [_Dest, ...), arbitrary iterator
; 2719 : 	return (_Fill_n(_Dest, _Count, _Val));
; 2720 : 	}
; 2721 : 
; 2722 : template<class _OutIt,
; 2723 : 	class _Diff,
; 2724 : 	class _Ty> inline
; 2725 : 	_OutIt _Fill_n1(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
; 2726 : 		random_access_iterator_tag)
; 2727 : 	{	// copy _Val _Count times through [_Dest, ...), random-access iterator
; 2728 : 	_OutIt _Ans = _Dest + _Count;	// also checks range
; 2729 : 	_Fill_n(_Unchecked(_Dest), _Count, _Val);
; 2730 : 	return (_Ans);
; 2731 : 	}
; 2732 : 
; 2733 : template<class _OutIt,
; 2734 : 	class _Diff,
; 2735 : 	class _Ty> inline
; 2736 : 	_OutIt _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
; 2737 : 		true_type)
; 2738 : 	{	// copy _Val _Count times through [_Dest, ...), checked dest
; 2739 : 	return (_Fill_n1(_Dest, _Count, _Val,
; 2740 : 		_Iter_cat(_Dest)));
; 2741 : 	}
; 2742 : 
; 2743 : template<class _OutIt,
; 2744 : 	class _Diff,
; 2745 : 	class _Ty> inline
; 2746 : _SCL_INSECURE_DEPRECATE
; 2747 : 	_OutIt _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
; 2748 : 		false_type)
; 2749 : 	{	// copy _Val _Count times through [_Dest, ...), unchecked dest
; 2750 : 	return (_Fill_n1(_Dest, _Count, _Val,
; 2751 : 		_Iter_cat(_Dest)));
; 2752 : 	}
; 2753 : 
; 2754 : template<class _OutIt,
; 2755 : 	class _Diff,
; 2756 : 	class _Ty> inline
; 2757 : 	_OutIt fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
; 2758 : 	{	// copy _Val _Count times through [_Dest, ...)
; 2759 : 	_DEBUG_POINTER(_Dest);
; 2760 : 	return (_Fill_n(_Dest, _Count, _Val,
; 2761 : 		_Is_checked(_Dest)));
; 2762 : 	}
; 2763 : 
; 2764 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2765 : template<class _OutTy,
; 2766 : 	size_t _OutSize,
; 2767 : 	class _Diff,
; 2768 : 	class _Ty> inline
; 2769 : 	_OutTy *fill_n(_OutTy (&_Dest)[_OutSize], _Diff _Count, const _Ty& _Val)
; 2770 : 	{	// copy _Val _Count times through [_Dest, ...)
; 2771 : 	return (_Unchecked(_STD fill_n(_Array_iterator<_OutTy, _OutSize>(_Dest),
; 2772 : 		_Count, _Val)));
; 2773 : 	}
; 2774 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2775 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2776 : 
; 2777 : 		// TEMPLATE FUNCTION mismatch
; 2778 : template<class _InIt1,
; 2779 : 	class _InIt2> inline
; 2780 : 	pair<_InIt1, _InIt2>
; 2781 : 		_Mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2782 : 			_InIt2 _First2)
; 2783 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch
; 2784 : 	for (; _First1 != _Last1 && *_First1 == *_First2; )
; 2785 : 		++_First1, ++_First2;
; 2786 : 	return (pair<_InIt1, _InIt2>(_First1, _First2));
; 2787 : 	}
; 2788 : 
; 2789 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2790 : template<class _InIt1,
; 2791 : 	class _InIt2> inline
; 2792 : 	pair<_InIt1, _InIt2>
; 2793 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2794 : 			_InIt2 _First2)
; 2795 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch
; 2796 : 	pair<_UNCHECKED_TYPE(_InIt1), _InIt2> _Ans(
; 2797 : 		_Mismatch(_Unchecked(_First1), _Unchecked(_Last1),
; 2798 : 			_First2));
; 2799 : 	return (pair<_InIt1, _InIt2>(
; 2800 : 		_Rechecked(_First1, _Ans.first),
; 2801 : 		_Ans.second));
; 2802 : 	}
; 2803 : 
; 2804 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2805 : template<class _InIt1,
; 2806 : 	class _InIt2> inline
; 2807 : 	pair<_InIt1, _InIt2>
; 2808 : 		_Mismatch1(_InIt1 _First1, _InIt1 _Last1,
; 2809 : 			_InIt2 _First2, true_type)
; 2810 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch, checked input
; 2811 : 	return (_Mismatch(_First1, _Last1,
; 2812 : 		_First2));
; 2813 : 	}
; 2814 : 
; 2815 : template<class _InIt1,
; 2816 : 	class _InIt2> inline
; 2817 : _SCL_INSECURE_DEPRECATE
; 2818 : 	pair<_InIt1, _InIt2>
; 2819 : 		_Mismatch1(_InIt1 _First1, _InIt1 _Last1,
; 2820 : 			_InIt2 _First2, false_type)
; 2821 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch, unchecked input
; 2822 : 	return (_Mismatch(_First1, _Last1,
; 2823 : 		_First2));
; 2824 : 	}
; 2825 : 
; 2826 : template<class _InIt1,
; 2827 : 	class _InIt2> inline
; 2828 : 	pair<_InIt1, _InIt2>
; 2829 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2830 : 			_InIt2 _First2)
; 2831 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch
; 2832 : 	_DEBUG_RANGE(_First1, _Last1);
; 2833 : 	_DEBUG_POINTER(_First2);
; 2834 : 	pair<_UNCHECKED_TYPE(_InIt1), _InIt2> _Ans(
; 2835 : 		_Mismatch1(_Unchecked(_First1), _Unchecked(_Last1),
; 2836 : 			_First2, _Is_checked(_First2)));
; 2837 : 	return (pair<_InIt1, _InIt2>(
; 2838 : 		_Rechecked(_First1, _Ans.first),
; 2839 : 		_Ans.second));
; 2840 : 	}
; 2841 : 
; 2842 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2843 : template<class _InIt1,
; 2844 : 	class _InTy,
; 2845 : 	size_t _InSize> inline
; 2846 : 	pair<_InIt1, _InTy *>
; 2847 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2848 : 			_InTy (&_First2)[_InSize])
; 2849 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch, array input
; 2850 : 	pair<_InIt1, _Array_iterator<_InTy, _InSize> > _Ans(
; 2851 : 		_STD mismatch(_First1, _Last1,
; 2852 : 			_Array_iterator<_InTy, _InSize>(_First2)));
; 2853 : 	return (pair<_InIt1, _InTy *>(
; 2854 : 		_Ans.first,
; 2855 : 		_Unchecked(_Ans.second)));
; 2856 : 	}
; 2857 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2858 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2859 : 
; 2860 : 		// TEMPLATE FUNCTION mismatch WITH PRED
; 2861 : template<class _InIt1,
; 2862 : 	class _InIt2,
; 2863 : 	class _Pr> inline
; 2864 : 	pair<_InIt1, _InIt2>
; 2865 : 		_Mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2866 : 			_InIt2 _First2, _Pr _Pred)
; 2867 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch using _Pred
; 2868 : 	for (; _First1 != _Last1 && _Pred(*_First1, *_First2); )
; 2869 : 		++_First1, ++_First2;
; 2870 : 	return (pair<_InIt1, _InIt2>(_First1, _First2));
; 2871 : 	}
; 2872 : 
; 2873 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2874 : template<class _InIt1,
; 2875 : 	class _InIt2,
; 2876 : 	class _Pr> inline
; 2877 : 	pair<_InIt1, _InIt2>
; 2878 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2879 : 			_InIt2 _First2, _Pr _Pred)
; 2880 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch using _Pred
; 2881 : 	pair<_UNCHECKED_TYPE(_InIt1), _InIt2> _Ans(
; 2882 : 		_Mismatch(_Unchecked(_First1), _Unchecked(_Last1),
; 2883 : 			_First2, _Pred));
; 2884 : 	return (pair<_InIt1, _InIt2>(
; 2885 : 		_Rechecked(_First1, _Ans.first),
; 2886 : 		_Ans.second));
; 2887 : 	}
; 2888 : 
; 2889 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2890 : template<class _InIt1,
; 2891 : 	class _InIt2,
; 2892 : 	class _Pr> inline
; 2893 : 	pair<_InIt1, _InIt2>
; 2894 : 		_Mismatch2(_InIt1 _First1, _InIt1 _Last1,
; 2895 : 			_InIt2 _First2, _Pr _Pred, true_type)
; 2896 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch, checked input
; 2897 : 	return (_Mismatch(_First1, _Last1,
; 2898 : 		_First2, _Pred));
; 2899 : 	}
; 2900 : 
; 2901 : template<class _InIt1,
; 2902 : 	class _InIt2,
; 2903 : 	class _Pr> inline
; 2904 : _SCL_INSECURE_DEPRECATE
; 2905 : 	pair<_InIt1, _InIt2>
; 2906 : 		_Mismatch2(_InIt1 _First1, _InIt1 _Last1,
; 2907 : 			_InIt2 _First2, _Pr _Pred, false_type)
; 2908 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch, unchecked input
; 2909 : 	return (_Mismatch(_First1, _Last1,
; 2910 : 		_First2, _Pred));
; 2911 : 	}
; 2912 : 
; 2913 : template<class _InIt1,
; 2914 : 	class _InIt2,
; 2915 : 	class _Pr> inline
; 2916 : 	pair<_InIt1, _InIt2>
; 2917 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2918 : 			_InIt2 _First2, _Pr _Pred)
; 2919 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch using _Pred
; 2920 : 	_DEBUG_RANGE(_First1, _Last1);
; 2921 : 	_DEBUG_POINTER(_First2);
; 2922 : 	_DEBUG_POINTER(_Pred);
; 2923 : 	pair<_UNCHECKED_TYPE(_InIt1), _InIt2> _Ans(
; 2924 : 		_Mismatch2(_Unchecked(_First1), _Unchecked(_Last1),
; 2925 : 			_First2, _Pred, _Is_checked(_First2)));
; 2926 : 	return (pair<_InIt1, _InIt2>(
; 2927 : 		_Rechecked(_First1, _Ans.first),
; 2928 : 		_Ans.second));
; 2929 : 	}
; 2930 : 
; 2931 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2932 : template<class _InIt1,
; 2933 : 	class _InTy,
; 2934 : 	size_t _InSize,
; 2935 : 	class _Pr> inline
; 2936 : 	pair<_InIt1, _InTy *>
; 2937 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2938 : 			_InTy (&_First2)[_InSize], _Pr _Pred)
; 2939 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch using _Pred
; 2940 : 	pair<_InIt1, _Array_iterator<_InTy, _InSize> > _Ans(
; 2941 : 		_STD mismatch(_First1, _Last1,
; 2942 : 			_Array_iterator<_InTy, _InSize>(_First2), _Pred));
; 2943 : 	return (pair<_InIt1, _InTy *>(
; 2944 : 		_Ans.first,
; 2945 : 		_Unchecked(_Ans.second)));
; 2946 : 	}
; 2947 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2948 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2949 : 
; 2950 : 		// TEMPLATE FUNCTION equal
; 2951 : template<class _InIt1,
; 2952 : 	class _InIt2> inline
; 2953 : 	bool _Equal(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2)
; 2954 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 2955 : 	for (; _First1 != _Last1; ++_First1, ++_First2)
; 2956 : 		if (!(*_First1 == *_First2))
; 2957 : 			return (false);
; 2958 : 	return (true);
; 2959 : 	}
; 2960 : 
; 2961 : inline bool _Equal(const char *_First1, const char *_Last1,
; 2962 : 	const char *_First2)
; 2963 : 	{	// compare [_First1, _Last1) to [First2, ...), for chars
; 2964 : 	return (_CSTD memcmp(_First1, _First2, _Last1 - _First1) == 0);
; 2965 : 	}
; 2966 : 
; 2967 : inline bool _Equal(const signed char *_First1, const signed char *_Last1,
; 2968 : 	const signed char *_First2)
; 2969 : 	{	// compare [_First1, _Last1) to [First2, ...), for signed chars
; 2970 : 	return (_CSTD memcmp(_First1, _First2, _Last1 - _First1) == 0);
; 2971 : 	}
; 2972 : 
; 2973 : inline bool _Equal(const unsigned char *_First1, const unsigned char *_Last1,
; 2974 : 	const unsigned char *_First2)
; 2975 : 	{	// compare [_First1, _Last1) to [First2, ...), for unsigned chars
; 2976 : 	return (_CSTD memcmp(_First1, _First2, _Last1 - _First1) == 0);
; 2977 : 	}
; 2978 : 
; 2979 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2980 : template<class _InIt1,
; 2981 : 	class _InIt2> inline
; 2982 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 2983 : 		_InIt2 _First2)
; 2984 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 2985 : 	return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
; 2986 : 		_Unchecked(_First2)));
; 2987 : 	}
; 2988 : 
; 2989 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2990 : template<class _InIt1,
; 2991 : 	class _InIt2> inline
; 2992 : 	bool _Equal1(_InIt1 _First1, _InIt1 _Last1,
; 2993 : 		_InIt2 _First2, true_type)
; 2994 : 	{	// compare [_First1, _Last1) to [First2, ...), checked dest
; 2995 : 	return (_Equal(_First1, _Last1,
; 2996 : 		_First2));
; 2997 : 	}
; 2998 : 
; 2999 : template<class _InIt1,
; 3000 : 	class _InIt2> inline
; 3001 : _SCL_INSECURE_DEPRECATE
; 3002 : 	bool _Equal1(_InIt1 _First1, _InIt1 _Last1,
; 3003 : 		_InIt2 _First2, false_type)
; 3004 : 	{	// compare [_First1, _Last1) to [First2, ...), unchecked dest
; 3005 : 	return (_Equal(_First1, _Last1,
; 3006 : 		_First2));
; 3007 : 	}
; 3008 : 
; 3009 : template<class _InIt1,
; 3010 : 	class _InIt2> inline
; 3011 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 3012 : 		_InIt2 _First2)
; 3013 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 3014 : 	_DEBUG_RANGE(_First1, _Last1);
; 3015 : 	_DEBUG_POINTER(_First2);
; 3016 : 	return (_Equal1(_Unchecked(_First1), _Unchecked(_Last1),
; 3017 : 		_First2, _Is_checked(_First2)));
; 3018 : 	}
; 3019 : 
; 3020 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 3021 : template<class _InIt1,
; 3022 : 	class _InTy,
; 3023 : 	size_t _InSize> inline
; 3024 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 3025 : 		_InTy (&_First2)[_InSize])
; 3026 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 3027 : 	return (_STD equal(_First1, _Last1,
; 3028 : 		_Array_iterator<_InTy, _InSize>(_First2)));
; 3029 : 	}
; 3030 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 3031 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 3032 : 
; 3033 : 		// TEMPLATE FUNCTION equal WITH PRED
; 3034 : template<class _InIt1,
; 3035 : 	class _InIt2,
; 3036 : 	class _Pr> inline
; 3037 : 	bool _Equal(_InIt1 _First1, _InIt1 _Last1,
; 3038 : 		_InIt2 _First2, _Pr _Pred)
; 3039 : 	{	// compare [_First1, _Last1) to [First2, ...) using _Pred
; 3040 : 	for (; _First1 != _Last1; ++_First1, ++_First2)
; 3041 : 		if (!_Pred(*_First1, *_First2))
; 3042 : 			return (false);
; 3043 : 	return (true);
; 3044 : 	}
; 3045 : 
; 3046 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 3047 : template<class _InIt1,
; 3048 : 	class _InIt2,
; 3049 : 	class _Pr> inline
; 3050 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 3051 : 		_InIt2 _First2, _Pr _Pred)
; 3052 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 3053 : 	return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
; 3054 : 		_Unchecked(_First2), _Pred));
; 3055 : 	}
; 3056 : 
; 3057 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 3058 : template<class _InIt1,
; 3059 : 	class _InIt2,
; 3060 : 	class _Pr> inline
; 3061 : 	bool _Equal2(_InIt1 _First1, _InIt1 _Last1,
; 3062 : 		_InIt2 _First2, _Pr _Pred, true_type)
; 3063 : 	{	// compare [_First1, _Last1) to [First2, ...), checked input
; 3064 : 	return (_Equal(_First1, _Last1,
; 3065 : 		_First2, _Pred));
; 3066 : 	}
; 3067 : 
; 3068 : template<class _InIt1,
; 3069 : 	class _InIt2,
; 3070 : 	class _Pr> inline
; 3071 : _SCL_INSECURE_DEPRECATE
; 3072 : 	bool _Equal2(_InIt1 _First1, _InIt1 _Last1,
; 3073 : 		_InIt2 _First2, _Pr _Pred, false_type)
; 3074 : 	{	// compare [_First1, _Last1) to [First2, ...), unchecked input
; 3075 : 	return (_Equal(_First1, _Last1,
; 3076 : 		_First2, _Pred));
; 3077 : 	}
; 3078 : 
; 3079 : template<class _InIt1,
; 3080 : 	class _InIt2,
; 3081 : 	class _Pr> inline
; 3082 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 3083 : 		_InIt2 _First2, _Pr _Pred)
; 3084 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 3085 : 	_DEBUG_RANGE(_First1, _Last1);
; 3086 : 	_DEBUG_POINTER(_First2);
; 3087 : 	return (_Equal2(_Unchecked(_First1), _Unchecked(_Last1),
; 3088 : 		_First2, _Pred, _Is_checked(_First2)));
; 3089 : 	}
; 3090 : 
; 3091 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 3092 : template<class _InIt1,
; 3093 : 	class _InTy,
; 3094 : 	size_t _InSize,
; 3095 : 	class _Pr> inline
; 3096 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 3097 : 		_InTy (&_First2)[_InSize], _Pr _Pred)
; 3098 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 3099 : 	return (_STD equal(_First1, _Last1,
; 3100 : 		_Array_iterator<_InTy, _InSize>(_First2), _Pred));
; 3101 : 	}
; 3102 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 3103 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 3104 : 
; 3105 : 		// TEMPLATE FUNCTION lexicographical_compare
; 3106 : template<class _InIt1,
; 3107 : 	class _InIt2> inline
; 3108 : 	bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
; 3109 : 		_InIt2 _First2, _InIt2 _Last2)
; 3110 : 	{	// order [_First1, _Last1) vs. [First2, Last2)
; 3111 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
; 3112 : 		if (_DEBUG_LT(*_First1, *_First2))
; 3113 : 			return (true);
; 3114 : 		else if (*_First2 < *_First1)
; 3115 : 			return (false);
; 3116 : 	return (_First1 == _Last1 && _First2 != _Last2);
; 3117 : 	}
; 3118 : 
; 3119 : inline bool _Lexicographical_compare(
; 3120 : 	const unsigned char *_First1, const unsigned char *_Last1,
; 3121 : 	const unsigned char *_First2, const unsigned char *_Last2)
; 3122 : 	{	// order [_First1, _Last1) vs. [First2, Last2), for unsigned char
; 3123 : 	ptrdiff_t _Num1 = _Last1 - _First1;
; 3124 : 	ptrdiff_t _Num2 = _Last2 - _First2;
; 3125 : 	int _Ans = _CSTD memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
; 3126 : 	return (_Ans < 0 || _Ans == 0 && _Num1 < _Num2);
; 3127 : 	}
; 3128 : 
; 3129 :  #if CHAR_MAX == UCHAR_MAX
; 3130 : inline bool _Lexicographical_compare(
; 3131 : 	const char *_First1, const char *_Last1,
; 3132 : 	const char *_First2, const char *_Last2)
; 3133 : 	{	// order [_First1, _Last1) vs. [First2, Last2), for nonnegative char
; 3134 : 	ptrdiff_t _Num1 = _Last1 - _First1;
; 3135 : 	ptrdiff_t _Num2 = _Last2 - _First2;
; 3136 : 	int _Ans = _CSTD memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
; 3137 : 	return (_Ans < 0 || _Ans == 0 && _Num1 < _Num2);
; 3138 : 	}
; 3139 :  #endif /* CHAR_MAX == UCHAR_MAX */
; 3140 : 
; 3141 : template<class _InIt1,
; 3142 : 	class _InIt2> inline
; 3143 : 	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
; 3144 : 		_InIt2 _First2, _InIt2 _Last2)
; 3145 : 	{	// order [_First1, _Last1) vs. [First2, Last2)
; 3146 : 	_DEBUG_RANGE(_First1, _Last1);
; 3147 : 	_DEBUG_RANGE(_First2, _Last2);
; 3148 : 	return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
; 3149 : 		_Unchecked(_First2), _Unchecked(_Last2)));
; 3150 : 	}
; 3151 : 
; 3152 : 		// TEMPLATE FUNCTION lexicographical_compare WITH PRED
; 3153 : template<class _InIt1,
; 3154 : 	class _InIt2,
; 3155 : 	class _Pr> inline
; 3156 : 	bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
; 3157 : 		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
; 3158 : 	{	// order [_First1, _Last1) vs. [First2, Last2) using _Pred
; 3159 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
; 3160 : 		if (_DEBUG_LT_PRED(_Pred, *_First1, *_First2))
; 3161 : 			return (true);
; 3162 : 		else if (_Pred(*_First2, *_First1))
; 3163 : 			return (false);
; 3164 : 	return (_First1 == _Last1 && _First2 != _Last2);
; 3165 : 	}
; 3166 : 
; 3167 : template<class _InIt1,
; 3168 : 	class _InIt2,
; 3169 : 	class _Pr> inline
; 3170 : 	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
; 3171 : 		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
; 3172 : 	{	// order [_First1, _Last1) vs. [First2, Last2) using _Pred
; 3173 : 	_DEBUG_RANGE(_First1, _Last1);
; 3174 : 	_DEBUG_RANGE(_First2, _Last2);
; 3175 : 	_DEBUG_POINTER(_Pred);
; 3176 : 	return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
; 3177 : 		_Unchecked(_First2), _Unchecked(_Last2), _Pred));
; 3178 : 	}
; 3179 : 
; 3180 : 		// TEMPLATE FUNCTION find
; 3181 : template<class _InIt,
; 3182 : 	class _Ty> inline
; 3183 : 	_InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val)
; 3184 : 	{	// find first matching _Val
; 3185 : 	for (; _First != _Last; ++_First)
; 3186 : 		if (*_First == _Val)
; 3187 : 			break;
; 3188 : 	return (_First);
; 3189 : 	}
; 3190 : 
; 3191 : inline const char *_Find(const char *_First, const char *_Last, int _Val)
; 3192 : 	{	// find first char that matches _Val
; 3193 : 	_First = (const char *)_CSTD memchr(_First, _Val, _Last - _First);
; 3194 : 	return (_First == 0 ? _Last : _First);
; 3195 : 	}
; 3196 : 
; 3197 : inline const signed char *_Find(const signed char *_First,
; 3198 : 	const signed char *_Last, int _Val)
; 3199 : 	{	// find first signed char that matches _Val
; 3200 : 	_First = (const signed char *)_CSTD memchr(_First, _Val,
; 3201 : 		_Last - _First);
; 3202 : 	return (_First == 0 ? _Last : _First);
; 3203 : 	}
; 3204 : 
; 3205 : inline const unsigned char *_Find(const unsigned char *_First,
; 3206 : 	const unsigned char *_Last, int _Val)
; 3207 : 	{	// find first unsigned char that matches _Val
; 3208 : 	_First = (const unsigned char *)_CSTD memchr(_First, _Val,
; 3209 : 		_Last - _First);
; 3210 : 	return (_First == 0 ? _Last : _First);
; 3211 : 	}
; 3212 : 
; 3213 : template<class _InIt,
; 3214 : 	class _Ty> inline
; 3215 : 	_InIt find(_InIt _First, _InIt _Last, const _Ty& _Val)
; 3216 : 	{	// find first matching _Val
; 3217 : 	_DEBUG_RANGE(_First, _Last);
; 3218 : 	return (_Rechecked(_First,
; 3219 : 		_Find(_Unchecked(_First), _Unchecked(_Last), _Val)));
; 3220 : 	}
; 3221 : 
; 3222 : 		// TEMPLATE FUNCTION _Find_pr WITH PREDICATE
; 3223 : template<class _InIt,
; 3224 : 	class _Ty,
; 3225 : 	class _Pr> inline
; 3226 : 	_InIt _Find_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
; 3227 : 	{	// find first matching _Val, using _Pred
; 3228 : 	for (; _First != _Last; ++_First)
; 3229 : 		if (_Pred(*_First, _Val))
; 3230 : 			break;
; 3231 : 	return (_First);
; 3232 : 	}
; 3233 : 
; 3234 : 		// TEMPLATE FUNCTION count
; 3235 : template<class _InIt,
; 3236 : 	class _Ty> inline
; 3237 : 	typename iterator_traits<_InIt>::difference_type
; 3238 : 		_Count_np(_InIt _First, _InIt _Last, const _Ty& _Val)
; 3239 : 	{	// count elements that match _Val
; 3240 : 	typename iterator_traits<_InIt>::difference_type _Count = 0;
; 3241 : 
; 3242 : 	for (; _First != _Last; ++_First)
; 3243 : 		if (*_First == _Val)
; 3244 : 			++_Count;
; 3245 : 	return (_Count);
; 3246 : 	}
; 3247 : 
; 3248 : template<class _InIt,
; 3249 : 	class _Ty> inline
; 3250 : 	typename iterator_traits<_InIt>::difference_type
; 3251 : 		count(_InIt _First, _InIt _Last, const _Ty& _Val)
; 3252 : 	{	// count elements that match _Val
; 3253 : 	_DEBUG_RANGE(_First, _Last);
; 3254 : 	return (_Count_np(_Unchecked(_First), _Unchecked(_Last), _Val));
; 3255 : 	}
; 3256 : 
; 3257 : 		// TEMPLATE FUNCTION _Count_pr WITH PREDICATE
; 3258 : template<class _InIt,
; 3259 : 	class _Ty,
; 3260 : 	class _Pr> inline
; 3261 : 	typename iterator_traits<_InIt>::difference_type
; 3262 : 		_Count_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
; 3263 : 	{	// count elements that match _Val, using _Pred
; 3264 : 	typename iterator_traits<_InIt>::difference_type _Count = 0;
; 3265 : 
; 3266 : 	for (; _First != _Last; ++_First)
; 3267 : 		if (_Pred(*_First, _Val))
; 3268 : 			++_Count;
; 3269 : 	return (_Count);
; 3270 : 	}
; 3271 : 
; 3272 :  #if _HAS_CPP0X
; 3273 : 		// TEMPLATE FUNCTION is_permutation
; 3274 : template<class _FwdIt1,
; 3275 : 	class _FwdIt2> inline
; 3276 : 	bool _Is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
; 3277 : 		_FwdIt2 _First2)
; 3278 : 	{	// test if [_First1, _Last1) == permuted [_First2, ...)
; 3279 : 	for (; _First1 != _Last1; ++_First1, ++_First2)
; 3280 : 		if (!(*_First1 == *_First2))
; 3281 : 			break;	// find first inequality
; 3282 : 	if (_First1 != _Last1)
; 3283 : 		{	// check match counts in suffix
; 3284 : 		_FwdIt2 _Last2 = _First2;
; 3285 : 		advance(_Last2, distance(_First1, _Last1));
; 3286 : 		for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
; 3287 : 			if (_Next1 == _Find(_First1, _Next1, *_Next1))
; 3288 : 				{	// new value, compare match counts
; 3289 : 				typename iterator_traits<_FwdIt2>::difference_type _Count =
; 3290 : 					_Count_np(_First2, _Last2, *_Next1);
; 3291 : 				if (_Count == 0
; 3292 : 					|| _Count != _Count_np(_Next1, _Last1, *_Next1))
; 3293 : 					return (false);	// match counts differ, fail
; 3294 : 				}
; 3295 : 		}
; 3296 : 	return (true);
; 3297 : 	}
; 3298 : 
; 3299 : template<class _FwdIt1,
; 3300 : 	class _FwdIt2> inline
; 3301 : 	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
; 3302 : 		_FwdIt2 _First2)
; 3303 : 	{	// test if [_First1, _Last1) == permuted [_First2, ...)
; 3304 : 	_DEBUG_RANGE(_First1, _Last1);
; 3305 : 	return _Is_permutation(_Unchecked(_First1), _Unchecked(_Last1),
; 3306 : 		_Unchecked(_First2));
; 3307 : 	}
; 3308 : 
; 3309 : 		// TEMPLATE FUNCTION is_permutation WITH PREDICATE
; 3310 : template<class _FwdIt1,
; 3311 : 	class _FwdIt2,
; 3312 : 	class _Pr> inline
; 3313 : 	bool _Is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
; 3314 : 		_FwdIt2 _First2, _Pr _Pred)
; 3315 : 	{	// test if [_First1, _First2) == permuted [_First2, ...), using _Pred
; 3316 : 	for (; _First1 != _Last1; ++_First1, ++_First2)
; 3317 : 		if (!_Pred(*_First1, *_First2))
; 3318 : 			break;	// find first inequality
; 3319 : 	if (_First1 != _Last1)
; 3320 : 		{	// check match counts in suffix
; 3321 : 		_FwdIt2 _Last2 = _First2;
; 3322 : 		advance(_Last2, distance(_First1, _Last1));
; 3323 : 		for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
; 3324 : 			if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred))
; 3325 : 				{	// new value, compare match counts
; 3326 : 				typename iterator_traits<_FwdIt2>::difference_type _Count =
; 3327 : 					_Count_pr(_First2, _Last2, *_Next1, _Pred);
; 3328 : 				if (_Count == 0
; 3329 : 					|| _Count != _Count_pr(_Next1, _Last1, *_Next1, _Pred))
; 3330 : 					return (false);	// match counts differ, fail
; 3331 : 				}
; 3332 : 		}
; 3333 : 	return (true);
; 3334 : 	}
; 3335 : 
; 3336 : template<class _FwdIt1,
; 3337 : 	class _FwdIt2,
; 3338 : 	class _Pr> inline
; 3339 : 	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
; 3340 : 		_FwdIt2 _First2, _Pr _Pred)
; 3341 : 	{	// test if [_First1, _First2) == permuted [_First2, ...), using _Pred
; 3342 : 	_DEBUG_RANGE(_First1, _Last1);
; 3343 : 	_DEBUG_POINTER(_Pred);
; 3344 : 	return _Is_permutation(_Unchecked(_First1), _Unchecked(_Last1),
; 3345 : 		_Unchecked(_First2), _Pred);
; 3346 : 	}
; 3347 :  #endif /* _HAS_CPP0X */
; 3348 : 
; 3349 : 		// TEMPLATE FUNCTION reverse
; 3350 : template<class _BidIt> inline
; 3351 : 	void _Reverse(_BidIt _First, _BidIt _Last, bidirectional_iterator_tag)
; 3352 : 	{	// reverse elements in [_First, _Last), bidirectional iterators
; 3353 : 	for (; _First != _Last && _First != --_Last; ++_First)
; 3354 : 		_STD iter_swap(_First, _Last);
; 3355 : 	}
; 3356 : 
; 3357 : template<class _BidIt> inline
; 3358 : 	void reverse(_BidIt _First, _BidIt _Last)
; 3359 : 	{	// reverse elements in [_First, _Last)
; 3360 : 	_DEBUG_RANGE(_First, _Last);
; 3361 : 	_Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 3362 : 	}
; 3363 : 
; 3364 : 		// TEMPLATE FUNCTION rotate
; 3365 : template<class _FwdIt> inline
; 3366 : 	void _Rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
; 3367 : 		forward_iterator_tag)
; 3368 : 	{	// rotate [_First, _Last), forward iterators
; 3369 : 	for (_FwdIt _Next = _Mid; ; )
; 3370 : 		{	// swap [_First, ...) into place
; 3371 : 		_STD iter_swap(_First, _Next);
; 3372 : 		if (++_First == _Mid)
; 3373 : 			if (++_Next == _Last)
; 3374 : 				break;	// done, quit
; 3375 : 			else
; 3376 : 				_Mid = _Next;	// mark end of next interval
; 3377 : 		else if (++_Next == _Last)
; 3378 : 			_Next = _Mid;	// wrap to last end
; 3379 : 		}
; 3380 : 	}
; 3381 : 
; 3382 : template<class _BidIt> inline
; 3383 : 	void _Rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,
; 3384 : 		bidirectional_iterator_tag)
; 3385 : 	{	// rotate [_First, _Last), bidirectional iterators
; 3386 : 	_STD reverse(_First, _Mid);
; 3387 : 	_STD reverse(_Mid, _Last);
; 3388 : 	_STD reverse(_First, _Last);
; 3389 : 	}
; 3390 : 
; 3391 : template<class _RanIt,
; 3392 : 	class _Diff,
; 3393 : 	class _Ty> inline
; 3394 : 	void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Diff *, _Ty *)
; 3395 : 	{	// rotate [_First, _Last), random-access iterators
; 3396 : 	_Diff _Shift = _Mid - _First;
; 3397 : 	_Diff _Count = _Last - _First;
; 3398 : 
; 3399 : 	for (_Diff _Factor = _Shift; _Factor != 0; )
; 3400 : 		{	// find subcycle count as GCD of shift count and length
; 3401 : 		_Diff _Tmp = _Count % _Factor;
; 3402 : 		_Count = _Factor;
; 3403 : 		_Factor = _Tmp;
; 3404 : 		}
; 3405 : 
; 3406 : 	if (_Count < _Last - _First)
; 3407 : 		for (; 0 < _Count; --_Count)
; 3408 : 			{	// rotate each subcycle
; 3409 : 			_RanIt _Hole = _First + _Count;
; 3410 : 			_RanIt _Next = _Hole;
; 3411 : 			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;
; 3412 : 			for (; ; )
; 3413 : 				{	// percolate elements back around subcycle
; 3414 : 				iter_swap(_Next, _Next1);
; 3415 : 				_Next = _Next1;
; 3416 : 				_Next1 = _Shift < _Last - _Next1 ? _Next1 + _Shift
; 3417 : 					: _First + (_Shift - (_Last - _Next1));
; 3418 : 				if (_Next1 == _Hole)
; 3419 : 					break;
; 3420 : 				}
; 3421 : 			}
; 3422 : 	}
; 3423 : 
; 3424 : template<class _RanIt> inline
; 3425 : 	void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last,
; 3426 : 		random_access_iterator_tag)
; 3427 : 	{	// rotate [_First, _Last), random-access iterators
; 3428 : 	_Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));

  00100	83 ec 08	 sub	 esp, 8
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??$_Rotate@PAEHE@std@@YAXPAE00PAH0@Z ; std::_Rotate<unsigned char *,int,unsigned char>
  00109	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN133@Insert:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1349 : 			this->_Mylast += _Count;

  0010c	01 73 04	 add	 DWORD PTR [ebx+4], esi
  0010f	5f		 pop	 edi
$LN151@Insert:
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx

; 1352 : 		}

  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 10 00	 ret	 16			; 00000010H
$LN155@Insert:

; 1490 : 			_Capacity = _Count;
; 1491 : 		return (_Capacity);
; 1492 : 		}
; 1493 : 
; 1494 : 	bool _Inside(const value_type *_Ptr) const
; 1495 : 		{	// test if _Ptr points inside vector
; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1497 : 		}
; 1498 : 
; 1499 : 	void _Reallocate(size_type _Count)
; 1500 : 		{	// move to array of exactly _Count elements
; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1502 : 
; 1503 : 		_TRY_BEGIN
; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1507 : 		_RERAISE;
; 1508 : 		_CATCH_END
; 1509 : 
; 1510 : 		size_type _Size = size();
; 1511 : 		if (this->_Myfirst != pointer())
; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);
; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();
; 1519 : 		this->_Myend = _Ptr + _Count;
; 1520 : 		this->_Mylast = _Ptr + _Size;
; 1521 : 		this->_Myfirst = _Ptr;
; 1522 : 		}
; 1523 : 
; 1524 : 	void _Reserve(size_type _Count)
; 1525 : 		{	// ensure room for _Count new elements, grow exponentially
; 1526 : 		if (_Unused_capacity() < _Count)
; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)
; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));
; 1531 : 			}
; 1532 : 		}
; 1533 : 
; 1534 : 	void _Tidy()
; 1535 : 		{	// free all storage
; 1536 : 		if (this->_Myfirst != pointer())
; 1537 : 			{	// something to free, destroy and deallocate it
; 1538 : 			this->_Orphan_all();
; 1539 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1540 : 			this->_Getal().deallocate(this->_Myfirst,
; 1541 : 				this->_Myend - this->_Myfirst);
; 1542 : 			this->_Myfirst = pointer();
; 1543 : 			this->_Mylast = pointer();
; 1544 : 			this->_Myend = pointer();
; 1545 : 			}
; 1546 : 		}
; 1547 : 
; 1548 : 	template<class _Iter>
; 1549 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1550 : 		{	// copy initializing [_First, _Last), using allocator
; 1551 : 		_Alty _Alval(this->_Getal());
; 1552 : 		return (_Uninitialized_copy(_First, _Last,
; 1553 : 			_Ptr, _Alval));
; 1554 : 		}
; 1555 : 
; 1556 : 	template<class _Iter>
; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1558 : 		{	// move initializing [_First, _Last), using allocator
; 1559 : 		_Alty _Alval(this->_Getal());
; 1560 : 		return (_Uninitialized_move(_First, _Last,
; 1561 : 			_Ptr, _Alval));
; 1562 : 		}
; 1563 : 
; 1564 : 	iterator _Insert_n(const_iterator _Where,
; 1565 : 		size_type _Count, const value_type& _Val)
; 1566 : 		{	// insert _Count * _Val at _Where
; 1567 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1568 : 		if (_VICONT(_Where) != this
; 1569 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1570 : 			|| this->_Mylast < _VIPTR(_Where))
; 1571 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1572 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 
; 1574 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1575 : 		if (_Count == 0)
; 1576 : 			;
; 1577 : 		else if (_Unused_capacity() < _Count)
; 1578 : 			{	// not enough room, reallocate
; 1579 : 			if (max_size() - size() < _Count)
; 1580 : 				_Xlen();	// result too long
; 1581 : 
; 1582 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1583 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1584 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst;
; 1585 : 			int _Ncopied = 0;
; 1586 : 
; 1587 : 			_TRY_BEGIN
; 1588 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1589 : 				_STD addressof(_Val));	// add new stuff
; 1590 : 			++_Ncopied;
; 1591 : 			_Umove(this->_Myfirst, _VIPTR(_Where),
; 1592 : 				_Newvec);	// copy prefix
; 1593 : 			++_Ncopied;
; 1594 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1595 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1596 : 			_CATCH_ALL
; 1597 : 			if (1 < _Ncopied)
; 1598 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1599 : 			if (0 < _Ncopied)
; 1600 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1601 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1602 : 			_RERAISE;
; 1603 : 			_CATCH_END
; 1604 : 
; 1605 : 			_Count += size();
; 1606 : 			if (this->_Myfirst != pointer())
; 1607 : 				{	// destroy and deallocate old array
; 1608 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1609 : 				this->_Getal().deallocate(this->_Myfirst,
; 1610 : 					this->_Myend - this->_Myfirst);
; 1611 : 				}
; 1612 : 
; 1613 : 			this->_Orphan_all();
; 1614 : 			this->_Myend = _Newvec + _Capacity;
; 1615 : 			this->_Mylast = _Newvec + _Count;
; 1616 : 			this->_Myfirst = _Newvec;
; 1617 : 			}
; 1618 : 		else if ((size_type)(this->_Mylast - _VIPTR(_Where))
; 1619 : 			< _Count)
; 1620 : 			{	// new stuff spills off end
; 1621 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1622 : 
; 1623 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1624 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1625 : 
; 1626 : 			_TRY_BEGIN
; 1627 : 			_Ufill(this->_Mylast,
; 1628 : 				_Count - (this->_Mylast - _VIPTR(_Where)),
; 1629 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1630 : 			_CATCH_ALL
; 1631 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1632 : 				this->_Mylast + _Count);
; 1633 : 			_RERAISE;
; 1634 : 			_CATCH_END
; 1635 : 
; 1636 : 			this->_Mylast += _Count;
; 1637 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1638 : 			_STD fill(_VIPTR(_Where), this->_Mylast - _Count,
; 1639 : 				_Tmp);	// insert up to old end
; 1640 : 			}
; 1641 : 		else
; 1642 : 			{	// new stuff can all be assigned
; 1643 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1644 : 
; 1645 : 			pointer _Oldend = this->_Mylast;
; 1646 : 			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1647 : 				this->_Mylast);	// copy suffix
; 1648 : 
; 1649 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1650 : 			_Copy_backward(_VIPTR(_Where), _Oldend - _Count,
; 1651 : 				_Oldend);	// copy hole
; 1652 : 			_STD fill(_VIPTR(_Where),
; 1653 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1654 : 			}
; 1655 : 		return (begin() + _Off);
; 1656 : 		}
; 1657 : 
; 1658 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1659 : 		{	// copy initializing _Count * _Val, using allocator
; 1660 : 		_Alty _Alval(this->_Getal());
; 1661 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
; 1662 : 		return (_Ptr + _Count);
; 1663 : 		}
; 1664 : 
; 1665 : 	__declspec(noreturn) void _Xlen() const
; 1666 : 		{	// report a length_error
; 1667 : 		_Xlength_error("vector<T> too long");

  00118	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0011d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN158@Insert:
$LN157@Insert:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00122	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN159@Insert:
$LN154@Insert:
  00127	cc		 int	 3
??$_Insert@PAE@?$vector@EV?$allocator@E@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Insert<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAE@std@@YAPAEPAE@Z
_TEXT	SEGMENT
??$_Val_type@PAE@std@@YAPAEPAE@Z PROC			; std::_Val_type<unsigned char *>, COMDAT
; ___formal$dead$ = ecx

; 711  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 712  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAE@std@@YAPAEPAE@Z ENDP			; std::_Val_type<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_def_fill_n@EIE@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
___formal$ = 16						; size = 1
??$_Uninit_def_fill_n@EIE@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_def_fill_n<unsigned char,unsigned int,unsigned char>, COMDAT
; __First$ = ecx
; __Count$ = edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2699 : 	_CSTD memset(_Dest, _Val, _Count);

  00000	52		 push	 edx
  00001	6a 00		 push	 0
  00003	51		 push	 ecx
  00004	e8 00 00 00 00	 call	 _memset
  00009	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 661  : 	}

  0000c	c3		 ret	 0
??$_Uninit_def_fill_n@EIE@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_def_fill_n<unsigned char,unsigned int,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Move@PAEPAE@std@@YAPAEPAE00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Move@PAEPAE@std@@YAPAEPAE00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<unsigned char *,unsigned char *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 2474 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2475 : 	ptrdiff_t _Count = _Last - _First;
; 2476 : 	_CSTD memmove(&*_Dest, &*_First,
; 2477 : 		_Count * sizeof (*_First));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
  0000a	2b f9		 sub	 edi, ecx
  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2478 : 	return (_Dest + _Count);

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 2479 : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Move@PAEPAE@std@@YAPAEPAE00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<unsigned char *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z PROC ; std::_Uninitialized_move<unsigned char *,unsigned char *,std::_Wrap_alloc<std::allocator<unsigned char> > >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 471  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f2		 mov	 esi, edx

; 461  : 	size_t _Count = (size_t)(_Last - _First);

  00006	2b f1		 sub	 esi, ecx

; 462  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 463  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00008	56		 push	 esi
  00009	51		 push	 ecx
  0000a	ff 75 08	 push	 DWORD PTR __Dest$[ebp]
  0000d	e8 00 00 00 00	 call	 _memmove
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	03 c6		 add	 eax, esi
  00017	5e		 pop	 esi

; 472  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 474  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Uninitialized_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z ENDP ; std::_Uninitialized_move<unsigned char *,unsigned char *,std::_Wrap_alloc<std::allocator<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1694 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Distance@PAEI@std@@YAXPAE0AAI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??$_Distance@PAEI@std@@YAXPAE0AAI@Z PROC		; std::_Distance<unsigned char *,unsigned int>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 830  : 	{	// add to _Off distance between iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 815  : 	_Off += _Last - _First;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	2b d1		 sub	 edx, ecx
  00008	01 10		 add	 DWORD PTR [eax], edx

; 831  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));
; 832  : 	}

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??$_Distance@PAEI@std@@YAXPAE0AAI@Z ENDP		; std::_Distance<unsigned char *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Ucopy<unsigned char *>, COMDAT
; _this$dead$ = ecx

; 1549 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000a	2b f0		 sub	 esi, eax

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  00011	e8 00 00 00 00	 call	 _memmove
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	03 c6		 add	 eax, esi
  0001b	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1554 : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Ucopy<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$rotate@PAE@std@@YAPAEPAE00@Z
_TEXT	SEGMENT
__Last$ = 8						; size = 4
??$rotate@PAE@std@@YAPAEPAE00@Z PROC			; std::rotate<unsigned char *>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 3433 : 	{	// rotate [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 3434 : 	_DEBUG_RANGE(_First, _Mid);
; 3435 : 	_DEBUG_RANGE(_Mid, _Last);
; 3436 : 	if (_First != _Mid && _Mid != _Last)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b fa		 mov	 edi, edx
  0000b	8b f1		 mov	 esi, ecx
  0000d	3b f7		 cmp	 esi, edi
  0000f	74 10		 je	 SHORT $LN12@rotate
  00011	3b fb		 cmp	 edi, ebx
  00013	74 0c		 je	 SHORT $LN12@rotate

; 756  : 	}
; 757  : 
; 758  : template<class _InIt,
; 759  : 	class _Diff> inline
; 760  : 	void advance(_InIt& _Where, _Diff _Off)
; 761  : 	{	// increment iterator by offset, arbitrary iterators
; 762  : 	_Advance(_Where, _Off, _Iter_cat(_Where));
; 763  : 	}
; 764  : 
; 765  : 		// TEMPLATE FUNCTION _Dist_type
; 766  : 
; 767  : template<class _Iter> inline
; 768  : 	typename iterator_traits<_Iter>::difference_type
; 769  : 		*_Dist_type(_Iter)
; 770  : 	{	// return distance type from arbitrary argument
; 771  : 	return (0);
; 772  : 	}
; 773  : 
; 774  : 		// TEMPLATE FUNCTIONS distance and _Distance
; 775  : template<class _InIt,
; 776  : 	class _Diff> inline
; 777  : 		void _Distance2(_InIt _First, _InIt _Last, _Diff& _Off,
; 778  : 			input_iterator_tag)
; 779  : 	{	// add to _Off distance between input iterators
; 780  : 	for (; _First != _Last; ++_First)
; 781  : 		++_Off;
; 782  : 	}
; 783  : 
; 784  : template<class _FwdIt,
; 785  : 	class _Diff> inline
; 786  : 		void _Distance2(_FwdIt _First, _FwdIt _Last, _Diff& _Off,
; 787  : 			forward_iterator_tag)
; 788  : 	{	// add to _Off distance between forward iterators (redundant)
; 789  : 	for (; _First != _Last; ++_First)
; 790  : 		++_Off;
; 791  : 	}
; 792  : 
; 793  : template<class _BidIt,
; 794  : 	class _Diff> inline
; 795  : 		void _Distance2(_BidIt _First, _BidIt _Last, _Diff& _Off,
; 796  : 			bidirectional_iterator_tag)
; 797  : 	{	// add to _Off distance between bidirectional iterators (redundant)
; 798  : 	for (; _First != _Last; ++_First)
; 799  : 		++_Off;
; 800  : 	}
; 801  : 
; 802  : template<class _RanIt,
; 803  : 	class _Diff> inline
; 804  : 		void _Distance2(_RanIt _First, _RanIt _Last, _Diff& _Off,
; 805  : 			random_access_iterator_tag)
; 806  : 	{	// add to _Off distance between random-access iterators
; 807  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 808  : 	if (_First != _Last)
; 809  : 		{	// check for null pointers
; 810  : 		_DEBUG_POINTER(_First);
; 811  : 		_DEBUG_POINTER(_Last);
; 812  : 		}
; 813  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 814  : 
; 815  : 	_Off += _Last - _First;
; 816  : 	}
; 817  : 
; 818  : template<class _InIt> inline
; 819  : 	typename iterator_traits<_InIt>::difference_type
; 820  : 		distance(_InIt _First, _InIt _Last)
; 821  : 	{	// return distance between iterators
; 822  : 	typename iterator_traits<_InIt>::difference_type _Off = 0;
; 823  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));
; 824  : 	return (_Off);
; 825  : 	}
; 826  : 
; 827  : template<class _InIt,
; 828  : 	class _Diff> inline
; 829  : 		void _Distance(_InIt _First, _InIt _Last, _Diff& _Off)
; 830  : 	{	// add to _Off distance between iterators
; 831  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));
; 832  : 	}
; 833  : 
; 834  :  #if _HAS_CPP0X
; 835  : 		// TEMPLATE FUNCTION next
; 836  : template<class _FwdIt> inline
; 837  : 	_FwdIt next(_FwdIt _First,
; 838  : 		typename iterator_traits<_FwdIt>::difference_type _Off = 1)
; 839  : 	{	// increment iterator
; 840  : 	static_assert((is_base_of<forward_iterator_tag,
; 841  : 		typename iterator_traits<_FwdIt>::iterator_category>::value),
; 842  : 		"next requires forward iterator");
; 843  : 
; 844  : 	_STD advance(_First, _Off);
; 845  : 	return (_First);
; 846  : 	}
; 847  : 
; 848  : 		// TEMPLATE FUNCTION prev
; 849  : template<class _BidIt> inline
; 850  : 	_BidIt prev(_BidIt _First,
; 851  : 		typename iterator_traits<_BidIt>::difference_type _Off = 1)
; 852  : 	{	// decrement iterator
; 853  : 	static_assert((is_base_of<bidirectional_iterator_tag,
; 854  : 		typename iterator_traits<_BidIt>::iterator_category>::value),
; 855  : 		"prev requires bidirectional iterator");
; 856  : 
; 857  : 	_STD advance(_First, -_Off);
; 858  : 	return (_First);
; 859  : 	}
; 860  : 
; 861  : template<class _Container>
; 862  : 	auto inline begin(_Container& _Cont) -> decltype(_Cont.begin())
; 863  : 	{	// get beginning of sequence
; 864  : 	return (_Cont.begin());
; 865  : 	}
; 866  : 
; 867  : template<class _Container>
; 868  : 	auto inline begin(const _Container& _Cont) -> decltype(_Cont.begin())
; 869  : 	{	// get beginning of sequence
; 870  : 	return (_Cont.begin());
; 871  : 	}
; 872  : 
; 873  : template<class _Container>
; 874  : 	auto inline end(_Container& _Cont) -> decltype(_Cont.end())
; 875  : 	{	// get end of sequence
; 876  : 	return (_Cont.end());
; 877  : 	}
; 878  : 
; 879  : template<class _Container>
; 880  : 	auto inline end(const _Container& _Cont) -> decltype(_Cont.end())
; 881  : 	{	// get end of sequence
; 882  : 	return (_Cont.end());
; 883  : 	}
; 884  : 
; 885  : template<class _Ty,
; 886  : 	size_t _Size> inline
; 887  : 	_Ty *begin(_Ty (&_Array)[_Size])
; 888  : 	{	// get beginning of array
; 889  : 	return (_Array);
; 890  : 	}
; 891  : 
; 892  : template<class _Ty,
; 893  : 	size_t _Size> inline
; 894  : 	_Ty *end(_Ty (&_Array)[_Size])
; 895  : 	{	// get end of array
; 896  : 	return (_Array + _Size);
; 897  : 	}
; 898  :  #endif /* _HAS_CPP0X */
; 899  : 
; 900  : 		// TEMPLATE CLASS _Revranit
; 901  : template<class _Ty>
; 902  : 	struct pointer_traits;
; 903  : 
; 904  : template<class _RanIt,
; 905  : 	class _Base>
; 906  : 	class _Revranit
; 907  : 		: public _Base
; 908  : 	{	// wrap iterator to run it backwards
; 909  : public:
; 910  : 	typedef _Revranit<_RanIt, _Base> _Myt;
; 911  :  	typedef typename _Base::difference_type difference_type;
; 912  : 	typedef typename _Base::pointer pointer;
; 913  : 	typedef typename _Base::reference reference;
; 914  : 	typedef _RanIt iterator_type;
; 915  : 
; 916  : 	_Revranit()
; 917  : 		{	// construct with default wrapped iterator
; 918  : 		}
; 919  : 
; 920  : 	explicit _Revranit(_RanIt _Right)
; 921  : 		: current(_Right)
; 922  : 		{	// construct wrapped iterator from _Right
; 923  : 		}
; 924  : 
; 925  : 	template<class _RanIt2,
; 926  : 		class _Base2>
; 927  : 		_Revranit(const _Revranit<_RanIt2, _Base2>& _Right)
; 928  : 		: current(_Right.base())
; 929  : 		{	// initialize with compatible base
; 930  : 		}
; 931  : 
; 932  : 	_RanIt base() const
; 933  : 		{	// return wrapped iterator
; 934  : 		return (current);
; 935  : 		}
; 936  : 
; 937  : 	reference operator*() const
; 938  : 		{	// return designated value
; 939  : 		_RanIt _Tmp = current;
; 940  : 		return (*--_Tmp);
; 941  : 		}
; 942  : 
; 943  : 	pointer operator->() const
; 944  : 		{	// return pointer to class object
; 945  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 946  : 		}
; 947  : 
; 948  : 	_Myt& operator++()
; 949  : 		{	// preincrement
; 950  : 		--current;
; 951  : 		return (*this);
; 952  : 		}
; 953  : 
; 954  : 	_Myt operator++(int)
; 955  : 		{	// postincrement
; 956  : 		_Myt _Tmp = *this;
; 957  : 		--current;
; 958  : 		return (_Tmp);
; 959  : 		}
; 960  : 
; 961  : 	_Myt& operator--()
; 962  : 		{	// predecrement
; 963  : 		++current;
; 964  : 		return (*this);
; 965  : 		}
; 966  : 
; 967  : 	_Myt operator--(int)
; 968  : 		{	// postdecrement
; 969  : 		_Myt _Tmp = *this;
; 970  : 		++current;
; 971  : 		return (_Tmp);
; 972  : 		}
; 973  : 
; 974  : 	template<class _RanIt2,
; 975  : 		class _Base2>
; 976  : 		bool _Equal(const _Revranit<_RanIt2, _Base2>& _Right) const
; 977  : 		{	// test for iterator equality
; 978  : 		return (current == _Right.base());
; 979  : 		}
; 980  : 
; 981  : // N.B. functions valid for random-access iterators only beyond this point
; 982  : 
; 983  : 	_Myt& operator+=(difference_type _Off)
; 984  : 		{	// increment by integer
; 985  : 		current -= _Off;
; 986  : 		return (*this);
; 987  : 		}
; 988  : 
; 989  : 	_Myt operator+(difference_type _Off) const
; 990  : 		{	// return this + integer
; 991  : 		return (_Myt(current - _Off));
; 992  : 		}
; 993  : 
; 994  : 	_Myt& operator-=(difference_type _Off)
; 995  : 		{	// decrement by integer
; 996  : 		current += _Off;
; 997  : 		return (*this);
; 998  : 		}
; 999  : 
; 1000 : 	_Myt operator-(difference_type _Off) const
; 1001 : 		{	// return this - integer
; 1002 : 		return (_Myt(current + _Off));
; 1003 : 		}
; 1004 : 
; 1005 : 	reference operator[](difference_type _Off) const
; 1006 : 		{	// subscript
; 1007 : 		return (*(*this + _Off));
; 1008 : 		}
; 1009 : 
; 1010 : 	template<class _RanIt2,
; 1011 : 		class _Base2>
; 1012 : 		bool _Less(const _Revranit<_RanIt2, _Base2>& _Right) const
; 1013 : 		{	// test if this < _Right
; 1014 : 		return (_Right.base() < current);
; 1015 : 		}
; 1016 : 
; 1017 : 	difference_type operator-(const _Myt& _Right) const
; 1018 : 		{	// return difference of iterators
; 1019 : 		return (_Right.base() - current);
; 1020 : 		}
; 1021 : 
; 1022 : protected:
; 1023 : 	_RanIt current;	// the wrapped iterator
; 1024 : 	};
; 1025 : 
; 1026 : 		// _Revranit TEMPLATE OPERATORS
; 1027 : template<class _RanIt,
; 1028 : 	class _Base,
; 1029 : 	class _Diff> inline
; 1030 : 	_Revranit<_RanIt, _Base>
; 1031 : 		operator+(_Diff _Off,
; 1032 : 		const _Revranit<_RanIt, _Base>& _Right)
; 1033 : 	{	// return reverse_iterator + integer
; 1034 : 	return (_Right + _Off);
; 1035 : 	}
; 1036 : 
; 1037 : template<class _RanIt1,
; 1038 : 	class _Base1,
; 1039 : 	class _RanIt2,
; 1040 : 	class _Base2>
; 1041 : 	auto inline operator-(
; 1042 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1043 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1044 : 			-> decltype(_Right.base() - _Left.base())
; 1045 : 	{	// return difference of reverse_iterators
; 1046 : 	return (_Right.base() - _Left.base());
; 1047 : 	}
; 1048 : 
; 1049 : template<class _RanIt1,
; 1050 : 	class _Base1,
; 1051 : 	class _RanIt2,
; 1052 : 	class _Base2> inline
; 1053 : 	bool operator==(
; 1054 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1055 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1056 : 	{	// test for reverse_iterator equality
; 1057 : 	return (_Left._Equal(_Right));
; 1058 : 	}
; 1059 : 
; 1060 : template<class _RanIt1,
; 1061 : 	class _Base1,
; 1062 : 	class _RanIt2,
; 1063 : 	class _Base2> inline
; 1064 : 	bool operator!=(
; 1065 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1066 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1067 : 	{	// test for reverse_iterator inequality
; 1068 : 	return (!(_Left == _Right));
; 1069 : 	}
; 1070 : 
; 1071 : template<class _RanIt1,
; 1072 : 	class _Base1,
; 1073 : 	class _RanIt2,
; 1074 : 	class _Base2> inline
; 1075 : 	bool operator<(
; 1076 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1077 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1078 : 	{	// test for reverse_iterator < reverse_iterator
; 1079 : 	return (_Left._Less(_Right));
; 1080 : 	}
; 1081 : 
; 1082 : template<class _RanIt1,
; 1083 : 	class _Base1,
; 1084 : 	class _RanIt2,
; 1085 : 	class _Base2> inline
; 1086 : 	bool operator>(
; 1087 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1088 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1089 : 	{	// test for reverse_iterator > reverse_iterator
; 1090 : 	return (_Right < _Left);
; 1091 : 	}
; 1092 : 
; 1093 : template<class _RanIt1,
; 1094 : 	class _Base1,
; 1095 : 	class _RanIt2,
; 1096 : 	class _Base2> inline
; 1097 : 	bool operator<=(
; 1098 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1099 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1100 : 	{	// test for reverse_iterator <= reverse_iterator
; 1101 : 	return (!(_Right < _Left));
; 1102 : 	}
; 1103 : 
; 1104 : template<class _RanIt1,
; 1105 : 	class _Base1,
; 1106 : 	class _RanIt2,
; 1107 : 	class _Base2> inline
; 1108 : 	bool operator>=(
; 1109 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1110 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1111 : 	{	// test for reverse_iterator >= reverse_iterator
; 1112 : 	return (!(_Left < _Right));
; 1113 : 	}
; 1114 : 
; 1115 : 		// TEMPLATE CLASS reverse_iterator
; 1116 : template<class _RanIt>
; 1117 : 	class reverse_iterator
; 1118 : 		: public _Revranit<_RanIt, iterator<
; 1119 : 			typename iterator_traits<_RanIt>::iterator_category,
; 1120 : 			typename iterator_traits<_RanIt>::value_type,
; 1121 : 			typename iterator_traits<_RanIt>::difference_type,
; 1122 : 			typename iterator_traits<_RanIt>::pointer,
; 1123 : 			typename iterator_traits<_RanIt>::reference> >
; 1124 : 	{	// wrap iterator to run it backwards
; 1125 : 	typedef reverse_iterator<_RanIt> _Myt;
; 1126 : 	typedef _Revranit<_RanIt, iterator<
; 1127 : 		typename iterator_traits<_RanIt>::iterator_category,
; 1128 : 		typename iterator_traits<_RanIt>::value_type,
; 1129 : 		typename iterator_traits<_RanIt>::difference_type,
; 1130 : 		typename iterator_traits<_RanIt>::pointer,
; 1131 : 		typename iterator_traits<_RanIt>::reference> > _Mybase;
; 1132 : 
; 1133 : public:
; 1134 :  	typedef typename iterator_traits<_RanIt>::difference_type difference_type;
; 1135 : 	typedef typename iterator_traits<_RanIt>::pointer pointer;
; 1136 : 	typedef typename iterator_traits<_RanIt>::reference reference;
; 1137 : 	typedef _RanIt iterator_type;
; 1138 : 
; 1139 : 	reverse_iterator()
; 1140 : 		{	// construct with default wrapped iterator
; 1141 : 		}
; 1142 : 
; 1143 : 	explicit reverse_iterator(_RanIt _Right)
; 1144 : 		: _Mybase(_Right)
; 1145 : 		{	// construct wrapped iterator from _Right
; 1146 : 		}
; 1147 : 
; 1148 : 	template<class _Other>
; 1149 : 		reverse_iterator(const reverse_iterator<_Other>& _Right)
; 1150 : 		: _Mybase(_Right.base())
; 1151 : 		{	// initialize with compatible base
; 1152 : 		}
; 1153 : 
; 1154 : 	template<class _Other>
; 1155 : 		_Myt& operator=(const reverse_iterator<_Other>& _Right)
; 1156 : 		{	// assign with compatible base
; 1157 : 		this->current = _Right.base();
; 1158 : 		return (*this);
; 1159 : 		}
; 1160 : 
; 1161 : 	reverse_iterator(_Mybase _Right)
; 1162 : 		: _Mybase(_Right)
; 1163 : 		{	// construct wrapped iterator from base object
; 1164 : 		}
; 1165 : 
; 1166 : 	_Myt& operator++()
; 1167 : 		{	// preincrement
; 1168 : 		++*((_Mybase *)this);
; 1169 : 		return (*this);
; 1170 : 		}
; 1171 : 
; 1172 : 	_Myt operator++(int)
; 1173 : 		{	// postincrement
; 1174 : 		_Myt _Tmp = *this;
; 1175 : 		++*this;
; 1176 : 		return (_Tmp);
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& operator--()
; 1180 : 		{	// predecrement
; 1181 : 		--*((_Mybase *)this);
; 1182 : 		return (*this);
; 1183 : 		}
; 1184 : 
; 1185 : 	_Myt operator--(int)
; 1186 : 		{	// postdecrement
; 1187 : 		_Myt _Tmp = *this;
; 1188 : 		--*this;
; 1189 : 		return (_Tmp);
; 1190 : 		}
; 1191 : 
; 1192 : 	_Myt& operator+=(difference_type _Off)
; 1193 : 		{	// increment by integer
; 1194 : 		*((_Mybase *)this) += _Off;
; 1195 : 		return (*this);
; 1196 : 		}
; 1197 : 
; 1198 : 	_Myt operator+(difference_type _Off) const
; 1199 : 		{	// return this + integer
; 1200 : 		_Myt _Tmp = *this;
; 1201 : 		return (_Tmp += _Off);
; 1202 : 		}
; 1203 : 
; 1204 : 	_Myt& operator-=(difference_type _Off)
; 1205 : 		{	// decrement by integer
; 1206 : 		*((_Mybase *)this) -= _Off;
; 1207 : 		return (*this);
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt operator-(difference_type _Off) const
; 1211 : 		{	// return this - integer
; 1212 : 		_Myt _Tmp = *this;
; 1213 : 		return (_Tmp -= _Off);
; 1214 : 		}
; 1215 : 	};
; 1216 : 
; 1217 : template<class _RanIt>
; 1218 : 	struct _Is_checked_helper<reverse_iterator<_RanIt> >
; 1219 : 		: public _Is_checked_helper<_RanIt>
; 1220 : 	{	// mark reverse_iterator as checked if its wrapped iterator is checked
; 1221 : 	};
; 1222 : 
; 1223 : 		// reverse_iterator TEMPLATE OPERATORS
; 1224 : template<class _RanIt,
; 1225 : 	class _Diff> inline
; 1226 : 	reverse_iterator<_RanIt> operator+(_Diff _Off,
; 1227 : 		const reverse_iterator<_RanIt>& _Right)
; 1228 : 	{	// return reverse_iterator + integer
; 1229 : 	return (_Right + _Off);
; 1230 : 	}
; 1231 : 
; 1232 : template<class _RanIt1,
; 1233 : 	class _RanIt2>
; 1234 : 	auto inline operator-(const reverse_iterator<_RanIt1>& _Left,
; 1235 : 		const reverse_iterator<_RanIt2>& _Right)
; 1236 : 			-> decltype(_Right.base() - _Left.base())
; 1237 : 	{	// return difference of reverse_iterators
; 1238 : 	return (_Right.base() - _Left.base());
; 1239 : 	}
; 1240 : 
; 1241 : template<class _RanIt1,
; 1242 : 	class _RanIt2> inline
; 1243 : 	bool operator==(const reverse_iterator<_RanIt1>& _Left,
; 1244 : 		const reverse_iterator<_RanIt2>& _Right)
; 1245 : 	{	// test for reverse_iterator equality
; 1246 : 	return (_Left._Equal(_Right));
; 1247 : 	}
; 1248 : 
; 1249 : template<class _RanIt1,
; 1250 : 	class _RanIt2> inline
; 1251 : 	bool operator!=(const reverse_iterator<_RanIt1>& _Left,
; 1252 : 		const reverse_iterator<_RanIt2>& _Right)
; 1253 : 	{	// test for reverse_iterator inequality
; 1254 : 	return (!(_Left == _Right));
; 1255 : 	}
; 1256 : 
; 1257 : template<class _RanIt1,
; 1258 : 	class _RanIt2> inline
; 1259 : 	bool operator<(const reverse_iterator<_RanIt1>& _Left,
; 1260 : 		const reverse_iterator<_RanIt2>& _Right)
; 1261 : 	{	// test for reverse_iterator < reverse_iterator
; 1262 : 	return (_Left._Less(_Right));
; 1263 : 	}
; 1264 : 
; 1265 : template<class _RanIt1,
; 1266 : 	class _RanIt2> inline
; 1267 : 	bool operator>(const reverse_iterator<_RanIt1>& _Left,
; 1268 : 		const reverse_iterator<_RanIt2>& _Right)
; 1269 : 	{	// test for reverse_iterator > reverse_iterator
; 1270 : 	return (_Right < _Left);
; 1271 : 	}
; 1272 : 
; 1273 : template<class _RanIt1,
; 1274 : 	class _RanIt2> inline
; 1275 : 	bool operator<=(const reverse_iterator<_RanIt1>& _Left,
; 1276 : 		const reverse_iterator<_RanIt2>& _Right)
; 1277 : 	{	// test for reverse_iterator <= reverse_iterator
; 1278 : 	return (!(_Right < _Left));
; 1279 : 	}
; 1280 : 
; 1281 : template<class _RanIt1,
; 1282 : 	class _RanIt2> inline
; 1283 : 	bool operator>=(const reverse_iterator<_RanIt1>& _Left,
; 1284 : 		const reverse_iterator<_RanIt2>& _Right)
; 1285 : 	{	// test for reverse_iterator >= reverse_iterator
; 1286 : 	return (!(_Left < _Right));
; 1287 : 	}
; 1288 : 
; 1289 : 		// TEMPLATE CLASS _Array_const_iterator
; 1290 : template<class _Ty,
; 1291 : 	size_t _Size>
; 1292 : 	class _Array_const_iterator
; 1293 : 		: public _Iterator012<random_access_iterator_tag,
; 1294 : 			_Ty,
; 1295 : 			ptrdiff_t,
; 1296 : 			const _Ty *,
; 1297 : 			const _Ty&,
; 1298 : 			_Iterator_base>
; 1299 : 	{	// iterator for nonmutable array
; 1300 : public:
; 1301 : 	typedef _Array_const_iterator<_Ty, _Size> _Myiter;
; 1302 : 	typedef random_access_iterator_tag iterator_category;
; 1303 : 
; 1304 : 	typedef _Ty value_type;
; 1305 : 	typedef size_t size_type;
; 1306 : 	typedef ptrdiff_t difference_type;
; 1307 : 	typedef const _Ty *pointer;
; 1308 : 	typedef const _Ty& reference;
; 1309 : 	enum {_EEN_SIZE = _Size};	// helper for expression evaluator
; 1310 : 	enum {_EEN_IDL =
; 1311 : 		_ITERATOR_DEBUG_LEVEL};	// helper for expression evaluator
; 1312 : 
; 1313 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 1314 : 	_Array_const_iterator()
; 1315 : 		{	// construct with null pointer
; 1316 : 		_Ptr = 0;
; 1317 : 		}
; 1318 : 
; 1319 : 	explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
; 1320 : 		{	// construct with pointer and offset
; 1321 : 		_Ptr = _Parg + _Off;
; 1322 : 		}
; 1323 : 
; 1324 : 	typedef pointer _Unchecked_type;
; 1325 : 
; 1326 : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 1327 : 		{	// reset from unchecked iterator
; 1328 : 		_Ptr = _Right;
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	_Unchecked_type _Unchecked() const
; 1333 : 		{	// make an unchecked iterator
; 1334 : 		return (_Ptr);
; 1335 : 		}
; 1336 : 
; 1337 : 	reference operator*() const
; 1338 : 		{	// return designated object
; 1339 : 		return (*_Ptr);
; 1340 : 		}
; 1341 : 
; 1342 : 	pointer operator->() const
; 1343 : 		{	// return pointer to class object
; 1344 : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 1345 : 		}
; 1346 : 
; 1347 : 	_Myiter& operator++()
; 1348 : 		{	// preincrement
; 1349 : 		++_Ptr;
; 1350 : 		return (*this);
; 1351 : 		}
; 1352 : 
; 1353 : 	_Myiter operator++(int)
; 1354 : 		{	// postincrement
; 1355 : 		_Myiter _Tmp = *this;
; 1356 : 		++*this;
; 1357 : 		return (_Tmp);
; 1358 : 		}
; 1359 : 
; 1360 : 	_Myiter& operator--()
; 1361 : 		{	// predecrement
; 1362 : 		--_Ptr;
; 1363 : 		return (*this);
; 1364 : 		}
; 1365 : 
; 1366 : 	_Myiter operator--(int)
; 1367 : 		{	// postdecrement
; 1368 : 		_Myiter _Tmp = *this;
; 1369 : 		--*this;
; 1370 : 		return (_Tmp);
; 1371 : 		}
; 1372 : 
; 1373 : 	_Myiter& operator+=(difference_type _Off)
; 1374 : 		{	// increment by integer
; 1375 : 		_Ptr += _Off;
; 1376 : 		return (*this);
; 1377 : 		}
; 1378 : 
; 1379 : 	_Myiter operator+(difference_type _Off) const
; 1380 : 		{	// return this + integer
; 1381 : 		_Myiter _Tmp = *this;
; 1382 : 		return (_Tmp += _Off);
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myiter& operator-=(difference_type _Off)
; 1386 : 		{	// decrement by integer
; 1387 : 		return (*this += -_Off);
; 1388 : 		}
; 1389 : 
; 1390 : 	_Myiter operator-(difference_type _Off) const
; 1391 : 		{	// return this - integer
; 1392 : 		_Myiter _Tmp = *this;
; 1393 : 		return (_Tmp -= _Off);
; 1394 : 		}
; 1395 : 
; 1396 : 	difference_type operator-(const _Myiter& _Right) const
; 1397 : 		{	// return difference of iterators
; 1398 : 		return (_Ptr - _Right._Ptr);
; 1399 : 		}
; 1400 : 
; 1401 : 	reference operator[](difference_type _Off) const
; 1402 : 		{	// subscript
; 1403 : 		return (*(*this + _Off));
; 1404 : 		}
; 1405 : 
; 1406 : 	bool operator==(const _Myiter& _Right) const
; 1407 : 		{	// test for iterator equality
; 1408 : 		return (_Ptr == _Right._Ptr);
; 1409 : 		}
; 1410 : 
; 1411 : 	bool operator!=(const _Myiter& _Right) const
; 1412 : 		{	// test for iterator inequality
; 1413 : 		return (!(*this == _Right));
; 1414 : 		}
; 1415 : 
; 1416 : 	bool operator<(const _Myiter& _Right) const
; 1417 : 		{	// test if this < _Right
; 1418 : 		return (_Ptr < _Right._Ptr);
; 1419 : 		}
; 1420 : 
; 1421 : 	bool operator>(const _Myiter& _Right) const
; 1422 : 		{	// test if this > _Right
; 1423 : 		return (_Right < *this);
; 1424 : 		}
; 1425 : 
; 1426 : 	bool operator<=(const _Myiter& _Right) const
; 1427 : 		{	// test if this <= _Right
; 1428 : 		return (!(_Right < *this));
; 1429 : 		}
; 1430 : 
; 1431 : 	bool operator>=(const _Myiter& _Right) const
; 1432 : 		{	// test if this >= _Right
; 1433 : 		return (!(*this < _Right));
; 1434 : 		}
; 1435 : 
; 1436 : 	pointer _Ptr;	// beginning of array
; 1437 : 
; 1438 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 1439 : 	_Array_const_iterator()
; 1440 : 		{	// construct with null pointer
; 1441 : 		_Ptr = 0;
; 1442 : 		_Idx = 0;
; 1443 : 		}
; 1444 : 
; 1445 : 	explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
; 1446 : 		{	// construct with pointer and offset
; 1447 : 		_Ptr = _Parg;
; 1448 : 		_Idx = _Off;
; 1449 : 		}
; 1450 : 
; 1451 : 	typedef pointer _Unchecked_type;
; 1452 : 
; 1453 : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 1454 : 		{	// reset from unchecked iterator
; 1455 : 		_Idx = _Right - _Ptr;
; 1456 : 		return (*this);
; 1457 : 		}
; 1458 : 
; 1459 : 	_Unchecked_type _Unchecked() const
; 1460 : 		{	// make an unchecked iterator
; 1461 : 		return (_Ptr + _Idx);
; 1462 : 		}
; 1463 : 
; 1464 : 	reference operator*() const
; 1465 : 		{	// return designated object
; 1466 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1467 : 		if (_Ptr == 0
; 1468 : 			|| _Size <= _Idx)
; 1469 : 			{	// report error
; 1470 : 			_DEBUG_ERROR("array iterator not dereferencable");
; 1471 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1472 : 			}
; 1473 : 
; 1474 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1475 : 		_SCL_SECURE_VALIDATE(_Ptr != 0);
; 1476 : 		_SCL_SECURE_VALIDATE_RANGE(_Idx < _Size);
; 1477 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1478 : 
; 1479 : 		_Analysis_assume_(_Ptr != 0);
; 1480 : 
; 1481 : 		return (_Ptr[_Idx]);
; 1482 : 		}
; 1483 : 
; 1484 : 	pointer operator->() const
; 1485 : 		{	// return pointer to class object
; 1486 : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 1487 : 		}
; 1488 : 
; 1489 : 	_Myiter& operator++()
; 1490 : 		{	// preincrement
; 1491 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1492 : 		if (_Ptr == 0
; 1493 : 			|| _Size <= _Idx)
; 1494 : 			{	// report error
; 1495 : 			_DEBUG_ERROR("array iterator not incrementable");
; 1496 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1497 : 			}
; 1498 : 
; 1499 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1500 : 		_SCL_SECURE_VALIDATE(_Ptr != 0);
; 1501 : 		_SCL_SECURE_VALIDATE_RANGE(_Idx < _Size);
; 1502 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1503 : 
; 1504 : 		++_Idx;
; 1505 : 		return (*this);
; 1506 : 		}
; 1507 : 
; 1508 : 	_Myiter operator++(int)
; 1509 : 		{	// postincrement
; 1510 : 		_Myiter _Tmp = *this;
; 1511 : 		++*this;
; 1512 : 		return (_Tmp);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myiter& operator--()
; 1516 : 		{	// predecrement
; 1517 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1518 : 		if (_Ptr == 0
; 1519 : 			|| _Idx <= 0)
; 1520 : 			{	// report error
; 1521 : 			_DEBUG_ERROR("array iterator not decrementable");
; 1522 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1523 : 			}
; 1524 : 
; 1525 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1526 : 		_SCL_SECURE_VALIDATE(_Ptr != 0);
; 1527 : 		_SCL_SECURE_VALIDATE_RANGE(0 < _Idx);
; 1528 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1529 : 
; 1530 : 		--_Idx;
; 1531 : 		return (*this);
; 1532 : 		}
; 1533 : 
; 1534 : 	_Myiter operator--(int)
; 1535 : 		{	// postdecrement
; 1536 : 		_Myiter _Tmp = *this;
; 1537 : 		--*this;
; 1538 : 		return (_Tmp);
; 1539 : 		}
; 1540 : 
; 1541 : 	_Myiter& operator+=(difference_type _Off)
; 1542 : 		{	// increment by integer
; 1543 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1544 : 		if (_Size < _Idx + _Off)
; 1545 : 			{	// report error
; 1546 : 			_DEBUG_ERROR("array iterator + offset out of range");
; 1547 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1548 : 			}
; 1549 : 
; 1550 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1551 : 		_SCL_SECURE_VALIDATE_RANGE(_Idx + _Off <= _Size);
; 1552 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1553 : 
; 1554 : 		_Idx += _Off;
; 1555 : 		return (*this);
; 1556 : 		}
; 1557 : 
; 1558 : 	_Myiter operator+(difference_type _Off) const
; 1559 : 		{	// return this + integer
; 1560 : 		_Myiter _Tmp = *this;
; 1561 : 		return (_Tmp += _Off);
; 1562 : 		}
; 1563 : 
; 1564 : 	_Myiter& operator-=(difference_type _Off)
; 1565 : 		{	// decrement by integer
; 1566 : 		return (*this += -_Off);
; 1567 : 		}
; 1568 : 
; 1569 : 	_Myiter operator-(difference_type _Off) const
; 1570 : 		{	// return this - integer
; 1571 : 		_Myiter _Tmp = *this;
; 1572 : 		return (_Tmp -= _Off);
; 1573 : 		}
; 1574 : 
; 1575 : 	difference_type operator-(const _Myiter& _Right) const
; 1576 : 		{	// return difference of iterators
; 1577 : 		_Compat(_Right);
; 1578 : 		return (_Idx < _Right._Idx
; 1579 : 			? -(difference_type)(_Right._Idx - _Idx)
; 1580 : 			: (difference_type)_Idx - _Right._Idx);
; 1581 : 		}
; 1582 : 
; 1583 : 	reference operator[](difference_type _Off) const
; 1584 : 		{	// subscript
; 1585 : 		return (*(*this + _Off));
; 1586 : 		}
; 1587 : 
; 1588 : 	bool operator==(const _Myiter& _Right) const
; 1589 : 		{	// test for iterator equality
; 1590 : 		_Compat(_Right);
; 1591 : 		return (_Idx == _Right._Idx);
; 1592 : 		}
; 1593 : 
; 1594 : 	bool operator!=(const _Myiter& _Right) const
; 1595 : 		{	// test for iterator inequality
; 1596 : 		return (!(*this == _Right));
; 1597 : 		}
; 1598 : 
; 1599 : 	bool operator<(const _Myiter& _Right) const
; 1600 : 		{	// test if this < _Right
; 1601 : 		_Compat(_Right);
; 1602 : 		return (_Idx < _Right._Idx);
; 1603 : 		}
; 1604 : 
; 1605 : 	bool operator>(const _Myiter& _Right) const
; 1606 : 		{	// test if this > _Right
; 1607 : 		return (_Right < *this);
; 1608 : 		}
; 1609 : 
; 1610 : 	bool operator<=(const _Myiter& _Right) const
; 1611 : 		{	// test if this <= _Right
; 1612 : 		return (!(_Right < *this));
; 1613 : 		}
; 1614 : 
; 1615 : 	bool operator>=(const _Myiter& _Right) const
; 1616 : 		{	// test if this >= _Right
; 1617 : 		return (!(*this < _Right));
; 1618 : 		}
; 1619 : 
; 1620 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1621 : 	void _Compat(const _Myiter& _Right) const
; 1622 : 		{	// test for compatible iterator pair
; 1623 : 		if (_Ptr != _Right._Ptr)
; 1624 : 			{	// report error
; 1625 : 			_DEBUG_ERROR("array iterators incompatible");
; 1626 : 			_SCL_SECURE_INVALID_ARGUMENT;
; 1627 : 			}
; 1628 : 		}
; 1629 : 
; 1630 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1631 : 	void _Compat(const _Myiter& _Right) const
; 1632 : 		{	// test for compatible iterator pair
; 1633 : 		_SCL_SECURE_VALIDATE_RANGE(_Ptr == _Right._Ptr);
; 1634 : 		}
; 1635 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1636 : 
; 1637 : 	pointer _Ptr;	// beginning of array
; 1638 : 	size_t _Idx;	// offset into array
; 1639 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 1640 : 	};
; 1641 : 
; 1642 : template<class _Ty,
; 1643 : 	size_t _Size> inline
; 1644 : 	typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type
; 1645 : 		_Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)
; 1646 : 	{	// convert to unchecked
; 1647 : 	return (_Iter._Unchecked());
; 1648 : 	}
; 1649 : 
; 1650 : template<class _Ty,
; 1651 : 	size_t _Size> inline
; 1652 : 	_Array_const_iterator<_Ty, _Size>&
; 1653 : 		_Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
; 1654 : 			typename _Array_const_iterator<_Ty, _Size>
; 1655 : 				::_Unchecked_type _Right)
; 1656 : 	{	// convert to checked
; 1657 : 	return (_Iter._Rechecked(_Right));
; 1658 : 	}
; 1659 : 
; 1660 : template<class _Ty,
; 1661 : 	size_t _Size> inline
; 1662 : 	_Array_const_iterator<_Ty, _Size> operator+(
; 1663 : 		typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,
; 1664 : 		_Array_const_iterator<_Ty, _Size> _Next)
; 1665 : 	{	// add offset to iterator
; 1666 : 	return (_Next += _Off);
; 1667 : 	}
; 1668 : 
; 1669 : 		// TEMPLATE CLASS _Array_iterator
; 1670 : template<class _Ty,
; 1671 : 	size_t _Size>
; 1672 : 	class _Array_iterator
; 1673 : 		: public _Array_const_iterator<_Ty, _Size>
; 1674 : 	{	// iterator for mutable array
; 1675 : public:
; 1676 : 	typedef _Array_iterator<_Ty, _Size> _Myiter;
; 1677 : 	typedef _Array_const_iterator<_Ty, _Size> _Mybase;
; 1678 : 	typedef random_access_iterator_tag iterator_category;
; 1679 : 
; 1680 : 	typedef _Ty value_type;
; 1681 : 	typedef size_t size_type;
; 1682 : 	typedef ptrdiff_t difference_type;
; 1683 : 	typedef _Ty *pointer;
; 1684 : 	typedef _Ty& reference;
; 1685 : 
; 1686 : 	_Array_iterator()
; 1687 : 		{	// construct with null pointer
; 1688 : 		}
; 1689 : 
; 1690 : 	explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
; 1691 : 		: _Mybase(_Parg, _Off)
; 1692 : 		{	// construct with pointer and offset
; 1693 : 		}
; 1694 : 	enum {_EEN_SIZE = _Size};	// helper for expression evaluator
; 1695 : 	enum {_EEN_IDL =
; 1696 : 		_ITERATOR_DEBUG_LEVEL};	// helper for expression evaluator
; 1697 : 
; 1698 : 	typedef pointer _Unchecked_type;
; 1699 : 
; 1700 : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 1701 : 		{	// reset from unchecked iterator
; 1702 : 		((_Mybase *)this)->_Rechecked(_Right);
; 1703 : 		return (*this);
; 1704 : 		}
; 1705 : 
; 1706 : 	_Unchecked_type _Unchecked() const
; 1707 : 		{	// make an unchecked iterator
; 1708 : 		return ((pointer)((_Mybase *)this)->_Unchecked());
; 1709 : 		}
; 1710 : 
; 1711 : 	reference operator*() const
; 1712 : 		{	// return designated object
; 1713 : 		return ((reference)**(_Mybase *)this);
; 1714 : 		}
; 1715 : 
; 1716 : 	pointer operator->() const
; 1717 : 		{	// return pointer to class object
; 1718 : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 1719 : 		}
; 1720 : 
; 1721 : 	_Myiter& operator++()
; 1722 : 		{	// preincrement
; 1723 : 		++*(_Mybase *)this;
; 1724 : 		return (*this);
; 1725 : 		}
; 1726 : 
; 1727 : 	_Myiter operator++(int)
; 1728 : 		{	// postincrement
; 1729 : 		_Myiter _Tmp = *this;
; 1730 : 		++*this;
; 1731 : 		return (_Tmp);
; 1732 : 		}
; 1733 : 
; 1734 : 	_Myiter& operator--()
; 1735 : 		{	// predecrement
; 1736 : 		--*(_Mybase *)this;
; 1737 : 		return (*this);
; 1738 : 		}
; 1739 : 
; 1740 : 	_Myiter operator--(int)
; 1741 : 		{	// postdecrement
; 1742 : 		_Myiter _Tmp = *this;
; 1743 : 		--*this;
; 1744 : 		return (_Tmp);
; 1745 : 		}
; 1746 : 
; 1747 : 	_Myiter& operator+=(difference_type _Off)
; 1748 : 		{	// increment by integer
; 1749 : 		*(_Mybase *)this += _Off;
; 1750 : 		return (*this);
; 1751 : 		}
; 1752 : 
; 1753 : 	_Myiter operator+(difference_type _Off) const
; 1754 : 		{	// return this + integer
; 1755 : 		_Myiter _Tmp = *this;
; 1756 : 		return (_Tmp += _Off);
; 1757 : 		}
; 1758 : 
; 1759 : 	_Myiter& operator-=(difference_type _Off)
; 1760 : 		{	// decrement by integer
; 1761 : 		return (*this += -_Off);
; 1762 : 		}
; 1763 : 
; 1764 : 	_Myiter operator-(difference_type _Off) const
; 1765 : 		{	// return this - integer
; 1766 : 		_Myiter _Tmp = *this;
; 1767 : 		return (_Tmp -= _Off);
; 1768 : 		}
; 1769 : 
; 1770 : 	difference_type operator-(const _Mybase& _Right) const
; 1771 : 		{	// return difference of iterators
; 1772 : 		return (*(_Mybase *)this - _Right);
; 1773 : 		}
; 1774 : 
; 1775 : 	reference operator[](difference_type _Off) const
; 1776 : 		{	// subscript
; 1777 : 		return (*(*this + _Off));
; 1778 : 		}
; 1779 : 	};
; 1780 : 
; 1781 : template<class _Ty,
; 1782 : 	size_t _Size> inline
; 1783 : 	typename _Array_iterator<_Ty, _Size>::_Unchecked_type
; 1784 : 		_Unchecked(_Array_iterator<_Ty, _Size> _Iter)
; 1785 : 	{	// convert to unchecked
; 1786 : 	return (_Iter._Unchecked());
; 1787 : 	}
; 1788 : 
; 1789 : template<class _Ty,
; 1790 : 	size_t _Size> inline
; 1791 : 	_Array_iterator<_Ty, _Size>&
; 1792 : 		_Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
; 1793 : 			typename _Array_iterator<_Ty, _Size>
; 1794 : 				::_Unchecked_type _Right)
; 1795 : 	{	// convert to checked
; 1796 : 	return (_Iter._Rechecked(_Right));
; 1797 : 	}
; 1798 : 
; 1799 : template<class _Ty,
; 1800 : 	size_t _Size> inline
; 1801 : 	_Array_iterator<_Ty, _Size> operator+(
; 1802 : 		typename _Array_iterator<_Ty, _Size>::difference_type _Off,
; 1803 : 		_Array_iterator<_Ty, _Size> _Next)
; 1804 : 	{	// add offset to iterator
; 1805 : 	return (_Next += _Off);
; 1806 : 	}
; 1807 : 
; 1808 : 		// TEMPLATE CLASS move_iterator
; 1809 : template<class _RanIt>
; 1810 : 	class move_iterator
; 1811 : 	{	// wrap iterator to move rvalues
; 1812 : public:
; 1813 : 	typedef move_iterator<_RanIt> _Myt;
; 1814 :  	typedef typename iterator_traits<_RanIt>::iterator_category
; 1815 : 		iterator_category;
; 1816 :  	typedef typename iterator_traits<_RanIt>::value_type
; 1817 : 		value_type;
; 1818 :  	typedef typename iterator_traits<_RanIt>::difference_type
; 1819 : 		difference_type;
; 1820 : 	typedef _RanIt pointer;
; 1821 : 	typedef value_type&& reference;
; 1822 : 	typedef _RanIt iterator_type;
; 1823 : 
; 1824 : 	move_iterator()
; 1825 : 		{	// construct with default wrapped iterator
; 1826 : 		}
; 1827 : 
; 1828 : 	explicit move_iterator(iterator_type _Right)
; 1829 : 		: current(_Right)
; 1830 : 		{	// construct wrapped iterator from _Right
; 1831 : 		}
; 1832 : 
; 1833 : 	template<class _RanIt2>
; 1834 : 		move_iterator(const move_iterator<_RanIt2>& _Right)
; 1835 : 		: current(_Right.base())
; 1836 : 		{	// initialize with compatible base
; 1837 : 		}
; 1838 : 
; 1839 : 	template<class _RanIt2>
; 1840 : 		_Myt& operator=(const move_iterator<_RanIt2>& _Right)
; 1841 : 		{	// assign with compatible base
; 1842 : 		current = _Right.base();
; 1843 : 		return (*this);
; 1844 : 		}
; 1845 : 
; 1846 : 	_RanIt base() const
; 1847 : 		{	// return wrapped iterator
; 1848 : 		return (current);
; 1849 : 		}
; 1850 : 
; 1851 : 	reference operator*() const
; 1852 : 		{	// return designated value
; 1853 : 		return (_STD move(*current));
; 1854 : 		}
; 1855 : 
; 1856 : 	pointer operator->() const
; 1857 : 		{	// return pointer to class object
; 1858 : 		return (current);
; 1859 : 		}
; 1860 : 
; 1861 : 	_Myt& operator++()
; 1862 : 		{	// preincrement
; 1863 : 		++current;
; 1864 : 		return (*this);
; 1865 : 		}
; 1866 : 
; 1867 : 	_Myt operator++(int)
; 1868 : 		{	// postincrement
; 1869 : 		_Myt _Tmp = *this;
; 1870 : 		++current;
; 1871 : 		return (_Tmp);
; 1872 : 		}
; 1873 : 
; 1874 : 	_Myt& operator--()
; 1875 : 		{	// predecrement
; 1876 : 		--current;
; 1877 : 		return (*this);
; 1878 : 		}
; 1879 : 
; 1880 : 	_Myt operator--(int)
; 1881 : 		{	// postdecrement
; 1882 : 		_Myt _Tmp = *this;
; 1883 : 		--current;
; 1884 : 		return (_Tmp);
; 1885 : 		}
; 1886 : 
; 1887 : 	template<class _RanIt2>
; 1888 : 		bool _Equal(const move_iterator<_RanIt2>& _Right) const
; 1889 : 		{	// test for iterator equality
; 1890 : 		return (current == _Right.base());
; 1891 : 		}
; 1892 : 
; 1893 : // N.B. functions valid for random-access iterators only beyond this point
; 1894 : 
; 1895 : 	_Myt& operator+=(difference_type _Off)
; 1896 : 		{	// increment by integer
; 1897 : 		current += _Off;
; 1898 : 		return (*this);
; 1899 : 		}
; 1900 : 
; 1901 : 	_Myt operator+(difference_type _Off) const
; 1902 : 		{	// return this + integer
; 1903 : 		return (_Myt(current + _Off));
; 1904 : 		}
; 1905 : 
; 1906 : 	_Myt& operator-=(difference_type _Off)
; 1907 : 		{	// decrement by integer
; 1908 : 		current -= _Off;
; 1909 : 		return (*this);
; 1910 : 		}
; 1911 : 
; 1912 : 	_Myt operator-(difference_type _Off) const
; 1913 : 		{	// return this - integer
; 1914 : 		return (_Myt(current - _Off));
; 1915 : 		}
; 1916 : 
; 1917 : 	reference operator[](difference_type _Off) const
; 1918 : 		{	// subscript
; 1919 : 		return (_STD move(current[_Off]));
; 1920 : 		}
; 1921 : 
; 1922 : 	template<class _RanIt2>
; 1923 : 		bool _Less(const move_iterator<_RanIt2>& _Right) const
; 1924 : 		{	// test if this < _Right
; 1925 : 		return (current < _Right.base());
; 1926 : 		}
; 1927 : 
; 1928 : 	difference_type operator-(const _Myt& _Right) const
; 1929 : 		{	// return difference of iterators
; 1930 : 		return (current - _Right.base());
; 1931 : 		}
; 1932 : 
; 1933 : protected:
; 1934 : 	iterator_type current;	// the wrapped iterator
; 1935 : 	};
; 1936 : 
; 1937 : template<class _RanIt>
; 1938 : 	struct _Is_checked_helper<move_iterator<_RanIt> >
; 1939 : 		: public _Is_checked_helper<_RanIt>
; 1940 : 	{	// mark move_iterator as checked if its wrapped iterator is checked
; 1941 : 	};
; 1942 : 
; 1943 : 		// move_iterator TEMPLATE OPERATORS
; 1944 : template<class _RanIt,
; 1945 : 	class _Diff> inline
; 1946 : 	move_iterator<_RanIt>
; 1947 : 		operator+(_Diff _Off,
; 1948 : 		const move_iterator<_RanIt>& _Right)
; 1949 : 	{	// return move_iterator + integer
; 1950 : 	return (_Right + _Off);
; 1951 : 	}
; 1952 : 
; 1953 : template<class _RanIt1,
; 1954 : 	class _RanIt2>
; 1955 : 	auto inline operator-(
; 1956 : 		move_iterator<_RanIt1>& _Left,
; 1957 : 		const move_iterator<_RanIt2>& _Right)
; 1958 : 			-> decltype(_Left.base() - _Right.base())
; 1959 : 	{	// test for move_iterator equality
; 1960 : 	return (_Left.base() - _Right.base());
; 1961 : 	}
; 1962 : 
; 1963 : template<class _RanIt1,
; 1964 : 	class _RanIt2> inline
; 1965 : 	bool operator==(
; 1966 : 		const move_iterator<_RanIt1>& _Left,
; 1967 : 		const move_iterator<_RanIt2>& _Right)
; 1968 : 	{	// test for move_iterator equality
; 1969 : 	return (_Left._Equal(_Right));
; 1970 : 	}
; 1971 : 
; 1972 : template<class _RanIt1,
; 1973 : 	class _RanIt2> inline
; 1974 : 	bool operator!=(
; 1975 : 		const move_iterator<_RanIt1>& _Left,
; 1976 : 		const move_iterator<_RanIt2>& _Right)
; 1977 : 	{	// test for move_iterator inequality
; 1978 : 	return (!(_Left == _Right));
; 1979 : 	}
; 1980 : 
; 1981 : template<class _RanIt1,
; 1982 : 	class _RanIt2> inline
; 1983 : 	bool operator<(
; 1984 : 		const move_iterator<_RanIt1>& _Left,
; 1985 : 		const move_iterator<_RanIt2>& _Right)
; 1986 : 	{	// test for move_iterator < move_iterator
; 1987 : 	return (_Left._Less(_Right));
; 1988 : 	}
; 1989 : 
; 1990 : template<class _RanIt1,
; 1991 : 	class _RanIt2> inline
; 1992 : 	bool operator>(
; 1993 : 		const move_iterator<_RanIt1>& _Left,
; 1994 : 		const move_iterator<_RanIt2>& _Right)
; 1995 : 	{	// test for move_iterator > move_iterator
; 1996 : 	return (_Right < _Left);
; 1997 : 	}
; 1998 : 
; 1999 : template<class _RanIt1,
; 2000 : 	class _RanIt2> inline
; 2001 : 	bool operator<=(
; 2002 : 		const move_iterator<_RanIt1>& _Left,
; 2003 : 		const move_iterator<_RanIt2>& _Right)
; 2004 : 	{	// test for move_iterator <= move_iterator
; 2005 : 	return (!(_Right < _Left));
; 2006 : 	}
; 2007 : 
; 2008 : template<class _RanIt1,
; 2009 : 	class _RanIt2> inline
; 2010 : 	bool operator>=(
; 2011 : 		const move_iterator<_RanIt1>& _Left,
; 2012 : 		const move_iterator<_RanIt2>& _Right)
; 2013 : 	{	// test for move_iterator >= move_iterator
; 2014 : 	return (!(_Left < _Right));
; 2015 : 	}
; 2016 : 
; 2017 : 		// TEMPLATE FUNCTION make_move_iterator
; 2018 : template<class _RanIt> inline
; 2019 : 	move_iterator<_RanIt> make_move_iterator(_RanIt _Iter)
; 2020 : 	{	// make move_iterator from iterator
; 2021 : 	return (move_iterator<_RanIt>(_Iter));
; 2022 : 	}
; 2023 : 
; 2024 : 		//	ALGORITHM STUFF (from <algorithm>)
; 2025 : 		// TEMPLATE FUNCTION max
; 2026 : template<class _Ty> inline
; 2027 : 
; 2028 : 	_Post_equal_to_(_Left < _Right ? _Right : _Left)
; 2029 : 
; 2030 : 	const _Ty& (max)(const _Ty& _Left, const _Ty& _Right)
; 2031 : 	{	// return larger of _Left and _Right
; 2032 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);
; 2033 : 	}
; 2034 : 
; 2035 : 		// TEMPLATE FUNCTION max WITH PRED
; 2036 : template<class _Ty,
; 2037 : 	class _Pr> inline
; 2038 : 	const _Ty& (max)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
; 2039 : 	{	// return larger of _Left and _Right using _Pred
; 2040 : 	return (_DEBUG_LT_PRED(_Pred, _Left, _Right) ? _Right : _Left);
; 2041 : 	}
; 2042 : 
; 2043 : 		// TEMPLATE FUNCTION min
; 2044 : template<class _Ty> inline
; 2045 : 
; 2046 : 	_Post_equal_to_(_Right < _Left ? _Right : _Left)
; 2047 : 
; 2048 : 	const _Ty& (min)(const _Ty& _Left, const _Ty& _Right)
; 2049 : 	{	// return smaller of _Left and _Right
; 2050 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);
; 2051 : 	}
; 2052 : 
; 2053 : 		// TEMPLATE FUNCTION min WITH PRED
; 2054 : template<class _Ty,
; 2055 : 	class _Pr> inline
; 2056 : 	const _Ty& (min)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
; 2057 : 	{	// return smaller of _Left and _Right using _Pred
; 2058 : 	return (_DEBUG_LT_PRED(_Pred, _Right, _Left) ? _Right : _Left);
; 2059 : 	}
; 2060 : 
; 2061 : 		// TEMPLATE FUNCTION minmax
; 2062 : template<class _Ty> inline
; 2063 : 	pair<const _Ty&, const _Ty&>
; 2064 : 		minmax(const _Ty& _Left, const _Ty& _Right)
; 2065 : 	{	// return pair(leftmost/smaller, rightmost/larger) of _Left and _Right
; 2066 : 	return (_Right < _Left
; 2067 : 		? pair<const _Ty&, const _Ty&>(_Right, _Left)
; 2068 : 		: pair<const _Ty&, const _Ty&>(_Left, _Right));
; 2069 : 	}
; 2070 : 
; 2071 : 		// TEMPLATE FUNCTION minmax WITH PRED
; 2072 : template<class _Ty,
; 2073 : 	class _Pr> inline
; 2074 : 	pair<const _Ty&, const _Ty&>
; 2075 : 		minmax(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
; 2076 : 	{	// return pair(leftmost/smaller, rightmost/larger) of _Left and _Right
; 2077 : 	return (_Pred(_Right, _Left)
; 2078 : 		? pair<const _Ty&, const _Ty&>(_Right, _Left)
; 2079 : 		: pair<const _Ty&, const _Ty&>(_Left, _Right));
; 2080 : 	}
; 2081 : 
; 2082 : 		// TEMPLATE FUNCTION copy
; 2083 : template<class _InIt,
; 2084 : 	class _OutIt> inline
; 2085 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2086 : 		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
; 2087 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators
; 2088 : 	for (; _First != _Last; ++_Dest, ++_First)
; 2089 : 		*_Dest = *_First;
; 2090 : 	return (_Dest);
; 2091 : 	}
; 2092 : 
; 2093 : template<class _InIt,
; 2094 : 	class _OutIt> inline
; 2095 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2096 : 		_OutIt _Dest, _Scalar_ptr_iterator_tag)
; 2097 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars
; 2098 : 	ptrdiff_t _Count = _Last - _First;
; 2099 : 	_CSTD memmove(&*_Dest, &*_First,
; 2100 : 		_Count * sizeof (*_First));
; 2101 : 	return (_Dest + _Count);
; 2102 : 	}
; 2103 : 
; 2104 : template<class _InIt,
; 2105 : 	class _OutIt> inline
; 2106 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2107 : 		_OutIt _Dest)
; 2108 : 	{	// copy [_First, _Last) to [_Dest, ...)
; 2109 : 	return (_Copy_impl(_First, _Last,
; 2110 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2111 : 	}
; 2112 : 
; 2113 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2114 : template<class _InIt,
; 2115 : 	class _OutIt> inline
; 2116 : 	_OutIt copy(_InIt _First, _InIt _Last,
; 2117 : 		_OutIt _Dest)
; 2118 : 	{	// copy [_First, _Last) to [_Dest, ...)
; 2119 : 	return (_Rechecked(_Dest,
; 2120 : 		_Copy_impl(_Unchecked(_First), _Unchecked(_Last),
; 2121 : 			_Unchecked(_Dest))));
; 2122 : 	}
; 2123 : 
; 2124 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2125 : template<class _InIt,
; 2126 : 	class _OutIt> inline
; 2127 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2128 : 		_OutIt _Dest, input_iterator_tag, output_iterator_tag)
; 2129 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators
; 2130 : 	return (_Copy_impl(_First, _Last,
; 2131 : 		_Dest));
; 2132 : 	}
; 2133 : 
; 2134 : template<class _InIt,
; 2135 : 	class _OutIt> inline
; 2136 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2137 : 		_OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
; 2138 : 	{	// copy [_First, _Last) to [_Dest, ...), random-access iterators
; 2139 : 	_OutIt _Ans = _Dest + (_Last - _First);	// also checks range
; 2140 : 	_Copy_impl(_First, _Last,
; 2141 : 		_Unchecked(_Dest));
; 2142 : 	return (_Ans);
; 2143 : 	}
; 2144 : 
; 2145 : template<class _InIt,
; 2146 : 	class _OutIt> inline
; 2147 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2148 : 		_OutIt _Dest, true_type)
; 2149 : 	{	// copy [_First, _Last) to [_Dest, ...), checked dest
; 2150 : 	return (_Copy_impl(_First, _Last,
; 2151 : 		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
; 2152 : 	}
; 2153 : 
; 2154 : template<class _InIt,
; 2155 : 	class _OutIt> inline
; 2156 : _SCL_INSECURE_DEPRECATE
; 2157 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2158 : 		_OutIt _Dest, false_type)
; 2159 : 	{	// copy [_First, _Last) to [_Dest, ...), unchecked dest
; 2160 : 	return (_Copy_impl(_First, _Last,
; 2161 : 		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
; 2162 : 	}
; 2163 : 
; 2164 : template<class _InIt,
; 2165 : 	class _OutIt> inline
; 2166 : 	_OutIt copy(_InIt _First, _InIt _Last,
; 2167 : 		_OutIt _Dest)
; 2168 : 	{	// copy [_First, _Last) to [_Dest, ...)
; 2169 : 	if (_First == _Last)
; 2170 : 		return (_Dest);
; 2171 : 	else
; 2172 : 		{	// worth copying, check then copy
; 2173 : 		_DEBUG_RANGE(_First, _Last);
; 2174 : 		_DEBUG_POINTER(_Dest);
; 2175 : 		return (_Copy_impl(_Unchecked(_First), _Unchecked(_Last),
; 2176 : 			_Dest, _Is_checked(_Dest)));
; 2177 : 		}
; 2178 : 	}
; 2179 : 
; 2180 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2181 : template<class _InIt,
; 2182 : 	class _OutTy,
; 2183 : 	size_t _OutSize> inline
; 2184 : 	_OutTy *copy(_InIt _First, _InIt _Last,
; 2185 : 		_OutTy (&_Dest)[_OutSize])
; 2186 : 	{	// copy [_First, _Last) to [_Dest, ...)
; 2187 : 	return (_Unchecked(
; 2188 : 		_STD copy(_First, _Last,
; 2189 : 			_Array_iterator<_OutTy, _OutSize>(_Dest))));
; 2190 : 	}
; 2191 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2193 : 
; 2194 :  #if _HAS_CPP0X
; 2195 : 		// TEMPLATE FUNCTION copy_n
; 2196 : template<class _InIt,
; 2197 : 	class _Diff,
; 2198 : 	class _OutIt> inline
; 2199 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2200 : 		_OutIt _Dest, input_iterator_tag)
; 2201 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), input iterators
; 2202 : 	*_Dest = *_First;	// 0 < _Count has been guaranteed
; 2203 : 	while (0 < --_Count)
; 2204 : 		*++_Dest = *++_First;
; 2205 : 	return (++_Dest);
; 2206 : 	}
; 2207 : 
; 2208 : template<class _InIt,
; 2209 : 	class _Diff,
; 2210 : 	class _OutIt> inline
; 2211 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2212 : 		_OutIt _Dest, forward_iterator_tag)
; 2213 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), forward iterators
; 2214 : 	for (; 0 < _Count; --_Count, ++_Dest, ++_First)
; 2215 : 		*_Dest = *_First;
; 2216 : 	return (_Dest);
; 2217 : 	}
; 2218 : 
; 2219 : template<class _InIt,
; 2220 : 	class _Diff,
; 2221 : 	class _OutIt> inline
; 2222 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2223 : 		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
; 2224 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), arbitrary iterators
; 2225 : 	return (_Copy_n(_First, _Count,
; 2226 : 		_Dest, _Iter_cat(_First)));
; 2227 : 	}
; 2228 : template<class _InIt,
; 2229 : 	class _Diff,
; 2230 : 	class _OutIt> inline
; 2231 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2232 : 		_OutIt _Dest, _Scalar_ptr_iterator_tag)
; 2233 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), pointers to scalars
; 2234 : 	_CSTD memmove(&*_Dest, &*_First,
; 2235 : 		_Count * sizeof (*_First));
; 2236 : 	return (_Dest + _Count);
; 2237 : 	}
; 2238 : 
; 2239 : template<class _InIt,
; 2240 : 	class _Diff,
; 2241 : 	class _OutIt> inline
; 2242 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2243 : 		_OutIt _Dest)
; 2244 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), unchecked
; 2245 : 	return (_Copy_n(_First, _Count,
; 2246 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2247 : 	}
; 2248 : 
; 2249 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2250 : template<class _InIt,
; 2251 : 	class _Diff,
; 2252 : 	class _OutIt> inline
; 2253 : 	_OutIt copy_n(_InIt _First, _Diff _Count,
; 2254 : 		_OutIt _Dest)
; 2255 : 	{	// copy [_First, _First + _Count) to [_Dest, ...)
; 2256 : 	if (_Count <= 0)
; 2257 : 		return (_Dest);
; 2258 : 	else
; 2259 : 		return (_Rechecked(_Dest,
; 2260 : 			_Copy_n(_Unchecked(_First), _Count,
; 2261 : 				_Unchecked(_Dest))));
; 2262 : 	}
; 2263 : 
; 2264 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2265 : template<class _InIt,
; 2266 : 	class _Diff,
; 2267 : 	class _OutIt> inline
; 2268 : 	_OutIt _Copy_n2(_InIt _First, _Diff _Count,
; 2269 : 		_OutIt _Dest, output_iterator_tag)
; 2270 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), arbitrary dest
; 2271 : 	return (_Copy_n(_First, _Count,
; 2272 : 		_Dest));
; 2273 : 	}
; 2274 : 
; 2275 : template<class _InIt,
; 2276 : 	class _Diff,
; 2277 : 	class _OutIt> inline
; 2278 : 	_OutIt _Copy_n2(_InIt _First, _Diff _Count,
; 2279 : 		_OutIt _Dest, random_access_iterator_tag)
; 2280 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), random-access dest
; 2281 : 	_OutIt _Ans = _Dest + _Count;	// also checks range
; 2282 : 	_Copy_n(_First, _Count,
; 2283 : 		_Unchecked(_Dest));
; 2284 : 	return (_Ans);
; 2285 : 	}
; 2286 : 
; 2287 : template<class _InIt,
; 2288 : 	class _Diff,
; 2289 : 	class _OutIt> inline
; 2290 : 	_OutIt _Copy_n1(_InIt _First, _Diff _Count,
; 2291 : 		_OutIt _Dest, input_iterator_tag)
; 2292 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), arbitrary input
; 2293 : 	return (_Copy_n2(_First, _Count,
; 2294 : 		_Dest, _Iter_cat(_Dest)));
; 2295 : 	}
; 2296 : 
; 2297 : template<class _InIt,
; 2298 : 	class _Diff,
; 2299 : 	class _OutIt> inline
; 2300 : 	_OutIt _Copy_n1(_InIt _First, _Diff _Count,
; 2301 : 		_OutIt _Dest, random_access_iterator_tag)
; 2302 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), random-access input
; 2303 : 	_InIt _Last = _First + _Count;	// also checks range
; 2304 : 	_Last = _Last;	// to quiet diagnostics
; 2305 : 	return (_Copy_n2(_Unchecked(_First), _Count,
; 2306 : 		_Dest, _Iter_cat(_Dest)));
; 2307 : 	}
; 2308 : 
; 2309 : template<class _InIt,
; 2310 : 	class _Diff,
; 2311 : 	class _OutIt> inline
; 2312 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2313 : 		_OutIt _Dest, true_type)
; 2314 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), checked dest
; 2315 : 	return (_Copy_n1(_First, _Count,
; 2316 : 		_Dest, _Iter_cat(_First)));
; 2317 : 	}
; 2318 : 
; 2319 : template<class _InIt,
; 2320 : 	class _Diff,
; 2321 : 	class _OutIt> inline
; 2322 : _SCL_INSECURE_DEPRECATE
; 2323 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2324 : 		_OutIt _Dest, false_type)
; 2325 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), unchecked dest
; 2326 : 	return (_Copy_n1(_First, _Count,
; 2327 : 		_Dest, _Iter_cat(_First)));
; 2328 : 	}
; 2329 : 
; 2330 : template<class _InIt,
; 2331 : 	class _Diff,
; 2332 : 	class _OutIt> inline
; 2333 : 	_OutIt copy_n(_InIt _First, _Diff _Count,
; 2334 : 		_OutIt _Dest)
; 2335 : 	{	// copy [_First, _First + _Count) to [_Dest, ...)
; 2336 : 	_DEBUG_POINTER(_First);
; 2337 : 	_DEBUG_POINTER(_Dest);
; 2338 : 	if (_Count <= 0)
; 2339 : 		return (_Dest);
; 2340 : 	else
; 2341 : 		return (_Copy_n(_First, _Count,
; 2342 : 			_Dest, _Is_checked(_Dest)));
; 2343 : 	}
; 2344 : 
; 2345 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2346 : template<class _InTy,
; 2347 : 	size_t _InSize,
; 2348 : 	class _Diff,
; 2349 : 	class _OutIt> inline
; 2350 : 	_OutIt copy_n(_InTy (&_First)[_InSize], _Diff _Count,
; 2351 : 		_OutIt _Dest)
; 2352 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), array input
; 2353 : 	return (_STD copy_n(_Array_iterator<_InTy, _InSize>(_First), _Count,
; 2354 : 		_Dest));
; 2355 : 	}
; 2356 : 
; 2357 : template<class _InIt,
; 2358 : 	class _Diff,
; 2359 : 	class _OutTy,
; 2360 : 	size_t _OutSize> inline
; 2361 : 	_OutTy *copy_n(_InIt _First, _Diff _Count,
; 2362 : 		_OutTy (&_Dest)[_OutSize])
; 2363 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), array dest
; 2364 : 	return (_Unchecked(
; 2365 : 		_STD copy_n(_First, _Count,
; 2366 : 			_Array_iterator<_OutTy, _OutSize>(_Dest))));
; 2367 : 	}
; 2368 : 
; 2369 : template<class _InTy,
; 2370 : 	size_t _InSize,
; 2371 : 	class _Diff,
; 2372 : 	class _OutTy,
; 2373 : 	size_t _OutSize> inline
; 2374 : 	_OutTy *copy_n(_InTy (&_First)[_InSize], _Diff _Count,
; 2375 : 		_OutTy (&_Dest)[_OutSize])
; 2376 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), array input/dest
; 2377 : 	return (_Unchecked(
; 2378 : 		_STD copy_n(_Array_iterator<_InTy, _InSize>(_First), _Count,
; 2379 : 			_Array_iterator<_OutTy, _OutSize>(_Dest))));
; 2380 : 	}
; 2381 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2382 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2383 :  #endif /* _HAS_CPP0X */
; 2384 : 
; 2385 : 		// TEMPLATE FUNCTION copy_backward
; 2386 : template<class _BidIt1,
; 2387 : 	class _BidIt2> inline
; 2388 : 	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2389 : 		_BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
; 2390 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators
; 2391 : 	while (_First != _Last)
; 2392 : 		*--_Dest = *--_Last;
; 2393 : 	return (_Dest);
; 2394 : 	}
; 2395 : 
; 2396 : template<class _InIt,
; 2397 : 	class _OutIt> inline
; 2398 : 	_OutIt _Copy_backward(_InIt _First, _InIt _Last,
; 2399 : 		_OutIt _Dest, _Scalar_ptr_iterator_tag)
; 2400 : 	{	// copy [_First, _Last) backwards to [..., _Dest), pointers to scalars
; 2401 : 	ptrdiff_t _Count = _Last - _First;
; 2402 : 	_CSTD memmove(&*_Dest - _Count, &*_First,
; 2403 : 		_Count * sizeof (*_First));
; 2404 : 	return (_Dest - _Count);
; 2405 : 	}
; 2406 : 
; 2407 : template<class _BidIt1,
; 2408 : 	class _BidIt2> inline
; 2409 : 	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2410 : 		_BidIt2 _Dest)
; 2411 : 	{	// copy [_First, _Last) backwards to [..., _Dest), unchecked
; 2412 : 	return (_Copy_backward(_First, _Last,
; 2413 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2414 : 	}
; 2415 : 
; 2416 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2417 : template<class _BidIt1,
; 2418 : 	class _BidIt2> inline
; 2419 : 	_BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2420 : 		_BidIt2 _Dest)
; 2421 : 	{	// copy [_First, _Last) backwards to [..., _Dest)
; 2422 : 	return (_Rechecked(_Dest,
; 2423 : 		_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
; 2424 : 			_Unchecked(_Dest))));
; 2425 : 	}
; 2426 : 
; 2427 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2428 : template<class _BidIt1,
; 2429 : 	class _BidIt2> inline
; 2430 : 	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2431 : 		_BidIt2 _Dest, true_type)
; 2432 : 	{	// copy [_First, _Last) backwards to [..., _Dest), checked dest
; 2433 : 	return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
; 2434 : 		_Dest));
; 2435 : 	}
; 2436 : 
; 2437 : template<class _BidIt1,
; 2438 : 	class _BidIt2> inline
; 2439 : _SCL_INSECURE_DEPRECATE
; 2440 : 	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2441 : 		_BidIt2 _Dest, false_type)
; 2442 : 	{	// copy [_First, _Last) backwards to [..., _Dest), unchecked dest
; 2443 : 	return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
; 2444 : 		_Dest));
; 2445 : 	}
; 2446 : 
; 2447 : template<class _BidIt1,
; 2448 : 	class _BidIt2> inline
; 2449 : 	_BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2450 : 		_BidIt2 _Dest)
; 2451 : 	{	// copy [_First, _Last) backwards to [..., _Dest)
; 2452 : 	_DEBUG_RANGE(_First, _Last);
; 2453 : 	_DEBUG_POINTER(_Dest);
; 2454 : 	return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
; 2455 : 		_Dest, _Is_checked(_Dest)));
; 2456 : 	}
; 2457 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2458 : 
; 2459 : 		// TEMPLATE FUNCTION move
; 2460 : template<class _InIt,
; 2461 : 	class _OutIt> inline
; 2462 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2463 : 		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
; 2464 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators
; 2465 : 	for (; _First != _Last; ++_Dest, ++_First)
; 2466 : 		*_Dest = _STD move(*_First);
; 2467 : 	return (_Dest);
; 2468 : 	}
; 2469 : 
; 2470 : template<class _InIt,
; 2471 : 	class _OutIt> inline
; 2472 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2473 : 		_OutIt _Dest, _Scalar_ptr_iterator_tag)
; 2474 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars
; 2475 : 	ptrdiff_t _Count = _Last - _First;
; 2476 : 	_CSTD memmove(&*_Dest, &*_First,
; 2477 : 		_Count * sizeof (*_First));
; 2478 : 	return (_Dest + _Count);
; 2479 : 	}
; 2480 : 
; 2481 : template<class _InIt,
; 2482 : 	class _OutIt> inline
; 2483 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2484 : 		_OutIt _Dest)
; 2485 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked
; 2486 : 	return (_Move(_First, _Last,
; 2487 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2488 : 	}
; 2489 : 
; 2490 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2491 : template<class _InIt,
; 2492 : 	class _OutIt> inline
; 2493 : 	_OutIt move(_InIt _First, _InIt _Last,
; 2494 : 		_OutIt _Dest)
; 2495 : 	{	// move [_First, _Last) to [_Dest, ...)
; 2496 : 	return (_Rechecked(_Dest,
; 2497 : 		_Move(_Unchecked(_First), _Unchecked(_Last),
; 2498 : 			_Unchecked(_Dest))));
; 2499 : 	}
; 2500 : 
; 2501 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2502 : template<class _InIt,
; 2503 : 	class _OutIt> inline
; 2504 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2505 : 		_OutIt _Dest, input_iterator_tag, output_iterator_tag)
; 2506 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators
; 2507 : 	return (_Move(_First, _Last,
; 2508 : 		_Dest));
; 2509 : 	}
; 2510 : 
; 2511 : template<class _InIt,
; 2512 : 	class _OutIt> inline
; 2513 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2514 : 		_OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
; 2515 : 	{	// move [_First, _Last) to [_Dest, ...), random-access iterators
; 2516 : 	_OutIt _Ans = _Dest + (_Last - _First);	// also checks range
; 2517 : 	_Move(_First, _Last,
; 2518 : 		_Unchecked(_Dest));
; 2519 : 	return (_Ans);
; 2520 : 	}
; 2521 : 
; 2522 : template<class _InIt,
; 2523 : 	class _OutIt> inline
; 2524 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2525 : 		_OutIt _Dest, true_type)
; 2526 : 	{	// move [_First, _Last) to [_Dest, ...), checked dest
; 2527 : 	return (_Move(_First, _Last,
; 2528 : 		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
; 2529 : 	}
; 2530 : 
; 2531 : template<class _InIt,
; 2532 : 	class _OutIt> inline
; 2533 : _SCL_INSECURE_DEPRECATE
; 2534 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2535 : 		_OutIt _Dest, false_type)
; 2536 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked dest
; 2537 : 	return (_Move(_First, _Last,
; 2538 : 		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
; 2539 : 	}
; 2540 : 
; 2541 : template<class _InIt,
; 2542 : 	class _OutIt> inline
; 2543 : 	_OutIt move(_InIt _First, _InIt _Last,
; 2544 : 		_OutIt _Dest)
; 2545 : 	{	// move [_First, _Last) to [_Dest, ...)
; 2546 : 	_DEBUG_RANGE(_First, _Last);
; 2547 : 	_DEBUG_POINTER(_Dest);
; 2548 : 	return (_Move(_Unchecked(_First), _Unchecked(_Last),
; 2549 : 		_Dest, _Is_checked(_Dest)));
; 2550 : 	}
; 2551 : 
; 2552 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2553 : template<class _InIt,
; 2554 : 	class _OutTy,
; 2555 : 	size_t _OutSize> inline
; 2556 : 	_OutTy *move(_InIt _First, _InIt _Last,
; 2557 : 		_OutTy (&_Dest)[_OutSize])
; 2558 : 	{	// move [_First, _Last) to [_Dest, ...)
; 2559 : 	return (_Unchecked(
; 2560 : 		_STD move(_First, _Last,
; 2561 : 			_Array_iterator<_OutTy, _OutSize>(_Dest))));
; 2562 : 	}
; 2563 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2564 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2565 : 
; 2566 : 		// TEMPLATE FUNCTION move_backward
; 2567 : template<class _BidIt1,
; 2568 : 	class _BidIt2> inline
; 2569 : 	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2570 : 		_BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
; 2571 : 	{	// move [_First, _Last) backwards to [..., _Dest), arbitrary iterators
; 2572 : 	while (_First != _Last)
; 2573 : 		*--_Dest = _STD move(*--_Last);
; 2574 : 	return (_Dest);
; 2575 : 	}
; 2576 : 
; 2577 : template<class _InIt,
; 2578 : 	class _OutIt> inline
; 2579 : 	_OutIt _Move_backward(_InIt _First, _InIt _Last,
; 2580 : 		_OutIt _Dest, _Scalar_ptr_iterator_tag)
; 2581 : 	{	// move [_First, _Last) backwards to [..., _Dest), pointers to scalars
; 2582 : 	ptrdiff_t _Count = _Last - _First;
; 2583 : 	_CSTD memmove(&*_Dest - _Count, &*_First,
; 2584 : 		_Count * sizeof (*_First));
; 2585 : 	return (_Dest - _Count);
; 2586 : 	}
; 2587 : 
; 2588 : template<class _BidIt1,
; 2589 : 	class _BidIt2> inline
; 2590 : 	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2591 : 		_BidIt2 _Dest)
; 2592 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked
; 2593 : 	return (_Move_backward(_First, _Last,
; 2594 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2595 : 	}
; 2596 : 
; 2597 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2598 : template<class _BidIt1,
; 2599 : 	class _BidIt2> inline
; 2600 : 	_BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2601 : 		_BidIt2 _Dest)
; 2602 : 	{	// move [_First, _Last) backwards to [..., _Dest)
; 2603 : 	return (_Rechecked(_Dest,
; 2604 : 		_Move_backward(_Unchecked(_First), _Unchecked(_Last),
; 2605 : 			_Unchecked(_Dest))));
; 2606 : 	}
; 2607 : 
; 2608 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2609 : template<class _BidIt1,
; 2610 : 	class _BidIt2> inline
; 2611 : 	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2612 : 		_BidIt2 _Dest, true_type)
; 2613 : 	{	// move [_First, _Last) backwards to [..., _Dest), checked dest
; 2614 : 	return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
; 2615 : 		_Dest));
; 2616 : 	}
; 2617 : 
; 2618 : template<class _BidIt1,
; 2619 : 	class _BidIt2> inline
; 2620 : _SCL_INSECURE_DEPRECATE
; 2621 : 	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2622 : 		_BidIt2 _Dest, false_type)
; 2623 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked dest
; 2624 : 	return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
; 2625 : 		_Dest));
; 2626 : 	}
; 2627 : 
; 2628 : template<class _BidIt1,
; 2629 : 	class _BidIt2> inline
; 2630 : 	_BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2631 : 		_BidIt2 _Dest)
; 2632 : 	{	// move [_First, _Last) backwards to [..., _Dest)
; 2633 : 	_DEBUG_RANGE(_First, _Last);
; 2634 : 	_DEBUG_POINTER(_Dest);
; 2635 : 	return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
; 2636 : 		_Dest, _Is_checked(_Dest)));
; 2637 : 	}
; 2638 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2639 : 
; 2640 : 		// TEMPLATE FUNCTION fill
; 2641 : template<class _FwdIt,
; 2642 : 	class _Ty> inline
; 2643 : 	void _Fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
; 2644 : 	{	// copy _Val through [_First, _Last)
; 2645 : 	for (; _First != _Last; ++_First)
; 2646 : 		*_First = _Val;
; 2647 : 	}
; 2648 : 
; 2649 : inline void _Fill(char *_First, char *_Last, char _Val)
; 2650 : 	{	// copy char _Val through [_First, _Last)
; 2651 : 	_CSTD memset(_First, _Val, _Last - _First);
; 2652 : 	}
; 2653 : 
; 2654 : inline void _Fill(signed char *_First, signed char *_Last, signed char _Val)
; 2655 : 	{	// copy signed char _Val through [_First, _Last)
; 2656 : 	_CSTD memset(_First, _Val, _Last - _First);
; 2657 : 	}
; 2658 : 
; 2659 : inline void _Fill(unsigned char *_First, unsigned char *_Last, unsigned char _Val)
; 2660 : 	{	// copy unsigned char _Val through [_First, _Last)
; 2661 : 	_CSTD memset(_First, _Val, _Last - _First);
; 2662 : 	}
; 2663 : 
; 2664 : template<class _FwdIt,
; 2665 : 	class _Ty> inline
; 2666 : 	void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
; 2667 : 	{	// copy _Val through [_First, _Last)
; 2668 : 	_DEBUG_RANGE(_First, _Last);
; 2669 : 	_Fill(_Unchecked(_First), _Unchecked(_Last), _Val);
; 2670 : 	}
; 2671 : 
; 2672 : 		// TEMPLATE FUNCTION fill_n
; 2673 : template<class _OutIt,
; 2674 : 	class _Diff,
; 2675 : 	class _Ty> inline
; 2676 : 	_OutIt _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
; 2677 : 	{	// copy _Val _Count times through [_Dest, ...)
; 2678 : 	for (; 0 < _Count; --_Count, ++_Dest)
; 2679 : 		*_Dest = _Val;
; 2680 : 	return (_Dest);
; 2681 : 	}
; 2682 : 
; 2683 : inline char *_Fill_n(char *_Dest, size_t _Count, char _Val)
; 2684 : 	{	// copy char _Val _Count times through [_Dest, ...)
; 2685 : 	_CSTD memset(_Dest, _Val, _Count);
; 2686 : 	return (_Dest + _Count);
; 2687 : 	}
; 2688 : 
; 2689 : inline signed char *_Fill_n(signed char *_Dest, size_t _Count,
; 2690 : 	signed char _Val)
; 2691 : 	{	// copy signed char _Val _Count times through [_Dest, ...)
; 2692 : 	_CSTD memset(_Dest, _Val, _Count);
; 2693 : 	return (_Dest + _Count);
; 2694 : 	}
; 2695 : 
; 2696 : inline unsigned char *_Fill_n(unsigned char *_Dest, size_t _Count,
; 2697 : 	unsigned char _Val)
; 2698 : 	{	// copy unsigned char _Val _Count times through [_Dest, ...)
; 2699 : 	_CSTD memset(_Dest, _Val, _Count);
; 2700 : 	return (_Dest + _Count);
; 2701 : 	}
; 2702 : 
; 2703 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2704 : template<class _OutIt,
; 2705 : 	class _Diff,
; 2706 : 	class _Ty> inline
; 2707 : 	_OutIt fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
; 2708 : 	{	// copy _Val _Count times through [_Dest, ...)
; 2709 : 	return (_Rechecked(_Dest, _Fill_n(_Unchecked(_Dest), _Count, _Val)));
; 2710 : 	}
; 2711 : 
; 2712 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2713 : template<class _OutIt,
; 2714 : 	class _Diff,
; 2715 : 	class _Ty> inline
; 2716 : 	_OutIt _Fill_n1(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
; 2717 : 		output_iterator_tag)
; 2718 : 	{	// copy _Val _Count times through [_Dest, ...), arbitrary iterator
; 2719 : 	return (_Fill_n(_Dest, _Count, _Val));
; 2720 : 	}
; 2721 : 
; 2722 : template<class _OutIt,
; 2723 : 	class _Diff,
; 2724 : 	class _Ty> inline
; 2725 : 	_OutIt _Fill_n1(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
; 2726 : 		random_access_iterator_tag)
; 2727 : 	{	// copy _Val _Count times through [_Dest, ...), random-access iterator
; 2728 : 	_OutIt _Ans = _Dest + _Count;	// also checks range
; 2729 : 	_Fill_n(_Unchecked(_Dest), _Count, _Val);
; 2730 : 	return (_Ans);
; 2731 : 	}
; 2732 : 
; 2733 : template<class _OutIt,
; 2734 : 	class _Diff,
; 2735 : 	class _Ty> inline
; 2736 : 	_OutIt _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
; 2737 : 		true_type)
; 2738 : 	{	// copy _Val _Count times through [_Dest, ...), checked dest
; 2739 : 	return (_Fill_n1(_Dest, _Count, _Val,
; 2740 : 		_Iter_cat(_Dest)));
; 2741 : 	}
; 2742 : 
; 2743 : template<class _OutIt,
; 2744 : 	class _Diff,
; 2745 : 	class _Ty> inline
; 2746 : _SCL_INSECURE_DEPRECATE
; 2747 : 	_OutIt _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
; 2748 : 		false_type)
; 2749 : 	{	// copy _Val _Count times through [_Dest, ...), unchecked dest
; 2750 : 	return (_Fill_n1(_Dest, _Count, _Val,
; 2751 : 		_Iter_cat(_Dest)));
; 2752 : 	}
; 2753 : 
; 2754 : template<class _OutIt,
; 2755 : 	class _Diff,
; 2756 : 	class _Ty> inline
; 2757 : 	_OutIt fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
; 2758 : 	{	// copy _Val _Count times through [_Dest, ...)
; 2759 : 	_DEBUG_POINTER(_Dest);
; 2760 : 	return (_Fill_n(_Dest, _Count, _Val,
; 2761 : 		_Is_checked(_Dest)));
; 2762 : 	}
; 2763 : 
; 2764 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2765 : template<class _OutTy,
; 2766 : 	size_t _OutSize,
; 2767 : 	class _Diff,
; 2768 : 	class _Ty> inline
; 2769 : 	_OutTy *fill_n(_OutTy (&_Dest)[_OutSize], _Diff _Count, const _Ty& _Val)
; 2770 : 	{	// copy _Val _Count times through [_Dest, ...)
; 2771 : 	return (_Unchecked(_STD fill_n(_Array_iterator<_OutTy, _OutSize>(_Dest),
; 2772 : 		_Count, _Val)));
; 2773 : 	}
; 2774 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2775 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2776 : 
; 2777 : 		// TEMPLATE FUNCTION mismatch
; 2778 : template<class _InIt1,
; 2779 : 	class _InIt2> inline
; 2780 : 	pair<_InIt1, _InIt2>
; 2781 : 		_Mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2782 : 			_InIt2 _First2)
; 2783 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch
; 2784 : 	for (; _First1 != _Last1 && *_First1 == *_First2; )
; 2785 : 		++_First1, ++_First2;
; 2786 : 	return (pair<_InIt1, _InIt2>(_First1, _First2));
; 2787 : 	}
; 2788 : 
; 2789 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2790 : template<class _InIt1,
; 2791 : 	class _InIt2> inline
; 2792 : 	pair<_InIt1, _InIt2>
; 2793 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2794 : 			_InIt2 _First2)
; 2795 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch
; 2796 : 	pair<_UNCHECKED_TYPE(_InIt1), _InIt2> _Ans(
; 2797 : 		_Mismatch(_Unchecked(_First1), _Unchecked(_Last1),
; 2798 : 			_First2));
; 2799 : 	return (pair<_InIt1, _InIt2>(
; 2800 : 		_Rechecked(_First1, _Ans.first),
; 2801 : 		_Ans.second));
; 2802 : 	}
; 2803 : 
; 2804 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2805 : template<class _InIt1,
; 2806 : 	class _InIt2> inline
; 2807 : 	pair<_InIt1, _InIt2>
; 2808 : 		_Mismatch1(_InIt1 _First1, _InIt1 _Last1,
; 2809 : 			_InIt2 _First2, true_type)
; 2810 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch, checked input
; 2811 : 	return (_Mismatch(_First1, _Last1,
; 2812 : 		_First2));
; 2813 : 	}
; 2814 : 
; 2815 : template<class _InIt1,
; 2816 : 	class _InIt2> inline
; 2817 : _SCL_INSECURE_DEPRECATE
; 2818 : 	pair<_InIt1, _InIt2>
; 2819 : 		_Mismatch1(_InIt1 _First1, _InIt1 _Last1,
; 2820 : 			_InIt2 _First2, false_type)
; 2821 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch, unchecked input
; 2822 : 	return (_Mismatch(_First1, _Last1,
; 2823 : 		_First2));
; 2824 : 	}
; 2825 : 
; 2826 : template<class _InIt1,
; 2827 : 	class _InIt2> inline
; 2828 : 	pair<_InIt1, _InIt2>
; 2829 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2830 : 			_InIt2 _First2)
; 2831 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch
; 2832 : 	_DEBUG_RANGE(_First1, _Last1);
; 2833 : 	_DEBUG_POINTER(_First2);
; 2834 : 	pair<_UNCHECKED_TYPE(_InIt1), _InIt2> _Ans(
; 2835 : 		_Mismatch1(_Unchecked(_First1), _Unchecked(_Last1),
; 2836 : 			_First2, _Is_checked(_First2)));
; 2837 : 	return (pair<_InIt1, _InIt2>(
; 2838 : 		_Rechecked(_First1, _Ans.first),
; 2839 : 		_Ans.second));
; 2840 : 	}
; 2841 : 
; 2842 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2843 : template<class _InIt1,
; 2844 : 	class _InTy,
; 2845 : 	size_t _InSize> inline
; 2846 : 	pair<_InIt1, _InTy *>
; 2847 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2848 : 			_InTy (&_First2)[_InSize])
; 2849 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch, array input
; 2850 : 	pair<_InIt1, _Array_iterator<_InTy, _InSize> > _Ans(
; 2851 : 		_STD mismatch(_First1, _Last1,
; 2852 : 			_Array_iterator<_InTy, _InSize>(_First2)));
; 2853 : 	return (pair<_InIt1, _InTy *>(
; 2854 : 		_Ans.first,
; 2855 : 		_Unchecked(_Ans.second)));
; 2856 : 	}
; 2857 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2858 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2859 : 
; 2860 : 		// TEMPLATE FUNCTION mismatch WITH PRED
; 2861 : template<class _InIt1,
; 2862 : 	class _InIt2,
; 2863 : 	class _Pr> inline
; 2864 : 	pair<_InIt1, _InIt2>
; 2865 : 		_Mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2866 : 			_InIt2 _First2, _Pr _Pred)
; 2867 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch using _Pred
; 2868 : 	for (; _First1 != _Last1 && _Pred(*_First1, *_First2); )
; 2869 : 		++_First1, ++_First2;
; 2870 : 	return (pair<_InIt1, _InIt2>(_First1, _First2));
; 2871 : 	}
; 2872 : 
; 2873 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2874 : template<class _InIt1,
; 2875 : 	class _InIt2,
; 2876 : 	class _Pr> inline
; 2877 : 	pair<_InIt1, _InIt2>
; 2878 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2879 : 			_InIt2 _First2, _Pr _Pred)
; 2880 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch using _Pred
; 2881 : 	pair<_UNCHECKED_TYPE(_InIt1), _InIt2> _Ans(
; 2882 : 		_Mismatch(_Unchecked(_First1), _Unchecked(_Last1),
; 2883 : 			_First2, _Pred));
; 2884 : 	return (pair<_InIt1, _InIt2>(
; 2885 : 		_Rechecked(_First1, _Ans.first),
; 2886 : 		_Ans.second));
; 2887 : 	}
; 2888 : 
; 2889 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2890 : template<class _InIt1,
; 2891 : 	class _InIt2,
; 2892 : 	class _Pr> inline
; 2893 : 	pair<_InIt1, _InIt2>
; 2894 : 		_Mismatch2(_InIt1 _First1, _InIt1 _Last1,
; 2895 : 			_InIt2 _First2, _Pr _Pred, true_type)
; 2896 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch, checked input
; 2897 : 	return (_Mismatch(_First1, _Last1,
; 2898 : 		_First2, _Pred));
; 2899 : 	}
; 2900 : 
; 2901 : template<class _InIt1,
; 2902 : 	class _InIt2,
; 2903 : 	class _Pr> inline
; 2904 : _SCL_INSECURE_DEPRECATE
; 2905 : 	pair<_InIt1, _InIt2>
; 2906 : 		_Mismatch2(_InIt1 _First1, _InIt1 _Last1,
; 2907 : 			_InIt2 _First2, _Pr _Pred, false_type)
; 2908 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch, unchecked input
; 2909 : 	return (_Mismatch(_First1, _Last1,
; 2910 : 		_First2, _Pred));
; 2911 : 	}
; 2912 : 
; 2913 : template<class _InIt1,
; 2914 : 	class _InIt2,
; 2915 : 	class _Pr> inline
; 2916 : 	pair<_InIt1, _InIt2>
; 2917 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2918 : 			_InIt2 _First2, _Pr _Pred)
; 2919 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch using _Pred
; 2920 : 	_DEBUG_RANGE(_First1, _Last1);
; 2921 : 	_DEBUG_POINTER(_First2);
; 2922 : 	_DEBUG_POINTER(_Pred);
; 2923 : 	pair<_UNCHECKED_TYPE(_InIt1), _InIt2> _Ans(
; 2924 : 		_Mismatch2(_Unchecked(_First1), _Unchecked(_Last1),
; 2925 : 			_First2, _Pred, _Is_checked(_First2)));
; 2926 : 	return (pair<_InIt1, _InIt2>(
; 2927 : 		_Rechecked(_First1, _Ans.first),
; 2928 : 		_Ans.second));
; 2929 : 	}
; 2930 : 
; 2931 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2932 : template<class _InIt1,
; 2933 : 	class _InTy,
; 2934 : 	size_t _InSize,
; 2935 : 	class _Pr> inline
; 2936 : 	pair<_InIt1, _InTy *>
; 2937 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2938 : 			_InTy (&_First2)[_InSize], _Pr _Pred)
; 2939 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch using _Pred
; 2940 : 	pair<_InIt1, _Array_iterator<_InTy, _InSize> > _Ans(
; 2941 : 		_STD mismatch(_First1, _Last1,
; 2942 : 			_Array_iterator<_InTy, _InSize>(_First2), _Pred));
; 2943 : 	return (pair<_InIt1, _InTy *>(
; 2944 : 		_Ans.first,
; 2945 : 		_Unchecked(_Ans.second)));
; 2946 : 	}
; 2947 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2948 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2949 : 
; 2950 : 		// TEMPLATE FUNCTION equal
; 2951 : template<class _InIt1,
; 2952 : 	class _InIt2> inline
; 2953 : 	bool _Equal(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2)
; 2954 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 2955 : 	for (; _First1 != _Last1; ++_First1, ++_First2)
; 2956 : 		if (!(*_First1 == *_First2))
; 2957 : 			return (false);
; 2958 : 	return (true);
; 2959 : 	}
; 2960 : 
; 2961 : inline bool _Equal(const char *_First1, const char *_Last1,
; 2962 : 	const char *_First2)
; 2963 : 	{	// compare [_First1, _Last1) to [First2, ...), for chars
; 2964 : 	return (_CSTD memcmp(_First1, _First2, _Last1 - _First1) == 0);
; 2965 : 	}
; 2966 : 
; 2967 : inline bool _Equal(const signed char *_First1, const signed char *_Last1,
; 2968 : 	const signed char *_First2)
; 2969 : 	{	// compare [_First1, _Last1) to [First2, ...), for signed chars
; 2970 : 	return (_CSTD memcmp(_First1, _First2, _Last1 - _First1) == 0);
; 2971 : 	}
; 2972 : 
; 2973 : inline bool _Equal(const unsigned char *_First1, const unsigned char *_Last1,
; 2974 : 	const unsigned char *_First2)
; 2975 : 	{	// compare [_First1, _Last1) to [First2, ...), for unsigned chars
; 2976 : 	return (_CSTD memcmp(_First1, _First2, _Last1 - _First1) == 0);
; 2977 : 	}
; 2978 : 
; 2979 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2980 : template<class _InIt1,
; 2981 : 	class _InIt2> inline
; 2982 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 2983 : 		_InIt2 _First2)
; 2984 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 2985 : 	return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
; 2986 : 		_Unchecked(_First2)));
; 2987 : 	}
; 2988 : 
; 2989 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2990 : template<class _InIt1,
; 2991 : 	class _InIt2> inline
; 2992 : 	bool _Equal1(_InIt1 _First1, _InIt1 _Last1,
; 2993 : 		_InIt2 _First2, true_type)
; 2994 : 	{	// compare [_First1, _Last1) to [First2, ...), checked dest
; 2995 : 	return (_Equal(_First1, _Last1,
; 2996 : 		_First2));
; 2997 : 	}
; 2998 : 
; 2999 : template<class _InIt1,
; 3000 : 	class _InIt2> inline
; 3001 : _SCL_INSECURE_DEPRECATE
; 3002 : 	bool _Equal1(_InIt1 _First1, _InIt1 _Last1,
; 3003 : 		_InIt2 _First2, false_type)
; 3004 : 	{	// compare [_First1, _Last1) to [First2, ...), unchecked dest
; 3005 : 	return (_Equal(_First1, _Last1,
; 3006 : 		_First2));
; 3007 : 	}
; 3008 : 
; 3009 : template<class _InIt1,
; 3010 : 	class _InIt2> inline
; 3011 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 3012 : 		_InIt2 _First2)
; 3013 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 3014 : 	_DEBUG_RANGE(_First1, _Last1);
; 3015 : 	_DEBUG_POINTER(_First2);
; 3016 : 	return (_Equal1(_Unchecked(_First1), _Unchecked(_Last1),
; 3017 : 		_First2, _Is_checked(_First2)));
; 3018 : 	}
; 3019 : 
; 3020 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 3021 : template<class _InIt1,
; 3022 : 	class _InTy,
; 3023 : 	size_t _InSize> inline
; 3024 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 3025 : 		_InTy (&_First2)[_InSize])
; 3026 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 3027 : 	return (_STD equal(_First1, _Last1,
; 3028 : 		_Array_iterator<_InTy, _InSize>(_First2)));
; 3029 : 	}
; 3030 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 3031 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 3032 : 
; 3033 : 		// TEMPLATE FUNCTION equal WITH PRED
; 3034 : template<class _InIt1,
; 3035 : 	class _InIt2,
; 3036 : 	class _Pr> inline
; 3037 : 	bool _Equal(_InIt1 _First1, _InIt1 _Last1,
; 3038 : 		_InIt2 _First2, _Pr _Pred)
; 3039 : 	{	// compare [_First1, _Last1) to [First2, ...) using _Pred
; 3040 : 	for (; _First1 != _Last1; ++_First1, ++_First2)
; 3041 : 		if (!_Pred(*_First1, *_First2))
; 3042 : 			return (false);
; 3043 : 	return (true);
; 3044 : 	}
; 3045 : 
; 3046 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 3047 : template<class _InIt1,
; 3048 : 	class _InIt2,
; 3049 : 	class _Pr> inline
; 3050 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 3051 : 		_InIt2 _First2, _Pr _Pred)
; 3052 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 3053 : 	return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
; 3054 : 		_Unchecked(_First2), _Pred));
; 3055 : 	}
; 3056 : 
; 3057 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 3058 : template<class _InIt1,
; 3059 : 	class _InIt2,
; 3060 : 	class _Pr> inline
; 3061 : 	bool _Equal2(_InIt1 _First1, _InIt1 _Last1,
; 3062 : 		_InIt2 _First2, _Pr _Pred, true_type)
; 3063 : 	{	// compare [_First1, _Last1) to [First2, ...), checked input
; 3064 : 	return (_Equal(_First1, _Last1,
; 3065 : 		_First2, _Pred));
; 3066 : 	}
; 3067 : 
; 3068 : template<class _InIt1,
; 3069 : 	class _InIt2,
; 3070 : 	class _Pr> inline
; 3071 : _SCL_INSECURE_DEPRECATE
; 3072 : 	bool _Equal2(_InIt1 _First1, _InIt1 _Last1,
; 3073 : 		_InIt2 _First2, _Pr _Pred, false_type)
; 3074 : 	{	// compare [_First1, _Last1) to [First2, ...), unchecked input
; 3075 : 	return (_Equal(_First1, _Last1,
; 3076 : 		_First2, _Pred));
; 3077 : 	}
; 3078 : 
; 3079 : template<class _InIt1,
; 3080 : 	class _InIt2,
; 3081 : 	class _Pr> inline
; 3082 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 3083 : 		_InIt2 _First2, _Pr _Pred)
; 3084 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 3085 : 	_DEBUG_RANGE(_First1, _Last1);
; 3086 : 	_DEBUG_POINTER(_First2);
; 3087 : 	return (_Equal2(_Unchecked(_First1), _Unchecked(_Last1),
; 3088 : 		_First2, _Pred, _Is_checked(_First2)));
; 3089 : 	}
; 3090 : 
; 3091 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 3092 : template<class _InIt1,
; 3093 : 	class _InTy,
; 3094 : 	size_t _InSize,
; 3095 : 	class _Pr> inline
; 3096 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 3097 : 		_InTy (&_First2)[_InSize], _Pr _Pred)
; 3098 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 3099 : 	return (_STD equal(_First1, _Last1,
; 3100 : 		_Array_iterator<_InTy, _InSize>(_First2), _Pred));
; 3101 : 	}
; 3102 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 3103 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 3104 : 
; 3105 : 		// TEMPLATE FUNCTION lexicographical_compare
; 3106 : template<class _InIt1,
; 3107 : 	class _InIt2> inline
; 3108 : 	bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
; 3109 : 		_InIt2 _First2, _InIt2 _Last2)
; 3110 : 	{	// order [_First1, _Last1) vs. [First2, Last2)
; 3111 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
; 3112 : 		if (_DEBUG_LT(*_First1, *_First2))
; 3113 : 			return (true);
; 3114 : 		else if (*_First2 < *_First1)
; 3115 : 			return (false);
; 3116 : 	return (_First1 == _Last1 && _First2 != _Last2);
; 3117 : 	}
; 3118 : 
; 3119 : inline bool _Lexicographical_compare(
; 3120 : 	const unsigned char *_First1, const unsigned char *_Last1,
; 3121 : 	const unsigned char *_First2, const unsigned char *_Last2)
; 3122 : 	{	// order [_First1, _Last1) vs. [First2, Last2), for unsigned char
; 3123 : 	ptrdiff_t _Num1 = _Last1 - _First1;
; 3124 : 	ptrdiff_t _Num2 = _Last2 - _First2;
; 3125 : 	int _Ans = _CSTD memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
; 3126 : 	return (_Ans < 0 || _Ans == 0 && _Num1 < _Num2);
; 3127 : 	}
; 3128 : 
; 3129 :  #if CHAR_MAX == UCHAR_MAX
; 3130 : inline bool _Lexicographical_compare(
; 3131 : 	const char *_First1, const char *_Last1,
; 3132 : 	const char *_First2, const char *_Last2)
; 3133 : 	{	// order [_First1, _Last1) vs. [First2, Last2), for nonnegative char
; 3134 : 	ptrdiff_t _Num1 = _Last1 - _First1;
; 3135 : 	ptrdiff_t _Num2 = _Last2 - _First2;
; 3136 : 	int _Ans = _CSTD memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
; 3137 : 	return (_Ans < 0 || _Ans == 0 && _Num1 < _Num2);
; 3138 : 	}
; 3139 :  #endif /* CHAR_MAX == UCHAR_MAX */
; 3140 : 
; 3141 : template<class _InIt1,
; 3142 : 	class _InIt2> inline
; 3143 : 	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
; 3144 : 		_InIt2 _First2, _InIt2 _Last2)
; 3145 : 	{	// order [_First1, _Last1) vs. [First2, Last2)
; 3146 : 	_DEBUG_RANGE(_First1, _Last1);
; 3147 : 	_DEBUG_RANGE(_First2, _Last2);
; 3148 : 	return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
; 3149 : 		_Unchecked(_First2), _Unchecked(_Last2)));
; 3150 : 	}
; 3151 : 
; 3152 : 		// TEMPLATE FUNCTION lexicographical_compare WITH PRED
; 3153 : template<class _InIt1,
; 3154 : 	class _InIt2,
; 3155 : 	class _Pr> inline
; 3156 : 	bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
; 3157 : 		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
; 3158 : 	{	// order [_First1, _Last1) vs. [First2, Last2) using _Pred
; 3159 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
; 3160 : 		if (_DEBUG_LT_PRED(_Pred, *_First1, *_First2))
; 3161 : 			return (true);
; 3162 : 		else if (_Pred(*_First2, *_First1))
; 3163 : 			return (false);
; 3164 : 	return (_First1 == _Last1 && _First2 != _Last2);
; 3165 : 	}
; 3166 : 
; 3167 : template<class _InIt1,
; 3168 : 	class _InIt2,
; 3169 : 	class _Pr> inline
; 3170 : 	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
; 3171 : 		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
; 3172 : 	{	// order [_First1, _Last1) vs. [First2, Last2) using _Pred
; 3173 : 	_DEBUG_RANGE(_First1, _Last1);
; 3174 : 	_DEBUG_RANGE(_First2, _Last2);
; 3175 : 	_DEBUG_POINTER(_Pred);
; 3176 : 	return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
; 3177 : 		_Unchecked(_First2), _Unchecked(_Last2), _Pred));
; 3178 : 	}
; 3179 : 
; 3180 : 		// TEMPLATE FUNCTION find
; 3181 : template<class _InIt,
; 3182 : 	class _Ty> inline
; 3183 : 	_InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val)
; 3184 : 	{	// find first matching _Val
; 3185 : 	for (; _First != _Last; ++_First)
; 3186 : 		if (*_First == _Val)
; 3187 : 			break;
; 3188 : 	return (_First);
; 3189 : 	}
; 3190 : 
; 3191 : inline const char *_Find(const char *_First, const char *_Last, int _Val)
; 3192 : 	{	// find first char that matches _Val
; 3193 : 	_First = (const char *)_CSTD memchr(_First, _Val, _Last - _First);
; 3194 : 	return (_First == 0 ? _Last : _First);
; 3195 : 	}
; 3196 : 
; 3197 : inline const signed char *_Find(const signed char *_First,
; 3198 : 	const signed char *_Last, int _Val)
; 3199 : 	{	// find first signed char that matches _Val
; 3200 : 	_First = (const signed char *)_CSTD memchr(_First, _Val,
; 3201 : 		_Last - _First);
; 3202 : 	return (_First == 0 ? _Last : _First);
; 3203 : 	}
; 3204 : 
; 3205 : inline const unsigned char *_Find(const unsigned char *_First,
; 3206 : 	const unsigned char *_Last, int _Val)
; 3207 : 	{	// find first unsigned char that matches _Val
; 3208 : 	_First = (const unsigned char *)_CSTD memchr(_First, _Val,
; 3209 : 		_Last - _First);
; 3210 : 	return (_First == 0 ? _Last : _First);
; 3211 : 	}
; 3212 : 
; 3213 : template<class _InIt,
; 3214 : 	class _Ty> inline
; 3215 : 	_InIt find(_InIt _First, _InIt _Last, const _Ty& _Val)
; 3216 : 	{	// find first matching _Val
; 3217 : 	_DEBUG_RANGE(_First, _Last);
; 3218 : 	return (_Rechecked(_First,
; 3219 : 		_Find(_Unchecked(_First), _Unchecked(_Last), _Val)));
; 3220 : 	}
; 3221 : 
; 3222 : 		// TEMPLATE FUNCTION _Find_pr WITH PREDICATE
; 3223 : template<class _InIt,
; 3224 : 	class _Ty,
; 3225 : 	class _Pr> inline
; 3226 : 	_InIt _Find_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
; 3227 : 	{	// find first matching _Val, using _Pred
; 3228 : 	for (; _First != _Last; ++_First)
; 3229 : 		if (_Pred(*_First, _Val))
; 3230 : 			break;
; 3231 : 	return (_First);
; 3232 : 	}
; 3233 : 
; 3234 : 		// TEMPLATE FUNCTION count
; 3235 : template<class _InIt,
; 3236 : 	class _Ty> inline
; 3237 : 	typename iterator_traits<_InIt>::difference_type
; 3238 : 		_Count_np(_InIt _First, _InIt _Last, const _Ty& _Val)
; 3239 : 	{	// count elements that match _Val
; 3240 : 	typename iterator_traits<_InIt>::difference_type _Count = 0;
; 3241 : 
; 3242 : 	for (; _First != _Last; ++_First)
; 3243 : 		if (*_First == _Val)
; 3244 : 			++_Count;
; 3245 : 	return (_Count);
; 3246 : 	}
; 3247 : 
; 3248 : template<class _InIt,
; 3249 : 	class _Ty> inline
; 3250 : 	typename iterator_traits<_InIt>::difference_type
; 3251 : 		count(_InIt _First, _InIt _Last, const _Ty& _Val)
; 3252 : 	{	// count elements that match _Val
; 3253 : 	_DEBUG_RANGE(_First, _Last);
; 3254 : 	return (_Count_np(_Unchecked(_First), _Unchecked(_Last), _Val));
; 3255 : 	}
; 3256 : 
; 3257 : 		// TEMPLATE FUNCTION _Count_pr WITH PREDICATE
; 3258 : template<class _InIt,
; 3259 : 	class _Ty,
; 3260 : 	class _Pr> inline
; 3261 : 	typename iterator_traits<_InIt>::difference_type
; 3262 : 		_Count_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
; 3263 : 	{	// count elements that match _Val, using _Pred
; 3264 : 	typename iterator_traits<_InIt>::difference_type _Count = 0;
; 3265 : 
; 3266 : 	for (; _First != _Last; ++_First)
; 3267 : 		if (_Pred(*_First, _Val))
; 3268 : 			++_Count;
; 3269 : 	return (_Count);
; 3270 : 	}
; 3271 : 
; 3272 :  #if _HAS_CPP0X
; 3273 : 		// TEMPLATE FUNCTION is_permutation
; 3274 : template<class _FwdIt1,
; 3275 : 	class _FwdIt2> inline
; 3276 : 	bool _Is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
; 3277 : 		_FwdIt2 _First2)
; 3278 : 	{	// test if [_First1, _Last1) == permuted [_First2, ...)
; 3279 : 	for (; _First1 != _Last1; ++_First1, ++_First2)
; 3280 : 		if (!(*_First1 == *_First2))
; 3281 : 			break;	// find first inequality
; 3282 : 	if (_First1 != _Last1)
; 3283 : 		{	// check match counts in suffix
; 3284 : 		_FwdIt2 _Last2 = _First2;
; 3285 : 		advance(_Last2, distance(_First1, _Last1));
; 3286 : 		for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
; 3287 : 			if (_Next1 == _Find(_First1, _Next1, *_Next1))
; 3288 : 				{	// new value, compare match counts
; 3289 : 				typename iterator_traits<_FwdIt2>::difference_type _Count =
; 3290 : 					_Count_np(_First2, _Last2, *_Next1);
; 3291 : 				if (_Count == 0
; 3292 : 					|| _Count != _Count_np(_Next1, _Last1, *_Next1))
; 3293 : 					return (false);	// match counts differ, fail
; 3294 : 				}
; 3295 : 		}
; 3296 : 	return (true);
; 3297 : 	}
; 3298 : 
; 3299 : template<class _FwdIt1,
; 3300 : 	class _FwdIt2> inline
; 3301 : 	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
; 3302 : 		_FwdIt2 _First2)
; 3303 : 	{	// test if [_First1, _Last1) == permuted [_First2, ...)
; 3304 : 	_DEBUG_RANGE(_First1, _Last1);
; 3305 : 	return _Is_permutation(_Unchecked(_First1), _Unchecked(_Last1),
; 3306 : 		_Unchecked(_First2));
; 3307 : 	}
; 3308 : 
; 3309 : 		// TEMPLATE FUNCTION is_permutation WITH PREDICATE
; 3310 : template<class _FwdIt1,
; 3311 : 	class _FwdIt2,
; 3312 : 	class _Pr> inline
; 3313 : 	bool _Is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
; 3314 : 		_FwdIt2 _First2, _Pr _Pred)
; 3315 : 	{	// test if [_First1, _First2) == permuted [_First2, ...), using _Pred
; 3316 : 	for (; _First1 != _Last1; ++_First1, ++_First2)
; 3317 : 		if (!_Pred(*_First1, *_First2))
; 3318 : 			break;	// find first inequality
; 3319 : 	if (_First1 != _Last1)
; 3320 : 		{	// check match counts in suffix
; 3321 : 		_FwdIt2 _Last2 = _First2;
; 3322 : 		advance(_Last2, distance(_First1, _Last1));
; 3323 : 		for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
; 3324 : 			if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred))
; 3325 : 				{	// new value, compare match counts
; 3326 : 				typename iterator_traits<_FwdIt2>::difference_type _Count =
; 3327 : 					_Count_pr(_First2, _Last2, *_Next1, _Pred);
; 3328 : 				if (_Count == 0
; 3329 : 					|| _Count != _Count_pr(_Next1, _Last1, *_Next1, _Pred))
; 3330 : 					return (false);	// match counts differ, fail
; 3331 : 				}
; 3332 : 		}
; 3333 : 	return (true);
; 3334 : 	}
; 3335 : 
; 3336 : template<class _FwdIt1,
; 3337 : 	class _FwdIt2,
; 3338 : 	class _Pr> inline
; 3339 : 	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
; 3340 : 		_FwdIt2 _First2, _Pr _Pred)
; 3341 : 	{	// test if [_First1, _First2) == permuted [_First2, ...), using _Pred
; 3342 : 	_DEBUG_RANGE(_First1, _Last1);
; 3343 : 	_DEBUG_POINTER(_Pred);
; 3344 : 	return _Is_permutation(_Unchecked(_First1), _Unchecked(_Last1),
; 3345 : 		_Unchecked(_First2), _Pred);
; 3346 : 	}
; 3347 :  #endif /* _HAS_CPP0X */
; 3348 : 
; 3349 : 		// TEMPLATE FUNCTION reverse
; 3350 : template<class _BidIt> inline
; 3351 : 	void _Reverse(_BidIt _First, _BidIt _Last, bidirectional_iterator_tag)
; 3352 : 	{	// reverse elements in [_First, _Last), bidirectional iterators
; 3353 : 	for (; _First != _Last && _First != --_Last; ++_First)
; 3354 : 		_STD iter_swap(_First, _Last);
; 3355 : 	}
; 3356 : 
; 3357 : template<class _BidIt> inline
; 3358 : 	void reverse(_BidIt _First, _BidIt _Last)
; 3359 : 	{	// reverse elements in [_First, _Last)
; 3360 : 	_DEBUG_RANGE(_First, _Last);
; 3361 : 	_Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 3362 : 	}
; 3363 : 
; 3364 : 		// TEMPLATE FUNCTION rotate
; 3365 : template<class _FwdIt> inline
; 3366 : 	void _Rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
; 3367 : 		forward_iterator_tag)
; 3368 : 	{	// rotate [_First, _Last), forward iterators
; 3369 : 	for (_FwdIt _Next = _Mid; ; )
; 3370 : 		{	// swap [_First, ...) into place
; 3371 : 		_STD iter_swap(_First, _Next);
; 3372 : 		if (++_First == _Mid)
; 3373 : 			if (++_Next == _Last)
; 3374 : 				break;	// done, quit
; 3375 : 			else
; 3376 : 				_Mid = _Next;	// mark end of next interval
; 3377 : 		else if (++_Next == _Last)
; 3378 : 			_Next = _Mid;	// wrap to last end
; 3379 : 		}
; 3380 : 	}
; 3381 : 
; 3382 : template<class _BidIt> inline
; 3383 : 	void _Rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,
; 3384 : 		bidirectional_iterator_tag)
; 3385 : 	{	// rotate [_First, _Last), bidirectional iterators
; 3386 : 	_STD reverse(_First, _Mid);
; 3387 : 	_STD reverse(_Mid, _Last);
; 3388 : 	_STD reverse(_First, _Last);
; 3389 : 	}
; 3390 : 
; 3391 : template<class _RanIt,
; 3392 : 	class _Diff,
; 3393 : 	class _Ty> inline
; 3394 : 	void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Diff *, _Ty *)
; 3395 : 	{	// rotate [_First, _Last), random-access iterators
; 3396 : 	_Diff _Shift = _Mid - _First;
; 3397 : 	_Diff _Count = _Last - _First;
; 3398 : 
; 3399 : 	for (_Diff _Factor = _Shift; _Factor != 0; )
; 3400 : 		{	// find subcycle count as GCD of shift count and length
; 3401 : 		_Diff _Tmp = _Count % _Factor;
; 3402 : 		_Count = _Factor;
; 3403 : 		_Factor = _Tmp;
; 3404 : 		}
; 3405 : 
; 3406 : 	if (_Count < _Last - _First)
; 3407 : 		for (; 0 < _Count; --_Count)
; 3408 : 			{	// rotate each subcycle
; 3409 : 			_RanIt _Hole = _First + _Count;
; 3410 : 			_RanIt _Next = _Hole;
; 3411 : 			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;
; 3412 : 			for (; ; )
; 3413 : 				{	// percolate elements back around subcycle
; 3414 : 				iter_swap(_Next, _Next1);
; 3415 : 				_Next = _Next1;
; 3416 : 				_Next1 = _Shift < _Last - _Next1 ? _Next1 + _Shift
; 3417 : 					: _First + (_Shift - (_Last - _Next1));
; 3418 : 				if (_Next1 == _Hole)
; 3419 : 					break;
; 3420 : 				}
; 3421 : 			}
; 3422 : 	}
; 3423 : 
; 3424 : template<class _RanIt> inline
; 3425 : 	void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last,
; 3426 : 		random_access_iterator_tag)
; 3427 : 	{	// rotate [_First, _Last), random-access iterators
; 3428 : 	_Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));

  00015	83 ec 08	 sub	 esp, 8
  00018	53		 push	 ebx
  00019	e8 00 00 00 00	 call	 ??$_Rotate@PAEHE@std@@YAXPAE00PAH0@Z ; std::_Rotate<unsigned char *,int,unsigned char>
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@rotate:

; 3437 : 		_Rotate(_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last),
; 3438 : 			_Iter_cat(_First));
; 3439 : 	_STD advance(_First, _STD distance(_Mid, _Last));
; 3440 : 	return (_First);

  00021	2b f7		 sub	 esi, edi
  00023	5f		 pop	 edi

; 755  : 	_Where += _Off;

  00024	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx

; 3441 : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$rotate@PAE@std@@YAPAEPAE00@Z ENDP			; std::rotate<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@EEE@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
___formal$dead$ = 16					; size = 4
___formal$ = 20						; size = 1
??$_Uninit_move@EEE@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<unsigned char,unsigned char,unsigned char>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 458  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f2		 mov	 esi, edx

; 459  : 	_DEBUG_RANGE(_First, _Last);
; 460  : 	_DEBUG_POINTER(_Dest);
; 461  : 	size_t _Count = (size_t)(_Last - _First);

  00006	2b f1		 sub	 esi, ecx

; 462  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 463  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00008	56		 push	 esi
  00009	51		 push	 ecx
  0000a	ff 75 08	 push	 DWORD PTR __Dest$[ebp]
  0000d	e8 00 00 00 00	 call	 _memmove
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	03 c6		 add	 eax, esi
  00017	5e		 pop	 esi

; 464  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Uninit_move@EEE@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<unsigned char,unsigned char,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Distance2@PAEI@std@@YAXPAE0AAIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Distance2@PAEI@std@@YAXPAE0AAIUrandom_access_iterator_tag@0@@Z PROC ; std::_Distance2<unsigned char *,unsigned int>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 806  : 	{	// add to _Off distance between random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 807  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 808  : 	if (_First != _Last)
; 809  : 		{	// check for null pointers
; 810  : 		_DEBUG_POINTER(_First);
; 811  : 		_DEBUG_POINTER(_Last);
; 812  : 		}
; 813  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 814  : 
; 815  : 	_Off += _Last - _First;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	2b d1		 sub	 edx, ecx
  00008	01 10		 add	 DWORD PTR [eax], edx

; 816  : 	}

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??$_Distance2@PAEI@std@@YAXPAE0AAIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Distance2<unsigned char *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_copy@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z PROC ; std::_Uninitialized_copy<unsigned char *,unsigned char *,std::_Wrap_alloc<std::allocator<unsigned char> > >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 414  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f2		 mov	 esi, edx

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00006	2b f1		 sub	 esi, ecx

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00008	56		 push	 esi
  00009	51		 push	 ecx
  0000a	ff 75 08	 push	 DWORD PTR __Dest$[ebp]
  0000d	e8 00 00 00 00	 call	 _memmove
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	03 c6		 add	 eax, esi
  00017	5e		 pop	 esi

; 415  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 416  : 		_Ptr_cat(_First, _Dest)));
; 417  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Uninitialized_copy@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z ENDP ; std::_Uninitialized_copy<unsigned char *,unsigned char *,std::_Wrap_alloc<std::allocator<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAE@std@@YAPAEPAE@Z
_TEXT	SEGMENT
??$_Unchecked@PAE@std@@YAPAEPAE@Z PROC			; std::_Unchecked<unsigned char *>, COMDAT
; __Src$ = ecx

; 276  : 	return (_Src);

  00000	8b c1		 mov	 eax, ecx

; 277  : 	}

  00002	c3		 ret	 0
??$_Unchecked@PAE@std@@YAPAEPAE@Z ENDP			; std::_Unchecked<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Rotate@PAE@std@@YAXPAE00Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__Last$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Rotate@PAE@std@@YAXPAE00Urandom_access_iterator_tag@0@@Z PROC ; std::_Rotate<unsigned char *>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 3427 : 	{	// rotate [_First, _Last), random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3428 : 	_Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));

  00003	83 ec 08	 sub	 esp, 8
  00006	ff 75 08	 push	 DWORD PTR __Last$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Rotate@PAEHE@std@@YAXPAE00PAH0@Z ; std::_Rotate<unsigned char *,int,unsigned char>
  0000e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3429 : 	}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Rotate@PAE@std@@YAXPAE00Urandom_access_iterator_tag@0@@Z ENDP ; std::_Rotate<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$distance@PAE@std@@YAHPAE0@Z
_TEXT	SEGMENT
??$distance@PAE@std@@YAHPAE0@Z PROC			; std::distance<unsigned char *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 815  : 	_Off += _Last - _First;

  00000	2b d1		 sub	 edx, ecx

; 822  : 	typename iterator_traits<_InIt>::difference_type _Off = 0;
; 823  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));
; 824  : 	return (_Off);

  00002	8b c2		 mov	 eax, edx

; 825  : 	}

  00004	c3		 ret	 0
??$distance@PAE@std@@YAHPAE0@Z ENDP			; std::distance<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$advance@PAEH@std@@YAXAAPAEH@Z
_TEXT	SEGMENT
??$advance@PAEH@std@@YAXAAPAEH@Z PROC			; std::advance<unsigned char *,int>, COMDAT
; __Where$ = ecx
; __Off$ = edx

; 755  : 	_Where += _Off;

  00000	01 11		 add	 DWORD PTR [ecx], edx

; 762  : 	_Advance(_Where, _Off, _Iter_cat(_Where));
; 763  : 	}

  00002	c3		 ret	 0
??$advance@PAEH@std@@YAXAAPAEH@Z ENDP			; std::advance<unsigned char *,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@EE@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
___formal$ = 16						; size = 1
??$_Uninit_copy@EE@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<unsigned char,unsigned char>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 401  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f2		 mov	 esi, edx

; 402  : 	_DEBUG_RANGE(_First, _Last);
; 403  : 	_DEBUG_POINTER(_Dest);
; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00006	2b f1		 sub	 esi, ecx

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00008	56		 push	 esi
  00009	51		 push	 ecx
  0000a	ff 75 08	 push	 DWORD PTR __Dest$[ebp]
  0000d	e8 00 00 00 00	 call	 _memmove
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	03 c6		 add	 eax, esi
  00017	5e		 pop	 esi

; 407  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Uninit_copy@EE@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<unsigned char,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Dist_type@PAE@std@@YAPAHPAE@Z
_TEXT	SEGMENT
??$_Dist_type@PAE@std@@YAPAHPAE@Z PROC			; std::_Dist_type<unsigned char *>, COMDAT
; ___formal$dead$ = ecx

; 771  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 772  : 	}

  00002	c3		 ret	 0
??$_Dist_type@PAE@std@@YAPAHPAE@Z ENDP			; std::_Dist_type<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Rotate@PAEHE@std@@YAXPAE00PAH0@Z
_TEXT	SEGMENT
tv300 = -28						; size = 4
tv298 = -24						; size = 4
__Shift$1$ = -20					; size = 4
tv304 = -16						; size = 4
tv299 = -16						; size = 4
__Count$1$ = -12					; size = 4
__Next$1$ = -8						; size = 4
__First$1$ = -4						; size = 4
__Last$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
___formal$dead$ = 16					; size = 4
??$_Rotate@PAEHE@std@@YAXPAE00PAH0@Z PROC		; std::_Rotate<unsigned char *,int,unsigned char>, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 3395 : 	{	// rotate [_First, _Last), random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b fa		 mov	 edi, edx
  0000b	8b d1		 mov	 edx, ecx

; 3396 : 	_Diff _Shift = _Mid - _First;
; 3397 : 	_Diff _Count = _Last - _First;

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Last$[ebp]
  00010	2b fa		 sub	 edi, edx
  00012	8b c1		 mov	 eax, ecx
  00014	2b c2		 sub	 eax, edx
  00016	89 55 fc	 mov	 DWORD PTR __First$1$[ebp], edx
  00019	89 7d ec	 mov	 DWORD PTR __Shift$1$[ebp], edi
  0001c	89 45 f0	 mov	 DWORD PTR tv304[ebp], eax
  0001f	8b d8		 mov	 ebx, eax
  00021	89 45 f4	 mov	 DWORD PTR __Count$1$[ebp], eax

; 3398 : 
; 3399 : 	for (_Diff _Factor = _Shift; _Factor != 0; )

  00024	8b f7		 mov	 esi, edi
  00026	85 ff		 test	 edi, edi
  00028	74 1c		 je	 SHORT $LN8@Rotate
  0002a	8d 9b 00 00 00
	00		 npad	 6
$LL9@Rotate:

; 3400 : 		{	// find subcycle count as GCD of shift count and length
; 3401 : 		_Diff _Tmp = _Count % _Factor;

  00030	8b c3		 mov	 eax, ebx
  00032	99		 cdq
  00033	f7 fe		 idiv	 esi

; 3402 : 		_Count = _Factor;

  00035	8b de		 mov	 ebx, esi

; 3403 : 		_Factor = _Tmp;

  00037	8b f2		 mov	 esi, edx
  00039	85 d2		 test	 edx, edx
  0003b	75 f3		 jne	 SHORT $LL9@Rotate
  0003d	8b 55 fc	 mov	 edx, DWORD PTR __First$1$[ebp]
  00040	8b 45 f0	 mov	 eax, DWORD PTR tv304[ebp]
  00043	89 5d f4	 mov	 DWORD PTR __Count$1$[ebp], ebx
$LN8@Rotate:

; 3404 : 		}
; 3405 : 
; 3406 : 	if (_Count < _Last - _First)

  00046	3b d8		 cmp	 ebx, eax
  00048	7d 7d		 jge	 SHORT $LN4@Rotate

; 3407 : 		for (; 0 < _Count; --_Count)

  0004a	85 db		 test	 ebx, ebx
  0004c	7e 79		 jle	 SHORT $LN4@Rotate
  0004e	8b c2		 mov	 eax, edx
  00050	f7 d8		 neg	 eax
  00052	89 45 e4	 mov	 DWORD PTR tv300[ebp], eax
  00055	8b c7		 mov	 eax, edi
  00057	f7 d8		 neg	 eax
  00059	89 45 f0	 mov	 DWORD PTR tv299[ebp], eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	f7 d8		 neg	 eax
  00060	89 45 e8	 mov	 DWORD PTR tv298[ebp], eax
  00063	03 da		 add	 ebx, edx
$LL6@Rotate:

; 3411 : 			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;

  00065	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  00068	3b c1		 cmp	 eax, ecx
  0006a	0f 44 45 fc	 cmove	 eax, DWORD PTR __First$1$[ebp]
  0006e	8b d3		 mov	 edx, ebx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 47   : 	_Ty _Tmp = _Move(_Left);

  00070	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3410 : 			_RanIt _Next = _Hole;

  00072	89 55 f8	 mov	 DWORD PTR __Next$1$[ebp], edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 47   : 	_Ty _Tmp = _Move(_Left);

  00075	f7 de		 neg	 esi
$LL3@Rotate:

; 48   : 	_Left = _Move(_Right);

  00077	8b 7d f8	 mov	 edi, DWORD PTR __Next$1$[ebp]
  0007a	8a 08		 mov	 cl, BYTE PTR [eax]
  0007c	8a 12		 mov	 dl, BYTE PTR [edx]
  0007e	88 0f		 mov	 BYTE PTR [edi], cl
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3417 : 					: _First + (_Shift - (_Last - _Next1));

  00080	8b 4d 08	 mov	 ecx, DWORD PTR __Last$[ebp]
  00083	8b 7d ec	 mov	 edi, DWORD PTR __Shift$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 49   : 	_Right = _Move(_Tmp);

  00086	88 10		 mov	 BYTE PTR [eax], dl
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3417 : 					: _First + (_Shift - (_Last - _Next1));

  00088	03 ce		 add	 ecx, esi
  0008a	8b d0		 mov	 edx, eax
  0008c	89 55 f8	 mov	 DWORD PTR __Next$1$[ebp], edx
  0008f	3b f9		 cmp	 edi, ecx
  00091	7d 07		 jge	 SHORT $LN14@Rotate
  00093	03 c7		 add	 eax, edi
  00095	03 75 f0	 add	 esi, DWORD PTR tv299[ebp]
  00098	eb 1a		 jmp	 SHORT $LN15@Rotate
$LN14@Rotate:
  0009a	2b 75 e8	 sub	 esi, DWORD PTR tv298[ebp]
  0009d	8b 55 f0	 mov	 edx, DWORD PTR tv299[ebp]
  000a0	8b cf		 mov	 ecx, edi
  000a2	2b 4d 08	 sub	 ecx, DWORD PTR __Last$[ebp]
  000a5	03 d6		 add	 edx, esi
  000a7	03 4d fc	 add	 ecx, DWORD PTR __First$1$[ebp]
  000aa	8b 75 e4	 mov	 esi, DWORD PTR tv300[ebp]
  000ad	03 c1		 add	 eax, ecx
  000af	03 f2		 add	 esi, edx
  000b1	8b 55 f8	 mov	 edx, DWORD PTR __Next$1$[ebp]
$LN15@Rotate:

; 3418 : 				if (_Next1 == _Hole)

  000b4	3b c3		 cmp	 eax, ebx
  000b6	75 bf		 jne	 SHORT $LL3@Rotate

; 3407 : 		for (; 0 < _Count; --_Count)

  000b8	8b 45 f4	 mov	 eax, DWORD PTR __Count$1$[ebp]
  000bb	8b 4d 08	 mov	 ecx, DWORD PTR __Last$[ebp]
  000be	48		 dec	 eax
  000bf	4b		 dec	 ebx
  000c0	89 45 f4	 mov	 DWORD PTR __Count$1$[ebp], eax
  000c3	85 c0		 test	 eax, eax
  000c5	7f 9e		 jg	 SHORT $LL6@Rotate
$LN4@Rotate:
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx

; 3419 : 					break;
; 3420 : 				}
; 3421 : 			}
; 3422 : 	}

  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
??$_Rotate@PAEHE@std@@YAXPAE00PAH0@Z ENDP		; std::_Rotate<unsigned char *,int,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Distance2@PAEH@std@@YAXPAE0AAHUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Distance2@PAEH@std@@YAXPAE0AAHUrandom_access_iterator_tag@0@@Z PROC ; std::_Distance2<unsigned char *,int>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 806  : 	{	// add to _Off distance between random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 807  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 808  : 	if (_First != _Last)
; 809  : 		{	// check for null pointers
; 810  : 		_DEBUG_POINTER(_First);
; 811  : 		_DEBUG_POINTER(_Last);
; 812  : 		}
; 813  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 814  : 
; 815  : 	_Off += _Last - _First;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	2b d1		 sub	 edx, ecx
  00008	01 10		 add	 DWORD PTR [eax], edx

; 816  : 	}

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??$_Distance2@PAEH@std@@YAXPAE0AAHUrandom_access_iterator_tag@0@@Z ENDP ; std::_Distance2<unsigned char *,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Advance@PAEH@std@@YAXAAPAEHUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$_Advance@PAEH@std@@YAXAAPAEHUrandom_access_iterator_tag@0@@Z PROC ; std::_Advance<unsigned char *,int>, COMDAT
; __Where$ = ecx
; __Off$ = edx

; 755  : 	_Where += _Off;

  00000	01 11		 add	 DWORD PTR [ecx], edx

; 756  : 	}

  00002	c3		 ret	 0
??$_Advance@PAEH@std@@YAXAAPAEHUrandom_access_iterator_tag@0@@Z ENDP ; std::_Advance<unsigned char *,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??$iter_swap@PAEPAE@std@@YAXPAE0@Z
_TEXT	SEGMENT
??$iter_swap@PAEPAE@std@@YAXPAE0@Z PROC			; std::iter_swap<unsigned char *,unsigned char *>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 48   : 	_Left = _Move(_Right);

  00000	8a 02		 mov	 al, BYTE PTR [edx]
  00002	53		 push	 ebx

; 28   : 
; 29   : 		// TEMPLATE FUNCTION swap
; 30   : template<class _Ty,
; 31   : 	size_t _Size> inline
; 32   : 	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
; 33   : 	{	// exchange arrays stored at _Left and _Right
; 34   : 	if (&_Left != &_Right)
; 35   : 		{	// worth swapping, swap ranges
; 36   : 		_Ty *_First1 = _Left;
; 37   : 		_Ty *_Last1 = _First1 + _Size;
; 38   : 		_Ty *_First2 = _Right;
; 39   : 		for (; _First1 != _Last1; ++_First1, ++_First2)
; 40   : 			_STD iter_swap(_First1, _First2);
; 41   : 		}
; 42   : 	}
; 43   : 
; 44   : template<class _Ty> inline
; 45   : 	void swap(_Ty& _Left, _Ty& _Right)
; 46   : 	{	// exchange values stored at _Left and _Right
; 47   : 	_Ty _Tmp = _Move(_Left);

  00003	8a 19		 mov	 bl, BYTE PTR [ecx]

; 48   : 	_Left = _Move(_Right);

  00005	88 01		 mov	 BYTE PTR [ecx], al

; 49   : 	_Right = _Move(_Tmp);

  00007	88 1a		 mov	 BYTE PTR [edx], bl
  00009	5b		 pop	 ebx

; 26   : 	swap(*_Left, *_Right);
; 27   : 	}

  0000a	c3		 ret	 0
??$iter_swap@PAEPAE@std@@YAXPAE0@Z ENDP			; std::iter_swap<unsigned char *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??$swap@E@std@@YAXAAE0@Z
_TEXT	SEGMENT
??$swap@E@std@@YAXAAE0@Z PROC				; std::swap<unsigned char>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 47   : 	_Ty _Tmp = _Move(_Left);
; 48   : 	_Left = _Move(_Right);

  00000	8a 02		 mov	 al, BYTE PTR [edx]
  00002	53		 push	 ebx
  00003	8a 19		 mov	 bl, BYTE PTR [ecx]
  00005	88 01		 mov	 BYTE PTR [ecx], al

; 49   : 	_Right = _Move(_Tmp);

  00007	88 1a		 mov	 BYTE PTR [edx], bl
  00009	5b		 pop	 ebx

; 50   : 	}

  0000a	c3		 ret	 0
??$swap@E@std@@YAXAAE0@Z ENDP				; std::swap<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$_Move@AAE@std@@YA$$QAEAAE@Z
_TEXT	SEGMENT
??$_Move@AAE@std@@YA$$QAEAAE@Z PROC			; std::_Move<unsigned char &>, COMDAT
; __Arg$ = ecx

; 1799 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1800 : 	}

  00002	c3		 ret	 0
??$_Move@AAE@std@@YA$$QAEAAE@Z ENDP			; std::_Move<unsigned char &>
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ
_TEXT	SEGMENT
?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2, COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	83 e9 58	 sub	 ecx, 88			; 00000058H
  00006	e9 00 00 00 00	 jmp	 ?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEXXZ
_TEXT	SEGMENT
?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2, COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
END
