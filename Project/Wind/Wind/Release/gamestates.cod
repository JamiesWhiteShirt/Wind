; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

	TITLE	C:\Users\Glenn\Documents\GitHub\Wind\Project\Wind\Wind\gamestates.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?renderingState@GameStates@@3PAVGameState@1@A	; GameStates::renderingState
PUBLIC	?processedState@GameStates@@3PAVGameState@1@A	; GameStates::processedState
PUBLIC	?pendingState@GameStates@@3PAVGameState@1@A	; GameStates::pendingState
PUBLIC	?newPendingAvailable@GameStates@@3_NA		; GameStates::newPendingAvailable
?renderingState@GameStates@@3PAVGameState@1@A DD 01H DUP (?) ; GameStates::renderingState
?processedState@GameStates@@3PAVGameState@1@A DD 01H DUP (?) ; GameStates::processedState
?pendingState@GameStates@@3PAVGameState@1@A DD 01H DUP (?) ; GameStates::pendingState
?newPendingAvailable@GameStates@@3_NA DB 01H DUP (?)	; GameStates::newPendingAvailable
_BSS	ENDS
PUBLIC	?swap@@YAXAAPAVGameState@GameStates@@0@Z	; swap
PUBLIC	??_GGameState@GameStates@@QAEPAXI@Z		; GameStates::GameState::`scalar deleting destructor'
PUBLIC	??1GameState@GameStates@@QAE@XZ			; GameStates::GameState::~GameState
PUBLIC	??0GameState@GameStates@@QAE@XZ			; GameStates::GameState::GameState
PUBLIC	??0Camera@GameStates@@QAE@XZ			; GameStates::Camera::Camera
PUBLIC	?cleanup@GameStates@@YAXXZ			; GameStates::cleanup
PUBLIC	?swapProcessedPending@GameStates@@YAXXZ		; GameStates::swapProcessedPending
PUBLIC	?init@GameStates@@YAXXZ				; GameStates::init
PUBLIC	?swapPendingRendering@GameStates@@YAXXZ		; GameStates::swapPendingRendering
PUBLIC	?mut@GameStates@@3Vmutex@std@@A			; GameStates::mut
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
	ALIGN	4

?mut@GameStates@@3Vmutex@std@@A DD 01H DUP (?)		; GameStates::mut
_BSS	ENDS
_mut$initializer$ DD FLAT:??__Emut@GameStates@@YAXXZ
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
;	COMDAT ?swapPendingRendering@GameStates@@YAXXZ
_TEXT	SEGMENT
?swapPendingRendering@GameStates@@YAXXZ PROC		; GameStates::swapPendingRendering, COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  00000	68 00 00 00 00	 push	 OFFSET ?mut@GameStates@@3Vmutex@std@@A ; GameStates::mut
  00005	e8 00 00 00 00	 call	 __Mtx_lock
  0000a	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  0000d	85 c0		 test	 eax, eax
  0000f	74 09		 je	 SHORT $LN8@swapPendin

; 33   : 		_Throw_C_error(_Res);

  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  00017	83 c4 04	 add	 esp, 4
$LN8@swapPendin:
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp

; 67   : 	if(newPendingAvailable)

  0001a	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?newPendingAvailable@GameStates@@3_NA, 0 ; GameStates::newPendingAvailable
  00021	74 6d		 je	 SHORT $LN1@swapPendin

; 49   : 	gs1->cam = gs2->cam;

  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pendingState@GameStates@@3PAVGameState@1@A ; GameStates::pendingState
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ?renderingState@GameStates@@3PAVGameState@1@A ; GameStates::renderingState
  0002e	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00032	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00036	f3 0f 7e 41 08	 movq	 xmm0, QWORD PTR [ecx+8]
  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?renderingState@GameStates@@3PAVGameState@1@A ; GameStates::renderingState

; 68   : 	{
; 69   : 		swap(renderingState, pendingState);
; 70   : 		newPendingAvailable = false;

  00040	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?newPendingAvailable@GameStates@@3_NA, 0 ; GameStates::newPendingAvailable

; 49   : 	gs1->cam = gs2->cam;

  00047	66 0f d6 40 08	 movq	 QWORD PTR [eax+8], xmm0
  0004c	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?renderingState@GameStates@@3PAVGameState@1@A ; GameStates::renderingState
  00056	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
  0005b	f3 0f 7e 41 18	 movq	 xmm0, QWORD PTR [ecx+24]
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?renderingState@GameStates@@3PAVGameState@1@A ; GameStates::renderingState
  00065	66 0f d6 40 18	 movq	 QWORD PTR [eax+24], xmm0

; 50   : 	gs1->FOV = gs2->FOV;

  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pendingState@GameStates@@3PAVGameState@1@A ; GameStates::pendingState
  0006f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR ?renderingState@GameStates@@3PAVGameState@1@A ; GameStates::renderingState
  00077	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 51   : 	GameState* temp = gs2;

  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pendingState@GameStates@@3PAVGameState@1@A ; GameStates::pendingState

; 52   : 	gs2 = gs1;

  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR ?renderingState@GameStates@@3PAVGameState@1@A ; GameStates::renderingState
  00085	a3 00 00 00 00	 mov	 DWORD PTR ?pendingState@GameStates@@3PAVGameState@1@A, eax ; GameStates::pendingState

; 53   : 	gs1 = temp;

  0008a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?renderingState@GameStates@@3PAVGameState@1@A, ecx ; GameStates::renderingState
$LN1@swapPendin:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  00090	68 00 00 00 00	 push	 OFFSET ?mut@GameStates@@3Vmutex@std@@A ; GameStates::mut
  00095	e8 00 00 00 00	 call	 __Mtx_unlock
  0009a	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  0009d	85 c0		 test	 eax, eax
  0009f	74 07		 je	 SHORT $LN17@swapPendin

; 33   : 		_Throw_C_error(_Res);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  000a7	59		 pop	 ecx
$LN17@swapPendin:
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp

; 73   : }

  000a8	c3		 ret	 0
?swapPendingRendering@GameStates@@YAXXZ ENDP		; GameStates::swapPendingRendering
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
;	COMDAT ?init@GameStates@@YAXXZ
_TEXT	SEGMENT
?init@GameStates@@YAXXZ PROC				; GameStates::init, COMDAT

; 35   : 	GameStates::processedState = new GameState();

  00000	6a 24		 push	 36			; 00000024H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4
  0000a	85 c0		 test	 eax, eax
  0000c	74 40		 je	 SHORT $LN3@init
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 16   : {

  0000e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00014	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0001b	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00022	c7 40 0c 00 00
	80 3f		 mov	 DWORD PTR [eax+12], 1065353216 ; 3f800000H
  00029	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00030	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  00037	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  0003e	c7 40 1c 00 00
	80 3f		 mov	 DWORD PTR [eax+28], 1065353216 ; 3f800000H
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp

; 18   : {

  00045	c7 40 20 5a 00
	00 00		 mov	 DWORD PTR [eax+32], 90	; 0000005aH

; 35   : 	GameStates::processedState = new GameState();

  0004c	eb 02		 jmp	 SHORT $LN4@init
$LN3@init:
  0004e	33 c0		 xor	 eax, eax
$LN4@init:

; 36   : 	GameStates::pendingState = new GameState();

  00050	6a 24		 push	 36			; 00000024H
  00052	a3 00 00 00 00	 mov	 DWORD PTR ?processedState@GameStates@@3PAVGameState@1@A, eax ; GameStates::processedState
  00057	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005c	83 c4 04	 add	 esp, 4
  0005f	85 c0		 test	 eax, eax
  00061	74 40		 je	 SHORT $LN5@init
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 16   : {

  00063	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00069	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00070	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00077	c7 40 0c 00 00
	80 3f		 mov	 DWORD PTR [eax+12], 1065353216 ; 3f800000H
  0007e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00085	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  0008c	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  00093	c7 40 1c 00 00
	80 3f		 mov	 DWORD PTR [eax+28], 1065353216 ; 3f800000H
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp

; 18   : {

  0009a	c7 40 20 5a 00
	00 00		 mov	 DWORD PTR [eax+32], 90	; 0000005aH

; 36   : 	GameStates::pendingState = new GameState();

  000a1	eb 02		 jmp	 SHORT $LN6@init
$LN5@init:
  000a3	33 c0		 xor	 eax, eax
$LN6@init:

; 37   : 	GameStates::renderingState = new GameState();

  000a5	6a 24		 push	 36			; 00000024H
  000a7	a3 00 00 00 00	 mov	 DWORD PTR ?pendingState@GameStates@@3PAVGameState@1@A, eax ; GameStates::pendingState
  000ac	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b1	83 c4 04	 add	 esp, 4
  000b4	85 c0		 test	 eax, eax
  000b6	74 44		 je	 SHORT $LN7@init
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 16   : {

  000b8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000be	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  000c5	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  000cc	c7 40 0c 00 00
	80 3f		 mov	 DWORD PTR [eax+12], 1065353216 ; 3f800000H
  000d3	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  000da	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  000e1	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  000e8	c7 40 1c 00 00
	80 3f		 mov	 DWORD PTR [eax+28], 1065353216 ; 3f800000H
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp

; 18   : {

  000ef	c7 40 20 5a 00
	00 00		 mov	 DWORD PTR [eax+32], 90	; 0000005aH

; 37   : 	GameStates::renderingState = new GameState();

  000f6	a3 00 00 00 00	 mov	 DWORD PTR ?renderingState@GameStates@@3PAVGameState@1@A, eax ; GameStates::renderingState

; 38   : }

  000fb	c3		 ret	 0
$LN7@init:

; 37   : 	GameStates::renderingState = new GameState();

  000fc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?renderingState@GameStates@@3PAVGameState@1@A, 0 ; GameStates::renderingState

; 38   : }

  00106	c3		 ret	 0
?init@GameStates@@YAXXZ ENDP				; GameStates::init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
;	COMDAT ?swapProcessedPending@GameStates@@YAXXZ
_TEXT	SEGMENT
?swapProcessedPending@GameStates@@YAXXZ PROC		; GameStates::swapProcessedPending, COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  00000	68 00 00 00 00	 push	 OFFSET ?mut@GameStates@@3Vmutex@std@@A ; GameStates::mut
  00005	e8 00 00 00 00	 call	 __Mtx_lock
  0000a	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  0000d	85 c0		 test	 eax, eax
  0000f	74 09		 je	 SHORT $LN7@swapProces

; 33   : 		_Throw_C_error(_Res);

  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  00017	83 c4 04	 add	 esp, 4
$LN7@swapProces:
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp

; 49   : 	gs1->cam = gs2->cam;

  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?processedState@GameStates@@3PAVGameState@1@A ; GameStates::processedState
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pendingState@GameStates@@3PAVGameState@1@A ; GameStates::pendingState
  00025	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00029	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0002d	f3 0f 7e 41 08	 movq	 xmm0, QWORD PTR [ecx+8]
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pendingState@GameStates@@3PAVGameState@1@A ; GameStates::pendingState
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  00037	68 00 00 00 00	 push	 OFFSET ?mut@GameStates@@3Vmutex@std@@A ; GameStates::mut
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp

; 49   : 	gs1->cam = gs2->cam;

  0003c	66 0f d6 40 08	 movq	 QWORD PTR [eax+8], xmm0
  00041	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pendingState@GameStates@@3PAVGameState@1@A ; GameStates::pendingState

; 58   : 	mut.lock();
; 59   : 	swap(pendingState, processedState);
; 60   : 	newPendingAvailable = true;

  0004b	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?newPendingAvailable@GameStates@@3_NA, 1 ; GameStates::newPendingAvailable

; 49   : 	gs1->cam = gs2->cam;

  00052	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
  00057	f3 0f 7e 41 18	 movq	 xmm0, QWORD PTR [ecx+24]
  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pendingState@GameStates@@3PAVGameState@1@A ; GameStates::pendingState
  00061	66 0f d6 40 18	 movq	 QWORD PTR [eax+24], xmm0

; 50   : 	gs1->FOV = gs2->FOV;

  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR ?processedState@GameStates@@3PAVGameState@1@A ; GameStates::processedState
  0006b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pendingState@GameStates@@3PAVGameState@1@A ; GameStates::pendingState
  00073	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 51   : 	GameState* temp = gs2;

  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?processedState@GameStates@@3PAVGameState@1@A ; GameStates::processedState

; 52   : 	gs2 = gs1;

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pendingState@GameStates@@3PAVGameState@1@A ; GameStates::pendingState
  00081	a3 00 00 00 00	 mov	 DWORD PTR ?processedState@GameStates@@3PAVGameState@1@A, eax ; GameStates::processedState

; 53   : 	gs1 = temp;

  00086	89 0d 00 00 00
	00		 mov	 DWORD PTR ?pendingState@GameStates@@3PAVGameState@1@A, ecx ; GameStates::pendingState
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  0008c	e8 00 00 00 00	 call	 __Mtx_unlock
  00091	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  00094	85 c0		 test	 eax, eax
  00096	74 07		 je	 SHORT $LN16@swapProces

; 33   : 		_Throw_C_error(_Res);

  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  0009e	59		 pop	 ecx
$LN16@swapProces:
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp

; 62   : }

  0009f	c3		 ret	 0
?swapProcessedPending@GameStates@@YAXXZ ENDP		; GameStates::swapProcessedPending
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
;	COMDAT ?cleanup@GameStates@@YAXXZ
_TEXT	SEGMENT
?cleanup@GameStates@@YAXXZ PROC				; GameStates::cleanup, COMDAT

; 42   : 	delete GameStates::renderingState;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?renderingState@GameStates@@3PAVGameState@1@A ; GameStates::renderingState
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN9@cleanup
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
$LN9@cleanup:

; 43   : 	delete GameStates::processedState;

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?processedState@GameStates@@3PAVGameState@1@A ; GameStates::processedState
  00017	85 c0		 test	 eax, eax
  00019	74 09		 je	 SHORT $LN14@cleanup
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00021	83 c4 04	 add	 esp, 4
$LN14@cleanup:

; 44   : 	delete GameStates::pendingState;

  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pendingState@GameStates@@3PAVGameState@1@A ; GameStates::pendingState
  00029	85 c0		 test	 eax, eax
  0002b	74 07		 je	 SHORT $LN19@cleanup
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00033	59		 pop	 ecx
$LN19@cleanup:

; 45   : }

  00034	c3		 ret	 0
?cleanup@GameStates@@YAXXZ ENDP				; GameStates::cleanup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
;	COMDAT ??0Camera@GameStates@@QAE@XZ
_TEXT	SEGMENT
??0Camera@GameStates@@QAE@XZ PROC			; GameStates::Camera::Camera, COMDAT
; _this$ = ecx
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 16   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00014	c7 41 0c 00 00
	80 3f		 mov	 DWORD PTR [ecx+12], 1065353216 ; 3f800000H
  0001b	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00022	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00029	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00030	c7 41 1c 00 00
	80 3f		 mov	 DWORD PTR [ecx+28], 1065353216 ; 3f800000H
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp

; 12   : }

  00037	8b c1		 mov	 eax, ecx
  00039	c3		 ret	 0
??0Camera@GameStates@@QAE@XZ ENDP			; GameStates::Camera::Camera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
;	COMDAT ??0GameState@GameStates@@QAE@XZ
_TEXT	SEGMENT
??0GameState@GameStates@@QAE@XZ PROC			; GameStates::GameState::GameState, COMDAT
; _this$ = ecx
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 16   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00014	c7 41 0c 00 00
	80 3f		 mov	 DWORD PTR [ecx+12], 1065353216 ; 3f800000H
  0001b	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00022	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00029	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00030	c7 41 1c 00 00
	80 3f		 mov	 DWORD PTR [ecx+28], 1065353216 ; 3f800000H
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp

; 18   : {

  00037	c7 41 20 5a 00
	00 00		 mov	 DWORD PTR [ecx+32], 90	; 0000005aH

; 19   : 
; 20   : }

  0003e	8b c1		 mov	 eax, ecx
  00040	c3		 ret	 0
??0GameState@GameStates@@QAE@XZ ENDP			; GameStates::GameState::GameState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
;	COMDAT ??1GameState@GameStates@@QAE@XZ
_TEXT	SEGMENT
??1GameState@GameStates@@QAE@XZ PROC			; GameStates::GameState::~GameState, COMDAT
; _this$dead$ = ecx

; 24   : 	//clean();
; 25   : }

  00000	c3		 ret	 0
??1GameState@GameStates@@QAE@XZ ENDP			; GameStates::GameState::~GameState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
;	COMDAT ??__Emut@GameStates@@YAXXZ
text$yc	SEGMENT
??__Emut@GameStates@@YAXXZ PROC				; GameStates::`dynamic initializer for 'mut'', COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 63   : 	return (_Check_C_return(_Mtx_init(_Mtx, _Type)));

  00000	6a 02		 push	 2
  00002	68 00 00 00 00	 push	 OFFSET ?mut@GameStates@@3Vmutex@std@@A ; GameStates::mut
  00007	e8 00 00 00 00	 call	 __Mtx_init
  0000c	83 c4 08	 add	 esp, 8

; 32   : 	if (_Res != _Thrd_success)

  0000f	85 c0		 test	 eax, eax
  00011	74 09		 je	 SHORT $LN9@dynamic

; 33   : 		_Throw_C_error(_Res);

  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  00019	83 c4 04	 add	 esp, 4
$LN9@dynamic:
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp

; 27   : std::mutex GameStates::mut;

  0001c	68 00 00 00 00	 push	 OFFSET ??__Fmut@GameStates@@YAXXZ ; GameStates::`dynamic atexit destructor for 'mut''
  00021	e8 00 00 00 00	 call	 _atexit
  00026	59		 pop	 ecx
  00027	c3		 ret	 0
??__Emut@GameStates@@YAXXZ ENDP				; GameStates::`dynamic initializer for 'mut''
text$yc	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex
;	COMDAT ??__Fmut@GameStates@@YAXXZ
text$yd	SEGMENT
??__Fmut@GameStates@@YAXXZ PROC				; GameStates::`dynamic atexit destructor for 'mut'', COMDAT

; 33   : 		_Mtx_destroy(&_Mtx);

  00000	68 00 00 00 00	 push	 OFFSET ?mut@GameStates@@3Vmutex@std@@A ; GameStates::mut
  00005	e8 00 00 00 00	 call	 __Mtx_destroy
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Fmut@GameStates@@YAXXZ ENDP				; GameStates::`dynamic atexit destructor for 'mut''
text$yd	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GGameState@GameStates@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$dead$ = 8					; size = 4
??_GGameState@GameStates@@QAEPAXI@Z PROC		; GameStates::GameState::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	56		 push	 esi
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	83 c4 04	 add	 esp, 4
  0000c	8b c6		 mov	 eax, esi
  0000e	5e		 pop	 esi
  0000f	c2 04 00	 ret	 4
??_GGameState@GameStates@@QAEPAXI@Z ENDP		; GameStates::GameState::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\gamestates.cpp
;	COMDAT ?swap@@YAXAAPAVGameState@GameStates@@0@Z
_TEXT	SEGMENT
?swap@@YAXAAPAVGameState@GameStates@@0@Z PROC		; swap, COMDAT
; _gs1$ = ecx
; _gs2$ = edx

; 49   : 	gs1->cam = gs2->cam;

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	56		 push	 esi
  00003	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 37		 mov	 esi, DWORD PTR [edi]
  0000c	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  00010	f3 0f 7e 40 08	 movq	 xmm0, QWORD PTR [eax+8]
  00015	66 0f d6 46 08	 movq	 QWORD PTR [esi+8], xmm0
  0001a	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0001f	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
  00024	f3 0f 7e 40 18	 movq	 xmm0, QWORD PTR [eax+24]
  00029	66 0f d6 46 18	 movq	 QWORD PTR [esi+24], xmm0

; 50   : 	gs1->FOV = gs2->FOV;

  0002e	8b 02		 mov	 eax, DWORD PTR [edx]
  00030	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00032	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00035	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 51   : 	GameState* temp = gs2;
; 52   : 	gs2 = gs1;

  00038	8b 07		 mov	 eax, DWORD PTR [edi]
  0003a	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0003c	89 02		 mov	 DWORD PTR [edx], eax

; 53   : 	gs1 = temp;

  0003e	89 0f		 mov	 DWORD PTR [edi], ecx
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi

; 54   : }

  00042	c3		 ret	 0
?swap@@YAXAAPAVGameState@GameStates@@0@Z ENDP		; swap
_TEXT	ENDS
END
