; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

	TITLE	C:\Users\Glenn\Documents\GitHub\Wind\Project\Wind\Wind\input.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?mbs@Mouse@@0PA_NA				; Mouse::mbs
PUBLIC	?keys@Keyboard@@0PA_NA				; Keyboard::keys
?mbs@Mouse@@0PA_NA DB 03H DUP (?)			; Mouse::mbs
	ALIGN	4

?keys@Keyboard@@0PA_NA DB 0100H DUP (?)			; Keyboard::keys
_BSS	ENDS
PUBLIC	??_FMouseAction@@QAEXXZ				; MouseAction::`default constructor closure'
PUBLIC	??_FKeyboardAction@@QAEXXZ			; KeyboardAction::`default constructor closure'
PUBLIC	??0?$List@VMouseAction@@$0BA@@@QAE@XZ		; List<MouseAction,16>::List<MouseAction,16>
PUBLIC	??0?$List@VKeyboardAction@@$0BA@@@QAE@XZ	; List<KeyboardAction,16>::List<KeyboardAction,16>
PUBLIC	?getMB@Mouse@@SA_NH@Z				; Mouse::getMB
PUBLIC	?setMB@Mouse@@SAXH_N@Z				; Mouse::setMB
PUBLIC	??0MouseAction@@QAE@HHHH_N@Z			; MouseAction::MouseAction
PUBLIC	?getKey@Keyboard@@SA_NH@Z			; Keyboard::getKey
PUBLIC	?setKey@Keyboard@@SAXH_N@Z			; Keyboard::setKey
PUBLIC	??0KeyboardAction@@QAE@H_N@Z			; KeyboardAction::KeyboardAction
PUBLIC	?mut@Keyboard@@2Vmutex@std@@A			; Keyboard::mut
PUBLIC	?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A ; Keyboard::actions
PUBLIC	?actions@Mouse@@2V?$List@VMouseAction@@$0BA@@@A	; Mouse::actions
PUBLIC	?mut@Mouse@@2Vmutex@std@@A			; Mouse::mut
__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

?mut@Keyboard@@2Vmutex@std@@A DD 01H DUP (?)		; Keyboard::mut
?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A DB 084H DUP (?) ; Keyboard::actions
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

?actions@Mouse@@2V?$List@VMouseAction@@$0BA@@@A DB 0144H DUP (?) ; Mouse::actions
?mut@Mouse@@2Vmutex@std@@A DD 01H DUP (?)		; Mouse::mut
_BSS	ENDS
?actions$initializer$@Keyboard@@2P6AXXZA DD FLAT:??__E?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A@@YAXXZ ; Keyboard::actions$initializer$
?mut$initializer$@Keyboard@@2P6AXXZA DD FLAT:??__E?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ ; Keyboard::mut$initializer$
?actions$initializer$@Mouse@@2P6AXXZA DD FLAT:??__E?actions@Mouse@@2V?$List@VMouseAction@@$0BA@@@A@@YAXXZ ; Mouse::actions$initializer$
?mut$initializer$@Mouse@@2P6AXXZA DD FLAT:??__E?mut@Mouse@@2Vmutex@std@@A@@YAXXZ ; Mouse::mut$initializer$
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ??0KeyboardAction@@QAE@H_N@Z
_TEXT	SEGMENT
_button$ = 8						; size = 4
_released$ = 12						; size = 1
??0KeyboardAction@@QAE@H_N@Z PROC			; KeyboardAction::KeyboardAction, COMDAT
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _button$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8a 45 0c	 mov	 al, BYTE PTR _released$[ebp]
  0000b	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 6    : 
; 7    : }

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0KeyboardAction@@QAE@H_N@Z ENDP			; KeyboardAction::KeyboardAction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ??__E?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A@@YAXXZ
text$yc	SEGMENT
??__E?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A@@YAXXZ PROC ; `dynamic initializer for 'Keyboard::actions'', COMDAT
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h

; 12   : 	List()

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A ; Keyboard::actions
  00005	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL6@actions:
  00010	49		 dec	 ecx
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp

; 5    : {

  00011	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00017	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  0001b	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  0001e	79 f0		 jns	 SHORT $LL6@actions

; 10   : List<KeyboardAction, 16> Keyboard::actions;

  00020	c3		 ret	 0
??__E?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A@@YAXXZ ENDP ; `dynamic initializer for 'Keyboard::actions''
text$yc	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ??__E?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ
text$yc	SEGMENT
??__E?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ PROC		; `dynamic initializer for 'Keyboard::mut'', COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 63   : 	return (_Check_C_return(_Mtx_init(_Mtx, _Type)));

  00000	6a 02		 push	 2
  00002	68 00 00 00 00	 push	 OFFSET ?mut@Keyboard@@2Vmutex@std@@A ; Keyboard::mut
  00007	e8 00 00 00 00	 call	 __Mtx_init
  0000c	83 c4 08	 add	 esp, 8

; 32   : 	if (_Res != _Thrd_success)

  0000f	85 c0		 test	 eax, eax
  00011	74 09		 je	 SHORT $LN9@mut

; 33   : 		_Throw_C_error(_Res);

  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  00019	83 c4 04	 add	 esp, 4
$LN9@mut:
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp

; 11   : std::mutex Keyboard::mut;

  0001c	68 00 00 00 00	 push	 OFFSET ??__F?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ ; `dynamic atexit destructor for 'Keyboard::mut''
  00021	e8 00 00 00 00	 call	 _atexit
  00026	59		 pop	 ecx
  00027	c3		 ret	 0
??__E?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ ENDP		; `dynamic initializer for 'Keyboard::mut''
text$yc	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex
;	COMDAT ??__F?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ PROC		; `dynamic atexit destructor for 'Keyboard::mut'', COMDAT

; 33   : 		_Mtx_destroy(&_Mtx);

  00000	68 00 00 00 00	 push	 OFFSET ?mut@Keyboard@@2Vmutex@std@@A ; Keyboard::mut
  00005	e8 00 00 00 00	 call	 __Mtx_destroy
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__F?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ ENDP		; `dynamic atexit destructor for 'Keyboard::mut''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ?setKey@Keyboard@@SAXH_N@Z
_TEXT	SEGMENT
?setKey@Keyboard@@SAXH_N@Z PROC				; Keyboard::setKey, COMDAT
; _index$ = ecx
; _value$ = dl

; 14   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  00002	68 00 00 00 00	 push	 OFFSET ?mut@Keyboard@@2Vmutex@std@@A ; Keyboard::mut
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp

; 14   : {

  00007	8a da		 mov	 bl, dl
  00009	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  0000b	e8 00 00 00 00	 call	 __Mtx_lock
  00010	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  00013	85 c0		 test	 eax, eax
  00015	74 09		 je	 SHORT $LN7@setKey

; 33   : 		_Throw_C_error(_Res);

  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  0001d	83 c4 04	 add	 esp, 4
$LN7@setKey:

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  00020	68 00 00 00 00	 push	 OFFSET ?mut@Keyboard@@2Vmutex@std@@A ; Keyboard::mut
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp

; 16   : 	keys[index] = value;

  00025	88 9e 00 00 00
	00		 mov	 BYTE PTR ?keys@Keyboard@@0PA_NA[esi], bl
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  0002b	e8 00 00 00 00	 call	 __Mtx_unlock
  00030	83 c4 04	 add	 esp, 4
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx

; 32   : 	if (_Res != _Thrd_success)

  00035	85 c0		 test	 eax, eax
  00037	74 07		 je	 SHORT $LN14@setKey

; 33   : 		_Throw_C_error(_Res);

  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  0003f	59		 pop	 ecx
$LN14@setKey:
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp

; 18   : }

  00040	c3		 ret	 0
?setKey@Keyboard@@SAXH_N@Z ENDP				; Keyboard::setKey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ?getKey@Keyboard@@SA_NH@Z
_TEXT	SEGMENT
?getKey@Keyboard@@SA_NH@Z PROC				; Keyboard::getKey, COMDAT
; _index$ = ecx

; 21   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  00002	68 00 00 00 00	 push	 OFFSET ?mut@Keyboard@@2Vmutex@std@@A ; Keyboard::mut
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp

; 21   : {

  00007	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  00009	e8 00 00 00 00	 call	 __Mtx_lock
  0000e	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  00011	85 c0		 test	 eax, eax
  00013	74 09		 je	 SHORT $LN7@getKey

; 33   : 		_Throw_C_error(_Res);

  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  0001b	83 c4 04	 add	 esp, 4
$LN7@getKey:
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp

; 23   : 	bool value = keys[index];

  0001e	8a 9e 00 00 00
	00		 mov	 bl, BYTE PTR ?keys@Keyboard@@0PA_NA[esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  00024	68 00 00 00 00	 push	 OFFSET ?mut@Keyboard@@2Vmutex@std@@A ; Keyboard::mut
  00029	e8 00 00 00 00	 call	 __Mtx_unlock
  0002e	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  00031	85 c0		 test	 eax, eax
  00033	74 09		 je	 SHORT $LN17@getKey

; 33   : 		_Throw_C_error(_Res);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  0003b	83 c4 04	 add	 esp, 4
$LN17@getKey:
  0003e	5e		 pop	 esi
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp

; 25   : 	return value;

  0003f	8a c3		 mov	 al, bl
  00041	5b		 pop	 ebx

; 26   : }

  00042	c3		 ret	 0
?getKey@Keyboard@@SA_NH@Z ENDP				; Keyboard::getKey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ??0MouseAction@@QAE@HHHH_N@Z
_TEXT	SEGMENT
_rx$ = 8						; size = 4
_ry$ = 12						; size = 4
_sc$ = 16						; size = 4
_button$ = 20						; size = 4
_released$ = 24						; size = 1
??0MouseAction@@QAE@HHHH_N@Z PROC			; MouseAction::MouseAction, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _rx$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b 45 0c	 mov	 eax, DWORD PTR _ry$[ebp]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0000e	8b 45 10	 mov	 eax, DWORD PTR _sc$[ebp]
  00011	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00014	8b 45 14	 mov	 eax, DWORD PTR _button$[ebp]
  00017	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0001a	8a 45 18	 mov	 al, BYTE PTR _released$[ebp]
  0001d	88 41 10	 mov	 BYTE PTR [ecx+16], al

; 31   : 
; 32   : }

  00020	8b c1		 mov	 eax, ecx
  00022	5d		 pop	 ebp
  00023	c2 14 00	 ret	 20			; 00000014H
??0MouseAction@@QAE@HHHH_N@Z ENDP			; MouseAction::MouseAction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ??__E?actions@Mouse@@2V?$List@VMouseAction@@$0BA@@@A@@YAXXZ
text$yc	SEGMENT
??__E?actions@Mouse@@2V?$List@VMouseAction@@$0BA@@@A@@YAXXZ PROC ; `dynamic initializer for 'Mouse::actions'', COMDAT

; 35   : List<MouseAction, 16> Mouse::actions;

  00000	e9 00 00 00 00	 jmp	 ??0?$List@VMouseAction@@$0BA@@@QAE@XZ ; List<MouseAction,16>::List<MouseAction,16>
??__E?actions@Mouse@@2V?$List@VMouseAction@@$0BA@@@A@@YAXXZ ENDP ; `dynamic initializer for 'Mouse::actions''
text$yc	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ??__E?mut@Mouse@@2Vmutex@std@@A@@YAXXZ
text$yc	SEGMENT
??__E?mut@Mouse@@2Vmutex@std@@A@@YAXXZ PROC		; `dynamic initializer for 'Mouse::mut'', COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 63   : 	return (_Check_C_return(_Mtx_init(_Mtx, _Type)));

  00000	6a 02		 push	 2
  00002	68 00 00 00 00	 push	 OFFSET ?mut@Mouse@@2Vmutex@std@@A ; Mouse::mut
  00007	e8 00 00 00 00	 call	 __Mtx_init
  0000c	83 c4 08	 add	 esp, 8

; 32   : 	if (_Res != _Thrd_success)

  0000f	85 c0		 test	 eax, eax
  00011	74 09		 je	 SHORT $LN9@mut

; 33   : 		_Throw_C_error(_Res);

  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  00019	83 c4 04	 add	 esp, 4
$LN9@mut:
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp

; 36   : std::mutex Mouse::mut;

  0001c	68 00 00 00 00	 push	 OFFSET ??__F?mut@Mouse@@2Vmutex@std@@A@@YAXXZ ; `dynamic atexit destructor for 'Mouse::mut''
  00021	e8 00 00 00 00	 call	 _atexit
  00026	59		 pop	 ecx
  00027	c3		 ret	 0
??__E?mut@Mouse@@2Vmutex@std@@A@@YAXXZ ENDP		; `dynamic initializer for 'Mouse::mut''
text$yc	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex
;	COMDAT ??__F?mut@Mouse@@2Vmutex@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?mut@Mouse@@2Vmutex@std@@A@@YAXXZ PROC		; `dynamic atexit destructor for 'Mouse::mut'', COMDAT

; 33   : 		_Mtx_destroy(&_Mtx);

  00000	68 00 00 00 00	 push	 OFFSET ?mut@Mouse@@2Vmutex@std@@A ; Mouse::mut
  00005	e8 00 00 00 00	 call	 __Mtx_destroy
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__F?mut@Mouse@@2Vmutex@std@@A@@YAXXZ ENDP		; `dynamic atexit destructor for 'Mouse::mut''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ?setMB@Mouse@@SAXH_N@Z
_TEXT	SEGMENT
?setMB@Mouse@@SAXH_N@Z PROC				; Mouse::setMB, COMDAT
; _index$ = ecx
; _value$ = dl

; 39   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  00002	68 00 00 00 00	 push	 OFFSET ?mut@Mouse@@2Vmutex@std@@A ; Mouse::mut
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp

; 39   : {

  00007	8a da		 mov	 bl, dl
  00009	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  0000b	e8 00 00 00 00	 call	 __Mtx_lock
  00010	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  00013	85 c0		 test	 eax, eax
  00015	74 09		 je	 SHORT $LN7@setMB

; 33   : 		_Throw_C_error(_Res);

  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  0001d	83 c4 04	 add	 esp, 4
$LN7@setMB:

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  00020	68 00 00 00 00	 push	 OFFSET ?mut@Mouse@@2Vmutex@std@@A ; Mouse::mut
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp

; 41   : 	mbs[index] = value;

  00025	88 9e 00 00 00
	00		 mov	 BYTE PTR ?mbs@Mouse@@0PA_NA[esi], bl
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  0002b	e8 00 00 00 00	 call	 __Mtx_unlock
  00030	83 c4 04	 add	 esp, 4
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx

; 32   : 	if (_Res != _Thrd_success)

  00035	85 c0		 test	 eax, eax
  00037	74 07		 je	 SHORT $LN14@setMB

; 33   : 		_Throw_C_error(_Res);

  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  0003f	59		 pop	 ecx
$LN14@setMB:
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp

; 43   : }

  00040	c3		 ret	 0
?setMB@Mouse@@SAXH_N@Z ENDP				; Mouse::setMB
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ?getMB@Mouse@@SA_NH@Z
_TEXT	SEGMENT
?getMB@Mouse@@SA_NH@Z PROC				; Mouse::getMB, COMDAT
; _index$dead$ = ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  00000	68 00 00 00 00	 push	 OFFSET ?mut@Mouse@@2Vmutex@std@@A ; Mouse::mut
  00005	e8 00 00 00 00	 call	 __Mtx_lock
  0000a	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  0000d	85 c0		 test	 eax, eax
  0000f	74 09		 je	 SHORT $LN7@getMB

; 33   : 		_Throw_C_error(_Res);

  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  00017	83 c4 04	 add	 esp, 4
$LN7@getMB:
  0001a	53		 push	 ebx
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp

; 48   : 	bool value = mbs[index];

  0001b	8a 1d 00 00 00
	00		 mov	 bl, BYTE PTR ?mbs@Mouse@@0PA_NA
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  00021	68 00 00 00 00	 push	 OFFSET ?mut@Mouse@@2Vmutex@std@@A ; Mouse::mut
  00026	e8 00 00 00 00	 call	 __Mtx_unlock
  0002b	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  0002e	85 c0		 test	 eax, eax
  00030	74 09		 je	 SHORT $LN17@getMB

; 33   : 		_Throw_C_error(_Res);

  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  00038	83 c4 04	 add	 esp, 4
$LN17@getMB:
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp

; 50   : 	return value;

  0003b	8a c3		 mov	 al, bl
  0003d	5b		 pop	 ebx

; 51   : }

  0003e	c3		 ret	 0
?getMB@Mouse@@SA_NH@Z ENDP				; Mouse::getMB
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h
;	COMDAT ??0?$List@VKeyboardAction@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
??0?$List@VKeyboardAction@@$0BA@@@QAE@XZ PROC		; List<KeyboardAction,16>::List<KeyboardAction,16>, COMDAT
; _this$dead$ = ecx

; 12   : 	List()

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A ; Keyboard::actions
  00005	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL4@List:
  00010	49		 dec	 ecx
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp

; 5    : {

  00011	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00017	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  0001b	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  0001e	79 f0		 jns	 SHORT $LL4@List
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h

; 15   : 	}

  00020	b8 00 00 00 00	 mov	 eax, OFFSET ?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A ; Keyboard::actions
  00025	c3		 ret	 0
??0?$List@VKeyboardAction@@$0BA@@@QAE@XZ ENDP		; List<KeyboardAction,16>::List<KeyboardAction,16>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h
;	COMDAT ??0?$List@VMouseAction@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
??0?$List@VMouseAction@@$0BA@@@QAE@XZ PROC		; List<MouseAction,16>::List<MouseAction,16>, COMDAT
; _this$dead$ = ecx

; 12   : 	List()

  00000	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00005	b8 08 00 00 00	 mov	 eax, OFFSET ?actions@Mouse@@2V?$List@VMouseAction@@$0BA@@@A+8
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL4@List:
  00010	49		 dec	 ecx
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp

; 30   : {

  00011	c7 40 f8 00 00
	00 00		 mov	 DWORD PTR [eax-8], 0
  00018	c7 40 fc 00 00
	00 00		 mov	 DWORD PTR [eax-4], 0
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00025	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
  0002c	c6 40 08 00	 mov	 BYTE PTR [eax+8], 0
  00030	8d 40 14	 lea	 eax, DWORD PTR [eax+20]
  00033	79 db		 jns	 SHORT $LL4@List
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h

; 15   : 	}

  00035	b8 00 00 00 00	 mov	 eax, OFFSET ?actions@Mouse@@2V?$List@VMouseAction@@$0BA@@@A ; Mouse::actions
  0003a	c3		 ret	 0
??0?$List@VMouseAction@@$0BA@@@QAE@XZ ENDP		; List<MouseAction,16>::List<MouseAction,16>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ??_FKeyboardAction@@QAEXXZ
_TEXT	SEGMENT
??_FKeyboardAction@@QAEXXZ PROC				; KeyboardAction::`default constructor closure', COMDAT
; _this$ = ecx

; 5    : {

  00000	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1
  00006	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  0000a	c3		 ret	 0
??_FKeyboardAction@@QAEXXZ ENDP				; KeyboardAction::`default constructor closure'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ??_FMouseAction@@QAEXXZ
_TEXT	SEGMENT
??_FMouseAction@@QAEXXZ PROC				; MouseAction::`default constructor closure', COMDAT
; _this$ = ecx

; 30   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00014	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1
  0001b	c6 41 10 00	 mov	 BYTE PTR [ecx+16], 0
  0001f	c3		 ret	 0
??_FMouseAction@@QAEXXZ ENDP				; MouseAction::`default constructor closure'
_TEXT	ENDS
END
