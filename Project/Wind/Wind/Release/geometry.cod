; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

	TITLE	C:\Users\Glenn\Documents\GitHub\Wind\Project\Wind\Wind\geometry.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R2AxisAlignedXZ@geom@@8			; geom::AxisAlignedXZ::`RTTI Base Class Array'
PUBLIC	??_7AxisAlignedXZ@geom@@6B@			; geom::AxisAlignedXZ::`vftable'
PUBLIC	??_R0?AVAxisAlignedXZ@geom@@@8			; geom::AxisAlignedXZ `RTTI Type Descriptor'
PUBLIC	??_R4AxisAlignedYZ@geom@@6B@			; geom::AxisAlignedYZ::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@AxisAlignedYZ@geom@@8		; geom::AxisAlignedYZ::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4AxisAlignedFace@geom@@6B@			; geom::AxisAlignedFace::`RTTI Complete Object Locator'
PUBLIC	??_R4AxisAlignedXZ@geom@@6B@			; geom::AxisAlignedXZ::`RTTI Complete Object Locator'
PUBLIC	??_R4AxisAlignedXY@geom@@6B@			; geom::AxisAlignedXY::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@AxisAlignedXZ@geom@@8		; geom::AxisAlignedXZ::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVAxisAlignedXY@geom@@@8			; geom::AxisAlignedXY `RTTI Type Descriptor'
PUBLIC	??_R3AxisAlignedXY@geom@@8			; geom::AxisAlignedXY::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@AxisAlignedXY@geom@@8		; geom::AxisAlignedXY::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7AxisAlignedYZ@geom@@6B@			; geom::AxisAlignedYZ::`vftable'
PUBLIC	??_R3AxisAlignedFace@geom@@8			; geom::AxisAlignedFace::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AxisAlignedFace@geom@@8			; geom::AxisAlignedFace::`RTTI Base Class Array'
PUBLIC	??_7AxisAlignedFace@geom@@6B@			; geom::AxisAlignedFace::`vftable'
PUBLIC	??_7AxisAlignedXY@geom@@6B@			; geom::AxisAlignedXY::`vftable'
PUBLIC	??_R2AxisAlignedXY@geom@@8			; geom::AxisAlignedXY::`RTTI Base Class Array'
PUBLIC	??_R3AxisAlignedYZ@geom@@8			; geom::AxisAlignedYZ::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVAxisAlignedFace@geom@@@8		; geom::AxisAlignedFace `RTTI Type Descriptor'
PUBLIC	??_R0?AVAxisAlignedYZ@geom@@@8			; geom::AxisAlignedYZ `RTTI Type Descriptor'
PUBLIC	??_R2AxisAlignedYZ@geom@@8			; geom::AxisAlignedYZ::`RTTI Base Class Array'
PUBLIC	??_R3AxisAlignedXZ@geom@@8			; geom::AxisAlignedXZ::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@AxisAlignedFace@geom@@8		; geom::AxisAlignedFace::`RTTI Base Class Descriptor at (0,-1,0,64)'
;	COMDAT ??_R1A@?0A@EA@AxisAlignedFace@geom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AxisAlignedFace@geom@@8 DD FLAT:??_R0?AVAxisAlignedFace@geom@@@8 ; geom::AxisAlignedFace::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AxisAlignedFace@geom@@8
rdata$r	ENDS
;	COMDAT ??_R3AxisAlignedXZ@geom@@8
rdata$r	SEGMENT
??_R3AxisAlignedXZ@geom@@8 DD 00H			; geom::AxisAlignedXZ::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2AxisAlignedXZ@geom@@8
rdata$r	ENDS
;	COMDAT ??_R2AxisAlignedYZ@geom@@8
rdata$r	SEGMENT
??_R2AxisAlignedYZ@geom@@8 DD FLAT:??_R1A@?0A@EA@AxisAlignedYZ@geom@@8 ; geom::AxisAlignedYZ::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@AxisAlignedFace@geom@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAxisAlignedYZ@geom@@@8
_DATA	SEGMENT
??_R0?AVAxisAlignedYZ@geom@@@8 DD FLAT:??_7type_info@@6B@ ; geom::AxisAlignedYZ `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAxisAlignedYZ@geom@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVAxisAlignedFace@geom@@@8
_DATA	SEGMENT
??_R0?AVAxisAlignedFace@geom@@@8 DD FLAT:??_7type_info@@6B@ ; geom::AxisAlignedFace `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAxisAlignedFace@geom@@', 00H
_DATA	ENDS
;	COMDAT ??_R3AxisAlignedYZ@geom@@8
rdata$r	SEGMENT
??_R3AxisAlignedYZ@geom@@8 DD 00H			; geom::AxisAlignedYZ::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2AxisAlignedYZ@geom@@8
rdata$r	ENDS
;	COMDAT ??_R2AxisAlignedXY@geom@@8
rdata$r	SEGMENT
??_R2AxisAlignedXY@geom@@8 DD FLAT:??_R1A@?0A@EA@AxisAlignedXY@geom@@8 ; geom::AxisAlignedXY::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@AxisAlignedFace@geom@@8
rdata$r	ENDS
;	COMDAT ??_7AxisAlignedXY@geom@@6B@
CONST	SEGMENT
??_7AxisAlignedXY@geom@@6B@ DD FLAT:??_R4AxisAlignedXY@geom@@6B@ ; geom::AxisAlignedXY::`vftable'
	DD	FLAT:?getNormal@AxisAlignedXY@geom@@UAE?AVVector@2@XZ
	DD	FLAT:?inside@AxisAlignedXY@geom@@UAE_NVVector@2@@Z
CONST	ENDS
;	COMDAT ??_7AxisAlignedFace@geom@@6B@
CONST	SEGMENT
??_7AxisAlignedFace@geom@@6B@ DD FLAT:??_R4AxisAlignedFace@geom@@6B@ ; geom::AxisAlignedFace::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R2AxisAlignedFace@geom@@8
rdata$r	SEGMENT
??_R2AxisAlignedFace@geom@@8 DD FLAT:??_R1A@?0A@EA@AxisAlignedFace@geom@@8 ; geom::AxisAlignedFace::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3AxisAlignedFace@geom@@8
rdata$r	SEGMENT
??_R3AxisAlignedFace@geom@@8 DD 00H			; geom::AxisAlignedFace::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2AxisAlignedFace@geom@@8
rdata$r	ENDS
;	COMDAT ??_7AxisAlignedYZ@geom@@6B@
CONST	SEGMENT
??_7AxisAlignedYZ@geom@@6B@ DD FLAT:??_R4AxisAlignedYZ@geom@@6B@ ; geom::AxisAlignedYZ::`vftable'
	DD	FLAT:?getNormal@AxisAlignedYZ@geom@@UAE?AVVector@2@XZ
	DD	FLAT:?inside@AxisAlignedYZ@geom@@UAE_NVVector@2@@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@AxisAlignedXY@geom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AxisAlignedXY@geom@@8 DD FLAT:??_R0?AVAxisAlignedXY@geom@@@8 ; geom::AxisAlignedXY::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AxisAlignedXY@geom@@8
rdata$r	ENDS
;	COMDAT ??_R3AxisAlignedXY@geom@@8
rdata$r	SEGMENT
??_R3AxisAlignedXY@geom@@8 DD 00H			; geom::AxisAlignedXY::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2AxisAlignedXY@geom@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAxisAlignedXY@geom@@@8
_DATA	SEGMENT
??_R0?AVAxisAlignedXY@geom@@@8 DD FLAT:??_7type_info@@6B@ ; geom::AxisAlignedXY `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAxisAlignedXY@geom@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@AxisAlignedXZ@geom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AxisAlignedXZ@geom@@8 DD FLAT:??_R0?AVAxisAlignedXZ@geom@@@8 ; geom::AxisAlignedXZ::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AxisAlignedXZ@geom@@8
rdata$r	ENDS
;	COMDAT ??_R4AxisAlignedXY@geom@@6B@
rdata$r	SEGMENT
??_R4AxisAlignedXY@geom@@6B@ DD 00H			; geom::AxisAlignedXY::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAxisAlignedXY@geom@@@8
	DD	FLAT:??_R3AxisAlignedXY@geom@@8
rdata$r	ENDS
;	COMDAT ??_R4AxisAlignedXZ@geom@@6B@
rdata$r	SEGMENT
??_R4AxisAlignedXZ@geom@@6B@ DD 00H			; geom::AxisAlignedXZ::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAxisAlignedXZ@geom@@@8
	DD	FLAT:??_R3AxisAlignedXZ@geom@@8
rdata$r	ENDS
;	COMDAT ??_R4AxisAlignedFace@geom@@6B@
rdata$r	SEGMENT
??_R4AxisAlignedFace@geom@@6B@ DD 00H			; geom::AxisAlignedFace::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAxisAlignedFace@geom@@@8
	DD	FLAT:??_R3AxisAlignedFace@geom@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AxisAlignedYZ@geom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AxisAlignedYZ@geom@@8 DD FLAT:??_R0?AVAxisAlignedYZ@geom@@@8 ; geom::AxisAlignedYZ::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AxisAlignedYZ@geom@@8
rdata$r	ENDS
;	COMDAT ??_R4AxisAlignedYZ@geom@@6B@
rdata$r	SEGMENT
??_R4AxisAlignedYZ@geom@@6B@ DD 00H			; geom::AxisAlignedYZ::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAxisAlignedYZ@geom@@@8
	DD	FLAT:??_R3AxisAlignedYZ@geom@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAxisAlignedXZ@geom@@@8
_DATA	SEGMENT
??_R0?AVAxisAlignedXZ@geom@@@8 DD FLAT:??_7type_info@@6B@ ; geom::AxisAlignedXZ `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAxisAlignedXZ@geom@@', 00H
_DATA	ENDS
;	COMDAT ??_7AxisAlignedXZ@geom@@6B@
CONST	SEGMENT
??_7AxisAlignedXZ@geom@@6B@ DD FLAT:??_R4AxisAlignedXZ@geom@@6B@ ; geom::AxisAlignedXZ::`vftable'
	DD	FLAT:?getNormal@AxisAlignedXZ@geom@@UAE?AVVector@2@XZ
	DD	FLAT:?inside@AxisAlignedXZ@geom@@UAE_NVVector@2@@Z
CONST	ENDS
;	COMDAT ??_R2AxisAlignedXZ@geom@@8
rdata$r	SEGMENT
??_R2AxisAlignedXZ@geom@@8 DD FLAT:??_R1A@?0A@EA@AxisAlignedXZ@geom@@8 ; geom::AxisAlignedXZ::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@AxisAlignedFace@geom@@8
PUBLIC	??0AxisAlignedCube@geom@@QAE@VVector@1@0@Z	; geom::AxisAlignedCube::AxisAlignedCube
PUBLIC	?inside@AxisAlignedYZ@geom@@UAE_NVVector@2@@Z	; geom::AxisAlignedYZ::inside
PUBLIC	?getNormal@AxisAlignedYZ@geom@@UAE?AVVector@2@XZ ; geom::AxisAlignedYZ::getNormal
PUBLIC	?inside@AxisAlignedXZ@geom@@UAE_NVVector@2@@Z	; geom::AxisAlignedXZ::inside
PUBLIC	?getNormal@AxisAlignedXZ@geom@@UAE?AVVector@2@XZ ; geom::AxisAlignedXZ::getNormal
PUBLIC	?inside@AxisAlignedXY@geom@@UAE_NVVector@2@@Z	; geom::AxisAlignedXY::inside
PUBLIC	?getNormal@AxisAlignedXY@geom@@UAE?AVVector@2@XZ ; geom::AxisAlignedXY::getNormal
PUBLIC	?perspective@Matrix@geom@@SA?AV12@MMMM@Z	; geom::Matrix::perspective
PUBLIC	?rotate@Matrix@geom@@SA?AV12@MMMM@Z		; geom::Matrix::rotate
PUBLIC	?translate@Matrix@geom@@SA?AV12@MMM@Z		; geom::Matrix::translate
PUBLIC	?scale@Matrix@geom@@SA?AV12@MMM@Z		; geom::Matrix::scale
PUBLIC	?identity@Matrix@geom@@SA?AV12@XZ		; geom::Matrix::identity
PUBLIC	??4Matrix@geom@@QAEAAV01@ABV01@@Z		; geom::Matrix::operator=
PUBLIC	??DMatrix@geom@@QBE?AV01@ABV01@@Z		; geom::Matrix::operator*
PUBLIC	??AMatrix@geom@@QAEAAMH@Z			; geom::Matrix::operator[]
PUBLIC	??0Matrix@geom@@QAE@PAM@Z			; geom::Matrix::Matrix
PUBLIC	??0Matrix@geom@@QAE@XZ				; geom::Matrix::Matrix
PUBLIC	?index@Matrix@geom@@ABEHHH@Z			; geom::Matrix::index
PUBLIC	??DVector@geom@@QBE?AV01@M@Z			; geom::Vector::operator*
PUBLIC	??0Vector@geom@@QAE@MMMM@Z			; geom::Vector::Vector
PUBLIC	??0Vector@geom@@QAE@AAV01@@Z			; geom::Vector::Vector
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??0Vector@geom@@QAE@AAV01@@Z
_TEXT	SEGMENT
_vec$ = 8						; size = 4
??0Vector@geom@@QAE@AAV01@@Z PROC			; geom::Vector::Vector, COMDAT
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR _vec$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00010	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00013	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00016	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00019	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 11   : 	
; 12   : }

  0001c	8b c1		 mov	 eax, ecx
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??0Vector@geom@@QAE@AAV01@@Z ENDP			; geom::Vector::Vector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??0Vector@geom@@QAE@MMMM@Z
_TEXT	SEGMENT
_w$ = 8							; size = 4
??0Vector@geom@@QAE@MMMM@Z PROC				; geom::Vector::Vector, COMDAT
; _this$ = ecx
; _x$ = xmm1s
; _y$ = xmm2s
; _z$ = xmm3s

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _w$[ebp]
  00008	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1
  0000c	f3 0f 11 51 04	 movss	 DWORD PTR [ecx+4], xmm2
  00011	f3 0f 11 59 08	 movss	 DWORD PTR [ecx+8], xmm3
  00016	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0

; 17   : 	
; 18   : }

  0001b	8b c1		 mov	 eax, ecx
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??0Vector@geom@@QAE@MMMM@Z ENDP				; geom::Vector::Vector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??DVector@geom@@QBE?AV01@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??DVector@geom@@QBE?AV01@M@Z PROC			; geom::Vector::operator*, COMDAT
; _this$ = ecx
; _f$ = xmm2s

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	return Vector(x * f, y * f, z * f);

  00003	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]

; 16   : {

  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 63   : 	return Vector(x * f, y * f, z * f);

  0000a	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 16   : {

  0000e	c7 40 0c 00 00
	80 3f		 mov	 DWORD PTR [eax+12], 1065353216 ; 3f800000H
  00015	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 63   : 	return Vector(x * f, y * f, z * f);

  00019	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0001e	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 16   : {

  00022	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 63   : 	return Vector(x * f, y * f, z * f);

  00027	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0002c	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 16   : {

  00030	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 64   : }

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??DVector@geom@@QBE?AV01@M@Z ENDP			; geom::Vector::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?index@Matrix@geom@@ABEHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?index@Matrix@geom@@ABEHHH@Z PROC			; geom::Matrix::index, COMDAT
; _this$dead$ = ecx

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 136  : 	return x + (y << 2);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00009	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 137  : }

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?index@Matrix@geom@@ABEHHH@Z ENDP			; geom::Matrix::index
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??0Matrix@geom@@QAE@XZ
_TEXT	SEGMENT
??0Matrix@geom@@QAE@XZ PROC				; geom::Matrix::Matrix, COMDAT
; _this$ = ecx

; 140  : {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 141  : 	for(int i = 0; i < 16; i++)
; 142  : 	{
; 143  : 		data[i] = 0.0f;

  00003	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00007	66 0f d6 41 08	 movq	 QWORD PTR [ecx+8], xmm0
  0000c	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  00011	66 0f d6 41 18	 movq	 QWORD PTR [ecx+24], xmm0
  00016	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  0001b	66 0f d6 41 28	 movq	 QWORD PTR [ecx+40], xmm0
  00020	66 0f d6 41 30	 movq	 QWORD PTR [ecx+48], xmm0
  00025	66 0f d6 41 38	 movq	 QWORD PTR [ecx+56], xmm0

; 144  : 	}
; 145  : }

  0002a	8b c1		 mov	 eax, ecx
  0002c	c3		 ret	 0
??0Matrix@geom@@QAE@XZ ENDP				; geom::Matrix::Matrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??0Matrix@geom@@QAE@PAM@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
??0Matrix@geom@@QAE@PAM@Z PROC				; geom::Matrix::Matrix, COMDAT
; _this$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 149  : 	for(int i = 0; i < 16; i++)
; 150  : 	{
; 151  : 		this->data[i] = data[i];

  00003	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00010	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00013	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00016	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00019	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0001c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0001f	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00022	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00025	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00028	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0002b	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  0002e	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00031	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00034	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00037	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  0003a	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0003d	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  00040	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00043	89 41 28	 mov	 DWORD PTR [ecx+40], eax
  00046	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00049	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
  0004c	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0004f	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  00052	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00055	89 41 34	 mov	 DWORD PTR [ecx+52], eax
  00058	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0005b	89 41 38	 mov	 DWORD PTR [ecx+56], eax
  0005e	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00061	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 152  : 	}
; 153  : }

  00064	8b c1		 mov	 eax, ecx
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
??0Matrix@geom@@QAE@PAM@Z ENDP				; geom::Matrix::Matrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??AMatrix@geom@@QAEAAMH@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
??AMatrix@geom@@QAEAAMH@Z PROC				; geom::Matrix::operator[], COMDAT
; _this$ = ecx

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 162  : 	return data[index];

  00003	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  00006	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 163  : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
??AMatrix@geom@@QAEAAMH@Z ENDP				; geom::Matrix::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??DMatrix@geom@@QBE?AV01@ABV01@@Z
_TEXT	SEGMENT
tv1055 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_mat$ = 12						; size = 4
??DMatrix@geom@@QBE?AV01@ABV01@@Z PROC			; geom::Matrix::operator*, COMDAT
; _this$ = ecx

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 143  : 		data[i] = 0.0f;

  00004	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0000e	66 0f d6 40 08	 movq	 QWORD PTR [eax+8], xmm0
  00013	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
  00018	66 0f d6 40 18	 movq	 QWORD PTR [eax+24], xmm0
  0001d	53		 push	 ebx
  0001e	66 0f d6 40 20	 movq	 QWORD PTR [eax+32], xmm0
  00023	66 0f d6 40 28	 movq	 QWORD PTR [eax+40], xmm0
  00028	56		 push	 esi
  00029	66 0f d6 40 30	 movq	 QWORD PTR [eax+48], xmm0
  0002e	57		 push	 edi
  0002f	66 0f d6 40 38	 movq	 QWORD PTR [eax+56], xmm0

; 168  : 	Matrix result;
; 169  : 
; 170  : 	for(int i = 0; i < 4; i++)

  00034	8b f8		 mov	 edi, eax
  00036	8b 45 0c	 mov	 eax, DWORD PTR _mat$[ebp]
  00039	83 c1 08	 add	 ecx, 8
  0003c	89 4d fc	 mov	 DWORD PTR tv1055[ebp], ecx
  0003f	83 c0 20	 add	 eax, 32			; 00000020H
  00042	bb 04 00 00 00	 mov	 ebx, 4
  00047	0f 57 f6	 xorps	 xmm6, xmm6
  0004a	8d 9b 00 00 00
	00		 npad	 6
$LL9@operator:

; 171  : 	{
; 172  : 		for(int j = 0; j < 4; j++)

  00050	f3 0f 10 50 e0	 movss	 xmm2, DWORD PTR [eax-32]
  00055	f3 0f 10 58 f0	 movss	 xmm3, DWORD PTR [eax-16]
  0005a	f3 0f 10 20	 movss	 xmm4, DWORD PTR [eax]
  0005e	f3 0f 10 68 10	 movss	 xmm5, DWORD PTR [eax+16]
  00063	8b d7		 mov	 edx, edi
  00065	be 04 00 00 00	 mov	 esi, 4
  0006a	8d 9b 00 00 00
	00		 npad	 6
$LL6@operator:

; 173  : 		{
; 174  : 			float value = 0.0f;
; 175  : 			for(int k = 0; k < 4; k++)
; 176  : 			{
; 177  : 				value += data[index(k, j)] * mat.data[index(i, k)];

  00070	f3 0f 10 49 f8	 movss	 xmm1, DWORD PTR [ecx-8]
  00075	f3 0f 10 41 fc	 movss	 xmm0, DWORD PTR [ecx-4]
  0007a	f3 0f 59 ca	 mulss	 xmm1, xmm2
  0007e	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00082	f3 0f 58 ce	 addss	 xmm1, xmm6
  00086	83 c1 10	 add	 ecx, 16			; 00000010H
  00089	83 c2 10	 add	 edx, 16			; 00000010H
  0008c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00090	0f 28 c4	 movaps	 xmm0, xmm4
  00093	f3 0f 59 41 f0	 mulss	 xmm0, DWORD PTR [ecx-16]
  00098	f3 0f 58 c8	 addss	 xmm1, xmm0
  0009c	f3 0f 10 41 f4	 movss	 xmm0, DWORD PTR [ecx-12]
  000a1	f3 0f 59 c5	 mulss	 xmm0, xmm5
  000a5	f3 0f 58 c8	 addss	 xmm1, xmm0

; 178  : 			}
; 179  : 			result[index(i, j)] = value;

  000a9	f3 0f 11 4a f0	 movss	 DWORD PTR [edx-16], xmm1
  000ae	4e		 dec	 esi
  000af	75 bf		 jne	 SHORT $LL6@operator

; 168  : 	Matrix result;
; 169  : 
; 170  : 	for(int i = 0; i < 4; i++)

  000b1	8b 4d fc	 mov	 ecx, DWORD PTR tv1055[ebp]
  000b4	83 c0 04	 add	 eax, 4
  000b7	83 c7 04	 add	 edi, 4
  000ba	4b		 dec	 ebx
  000bb	75 93		 jne	 SHORT $LL9@operator

; 180  : 		}
; 181  : 	}
; 182  : 
; 183  : 	return result;

  000bd	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi
  000c2	5b		 pop	 ebx

; 184  : }

  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c2 08 00	 ret	 8
??DMatrix@geom@@QBE?AV01@ABV01@@Z ENDP			; geom::Matrix::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??4Matrix@geom@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_mat$ = 8						; size = 4
??4Matrix@geom@@QAEAAV01@ABV01@@Z PROC			; geom::Matrix::operator=, COMDAT
; _this$ = ecx

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 212  : 	for(int i = 0; i < 16; i++)

  00006	8b 7d 08	 mov	 edi, DWORD PTR _mat$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  0000e	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
  00011	2b fb		 sub	 edi, ebx
  00013	b9 02 00 00 00	 mov	 ecx, 2
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL3@operator:

; 213  : 	{
; 214  : 		data[i] = mat.data[i];

  00020	8b 46 f4	 mov	 eax, DWORD PTR [esi-12]
  00023	89 42 fc	 mov	 DWORD PTR [edx-4], eax
  00026	8b 04 17	 mov	 eax, DWORD PTR [edi+edx]
  00029	89 02		 mov	 DWORD PTR [edx], eax
  0002b	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  0002e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00036	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00039	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  0003c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0003f	89 42 10	 mov	 DWORD PTR [edx+16], eax
  00042	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00045	89 42 14	 mov	 DWORD PTR [edx+20], eax
  00048	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0004b	89 42 18	 mov	 DWORD PTR [edx+24], eax
  0004e	8d 52 20	 lea	 edx, DWORD PTR [edx+32]
  00051	8d 76 20	 lea	 esi, DWORD PTR [esi+32]
  00054	49		 dec	 ecx
  00055	75 c9		 jne	 SHORT $LL3@operator

; 215  : 	}
; 216  : 
; 217  : 	return *this;

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	8b c3		 mov	 eax, ebx
  0005b	5b		 pop	 ebx

; 218  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
??4Matrix@geom@@QAEAAV01@ABV01@@Z ENDP			; geom::Matrix::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?identity@Matrix@geom@@SA?AV12@XZ
_TEXT	SEGMENT
?identity@Matrix@geom@@SA?AV12@XZ PROC			; geom::Matrix::identity, COMDAT
; ___$ReturnUdt$ = ecx

; 221  : {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 143  : 		data[i] = 0.0f;

  00003	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00007	66 0f d6 41 08	 movq	 QWORD PTR [ecx+8], xmm0
  0000c	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  00011	66 0f d6 41 18	 movq	 QWORD PTR [ecx+24], xmm0
  00016	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  0001b	66 0f d6 41 28	 movq	 QWORD PTR [ecx+40], xmm0
  00020	66 0f d6 41 30	 movq	 QWORD PTR [ecx+48], xmm0
  00025	66 0f d6 41 38	 movq	 QWORD PTR [ecx+56], xmm0

; 222  : 	Matrix result;
; 223  : 	result[0] = 1.0f;

  0002a	c7 01 00 00 80
	3f		 mov	 DWORD PTR [ecx], 1065353216 ; 3f800000H

; 224  : 	result[5] = 1.0f;

  00030	c7 41 14 00 00
	80 3f		 mov	 DWORD PTR [ecx+20], 1065353216 ; 3f800000H

; 225  : 	result[10] = 1.0f;

  00037	c7 41 28 00 00
	80 3f		 mov	 DWORD PTR [ecx+40], 1065353216 ; 3f800000H

; 226  : 	result[15] = 1.0f;

  0003e	c7 41 3c 00 00
	80 3f		 mov	 DWORD PTR [ecx+60], 1065353216 ; 3f800000H

; 227  : 
; 228  : 	return result;

  00045	8b c1		 mov	 eax, ecx

; 229  : }

  00047	c3		 ret	 0
?identity@Matrix@geom@@SA?AV12@XZ ENDP			; geom::Matrix::identity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?scale@Matrix@geom@@SA?AV12@MMM@Z
_TEXT	SEGMENT
?scale@Matrix@geom@@SA?AV12@MMM@Z PROC			; geom::Matrix::scale, COMDAT
; ___$ReturnUdt$ = ecx
; _x$ = xmm1s
; _y$ = xmm2s
; _z$ = xmm3s

; 232  : {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 143  : 		data[i] = 0.0f;

  00003	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00007	66 0f d6 41 08	 movq	 QWORD PTR [ecx+8], xmm0
  0000c	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  00011	66 0f d6 41 18	 movq	 QWORD PTR [ecx+24], xmm0
  00016	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  0001b	66 0f d6 41 28	 movq	 QWORD PTR [ecx+40], xmm0
  00020	66 0f d6 41 30	 movq	 QWORD PTR [ecx+48], xmm0
  00025	66 0f d6 41 38	 movq	 QWORD PTR [ecx+56], xmm0

; 233  : 	Matrix result;
; 234  : 	result[0] = x;

  0002a	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1

; 235  : 	result[5] = y;

  0002e	f3 0f 11 51 14	 movss	 DWORD PTR [ecx+20], xmm2

; 236  : 	result[10] = z;

  00033	f3 0f 11 59 28	 movss	 DWORD PTR [ecx+40], xmm3

; 237  : 	result[15] = 1.0f;

  00038	c7 41 3c 00 00
	80 3f		 mov	 DWORD PTR [ecx+60], 1065353216 ; 3f800000H

; 238  : 
; 239  : 	return result;

  0003f	8b c1		 mov	 eax, ecx

; 240  : }

  00041	c3		 ret	 0
?scale@Matrix@geom@@SA?AV12@MMM@Z ENDP			; geom::Matrix::scale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?translate@Matrix@geom@@SA?AV12@MMM@Z
_TEXT	SEGMENT
?translate@Matrix@geom@@SA?AV12@MMM@Z PROC		; geom::Matrix::translate, COMDAT
; ___$ReturnUdt$ = ecx
; _x$ = xmm1s
; _y$ = xmm2s
; _z$ = xmm3s

; 243  : {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 143  : 		data[i] = 0.0f;

  00003	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00007	66 0f d6 41 08	 movq	 QWORD PTR [ecx+8], xmm0
  0000c	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  00011	66 0f d6 41 18	 movq	 QWORD PTR [ecx+24], xmm0
  00016	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  0001b	66 0f d6 41 28	 movq	 QWORD PTR [ecx+40], xmm0
  00020	66 0f d6 41 30	 movq	 QWORD PTR [ecx+48], xmm0
  00025	66 0f d6 41 38	 movq	 QWORD PTR [ecx+56], xmm0

; 144  : 	}
; 145  : }
; 146  : 
; 147  : Matrix::Matrix(float* data)
; 148  : {
; 149  : 	for(int i = 0; i < 16; i++)
; 150  : 	{
; 151  : 		this->data[i] = data[i];
; 152  : 	}
; 153  : }
; 154  : 
; 155  : const float& Matrix::operator[](int index) const
; 156  : {
; 157  : 	return data[index];
; 158  : }
; 159  : 
; 160  : float& Matrix::operator[](int index)
; 161  : {
; 162  : 	return data[index];
; 163  : }
; 164  : 
; 165  : 
; 166  : Matrix Matrix::operator*(const Matrix& mat) const
; 167  : {
; 168  : 	Matrix result;
; 169  : 
; 170  : 	for(int i = 0; i < 4; i++)
; 171  : 	{
; 172  : 		for(int j = 0; j < 4; j++)
; 173  : 		{
; 174  : 			float value = 0.0f;
; 175  : 			for(int k = 0; k < 4; k++)
; 176  : 			{
; 177  : 				value += data[index(k, j)] * mat.data[index(i, k)];
; 178  : 			}
; 179  : 			result[index(i, j)] = value;
; 180  : 		}
; 181  : 	}
; 182  : 
; 183  : 	return result;
; 184  : }
; 185  : 
; 186  : Matrix Matrix::operator*(const float& scalar) const
; 187  : {
; 188  : 	Matrix result;
; 189  : 
; 190  : 	for(int i = 0; i < 16; i++)
; 191  : 	{
; 192  : 		result[i] = data[i] * scalar;
; 193  : 	}
; 194  : 
; 195  : 	return result;
; 196  : }
; 197  : 
; 198  : Vector Matrix::operator*(const Vector& vert) const
; 199  : {
; 200  : 	Vector result;
; 201  : 
; 202  : 	result.x = vert.x * data[0] + vert.y * data[1] + vert.z * data[2] + vert.w * data[3];
; 203  : 	result.y = vert.x * data[4] + vert.y * data[5] + vert.z * data[6] + vert.w * data[7];
; 204  : 	result.z = vert.x * data[8] + vert.y * data[9] + vert.z * data[10] + vert.w * data[11];
; 205  : 	result.w = vert.x * data[12] + vert.y * data[13] + vert.z * data[14] + vert.w * data[15];
; 206  : 
; 207  : 	return result;
; 208  : }
; 209  : 
; 210  : Matrix& Matrix::operator=(const Matrix& mat)
; 211  : {
; 212  : 	for(int i = 0; i < 16; i++)
; 213  : 	{
; 214  : 		data[i] = mat.data[i];
; 215  : 	}
; 216  : 
; 217  : 	return *this;
; 218  : }
; 219  : 
; 220  : Matrix Matrix::identity()
; 221  : {
; 222  : 	Matrix result;
; 223  : 	result[0] = 1.0f;

  0002a	c7 01 00 00 80
	3f		 mov	 DWORD PTR [ecx], 1065353216 ; 3f800000H

; 224  : 	result[5] = 1.0f;

  00030	c7 41 14 00 00
	80 3f		 mov	 DWORD PTR [ecx+20], 1065353216 ; 3f800000H

; 225  : 	result[10] = 1.0f;

  00037	c7 41 28 00 00
	80 3f		 mov	 DWORD PTR [ecx+40], 1065353216 ; 3f800000H

; 226  : 	result[15] = 1.0f;

  0003e	c7 41 3c 00 00
	80 3f		 mov	 DWORD PTR [ecx+60], 1065353216 ; 3f800000H

; 244  : 	Matrix result = identity();
; 245  : 	result[3] = x;

  00045	f3 0f 11 49 0c	 movss	 DWORD PTR [ecx+12], xmm1

; 246  : 	result[7] = y;

  0004a	f3 0f 11 51 1c	 movss	 DWORD PTR [ecx+28], xmm2

; 247  : 	result[11] = z;

  0004f	f3 0f 11 59 2c	 movss	 DWORD PTR [ecx+44], xmm3

; 248  : 
; 249  : 	return result;

  00054	8b c1		 mov	 eax, ecx

; 250  : }

  00056	c3		 ret	 0
?translate@Matrix@geom@@SA?AV12@MMM@Z ENDP		; geom::Matrix::translate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?rotate@Matrix@geom@@SA?AV12@MMMM@Z
_TEXT	SEGMENT
tv219 = -100						; size = 8
_y$1$ = -88						; size = 4
_s$1$ = -84						; size = 4
_x$1$ = -80						; size = 4
_matData$ = -76						; size = 64
__$ArrayPad$ = -8					; size = 4
_z$ = 8							; size = 4
?rotate@Matrix@geom@@SA?AV12@MMMM@Z PROC		; geom::Matrix::rotate, COMDAT
; ___$ReturnUdt$ = ecx
; _degrees$ = xmm1s
; _x$ = xmm2s
; _y$ = xmm3s

; 277  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 f8	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	0f 57 c0	 xorps	 xmm0, xmm0

; 278  : 	float s = (float)sin(degrees * M_PI / 180.0f);

  00013	f3 0f 5a c1	 cvtss2sd xmm0, xmm1
  00017	56		 push	 esi
  00018	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb54442d18
  00020	f3 0f 11 5d a8	 movss	 DWORD PTR _y$1$[ebp], xmm3
  00025	f3 0f 11 55 b0	 movss	 DWORD PTR _x$1$[ebp], xmm2
  0002a	8b f1		 mov	 esi, ecx
  0002c	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4066800000000000
  00034	f2 0f 11 45 9c	 movsd	 QWORD PTR tv219[ebp], xmm0
  00039	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  0003e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00042	f3 0f 11 45 ac	 movss	 DWORD PTR _s$1$[ebp], xmm0

; 279  : 	float c = (float)cos(degrees * M_PI / 180.0f);

  00047	f2 0f 10 45 9c	 movsd	 xmm0, QWORD PTR tv219[ebp]
  0004c	e8 00 00 00 00	 call	 __libm_sse2_cos_precise

; 280  : 
; 281  : 	float matData[] = {
; 282  : 		x + (y + z) * c, z * -s, y * s, 0.0f,

  00051	f3 0f 10 7d a8	 movss	 xmm7, DWORD PTR _y$1$[ebp]
  00056	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _z$[ebp]
  0005b	f3 0f 10 75 ac	 movss	 xmm6, DWORD PTR _s$1$[ebp]
  00060	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000
  00068	0f 57 ed	 xorps	 xmm5, xmm5
  0006b	f2 0f 5a e8	 cvtsd2ss xmm5, xmm0
  0006f	0f 28 c7	 movaps	 xmm0, xmm7
  00072	f3 0f 58 c4	 addss	 xmm0, xmm4
  00076	0f 28 ce	 movaps	 xmm1, xmm6
  00079	f3 0f 59 cc	 mulss	 xmm1, xmm4
  0007d	0f 28 d6	 movaps	 xmm2, xmm6
  00080	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 283  : 		z * s, y + (x + z) * c, x * -s, 0.0f,

  00084	f3 0f 11 4d c4	 movss	 DWORD PTR _matData$[ebp+16], xmm1
  00089	f3 0f 59 d7	 mulss	 xmm2, xmm7
  0008d	f3 0f 58 45 b0	 addss	 xmm0, DWORD PTR _x$1$[ebp]
  00092	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _matData$[ebp+12], 0
  00099	f3 0f 11 55 bc	 movss	 DWORD PTR _matData$[ebp+8], xmm2
  0009e	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _matData$[ebp+28], 0

; 284  : 		y * -s, x * s, z + (x + y) * c, 0.0f,

  000a5	0f 57 d3	 xorps	 xmm2, xmm3
  000a8	f3 0f 11 45 b4	 movss	 DWORD PTR _matData$[ebp], xmm0

; 151  : 		this->data[i] = data[i];

  000ad	8b 45 b4	 mov	 eax, DWORD PTR _matData$[ebp]
  000b0	89 06		 mov	 DWORD PTR [esi], eax

; 280  : 
; 281  : 	float matData[] = {
; 282  : 		x + (y + z) * c, z * -s, y * s, 0.0f,

  000b2	0f 28 c1	 movaps	 xmm0, xmm1

; 283  : 		z * s, y + (x + z) * c, x * -s, 0.0f,

  000b5	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _x$1$[ebp]
  000ba	0f 57 c3	 xorps	 xmm0, xmm3
  000bd	f3 0f 11 45 b8	 movss	 DWORD PTR _matData$[ebp+4], xmm0

; 151  : 		this->data[i] = data[i];

  000c2	8b 45 b8	 mov	 eax, DWORD PTR _matData$[ebp+4]
  000c5	89 46 04	 mov	 DWORD PTR [esi+4], eax
  000c8	8b 45 bc	 mov	 eax, DWORD PTR _matData$[ebp+8]

; 283  : 		z * s, y + (x + z) * c, x * -s, 0.0f,

  000cb	0f 28 c1	 movaps	 xmm0, xmm1
  000ce	f3 0f 58 c4	 addss	 xmm0, xmm4

; 151  : 		this->data[i] = data[i];

  000d2	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000d5	8b 45 c0	 mov	 eax, DWORD PTR _matData$[ebp+12]
  000d8	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  000db	8b 45 c4	 mov	 eax, DWORD PTR _matData$[ebp+16]

; 283  : 		z * s, y + (x + z) * c, x * -s, 0.0f,

  000de	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 151  : 		this->data[i] = data[i];

  000e2	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 283  : 		z * s, y + (x + z) * c, x * -s, 0.0f,

  000e5	f3 0f 59 f1	 mulss	 xmm6, xmm1
  000e9	f3 0f 58 c7	 addss	 xmm0, xmm7

; 284  : 		y * -s, x * s, z + (x + y) * c, 0.0f,

  000ed	f3 0f 58 cf	 addss	 xmm1, xmm7
  000f1	f3 0f 11 55 d4	 movss	 DWORD PTR _matData$[ebp+32], xmm2
  000f6	f3 0f 11 75 d8	 movss	 DWORD PTR _matData$[ebp+36], xmm6
  000fb	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _matData$[ebp+44], 0

; 151  : 		this->data[i] = data[i];

  00102	8b 4d e0	 mov	 ecx, DWORD PTR _matData$[ebp+44]

; 283  : 		z * s, y + (x + z) * c, x * -s, 0.0f,

  00105	f3 0f 11 45 c8	 movss	 DWORD PTR _matData$[ebp+20], xmm0

; 151  : 		this->data[i] = data[i];

  0010a	8b 45 c8	 mov	 eax, DWORD PTR _matData$[ebp+20]
  0010d	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 283  : 		z * s, y + (x + z) * c, x * -s, 0.0f,

  00110	0f 28 c6	 movaps	 xmm0, xmm6
  00113	0f 57 c3	 xorps	 xmm0, xmm3
  00116	f3 0f 11 45 cc	 movss	 DWORD PTR _matData$[ebp+24], xmm0

; 151  : 		this->data[i] = data[i];

  0011b	8b 45 cc	 mov	 eax, DWORD PTR _matData$[ebp+24]
  0011e	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00121	8b 45 d0	 mov	 eax, DWORD PTR _matData$[ebp+28]

; 284  : 		y * -s, x * s, z + (x + y) * c, 0.0f,

  00124	f3 0f 59 cd	 mulss	 xmm1, xmm5

; 151  : 		this->data[i] = data[i];

  00128	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0012b	8b 45 d4	 mov	 eax, DWORD PTR _matData$[ebp+32]

; 284  : 		y * -s, x * s, z + (x + y) * c, 0.0f,

  0012e	f3 0f 58 cc	 addss	 xmm1, xmm4

; 151  : 		this->data[i] = data[i];

  00132	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00135	8b 45 d8	 mov	 eax, DWORD PTR _matData$[ebp+36]
  00138	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 285  : 		0.0f, 0.0f, 0.0f, 1.0f

  0013b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _matData$[ebp+48], 0
  00142	f3 0f 11 4d dc	 movss	 DWORD PTR _matData$[ebp+40], xmm1

; 151  : 		this->data[i] = data[i];

  00147	8b 45 dc	 mov	 eax, DWORD PTR _matData$[ebp+40]

; 285  : 		0.0f, 0.0f, 0.0f, 1.0f

  0014a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _matData$[ebp+52], 0
  00151	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _matData$[ebp+56], 0

; 286  : 	};

  00158	c7 45 f0 00 00
	80 3f		 mov	 DWORD PTR _matData$[ebp+60], 1065353216 ; 3f800000H

; 151  : 		this->data[i] = data[i];

  0015f	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00162	89 4e 2c	 mov	 DWORD PTR [esi+44], ecx
  00165	8b 4d e4	 mov	 ecx, DWORD PTR _matData$[ebp+48]
  00168	89 4e 30	 mov	 DWORD PTR [esi+48], ecx
  0016b	8b 4d e8	 mov	 ecx, DWORD PTR _matData$[ebp+52]
  0016e	89 4e 34	 mov	 DWORD PTR [esi+52], ecx
  00171	8b 4d ec	 mov	 ecx, DWORD PTR _matData$[ebp+56]
  00174	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
  00177	8b 4d f0	 mov	 ecx, DWORD PTR _matData$[ebp+60]
  0017a	89 4e 3c	 mov	 DWORD PTR [esi+60], ecx

; 287  : 
; 288  : 	return Matrix(matData);
; 289  : }

  0017d	8b 4d f8	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00180	8b c6		 mov	 eax, esi
  00182	33 cd		 xor	 ecx, ebp
  00184	5e		 pop	 esi
  00185	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018a	8b e5		 mov	 esp, ebp
  0018c	5d		 pop	 ebp
  0018d	c3		 ret	 0
?rotate@Matrix@geom@@SA?AV12@MMMM@Z ENDP		; geom::Matrix::rotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?perspective@Matrix@geom@@SA?AV12@MMMM@Z
_TEXT	SEGMENT
_aspect$1$ = -84					; size = 4
_n$1$ = -80						; size = 4
_oneOverDepth$1$ = -76					; size = 4
_matData$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 4
?perspective@Matrix@geom@@SA?AV12@MMMM@Z PROC		; geom::Matrix::perspective, COMDAT
; ___$ReturnUdt$ = ecx
; _fov$ = xmm1s
; _aspect$ = xmm2s
; _n$ = xmm3s

; 292  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 293  : 	float frustumDepth = f - n;

  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _f$[ebp]
  00015	f3 0f 5c c3	 subss	 xmm0, xmm3
  00019	f3 0f 11 55 ac	 movss	 DWORD PTR _aspect$1$[ebp], xmm2

; 294  :     float oneOverDepth = 1 / frustumDepth;

  0001e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00026	56		 push	 esi
  00027	f3 0f 11 5d b0	 movss	 DWORD PTR _n$1$[ebp], xmm3
  0002c	f3 0f 5e d0	 divss	 xmm2, xmm0
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 295  : 
; 296  : 	float matData[] = {
; 297  : 		(1.0f / (float)tan(fov * M_PI / 360.0f)) / aspect, 0.0f, 0.0f, 0.0f,

  00033	f3 0f 5a c1	 cvtss2sd xmm0, xmm1
  00037	8b f1		 mov	 esi, ecx
  00039	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb54442d18
  00041	f3 0f 11 55 b4	 movss	 DWORD PTR _oneOverDepth$1$[ebp], xmm2
  00046	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4076800000000000
  0004e	e8 00 00 00 00	 call	 __libm_sse2_tan_precise
  00053	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0005b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0005f	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _matData$[ebp+4], 0
  00066	f3 0f 5e c8	 divss	 xmm1, xmm0
  0006a	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _matData$[ebp+8], 0
  00071	0f 28 c1	 movaps	 xmm0, xmm1
  00074	f3 0f 5e 45 ac	 divss	 xmm0, DWORD PTR _aspect$1$[ebp]
  00079	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _matData$[ebp+12], 0
  00080	f3 0f 11 45 b8	 movss	 DWORD PTR _matData$[ebp], xmm0

; 151  : 		this->data[i] = data[i];

  00085	8b 45 b8	 mov	 eax, DWORD PTR _matData$[ebp]

; 299  : 		0.0f, 0.0f, f * oneOverDepth, -f * n * oneOverDepth,

  00088	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _oneOverDepth$1$[ebp]
  0008d	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _f$[ebp]

; 151  : 		this->data[i] = data[i];

  00092	89 06		 mov	 DWORD PTR [esi], eax
  00094	8b 45 bc	 mov	 eax, DWORD PTR _matData$[ebp+4]
  00097	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0009a	8b 45 c0	 mov	 eax, DWORD PTR _matData$[ebp+8]
  0009d	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000a0	8b 45 c4	 mov	 eax, DWORD PTR _matData$[ebp+12]
  000a3	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 298  : 		0.0f, 1.0f / (float)tan(fov * M_PI / 360.0f), 0.0f, 0.0f,

  000a6	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _matData$[ebp+16], 0

; 151  : 		this->data[i] = data[i];

  000ad	8b 45 c8	 mov	 eax, DWORD PTR _matData$[ebp+16]
  000b0	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 299  : 		0.0f, 0.0f, f * oneOverDepth, -f * n * oneOverDepth,

  000b3	f3 0f 11 45 e0	 movss	 DWORD PTR _matData$[ebp+40], xmm0
  000b8	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _n$1$[ebp]
  000bd	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _f$[ebp]
  000c2	f3 0f 11 4d cc	 movss	 DWORD PTR _matData$[ebp+20], xmm1

; 151  : 		this->data[i] = data[i];

  000c7	8b 45 cc	 mov	 eax, DWORD PTR _matData$[ebp+20]

; 299  : 		0.0f, 0.0f, f * oneOverDepth, -f * n * oneOverDepth,

  000ca	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _oneOverDepth$1$[ebp]

; 151  : 		this->data[i] = data[i];

  000cf	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 298  : 		0.0f, 1.0f / (float)tan(fov * M_PI / 360.0f), 0.0f, 0.0f,

  000d2	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _matData$[ebp+24], 0

; 151  : 		this->data[i] = data[i];

  000d9	8b 45 d0	 mov	 eax, DWORD PTR _matData$[ebp+24]

; 299  : 		0.0f, 0.0f, f * oneOverDepth, -f * n * oneOverDepth,

  000dc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000

; 151  : 		this->data[i] = data[i];

  000e3	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 298  : 		0.0f, 1.0f / (float)tan(fov * M_PI / 360.0f), 0.0f, 0.0f,

  000e6	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _matData$[ebp+28], 0

; 151  : 		this->data[i] = data[i];

  000ed	8b 45 d4	 mov	 eax, DWORD PTR _matData$[ebp+28]
  000f0	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 299  : 		0.0f, 0.0f, f * oneOverDepth, -f * n * oneOverDepth,

  000f3	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _matData$[ebp+32], 0

; 151  : 		this->data[i] = data[i];

  000fa	8b 45 d8	 mov	 eax, DWORD PTR _matData$[ebp+32]
  000fd	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 299  : 		0.0f, 0.0f, f * oneOverDepth, -f * n * oneOverDepth,

  00100	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _matData$[ebp+36], 0

; 151  : 		this->data[i] = data[i];

  00107	8b 45 dc	 mov	 eax, DWORD PTR _matData$[ebp+36]
  0010a	89 46 24	 mov	 DWORD PTR [esi+36], eax
  0010d	8b 45 e0	 mov	 eax, DWORD PTR _matData$[ebp+40]
  00110	89 46 28	 mov	 DWORD PTR [esi+40], eax

; 299  : 		0.0f, 0.0f, f * oneOverDepth, -f * n * oneOverDepth,

  00113	f3 0f 11 45 e4	 movss	 DWORD PTR _matData$[ebp+44], xmm0

; 151  : 		this->data[i] = data[i];

  00118	8b 4d e4	 mov	 ecx, DWORD PTR _matData$[ebp+44]
  0011b	89 4e 2c	 mov	 DWORD PTR [esi+44], ecx

; 300  : 		0.0f, 0.0f, 1.0f, 0.0f

  0011e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _matData$[ebp+48], 0

; 151  : 		this->data[i] = data[i];

  00125	8b 4d e8	 mov	 ecx, DWORD PTR _matData$[ebp+48]
  00128	89 4e 30	 mov	 DWORD PTR [esi+48], ecx

; 300  : 		0.0f, 0.0f, 1.0f, 0.0f

  0012b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _matData$[ebp+52], 0

; 151  : 		this->data[i] = data[i];

  00132	8b 4d ec	 mov	 ecx, DWORD PTR _matData$[ebp+52]
  00135	89 4e 34	 mov	 DWORD PTR [esi+52], ecx

; 300  : 		0.0f, 0.0f, 1.0f, 0.0f

  00138	c7 45 f0 00 00
	80 3f		 mov	 DWORD PTR _matData$[ebp+56], 1065353216 ; 3f800000H

; 151  : 		this->data[i] = data[i];

  0013f	8b 4d f0	 mov	 ecx, DWORD PTR _matData$[ebp+56]
  00142	89 4e 38	 mov	 DWORD PTR [esi+56], ecx

; 301  : 	};

  00145	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _matData$[ebp+60], 0

; 151  : 		this->data[i] = data[i];

  0014c	8b 4d f4	 mov	 ecx, DWORD PTR _matData$[ebp+60]
  0014f	89 4e 3c	 mov	 DWORD PTR [esi+60], ecx

; 302  : 
; 303  : 	return Matrix(matData);
; 304  : }

  00152	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00155	8b c6		 mov	 eax, esi
  00157	33 cd		 xor	 ecx, ebp
  00159	5e		 pop	 esi
  0015a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c3		 ret	 0
?perspective@Matrix@geom@@SA?AV12@MMMM@Z ENDP		; geom::Matrix::perspective
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?getNormal@AxisAlignedXY@geom@@UAE?AVVector@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?getNormal@AxisAlignedXY@geom@@UAE?AVVector@2@XZ PROC	; geom::AxisAlignedXY::getNormal, COMDAT
; _this$ = ecx

; 374  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 16   : {

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00013	c7 40 08 00 00
	80 3f		 mov	 DWORD PTR [eax+8], 1065353216 ; 3f800000H
  0001a	c7 40 0c 00 00
	80 3f		 mov	 DWORD PTR [eax+12], 1065353216 ; 3f800000H

; 375  : 	return Vector(0.0f, 0.0f, 1.0f);
; 376  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?getNormal@AxisAlignedXY@geom@@UAE?AVVector@2@XZ ENDP	; geom::AxisAlignedXY::getNormal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?inside@AxisAlignedXY@geom@@UAE_NVVector@2@@Z
_TEXT	SEGMENT
_vec$ = 8						; size = 16
?inside@AxisAlignedXY@geom@@UAE_NVVector@2@@Z PROC	; geom::AxisAlignedXY::inside, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 380  : 	return vec.x >= pos.x & vec.x <= pos.x + width & vec.y >= pos.y & vec.y <= pos.y + height;

  00003	f3 0f 10 59 04	 movss	 xmm3, DWORD PTR [ecx+4]
  00008	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  0000d	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _vec$[ebp]
  00012	f3 0f 10 61 08	 movss	 xmm4, DWORD PTR [ecx+8]
  00017	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _vec$[ebp+4]
  0001c	f3 0f 58 c3	 addss	 xmm0, xmm3
  00020	33 d2		 xor	 edx, edx
  00022	0f 2f c2	 comiss	 xmm0, xmm2
  00025	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  0002a	0f 93 c2	 setae	 dl
  0002d	33 c0		 xor	 eax, eax
  0002f	f3 0f 58 c4	 addss	 xmm0, xmm4
  00033	0f 2f c1	 comiss	 xmm0, xmm1
  00036	0f 93 c0	 setae	 al
  00039	33 c9		 xor	 ecx, ecx
  0003b	23 c2		 and	 eax, edx
  0003d	0f 2f d3	 comiss	 xmm2, xmm3
  00040	0f 93 c1	 setae	 cl
  00043	23 c1		 and	 eax, ecx
  00045	33 c9		 xor	 ecx, ecx
  00047	0f 2f cc	 comiss	 xmm1, xmm4
  0004a	0f 93 c1	 setae	 cl
  0004d	23 c1		 and	 eax, ecx

; 381  : }

  0004f	5d		 pop	 ebp
  00050	c2 10 00	 ret	 16			; 00000010H
?inside@AxisAlignedXY@geom@@UAE_NVVector@2@@Z ENDP	; geom::AxisAlignedXY::inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?getNormal@AxisAlignedXZ@geom@@UAE?AVVector@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?getNormal@AxisAlignedXZ@geom@@UAE?AVVector@2@XZ PROC	; geom::AxisAlignedXZ::getNormal, COMDAT
; _this$ = ecx

; 390  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 16   : {

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0000c	c7 40 04 00 00
	80 3f		 mov	 DWORD PTR [eax+4], 1065353216 ; 3f800000H
  00013	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0001a	c7 40 0c 00 00
	80 3f		 mov	 DWORD PTR [eax+12], 1065353216 ; 3f800000H

; 391  : 	return Vector(0.0f, 1.0f, 0.0f);
; 392  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?getNormal@AxisAlignedXZ@geom@@UAE?AVVector@2@XZ ENDP	; geom::AxisAlignedXZ::getNormal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?inside@AxisAlignedXZ@geom@@UAE_NVVector@2@@Z
_TEXT	SEGMENT
_vec$ = 8						; size = 16
?inside@AxisAlignedXZ@geom@@UAE_NVVector@2@@Z PROC	; geom::AxisAlignedXZ::inside, COMDAT
; _this$ = ecx

; 395  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 396  : 	return vec.x >= pos.x & vec.x <= pos.x + width & vec.z >= pos.z & vec.z <= pos.z + height;

  00003	f3 0f 10 59 04	 movss	 xmm3, DWORD PTR [ecx+4]
  00008	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  0000d	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _vec$[ebp]
  00012	f3 0f 10 61 0c	 movss	 xmm4, DWORD PTR [ecx+12]
  00017	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _vec$[ebp+8]
  0001c	f3 0f 58 c3	 addss	 xmm0, xmm3
  00020	33 d2		 xor	 edx, edx
  00022	0f 2f c2	 comiss	 xmm0, xmm2
  00025	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  0002a	0f 93 c2	 setae	 dl
  0002d	33 c0		 xor	 eax, eax
  0002f	f3 0f 58 c4	 addss	 xmm0, xmm4
  00033	0f 2f c1	 comiss	 xmm0, xmm1
  00036	0f 93 c0	 setae	 al
  00039	33 c9		 xor	 ecx, ecx
  0003b	23 c2		 and	 eax, edx
  0003d	0f 2f d3	 comiss	 xmm2, xmm3
  00040	0f 93 c1	 setae	 cl
  00043	23 c1		 and	 eax, ecx
  00045	33 c9		 xor	 ecx, ecx
  00047	0f 2f cc	 comiss	 xmm1, xmm4
  0004a	0f 93 c1	 setae	 cl
  0004d	23 c1		 and	 eax, ecx

; 397  : }

  0004f	5d		 pop	 ebp
  00050	c2 10 00	 ret	 16			; 00000010H
?inside@AxisAlignedXZ@geom@@UAE_NVVector@2@@Z ENDP	; geom::AxisAlignedXZ::inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?getNormal@AxisAlignedYZ@geom@@UAE?AVVector@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?getNormal@AxisAlignedYZ@geom@@UAE?AVVector@2@XZ PROC	; geom::AxisAlignedYZ::getNormal, COMDAT
; _this$ = ecx

; 406  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 16   : {

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	c7 00 00 00 80
	3f		 mov	 DWORD PTR [eax], 1065353216 ; 3f800000H
  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00013	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0001a	c7 40 0c 00 00
	80 3f		 mov	 DWORD PTR [eax+12], 1065353216 ; 3f800000H

; 407  : 	return Vector(1.0f, 0.0f, 0.0f);
; 408  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?getNormal@AxisAlignedYZ@geom@@UAE?AVVector@2@XZ ENDP	; geom::AxisAlignedYZ::getNormal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?inside@AxisAlignedYZ@geom@@UAE_NVVector@2@@Z
_TEXT	SEGMENT
_vec$ = 8						; size = 16
?inside@AxisAlignedYZ@geom@@UAE_NVVector@2@@Z PROC	; geom::AxisAlignedYZ::inside, COMDAT
; _this$ = ecx

; 411  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 412  : 	return vec.y >= pos.y & vec.y <= pos.y + width & vec.z >= pos.z & vec.z <= pos.z + height;

  00003	f3 0f 10 59 08	 movss	 xmm3, DWORD PTR [ecx+8]
  00008	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  0000d	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _vec$[ebp+4]
  00012	f3 0f 10 61 0c	 movss	 xmm4, DWORD PTR [ecx+12]
  00017	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _vec$[ebp+8]
  0001c	f3 0f 58 c3	 addss	 xmm0, xmm3
  00020	33 d2		 xor	 edx, edx
  00022	0f 2f c2	 comiss	 xmm0, xmm2
  00025	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  0002a	0f 93 c2	 setae	 dl
  0002d	33 c0		 xor	 eax, eax
  0002f	f3 0f 58 c4	 addss	 xmm0, xmm4
  00033	0f 2f c1	 comiss	 xmm0, xmm1
  00036	0f 93 c0	 setae	 al
  00039	33 c9		 xor	 ecx, ecx
  0003b	23 c2		 and	 eax, edx
  0003d	0f 2f d3	 comiss	 xmm2, xmm3
  00040	0f 93 c1	 setae	 cl
  00043	23 c1		 and	 eax, ecx
  00045	33 c9		 xor	 ecx, ecx
  00047	0f 2f cc	 comiss	 xmm1, xmm4
  0004a	0f 93 c1	 setae	 cl
  0004d	23 c1		 and	 eax, ecx

; 413  : }

  0004f	5d		 pop	 ebp
  00050	c2 10 00	 ret	 16			; 00000010H
?inside@AxisAlignedYZ@geom@@UAE_NVVector@2@@Z ENDP	; geom::AxisAlignedYZ::inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??0AxisAlignedCube@geom@@QAE@VVector@1@0@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 16
_size$ = 24						; size = 16
??0AxisAlignedCube@geom@@QAE@VVector@1@0@Z PROC		; geom::AxisAlignedCube::AxisAlignedCube, COMDAT
; _this$ = ecx

; 417  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 10   : {

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _pos$[ebp]
  00008	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _pos$[ebp+4]
  00011	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00016	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _pos$[ebp+8]
  0001b	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00020	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _pos$[ebp+12]
  00025	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0
  0002a	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _size$[ebp]
  0002f	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0
  00034	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _size$[ebp+4]
  00039	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0
  0003e	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _size$[ebp+8]
  00043	f3 0f 11 41 18	 movss	 DWORD PTR [ecx+24], xmm0
  00048	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _size$[ebp+12]
  0004d	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0

; 418  : 
; 419  : }

  00052	8b c1		 mov	 eax, ecx
  00054	5d		 pop	 ebp
  00055	c2 20 00	 ret	 32			; 00000020H
??0AxisAlignedCube@geom@@QAE@VVector@1@0@Z ENDP		; geom::AxisAlignedCube::AxisAlignedCube
_TEXT	ENDS
END
