; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

	TITLE	C:\Users\Glenn\Documents\GitHub\Wind\Project\Wind\Wind\graphics.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@	; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ ; `string'
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@	; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_R0?AVsystem_error@std@@@8			; std::system_error `RTTI Type Descriptor'
PUBLIC	??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_R0?AV?$codecvt@DDH@std@@@8			; std::codecvt<char,char,int> `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4GeometryShader@gfxu@@6B@			; gfxu::GeometryShader::`RTTI Complete Object Locator'
PUBLIC	??_7Shader@gfxu@@6B@				; gfxu::Shader::`vftable'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__TI2?AVruntime_error@std@@
PUBLIC	??_R4Shader@gfxu@@6B@				; gfxu::Shader::`RTTI Complete Object Locator'
PUBLIC	??_R3system_error@std@@8			; std::system_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@VertexStream@gfxu@@8		; gfxu::VertexStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7FragmentShader@gfxu@@6B@			; gfxu::FragmentShader::`vftable'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2codecvt_base@std@@8			; std::codecvt_base::`RTTI Base Class Array'
PUBLIC	??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7?$codecvt@DDH@std@@6B@			; std::codecvt<char,char,int>::`vftable'
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R3VertexStream@gfxu@@8			; gfxu::VertexStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@codecvt_base@std@@8		; std::codecvt_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R0?AVcodecvt_base@std@@@8			; std::codecvt_base `RTTI Type Descriptor'
PUBLIC	??_R2_Facet_base@std@@8				; std::_Facet_base::`RTTI Base Class Array'
PUBLIC	??_R2GeometryShader@gfxu@@8			; gfxu::GeometryShader::`RTTI Base Class Array'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7_Facet_base@std@@6B@			; std::_Facet_base::`vftable'
PUBLIC	??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R3VertexShader@gfxu@@8			; gfxu::VertexShader::`RTTI Class Hierarchy Descriptor'
PUBLIC	__CTA2?AVruntime_error@std@@
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@system_error@std@@8		; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	??_R3FragmentShader@gfxu@@8			; gfxu::FragmentShader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7codecvt_base@std@@6B@			; std::codecvt_base::`vftable'
PUBLIC	??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
PUBLIC	??_7GeometryShader@gfxu@@6B@			; gfxu::GeometryShader::`vftable'
PUBLIC	??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R3_Facet_base@std@@8				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3codecvt_base@std@@8			; std::codecvt_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
PUBLIC	??_R0?AVShader@gfxu@@@8				; gfxu::Shader `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@FragmentShader@gfxu@@8		; gfxu::FragmentShader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVGeometryShader@gfxu@@@8			; gfxu::GeometryShader `RTTI Type Descriptor'
PUBLIC	?current@ShaderProgram@gfxu@@2PAV12@A		; gfxu::ShaderProgram::current
PUBLIC	?forceUpload@Uniforms@gfxu@@0_NA		; gfxu::Uniforms::forceUpload
PUBLIC	??_R4_Facet_base@std@@6B@			; std::_Facet_base::`RTTI Complete Object Locator'
PUBLIC	??_R2VertexShader@gfxu@@8			; gfxu::VertexShader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VertexShader@gfxu@@8		; gfxu::VertexShader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R2Shader@gfxu@@8				; gfxu::Shader::`RTTI Base Class Array'
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4VertexShader@gfxu@@6B@			; gfxu::VertexShader::`RTTI Complete Object Locator'
PUBLIC	??_R4VertexStream@gfxu@@6B@			; gfxu::VertexStream::`RTTI Complete Object Locator'
PUBLIC	??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_R0?AVFragmentShader@gfxu@@@8			; gfxu::FragmentShader `RTTI Type Descriptor'
PUBLIC	??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@GeometryShader@gfxu@@8		; gfxu::GeometryShader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7VertexStream@gfxu@@6B@			; gfxu::VertexStream::`vftable'
PUBLIC	??_R4FragmentShader@gfxu@@6B@			; gfxu::FragmentShader::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3Shader@gfxu@@8				; gfxu::Shader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
PUBLIC	??_R2VertexStream@gfxu@@8			; gfxu::VertexStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Shader@gfxu@@8			; gfxu::Shader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVVertexStream@gfxu@@@8			; gfxu::VertexStream `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVertexShader@gfxu@@@8			; gfxu::VertexShader `RTTI Type Descriptor'
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	??_R1A@?0A@EA@_Facet_base@std@@8		; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__TI4?AVfailure@ios_base@std@@
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_7VertexShader@gfxu@@6B@			; gfxu::VertexShader::`vftable'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV_Facet_base@std@@@8			; std::_Facet_base `RTTI Type Descriptor'
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??_R3GeometryShader@gfxu@@8			; gfxu::GeometryShader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R2system_error@std@@8			; std::system_error::`RTTI Base Class Array'
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2FragmentShader@gfxu@@8			; gfxu::FragmentShader::`RTTI Base Class Array'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	?vs@@3HA					; vs
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@?$codecvt@DDH@std@@8		; std::codecvt<char,char,int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R3?$codecvt@DDH@std@@8			; std::codecvt<char,char,int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7system_error@std@@6B@			; std::system_error::`vftable'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_R4?$codecvt@DDH@std@@6B@			; std::codecvt<char,char,int>::`RTTI Complete Object Locator'
PUBLIC	__CTA4?AVfailure@ios_base@std@@
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R4codecvt_base@std@@6B@			; std::codecvt_base::`RTTI Complete Object Locator'
PUBLIC	??_R2?$codecvt@DDH@std@@8			; std::codecvt<char,char,int>::`RTTI Base Class Array'
PUBLIC	??_R4system_error@std@@6B@			; std::system_error::`RTTI Complete Object Locator'
EXTRN	__imp__gluErrorString@4:PROC
EXTRN	__imp__glGenTextures@8:PROC
EXTRN	_fclose:PROC
EXTRN	_wcstombs:PROC
EXTRN	_mbstowcs_s:PROC
EXTRN	_fwrite:PROC
EXTRN	_memcpy_s:PROC
EXTRN	__Toupper:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__lock_file:PROC
EXTRN	_setvbuf:PROC
EXTRN	__imp__glTexParameteri@12:PROC
EXTRN	__Getctype:PROC
EXTRN	_fsetpos:PROC
EXTRN	__imp__glDrawArrays@12:PROC
EXTRN	__imp__glGetError@0:PROC
EXTRN	__imp__glTexImage2D@36:PROC
EXTRN	_fgetc:PROC
EXTRN	_fflush:PROC
EXTRN	__fseeki64:PROC
EXTRN	_fgetpos:PROC
EXTRN	__imp__glBindTexture@8:PROC
EXTRN	_ungetc:PROC
EXTRN	__unlock_file:PROC
EXTRN	_free:PROC
EXTRN	__Tolower:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Addstd@ios_base@std@@SAXPAV12@@Z:PROC		; std::ios_base::_Addstd
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	?_Fiopen@std@@YAPAU_iobuf@@PB_WHH@Z:PROC	; std::_Fiopen
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@_N@Z:PROC	; std::locale::_Init
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	?_BADOFF@std@@3_JB:QWORD			; std::_BADOFF
EXTRN	??0bad_cast@std@@QAE@ABV01@@Z:PROC		; std::bad_cast::bad_cast
EXTRN	??0bad_cast@std@@QAE@PBD@Z:PROC			; std::bad_cast::bad_cast
EXTRN	??1bad_cast@std@@UAE@XZ:PROC			; std::bad_cast::~bad_cast
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	_fputc:PROC
EXTRN	__imp__glDeleteTextures@8:PROC
;	COMDAT ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA
_BSS	SEGMENT
?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA DD 01H DUP (?) ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
?current@ShaderProgram@gfxu@@2PAV12@A DD 01H DUP (?)	; gfxu::ShaderProgram::current
?forceUpload@Uniforms@gfxu@@0_NA DB 01H DUP (?)		; gfxu::Uniforms::forceUpload
	ALIGN	4

?vs@@3HA DD	01H DUP (?)				; vs
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave
_BSS	ENDS
;	COMDAT ??_R4system_error@std@@6B@
rdata$r	SEGMENT
??_R4system_error@std@@6B@ DD 00H			; std::system_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$codecvt@DDH@std@@8
rdata$r	SEGMENT
??_R2?$codecvt@DDH@std@@8 DD FLAT:??_R1A@?0A@EA@?$codecvt@DDH@std@@8 ; std::codecvt<char,char,int>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@codecvt_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4codecvt_base@std@@6B@
rdata$r	SEGMENT
??_R4codecvt_base@std@@6B@ DD 00H			; std::codecvt_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVcodecvt_base@std@@@8
	DD	FLAT:??_R3codecvt_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT __CTA4?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA4?AVfailure@ios_base@std@@ DD 04H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
	DD	FLAT:__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_R4?$codecvt@DDH@std@@6B@
rdata$r	SEGMENT
??_R4?$codecvt@DDH@std@@6B@ DD 00H			; std::codecvt<char,char,int>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$codecvt@DDH@std@@@8
	DD	FLAT:??_R3?$codecvt@DDH@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
	DD	FLAT:?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7system_error@std@@6B@
CONST	SEGMENT
??_7system_error@std@@6B@ DD FLAT:??_R4system_error@std@@6B@ ; std::system_error::`vftable'
	DD	FLAT:??_Esystem_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R3?$codecvt@DDH@std@@8
rdata$r	SEGMENT
??_R3?$codecvt@DDH@std@@8 DD 00H			; std::codecvt<char,char,int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$codecvt@DDH@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT
?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB DD 0ffffffffH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
CONST	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_R1A@?0A@EA@?$codecvt@DDH@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$codecvt@DDH@std@@8 DD FLAT:??_R0?AV?$codecvt@DDH@std@@@8 ; std::codecvt<char,char,int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$codecvt@DDH@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2FragmentShader@gfxu@@8
rdata$r	SEGMENT
??_R2FragmentShader@gfxu@@8 DD FLAT:??_R1A@?0A@EA@FragmentShader@gfxu@@8 ; gfxu::FragmentShader::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Shader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2system_error@std@@8
rdata$r	SEGMENT
??_R2system_error@std@@8 DD FLAT:??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R3GeometryShader@gfxu@@8
rdata$r	SEGMENT
??_R3GeometryShader@gfxu@@8 DD 00H			; gfxu::GeometryShader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2GeometryShader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Facet_base@std@@@8
_DATA	SEGMENT
??_R0?AV_Facet_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Facet_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Facet_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7VertexShader@gfxu@@6B@
CONST	SEGMENT
??_7VertexShader@gfxu@@6B@ DD FLAT:??_R4VertexShader@gfxu@@6B@ ; gfxu::VertexShader::`vftable'
	DD	FLAT:?compile@VertexShader@gfxu@@UAE_NXZ
CONST	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT __TI4?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI4?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Facet_base@std@@8 DD FLAT:??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DD FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DD	FLAT:??_Eios_base@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R0?AVVertexShader@gfxu@@@8
_DATA	SEGMENT
??_R0?AVVertexShader@gfxu@@@8 DD FLAT:??_7type_info@@6B@ ; gfxu::VertexShader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVertexShader@gfxu@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVertexStream@gfxu@@@8
_DATA	SEGMENT
??_R0?AVVertexStream@gfxu@@@8 DD FLAT:??_7type_info@@6B@ ; gfxu::VertexStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVertexStream@gfxu@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Shader@gfxu@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Shader@gfxu@@8 DD FLAT:??_R0?AVShader@gfxu@@@8 ; gfxu::Shader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Shader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R2VertexStream@gfxu@@8
rdata$r	SEGMENT
??_R2VertexStream@gfxu@@8 DD FLAT:??_R1A@?0A@EA@VertexStream@gfxu@@8 ; gfxu::VertexStream::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Add_vtordisp1@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Add_vtordisp2@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ
CONST	ENDS
;	COMDAT ??_R3Shader@gfxu@@8
rdata$r	SEGMENT
??_R3Shader@gfxu@@8 DD 00H				; gfxu::Shader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Shader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
CONST	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
_DATA	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FragmentShader@gfxu@@6B@
rdata$r	SEGMENT
??_R4FragmentShader@gfxu@@6B@ DD 00H			; gfxu::FragmentShader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFragmentShader@gfxu@@@8
	DD	FLAT:??_R3FragmentShader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_7VertexStream@gfxu@@6B@
CONST	SEGMENT
??_7VertexStream@gfxu@@6B@ DD FLAT:??_R4VertexStream@gfxu@@6B@ ; gfxu::VertexStream::`vftable'
	DD	FLAT:??_EVertexStream@gfxu@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@GeometryShader@gfxu@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GeometryShader@gfxu@@8 DD FLAT:??_R0?AVGeometryShader@gfxu@@@8 ; gfxu::GeometryShader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GeometryShader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	018H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFragmentShader@gfxu@@@8
_DATA	SEGMENT
??_R0?AVFragmentShader@gfxu@@@8 DD FLAT:??_7type_info@@6B@ ; gfxu::FragmentShader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFragmentShader@gfxu@@', 00H
_DATA	ENDS
;	COMDAT ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
	DD	018H
CONST	ENDS
;	COMDAT ??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
	DD	FLAT:?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEXXZ
	DD	FLAT:?_Add_vtordisp2@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ
CONST	ENDS
;	COMDAT ??_R4VertexStream@gfxu@@6B@
rdata$r	SEGMENT
??_R4VertexStream@gfxu@@6B@ DD 00H			; gfxu::VertexStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVVertexStream@gfxu@@@8
	DD	FLAT:??_R3VertexStream@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R4VertexShader@gfxu@@6B@
rdata$r	SEGMENT
??_R4VertexShader@gfxu@@6B@ DD 00H			; gfxu::VertexShader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVVertexShader@gfxu@@@8
	DD	FLAT:??_R3VertexShader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2Shader@gfxu@@8
rdata$r	SEGMENT
??_R2Shader@gfxu@@8 DD FLAT:??_R1A@?0A@EA@Shader@gfxu@@8 ; gfxu::Shader::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VertexShader@gfxu@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VertexShader@gfxu@@8 DD FLAT:??_R0?AVVertexShader@gfxu@@@8 ; gfxu::VertexShader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VertexShader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R2VertexShader@gfxu@@8
rdata$r	SEGMENT
??_R2VertexShader@gfxu@@8 DD FLAT:??_R1A@?0A@EA@VertexShader@gfxu@@8 ; gfxu::VertexShader::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Shader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R4_Facet_base@std@@6B@
rdata$r	SEGMENT
??_R4_Facet_base@std@@6B@ DD 00H			; std::_Facet_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Facet_base@std@@@8
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGeometryShader@gfxu@@@8
_DATA	SEGMENT
??_R0?AVGeometryShader@gfxu@@@8 DD FLAT:??_7type_info@@6B@ ; gfxu::GeometryShader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGeometryShader@gfxu@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@FragmentShader@gfxu@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FragmentShader@gfxu@@8 DD FLAT:??_R0?AVFragmentShader@gfxu@@@8 ; gfxu::FragmentShader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FragmentShader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVShader@gfxu@@@8
_DATA	SEGMENT
??_R0?AVShader@gfxu@@@8 DD FLAT:??_7type_info@@6B@	; gfxu::Shader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVShader@gfxu@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0system_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R3codecvt_base@std@@8
rdata$r	SEGMENT
??_R3codecvt_base@std@@8 DD 00H				; std::codecvt_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2codecvt_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R3_Facet_base@std@@8
rdata$r	SEGMENT
??_R3_Facet_base@std@@8 DD 00H				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
	DD	070H
CONST	ENDS
;	COMDAT ??_7GeometryShader@gfxu@@6B@
CONST	SEGMENT
??_7GeometryShader@gfxu@@6B@ DD FLAT:??_R4GeometryShader@gfxu@@6B@ ; gfxu::GeometryShader::`vftable'
	DD	FLAT:?compile@GeometryShader@gfxu@@UAE_NXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7codecvt_base@std@@6B@
CONST	SEGMENT
??_7codecvt_base@std@@6B@ DD FLAT:??_R4codecvt_base@std@@6B@ ; std::codecvt_base::`vftable'
	DD	FLAT:??_Ecodecvt_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_always_noconv@codecvt_base@std@@MBE_NXZ
	DD	FLAT:?do_max_length@codecvt_base@std@@MBEHXZ
	DD	FLAT:?do_encoding@codecvt_base@std@@MBEHXZ
CONST	ENDS
;	COMDAT ??_R3FragmentShader@gfxu@@8
rdata$r	SEGMENT
??_R3FragmentShader@gfxu@@8 DD 00H			; gfxu::FragmentShader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FragmentShader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@system_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@system_error@std@@8 DD FLAT:??_R0?AVsystem_error@std@@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT
__CTA2?AVruntime_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_R3VertexShader@gfxu@@8
rdata$r	SEGMENT
??_R3VertexShader@gfxu@@8 DD 00H			; gfxu::VertexShader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2VertexShader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7_Facet_base@std@@6B@
CONST	SEGMENT
??_7_Facet_base@std@@6B@ DD FLAT:??_R4_Facet_base@std@@6B@ ; std::_Facet_base::`vftable'
	DD	FLAT:??_E_Facet_base@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
_DATA	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R2GeometryShader@gfxu@@8
rdata$r	SEGMENT
??_R2GeometryShader@gfxu@@8 DD FLAT:??_R1A@?0A@EA@GeometryShader@gfxu@@8 ; gfxu::GeometryShader::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Shader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R2_Facet_base@std@@8
rdata$r	SEGMENT
??_R2_Facet_base@std@@8 DD FLAT:??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R0?AVcodecvt_base@std@@@8
_DATA	SEGMENT
??_R0?AVcodecvt_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::codecvt_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVcodecvt_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@codecvt_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@codecvt_base@std@@8 DD FLAT:??_R0?AVcodecvt_base@std@@@8 ; std::codecvt_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3codecvt_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@system_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3VertexStream@gfxu@@8
rdata$r	SEGMENT
??_R3VertexStream@gfxu@@8 DD 00H			; gfxu::VertexStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VertexStream@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 00H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVios_base@std@@@8
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$codecvt@DDH@std@@6B@
CONST	SEGMENT
??_7?$codecvt@DDH@std@@6B@ DD FLAT:??_R4?$codecvt@DDH@std@@6B@ ; std::codecvt<char,char,int>::`vftable'
	DD	FLAT:??_E?$codecvt@DDH@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_always_noconv@?$codecvt@DDH@std@@MBE_NXZ
	DD	FLAT:?do_max_length@codecvt_base@std@@MBEHXZ
	DD	FLAT:?do_encoding@codecvt_base@std@@MBEHXZ
	DD	FLAT:?do_in@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z
	DD	FLAT:?do_out@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z
	DD	FLAT:?do_unshift@?$codecvt@DDH@std@@MBEHAAHPAD1AAPAD@Z
	DD	FLAT:?do_length@?$codecvt@DDH@std@@MBEHAAHPBD1I@Z
CONST	ENDS
;	COMDAT ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2codecvt_base@std@@8
rdata$r	SEGMENT
??_R2codecvt_base@std@@8 DD FLAT:??_R1A@?0A@EA@codecvt_base@std@@8 ; std::codecvt_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7FragmentShader@gfxu@@6B@
CONST	SEGMENT
??_7FragmentShader@gfxu@@6B@ DD FLAT:??_R4FragmentShader@gfxu@@6B@ ; gfxu::FragmentShader::`vftable'
	DD	FLAT:?compile@FragmentShader@gfxu@@UAE_NXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@VertexStream@gfxu@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VertexStream@gfxu@@8 DD FLAT:??_R0?AVVertexStream@gfxu@@@8 ; gfxu::VertexStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VertexStream@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R3system_error@std@@8
rdata$r	SEGMENT
??_R3system_error@std@@8 DD 00H				; std::system_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4Shader@gfxu@@6B@
rdata$r	SEGMENT
??_R4Shader@gfxu@@6B@ DD 00H				; gfxu::Shader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVShader@gfxu@@@8
	DD	FLAT:??_R3Shader@gfxu@@8
rdata$r	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT
__TI2?AVruntime_error@std@@ DD 00H
	DD	FLAT:??1runtime_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_7Shader@gfxu@@6B@
CONST	SEGMENT
??_7Shader@gfxu@@6B@ DD FLAT:??_R4Shader@gfxu@@6B@	; gfxu::Shader::`vftable'
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R4GeometryShader@gfxu@@6B@
rdata$r	SEGMENT
??_R4GeometryShader@gfxu@@6B@ DD 00H			; gfxu::GeometryShader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVGeometryShader@gfxu@@@8
	DD	FLAT:??_R3GeometryShader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	070H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV?$codecvt@DDH@std@@@8
_DATA	SEGMENT
??_R0?AV?$codecvt@DDH@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::codecvt<char,char,int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$codecvt@DDH@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVsystem_error@std@@@8
_DATA	SEGMENT
??_R0?AVsystem_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::system_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVsystem_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
	DD	FLAT:?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ
	DD	FLAT:?_Add_vtordisp2@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ
CONST	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ DB 'ios_base::failbit se'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@ DB 'bad locale name', 00H ; `string'
	ORG $+2
$SG4294949857 DB 'S', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, 'i', 00H, 'n', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG4294949855 DB 'L', 00H, 'i', 00H, 'n', 00H, 'k', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r'
	DB	00H, 00H, 00H
$SG4294949856 DB 'T', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 's', 00H, 'h', 00H
	DB	'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'h', 00H, 'a'
	DB	00H, 'd', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, 'i', 00H, 'l', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 't', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'n', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'n', 00H, 'o', 00H, ' ', 00H, 'l'
	DB	00H, 'o', 00H, 'g', 00H, '.', 00H, 00H, 00H
$SG4294949854 DB 'T', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'p', 00H, 'r', 00H
	DB	'o', 00H, 'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'h'
	DB	00H, 'a', 00H, 'd', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'l', 00H
	DB	'i', 00H, 'n', 00H, 'k', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'b', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 't'
	DB	00H, 'u', 00H, 'r', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'n', 00H, 'o', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'g', 00H, '.'
	DB	00H, 00H, 00H
	ORG $+2
$SG4294949853 DB 'modelview', 00H
	ORG $+2
$SG4294949852 DB 'projection', 00H
	ORG $+1
$SG4294949851 DB 'const_color', 00H
$SG4294949850 DB 'cam_pos', 00H
$SG4294949849 DB 'fog_color', 00H
	ORG $+2
$SG4294949848 DB 'fog_dist', 00H
	ORG $+3
$SG4294949847 DB 'texture_1', 00H
PUBLIC	??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEXXZ ; std::basic_istream<char,std::char_traits<char> >::_Add_vtordisp1
PUBLIC	?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ ; std::basic_istream<char,std::char_traits<char> >::_Add_vtordisp1
PUBLIC	??$_Move@AAVMatrix@geom@@@std@@YA$$QAVMatrix@geom@@AAV12@@Z ; std::_Move<geom::Matrix &>
PUBLIC	??$construct@VVertexUVRGBA@gfxu@@V12@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@$$QAV23@@Z ; std::allocator<gfxu::VertexUVRGBA>::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>
PUBLIC	??$swap@VMatrix@geom@@@std@@YAXAAVMatrix@geom@@0@Z ; std::swap<geom::Matrix>
PUBLIC	??$construct@VVertexUVRGBA@gfxu@@V12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAAV?$allocator@VVertexUVRGBA@gfxu@@@1@PAVVertexUVRGBA@gfxu@@$$QAV34@@Z ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>
PUBLIC	??$forward@VVertexUVRGBA@gfxu@@@std@@YA$$QAVVertexUVRGBA@gfxu@@AAV12@@Z ; std::forward<gfxu::VertexUVRGBA>
PUBLIC	??$destroy@VVertexUVRGBA@gfxu@@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@@Z ; std::allocator<gfxu::VertexUVRGBA>::destroy<gfxu::VertexUVRGBA>
PUBLIC	??Y?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=
PUBLIC	??G?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEHABV01@@Z ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
PUBLIC	??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEABVMatrix@geom@@XZ ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
PUBLIC	??Y?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=
PUBLIC	??G?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEHABV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@@Z ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
PUBLIC	??H?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
PUBLIC	??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEAAVMatrix@geom@@XZ ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
PUBLIC	??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEHABV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
PUBLIC	?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z ; std::istreambuf_iterator<char,std::char_traits<char> >::equal
PUBLIC	??$_Advance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@H@std@@YAXAAV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@HUrandom_access_iterator_tag@0@@Z ; std::_Advance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,int>
PUBLIC	??$_Distance2@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@H@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z ; std::_Distance2<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,int>
PUBLIC	??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@HVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PAHPAVMatrix@geom@@@Z ; std::_Rotate<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,int,geom::Matrix>
PUBLIC	??$_Val_type@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAPAVMatrix@geom@@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z ; std::_Val_type<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$_Dist_type@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAPAHV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z ; std::_Dist_type<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$iter_swap@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@V12@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z ; std::iter_swap<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$construct@VVertexUVRGBA@gfxu@@V12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@$$QAV23@@Z ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>
PUBLIC	??$destroy@VVertexUVRGBA@gfxu@@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAAV?$allocator@VVertexUVRGBA@gfxu@@@1@PAVVertexUVRGBA@gfxu@@@Z ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::destroy<gfxu::VertexUVRGBA>
PUBLIC	??$?8DU?$char_traits@D@std@@@std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z ; std::operator==<char,std::char_traits<char> >
PUBLIC	??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??8?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator==
PUBLIC	??F?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator--
PUBLIC	??E?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++
PUBLIC	??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??9?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator!=
PUBLIC	??F?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator--
PUBLIC	??E?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++
PUBLIC	?_Unchecked@?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Unchecked
PUBLIC	??$_Fill_n@PAPAVMatrix@geom@@IPAV12@@std@@YAPAPAVMatrix@geom@@PAPAV12@IABQAV12@@Z ; std::_Fill_n<geom::Matrix * *,unsigned int,geom::Matrix *>
PUBLIC	??$destroy@PAVMatrix@geom@@@?$allocator@VMatrix@geom@@@std@@QAEXPAPAVMatrix@geom@@@Z ; std::allocator<geom::Matrix>::destroy<geom::Matrix *>
PUBLIC	??$destroy@VMatrix@geom@@@?$allocator@VMatrix@geom@@@std@@QAEXPAVMatrix@geom@@@Z ; std::allocator<geom::Matrix>::destroy<geom::Matrix>
PUBLIC	??$construct@VMatrix@geom@@V12@@?$allocator@VMatrix@geom@@@std@@QAEXPAVMatrix@geom@@$$QAV23@@Z ; std::allocator<geom::Matrix>::construct<geom::Matrix,geom::Matrix>
PUBLIC	??$advance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@H@std@@YAXAAV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@H@Z ; std::advance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,int>
PUBLIC	??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAHV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z ; std::distance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00Urandom_access_iterator_tag@0@@Z ; std::_Rotate<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$_Reverse@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0Ubidirectional_iterator_tag@0@@Z ; std::_Reverse<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$_Iter_cat@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z ; std::_Iter_cat<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$_Unchecked@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@YA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??$_Uninit_move@PAVVertexUVRGBA@gfxu@@PAV12@V?$allocator@VVertexUVRGBA@gfxu@@@std@@V12@@std@@YAPAVVertexUVRGBA@gfxu@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<gfxu::VertexUVRGBA *,gfxu::VertexUVRGBA *,std::allocator<gfxu::VertexUVRGBA>,gfxu::VertexUVRGBA>
PUBLIC	??$_Val_type@PAVVertexUVRGBA@gfxu@@@std@@YAPAVVertexUVRGBA@gfxu@@PAV12@@Z ; std::_Val_type<gfxu::VertexUVRGBA *>
PUBLIC	??$destroy@VVertexUVRGBA@gfxu@@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@@Z ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::destroy<gfxu::VertexUVRGBA>
PUBLIC	??$construct@VVertexUVRGBA@gfxu@@AAV12@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@AAV23@@Z ; std::allocator<gfxu::VertexUVRGBA>::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA &>
PUBLIC	??$?9DU?$char_traits@D@std@@@std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z ; std::operator!=<char,std::char_traits<char> >
PUBLIC	?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@ABEDXZ ; std::istreambuf_iterator<char,std::char_traits<char> >::_Peek
PUBLIC	?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::istreambuf_iterator<char,std::char_traits<char> >::_Inc
PUBLIC	??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::istreambuf_iterator<char,std::char_traits<char> >::operator++
PUBLIC	??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBEABDXZ ; std::istreambuf_iterator<char,std::char_traits<char> >::operator*
PUBLIC	?construct@?$allocator@VMatrix@geom@@@std@@QAEXPAVMatrix@geom@@ABV34@@Z ; std::allocator<geom::Matrix>::construct
PUBLIC	?construct@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@ABV34@@Z ; std::allocator<gfxu::VertexUVRGBA>::construct
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char> > >
PUBLIC	??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z ; std::_Ptr_cat<unsigned char,unsigned char>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@@std@@YAXPAPAVMatrix@geom@@0AAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<geom::Matrix *> > >
PUBLIC	??$_Uninit_def_fill_n@PAVMatrix@geom@@IPAV12@@std@@YAXPAPAVMatrix@geom@@IAAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<geom::Matrix *,unsigned int,geom::Matrix *>
PUBLIC	??$_Val_type@PAPAVMatrix@geom@@@std@@YAPAPAVMatrix@geom@@PAPAV12@@Z ; std::_Val_type<geom::Matrix * *>
PUBLIC	??$_Uninit_copy@PAVMatrix@geom@@PAV12@@std@@YAPAPAVMatrix@geom@@PAPAV12@00AAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<geom::Matrix *,geom::Matrix *>
PUBLIC	??$_Ptr_cat@PAVMatrix@geom@@PAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVMatrix@geom@@0@Z ; std::_Ptr_cat<geom::Matrix *,geom::Matrix *>
PUBLIC	??$destroy@PAVMatrix@geom@@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAAV?$allocator@VMatrix@geom@@@1@PAPAVMatrix@geom@@@Z ; std::allocator_traits<std::allocator<geom::Matrix> >::destroy<geom::Matrix *>
PUBLIC	??$?0VMatrix@geom@@@?$allocator@PAVMatrix@geom@@@std@@QAE@ABV?$allocator@VMatrix@geom@@@1@@Z ; std::allocator<geom::Matrix *>::allocator<geom::Matrix *><geom::Matrix>
PUBLIC	??$destroy@VMatrix@geom@@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAAV?$allocator@VMatrix@geom@@@1@PAVMatrix@geom@@@Z ; std::allocator_traits<std::allocator<geom::Matrix> >::destroy<geom::Matrix>
PUBLIC	??$construct@VMatrix@geom@@ABV12@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAAV?$allocator@VMatrix@geom@@@1@PAVMatrix@geom@@ABV34@@Z ; std::allocator_traits<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix const &>
PUBLIC	??$forward@ABVMatrix@geom@@@std@@YAABVMatrix@geom@@ABV12@@Z ; std::forward<geom::Matrix const &>
PUBLIC	??$construct@VMatrix@geom@@V12@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAAV?$allocator@VMatrix@geom@@@1@PAVMatrix@geom@@$$QAV34@@Z ; std::allocator_traits<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix>
PUBLIC	??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z ; std::rotate<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z ; std::reverse<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$_Uninitialized_move@PAVVertexUVRGBA@gfxu@@PAV12@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAPAVVertexUVRGBA@gfxu@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z ; std::_Uninitialized_move<gfxu::VertexUVRGBA *,gfxu::VertexUVRGBA *,std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAXPAVVertexUVRGBA@gfxu@@0AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >
PUBLIC	??$_Ptr_cat@VVertexUVRGBA@gfxu@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVVertexUVRGBA@gfxu@@0@Z ; std::_Ptr_cat<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>
PUBLIC	??$construct@VVertexUVRGBA@gfxu@@ABV12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAAV?$allocator@VVertexUVRGBA@gfxu@@@1@PAVVertexUVRGBA@gfxu@@ABV34@@Z ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA const &>
PUBLIC	??$forward@ABVVertexUVRGBA@gfxu@@@std@@YAABVVertexUVRGBA@gfxu@@ABV12@@Z ; std::forward<gfxu::VertexUVRGBA const &>
PUBLIC	??$construct@VVertexUVRGBA@gfxu@@AAV12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAAV?$allocator@VVertexUVRGBA@gfxu@@@1@PAVVertexUVRGBA@gfxu@@AAV34@@Z ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA &>
PUBLIC	??$forward@AAVVertexUVRGBA@gfxu@@@std@@YAAAVVertexUVRGBA@gfxu@@AAV12@@Z ; std::forward<gfxu::VertexUVRGBA &>
PUBLIC	??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<std::istreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	??$_Iter_cat@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@YA?AUinput_iterator_tag@0@ABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@@Z ; std::_Iter_cat<std::istreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	??$put@VTaskVBOVAOSet@Tasks@@@MiniHeap@MemUtil@@QAEPAVTaskVBOVAOSet@Tasks@@V23@@Z ; MemUtil::MiniHeap::put<Tasks::TaskVBOVAOSet>
PUBLIC	?_Init@?$codecvt@DDH@std@@IAEXABV_Locinfo@2@@Z	; std::codecvt<char,char,int>::_Init
PUBLIC	?_Compat@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Compat
PUBLIC	??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z	; std::codecvt<char,char,int>::codecvt<char,char,int>
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	??9?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator!=
PUBLIC	??8?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator==
PUBLIC	??G?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEHABV01@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
PUBLIC	??E?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++
PUBLIC	??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
PUBLIC	?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::codecvt<char,char,int>::_Getcat
PUBLIC	?put@?$List@PAVTask@Tasks@@$0BAA@@@QAEXPAVTask@Tasks@@@Z ; List<Tasks::Task *,256>::put
PUBLIC	?pop_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::pop_front
PUBLIC	?push_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXABVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_front
PUBLIC	?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::reserve
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
PUBLIC	??0Task@Tasks@@QAE@ABV01@@Z			; Tasks::Task::Task
PUBLIC	??0TaskVBOVAOSet@Tasks@@QAE@ABV01@@Z		; Tasks::TaskVBOVAOSet::TaskVBOVAOSet
PUBLIC	??$_Allocate@PAVMatrix@geom@@@std@@YAPAPAVMatrix@geom@@IPAPAV12@@Z ; std::_Allocate<geom::Matrix *>
PUBLIC	??$_Allocate@VMatrix@geom@@@std@@YAPAVMatrix@geom@@IPAV12@@Z ; std::_Allocate<geom::Matrix>
PUBLIC	??$_Allocate@VVertexUVRGBA@gfxu@@@std@@YAPAVVertexUVRGBA@gfxu@@IPAV12@@Z ; std::_Allocate<gfxu::VertexUVRGBA>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@@std@@YAXPAPAVMatrix@geom@@0AAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<geom::Matrix *> > >
PUBLIC	??$_Uninitialized_default_fill_n@PAPAVMatrix@geom@@IU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@@std@@YAXPAPAVMatrix@geom@@IAAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@@Z ; std::_Uninitialized_default_fill_n<geom::Matrix * *,unsigned int,std::_Wrap_alloc<std::allocator<geom::Matrix *> > >
PUBLIC	??$_Uninitialized_copy@PAPAVMatrix@geom@@PAPAV12@U?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@@std@@YAPAPAVMatrix@geom@@PAPAV12@00AAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@@Z ; std::_Uninitialized_copy<geom::Matrix * *,geom::Matrix * *,std::_Wrap_alloc<std::allocator<geom::Matrix *> > >
PUBLIC	??$destroy@PAVMatrix@geom@@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAPAVMatrix@geom@@@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::destroy<geom::Matrix *>
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix *> >::_Wrap_alloc<std::allocator<geom::Matrix *> ><std::_Wrap_alloc<std::allocator<geom::Matrix> > >
PUBLIC	??$destroy@VMatrix@geom@@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAVMatrix@geom@@@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::destroy<geom::Matrix>
PUBLIC	??$construct@VMatrix@geom@@ABV12@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAVMatrix@geom@@ABV23@@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix const &>
PUBLIC	??$construct@VMatrix@geom@@V12@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAVMatrix@geom@@$$QAV23@@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix>
PUBLIC	??$forward@VMatrix@geom@@@std@@YA$$QAVMatrix@geom@@AAV12@@Z ; std::forward<geom::Matrix>
PUBLIC	??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$_Umove@PAVVertexUVRGBA@gfxu@@@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEPAVVertexUVRGBA@gfxu@@PAV23@00@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Umove<gfxu::VertexUVRGBA *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAXPAVVertexUVRGBA@gfxu@@0AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >
PUBLIC	??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
PUBLIC	??$move@AAVMatrix@geom@@@std@@YA$$QAVMatrix@geom@@AAV12@@Z ; std::move<geom::Matrix &>
PUBLIC	??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??$construct@VVertexUVRGBA@gfxu@@ABV12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@ABV23@@Z ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA const &>
PUBLIC	??$construct@VVertexUVRGBA@gfxu@@AAV12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@AAV23@@Z ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA &>
PUBLIC	??$addressof@$$CBVVertexUVRGBA@gfxu@@@std@@YAPBVVertexUVRGBA@gfxu@@ABV12@@Z ; std::addressof<gfxu::VertexUVRGBA const >
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$?0V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@V?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0PAPAX@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><std::istreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	??$put@VTaskVBOVAOSet@Tasks@@@?$VirtualList@VTask@Tasks@@$0BAA@$0BAAC@@@QAEPAVTask@Tasks@@VTaskVBOVAOSet@2@@Z ; VirtualList<Tasks::Task,256,4098>::put<Tasks::TaskVBOVAOSet>
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	?max_size@?$allocator@VMatrix@geom@@@std@@QBEIXZ ; std::allocator<geom::Matrix>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAIABV?$allocator@VMatrix@geom@@@2@@Z ; std::allocator_traits<std::allocator<geom::Matrix> >::max_size
PUBLIC	?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@2@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Setcont
PUBLIC	??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=
PUBLIC	?allocate@?$allocator@PAVMatrix@geom@@@std@@QAEPAPAVMatrix@geom@@I@Z ; std::allocator<geom::Matrix *>::allocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::max_size
PUBLIC	??0?$allocator@VMatrix@geom@@@std@@QAE@ABV01@@Z	; std::allocator<geom::Matrix>::allocator<geom::Matrix>
PUBLIC	?select_on_container_copy_construction@?$allocator@VMatrix@geom@@@std@@QBE?AV12@XZ ; std::allocator<geom::Matrix>::select_on_container_copy_construction
PUBLIC	?max_size@?$allocator@VVertexUVRGBA@gfxu@@@std@@QBEIXZ ; std::allocator<gfxu::VertexUVRGBA>::max_size
PUBLIC	??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEABVMatrix@geom@@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
PUBLIC	??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-=
PUBLIC	??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<unsigned char> >::_Wrap_alloc<std::allocator<unsigned char> >
PUBLIC	?deallocate@?$allocator@E@std@@QAEXPAEI@Z	; std::allocator<unsigned char>::deallocate
PUBLIC	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
PUBLIC	??0?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QAE@XZ ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::_Deque_val<std::_Deque_simple_types<geom::Matrix> >
PUBLIC	?deallocate@?$allocator@PAVMatrix@geom@@@std@@QAEXPAPAVMatrix@geom@@I@Z ; std::allocator<geom::Matrix *>::deallocate
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@QAEPAPAVMatrix@geom@@I@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix *> >::allocate
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SA?AV?$allocator@VMatrix@geom@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<geom::Matrix> >::select_on_container_copy_construction
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV?$allocator@VMatrix@geom@@@1@@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::_Wrap_alloc<std::allocator<geom::Matrix> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::_Wrap_alloc<std::allocator<geom::Matrix> >
PUBLIC	?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEXXZ ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Alloc_proxy
PUBLIC	?allocate@?$allocator@VMatrix@geom@@@std@@QAEPAVMatrix@geom@@I@Z ; std::allocator<geom::Matrix>::allocate
PUBLIC	?deallocate@?$allocator@VMatrix@geom@@@std@@QAEXPAVMatrix@geom@@I@Z ; std::allocator<geom::Matrix>::deallocate
PUBLIC	?_Xlen@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IBEXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Xlen
PUBLIC	?max_size@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBEIXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAIABV?$allocator@VVertexUVRGBA@gfxu@@@2@@Z ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::max_size
PUBLIC	?allocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEPAVVertexUVRGBA@gfxu@@I@Z ; std::allocator<gfxu::VertexUVRGBA>::allocate
PUBLIC	?deallocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@I@Z ; std::allocator<gfxu::VertexUVRGBA>::deallocate
PUBLIC	??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
PUBLIC	??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEAAVMatrix@geom@@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
PUBLIC	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z	; std::codecvt<char,char,int>::unshift
PUBLIC	??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z ; std::_Wrap_alloc<std::allocator<unsigned char> >::deallocate
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Getal
PUBLIC	?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
PUBLIC	??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z ; std::basic_streambuf<char,std::char_traits<char> >::_Init
PUBLIC	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init
PUBLIC	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
PUBLIC	?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ ; std::basic_streambuf<char,std::char_traits<char> >::getloc
PUBLIC	??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
PUBLIC	?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
PUBLIC	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QBEII@Z ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::_Getblock
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@QAEXPAPAVMatrix@geom@@I@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix *> >::deallocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAVMatrix@geom@@I@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::deallocate
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEPAVMatrix@geom@@I@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::allocate
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::select_on_container_copy_construction
PUBLIC	?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@2@XZ ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Getal
PUBLIC	?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEXXZ ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Free_proxy
PUBLIC	??0?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV?$allocator@VMatrix@geom@@@1@@Z ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >
PUBLIC	??0?$allocator@VMatrix@geom@@@std@@QAE@XZ	; std::allocator<geom::Matrix>::allocator<geom::Matrix>
PUBLIC	?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXI@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Growmap
PUBLIC	?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBE?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
PUBLIC	?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
PUBLIC	?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBE?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
PUBLIC	?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	??0?$_Vector_val@U?$_Simple_types@VVertexUVRGBA@gfxu@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<gfxu::VertexUVRGBA> >::_Vector_val<std::_Simple_types<gfxu::VertexUVRGBA> >
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::max_size
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@I@Z ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::deallocate
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEPAVVertexUVRGBA@gfxu@@I@Z ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::allocate
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >
PUBLIC	?_Grow_to@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IBEII@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Grow_to
PUBLIC	?_Unused_capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Unused_capacity
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??_G?$codecvt@DDH@std@@MAEPAXI@Z		; std::codecvt<char,char,int>::`scalar deleting destructor'
PUBLIC	??1?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QAE@XZ ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::~_Deque_val<std::_Deque_simple_types<geom::Matrix> >
PUBLIC	??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	?do_length@?$codecvt@DDH@std@@MBEHAAHPBD1I@Z	; std::codecvt<char,char,int>::do_length
PUBLIC	?do_unshift@?$codecvt@DDH@std@@MBEHAAHPAD1AAPAD@Z ; std::codecvt<char,char,int>::do_unshift
PUBLIC	?do_out@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,int>::do_out
PUBLIC	?do_in@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,int>::do_in
PUBLIC	?do_always_noconv@?$codecvt@DDH@std@@MBE_NXZ	; std::codecvt<char,char,int>::do_always_noconv
PUBLIC	??1?$codecvt@DDH@std@@MAE@XZ			; std::codecvt<char,char,int>::~codecvt<char,char,int>
PUBLIC	?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,int>::out
PUBLIC	?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,int>::in
PUBLIC	??B?$fpos@H@std@@QBE_JXZ			; std::fpos<int>::operator __int64
PUBLIC	?seekpos@?$fpos@H@std@@QBE_JXZ			; std::fpos<int>::seekpos
PUBLIC	?state@?$fpos@H@std@@QBEHXZ			; std::fpos<int>::state
PUBLIC	??0?$fpos@H@std@@QAE@H_J@Z			; std::fpos<int>::fpos<int>
PUBLIC	??0?$fpos@H@std@@QAE@_J@Z			; std::fpos<int>::fpos<int>
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >
PUBLIC	??0?$allocator@E@std@@QAE@XZ			; std::allocator<unsigned char>::allocator<unsigned char>
PUBLIC	?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
PUBLIC	?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
PUBLIC	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
PUBLIC	?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
PUBLIC	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
PUBLIC	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
PUBLIC	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
PUBLIC	?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PB_WHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
PUBLIC	??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
PUBLIC	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
PUBLIC	?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump
PUBLIC	?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
PUBLIC	?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
PUBLIC	?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gndec
PUBLIC	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
PUBLIC	?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump
PUBLIC	?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
PUBLIC	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
PUBLIC	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
PUBLIC	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
PUBLIC	?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sbumpc
PUBLIC	??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
PUBLIC	??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
PUBLIC	?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
PUBLIC	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
PUBLIC	?_Tidy@?$_Yarn@_W@std@@AAEXXZ			; std::_Yarn<wchar_t>::_Tidy
PUBLIC	?_Tidy@?$_Yarn@D@std@@AAEXXZ			; std::_Yarn<char>::_Tidy
PUBLIC	??1?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::~_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >
PUBLIC	?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy
PUBLIC	?pop_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::pop_back
PUBLIC	?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXABVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back
PUBLIC	?back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEAAVMatrix@geom@@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::back
PUBLIC	?empty@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBE_NXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::empty
PUBLIC	?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEX$$QAVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back
PUBLIC	??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >
PUBLIC	??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >::_Getal
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@QAE@ABV?$allocator@VVertexUVRGBA@gfxu@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >
PUBLIC	??0?$allocator@VVertexUVRGBA@gfxu@@@std@@QAE@XZ	; std::allocator<gfxu::VertexUVRGBA>::allocator<gfxu::VertexUVRGBA>
PUBLIC	?_Orphan_range@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IBEXPAVVertexUVRGBA@gfxu@@0@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Orphan_range
PUBLIC	?_Xlen@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IBEXXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Xlen
PUBLIC	?_Tidy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Tidy
PUBLIC	?_Reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXI@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reserve
PUBLIC	?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXI@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate
PUBLIC	?_Inside@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IBE_NPBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Inside
PUBLIC	?_Destroy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXPAVVertexUVRGBA@gfxu@@0@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Destroy
PUBLIC	?empty@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBE_NXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::empty
PUBLIC	?max_size@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::max_size
PUBLIC	?_Has_unused_capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Has_unused_capacity
PUBLIC	?capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::capacity
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_Glocale@std@@QAEPAXI@Z			; std::locale::`scalar deleting destructor'
PUBLIC	??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
PUBLIC	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@AAV?$basic_istream@DU?$char_traits@D@std@@@1@@Z ; std::istreambuf_iterator<char,std::char_traits<char> >::istreambuf_iterator<char,std::char_traits<char> >
PUBLIC	??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::istreambuf_iterator<char,std::char_traits<char> >::istreambuf_iterator<char,std::char_traits<char> >
PUBLIC	?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::imbue
PUBLIC	?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::sync
PUBLIC	?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
PUBLIC	?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
PUBLIC	?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
PUBLIC	?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::uflow
PUBLIC	?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::underflow
PUBLIC	?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::overflow
PUBLIC	?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
PUBLIC	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
PUBLIC	?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::close
PUBLIC	??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
PUBLIC	??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
PUBLIC	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char> >::imbue
PUBLIC	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
PUBLIC	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
PUBLIC	?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
PUBLIC	?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
PUBLIC	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
PUBLIC	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::uflow
PUBLIC	?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::underflow
PUBLIC	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
PUBLIC	?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::overflow
PUBLIC	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
PUBLIC	?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sgetc
PUBLIC	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
PUBLIC	?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_istream<char,std::char_traits<char> >::_Add_vtordisp1
PUBLIC	??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
PUBLIC	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
PUBLIC	?_Add_vtordisp2@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_ios<char,std::char_traits<char> >::_Add_vtordisp2
PUBLIC	?_Add_vtordisp1@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_ios<char,std::char_traits<char> >::_Add_vtordisp1
PUBLIC	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
PUBLIC	??1?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
PUBLIC	??0?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::_Yarn<wchar_t>
PUBLIC	?c_str@?$_Yarn@D@std@@QBEPBDXZ			; std::_Yarn<char>::c_str
PUBLIC	??1?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::~_Yarn<char>
PUBLIC	??0?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::_Yarn<char>
PUBLIC	?get@?$Uniform@M@gfxu@@QAEMXZ			; gfxu::Uniform<float>::get
PUBLIC	??0?$Uniform@M@gfxu@@QAE@XZ			; gfxu::Uniform<float>::Uniform<float>
PUBLIC	?get@?$Uniform@VVector@geom@@@gfxu@@QAE?AVVector@geom@@XZ ; gfxu::Uniform<geom::Vector>::get
PUBLIC	??0?$Uniform@VVector@geom@@@gfxu@@QAE@XZ	; gfxu::Uniform<geom::Vector>::Uniform<geom::Vector>
PUBLIC	??1?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::~deque<geom::Matrix,std::allocator<geom::Matrix> >
PUBLIC	?pop@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEXXZ ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::pop
PUBLIC	?push@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEXABVMatrix@geom@@@Z ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::push
PUBLIC	?top@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEAAVMatrix@geom@@XZ ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::top
PUBLIC	?empty@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QBE_NXZ ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::empty
PUBLIC	?push@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEX$$QAVMatrix@geom@@@Z ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::push
PUBLIC	??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >
PUBLIC	??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >
PUBLIC	?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXABVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back
PUBLIC	??A?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEAAVVertexUVRGBA@gfxu@@I@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::operator[]
PUBLIC	?size@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::size
PUBLIC	?shrink_to_fit@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::shrink_to_fit
PUBLIC	?reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXI@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::reserve
PUBLIC	??1?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAE@XZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::~vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >
PUBLIC	??0?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAE@XZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >
PUBLIC	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?upload@Texture2D@gfxu@@QAE_NXZ			; gfxu::Texture2D::upload
PUBLIC	?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; gfxu::Texture2D::init
PUBLIC	??1MatrixStack@gfxu@@QAE@XZ			; gfxu::MatrixStack::~MatrixStack
PUBLIC	?setForceUpload@Uniforms@gfxu@@SAXXZ		; gfxu::Uniforms::setForceUpload
PUBLIC	?uploadChanges@Uniforms@gfxu@@SAXXZ		; gfxu::Uniforms::uploadChanges
PUBLIC	?getTopmost@MatrixStack@gfxu@@QAE?BVMatrix@geom@@XZ ; gfxu::MatrixStack::getTopmost
PUBLIC	?clear@MatrixStack@gfxu@@QAEXXZ			; gfxu::MatrixStack::clear
PUBLIC	?unstack@MatrixStack@gfxu@@AAE?AVMatrix@geom@@XZ ; gfxu::MatrixStack::unstack
PUBLIC	??1?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::~stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >
PUBLIC	??0MatrixStack@gfxu@@QAE@XZ			; gfxu::MatrixStack::MatrixStack
PUBLIC	?create@ShaderProgram@gfxu@@AAE_NXZ		; gfxu::ShaderProgram::create
PUBLIC	?compile@FragmentShader@gfxu@@UAE_NXZ		; gfxu::FragmentShader::compile
PUBLIC	?compile@GeometryShader@gfxu@@UAE_NXZ		; gfxu::GeometryShader::compile
PUBLIC	?compile@VertexShader@gfxu@@UAE_NXZ		; gfxu::VertexShader::compile
PUBLIC	??0Shader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; gfxu::Shader::Shader
PUBLIC	??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	?_compile@Shader@gfxu@@IAE_NI@Z			; gfxu::Shader::_compile
PUBLIC	?isUploaded@VertexStream@gfxu@@QAE_NXZ		; gfxu::VertexStream::isUploaded
PUBLIC	?upload@VertexStream@gfxu@@QAE_NXZ		; gfxu::VertexStream::upload
PUBLIC	?unlock@VertexStream@gfxu@@QAEXXZ		; gfxu::VertexStream::unlock
PUBLIC	?lock@VertexStream@gfxu@@QAEXXZ			; gfxu::VertexStream::lock
PUBLIC	?setUV@VertexStream@gfxu@@QAEXMM@Z		; gfxu::VertexStream::setUV
PUBLIC	?setColor@VertexStream@gfxu@@QAEXEEE@Z		; gfxu::VertexStream::setColor
PUBLIC	?put@VertexStream@gfxu@@QAEXMMM@Z		; gfxu::VertexStream::put
PUBLIC	??1VertexStream@gfxu@@UAE@XZ			; gfxu::VertexStream::~VertexStream
PUBLIC	??_GVertexStream@gfxu@@UAEPAXI@Z		; gfxu::VertexStream::`scalar deleting destructor'
PUBLIC	??0VertexUVRGBA@gfxu@@QAE@ABV01@@Z		; gfxu::VertexUVRGBA::VertexUVRGBA
PUBLIC	??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z		; std::_Ungetc<char>
PUBLIC	??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z		; std::_Fputc<char>
PUBLIC	??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z		; std::_Fgetc<char>
PUBLIC	??_Gios_base@std@@UAEPAXI@Z			; std::ios_base::`scalar deleting destructor'
PUBLIC	??0system_error@std@@QAE@ABV01@@Z		; std::system_error::system_error
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
PUBLIC	??_Gfailure@ios_base@std@@UAEPAXI@Z		; std::ios_base::failure::`scalar deleting destructor'
PUBLIC	?_Init@ios_base@std@@IAEXXZ			; std::ios_base::_Init
PUBLIC	??0ios_base@std@@IAE@XZ				; std::ios_base::ios_base
PUBLIC	??1ios_base@std@@UAE@XZ				; std::ios_base::~ios_base
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
PUBLIC	?good@ios_base@std@@QBE_NXZ			; std::ios_base::good
PUBLIC	?rdstate@ios_base@std@@QBEHXZ			; std::ios_base::rdstate
PUBLIC	?clear@ios_base@std@@QAEXH@Z			; std::ios_base::clear
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
PUBLIC	?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
PUBLIC	??1system_error@std@@UAE@XZ			; std::system_error::~system_error
PUBLIC	??_Gsystem_error@std@@UAEPAXI@Z			; std::system_error::`scalar deleting destructor'
PUBLIC	?_Makestr@system_error@std@@AAEXXZ		; std::system_error::_Makestr
PUBLIC	??0system_error@std@@QAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::system_error::system_error
PUBLIC	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z ; std::make_error_code
PUBLIC	??0error_code@std@@QAE@HABVerror_category@1@@Z	; std::error_code::error_code
PUBLIC	??_G?$ctype@D@std@@MAEPAXI@Z			; std::ctype<char>::`scalar deleting destructor'
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?_Tidy@?$ctype@D@std@@IAEXXZ			; std::ctype<char>::_Tidy
PUBLIC	?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<char>::_Init
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
PUBLIC	?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
PUBLIC	??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z		; std::ctype<char>::ctype<char>
PUBLIC	?widen@?$ctype@D@std@@QBEDD@Z			; std::ctype<char>::widen
PUBLIC	??_Gctype_base@std@@UAEPAXI@Z			; std::ctype_base::`scalar deleting destructor'
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
PUBLIC	??0ctype_base@std@@QAE@I@Z			; std::ctype_base::ctype_base
PUBLIC	??_Gcodecvt_base@std@@UAEPAXI@Z			; std::codecvt_base::`scalar deleting destructor'
PUBLIC	?do_encoding@codecvt_base@std@@MBEHXZ		; std::codecvt_base::do_encoding
PUBLIC	?do_max_length@codecvt_base@std@@MBEHXZ		; std::codecvt_base::do_max_length
PUBLIC	?do_always_noconv@codecvt_base@std@@MBE_NXZ	; std::codecvt_base::do_always_noconv
PUBLIC	??1codecvt_base@std@@UAE@XZ			; std::codecvt_base::~codecvt_base
PUBLIC	?always_noconv@codecvt_base@std@@QBE_NXZ	; std::codecvt_base::always_noconv
PUBLIC	??0codecvt_base@std@@QAE@I@Z			; std::codecvt_base::codecvt_base
PUBLIC	??0_Facet_base@std@@QAE@XZ			; std::_Facet_base::_Facet_base
PUBLIC	??_Gfacet@locale@std@@MAEPAXI@Z			; std::locale::facet::`scalar deleting destructor'
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
PUBLIC	?c_str@locale@std@@QBEPBDXZ			; std::locale::c_str
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	??0locale@std@@QAE@XZ				; std::locale::locale
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
PUBLIC	??1facet@locale@std@@MAE@XZ			; std::locale::facet::~facet
PUBLIC	??0facet@locale@std@@IAE@I@Z			; std::locale::facet::facet
PUBLIC	?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref
PUBLIC	?_Incref@facet@locale@std@@UAEXXZ		; std::locale::facet::_Incref
PUBLIC	??Bid@locale@std@@QAEIXZ			; std::locale::id::operator unsigned int
PUBLIC	??_G_Facet_base@std@@UAEPAXI@Z			; std::_Facet_base::`scalar deleting destructor'
PUBLIC	??1_Facet_base@std@@UAE@XZ			; std::_Facet_base::~_Facet_base
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ	; std::_Locinfo::_Getctype
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
PUBLIC	??0_Locinfo@std@@QAE@PBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??_Gruntime_error@std@@UAEPAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	??0runtime_error@std@@QAE@PBD@Z			; std::runtime_error::runtime_error
PUBLIC	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	?not_eof@?$char_traits@D@std@@SAHABH@Z		; std::char_traits<char>::not_eof
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
PUBLIC	?to_char_type@?$char_traits@D@std@@SADABH@Z	; std::char_traits<char>::to_char_type
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
PUBLIC	?bind@Texture2D@gfxu@@QAEXXZ			; gfxu::Texture2D::bind
PUBLIC	??1Texture2D@gfxu@@QAE@XZ			; gfxu::Texture2D::~Texture2D
PUBLIC	??0Texture2D@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z ; gfxu::Texture2D::Texture2D
PUBLIC	??1Shader@gfxu@@QAE@XZ				; gfxu::Shader::~Shader
PUBLIC	?bind@ShaderProgram@gfxu@@QAEXXZ		; gfxu::ShaderProgram::bind
PUBLIC	??1ShaderProgram@gfxu@@QAE@XZ			; gfxu::ShaderProgram::~ShaderProgram
PUBLIC	??0ShaderProgram@gfxu@@QAE@PAVVertexShader@1@PAVGeometryShader@1@PAVFragmentShader@1@@Z ; gfxu::ShaderProgram::ShaderProgram
PUBLIC	??0FragmentShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; gfxu::FragmentShader::FragmentShader
PUBLIC	??0VertexShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; gfxu::VertexShader::VertexShader
PUBLIC	?pop@MatrixStack@gfxu@@QAEXXZ			; gfxu::MatrixStack::pop
PUBLIC	?mult@MatrixStack@gfxu@@QAEXVMatrix@geom@@@Z	; gfxu::MatrixStack::mult
PUBLIC	?push@MatrixStack@gfxu@@QAEXVMatrix@geom@@@Z	; gfxu::MatrixStack::push
PUBLIC	??0Vertex@gfxu@@QAE@MMM@Z			; gfxu::Vertex::Vertex
PUBLIC	?draw@VertexStream@gfxu@@QAEXI@Z		; gfxu::VertexStream::draw
PUBLIC	?put@VertexStream@gfxu@@QAEXABVVertex@2@@Z	; gfxu::VertexStream::put
PUBLIC	??0VertexStream@gfxu@@QAE@XZ			; gfxu::VertexStream::VertexStream
PUBLIC	?getError@gfxu@@YA_NXZ				; gfxu::getError
PUBLIC	?reset@Uniforms@gfxu@@SAXXZ			; gfxu::Uniforms::reset
PUBLIC	?setFogColor@Uniforms@gfxu@@SAXMMMM@Z		; gfxu::Uniforms::setFogColor
PUBLIC	?setColor@Uniforms@gfxu@@SAXMMMM@Z		; gfxu::Uniforms::setColor
PUBLIC	??0VertexUVRGBA@gfxu@@QAE@MMMMMMMMM@Z		; gfxu::VertexUVRGBA::VertexUVRGBA
PUBLIC	?compress@VertexStream@gfxu@@QAEXXZ		; gfxu::VertexStream::compress
PUBLIC	?put@VertexStream@gfxu@@QAEXABVVertexUVRGBA@2@@Z ; gfxu::VertexStream::put
PUBLIC	??0VertexStream@gfxu@@QAE@H@Z			; gfxu::VertexStream::VertexStream
PUBLIC	?id@?$codecvt@DDH@std@@2V0locale@2@A		; std::codecvt<char,char,int>::id
PUBLIC	?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A ; gfxu::Uniforms::fogColor
PUBLIC	?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A ; gfxu::Uniforms::color
PUBLIC	?fogDist@Uniforms@gfxu@@2V?$Uniform@M@2@A	; gfxu::Uniforms::fogDist
PUBLIC	?MMS@Uniforms@gfxu@@2VMatrixStack@2@A		; gfxu::Uniforms::MMS
PUBLIC	?PMS@Uniforms@gfxu@@2VMatrixStack@2@A		; gfxu::Uniforms::PMS
PUBLIC	?camPos@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A ; gfxu::Uniforms::camPos
EXTRN	??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_filebuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
EXTRN	??_E_Facet_base@std@@UAEPAXI@Z:PROC		; std::_Facet_base::`vector deleting destructor'
EXTRN	??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_Esystem_error@std@@UAEPAXI@Z:PROC		; std::system_error::`vector deleting destructor'
EXTRN	??_Ecodecvt_base@std@@UAEPAXI@Z:PROC		; std::codecvt_base::`vector deleting destructor'
EXTRN	??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$codecvt@DDH@std@@MAEPAXI@Z:PROC		; std::codecvt<char,char,int>::`vector deleting destructor'
EXTRN	??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_Efacet@locale@std@@MAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
EXTRN	??_Eios_base@std@@UAEPAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
EXTRN	??_EVertexStream@gfxu@@UAEPAXI@Z:PROC		; gfxu::VertexStream::`vector deleting destructor'
;	COMDAT ?id@?$codecvt@DDH@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$codecvt@DDH@std@@2V0locale@2@A DD 01H DUP (?)	; std::codecvt<char,char,int>::id
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
	ALIGN	4

?MMS@Uniforms@gfxu@@2VMatrixStack@2@A DB 058H DUP (?)	; gfxu::Uniforms::MMS
?PMS@Uniforms@gfxu@@2VMatrixStack@2@A DB 058H DUP (?)	; gfxu::Uniforms::PMS
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0VertexStream@gfxu@@QAE@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0VertexStream@gfxu@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0VertexStream@gfxu@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0VertexStream@gfxu@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0VertexStream@gfxu@@QAE@H@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0VertexShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0VertexShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0VertexShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0VertexShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0VertexShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0FragmentShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FragmentShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0FragmentShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FragmentShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0FragmentShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1Shader@gfxu@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Shader@gfxu@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1Shader@gfxu@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Shader@gfxu@@QAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0Texture2D@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Texture2D@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0Texture2D@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Texture2D@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_compile@Shader@gfxu@@IAE_NI@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_compile@Shader@gfxu@@IAE_NI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_compile@Shader@gfxu@@IAE_NI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_compile@Shader@gfxu@@IAE_NI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_compile@Shader@gfxu@@IAE_NI@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_compile@Shader@gfxu@@IAE_NI@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0Shader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Shader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0Shader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Shader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?create@ShaderProgram@gfxu@@AAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?create@ShaderProgram@gfxu@@AAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?create@ShaderProgram@gfxu@@AAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?create@ShaderProgram@gfxu@@AAE_NXZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0MatrixStack@gfxu@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0MatrixStack@gfxu@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0MatrixStack@gfxu@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MatrixStack@gfxu@@QAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?unstack@MatrixStack@gfxu@@AAE?AVMatrix@geom@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?unstack@MatrixStack@gfxu@@AAE?AVMatrix@geom@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?unstack@MatrixStack@gfxu@@AAE?AVMatrix@geom@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?unstack@MatrixStack@gfxu@@AAE?AVMatrix@geom@@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z$0
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z$4
	DD	00H
	DD	00H
__tryblocktable$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z$8
__catchsym$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z$8 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 0ffffffffH
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PB_WHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PB_WHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PB_WHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PB_WHH@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z
	DD	02H
	DD	FLAT:__tryblocktable$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z$6
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z$9
	DD	05H
	DD	FLAT:__unwindfunclet$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z$10
__tryblocktable$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z$12
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z$13
__catchsym$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z$0
__catchsym$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z$13 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z$2
__catchsym$??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z$9
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAHV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAHV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAHV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAHV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z$0
	ORG $+1044
?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A DD 000000000r ; 0 ; gfxu::Uniforms::fogColor
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DB	01H
	ORG $+3
?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A DD 000000000r ; 0 ; gfxu::Uniforms::color
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DB	01H
	ORG $+3
?fogDist@Uniforms@gfxu@@2V?$Uniform@M@2@A DB 04H DUP (?)
	DB	01H					; gfxu::Uniforms::fogDist
	ORG $+3
?camPos@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A DD 000000000r ; 0 ; gfxu::Uniforms::camPos
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DB	01H
?MMS$initializer$@Uniforms@gfxu@@2P6AXXZA DD FLAT:??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ ; gfxu::Uniforms::MMS$initializer$
?PMS$initializer$@Uniforms@gfxu@@2P6AXXZA DD FLAT:??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ ; gfxu::Uniforms::PMS$initializer$
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0VertexStream@gfxu@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_size$dead$ = 8						; size = 4
??0VertexStream@gfxu@@QAE@H@Z PROC			; gfxu::VertexStream::VertexStream, COMDAT
; _this$ = ecx

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0VertexStream@gfxu@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7VertexStream@gfxu@@6B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 486  : 		_Myfirst = pointer();

  00030	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 487  : 		_Mylast = pointer();

  00037	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 488  : 		_Myend = pointer();

  0003e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 96   : {

  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	8d 46 34	 lea	 eax, DWORD PTR [esi+52]

; 70   : {}

  0004f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00056	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0005d	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00064	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  0006b	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  00072	c7 46 24 ff ff
	ff ff		 mov	 DWORD PTR [esi+36], -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 63   : 	return (_Check_C_return(_Mtx_init(_Mtx, _Type)));

  00079	6a 02		 push	 2
  0007b	50		 push	 eax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 96   : {

  0007c	66 c7 46 30 00
	00		 mov	 WORD PTR [esi+48], 0
  00082	c6 46 32 00	 mov	 BYTE PTR [esi+50], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 63   : 	return (_Check_C_return(_Mtx_init(_Mtx, _Type)));

  00086	e8 00 00 00 00	 call	 __Mtx_init
  0008b	83 c4 08	 add	 esp, 8

; 32   : 	if (_Res != _Thrd_success)

  0008e	85 c0		 test	 eax, eax
  00090	74 09		 je	 SHORT $LN21@VertexStre

; 33   : 		_Throw_C_error(_Res);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  00098	83 c4 04	 add	 esp, 4
$LN21@VertexStre:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 96   : {

  0009b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 967  : 		return (this->_Myend - this->_Myfirst);

  0009f	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000a2	2b 4e 04	 sub	 ecx, DWORD PTR [esi+4]
  000a5	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000aa	f7 e9		 imul	 ecx
  000ac	c1 fa 02	 sar	 edx, 2
  000af	8b c2		 mov	 eax, edx
  000b1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000b4	03 c2		 add	 eax, edx

; 489  : 		}
; 490  : 
; 491  : 	pointer _Myfirst;	// pointer to beginning of array
; 492  : 	pointer _Mylast;	// pointer to current end of sequence
; 493  : 	pointer _Myend;	// pointer to end of array
; 494  : 	};
; 495  : 
; 496  : 		// TEMPLATE CLASS _Vector_alloc
; 497  : template<bool _Al_has_storage,
; 498  : 	class _Alloc_types>
; 499  : 	class _Vector_alloc
; 500  : 		: public _Vector_val<typename _Alloc_types::_Val_types>
; 501  : 	{	// base class for vector to hold allocator with storage
; 502  : public:
; 503  : 	typedef _Vector_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 504  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 505  : 
; 506  : 	typedef typename _Alloc_types::_Alty _Alty;
; 507  : 
; 508  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 509  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 510  : 		: _Alval(_Al)
; 511  : 		{	// construct allocator from _Al
; 512  : 		}
; 513  : 
; 514  : 	void _Change_alloc(const _Alty& _Al)
; 515  : 		{	// replace old allocator
; 516  : 		_Alval = _Al;
; 517  : 		}
; 518  : 
; 519  : 	void _Swap_alloc(_Myt& _Right)
; 520  : 		{	// swap allocators
; 521  : 		_Swap_adl(this->_Alval, _Right._Alval);
; 522  : 		}
; 523  : 
; 524  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 525  : 	_Vector_alloc(const _Alty& _Al = _Alty())
; 526  : 		: _Alval(_Al)
; 527  : 		{	// construct allocator from _Al
; 528  : 		_Alloc_proxy();
; 529  : 		}
; 530  : 
; 531  : 	~_Vector_alloc() _NOEXCEPT
; 532  : 		{	// destroy proxy
; 533  : 		_Free_proxy();
; 534  : 		}
; 535  : 
; 536  : 	void _Change_alloc(const _Alty& _Al)
; 537  : 		{	// replace old allocator
; 538  : 		_Free_proxy();
; 539  : 		_Alval = _Al;
; 540  : 		_Alloc_proxy();
; 541  : 		}
; 542  : 
; 543  : 	void _Swap_alloc(_Myt& _Right)
; 544  : 		{	// swap allocators
; 545  : 		_Swap_adl(_Alval, _Right._Alval);
; 546  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 547  : 		}
; 548  : 
; 549  : 	void _Alloc_proxy()
; 550  : 		{	// construct proxy from _Alval
; 551  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 552  : 			_Alproxy(_Alval);
; 553  : 		this->_Myproxy = _Alproxy.allocate(1);
; 554  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 555  : 		this->_Myproxy->_Mycont = this;
; 556  : 		}
; 557  : 
; 558  : 	void _Free_proxy()
; 559  : 		{	// destroy proxy
; 560  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 561  : 			_Alproxy(_Alval);
; 562  : 		this->_Orphan_all();
; 563  : 		_Alproxy.destroy(this->_Myproxy);
; 564  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 565  : 		this->_Myproxy = 0;
; 566  : 		}
; 567  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 568  : 
; 569  : 	_Alty& _Getal()
; 570  : 		{	// get reference to allocator
; 571  : 		return (_Alval);
; 572  : 		}
; 573  : 
; 574  : 	const _Alty& _Getal() const
; 575  : 		{	// get reference to allocator
; 576  : 		return (_Alval);
; 577  : 		}
; 578  : 
; 579  : 	_Alty _Alval;	// allocator object for values
; 580  : 	};
; 581  : 
; 582  : template<class _Alloc_types>
; 583  : 	class _Vector_alloc<false, _Alloc_types>
; 584  : 		: public _Vector_val<typename _Alloc_types::_Val_types>
; 585  : 	{	// base class for vector to hold allocator with no storage
; 586  : public:
; 587  : 	typedef _Vector_alloc<false, _Alloc_types> _Myt;
; 588  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 589  : 
; 590  : 	typedef typename _Alloc_types::_Alty _Alty;
; 591  : 
; 592  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 593  : 	_Vector_alloc(const _Alloc& = _Alloc())
; 594  : 		{	// construct allocator from _Al
; 595  : 		}
; 596  : 
; 597  : 	void _Change_alloc(const _Alty&)
; 598  : 		{	// replace old allocator
; 599  : 		}
; 600  : 
; 601  : 	void _Swap_alloc(_Myt&)
; 602  : 		{	// swap allocators
; 603  : 		}
; 604  : 
; 605  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 606  : 	_Vector_alloc(const _Alloc& = _Alloc())
; 607  : 		{	// construct allocator from _Al
; 608  : 		_Alloc_proxy();
; 609  : 		}
; 610  : 
; 611  : 	~_Vector_alloc() _NOEXCEPT
; 612  : 		{	// destroy proxy
; 613  : 		_Free_proxy();
; 614  : 		}
; 615  : 
; 616  : 	void _Change_alloc(const _Alty&)
; 617  : 		{	// replace old allocator
; 618  : 		}
; 619  : 
; 620  : 	void _Swap_alloc(_Myt& _Right)
; 621  : 		{	// swap allocators
; 622  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 623  : 		}
; 624  : 
; 625  : 	void _Alloc_proxy()
; 626  : 		{	// construct proxy from _Alval
; 627  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 628  : 			_Alproxy;
; 629  : 		this->_Myproxy = _Alproxy.allocate(1);
; 630  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 631  : 		this->_Myproxy->_Mycont = this;
; 632  : 		}
; 633  : 
; 634  : 	void _Free_proxy()
; 635  : 		{	// destroy proxy
; 636  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 637  : 			_Alproxy;
; 638  : 		this->_Orphan_all();
; 639  : 		_Alproxy.destroy(this->_Myproxy);
; 640  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 641  : 		this->_Myproxy = 0;
; 642  : 		}
; 643  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 644  : 
; 645  : 	_Alty _Getal() const
; 646  : 		{	// get reference to allocator
; 647  : 		return (_Alty());
; 648  : 		}
; 649  : 	};
; 650  : 
; 651  : 		// TEMPLATE CLASS vector
; 652  : template<class _Ty,
; 653  : 	class _Alloc = allocator<_Ty> >
; 654  : 	class vector
; 655  : 		: public _Vector_alloc<!is_empty<_Alloc>::value,
; 656  : 			_Vec_base_types<_Ty, _Alloc> >
; 657  : 	{	// varying size array of values
; 658  : public:
; 659  : 	typedef vector<_Ty, _Alloc> _Myt;
; 660  : 	typedef _Vector_alloc<!is_empty<_Alloc>::value,
; 661  : 		_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 662  : 	typedef _Alloc allocator_type;
; 663  : 
; 664  : 	typedef typename _Mybase::_Alty _Alty;
; 665  : 
; 666  : 	typedef typename _Mybase::value_type value_type;
; 667  : 	typedef typename _Mybase::size_type size_type;
; 668  : 	typedef typename _Mybase::difference_type difference_type;
; 669  : 	typedef typename _Mybase::pointer pointer;
; 670  : 	typedef typename _Mybase::const_pointer const_pointer;
; 671  : 	typedef typename _Mybase::reference reference;
; 672  : 	typedef typename _Mybase::const_reference const_reference;
; 673  : 
; 674  :  #define _VICONT(it)	it._Getcont()
; 675  :  #define _VIPTR(it)	(it)._Ptr
; 676  : 
; 677  : 	typedef typename _Mybase::iterator iterator;
; 678  : 	typedef typename _Mybase::const_iterator const_iterator;
; 679  : 
; 680  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 681  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 682  : 
; 683  : 	vector()
; 684  : 		: _Mybase()
; 685  : 		{	// construct empty vector
; 686  : 		}
; 687  : 
; 688  : 	explicit vector(const _Alloc& _Al)
; 689  : 		: _Mybase(_Al)
; 690  : 		{	// construct empty vector, allocator
; 691  : 		}
; 692  : 
; 693  : 	explicit vector(size_type _Count)
; 694  : 		: _Mybase()
; 695  : 		{	// construct from _Count * value_type()
; 696  : 		resize(_Count);
; 697  : 		}
; 698  : 
; 699  : 	vector(size_type _Count, const value_type& _Val)
; 700  : 		: _Mybase()
; 701  : 		{	// construct from _Count * _Val
; 702  : 		_Construct_n(_Count, _STD addressof(_Val));
; 703  : 		}
; 704  : 
; 705  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 706  : 		: _Mybase(_Al)
; 707  : 		{	// construct from _Count * _Val, allocator
; 708  : 		_Construct_n(_Count, _STD addressof(_Val));
; 709  : 		}
; 710  : 
; 711  : 	vector(const _Myt& _Right)
; 712  : 
; 713  :  #if _HAS_CPP0X
; 714  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 715  : 
; 716  :  #else /* _HAS_CPP0X */
; 717  : 		: _Mybase(_Right._Getal())
; 718  :  #endif /* _HAS_CPP0X */
; 719  : 
; 720  : 		{	// construct by copying _Right
; 721  : 		if (_Buy(_Right.size()))
; 722  : 			_TRY_BEGIN
; 723  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 724  : 				this->_Myfirst);
; 725  : 			_CATCH_ALL
; 726  : 			_Tidy();
; 727  : 			_RERAISE;
; 728  : 			_CATCH_END
; 729  : 		}
; 730  : 
; 731  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 732  : 		: _Mybase(_Al)
; 733  : 		{	// construct by copying _Right, allocator
; 734  : 		if (_Buy(_Right.size()))
; 735  : 			_TRY_BEGIN
; 736  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 737  : 				this->_Myfirst);
; 738  : 			_CATCH_ALL
; 739  : 			_Tidy();
; 740  : 			_RERAISE;
; 741  : 			_CATCH_END
; 742  : 		}
; 743  : 
; 744  : 	template<class _Iter>
; 745  : 		vector(_Iter _First, _Iter _Last,
; 746  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 747  : 				void>:: type ** = 0)
; 748  : 		: _Mybase()
; 749  : 		{	// construct from [_First, _Last)
; 750  : 		_Construct(_First, _Last);
; 751  : 		}
; 752  : 
; 753  : 	template<class _Iter>
; 754  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 755  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 756  : 				void>:: type ** = 0)
; 757  : 		: _Mybase(_Al)
; 758  : 		{	// construct from [_First, _Last) with allocator
; 759  : 		_Construct(_First, _Last);
; 760  : 		}
; 761  : 
; 762  : 	template<class _Iter>
; 763  : 		void _Construct(_Iter _First, _Iter _Last)
; 764  : 		{	// initialize with [_First, _Last), input iterators
; 765  : 		_TRY_BEGIN
; 766  : 		insert(begin(), _First, _Last);
; 767  : 		_CATCH_ALL
; 768  : 		_Tidy();
; 769  : 		_RERAISE;
; 770  : 		_CATCH_END
; 771  : 		}
; 772  : 
; 773  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 774  : 		{	// construct from _Count * *_Pval
; 775  : 		if (_Buy(_Count))
; 776  : 			{	// nonzero, fill it
; 777  : 			_TRY_BEGIN
; 778  : 			this->_Mylast = _Ufill(this->_Myfirst, _Count, _Pval);
; 779  : 			_CATCH_ALL
; 780  : 			_Tidy();
; 781  : 			_RERAISE;
; 782  : 			_CATCH_END
; 783  : 			}
; 784  : 		}
; 785  : 
; 786  : 	vector(_Myt&& _Right)
; 787  : 		: _Mybase(_Right._Getal())
; 788  : 		{	// construct by moving _Right
; 789  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 790  : 		}
; 791  : 
; 792  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 793  : 		: _Mybase(_Al)
; 794  : 		{	// construct by moving _Right, allocator
; 795  : 		if (this->_Getal() != _Right._Getal())
; 796  : 			assign(_STD make_move_iterator(_Right.begin()),
; 797  : 				_STD make_move_iterator(_Right.end()));
; 798  : 		else
; 799  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 800  : 		}
; 801  : 
; 802  : 	_Myt& operator=(_Myt&& _Right)
; 803  : 		{	// assign by moving _Right
; 804  : 		if (this != &_Right)
; 805  : 			{	// different, assign it
; 806  : 			_Tidy();
; 807  : 
; 808  :  #if _HAS_CPP0X
; 809  : 			if (this->_Getal() != _Right._Getal()
; 810  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 811  : 				this->_Change_alloc(_Right._Getal());
; 812  :  #endif /* _HAS_CPP0X */
; 813  : 
; 814  : 			if (this->_Getal() != _Right._Getal())
; 815  : 				assign(_STD make_move_iterator(_Right.begin()),
; 816  : 					_STD make_move_iterator(_Right.end()));
; 817  : 			else
; 818  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 819  : 			}
; 820  : 		return (*this);
; 821  : 		}
; 822  : 
; 823  : 	void _Assign_rv(_Myt&& _Right)
; 824  : 		{	// assign by moving _Right
; 825  : 		this->_Swap_all((_Myt&)_Right);
; 826  : 		this->_Myfirst = _Right._Myfirst;
; 827  : 		this->_Mylast = _Right._Mylast;
; 828  : 		this->_Myend = _Right._Myend;
; 829  : 
; 830  : 		_Right._Myfirst = pointer();
; 831  : 		_Right._Mylast = pointer();
; 832  : 		_Right._Myend = pointer();
; 833  : 		}
; 834  : 
; 835  : 	void push_back(value_type&& _Val)
; 836  : 		{	// insert by moving into element at end
; 837  : 		if (_Inside(_STD addressof(_Val)))
; 838  : 			{	// push back an element
; 839  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 840  : 			if (this->_Mylast == this->_Myend)
; 841  : 				_Reserve(1);
; 842  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 843  : 			this->_Getal().construct(this->_Mylast,
; 844  : 				_STD forward<value_type>(this->_Myfirst[_Idx]));
; 845  : 			++this->_Mylast;
; 846  : 			}
; 847  : 		else
; 848  : 			{	// push back a non-element
; 849  : 			if (this->_Mylast == this->_Myend)
; 850  : 				_Reserve(1);
; 851  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 852  : 			this->_Getal().construct(this->_Mylast,
; 853  : 				_STD forward<value_type>(_Val));
; 854  : 			++this->_Mylast;
; 855  : 			}
; 856  : 		}
; 857  : 
; 858  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 859  : 		{	// insert by moving _Val at _Where
; 860  : 		return (emplace(_Where, _STD move(_Val)));
; 861  : 		}
; 862  : 
; 863  : #define _VECTOR_EMPLACE( \
; 864  : 	TEMPLATE_LIST, PADDING_LIST, LIST, COMMA, X1, X2, X3, X4) \
; 865  : 	TEMPLATE_LIST(_CLASS_TYPE) \
; 866  : 		void emplace_back(LIST(_TYPE_REFREF_ARG)) \
; 867  : 		{	/* insert by moving into element at end */ \
; 868  : 		if (this->_Mylast == this->_Myend) \
; 869  : 			_Reserve(1); \
; 870  : 		_Orphan_range(this->_Mylast, this->_Mylast); \
; 871  : 		this->_Getal().construct(this->_Mylast COMMA LIST(_FORWARD_ARG)); \
; 872  : 		++this->_Mylast; \
; 873  : 		} \
; 874  : 	TEMPLATE_LIST(_CLASS_TYPE) \
; 875  : 		iterator emplace(const_iterator _Where \
; 876  : 			COMMA LIST(_TYPE_REFREF_ARG)) \
; 877  : 		{	/* insert by moving _Val at _Where */ \
; 878  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst; \
; 879  : 		_VECTOR_EMPLACE_CHECK \
; 880  : 		emplace_back(LIST(_FORWARD_ARG)); \
; 881  : 		_STD rotate(begin() + _Off, end() - 1, end()); \
; 882  : 		return (begin() + _Off); \
; 883  : 		}
; 884  : 
; 885  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 886  : #define _VECTOR_EMPLACE_CHECK \
; 887  : 		if (size() < _Off) \
; 888  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 889  : 
; 890  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 891  : #define _VECTOR_EMPLACE_CHECK
; 892  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 893  : 
; 894  : _VARIADIC_EXPAND_0X(_VECTOR_EMPLACE, , , , )
; 895  : #undef _VECTOR_EMPLACE_CHECK
; 896  : #undef _VECTOR_EMPLACE
; 897  : 
; 898  : 	~vector() _NOEXCEPT
; 899  : 		{	// destroy the object
; 900  : 		_Tidy();
; 901  : 		}
; 902  : 
; 903  : 	_Myt& operator=(const _Myt& _Right)
; 904  : 		{	// assign _Right
; 905  : 		if (this != &_Right)
; 906  : 			{	// different, assign it
; 907  :  #if _HAS_CPP0X
; 908  : 			if (this->_Getal() != _Right._Getal()
; 909  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 910  : 				{	// change allocator before copying
; 911  : 				_Tidy();
; 912  : 				this->_Change_alloc(_Right._Getal());
; 913  : 				}
; 914  :  #endif /* _HAS_CPP0X */
; 915  : 
; 916  : 			this->_Orphan_all();
; 917  : 
; 918  : 			if (_Right.empty())
; 919  : 				clear();	// new sequence empty, erase existing sequence
; 920  : 			else if (_Right.size() <= size())
; 921  : 				{	// enough elements, copy new and destroy old
; 922  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 923  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 924  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 925  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 926  : 				}
; 927  : 			else if (_Right.size() <= capacity())
; 928  : 				{	// enough room, copy and construct new
; 929  : 				pointer _Ptr = _Right._Myfirst + size();
; 930  : 				_Copy_impl(_Right._Myfirst,
; 931  : 					_Ptr, this->_Myfirst);
; 932  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 933  : 				}
; 934  : 			else
; 935  : 				{	// not enough room, allocate new array and construct new
; 936  : 				if (this->_Myfirst != pointer())
; 937  : 					{	// discard old array
; 938  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 939  : 					this->_Getal().deallocate(this->_Myfirst,
; 940  : 						this->_Myend - this->_Myfirst);
; 941  : 					}
; 942  : 				if (_Buy(_Right.size()))
; 943  : 					_TRY_BEGIN
; 944  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 945  : 						this->_Myfirst);
; 946  : 					_CATCH_ALL
; 947  : 					_Tidy();
; 948  : 					_RERAISE;
; 949  : 					_CATCH_END
; 950  : 				}
; 951  : 			}
; 952  : 		return (*this);
; 953  : 		}
; 954  : 
; 955  : 	void reserve(size_type _Count)
; 956  : 		{	// determine new minimum length of allocated storage
; 957  : 		if (capacity() < _Count)

  000b6	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  000bb	73 0d		 jae	 SHORT $LN44@VertexStre

; 958  : 			{	// something to do, check and reallocate
; 959  : 			if (max_size() < _Count)
; 960  : 				_Xlen();
; 961  : 			_Reallocate(_Count);

  000bd	68 00 20 00 00	 push	 8192			; 00002000H
  000c2	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000c5	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXI@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate
$LN44@VertexStre:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 98   : }

  000ca	8b c6		 mov	 eax, esi
  000cc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d6	59		 pop	 ecx
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0VertexStream@gfxu@@QAE@H@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAE@XZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::~vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >
__unwindfunclet$??0VertexStream@gfxu@@QAE@H@Z$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 34	 add	 ecx, 52			; 00000034H
  00011	e9 00 00 00 00	 jmp	 ??1mutex@std@@QAE@XZ
__ehhandler$??0VertexStream@gfxu@@QAE@H@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0VertexStream@gfxu@@QAE@H@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0VertexStream@gfxu@@QAE@H@Z ENDP			; gfxu::VertexStream::VertexStream
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?put@VertexStream@gfxu@@QAEXABVVertexUVRGBA@2@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
?put@VertexStream@gfxu@@QAEXABVVertexUVRGBA@2@@Z PROC	; gfxu::VertexStream::put, COMDAT
; _this$ = ecx

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 137  : 	setUV(v.u, v.v);

  00004	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  00007	57		 push	 edi

; 159  : }
; 160  : void VertexStream::setUV(float u, float v)
; 161  : {
; 162  : 	vertex.u = u;

  00008	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 137  : 	setUV(v.u, v.v);

  0000b	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  00010	8b f9		 mov	 edi, ecx

; 159  : }
; 160  : void VertexStream::setUV(float u, float v)
; 161  : {
; 162  : 	vertex.u = u;

  00012	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 163  : 	vertex.v = v;

  00015	f3 0f 11 47 20	 movss	 DWORD PTR [edi+32], xmm0

; 138  : 	setColor(v.r, v.g, v.b);

  0001a	8a 4e 15	 mov	 cl, BYTE PTR [esi+21]

; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b)
; 155  : {
; 156  : 	vertex.r = r;

  0001d	8a 46 14	 mov	 al, BYTE PTR [esi+20]

; 138  : 	setColor(v.r, v.g, v.b);

  00020	8a 56 16	 mov	 dl, BYTE PTR [esi+22]

; 157  : 	vertex.g = g;

  00023	88 4f 25	 mov	 BYTE PTR [edi+37], cl
  00026	88 47 24	 mov	 BYTE PTR [edi+36], al

; 158  : 	vertex.b = b;

  00029	88 57 26	 mov	 BYTE PTR [edi+38], dl

; 108  : 	vertex.x = x;

  0002c	8b 06		 mov	 eax, DWORD PTR [esi]

; 139  : 	put(v.x, v.y, v.z);

  0002e	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00033	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]

; 108  : 	vertex.x = x;

  00038	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]

; 109  : 	vertex.y = y;
; 110  : 	vertex.z = z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  0003b	51		 push	 ecx
  0003c	89 01		 mov	 DWORD PTR [ecx], eax
  0003e	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00041	f3 0f 11 47 14	 movss	 DWORD PTR [edi+20], xmm0
  00046	f3 0f 11 4f 18	 movss	 DWORD PTR [edi+24], xmm1
  0004b	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXABVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00050	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 140  : }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?put@VertexStream@gfxu@@QAEXABVVertexUVRGBA@2@@Z ENDP	; gfxu::VertexStream::put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?compress@VertexStream@gfxu@@QAEXXZ
_TEXT	SEGMENT
?compress@VertexStream@gfxu@@QAEXXZ PROC		; gfxu::VertexStream::compress, COMDAT
; _this$ = ecx

; 244  : {

  00000	56		 push	 esi

; 245  : 	vertices.shrink_to_fit();

  00001	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 977  : 		return (this->_Myend != this->_Mylast);

  00004	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00007	39 4e 08	 cmp	 DWORD PTR [esi+8], ecx

; 978  : 		}
; 979  : 
; 980  : 	iterator begin() _NOEXCEPT
; 981  : 		{	// return iterator for beginning of mutable sequence
; 982  : 		return (iterator(this->_Myfirst, this));
; 983  : 		}
; 984  : 
; 985  : 	const_iterator begin() const _NOEXCEPT
; 986  : 		{	// return iterator for beginning of nonmutable sequence
; 987  : 		return (const_iterator(this->_Myfirst, this));
; 988  : 		}
; 989  : 
; 990  : 	iterator end() _NOEXCEPT
; 991  : 		{	// return iterator for end of mutable sequence
; 992  : 		return (iterator(this->_Mylast, this));
; 993  : 		}
; 994  : 
; 995  : 	const_iterator end() const _NOEXCEPT
; 996  : 		{	// return iterator for end of nonmutable sequence
; 997  : 		return (const_iterator(this->_Mylast, this));
; 998  : 		}
; 999  : 
; 1000 : 	iterator _Make_iter(const_iterator _Where) const
; 1001 : 		{	// make iterator from const_iterator
; 1002 : 		return (iterator(_Where._Ptr, this));
; 1003 : 		}
; 1004 : 
; 1005 : 	reverse_iterator rbegin() _NOEXCEPT
; 1006 : 		{	// return iterator for beginning of reversed mutable sequence
; 1007 : 		return (reverse_iterator(end()));
; 1008 : 		}
; 1009 : 
; 1010 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1011 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1012 : 		return (const_reverse_iterator(end()));
; 1013 : 		}
; 1014 : 
; 1015 : 	reverse_iterator rend() _NOEXCEPT
; 1016 : 		{	// return iterator for end of reversed mutable sequence
; 1017 : 		return (reverse_iterator(begin()));
; 1018 : 		}
; 1019 : 
; 1020 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1021 : 		{	// return iterator for end of reversed nonmutable sequence
; 1022 : 		return (const_reverse_iterator(begin()));
; 1023 : 		}
; 1024 : 
; 1025 :  #if _HAS_CPP0X
; 1026 : 	const_iterator cbegin() const _NOEXCEPT
; 1027 : 		{	// return iterator for beginning of nonmutable sequence
; 1028 : 		return (((const _Myt *)this)->begin());
; 1029 : 		}
; 1030 : 
; 1031 : 	const_iterator cend() const _NOEXCEPT
; 1032 : 		{	// return iterator for end of nonmutable sequence
; 1033 : 		return (((const _Myt *)this)->end());
; 1034 : 		}
; 1035 : 
; 1036 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1037 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1038 : 		return (((const _Myt *)this)->rbegin());
; 1039 : 		}
; 1040 : 
; 1041 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1042 : 		{	// return iterator for end of reversed nonmutable sequence
; 1043 : 		return (((const _Myt *)this)->rend());
; 1044 : 		}
; 1045 : 
; 1046 : 	void shrink_to_fit()
; 1047 : 		{	// reduce capacity
; 1048 : 		if (_Has_unused_capacity())

  0000a	74 44		 je	 SHORT $LN3@compress

; 1088 : 		}
; 1089 : 
; 1090 : 	size_type max_size() const _NOEXCEPT
; 1091 : 		{	// return maximum possible length of sequence
; 1092 : 		return (this->_Getal().max_size());
; 1093 : 		}
; 1094 : 
; 1095 : 	bool empty() const _NOEXCEPT
; 1096 : 		{	// test if sequence is empty
; 1097 : 		return (this->_Myfirst == this->_Mylast);

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	3b c1		 cmp	 eax, ecx

; 1049 : 			{	// worth shrinking, do it
; 1050 : 			if (empty())

  00010	75 23		 jne	 SHORT $LN4@compress

; 1098 : 		}
; 1099 : 
; 1100 : 	_Alloc get_allocator() const _NOEXCEPT
; 1101 : 		{	// return allocator object for values
; 1102 : 		return (this->_Getal());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_reference at(size_type _Pos) const
; 1106 : 		{	// subscript nonmutable sequence with checking
; 1107 : 		if (size() <= _Pos)
; 1108 : 			_Xran();
; 1109 : 		return (*(this->_Myfirst + _Pos));
; 1110 : 		}
; 1111 : 
; 1112 : 	reference at(size_type _Pos)
; 1113 : 		{	// subscript mutable sequence with checking
; 1114 : 		if (size() <= _Pos)
; 1115 : 			_Xran();
; 1116 : 		return (*(this->_Myfirst + _Pos));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_reference operator[](size_type _Pos) const
; 1120 : 		{	// subscript nonmutable sequence
; 1121 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 : 		if (size() <= _Pos)
; 1123 : 			{	// report error
; 1124 : 			_DEBUG_ERROR("vector subscript out of range");
; 1125 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1126 : 			}
; 1127 : 
; 1128 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1129 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1130 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1131 : 
; 1132 : 		return (*(this->_Myfirst + _Pos));
; 1133 : 		}
; 1134 : 
; 1135 : 	reference operator[](size_type _Pos)
; 1136 : 		{	// subscript mutable sequence
; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));
; 1149 : 		}
; 1150 : 
; 1151 :  #if _HAS_CPP0X
; 1152 : 	pointer data() _NOEXCEPT
; 1153 : 		{	// return address of first element
; 1154 : 		return (this->_Myfirst);
; 1155 : 		}
; 1156 : 
; 1157 : 	const_pointer data() const _NOEXCEPT
; 1158 : 		{	// return address of first element
; 1159 : 		return (this->_Myfirst);
; 1160 : 		}
; 1161 :  #endif /* _HAS_CPP0X */
; 1162 : 
; 1163 : 	reference front()
; 1164 : 		{	// return first element of mutable sequence
; 1165 : 		return (*begin());
; 1166 : 		}
; 1167 : 
; 1168 : 	const_reference front() const
; 1169 : 		{	// return first element of nonmutable sequence
; 1170 : 		return (*begin());
; 1171 : 		}
; 1172 : 
; 1173 : 	reference back()
; 1174 : 		{	// return last element of mutable sequence
; 1175 : 		return (*(end() - 1));
; 1176 : 		}
; 1177 : 
; 1178 : 	const_reference back() const
; 1179 : 		{	// return last element of nonmutable sequence
; 1180 : 		return (*(end() - 1));
; 1181 : 		}
; 1182 : 
; 1183 : 	void push_back(const value_type& _Val)
; 1184 : 		{	// insert element at end
; 1185 : 		if (_Inside(_STD addressof(_Val)))
; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1188 : 			if (this->_Mylast == this->_Myend)
; 1189 : 				_Reserve(1);
; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);
; 1193 : 			++this->_Mylast;
; 1194 : 			}
; 1195 : 		else
; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)
; 1198 : 				_Reserve(1);
; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);
; 1202 : 			++this->_Mylast;
; 1203 : 			}
; 1204 : 		}
; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1489 : 		if (_Capacity < _Count)
; 1490 : 			_Capacity = _Count;
; 1491 : 		return (_Capacity);
; 1492 : 		}
; 1493 : 
; 1494 : 	bool _Inside(const value_type *_Ptr) const
; 1495 : 		{	// test if _Ptr points inside vector
; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1497 : 		}
; 1498 : 
; 1499 : 	void _Reallocate(size_type _Count)
; 1500 : 		{	// move to array of exactly _Count elements
; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1502 : 
; 1503 : 		_TRY_BEGIN
; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1507 : 		_RERAISE;
; 1508 : 		_CATCH_END
; 1509 : 
; 1510 : 		size_type _Size = size();
; 1511 : 		if (this->_Myfirst != pointer())
; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);
; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();
; 1519 : 		this->_Myend = _Ptr + _Count;
; 1520 : 		this->_Mylast = _Ptr + _Size;
; 1521 : 		this->_Myfirst = _Ptr;
; 1522 : 		}
; 1523 : 
; 1524 : 	void _Reserve(size_type _Count)
; 1525 : 		{	// ensure room for _Count new elements, grow exponentially
; 1526 : 		if (_Unused_capacity() < _Count)
; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)
; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));
; 1531 : 			}
; 1532 : 		}
; 1533 : 
; 1534 : 	void _Tidy()
; 1535 : 		{	// free all storage
; 1536 : 		if (this->_Myfirst != pointer())

  00012	85 c0		 test	 eax, eax
  00014	74 3a		 je	 SHORT $LN3@compress
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1542 : 			this->_Myfirst = pointer();

  0001f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1543 : 			this->_Mylast = pointer();

  00025	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1544 : 			this->_Myend = pointer();

  0002c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00033	5e		 pop	 esi
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 246  : }

  00034	c3		 ret	 0
$LN4@compress:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00035	2b c8		 sub	 ecx, eax
  00037	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0003c	f7 e9		 imul	 ecx
  0003e	c1 fa 02	 sar	 edx, 2
  00041	8b c2		 mov	 eax, edx
  00043	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00046	03 c2		 add	 eax, edx

; 1051 : 				_Tidy();
; 1052 : 			else
; 1053 : 				_Reallocate(size());

  00048	50		 push	 eax
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXI@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate
$LN3@compress:
  00050	5e		 pop	 esi
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 246  : }

  00051	c3		 ret	 0
?compress@VertexStream@gfxu@@QAEXXZ ENDP		; gfxu::VertexStream::compress
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0VertexUVRGBA@gfxu@@QAE@MMMMMMMMM@Z
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_r$ = 16						; size = 4
_g$ = 20						; size = 4
_b$ = 24						; size = 4
_a$ = 28						; size = 4
??0VertexUVRGBA@gfxu@@QAE@MMMMMMMMM@Z PROC		; gfxu::VertexUVRGBA::VertexUVRGBA, COMDAT
; _this$ = ecx
; _x$ = xmm1s
; _y$ = xmm2s
; _z$ = xmm3s

; 70   : {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _u$[ebp]
  00008	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0
  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _v$[ebp]
  00012	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0
  00017	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _r$[ebp]
  0001c	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1
  00020	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@437f0000
  00028	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0002c	f3 0f 11 51 04	 movss	 DWORD PTR [ecx+4], xmm2
  00031	f3 0f 11 59 08	 movss	 DWORD PTR [ecx+8], xmm3
  00036	f3 0f 2c c0	 cvttss2si eax, xmm0
  0003a	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _g$[ebp]
  0003f	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00043	88 41 14	 mov	 BYTE PTR [ecx+20], al
  00046	f3 0f 2c c0	 cvttss2si eax, xmm0
  0004a	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _b$[ebp]
  0004f	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00053	88 41 15	 mov	 BYTE PTR [ecx+21], al
  00056	f3 0f 2c c0	 cvttss2si eax, xmm0
  0005a	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _a$[ebp]
  0005f	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00063	88 41 16	 mov	 BYTE PTR [ecx+22], al
  00066	f3 0f 2c c0	 cvttss2si eax, xmm0
  0006a	88 41 17	 mov	 BYTE PTR [ecx+23], al
  0006d	8b c1		 mov	 eax, ecx
  0006f	5d		 pop	 ebp
  00070	c2 18 00	 ret	 24			; 00000018H
??0VertexUVRGBA@gfxu@@QAE@MMMMMMMMM@Z ENDP		; gfxu::VertexUVRGBA::VertexUVRGBA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?setColor@Uniforms@gfxu@@SAXMMMM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
?setColor@Uniforms@gfxu@@SAXMMMM@Z PROC			; gfxu::Uniforms::setColor, COMDAT
; _r$ = xmm0s
; _g$ = xmm1s
; _b$ = xmm2s
; _a$ = xmm3s

; 542  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 16   : {

  00006	f3 0f 11 45 f0	 movss	 DWORD PTR $T1[ebp], xmm0
  0000b	f3 0f 11 4d f4	 movss	 DWORD PTR $T1[ebp+4], xmm1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h

; 242  : 			val = value;

  00010	f3 0f 7e 45 f0	 movq	 xmm0, QWORD PTR $T1[ebp]
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 16   : {

  00015	f3 0f 11 55 f8	 movss	 DWORD PTR $T1[ebp+8], xmm2
  0001a	f3 0f 11 5d fc	 movss	 DWORD PTR $T1[ebp+12], xmm3
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h

; 242  : 			val = value;

  0001f	66 0f d6 05 00
	00 00 00	 movq	 QWORD PTR ?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A, xmm0
  00027	f3 0f 7e 45 f8	 movq	 xmm0, QWORD PTR $T1[ebp+8]
  0002c	66 0f d6 05 08
	00 00 00	 movq	 QWORD PTR ?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+8, xmm0

; 243  : 			changed = true;

  00034	c6 05 10 00 00
	00 01		 mov	 BYTE PTR ?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+16, 1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 544  : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?setColor@Uniforms@gfxu@@SAXMMMM@Z ENDP			; gfxu::Uniforms::setColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?setFogColor@Uniforms@gfxu@@SAXMMMM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
?setFogColor@Uniforms@gfxu@@SAXMMMM@Z PROC		; gfxu::Uniforms::setFogColor, COMDAT
; _r$ = xmm0s
; _g$ = xmm1s
; _b$ = xmm2s
; _a$ = xmm3s

; 547  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 16   : {

  00006	f3 0f 11 45 f0	 movss	 DWORD PTR $T1[ebp], xmm0
  0000b	f3 0f 11 4d f4	 movss	 DWORD PTR $T1[ebp+4], xmm1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h

; 242  : 			val = value;

  00010	f3 0f 7e 45 f0	 movq	 xmm0, QWORD PTR $T1[ebp]
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 16   : {

  00015	f3 0f 11 55 f8	 movss	 DWORD PTR $T1[ebp+8], xmm2
  0001a	f3 0f 11 5d fc	 movss	 DWORD PTR $T1[ebp+12], xmm3
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h

; 242  : 			val = value;

  0001f	66 0f d6 05 00
	00 00 00	 movq	 QWORD PTR ?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A, xmm0
  00027	f3 0f 7e 45 f8	 movq	 xmm0, QWORD PTR $T1[ebp+8]
  0002c	66 0f d6 05 08
	00 00 00	 movq	 QWORD PTR ?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+8, xmm0

; 243  : 			changed = true;

  00034	c6 05 10 00 00
	00 01		 mov	 BYTE PTR ?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+16, 1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 549  : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?setFogColor@Uniforms@gfxu@@SAXMMMM@Z ENDP		; gfxu::Uniforms::setFogColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?reset@Uniforms@gfxu@@SAXXZ
_TEXT	SEGMENT
?reset@Uniforms@gfxu@@SAXXZ PROC			; gfxu::Uniforms::reset, COMDAT

; 591  : 	MMS.clear();

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::MMS
  00005	e8 00 00 00 00	 call	 ?clear@MatrixStack@gfxu@@QAEXXZ ; gfxu::MatrixStack::clear

; 592  : 	PMS.clear();

  0000a	b9 00 00 00 00	 mov	 ecx, OFFSET ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::PMS
  0000f	e9 00 00 00 00	 jmp	 ?clear@MatrixStack@gfxu@@QAEXXZ ; gfxu::MatrixStack::clear
?reset@Uniforms@gfxu@@SAXXZ ENDP			; gfxu::Uniforms::reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?getError@gfxu@@YA_NXZ
_TEXT	SEGMENT
?getError@gfxu@@YA_NXZ PROC				; gfxu::getError, COMDAT

; 716  : 	int error = glGetError();

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glGetError@0

; 717  : 	if(error != GL_NO_ERROR)

  00006	85 c0		 test	 eax, eax
  00008	74 0a		 je	 SHORT $LN2@getError

; 718  : 	{
; 719  : 		const GLubyte* errorString = gluErrorString(error);

  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__gluErrorString@4

; 720  : 		return true;

  00011	b0 01		 mov	 al, 1

; 724  : 	}
; 725  : }

  00013	c3		 ret	 0
$LN2@getError:

; 721  : 	} else
; 722  : 	{
; 723  : 		return false;

  00014	32 c0		 xor	 al, al

; 724  : 	}
; 725  : }

  00016	c3		 ret	 0
?getError@gfxu@@YA_NXZ ENDP				; gfxu::getError
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0VertexStream@gfxu@@QAE@XZ
_TEXT	SEGMENT
??0VertexStream@gfxu@@QAE@XZ PROC			; gfxu::VertexStream::VertexStream, COMDAT
; _this$ = ecx

; 91   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 63   : 	return (_Check_C_return(_Mtx_init(_Mtx, _Type)));

  00003	6a 02		 push	 2
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 91   : {

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7VertexStream@gfxu@@6B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 486  : 		_Myfirst = pointer();

  0000b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 487  : 		_Mylast = pointer();

  00012	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 488  : 		_Myend = pointer();

  00019	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex

; 28   : 		_Mtx_initX(&_Mtx, _Flags | _Mtx_try);

  00020	8d 46 34	 lea	 eax, DWORD PTR [esi+52]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  00023	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0002a	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00031	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00038	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  0003f	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  00046	c7 46 24 ff ff
	ff ff		 mov	 DWORD PTR [esi+36], -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 63   : 	return (_Check_C_return(_Mtx_init(_Mtx, _Type)));

  0004d	50		 push	 eax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 91   : {

  0004e	66 c7 46 30 00
	00		 mov	 WORD PTR [esi+48], 0
  00054	c6 46 32 00	 mov	 BYTE PTR [esi+50], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 63   : 	return (_Check_C_return(_Mtx_init(_Mtx, _Type)));

  00058	e8 00 00 00 00	 call	 __Mtx_init
  0005d	83 c4 08	 add	 esp, 8

; 32   : 	if (_Res != _Thrd_success)

  00060	85 c0		 test	 eax, eax
  00062	74 09		 je	 SHORT $LN22@VertexStre

; 33   : 		_Throw_C_error(_Res);

  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  0006a	83 c4 04	 add	 esp, 4
$LN22@VertexStre:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 93   : }

  0006d	8b c6		 mov	 eax, esi
  0006f	5e		 pop	 esi
  00070	c3		 ret	 0
??0VertexStream@gfxu@@QAE@XZ ENDP			; gfxu::VertexStream::VertexStream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?put@VertexStream@gfxu@@QAEXABVVertex@2@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
?put@VertexStream@gfxu@@QAEXABVVertex@2@@Z PROC		; gfxu::VertexStream::put, COMDAT
; _this$ = ecx

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 123  : 	put(v.x, v.y, v.z);

  00003	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]

; 108  : 	vertex.x = x;

  00006	8d 51 10	 lea	 edx, DWORD PTR [ecx+16]

; 123  : 	put(v.x, v.y, v.z);

  00009	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0000e	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]

; 108  : 	vertex.x = x;

  00013	8b 00		 mov	 eax, DWORD PTR [eax]

; 109  : 	vertex.y = y;

  00015	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 110  : 	vertex.z = z;

  0001a	f3 0f 11 49 18	 movss	 DWORD PTR [ecx+24], xmm1

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0001f	52		 push	 edx
  00020	83 c1 04	 add	 ecx, 4
  00023	89 02		 mov	 DWORD PTR [edx], eax
  00025	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXABVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0002a	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 124  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?put@VertexStream@gfxu@@QAEXABVVertex@2@@Z ENDP		; gfxu::VertexStream::put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?draw@VertexStream@gfxu@@QAEXI@Z
_TEXT	SEGMENT
_mode$ = 8						; size = 4
?draw@VertexStream@gfxu@@QAEXI@Z PROC			; gfxu::VertexStream::draw, COMDAT
; _this$ = ecx

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000e	2b 56 04	 sub	 edx, DWORD PTR [esi+4]
  00011	f7 ea		 imul	 edx
  00013	c1 fa 02	 sar	 edx, 2
  00016	8b c2		 mov	 eax, edx
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	03 c2		 add	 eax, edx
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 235  : 	if(vertices.size() > 0 && upload())

  0001d	74 3a		 je	 SHORT $LN1@draw
  0001f	e8 00 00 00 00	 call	 ?upload@VertexStream@gfxu@@QAE_NXZ ; gfxu::VertexStream::upload
  00024	84 c0		 test	 al, al
  00026	74 31		 je	 SHORT $LN1@draw

; 236  : 	{
; 237  : 		Uniforms::uploadChanges();

  00028	e8 00 00 00 00	 call	 ?uploadChanges@Uniforms@gfxu@@SAXXZ ; gfxu::Uniforms::uploadChanges

; 238  : 		glBindVertexArray(vao);

  0002d	ff 76 28	 push	 DWORD PTR [esi+40]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewBindVertexArray
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00036	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00039	2b 4e 04	 sub	 ecx, DWORD PTR [esi+4]
  0003c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00041	f7 e9		 imul	 ecx
  00043	c1 fa 02	 sar	 edx, 2
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 239  : 		glDrawArrays(mode, 0, vertices.size());

  0004d	50		 push	 eax
  0004e	6a 00		 push	 0
  00050	ff 75 08	 push	 DWORD PTR _mode$[ebp]
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glDrawArrays@12
$LN1@draw:

; 240  : 	}
; 241  : }

  00059	5e		 pop	 esi
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?draw@VertexStream@gfxu@@QAEXI@Z ENDP			; gfxu::VertexStream::draw
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0Vertex@gfxu@@QAE@MMM@Z
_TEXT	SEGMENT
??0Vertex@gfxu@@QAE@MMM@Z PROC				; gfxu::Vertex::Vertex, COMDAT
; _this$ = ecx
; _x$ = xmm1s
; _y$ = xmm2s
; _z$ = xmm3s

; 19   : {}

  00000	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1
  00004	f3 0f 11 51 04	 movss	 DWORD PTR [ecx+4], xmm2
  00009	f3 0f 11 59 08	 movss	 DWORD PTR [ecx+8], xmm3
  0000e	8b c1		 mov	 eax, ecx
  00010	c3		 ret	 0
??0Vertex@gfxu@@QAE@MMM@Z ENDP				; gfxu::Vertex::Vertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?push@MatrixStack@gfxu@@QAEXVMatrix@geom@@@Z
_TEXT	SEGMENT
$T1 = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 64
?push@MatrixStack@gfxu@@QAEXVMatrix@geom@@@Z PROC	; gfxu::MatrixStack::push, COMDAT
; _this$dead$ = ecx

; 496  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 143  : 		c.push_back(_Val);

  00010	8d 45 08	 lea	 eax, DWORD PTR _mat$[ebp]
  00013	50		 push	 eax
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::MMS
  00019	e8 00 00 00 00	 call	 ?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXABVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 498  : 	topmost = topmost * mat;

  0001e	8d 45 08	 lea	 eax, DWORD PTR _mat$[ebp]
  00021	50		 push	 eax
  00022	8d 45 b8	 lea	 eax, DWORD PTR $T1[ebp]
  00025	50		 push	 eax
  00026	b9 14 00 00 00	 mov	 ecx, OFFSET ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+20
  0002b	e8 00 00 00 00	 call	 ??DMatrix@geom@@QBE?AV01@ABV01@@Z ; geom::Matrix::operator*
  00030	50		 push	 eax
  00031	b9 14 00 00 00	 mov	 ecx, OFFSET ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+20
  00036	e8 00 00 00 00	 call	 ??4Matrix@geom@@QAEAAV01@ABV01@@Z ; geom::Matrix::operator=

; 499  : 	changed = true;
; 500  : }

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003e	33 cd		 xor	 ecx, ebp
  00040	c6 05 54 00 00
	00 01		 mov	 BYTE PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+84, 1
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 40 00	 ret	 64			; 00000040H
?push@MatrixStack@gfxu@@QAEXVMatrix@geom@@@Z ENDP	; gfxu::MatrixStack::push
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?mult@MatrixStack@gfxu@@QAEXVMatrix@geom@@@Z
_TEXT	SEGMENT
$T1 = -120						; size = 12
$T2 = -108						; size = 12
$T3 = -96						; size = 12
$T4 = -84						; size = 12
$T5 = -72						; size = 64
$T6 = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 64
?mult@MatrixStack@gfxu@@QAEXVMatrix@geom@@@Z PROC	; gfxu::MatrixStack::mult, COMDAT
; _this$ = ecx

; 503  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1436 : 		return (*(end() - 1));

  00013	51		 push	 ecx
  00014	8d 45 94	 lea	 eax, DWORD PTR $T2[ebp]
  00017	50		 push	 eax
  00018	8d 45 88	 lea	 eax, DWORD PTR $T1[ebp]
  0001b	50		 push	 eax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 503  : {

  0001c	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1436 : 		return (*(end() - 1));

  0001e	e8 00 00 00 00	 call	 ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
  00023	8b c8		 mov	 ecx, eax
  00025	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
  0002a	8b d0		 mov	 edx, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	85 c0		 test	 eax, eax
  00030	74 02		 je	 SHORT $LN14@mult
$LN13@mult:
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
$LN14@mult:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00034	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 1436 : 		return (*(end() - 1));

  00037	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0003a	49		 dec	 ecx
  0003b	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 1436 : 		return (*(end() - 1));

  0003e	51		 push	 ecx
  0003f	8b 1c 88	 mov	 ebx, DWORD PTR [eax+ecx*4]
  00042	8d 45 ac	 lea	 eax, DWORD PTR $T4[ebp]
  00045	50		 push	 eax
  00046	8d 45 a0	 lea	 eax, DWORD PTR $T3[ebp]
  00049	50		 push	 eax
  0004a	8b cf		 mov	 ecx, edi
  0004c	e8 00 00 00 00	 call	 ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
  00051	8b c8		 mov	 ecx, eax
  00053	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
  00058	8b c8		 mov	 ecx, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0005a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005c	85 c0		 test	 eax, eax
  0005e	74 02		 je	 SHORT $LN28@mult
$LN27@mult:
  00060	8b 00		 mov	 eax, DWORD PTR [eax]
$LN28@mult:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00062	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 1436 : 		return (*(end() - 1));

  00065	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00068	4a		 dec	 edx
  00069	23 51 08	 and	 edx, DWORD PTR [ecx+8]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 504  : 	stack.top() = stack.top() * mat;

  0006c	8b cb		 mov	 ecx, ebx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1436 : 		return (*(end() - 1));

  0006e	8b 34 90	 mov	 esi, DWORD PTR [eax+edx*4]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 504  : 	stack.top() = stack.top() * mat;

  00071	8d 45 08	 lea	 eax, DWORD PTR _mat$[ebp]
  00074	50		 push	 eax
  00075	8d 45 b8	 lea	 eax, DWORD PTR $T6[ebp]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ??DMatrix@geom@@QBE?AV01@ABV01@@Z ; geom::Matrix::operator*
  0007e	50		 push	 eax
  0007f	8b ce		 mov	 ecx, esi
  00081	e8 00 00 00 00	 call	 ??4Matrix@geom@@QAEAAV01@ABV01@@Z ; geom::Matrix::operator=

; 505  : 	topmost = topmost * mat;

  00086	8d 45 08	 lea	 eax, DWORD PTR _mat$[ebp]
  00089	50		 push	 eax
  0008a	8d 45 b8	 lea	 eax, DWORD PTR $T5[ebp]
  0008d	50		 push	 eax
  0008e	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00091	e8 00 00 00 00	 call	 ??DMatrix@geom@@QBE?AV01@ABV01@@Z ; geom::Matrix::operator*
  00096	50		 push	 eax
  00097	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  0009a	e8 00 00 00 00	 call	 ??4Matrix@geom@@QAEAAV01@ABV01@@Z ; geom::Matrix::operator=

; 506  : 	changed = true;
; 507  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	c6 47 54 01	 mov	 BYTE PTR [edi+84], 1
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	33 cd		 xor	 ecx, ebp
  000aa	5b		 pop	 ebx
  000ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 40 00	 ret	 64			; 00000040H
?mult@MatrixStack@gfxu@@QAEXVMatrix@geom@@@Z ENDP	; gfxu::MatrixStack::mult
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?pop@MatrixStack@gfxu@@QAEXXZ
_TEXT	SEGMENT
$T1 = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
?pop@MatrixStack@gfxu@@QAEXXZ PROC			; gfxu::MatrixStack::pop, COMDAT
; _this$dead$ = ecx

; 517  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1382 : 		return (this->_Mysize == 0);

  00010	a1 10 00 00 00	 mov	 eax, DWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+16
  00015	85 c0		 test	 eax, eax

; 1383 : 		}
; 1384 : 
; 1385 : 	allocator_type get_allocator() const _NOEXCEPT
; 1386 : 		{	// return allocator object for values
; 1387 : 		return (this->_Getal());
; 1388 : 		}
; 1389 : 
; 1390 : 	const_reference at(size_type _Pos) const
; 1391 : 		{	// subscript nonmutable sequence with checking
; 1392 : 		if (this->_Mysize <= _Pos)
; 1393 : 			_Xran();
; 1394 : 		return (*(begin() + _Pos));
; 1395 : 		}
; 1396 : 
; 1397 : 	reference at(size_type _Pos)
; 1398 : 		{	// subscript mutable sequence with checking
; 1399 : 		if (this->_Mysize <= _Pos)
; 1400 : 			_Xran();
; 1401 : 		return (*(begin() + _Pos));
; 1402 : 		}
; 1403 : 
; 1404 : 	const_reference operator[](size_type _Pos) const
; 1405 : 		{	// subscript nonmutable sequence
; 1406 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1407 : 		if (this->_Mysize <= _Pos)
; 1408 : 			_DEBUG_ERROR("deque subscript out of range");
; 1409 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1410 : 
; 1411 : 		return (*(begin() + _Pos));
; 1412 : 		}
; 1413 : 
; 1414 : 	reference operator[](size_type _Pos)
; 1415 : 		{	// subscript mutable sequence
; 1416 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1417 : 		if (this->_Mysize <= _Pos)
; 1418 : 			_DEBUG_ERROR("deque subscript out of range");
; 1419 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1420 : 
; 1421 : 		return (*(begin() + _Pos));
; 1422 : 		}
; 1423 : 
; 1424 : 	reference front()
; 1425 : 		{	// return first element of mutable sequence
; 1426 : 		return (*begin());
; 1427 : 		}
; 1428 : 
; 1429 : 	const_reference front() const
; 1430 : 		{	// return first element of nonmutable sequence
; 1431 : 		return (*begin());
; 1432 : 		}
; 1433 : 
; 1434 : 	reference back()
; 1435 : 		{	// return last element of mutable sequence
; 1436 : 		return (*(end() - 1));
; 1437 : 		}
; 1438 : 
; 1439 : 	const_reference back() const
; 1440 : 		{	// return last element of nonmutable sequence
; 1441 : 		return (*(end() - 1));
; 1442 : 		}
; 1443 : 
; 1444 : 	void push_front(const value_type& _Val)
; 1445 : 		{	// insert element at beginning
; 1446 : 		this->_Orphan_all();
; 1447 : 		_PUSH_FRONT_BEGIN;
; 1448 : 		this->_Getal().construct(
; 1449 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1450 : 		_PUSH_FRONT_END;
; 1451 : 		}
; 1452 : 
; 1453 : 	void pop_front()
; 1454 : 		{	// erase element at beginning
; 1455 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1456 : 		if (empty())
; 1457 : 			_DEBUG_ERROR("deque empty before pop");
; 1458 : 		else
; 1459 : 			{	// something to erase, do it
; 1460 : 			_Orphan_off(this->_Myoff);
; 1461 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1462 : 			this->_Getal().destroy(
; 1463 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1464 : 			if (--this->_Mysize == 0)
; 1465 : 				this->_Myoff = 0;
; 1466 : 			else
; 1467 : 				++this->_Myoff;
; 1468 : 			}
; 1469 : 
; 1470 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 		if (!empty())
; 1472 : 			{	// something to erase, do it
; 1473 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1474 : 			this->_Getal().destroy(
; 1475 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1476 : 			if (--this->_Mysize == 0)
; 1477 : 				this->_Myoff = 0;
; 1478 : 			else
; 1479 : 				++this->_Myoff;
; 1480 : 			}
; 1481 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1482 : 		}
; 1483 : 
; 1484 : 	void push_back(const value_type& _Val)
; 1485 : 		{	// insert element at end
; 1486 : 		this->_Orphan_all();
; 1487 : 		_PUSH_BACK_BEGIN;
; 1488 : 		this->_Getal().construct(
; 1489 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1490 : 		_PUSH_BACK_END;
; 1491 : 		}
; 1492 : 
; 1493 : 	void pop_back()
; 1494 : 		{	// erase element at end
; 1495 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1496 : 		if (empty())
; 1497 : 			_DEBUG_ERROR("deque empty before pop");
; 1498 : 		else
; 1499 : 			{	// something to erase, do it
; 1500 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1501 : 			_Orphan_off(_Newoff);
; 1502 : 			size_type _Block = this->_Getblock(_Newoff);
; 1503 : 			this->_Getal().destroy(
; 1504 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1505 : 			if (--this->_Mysize == 0)
; 1506 : 				this->_Myoff = 0;
; 1507 : 			}
; 1508 : 
; 1509 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1510 : 		if (!empty())

  00017	74 18		 je	 SHORT $LN5@pop

; 1511 : 			{	// something to erase, do it
; 1512 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1513 : 			size_type _Block = this->_Getblock(_Newoff);
; 1514 : 			this->_Getal().destroy(
; 1515 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1516 : 			if (--this->_Mysize == 0)

  00019	48		 dec	 eax
  0001a	a3 10 00 00 00	 mov	 DWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+16, eax
  0001f	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+12
  00024	b9 00 00 00 00	 mov	 ecx, 0
  00029	0f 44 c1	 cmove	 eax, ecx
  0002c	a3 0c 00 00 00	 mov	 DWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+12, eax
$LN5@pop:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 519  : 	topmost = unstack();

  00031	8d 45 b8	 lea	 eax, DWORD PTR $T1[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?unstack@MatrixStack@gfxu@@AAE?AVMatrix@geom@@XZ ; gfxu::MatrixStack::unstack
  0003a	50		 push	 eax
  0003b	b9 14 00 00 00	 mov	 ecx, OFFSET ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+20
  00040	e8 00 00 00 00	 call	 ??4Matrix@geom@@QAEAAV01@ABV01@@Z ; geom::Matrix::operator=

; 520  : 	changed = true;
; 521  : }

  00045	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00048	33 cd		 xor	 ecx, ebp
  0004a	c6 05 54 00 00
	00 01		 mov	 BYTE PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+84, 1
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?pop@MatrixStack@gfxu@@QAEXXZ ENDP			; gfxu::MatrixStack::pop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0VertexShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 24
__$EHRec$ = -12						; size = 12
_fileName$ = 8						; size = 24
??0VertexShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; gfxu::VertexShader::VertexShader, COMDAT
; _this$ = ecx

; 336  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0VertexShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00028	33 c0		 xor	 eax, eax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 336  : {

  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 735  : 		assign(_Right, 0, npos);

  00031	6a ff		 push	 -1
  00033	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00034	66 89 45 dc	 mov	 WORD PTR $T2[ebp], ax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 735  : 		assign(_Right, 0, npos);

  00038	8d 45 08	 lea	 eax, DWORD PTR _fileName$[ebp]
  0003b	50		 push	 eax
  0003c	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;
; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2260 : 			if (0 < _Newsize)
; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);
; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  0003f	c7 45 f0 07 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 7

; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00046	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 735  : 		assign(_Right, 0, npos);

  0004d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 323  : {

  00052	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00056	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00059	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Shader@gfxu@@6B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  0005f	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 735  : 		assign(_Right, 0, npos);

  00061	6a ff		 push	 -1

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;
; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2260 : 			if (0 < _Newsize)
; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);
; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00063	c7 41 14 07 00
	00 00		 mov	 DWORD PTR [ecx+20], 7

; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  0006a	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 735  : 		assign(_Right, 0, npos);

  00071	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00072	66 89 01	 mov	 WORD PTR [ecx], ax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 735  : 		assign(_Right, 0, npos);

  00075	8d 45 dc	 lea	 eax, DWORD PTR $T2[ebp]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0007e	83 7d f0 08	 cmp	 DWORD PTR $T2[ebp+20], 8
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 323  : {

  00082	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00086	72 0b		 jb	 SHORT $LN120@VertexShad
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00088	ff 75 dc	 push	 DWORD PTR $T2[ebp]
  0008b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00090	83 c4 04	 add	 esp, 4
$LN120@VertexShad:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00093	83 7d 1c 08	 cmp	 DWORD PTR _fileName$[ebp+20], 8
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 336  : {

  00097	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7VertexShader@gfxu@@6B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0009d	72 0b		 jb	 SHORT $LN166@VertexShad
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0009f	ff 75 08	 push	 DWORD PTR _fileName$[ebp]
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a7	83 c4 04	 add	 esp, 4
$LN166@VertexShad:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 338  : }

  000aa	8b c6		 mov	 eax, esi
  000ac	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000af	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b6	59		 pop	 ecx
  000b7	5e		 pop	 esi
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0VertexShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _fileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??0VertexShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$3:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??0VertexShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0VertexShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0VertexShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; gfxu::VertexShader::VertexShader
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0FragmentShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 24
__$EHRec$ = -12						; size = 12
_fileName$ = 8						; size = 24
??0FragmentShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; gfxu::FragmentShader::FragmentShader, COMDAT
; _this$ = ecx

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0FragmentShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00028	33 c0		 xor	 eax, eax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 358  : {

  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 735  : 		assign(_Right, 0, npos);

  00031	6a ff		 push	 -1
  00033	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00034	66 89 45 dc	 mov	 WORD PTR $T2[ebp], ax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 735  : 		assign(_Right, 0, npos);

  00038	8d 45 08	 lea	 eax, DWORD PTR _fileName$[ebp]
  0003b	50		 push	 eax
  0003c	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;
; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2260 : 			if (0 < _Newsize)
; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);
; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  0003f	c7 45 f0 07 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 7

; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00046	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 735  : 		assign(_Right, 0, npos);

  0004d	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 323  : {

  00052	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00056	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00059	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Shader@gfxu@@6B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  0005f	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 735  : 		assign(_Right, 0, npos);

  00061	6a ff		 push	 -1

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;
; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2260 : 			if (0 < _Newsize)
; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);
; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00063	c7 41 14 07 00
	00 00		 mov	 DWORD PTR [ecx+20], 7

; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  0006a	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 735  : 		assign(_Right, 0, npos);

  00071	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00072	66 89 01	 mov	 WORD PTR [ecx], ax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 735  : 		assign(_Right, 0, npos);

  00075	8d 45 dc	 lea	 eax, DWORD PTR $T2[ebp]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0007e	83 7d f0 08	 cmp	 DWORD PTR $T2[ebp+20], 8
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 323  : {

  00082	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00086	72 0b		 jb	 SHORT $LN120@FragmentSh
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00088	ff 75 dc	 push	 DWORD PTR $T2[ebp]
  0008b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00090	83 c4 04	 add	 esp, 4
$LN120@FragmentSh:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00093	83 7d 1c 08	 cmp	 DWORD PTR _fileName$[ebp+20], 8
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 358  : {

  00097	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7FragmentShader@gfxu@@6B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0009d	72 0b		 jb	 SHORT $LN166@FragmentSh
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0009f	ff 75 08	 push	 DWORD PTR _fileName$[ebp]
  000a2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a7	83 c4 04	 add	 esp, 4
$LN166@FragmentSh:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 360  : }

  000aa	8b c6		 mov	 eax, esi
  000ac	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000af	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b6	59		 pop	 ecx
  000b7	5e		 pop	 esi
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FragmentShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _fileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??0FragmentShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$3:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??0FragmentShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0FragmentShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0FragmentShader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; gfxu::FragmentShader::FragmentShader
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0ShaderProgram@gfxu@@QAE@PAVVertexShader@1@PAVGeometryShader@1@PAVFragmentShader@1@@Z
_TEXT	SEGMENT
_vShader$ = 8						; size = 4
_gShader$dead$ = 12					; size = 4
_fShader$ = 16						; size = 4
??0ShaderProgram@gfxu@@QAE@PAVVertexShader@1@PAVGeometryShader@1@PAVFragmentShader@1@@Z PROC ; gfxu::ShaderProgram::ShaderProgram, COMDAT
; _this$ = ecx

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _vShader$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 06		 mov	 DWORD PTR [esi], eax
  0000b	8b 45 10	 mov	 eax, DWORD PTR _fShader$[ebp]
  0000e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00015	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00018	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0

; 371  : 	create();

  0001c	e8 00 00 00 00	 call	 ?create@ShaderProgram@gfxu@@AAE_NXZ ; gfxu::ShaderProgram::create

; 372  : }

  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 0c 00	 ret	 12			; 0000000cH
??0ShaderProgram@gfxu@@QAE@PAVVertexShader@1@PAVGeometryShader@1@PAVFragmentShader@1@@Z ENDP ; gfxu::ShaderProgram::ShaderProgram
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??1ShaderProgram@gfxu@@QAE@XZ
_TEXT	SEGMENT
??1ShaderProgram@gfxu@@QAE@XZ PROC			; gfxu::ShaderProgram::~ShaderProgram, COMDAT
; _this$ = ecx

; 375  : {

  00000	56		 push	 esi

; 376  : 	glUseProgram(0);

  00001	6a 00		 push	 0
  00003	8b f1		 mov	 esi, ecx
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUseProgram

; 377  : 	glDeleteProgram(object);

  0000b	ff 76 0c	 push	 DWORD PTR [esi+12]
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewDeleteProgram
  00014	5e		 pop	 esi

; 378  : }

  00015	c3		 ret	 0
??1ShaderProgram@gfxu@@QAE@XZ ENDP			; gfxu::ShaderProgram::~ShaderProgram
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?bind@ShaderProgram@gfxu@@QAEXXZ
_TEXT	SEGMENT
?bind@ShaderProgram@gfxu@@QAEXXZ PROC			; gfxu::ShaderProgram::bind, COMDAT
; _this$ = ecx

; 465  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 466  : 	glUseProgram(object);

  00003	ff 76 0c	 push	 DWORD PTR [esi+12]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUseProgram

; 598  : }
; 599  : 
; 600  : bool Uniforms::forceUpload = false;
; 601  : MatrixStack Uniforms::MMS;
; 602  : MatrixStack Uniforms::PMS;
; 603  : Uniform<geom::Vector> Uniforms::color;
; 604  : Uniform<geom::Vector> Uniforms::camPos;
; 605  : Uniform<geom::Vector> Uniforms::fogColor;
; 606  : Uniform<float> Uniforms::fogDist;
; 607  : 
; 608  : 
; 609  : 
; 610  : Texture2D::Texture2D()
; 611  : 	: data(nullptr), width(0), height(0), object(0), magFilter(GL_LINEAR), minFilter(GL_LINEAR), wrap(GL_REPEAT), mipmapped(false), uploaded(false)
; 612  : {
; 613  : 
; 614  : }
; 615  : 
; 616  : Texture2D::Texture2D(unsigned int width, unsigned int height, TEXTURE_PARAMETER magFilter, TEXTURE_PARAMETER minFilter, TEXTURE_PARAMETER wrap, bool mipmapped)
; 617  : 	: width(width), height(height), data(new unsigned char[width * height * 4]), object(0), magFilter(magFilter), minFilter(minFilter), wrap(wrap), mipmapped(mipmapped), uploaded(false)
; 618  : {
; 619  : 
; 620  : }
; 621  : 
; 622  : Texture2D::Texture2D(unsigned int width, unsigned int height, Noise::NoiseGenerator2D* r, Noise::NoiseGenerator2D* g, Noise::NoiseGenerator2D* b, Noise::NoiseGenerator2D* a)
; 623  : 	: width(width), height(height), data(new unsigned char[width * height* 4]), object(0), magFilter(GL_LINEAR), minFilter(GL_LINEAR), wrap(GL_CLAMP_TO_EDGE), mipmapped(false), uploaded(false)
; 624  : {
; 625  : 	for(unsigned int i = 0; i < width; i++)
; 626  : 	{
; 627  : 		for(unsigned int j = 0; j < height; j++)
; 628  : 		{
; 629  : 			data[(i + j * width) * 4] = (unsigned char)((r == nullptr ? 1.0f : r->getNoise(i, j)) * 255.0f);
; 630  : 			data[(i + j * width) * 4 + 1] = (unsigned char)((g == nullptr ? 1.0f : g->getNoise(i, j)) * 255.0f);
; 631  : 			data[(i + j * width) * 4 + 2] = (unsigned char)((b == nullptr ? 1.0f : b->getNoise(i, j)) * 255.0f);
; 632  : 			data[(i + j * width) * 4 + 3] = (unsigned char)((a == nullptr ? 1.0f : a->getNoise(i, j)) * 255.0f);
; 633  : 		}
; 634  : 	}
; 635  : }
; 636  : 
; 637  : Texture2D::Texture2D(wstring fileName)
; 638  : 	: object(0), magFilter(GL_LINEAR), minFilter(GL_LINEAR), wrap(GL_REPEAT), mipmapped(false), uploaded(false)
; 639  : {
; 640  : 	init(fileName);
; 641  : }
; 642  : 
; 643  : Texture2D::Texture2D(wstring fileName, TEXTURE_PARAMETER magFilter, TEXTURE_PARAMETER minFilter, TEXTURE_PARAMETER wrap, bool mipmapped)
; 644  : 	: object(0), magFilter(magFilter), minFilter(minFilter), wrap(wrap), mipmapped(mipmapped), uploaded(false)
; 645  : {
; 646  : 	init(fileName);
; 647  : }
; 648  : 
; 649  : void Texture2D::init(wstring fileName)
; 650  : {
; 651  : 	char* nFileName = new char[fileName.length() + 1];
; 652  : 	std::wcstombs(nFileName, fileName.c_str(), sizeof(char) * (fileName.length() + 1));
; 653  : 	std::vector<unsigned char> image;
; 654  : 	if(!lodepng::decode(image, width, height, nFileName))
; 655  : 	{
; 656  : 		data = new unsigned char[width * height * 4];
; 657  : 
; 658  : 		for(unsigned int i = 0; i < height; i++)
; 659  : 		{
; 660  : 			memcpy(&data[i * width * 4], &image[(height - 1 - i) * width * 4], sizeof(unsigned char) * width * 4);
; 661  : 		}
; 662  : 	}
; 663  : }
; 664  : 
; 665  : Texture2D::~Texture2D()
; 666  : {
; 667  : 	if(data != nullptr)
; 668  : 	{
; 669  : 		delete[] data;
; 670  : 	}
; 671  : 
; 672  : 	if(uploaded)
; 673  : 	{
; 674  : 		glDeleteTextures(1, &object);
; 675  : 	}
; 676  : }
; 677  : 
; 678  : bool Texture2D::upload()
; 679  : {
; 680  : 	glGenTextures(1, &object);
; 681  : 	glBindTexture(GL_TEXTURE_2D, object);
; 682  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, minFilter);
; 683  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, magFilter);
; 684  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, wrap);
; 685  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, wrap);
; 686  : 	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
; 687  : 	if(mipmapped)
; 688  : 	{
; 689  : 		glGenerateMipmap(GL_TEXTURE_2D);
; 690  : 	}
; 691  : 
; 692  : 	uploaded = true;
; 693  : 
; 694  : 	return true;
; 695  : }
; 696  : 
; 697  : void Texture2D::bind()
; 698  : {
; 699  : 	if(!uploaded)
; 700  : 	{
; 701  : 		if(!upload())
; 702  : 		{
; 703  : 			return;
; 704  : 		}
; 705  : 	}
; 706  : 	else
; 707  : 	{
; 708  : 		glBindTexture(GL_TEXTURE_2D, object);
; 709  : 	}
; 710  : }
; 711  : 
; 712  : 
; 713  : 
; 714  : bool gfxu::getError()
; 715  : {
; 716  : 	int error = glGetError();

  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glGetError@0

; 717  : 	if(error != GL_NO_ERROR)

  00012	85 c0		 test	 eax, eax
  00014	74 0e		 je	 SHORT $LN1@bind

; 718  : 	{
; 719  : 		const GLubyte* errorString = gluErrorString(error);

  00016	50		 push	 eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__gluErrorString@4

; 467  : 	if(gfxu::getError()) GlobalThread::stop = true;

  0001d	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?stop@GlobalThread@@3_NA, 1 ; GlobalThread::stop
$LN1@bind:

; 468  : 	current = this;

  00024	89 35 00 00 00
	00		 mov	 DWORD PTR ?current@ShaderProgram@gfxu@@2PAV12@A, esi ; gfxu::ShaderProgram::current

; 472  : 
; 473  : ShaderProgram* ShaderProgram::current;
; 474  : 
; 475  : 
; 476  : 
; 477  : MatrixStack::MatrixStack()
; 478  : {
; 479  : 	clear();
; 480  : }
; 481  : 
; 482  : geom::Matrix MatrixStack::unstack()
; 483  : {
; 484  : 	std::stack<geom::Matrix> stack2 = stack;
; 485  : 	geom::Matrix mat = geom::Matrix::identity();
; 486  : 	while(!stack2.empty())
; 487  : 	{
; 488  : 		mat = stack2.top() * mat;
; 489  : 		stack2.pop();
; 490  : 	}
; 491  : 
; 492  : 	return mat;
; 493  : }
; 494  : 
; 495  : void MatrixStack::push(geom::Matrix mat)
; 496  : {
; 497  : 	stack.push(mat);
; 498  : 	topmost = topmost * mat;
; 499  : 	changed = true;
; 500  : }
; 501  : 
; 502  : void MatrixStack::mult(geom::Matrix mat)
; 503  : {
; 504  : 	stack.top() = stack.top() * mat;
; 505  : 	topmost = topmost * mat;
; 506  : 	changed = true;
; 507  : }
; 508  : 
; 509  : void MatrixStack::identity()
; 510  : {
; 511  : 	stack.top() = geom::Matrix::identity();
; 512  : 	topmost = unstack();
; 513  : 	changed = true;
; 514  : }
; 515  : 
; 516  : void MatrixStack::pop()
; 517  : {
; 518  : 	stack.pop();
; 519  : 	topmost = unstack();
; 520  : 	changed = true;
; 521  : }
; 522  : 
; 523  : void MatrixStack::clear()
; 524  : {
; 525  : 	while(!stack.empty())
; 526  : 	{
; 527  : 		stack.pop();
; 528  : 	}
; 529  : 	stack.push(geom::Matrix::identity());
; 530  : 	topmost = geom::Matrix::identity();
; 531  : 	changed = true;
; 532  : }
; 533  : 
; 534  : const geom::Matrix MatrixStack::getTopmost()
; 535  : {
; 536  : 	return topmost;
; 537  : }
; 538  : 
; 539  : 
; 540  : 
; 541  : void Uniforms::setColor(float r, float g, float b, float a)
; 542  : {
; 543  : 	color.set(geom::Vector(r, g, b, a));
; 544  : }
; 545  : 
; 546  : void Uniforms::setFogColor(float r, float g, float b, float a)
; 547  : {
; 548  : 	fogColor.set(geom::Vector(r, g, b, a));
; 549  : }
; 550  : 
; 551  : void Uniforms::uploadChanges()
; 552  : {
; 553  : 	if(forceUpload | (MMS.changed & (ShaderProgram::current->modelview >= 0)))
; 554  : 	{
; 555  : 		glUniformMatrix4fv(ShaderProgram::current->modelview, 1, false, MMS.getTopmost().data);
; 556  : 		MMS.changed = false;
; 557  : 	}
; 558  : 
; 559  : 	if(forceUpload | (PMS.changed & (ShaderProgram::current->projection >= 0)))
; 560  : 	{
; 561  : 		glUniformMatrix4fv(ShaderProgram::current->projection, 1, false, PMS.getTopmost().data);
; 562  : 		PMS.changed = false;
; 563  : 	}
; 564  : 
; 565  : 	if(forceUpload | (color.changed & (ShaderProgram::current->const_color >= 0)))
; 566  : 	{
; 567  : 		geom::Vector vec = color.get();
; 568  : 		glUniform4f(ShaderProgram::current->const_color, vec.x, vec.y, vec.z, vec.w);
; 569  : 	}
; 570  : 
; 571  : 	if(forceUpload | (camPos.changed & (ShaderProgram::current->cam_pos >= 0)))
; 572  : 	{
; 573  : 		geom::Vector vec = camPos.get();
; 574  : 		glUniform4f(ShaderProgram::current->cam_pos, vec.x, vec.y, vec.z, vec.w);
; 575  : 	}
; 576  : 
; 577  : 	if(forceUpload | (fogColor.changed & (ShaderProgram::current->fog_color >= 0)))
; 578  : 	{
; 579  : 		geom::Vector vec = fogColor.get();
; 580  : 		glUniform4f(ShaderProgram::current->fog_color, vec.x, vec.y, vec.z, vec.w);
; 581  : 	}
; 582  : 
; 583  : 	if(forceUpload | (fogDist.changed & (ShaderProgram::current->fog_dist >= 0)))
; 584  : 	{
; 585  : 		glUniform1f(ShaderProgram::current->fog_dist, fogDist.get());
; 586  : 	}
; 587  : }
; 588  : 
; 589  : void Uniforms::reset()
; 590  : {
; 591  : 	MMS.clear();
; 592  : 	PMS.clear();
; 593  : }
; 594  : 
; 595  : void Uniforms::setForceUpload()
; 596  : {
; 597  : 	MMS.changed = PMS.changed = true;

  0002a	c6 05 54 00 00
	00 01		 mov	 BYTE PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+84, 1
  00031	c6 05 54 00 00
	00 01		 mov	 BYTE PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+84, 1
  00038	5e		 pop	 esi

; 469  : 
; 470  : 	Uniforms::setForceUpload();
; 471  : }

  00039	c3		 ret	 0
?bind@ShaderProgram@gfxu@@QAEXXZ ENDP			; gfxu::ShaderProgram::bind
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??1Shader@gfxu@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Shader@gfxu@@QAE@XZ PROC				; gfxu::Shader::~Shader, COMDAT
; _this$ = ecx

; 327  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Shader@gfxu@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Shader@gfxu@@6B@
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 328  : 	if(compiled)

  00036	80 7e 20 00	 cmp	 BYTE PTR [esi+32], 0
  0003a	74 09		 je	 SHORT $LN1@Shader

; 329  : 	{
; 330  : 		glDeleteShader(object);

  0003c	ff 76 1c	 push	 DWORD PTR [esi+28]
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewDeleteShader
$LN1@Shader:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00045	83 7e 18 08	 cmp	 DWORD PTR [esi+24], 8
  00049	72 0b		 jb	 SHORT $LN27@Shader
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0004b	ff 76 04	 push	 DWORD PTR [esi+4]
  0004e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00053	83 c4 04	 add	 esp, 4
$LN27@Shader:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00056	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00058	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  0005f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00066	66 89 46 04	 mov	 WORD PTR [esi+4], ax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 332  : }

  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Shader@gfxu@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??1Shader@gfxu@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Shader@gfxu@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Shader@gfxu@@QAE@XZ ENDP				; gfxu::Shader::~Shader
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0Texture2D@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_magFilter$ = 8						; size = 4
_minFilter$ = 12					; size = 4
_wrap$ = 16						; size = 4
_mipmapped$ = 20					; size = 1
_fileName$ = 24						; size = 24
??0Texture2D@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z PROC ; gfxu::Texture2D::Texture2D, COMDAT
; _this$ = ecx

; 645  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Texture2D@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	8b 45 08	 mov	 eax, DWORD PTR _magFilter$[ebp]
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00030	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00033	8b 45 0c	 mov	 eax, DWORD PTR _minFilter$[ebp]
  00036	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00039	8b 45 10	 mov	 eax, DWORD PTR _wrap$[ebp]
  0003c	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0003f	8a 45 14	 mov	 al, BYTE PTR _mipmapped$[ebp]

; 646  : 	init(fileName);

  00042	83 ec 18	 sub	 esp, 24			; 00000018H
  00045	8b cc		 mov	 ecx, esp
  00047	88 46 10	 mov	 BYTE PTR [esi+16], al
  0004a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00050	c6 46 11 00	 mov	 BYTE PTR [esi+17], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00054	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 735  : 		assign(_Right, 0, npos);

  00056	6a ff		 push	 -1

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;
; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2260 : 			if (0 < _Newsize)
; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);
; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00058	c7 41 14 07 00
	00 00		 mov	 DWORD PTR [ecx+20], 7

; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  0005f	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 735  : 		assign(_Right, 0, npos);

  00066	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00067	66 89 01	 mov	 WORD PTR [ecx], ax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 735  : 		assign(_Right, 0, npos);

  0006a	8d 45 18	 lea	 eax, DWORD PTR _fileName$[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 646  : 	init(fileName);

  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; gfxu::Texture2D::init
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0007a	83 7d 2c 08	 cmp	 DWORD PTR _fileName$[ebp+20], 8
  0007e	72 0b		 jb	 SHORT $LN83@Texture2D
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00080	ff 75 18	 push	 DWORD PTR _fileName$[ebp]
  00083	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00088	83 c4 04	 add	 esp, 4
$LN83@Texture2D:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 647  : }

  0008b	8b c6		 mov	 eax, esi
  0008d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00090	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00097	59		 pop	 ecx
  00098	5e		 pop	 esi
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 28 00	 ret	 40			; 00000028H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Texture2D@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z$0:
  00000	8d 4d 18	 lea	 ecx, DWORD PTR _fileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??0Texture2D@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Texture2D@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Texture2D@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z ENDP ; gfxu::Texture2D::Texture2D
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??1Texture2D@gfxu@@QAE@XZ
_TEXT	SEGMENT
??1Texture2D@gfxu@@QAE@XZ PROC				; gfxu::Texture2D::~Texture2D, COMDAT
; _this$ = ecx

; 666  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 667  : 	if(data != nullptr)

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN2@Texture2D

; 668  : 	{
; 669  : 		delete[] data;

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00010	83 c4 04	 add	 esp, 4
$LN2@Texture2D:

; 670  : 	}
; 671  : 
; 672  : 	if(uploaded)

  00013	80 7e 11 00	 cmp	 BYTE PTR [esi+17], 0
  00017	74 09		 je	 SHORT $LN1@Texture2D

; 673  : 	{
; 674  : 		glDeleteTextures(1, &object);

  00019	56		 push	 esi
  0001a	6a 01		 push	 1
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glDeleteTextures@8
$LN1@Texture2D:
  00022	5e		 pop	 esi

; 675  : 	}
; 676  : }

  00023	c3		 ret	 0
??1Texture2D@gfxu@@QAE@XZ ENDP				; gfxu::Texture2D::~Texture2D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?bind@Texture2D@gfxu@@QAEXXZ
_TEXT	SEGMENT
?bind@Texture2D@gfxu@@QAEXXZ PROC			; gfxu::Texture2D::bind, COMDAT
; _this$dead$ = ecx

; 698  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ?testure@@3PAVTexture2D@gfxu@@A ; testure

; 699  : 	if(!uploaded)

  00009	80 78 11 00	 cmp	 BYTE PTR [eax+17], 0
  0000d	75 0b		 jne	 SHORT $LN3@bind

; 700  : 	{
; 701  : 		if(!upload())

  0000f	8b c8		 mov	 ecx, eax
  00011	e8 00 00 00 00	 call	 ?upload@Texture2D@gfxu@@QAE_NXZ ; gfxu::Texture2D::upload

; 709  : 	}
; 710  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
$LN3@bind:

; 702  : 		{
; 703  : 			return;
; 704  : 		}
; 705  : 	}
; 706  : 	else
; 707  : 	{
; 708  : 		glBindTexture(GL_TEXTURE_2D, object);

  0001a	ff 30		 push	 DWORD PTR [eax]
  0001c	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glBindTexture@8

; 709  : 	}
; 710  : }

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?bind@Texture2D@gfxu@@QAEXXZ ENDP			; gfxu::Texture2D::bind
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 558  : 		{	// assign _Count * _Ch to [_First, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 559  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  00003	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00007	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 _memset
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH

; 560  : 		}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 581  : 		{	// convert metacharacter to character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((_Elem)_Meta);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]

; 583  : 		}

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 587  : 		{	// convert character to metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 588  : 		return ((unsigned char)_Ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00006	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 589  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 593  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 594  : 		return (_Left == _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	8b 10		 mov	 edx, DWORD PTR [eax]
  0000b	33 c0		 xor	 eax, eax
  0000d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000f	0f 94 c0	 sete	 al

; 595  : 		}

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 600  : 		return (_Meta != eof() ? _Meta : !eof());

  00000	33 c0		 xor	 eax, eax

; 601  : 		}

  00002	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 605  : 		return (EOF);

  00000	83 c8 ff	 or	 eax, -1

; 606  : 		}

  00003	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$dead$ = ecx

; 40   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
__Lock$1 = 8						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 118  : 		{	// copy an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi

; 118  : 		{	// copy an iterator

  00007	8b f1		 mov	 esi, ecx
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0000f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	85 c0		 test	 eax, eax
  0001a	74 23		 je	 SHORT $LN20@Iterator_b

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  0001c	8b 00		 mov	 eax, DWORD PTR [eax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  0001e	85 c0		 test	 eax, eax
  00020	75 19		 jne	 SHORT $LN11@Iterator_b

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00022	6a 03		 push	 3
  00024	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00027	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  0002c	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  0002f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 119  : 		*this = _Right;
; 120  : 		}

  00034	8b c6		 mov	 eax, esi
  00036	5e		 pop	 esi
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
$LN11@Iterator_b:

; 151  : 		else
; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
  0003d	89 06		 mov	 DWORD PTR [esi], eax
$LN20@Iterator_b:

; 119  : 		*this = _Right;
; 120  : 		}

  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Lock$1 = 8						; size = 4
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 123  : 		{	// assign an iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi
  00007	8b 00		 mov	 eax, DWORD PTR [eax]
  00009	8b f1		 mov	 esi, ecx
  0000b	39 06		 cmp	 DWORD PTR [esi], eax
  0000d	74 27		 je	 SHORT $LN17@operator

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)

  0000f	85 c0		 test	 eax, eax
  00011	74 11		 je	 SHORT $LN2@operator

; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00013	8b 00		 mov	 eax, DWORD PTR [eax]

; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00015	85 c0		 test	 eax, eax
  00017	74 0b		 je	 SHORT $LN2@operator

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);
; 149  : 			_Orphan_me();
; 150  : 			}
; 151  : 		else
; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  00019	8b 00		 mov	 eax, DWORD PTR [eax]
  0001b	89 06		 mov	 DWORD PTR [esi], eax

; 133  : 		return (*this);

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi

; 134  : 		}

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN2@operator:

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);

  00024	6a 03		 push	 3
  00026	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00029	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 131  : 			_Orphan_me();
; 132  : 			}

  0002e	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00031	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN17@operator:

; 133  : 		return (*this);

  00036	8b c6		 mov	 eax, esi
  00038	5e		 pop	 esi

; 134  : 		}

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
$T1 = 8							; size = 4
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 173  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 524  : 			: this->_Bx._Buf);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00006	56		 push	 esi
  00007	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept

; 173  : 		{	// construct from message string

  0000b	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 524  : 			: this->_Bx._Buf);

  0000d	72 02		 jb	 SHORT $LN8@runtime_er
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN8@runtime_er:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept

; 173  : 		{	// construct from message string

  00011	89 45 08	 mov	 DWORD PTR $T1[ebp], eax
  00014	8d 45 08	 lea	 eax, DWORD PTR $T1[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0001d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 174  : 		}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@PBD@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 178  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 45 08	 lea	 eax, DWORD PTR __Message$[ebp]
  00007	50		 push	 eax
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 179  : 		}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@PBD@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN6@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
;	COMDAT ??0_Locinfo@std@@QAE@PBD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T3 = 8							; size = 4
__Pch$ = 8						; size = 4
??0_Locinfo@std@@QAE@PBD@Z PROC				; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 76   : 		{	// construct from NTBS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	6a 00		 push	 0
  0002d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3531 : 		{	// default construct

  00039	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00040	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
  00044	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0004b	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
  0004f	33 c0		 xor	 eax, eax
  00051	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00058	66 89 46 18	 mov	 WORD PTR [esi+24], ax
  0005c	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0005f	66 89 46 20	 mov	 WORD PTR [esi+32], ax
  00063	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00066	88 46 28	 mov	 BYTE PTR [esi+40], al
  00069	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0006c	88 46 30	 mov	 BYTE PTR [esi+48], al
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo

; 76   : 		{	// construct from NTBS

  0006f	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 77   : 		if (_Pch == 0)

  00073	8b 45 08	 mov	 eax, DWORD PTR __Pch$[ebp]
  00076	85 c0		 test	 eax, eax
  00078	75 28		 jne	 SHORT $LN1@Locinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept

; 178  : 		{	// construct from message string

  0007a	8d 45 08	 lea	 eax, DWORD PTR $T3[ebp]
  0007d	50		 push	 eax
  0007e	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo

; 78   : 			_THROW_NCEE(runtime_error, "bad locale name");

  00081	c7 45 08 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], OFFSET ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept

; 178  : 		{	// construct from message string

  00088	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo

; 78   : 			_THROW_NCEE(runtime_error, "bad locale name");

  0008d	68 00 00 00 00	 push	 OFFSET __TI2?AVruntime_error@std@@
  00092	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  00095	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept

; 178  : 		{	// construct from message string

  00096	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ??_7runtime_error@std@@6B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo

; 78   : 			_THROW_NCEE(runtime_error, "bad locale name");

  0009d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN28@Locinfo:
$LN1@Locinfo:

; 79   : 		_Locinfo_ctor(this, _Pch);

  000a2	50		 push	 eax
  000a3	56		 push	 esi
  000a4	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor
  000a9	83 c4 08	 add	 esp, 8

; 80   : 		}

  000ac	8b c6		 mov	 eax, esi
  000ae	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b8	59		 pop	 ecx
  000b9	5e		 pop	 esi
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 04 00	 ret	 4
$LN27@Locinfo:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 24	 add	 ecx, 36			; 00000024H
  0003a	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6:
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00045	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__ehhandler$??0_Locinfo@std@@QAE@PBD@Z:
  0004a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00051	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00054	33 c8		 xor	 ecx, eax
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
  00060	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@PBD@Z ENDP				; std::_Locinfo::_Locinfo
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 94   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 95   : 		_Locinfo_dtor(this);

  00003	56		 push	 esi
  00004	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3607 : 		if (_Myptr != 0)

  00009	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo

; 95   : 		_Locinfo_dtor(this);

  0000c	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3607 : 		if (_Myptr != 0)

  0000f	85 c0		 test	 eax, eax
  00011	74 09		 je	 SHORT $LN5@Locinfo

; 3608 : 
; 3609 :  #ifdef _DEBUG
; 3610 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3611 : 
; 3612 :  #else /* _DEBUG */
; 3613 : 			_CSTD free(_Myptr);

  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _free
  00019	83 c4 04	 add	 esp, 4
$LN5@Locinfo:

; 3614 :  #endif /* _DEBUG */
; 3615 : 
; 3616 : 		_Myptr = 0;

  0001c	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 3607 : 		if (_Myptr != 0)

  00023	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00026	85 c0		 test	 eax, eax
  00028	74 09		 je	 SHORT $LN10@Locinfo

; 3608 : 
; 3609 :  #ifdef _DEBUG
; 3610 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3611 : 
; 3612 :  #else /* _DEBUG */
; 3613 : 			_CSTD free(_Myptr);

  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _free
  00030	83 c4 04	 add	 esp, 4
$LN10@Locinfo:

; 3614 :  #endif /* _DEBUG */
; 3615 : 
; 3616 : 		_Myptr = 0;

  00033	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 3607 : 		if (_Myptr != 0)

  0003a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0003d	85 c0		 test	 eax, eax
  0003f	74 09		 je	 SHORT $LN15@Locinfo

; 3608 : 
; 3609 :  #ifdef _DEBUG
; 3610 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3611 : 
; 3612 :  #else /* _DEBUG */
; 3613 : 			_CSTD free(_Myptr);

  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _free
  00047	83 c4 04	 add	 esp, 4
$LN15@Locinfo:

; 3614 :  #endif /* _DEBUG */
; 3615 : 
; 3616 : 		_Myptr = 0;

  0004a	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 3607 : 		if (_Myptr != 0)

  00051	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00054	85 c0		 test	 eax, eax
  00056	74 09		 je	 SHORT $LN20@Locinfo

; 3608 : 
; 3609 :  #ifdef _DEBUG
; 3610 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3611 : 
; 3612 :  #else /* _DEBUG */
; 3613 : 			_CSTD free(_Myptr);

  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 _free
  0005e	83 c4 04	 add	 esp, 4
$LN20@Locinfo:

; 3614 :  #endif /* _DEBUG */
; 3615 : 
; 3616 : 		_Myptr = 0;

  00061	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3607 : 		if (_Myptr != 0)

  00068	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0006b	85 c0		 test	 eax, eax
  0006d	74 09		 je	 SHORT $LN25@Locinfo

; 3608 : 
; 3609 :  #ifdef _DEBUG
; 3610 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3611 : 
; 3612 :  #else /* _DEBUG */
; 3613 : 			_CSTD free(_Myptr);

  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _free
  00075	83 c4 04	 add	 esp, 4
$LN25@Locinfo:

; 3614 :  #endif /* _DEBUG */
; 3615 : 
; 3616 : 		_Myptr = 0;

  00078	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 3607 : 		if (_Myptr != 0)

  0007f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00082	85 c0		 test	 eax, eax
  00084	74 09		 je	 SHORT $LN30@Locinfo

; 3608 : 
; 3609 :  #ifdef _DEBUG
; 3610 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3611 : 
; 3612 :  #else /* _DEBUG */
; 3613 : 			_CSTD free(_Myptr);

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _free
  0008c	83 c4 04	 add	 esp, 4
$LN30@Locinfo:

; 3614 :  #endif /* _DEBUG */
; 3615 : 
; 3616 : 		_Myptr = 0;

  0008f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo

; 96   : 		}

  00096	8b ce		 mov	 ecx, esi
  00098	5e		 pop	 esi
  00099	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
;	COMDAT ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
_TEXT	SEGMENT
$T1 = -20						; size = 16
___$ReturnUdt$ = 8					; size = 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ PROC	; std::_Locinfo::_Getctype, COMDAT
; _this$ = ecx

; 116  : 		{	// return ctype stuff

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 117  : 		return (::_Getctype());

  00006	8d 45 ec	 lea	 eax, DWORD PTR $T1[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __Getctype
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00012	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00016	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0001a	f3 0f 7e 40 08	 movq	 xmm0, QWORD PTR [eax+8]
  0001f	83 c4 04	 add	 esp, 4
  00022	66 0f d6 41 08	 movq	 QWORD PTR [ecx+8], xmm0
  00027	8b c1		 mov	 eax, ecx

; 118  : 		}

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ENDP	; std::_Locinfo::_Getctype
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet
;	COMDAT ??1_Facet_base@std@@UAE@XZ
_TEXT	SEGMENT
??1_Facet_base@std@@UAE@XZ PROC				; std::_Facet_base::~_Facet_base, COMDAT
; _this$ = ecx

; 24   : 		{	// ensure that derived classes can be destroyed properly

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@

; 25   : 		}

  00006	c3		 ret	 0
??1_Facet_base@std@@UAE@XZ ENDP				; std::_Facet_base::~_Facet_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet
;	COMDAT ??_G_Facet_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Facet_base@std@@UAEPAXI@Z PROC			; std::_Facet_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 24   : 		{	// ensure that derived classes can be destroyed properly

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 09		 je	 SHORT $LN6@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN6@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_G_Facet_base@std@@UAEPAXI@Z ENDP			; std::_Facet_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$1 = -4						; size = 4
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = ecx

; 78   : 			{	// get stamp, with lazy allocation

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 79   : 			if (_Id == 0)

  00007	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0000a	75 24		 jne	 SHORT $LN6@operator

; 80   : 				{	// still zero, allocate stamp
; 81   : 				_BEGIN_LOCK(_LOCK_LOCALE)

  0000c	6a 00		 push	 0
  0000e	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 82   : 					if (_Id == 0)

  00016	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00019	75 0d		 jne	 SHORT $LN1@operator

; 83   : 						_Id = ++_Id_cnt;

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00020	40		 inc	 eax
  00021	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00026	89 06		 mov	 DWORD PTR [esi], eax
$LN1@operator:

; 84   : 				_END_LOCK()

  00028	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  0002b	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN6@operator:

; 85   : 				}
; 86   : 			return (_Id);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	5e		 pop	 esi

; 87   : 			}

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?_Incref@facet@locale@std@@UAEXXZ
_TEXT	SEGMENT
?_Incref@facet@locale@std@@UAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 144  : 			_MT_INCR(_Mtx, _Refs);

  00000	83 c1 04	 add	 ecx, 4
  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 145  : 			}

  0000c	c3		 ret	 0
?_Incref@facet@locale@std@@UAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
_TEXT	SEGMENT
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ PROC	; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 149  : 			if (_MT_DECR(_Mtx, _Refs) == 0)

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	83 ca ff	 or	 edx, -1
  00006	f0 0f c1 10	 lock	  xadd	 DWORD PTR [eax], edx
  0000a	b8 00 00 00 00	 mov	 eax, 0
  0000f	0f 44 c1	 cmove	 eax, ecx

; 150  : 				return (this);
; 151  : 			else
; 152  : 				return (0);
; 153  : 			}

  00012	c3		 ret	 0
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ENDP	; std::locale::facet::_Decref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic0.h
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 159  : 		explicit __CLR_OR_THIS_CALL facet(size_t _Initrefs = 0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic0.h

; 219  : 	_Counter = _Value;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Initrefs$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 159  : 		explicit __CLR_OR_THIS_CALL facet(size_t _Initrefs = 0)

  00009	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@

; 160  : 			{	// construct with initial reference count
; 161  : 			_Init_atomic_counter(_Refs, (_Atomic_integral_t)_Initrefs);
; 162  : 			}

  0000f	8b c1		 mov	 eax, ecx
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??1facet@locale@std@@MAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@MAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet

; 24   : 		{	// ensure that derived classes can be destroyed properly

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 166  : 			}

  00006	c3		 ret	 0
??1facet@locale@std@@MAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	89 0e		 mov	 DWORD PTR [esi], ecx

; 324  : 		_Ptr->_Incref();

  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	ff 50 04	 call	 DWORD PTR [eax+4]

; 325  : 		}

  00012	8b c6		 mov	 eax, esi
  00014	5e		 pop	 esi
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0locale@std@@QAE@XZ
_TEXT	SEGMENT
??0locale@std@@QAE@XZ PROC				; std::locale::locale, COMDAT
; _this$ = ecx

; 329  : 		{	// construct from current locale

  00000	56		 push	 esi
  00001	6a 01		 push	 1
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  0000a	83 c4 04	 add	 esp, 4
  0000d	89 06		 mov	 DWORD PTR [esi], eax

; 330  : 		}

  0000f	8b c6		 mov	 eax, esi
  00011	5e		 pop	 esi
  00012	c3		 ret	 0
??0locale@std@@QAE@XZ ENDP				; std::locale::locale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 422  : 		if (_Ptr != 0)

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 11		 je	 SHORT $LN4@locale

; 423  : 			_DELETE_CRT(_Ptr->_Decref());

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	ff 50 08	 call	 DWORD PTR [eax+8]
  0000b	85 c0		 test	 eax, eax
  0000d	74 08		 je	 SHORT $LN4@locale
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	6a 01		 push	 1
  00013	8b c8		 mov	 ecx, eax
  00015	ff 12		 call	 DWORD PTR [edx]
$LN4@locale:

; 424  : 		}

  00017	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?c_str@locale@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@locale@std@@QBEPBDXZ PROC			; std::locale::c_str, COMDAT
; _this$ = ecx

; 445  : 		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	75 06		 jne	 SHORT $LN3@c_str
  00006	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@

; 446  : 		}

  0000b	c3		 ret	 0
$LN3@c_str:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3591 : 		return (_Myptr != 0 ? _Myptr : &_Nul);

  0000c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0000f	85 c9		 test	 ecx, ecx
  00011	74 03		 je	 SHORT $LN7@c_str
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 445  : 		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());

  00013	8b c1		 mov	 eax, ecx

; 446  : 		}

  00015	c3		 ret	 0
$LN7@c_str:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3591 : 		return (_Myptr != 0 ? _Myptr : &_Nul);

  00016	83 c0 1c	 add	 eax, 28			; 0000001cH
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 446  : 		}

  00019	c3		 ret	 0
?c_str@locale@std@@QBEPBDXZ ENDP			; std::locale::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 449  : 		{	// look up a facet in locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 450  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 451  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR __Id$[ebp]
  00009	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  0000c	73 0c		 jae	 SHORT $LN6@Getfacet
  0000e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00011	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 452  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00014	85 c0		 test	 eax, eax
  00016	75 21		 jne	 SHORT $LN1@Getfacet
  00018	eb 02		 jmp	 SHORT $LN10@Getfacet
$LN6@Getfacet:

; 450  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 451  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  0001a	33 c0		 xor	 eax, eax
$LN10@Getfacet:

; 452  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  0001c	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  00020	74 17		 je	 SHORT $LN1@Getfacet

; 453  : 			return (_Facptr);	// found facet or not transparent
; 454  : 		else
; 455  : 			{	// look in current locale
; 456  : 			locale::_Locimp *_Ptr = _Getgloballocale();

  00022	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 457  : 			return (_Id < _Ptr->_Facetcount
; 458  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 459  : 				: 0);	// no entry in current locale

  00027	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  0002a	73 0b		 jae	 SHORT $LN8@Getfacet
  0002c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002f	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00032	5e		 pop	 esi

; 460  : 			}
; 461  : 		}

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN8@Getfacet:

; 457  : 			return (_Id < _Ptr->_Facetcount
; 458  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 459  : 				: 0);	// no entry in current locale

  00037	33 c0		 xor	 eax, eax
$LN1@Getfacet:
  00039	5e		 pop	 esi

; 460  : 			}
; 461  : 		}

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet
;	COMDAT ??_Gfacet@locale@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@MAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 24   : 		{	// ensure that derived classes can be destroyed properly

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 09		 je	 SHORT $LN8@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN8@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_Gfacet@locale@std@@MAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0_Facet_base@std@@QAE@XZ
_TEXT	SEGMENT
??0_Facet_base@std@@QAE@XZ PROC				; std::_Facet_base::_Facet_base, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0_Facet_base@std@@QAE@XZ ENDP				; std::_Facet_base::_Facet_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic0.h
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0codecvt_base@std@@QAE@I@Z
_TEXT	SEGMENT
__Refs$ = 8						; size = 4
??0codecvt_base@std@@QAE@I@Z PROC			; std::codecvt_base::codecvt_base, COMDAT
; _this$ = ecx

; 803  : 		{	// default constructor

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic0.h

; 219  : 	_Counter = _Value;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Refs$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 803  : 		{	// default constructor

  00009	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7codecvt_base@std@@6B@

; 804  : 		}

  0000f	8b c1		 mov	 eax, ecx
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0codecvt_base@std@@QAE@I@Z ENDP			; std::codecvt_base::codecvt_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?always_noconv@codecvt_base@std@@QBE_NXZ
_TEXT	SEGMENT
?always_noconv@codecvt_base@std@@QBE_NXZ PROC		; std::codecvt_base::always_noconv, COMDAT
; _this$ = ecx

; 808  : 		return (do_always_noconv());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00005	ff e0		 jmp	 eax
?always_noconv@codecvt_base@std@@QBE_NXZ ENDP		; std::codecvt_base::always_noconv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??1codecvt_base@std@@UAE@XZ
_TEXT	SEGMENT
??1codecvt_base@std@@UAE@XZ PROC			; std::codecvt_base::~codecvt_base, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet

; 24   : 		{	// ensure that derived classes can be destroyed properly

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 823  : 		}

  00006	c3		 ret	 0
??1codecvt_base@std@@UAE@XZ ENDP			; std::codecvt_base::~codecvt_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_always_noconv@codecvt_base@std@@MBE_NXZ
_TEXT	SEGMENT
?do_always_noconv@codecvt_base@std@@MBE_NXZ PROC	; std::codecvt_base::do_always_noconv, COMDAT
; _this$ = ecx

; 828  : 		return (false);

  00000	32 c0		 xor	 al, al

; 829  : 		}

  00002	c3		 ret	 0
?do_always_noconv@codecvt_base@std@@MBE_NXZ ENDP	; std::codecvt_base::do_always_noconv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_max_length@codecvt_base@std@@MBEHXZ
_TEXT	SEGMENT
?do_max_length@codecvt_base@std@@MBEHXZ PROC		; std::codecvt_base::do_max_length, COMDAT
; _this$ = ecx

; 833  : 		return (1);

  00000	b8 01 00 00 00	 mov	 eax, 1

; 834  : 		}

  00005	c3		 ret	 0
?do_max_length@codecvt_base@std@@MBEHXZ ENDP		; std::codecvt_base::do_max_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_encoding@codecvt_base@std@@MBEHXZ
_TEXT	SEGMENT
?do_encoding@codecvt_base@std@@MBEHXZ PROC		; std::codecvt_base::do_encoding, COMDAT
; _this$ = ecx

; 838  : 		return (1);	// -1 ==> state dependent, 0 ==> varying length

  00000	b8 01 00 00 00	 mov	 eax, 1

; 839  : 		}

  00005	c3		 ret	 0
?do_encoding@codecvt_base@std@@MBEHXZ ENDP		; std::codecvt_base::do_encoding
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet
;	COMDAT ??_Gcodecvt_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gcodecvt_base@std@@UAEPAXI@Z PROC			; std::codecvt_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 24   : 		{	// ensure that derived classes can be destroyed properly

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 09		 je	 SHORT $LN10@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN10@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_Gcodecvt_base@std@@UAEPAXI@Z ENDP			; std::codecvt_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic0.h
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0ctype_base@std@@QAE@I@Z
_TEXT	SEGMENT
__Refs$ = 8						; size = 4
??0ctype_base@std@@QAE@I@Z PROC				; std::ctype_base::ctype_base, COMDAT
; _this$ = ecx

; 2085 : 		{	// default constructor

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic0.h

; 219  : 	_Counter = _Value;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Refs$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 2085 : 		{	// default constructor

  00009	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ctype_base@std@@6B@

; 2086 : 		}

  0000f	8b c1		 mov	 eax, ecx
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0ctype_base@std@@QAE@I@Z ENDP				; std::ctype_base::ctype_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet

; 24   : 		{	// ensure that derived classes can be destroyed properly

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 2090 : 		}

  00006	c3		 ret	 0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 24   : 		{	// ensure that derived classes can be destroyed properly

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 09		 je	 SHORT $LN10@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN10@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?widen@?$ctype@D@std@@QBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?widen@?$ctype@D@std@@QBEDD@Z PROC			; std::ctype<char>::widen, COMDAT
; _this$ = ecx

; 2401 : 		{	// widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2402 : 		return (do_widen(_Byte));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 40 20	 mov	 eax, DWORD PTR [eax+32]

; 2403 : 		}

  00008	5d		 pop	 ebp

; 2402 : 		return (do_widen(_Byte));

  00009	ff e0		 jmp	 eax
?widen@?$ctype@D@std@@QBEDD@Z ENDP			; std::ctype<char>::widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic0.h
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic0.h
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<char>::ctype<char>, COMDAT
; _this$ = ecx

; 2448 : 		{	// construct from current locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic0.h

; 219  : 	_Counter = _Value;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 2448 : 		{	// construct from current locale

  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic0.h

; 219  : 	_Counter = _Value;

  0000c	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo

; 117  : 		return (::_Getctype());

  0000f	8d 45 f0	 lea	 eax, DWORD PTR $T1[ebp]
  00012	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 2448 : 		{	// construct from current locale

  00013	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo

; 117  : 		return (::_Getctype());

  00019	e8 00 00 00 00	 call	 __Getctype
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 2483 : 		_Ctype = _Lobj._Getctype();

  0001e	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00022	66 0f d6 46 08	 movq	 QWORD PTR [esi+8], xmm0
  00027	f3 0f 7e 40 08	 movq	 xmm0, QWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo

; 117  : 		return (::_Getctype());

  0002c	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 2483 : 		_Ctype = _Lobj._Getctype();

  0002f	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 2449 : 		_Init(_Lobj);
; 2450 : 		}

  00034	8b c6		 mov	 eax, esi
  00036	5e		 pop	 esi
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<char>::ctype<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic0.h
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -84						; size = 52
$T3 = -32						; size = 16
$T4 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T5 = 8							; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<char>::_Getcat, COMDAT

; 2454 : 		{	// return locale category mask and construct standard facet

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2455 : 		if (_Ppf != 0 && *_Ppf == 0)

  00028	8b 7d 08	 mov	 edi, DWORD PTR __Ppf$[ebp]
  0002b	33 db		 xor	 ebx, ebx
  0002d	89 5d f0	 mov	 DWORD PTR $T4[ebp], ebx
  00030	85 ff		 test	 edi, edi
  00032	0f 84 81 00 00
	00		 je	 $LN33@Getcat
  00038	39 1f		 cmp	 DWORD PTR [edi], ebx
  0003a	75 7d		 jne	 SHORT $LN33@Getcat

; 2457 : 				_Locinfo(_Ploc->c_str()));

  0003c	6a 18		 push	 24			; 00000018H
  0003e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00043	8b f0		 mov	 esi, eax
  00045	83 c4 04	 add	 esp, 4
  00048	89 75 08	 mov	 DWORD PTR $T5[ebp], esi
  0004b	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0004e	85 f6		 test	 esi, esi
  00050	74 56		 je	 SHORT $LN4@Getcat

; 445  : 		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());

  00052	8b 45 0c	 mov	 eax, DWORD PTR __Ploc$[ebp]
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	85 c9		 test	 ecx, ecx
  00059	75 07		 jne	 SHORT $LN12@Getcat
  0005b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00060	eb 0a		 jmp	 SHORT $LN17@Getcat
$LN12@Getcat:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3591 : 		return (_Myptr != 0 ? _Myptr : &_Nul);

  00062	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00065	85 c0		 test	 eax, eax
  00067	75 03		 jne	 SHORT $LN17@Getcat
  00069	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
$LN17@Getcat:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 2457 : 				_Locinfo(_Ploc->c_str()));

  0006c	50		 push	 eax
  0006d	8d 4d ac	 lea	 ecx, DWORD PTR $T2[ebp]
  00070	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo

; 117  : 		return (::_Getctype());

  00075	8d 45 e0	 lea	 eax, DWORD PTR $T3[ebp]
  00078	50		 push	 eax
  00079	bb 01 00 00 00	 mov	 ebx, 1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic0.h

; 219  : 	_Counter = _Value;

  0007e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 2448 : 		{	// construct from current locale

  00085	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo

; 117  : 		return (::_Getctype());

  0008b	e8 00 00 00 00	 call	 __Getctype
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 2483 : 		_Ctype = _Lobj._Getctype();

  00090	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00094	66 0f d6 46 08	 movq	 QWORD PTR [esi+8], xmm0
  00099	f3 0f 7e 40 08	 movq	 xmm0, QWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo

; 117  : 		return (::_Getctype());

  0009e	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 2483 : 		_Ctype = _Lobj._Getctype();

  000a1	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 2457 : 				_Locinfo(_Ploc->c_str()));

  000a6	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  000a8	33 f6		 xor	 esi, esi
$LN5@Getcat:
  000aa	89 37		 mov	 DWORD PTR [edi], esi
  000ac	f6 c3 01	 test	 bl, 1
  000af	74 08		 je	 SHORT $LN33@Getcat
  000b1	8d 4d ac	 lea	 ecx, DWORD PTR $T2[ebp]
  000b4	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN33@Getcat:

; 2458 : 		return (_X_CTYPE);

  000b9	b8 02 00 00 00	 mov	 eax, 2

; 2459 : 		}

  000be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c8	59		 pop	 ecx
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR $T5[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<char>::_Getcat
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 2477 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2480 : 
; 2481 : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo& _Lobj)
; 2482 : 		{	// initialize from _Lobj
; 2483 : 		_Ctype = _Lobj._Getctype();
; 2484 : 		}
; 2485 : 
; 2486 : 	void __CLR_OR_THIS_CALL _Tidy()
; 2487 : 		{	// free any allocated storage
; 2488 : 		if (0 < _Ctype._Delfl)

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2477 : 		{	// destroy the object

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@

; 2480 : 
; 2481 : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo& _Lobj)
; 2482 : 		{	// initialize from _Lobj
; 2483 : 		_Ctype = _Lobj._Getctype();
; 2484 : 		}
; 2485 : 
; 2486 : 	void __CLR_OR_THIS_CALL _Tidy()
; 2487 : 		{	// free any allocated storage
; 2488 : 		if (0 < _Ctype._Delfl)

  0000c	85 c0		 test	 eax, eax
  0000e	7e 0a		 jle	 SHORT $LN14@ctype

; 2489 : 			free((void *)_Ctype._Table);

  00010	ff 76 0c	 push	 DWORD PTR [esi+12]
  00013	e8 00 00 00 00	 call	 _free
  00018	eb 0a		 jmp	 SHORT $LN15@ctype
$LN14@ctype:

; 2490 : 		else if (_Ctype._Delfl < 0)

  0001a	79 0b		 jns	 SHORT $LN3@ctype

; 2491 : 			delete[] (void *)_Ctype._Table;

  0001c	ff 76 0c	 push	 DWORD PTR [esi+12]
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN15@ctype:
  00024	83 c4 04	 add	 esp, 4
$LN3@ctype:

; 2492 : 
; 2493 : 		free((void *)_Ctype._LocaleName);

  00027	ff 76 14	 push	 DWORD PTR [esi+20]
  0002a	e8 00 00 00 00	 call	 _free
  0002f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet

; 24   : 		{	// ensure that derived classes can be destroyed properly

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00038	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 2479 : 		}

  00039	c3		 ret	 0
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T1 = -20						; size = 16
__Lobj$ = 8						; size = 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z PROC		; std::ctype<char>::_Init, COMDAT
; _this$ = ecx

; 2482 : 		{	// initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo

; 117  : 		return (::_Getctype());

  00006	8d 45 ec	 lea	 eax, DWORD PTR $T1[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 2482 : 		{	// initialize from _Lobj

  00009	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo

; 117  : 		return (::_Getctype());

  0000a	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 2482 : 		{	// initialize from _Lobj

  0000b	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo

; 117  : 		return (::_Getctype());

  0000d	e8 00 00 00 00	 call	 __Getctype
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 2483 : 		_Ctype = _Lobj._Getctype();

  00012	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00016	66 0f d6 46 08	 movq	 QWORD PTR [esi+8], xmm0
  0001b	f3 0f 7e 40 08	 movq	 xmm0, QWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo

; 117  : 		return (::_Getctype());

  00020	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 2483 : 		_Ctype = _Lobj._Getctype();

  00023	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 2484 : 		}

  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ENDP		; std::ctype<char>::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?_Tidy@?$ctype@D@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$ctype@D@std@@IAEXXZ PROC			; std::ctype<char>::_Tidy, COMDAT
; _this$ = ecx

; 2487 : 		{	// free any allocated storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2488 : 		if (0 < _Ctype._Delfl)

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00006	85 c0		 test	 eax, eax
  00008	7e 18		 jle	 SHORT $LN6@Tidy

; 2489 : 			free((void *)_Ctype._Table);

  0000a	ff 76 0c	 push	 DWORD PTR [esi+12]
  0000d	e8 00 00 00 00	 call	 _free

; 2491 : 			delete[] (void *)_Ctype._Table;

  00012	83 c4 04	 add	 esp, 4

; 2492 : 
; 2493 : 		free((void *)_Ctype._LocaleName);

  00015	ff 76 14	 push	 DWORD PTR [esi+20]
  00018	e8 00 00 00 00	 call	 _free
  0001d	83 c4 04	 add	 esp, 4
  00020	5e		 pop	 esi

; 2494 : 		}

  00021	c3		 ret	 0
$LN6@Tidy:

; 2490 : 		else if (_Ctype._Delfl < 0)

  00022	79 0b		 jns	 SHORT $LN1@Tidy

; 2491 : 			delete[] (void *)_Ctype._Table;

  00024	ff 76 0c	 push	 DWORD PTR [esi+12]
  00027	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002c	83 c4 04	 add	 esp, 4
$LN1@Tidy:

; 2492 : 
; 2493 : 		free((void *)_Ctype._LocaleName);

  0002f	ff 76 14	 push	 DWORD PTR [esi+20]
  00032	e8 00 00 00 00	 call	 _free
  00037	83 c4 04	 add	 esp, 4
  0003a	5e		 pop	 esi

; 2494 : 		}

  0003b	c3		 ret	 0
?_Tidy@?$ctype@D@std@@IAEXXZ ENDP			; std::ctype<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2497 : 		{	// convert element to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2498 : 		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Tolower
  00011	83 c4 08	 add	 esp, 8

; 2499 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2503 : 		{	// convert [_First, _Last) in place to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2504 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2505 : 		for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 19		 je	 SHORT $LN9@do_tolower
  0000f	53		 push	 ebx
  00010	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
$LL3@do_tolower:

; 2506 : 			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);

  00013	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 __Tolower
  0001d	88 06		 mov	 BYTE PTR [esi], al
  0001f	46		 inc	 esi
  00020	83 c4 08	 add	 esp, 8
  00023	3b f7		 cmp	 esi, edi
  00025	75 ec		 jne	 SHORT $LL3@do_tolower
  00027	5b		 pop	 ebx
$LN9@do_tolower:
  00028	5f		 pop	 edi

; 2507 : 		return ((const _Elem *)_First);

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi

; 2508 : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2511 : 		{	// convert element to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2512 : 		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Toupper
  00011	83 c4 08	 add	 esp, 8

; 2513 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2517 : 		{	// convert [_First, _Last) in place to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2518 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2519 : 		for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 19		 je	 SHORT $LN9@do_toupper
  0000f	53		 push	 ebx
  00010	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
$LL3@do_toupper:

; 2520 : 			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);

  00013	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 __Toupper
  0001d	88 06		 mov	 BYTE PTR [esi], al
  0001f	46		 inc	 esi
  00020	83 c4 08	 add	 esp, 8
  00023	3b f7		 cmp	 esi, edi
  00025	75 ec		 jne	 SHORT $LL3@do_toupper
  00027	5b		 pop	 ebx
$LN9@do_toupper:
  00028	5f		 pop	 edi

; 2521 : 		return ((const _Elem *)_First);

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi

; 2522 : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2525 : 		{	// widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2526 : 		return (_Byte);

  00003	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]

; 2527 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2531 : 		{	// widen chars in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2532 : 		_DEBUG_RANGE(_First, _Last);
; 2533 : 		_DEBUG_POINTER(_Dest);
; 2534 : 		_CSTD memcpy(_Dest, _First, _Last - _First);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	52		 push	 edx
  0000d	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2535 : 		return (_Last);

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2536 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2539 : 		{	// narrow char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2540 : 		return (_Ch);

  00003	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]

; 2541 : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2545 : 		{	// narrow elements in [_First, _Last) to chars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2546 : 		_DEBUG_RANGE(_First, _Last);
; 2547 : 		_DEBUG_POINTER(_Dest);
; 2548 : 		_CSTD memcpy(_Dest, _First, _Last - _First);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	52		 push	 edx
  0000d	ff 75 14	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2549 : 		return (_Last);

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2550 : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 2488 : 		if (0 < _Ctype._Delfl)

  00006	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2477 : 		{	// destroy the object

  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@

; 2488 : 		if (0 < _Ctype._Delfl)

  0000f	85 c0		 test	 eax, eax
  00011	7e 0a		 jle	 SHORT $LN18@scalar

; 2489 : 			free((void *)_Ctype._Table);

  00013	ff 76 0c	 push	 DWORD PTR [esi+12]
  00016	e8 00 00 00 00	 call	 _free
  0001b	eb 0a		 jmp	 SHORT $LN19@scalar
$LN18@scalar:

; 2490 : 		else if (_Ctype._Delfl < 0)

  0001d	79 0b		 jns	 SHORT $LN6@scalar

; 2491 : 			delete[] (void *)_Ctype._Table;

  0001f	ff 76 0c	 push	 DWORD PTR [esi+12]
  00022	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN19@scalar:
  00027	83 c4 04	 add	 esp, 4
$LN6@scalar:

; 2492 : 
; 2493 : 		free((void *)_Ctype._LocaleName);

  0002a	ff 76 14	 push	 DWORD PTR [esi+20]
  0002d	e8 00 00 00 00	 call	 _free
  00032	83 c4 04	 add	 esp, 4
  00035	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet

; 24   : 		{	// ensure that derived classes can be destroyed properly

  00039	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0003f	74 09		 je	 SHORT $LN17@scalar
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00047	83 c4 04	 add	 esp, 4
$LN17@scalar:
  0004a	8b c6		 mov	 eax, esi
  0004c	5e		 pop	 esi
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_code@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_code@std@@QAE@HABVerror_category@1@@Z PROC	; std::error_code::error_code, COMDAT
; _this$ = ecx

; 218  : 		{	// construct from error code and category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Cat$[ebp]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 219  : 		}

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0error_code@std@@QAE@HABVerror_category@1@@Z ENDP	; std::error_code::error_code
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z
_TEXT	SEGMENT
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z PROC ; std::make_error_code, COMDAT
; ___$ReturnUdt$ = ecx
; __Errno$dead$ = edx

; 218  : 		{	// construct from error code and category

  00000	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object

; 465  : 	return (error_code((int)_Errno, iostream_category()));

  0000d	8b c1		 mov	 eax, ecx

; 466  : 	}

  0000f	c3		 ret	 0
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z ENDP ; std::make_error_code
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0system_error@std@@QAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Errcode$ = 8						; size = 8
$T1 = 16						; size = 4
__Message$ = 16						; size = 4
??0system_error@std@@QAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::system_error::system_error, COMDAT
; _this$ = ecx

; 507  : 		{	// construct from error code and message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 524  : 			: this->_Bx._Buf);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Message$[ebp]
  00006	56		 push	 esi
  00007	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error

; 507  : 		{	// construct from error code and message string

  0000b	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 524  : 			: this->_Bx._Buf);

  0000d	72 02		 jb	 SHORT $LN11@system_err
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN11@system_err:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept

; 173  : 		{	// construct from message string

  00011	89 45 10	 mov	 DWORD PTR $T1[ebp], eax
  00014	8d 45 10	 lea	 eax, DWORD PTR $T1[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error

; 507  : 		{	// construct from error code and message string

  0001d	8b 45 08	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00020	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp+4]
  00026	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7system_error@std@@6B@

; 508  : 		_Makestr();
; 509  : 		}

  0002f	8b c6		 mov	 eax, esi
  00031	5e		 pop	 esi
  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
??0system_error@std@@QAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::system_error::system_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?_Makestr@system_error@std@@AAEXXZ
_TEXT	SEGMENT
?_Makestr@system_error@std@@AAEXXZ PROC			; std::system_error::_Makestr, COMDAT
; _this$ = ecx

; 562  : //		_Mymes = this->runtime_error::what();
; 563  : //		if (!_Mymes.empty())
; 564  : //			_Mymes.append(": ");
; 565  : //		_Mymes.append(_Mycode.message());
; 566  : 		}

  00000	c3		 ret	 0
?_Makestr@system_error@std@@AAEXXZ ENDP			; std::system_error::_Makestr
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gsystem_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gsystem_error@std@@UAEPAXI@Z PROC			; std::system_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN8@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN8@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_Gsystem_error@std@@UAEPAXI@Z ENDP			; std::system_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1system_error@std@@UAE@XZ
_TEXT	SEGMENT
??1system_error@std@@UAE@XZ PROC			; std::system_error::~system_error, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1system_error@std@@UAE@XZ ENDP			; std::system_error::~system_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?iostream_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?iostream_category@std@@YAABVerror_category@1@XZ PROC	; std::iostream_category, COMDAT

; 675  : 	return (_Error_objects<int>::_Iostream_object);

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object

; 676  : 	}

  00005	c3		 ret	 0
?iostream_category@std@@YAABVerror_category@1@XZ ENDP	; std::iostream_category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
__Errcode$ = 12						; size = 4
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z PROC	; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 238  : 			{	// construct with message

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 55 08	 mov	 edx, DWORD PTR __Message$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00030	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 523  : 			: _CSTD strlen(_First));

  00037	80 3a 00	 cmp	 BYTE PTR [edx], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  0003a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00041	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 523  : 			: _CSTD strlen(_First));

  00045	75 04		 jne	 SHORT $LN47@failure
  00047	33 c0		 xor	 eax, eax
  00049	eb 0e		 jmp	 SHORT $LN48@failure
$LN47@failure:
  0004b	8b c2		 mov	 eax, edx
  0004d	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL97@failure:
  00050	8a 08		 mov	 cl, BYTE PTR [eax]
  00052	40		 inc	 eax
  00053	84 c9		 test	 cl, cl
  00055	75 f9		 jne	 SHORT $LL97@failure
  00057	2b c6		 sub	 eax, esi
$LN48@failure:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00059	50		 push	 eax
  0005a	52		 push	 edx
  0005b	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0005e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 238  : 			{	// construct with message

  00063	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006d	8b 30		 mov	 esi, DWORD PTR [eax]
  0006f	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 524  : 			: this->_Bx._Buf);

  00072	83 7d ec 10	 cmp	 DWORD PTR $T3[ebp+20], 16 ; 00000010H
  00076	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00079	0f 43 45 d8	 cmovae	 eax, DWORD PTR $T3[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept

; 173  : 		{	// construct from message string

  0007d	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00080	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
  00083	50		 push	 eax
  00084	8b cb		 mov	 ecx, ebx
  00086	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0008b	83 7d ec 10	 cmp	 DWORD PTR $T3[ebp+20], 16 ; 00000010H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error

; 507  : 		{	// construct from error code and message string

  0008f	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7system_error@std@@6B@
  00095	89 73 0c	 mov	 DWORD PTR [ebx+12], esi
  00098	89 7b 10	 mov	 DWORD PTR [ebx+16], edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0009b	72 0b		 jb	 SHORT $LN98@failure
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0009d	ff 75 d8	 push	 DWORD PTR $T3[ebp]
  000a0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a5	83 c4 04	 add	 esp, 4
$LN98@failure:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 239  : 			}

  000a8	8b c3		 mov	 eax, ebx

; 238  : 			{	// construct with message

  000aa	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7failure@ios_base@std@@6B@

; 239  : 			}

  000b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c1	33 cd		 xor	 ecx, ebp
  000c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ENDP	; std::ios_base::failure::failure
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T1 = -32						; size = 20
$T2 = -32						; size = 20
$T3 = -32						; size = 20
$T4 = -12						; size = 8
$T5 = -12						; size = 8
__Reraise$ = 8						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 301  : 		{	// set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 302  : 		_Mystate = (iostate)(_State & _Statmask);
; 303  : 		if ((_Mystate & _Except) == 0)
; 304  : 			;
; 305  : 		else if (_Reraise)

  00006	80 7d 08 00	 cmp	 BYTE PTR __Reraise$[ebp], 0
  0000a	75 25		 jne	 SHORT $LN33@clear

; 307  : 		else if (_Mystate & _Except & badbit)

  0000c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000f	23 41 0c	 and	 eax, DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error

; 218  : 		{	// construct from error code and category

  00012	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR $T5[ebp], 1
  00019	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 308  : 			_THROW_NCEE(failure, "ios_base::badbit set");

  00020	8d 4d e0	 lea	 ecx, DWORD PTR $T3[ebp]
  00023	a8 04		 test	 al, 4
  00025	75 13		 jne	 SHORT $LN35@clear

; 309  : 		else if (_Mystate & _Except & failbit)

  00027	a8 02		 test	 al, 2

; 310  : 			_THROW_NCEE(failure, "ios_base::failbit set");

  00029	8d 45 f4	 lea	 eax, DWORD PTR $T4[ebp]
  0002c	50		 push	 eax
  0002d	75 27		 jne	 SHORT $LN36@clear
  0002f	eb 3d		 jmp	 SHORT $LN37@clear
$LN33@clear:

; 306  : 			_RERAISE;

  00031	6a 00		 push	 0
  00033	6a 00		 push	 0
  00035	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN38@clear:
$LN35@clear:

; 308  : 			_THROW_NCEE(failure, "ios_base::badbit set");

  0003a	8d 45 f4	 lea	 eax, DWORD PTR $T5[ebp]
  0003d	50		 push	 eax
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
  00043	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00048	68 00 00 00 00	 push	 OFFSET __TI4?AVfailure@ios_base@std@@
  0004d	8d 45 e0	 lea	 eax, DWORD PTR $T3[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN39@clear:
$LN36@clear:

; 310  : 			_THROW_NCEE(failure, "ios_base::failbit set");

  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  0005b	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00060	68 00 00 00 00	 push	 OFFSET __TI4?AVfailure@ios_base@std@@
  00065	8d 45 e0	 lea	 eax, DWORD PTR $T2[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN40@clear:
$LN37@clear:

; 311  : 		else
; 312  : 			_THROW_NCEE(failure, "ios_base::eofbit set");

  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  00073	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00078	68 00 00 00 00	 push	 OFFSET __TI4?AVfailure@ios_base@std@@
  0007d	8d 45 e0	 lea	 eax, DWORD PTR $T1[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN41@clear:
$LN32@clear:
  00086	cc		 int	 3
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH@Z
_TEXT	SEGMENT
__State$dead$ = 8					; size = 4
?clear@ios_base@std@@QAEXH@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 303  : 		if ((_Mystate & _Except) == 0)

  00000	32 c0		 xor	 al, al
  00002	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00009	74 07		 je	 SHORT $LN9@clear
  0000b	6a 00		 push	 0
  0000d	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN9@clear:

; 317  : 		clear(_State, false);
; 318  : 		}

  00012	c2 04 00	 ret	 4
?clear@ios_base@std@@QAEXH@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = ecx

; 327  : 		return (_Mystate);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 328  : 		}

  00003	c3		 ret	 0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 349  : 		return (rdstate() == goodbit);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 0c	 cmp	 DWORD PTR [ecx+12], eax
  00005	0f 94 c0	 sete	 al

; 350  : 		}

  00008	c3		 ret	 0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = ecx

; 442  : 		{	// get locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 323  : 		{	// construct by copying

  00003	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00006	56		 push	 esi
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000c	89 0e		 mov	 DWORD PTR [esi], ecx

; 324  : 		_Ptr->_Incref();

  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	ff 52 04	 call	 DWORD PTR [edx+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 443  : 		return (*_Ploc);

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi

; 444  : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ??1ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ios_base@std@@UAE@XZ PROC				; std::ios_base::~ios_base, COMDAT
; _this$ = ecx

; 532  : 		_Ios_base_dtor(this);

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx

; 533  : 		}

  0000d	c3		 ret	 0
??1ios_base@std@@UAE@XZ ENDP				; std::ios_base::~ios_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ??0ios_base@std@@IAE@XZ
_TEXT	SEGMENT
??0ios_base@std@@IAE@XZ PROC				; std::ios_base::ios_base, COMDAT
; _this$ = ecx

; 541  : 	__CLR_OR_THIS_CALL ios_base()

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@

; 542  : 		{	// default constructor
; 543  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0ios_base@std@@IAE@XZ ENDP				; std::ios_base::ios_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ?_Init@ios_base@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@ios_base@std@@IAEXXZ PROC			; std::ios_base::_Init, COMDAT
; _this$ = ecx

; 546  : 		{	// initialize a new ios_base

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 556  : 		_Ploc = _NEW_CRT locale;

  00005	6a 04		 push	 4
  00007	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  0000e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00015	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0001c	c7 46 14 01 02
	00 00		 mov	 DWORD PTR [esi+20], 513	; 00000201H
  00023	c7 46 18 06 00
	00 00		 mov	 DWORD PTR [esi+24], 6
  0002a	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00031	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  00038	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  0003f	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  00046	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 302  : 		_Mystate = (iostate)(_State & _Statmask);

  0004d	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 556  : 		_Ploc = _NEW_CRT locale;

  00054	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00059	8b f8		 mov	 edi, eax
  0005b	83 c4 04	 add	 esp, 4
  0005e	85 ff		 test	 edi, edi
  00060	74 13		 je	 SHORT $LN3@Init
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 329  : 		{	// construct from current locale

  00062	6a 01		 push	 1
  00064	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  00069	89 07		 mov	 DWORD PTR [edi], eax
  0006b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 556  : 		_Ploc = _NEW_CRT locale;

  0006e	89 7e 30	 mov	 DWORD PTR [esi+48], edi

; 557  : 		}

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	59		 pop	 ecx
  00074	c3		 ret	 0
$LN3@Init:
  00075	5f		 pop	 edi
  00076	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  0007d	5e		 pop	 esi
  0007e	59		 pop	 ecx
  0007f	c3		 ret	 0
?_Init@ios_base@std@@IAEXXZ ENDP			; std::ios_base::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN10@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN10@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	8b f9		 mov	 edi, ecx
  0000b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00010	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7system_error@std@@6B@
  00016	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00019	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  0001c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0001f	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00022	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7failure@ios_base@std@@6B@
  00028	8b c7		 mov	 eax, edi
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0system_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0system_error@std@@QAE@ABV01@@Z PROC			; std::system_error::system_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	8b f9		 mov	 edi, ecx
  0000b	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00010	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7system_error@std@@6B@
  00016	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00019	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  0001c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0001f	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00022	8b c7		 mov	 eax, edi
  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??0system_error@std@@QAE@ABV01@@Z ENDP			; std::system_error::system_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gios_base@std@@UAEPAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 532  : 		_Ios_base_dtor(this);

  00006	56		 push	 esi
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000d	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00012	83 c4 04	 add	 esp, 4
  00015	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00019	74 09		 je	 SHORT $LN6@scalar
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00021	83 c4 04	 add	 esp, 4
$LN6@scalar:
  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_Gios_base@std@@UAEPAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z
_TEXT	SEGMENT
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z PROC		; std::_Fgetc<char>, COMDAT
; __Byte$ = ecx
; __File$ = edx

; 37   : 	{	// get a char element from a C stream

  00000	56		 push	 esi

; 38   : 	int _Meta;
; 39   : 	if ((_Meta = fgetc(_File)) == EOF)

  00001	52		 push	 edx
  00002	8b f1		 mov	 esi, ecx
  00004	e8 00 00 00 00	 call	 _fgetc
  00009	83 c4 04	 add	 esp, 4
  0000c	83 f8 ff	 cmp	 eax, -1
  0000f	75 04		 jne	 SHORT $LN2@Fgetc

; 40   : 		return (false);

  00011	32 c0		 xor	 al, al
  00013	5e		 pop	 esi

; 45   : 		}
; 46   : 	}

  00014	c3		 ret	 0
$LN2@Fgetc:

; 41   : 	else
; 42   : 		{	// got one, convert to char
; 43   : 		_Byte = (char)_Meta;

  00015	88 06		 mov	 BYTE PTR [esi], al

; 44   : 		return (true);

  00017	b0 01		 mov	 al, 1
  00019	5e		 pop	 esi

; 45   : 		}
; 46   : 	}

  0001a	c3		 ret	 0
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ENDP		; std::_Fgetc<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z
_TEXT	SEGMENT
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z PROC		; std::_Fputc<char>, COMDAT
; __Byte$ = cl
; __File$ = edx

; 83   : 	return (fputc(_Byte, _File) != EOF);

  00000	0f be c1	 movsx	 eax, cl
  00003	52		 push	 edx
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 _fputc
  0000a	33 c9		 xor	 ecx, ecx
  0000c	83 c4 08	 add	 esp, 8
  0000f	83 f8 ff	 cmp	 eax, -1
  00012	0f 95 c0	 setne	 al

; 84   : 	}

  00015	c3		 ret	 0
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ENDP		; std::_Fputc<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z
_TEXT	SEGMENT
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z PROC		; std::_Ungetc<char>, COMDAT
; __Byte$ = ecx
; __File$ = edx

; 107  : 	return (ungetc((unsigned char)_Byte, _File) != EOF);

  00000	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00003	52		 push	 edx
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 _ungetc
  0000a	33 c9		 xor	 ecx, ecx
  0000c	83 c4 08	 add	 esp, 8
  0000f	83 f8 ff	 cmp	 eax, -1
  00012	0f 95 c0	 setne	 al

; 108  : 	}

  00015	c3		 ret	 0
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ENDP		; std::_Ungetc<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0VertexUVRGBA@gfxu@@QAE@ABV01@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??0VertexUVRGBA@gfxu@@QAE@ABV01@@Z PROC			; gfxu::VertexUVRGBA::VertexUVRGBA, COMDAT
; _this$ = ecx

; 85   : {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00010	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00013	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00016	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00019	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0001c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0001f	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00022	0f b6 42 14	 movzx	 eax, BYTE PTR [edx+20]
  00026	88 41 14	 mov	 BYTE PTR [ecx+20], al
  00029	0f b6 42 15	 movzx	 eax, BYTE PTR [edx+21]
  0002d	88 41 15	 mov	 BYTE PTR [ecx+21], al
  00030	0f b6 42 16	 movzx	 eax, BYTE PTR [edx+22]
  00034	88 41 16	 mov	 BYTE PTR [ecx+22], al
  00037	0f b6 42 17	 movzx	 eax, BYTE PTR [edx+23]
  0003b	88 41 17	 mov	 BYTE PTR [ecx+23], al
  0003e	8b c1		 mov	 eax, ecx
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0VertexUVRGBA@gfxu@@QAE@ABV01@@Z ENDP			; gfxu::VertexUVRGBA::VertexUVRGBA
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GVertexStream@gfxu@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GVertexStream@gfxu@@UAEPAXI@Z PROC			; gfxu::VertexStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1VertexStream@gfxu@@UAE@XZ ; gfxu::VertexStream::~VertexStream
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_GVertexStream@gfxu@@UAEPAXI@Z ENDP			; gfxu::VertexStream::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\task.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??1VertexStream@gfxu@@UAE@XZ
_TEXT	SEGMENT
??1VertexStream@gfxu@@UAE@XZ PROC			; gfxu::VertexStream::~VertexStream, COMDAT
; _this$ = ecx

; 100  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 101  : 	if(isUploaded())

  00004	80 7e 31 00	 cmp	 BYTE PTR [esi+49], 0
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7VertexStream@gfxu@@6B@
  0000e	74 5a		 je	 SHORT $LN28@VertexStre
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h

; 18   : 			if(pos + sizeof(A) <= size)

  00010	8b 0d 1c 04 00
	00		 mov	 ecx, DWORD PTR ?renderThread@@3VRenderThread@@A+1052
; File c:\users\glenn\documents\github\wind\project\wind\wind\task.cpp

; 13   : {

  00016	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00019	8b 7e 28	 mov	 edi, DWORD PTR [esi+40]
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h

; 18   : 			if(pos + sizeof(A) <= size)

  0001c	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  0001f	3b 05 18 04 00
	00		 cmp	 eax, DWORD PTR ?renderThread@@3VRenderThread@@A+1048
  00025	77 26		 ja	 SHORT $LN17@VertexStre

; 19   : 			{
; 20   : 				A* mempos = (A*)(heap + pos);

  00027	a1 14 04 00 00	 mov	 eax, DWORD PTR ?renderThread@@3VRenderThread@@A+1044
  0002c	03 c1		 add	 eax, ecx

; 21   : 				new(mempos) A(object);

  0002e	74 12		 je	 SHORT $LN20@VertexStre
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7TaskVBOVAOSet@Tasks@@6B@
  00036	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00039	89 78 08	 mov	 DWORD PTR [eax+8], edi
  0003c	8b 0d 1c 04 00
	00		 mov	 ecx, DWORD PTR ?renderThread@@3VRenderThread@@A+1052
$LN20@VertexStre:

; 22   : 				pos += sizeof(A);

  00042	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00045	89 0d 1c 04 00
	00		 mov	 DWORD PTR ?renderThread@@3VRenderThread@@A+1052, ecx

; 23   : 
; 24   : 				return mempos;

  0004b	eb 02		 jmp	 SHORT $LN16@VertexStre
$LN17@VertexStre:

; 25   : 			}
; 26   : 			else
; 27   : 			{
; 28   : 				return nullptr;

  0004d	33 c0		 xor	 eax, eax
$LN16@VertexStre:
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h

; 24   : 		if(count < size - 1)

  0004f	8b 0d 10 04 00
	00		 mov	 ecx, DWORD PTR ?renderThread@@3VRenderThread@@A+1040
  00055	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  0005b	7d 0d		 jge	 SHORT $LN28@VertexStre

; 25   : 		{
; 26   : 			content[count++] = object;

  0005d	89 04 8d 10 00
	00 00		 mov	 DWORD PTR ?renderThread@@3VRenderThread@@A[ecx*4+16], eax
  00064	ff 05 10 04 00
	00		 inc	 DWORD PTR ?renderThread@@3VRenderThread@@A+1040
$LN28@VertexStre:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex

; 33   : 		_Mtx_destroy(&_Mtx);

  0006a	8d 46 34	 lea	 eax, DWORD PTR [esi+52]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 __Mtx_destroy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1536 : 		if (this->_Myfirst != pointer())

  00073	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex

; 33   : 		_Mtx_destroy(&_Mtx);

  00076	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1536 : 		if (this->_Myfirst != pointer())

  00079	85 c0		 test	 eax, eax
  0007b	74 1e		 je	 SHORT $LN37@VertexStre
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00083	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1542 : 			this->_Myfirst = pointer();

  00086	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1543 : 			this->_Mylast = pointer();

  0008d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1544 : 			this->_Myend = pointer();

  00094	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN37@VertexStre:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 105  : }

  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	c3		 ret	 0
??1VertexStream@gfxu@@UAE@XZ ENDP			; gfxu::VertexStream::~VertexStream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?put@VertexStream@gfxu@@QAEXMMM@Z
_TEXT	SEGMENT
?put@VertexStream@gfxu@@QAEXMMM@Z PROC			; gfxu::VertexStream::put, COMDAT
; _this$ = ecx
; _x$ = xmm1s
; _y$ = xmm2s
; _z$ = xmm3s

; 108  : 	vertex.x = x;

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 109  : 	vertex.y = y;

  00003	f3 0f 11 51 14	 movss	 DWORD PTR [ecx+20], xmm2

; 110  : 	vertex.z = z;

  00008	f3 0f 11 59 18	 movss	 DWORD PTR [ecx+24], xmm3

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0000d	50		 push	 eax
  0000e	83 c1 04	 add	 ecx, 4
  00011	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  00015	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXABVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0001a	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 115  : }

  00020	c3		 ret	 0
?put@VertexStream@gfxu@@QAEXMMM@Z ENDP			; gfxu::VertexStream::put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?setColor@VertexStream@gfxu@@QAEXEEE@Z
_TEXT	SEGMENT
_r$ = 8							; size = 1
_g$ = 12						; size = 1
_b$ = 16						; size = 1
?setColor@VertexStream@gfxu@@QAEXEEE@Z PROC		; gfxu::VertexStream::setColor, COMDAT
; _this$ = ecx

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  : 	vertex.r = r;

  00003	8a 45 08	 mov	 al, BYTE PTR _r$[ebp]
  00006	88 41 24	 mov	 BYTE PTR [ecx+36], al

; 157  : 	vertex.g = g;

  00009	8a 45 0c	 mov	 al, BYTE PTR _g$[ebp]
  0000c	88 41 25	 mov	 BYTE PTR [ecx+37], al

; 158  : 	vertex.b = b;

  0000f	8a 45 10	 mov	 al, BYTE PTR _b$[ebp]
  00012	88 41 26	 mov	 BYTE PTR [ecx+38], al

; 159  : }

  00015	5d		 pop	 ebp
  00016	c2 0c 00	 ret	 12			; 0000000cH
?setColor@VertexStream@gfxu@@QAEXEEE@Z ENDP		; gfxu::VertexStream::setColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?setUV@VertexStream@gfxu@@QAEXMM@Z
_TEXT	SEGMENT
?setUV@VertexStream@gfxu@@QAEXMM@Z PROC			; gfxu::VertexStream::setUV, COMDAT
; _this$ = ecx
; _u$ = xmm1s
; _v$ = xmm2s

; 162  : 	vertex.u = u;

  00000	f3 0f 11 49 1c	 movss	 DWORD PTR [ecx+28], xmm1

; 163  : 	vertex.v = v;

  00005	f3 0f 11 51 20	 movss	 DWORD PTR [ecx+32], xmm2

; 164  : }

  0000a	c3		 ret	 0
?setUV@VertexStream@gfxu@@QAEXMM@Z ENDP			; gfxu::VertexStream::setUV
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?lock@VertexStream@gfxu@@QAEXXZ
_TEXT	SEGMENT
?lock@VertexStream@gfxu@@QAEXXZ PROC			; gfxu::VertexStream::lock, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex

; 43   : 		_Mtx_lockX(&_Mtx);

  00000	8d 41 34	 lea	 eax, DWORD PTR [ecx+52]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 __Mtx_lock
  00009	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  0000c	85 c0		 test	 eax, eax
  0000e	74 07		 je	 SHORT $LN7@lock

; 33   : 		_Throw_C_error(_Res);

  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  00016	59		 pop	 ecx
$LN7@lock:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 174  : }

  00017	c3		 ret	 0
?lock@VertexStream@gfxu@@QAEXXZ ENDP			; gfxu::VertexStream::lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?unlock@VertexStream@gfxu@@QAEXXZ
_TEXT	SEGMENT
?unlock@VertexStream@gfxu@@QAEXXZ PROC			; gfxu::VertexStream::unlock, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex

; 53   : 		_Mtx_unlockX(&_Mtx);

  00000	8d 41 34	 lea	 eax, DWORD PTR [ecx+52]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 __Mtx_unlock
  00009	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  0000c	85 c0		 test	 eax, eax
  0000e	74 07		 je	 SHORT $LN7@unlock

; 33   : 		_Throw_C_error(_Res);

  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  00016	59		 pop	 ecx
$LN7@unlock:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 179  : }

  00017	c3		 ret	 0
?unlock@VertexStream@gfxu@@QAEXXZ ENDP			; gfxu::VertexStream::unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?upload@VertexStream@gfxu@@QAE_NXZ
_TEXT	SEGMENT
?upload@VertexStream@gfxu@@QAE_NXZ PROC			; gfxu::VertexStream::upload, COMDAT
; _this$ = ecx

; 192  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 193  : 	if(!ready)

  00004	80 7f 30 00	 cmp	 BYTE PTR [edi+48], 0
  00008	75 29		 jne	 SHORT $LN4@upload

; 194  : 	{
; 195  : 		glGenVertexArrays(1, &vao);

  0000a	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  0000d	50		 push	 eax
  0000e	6a 01		 push	 1
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGenVertexArrays

; 196  : 		glGenBuffers(1, &vbo);

  00016	8d 77 2c	 lea	 esi, DWORD PTR [edi+44]
  00019	56		 push	 esi
  0001a	6a 01		 push	 1
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGenBuffers

; 197  : 		glBindBuffer(GL_ARRAY_BUFFER, vbo);

  00022	ff 36		 push	 DWORD PTR [esi]
  00024	68 92 88 00 00	 push	 34962			; 00008892H
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewBindBuffer

; 198  : 
; 199  : 		ready = true;

  0002f	c6 47 30 01	 mov	 BYTE PTR [edi+48], 1
$LN4@upload:

; 200  : 	}
; 201  : 
; 202  : 	if(!isUploaded())

  00033	80 7f 31 00	 cmp	 BYTE PTR [edi+49], 0
  00037	0f 85 f6 00 00
	00		 jne	 $LN37@upload
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex

; 43   : 		_Mtx_lockX(&_Mtx);

  0003d	8d 77 34	 lea	 esi, DWORD PTR [edi+52]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 __Mtx_lock
  00046	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  00049	85 c0		 test	 eax, eax
  0004b	74 09		 je	 SHORT $LN15@upload

; 33   : 		_Throw_C_error(_Res);

  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  00053	83 c4 04	 add	 esp, 4
$LN15@upload:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 206  : 		glBindVertexArray(vao);

  00056	ff 77 28	 push	 DWORD PTR [edi+40]
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewBindVertexArray

; 207  : 		glBindBuffer(GL_ARRAY_BUFFER, vbo);

  0005f	ff 77 2c	 push	 DWORD PTR [edi+44]
  00062	68 92 88 00 00	 push	 34962			; 00008892H
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewBindBuffer
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  0006d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00070	2b 4f 04	 sub	 ecx, DWORD PTR [edi+4]
  00073	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00078	f7 e9		 imul	 ecx
  0007a	c1 fa 02	 sar	 edx, 2
  0007d	8b c2		 mov	 eax, edx
  0007f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00082	03 c2		 add	 eax, edx
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 208  : 		glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(VertexUVRGBA), (const void*)&vertices[0], GL_STATIC_DRAW);

  00084	68 e4 88 00 00	 push	 35044			; 000088e4H
  00089	ff 77 04	 push	 DWORD PTR [edi+4]
  0008c	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0008f	c1 e0 03	 shl	 eax, 3
  00092	50		 push	 eax
  00093	68 92 88 00 00	 push	 34962			; 00008892H
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewBufferData

; 209  : 		glEnableVertexAttribArray(0);

  0009e	6a 00		 push	 0
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewEnableVertexAttribArray

; 210  : 		glEnableVertexAttribArray(1);

  000a6	6a 01		 push	 1
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewEnableVertexAttribArray

; 211  : 		glEnableVertexAttribArray(2);

  000ae	6a 02		 push	 2
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewEnableVertexAttribArray

; 212  : 		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(VertexUVRGBA), (GLvoid*)0);

  000b6	6a 00		 push	 0
  000b8	6a 18		 push	 24			; 00000018H
  000ba	6a 00		 push	 0
  000bc	68 06 14 00 00	 push	 5126			; 00001406H
  000c1	6a 03		 push	 3
  000c3	6a 00		 push	 0
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewVertexAttribPointer

; 213  : 		glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, sizeof(VertexUVRGBA), (GLvoid*)offsetof(VertexUVRGBA, u));

  000cb	6a 0c		 push	 12			; 0000000cH
  000cd	6a 18		 push	 24			; 00000018H
  000cf	6a 00		 push	 0
  000d1	68 06 14 00 00	 push	 5126			; 00001406H
  000d6	6a 02		 push	 2
  000d8	6a 01		 push	 1
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewVertexAttribPointer

; 214  : 		//glVertexAttribPointer(2, 4, GL_UNSIGNED_SHORT, GL_TRUE, sizeof(VertexUVRGBA), (GLvoid*)offsetof(VertexUVRGBA, r));
; 215  : 		glVertexAttribPointer(2, 4, GL_UNSIGNED_BYTE, GL_TRUE, sizeof(VertexUVRGBA), (GLvoid*)offsetof(VertexUVRGBA, r));

  000e0	6a 14		 push	 20			; 00000014H
  000e2	6a 18		 push	 24			; 00000018H
  000e4	6a 01		 push	 1
  000e6	68 01 14 00 00	 push	 5121			; 00001401H
  000eb	6a 04		 push	 4
  000ed	6a 02		 push	 2
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewVertexAttribPointer

; 217  : 		if(glGetError() != GL_NO_ERROR)

  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glGetError@0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  000fb	56		 push	 esi
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 217  : 		if(glGetError() != GL_NO_ERROR)

  000fc	85 c0		 test	 eax, eax
  000fe	74 1a		 je	 SHORT $LN2@upload
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  00100	e8 00 00 00 00	 call	 __Mtx_unlock
  00105	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  00108	85 c0		 test	 eax, eax
  0010a	74 09		 je	 SHORT $LN28@upload

; 33   : 		_Throw_C_error(_Res);

  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  00112	83 c4 04	 add	 esp, 4
$LN28@upload:
  00115	5f		 pop	 edi
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 220  : 			return false;

  00116	32 c0		 xor	 al, al
  00118	5e		 pop	 esi

; 231  : }

  00119	c3		 ret	 0
$LN2@upload:

; 221  : 		}
; 222  : 		else
; 223  : 		{
; 224  : 			uploaded = true;

  0011a	c6 47 31 01	 mov	 BYTE PTR [edi+49], 1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  0011e	e8 00 00 00 00	 call	 __Mtx_unlock
  00123	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  00126	85 c0		 test	 eax, eax
  00128	74 09		 je	 SHORT $LN37@upload

; 33   : 		_Throw_C_error(_Res);

  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  00130	83 c4 04	 add	 esp, 4
$LN37@upload:
  00133	5f		 pop	 edi
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 230  : 	return true;

  00134	b0 01		 mov	 al, 1
  00136	5e		 pop	 esi

; 231  : }

  00137	c3		 ret	 0
?upload@VertexStream@gfxu@@QAE_NXZ ENDP			; gfxu::VertexStream::upload
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?isUploaded@VertexStream@gfxu@@QAE_NXZ
_TEXT	SEGMENT
?isUploaded@VertexStream@gfxu@@QAE_NXZ PROC		; gfxu::VertexStream::isUploaded, COMDAT
; _this$ = ecx

; 250  : 	return uploaded;

  00000	8a 41 31	 mov	 al, BYTE PTR [ecx+49]

; 251  : }

  00003	c3		 ret	 0
?isUploaded@VertexStream@gfxu@@QAE_NXZ ENDP		; gfxu::VertexStream::isUploaded
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\window.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\window.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\window.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?_compile@Shader@gfxu@@IAE_NI@Z
_TEXT	SEGMENT
__Cat$2 = -284						; size = 1
_compileStatus$ = -284					; size = 4
_len$3 = -280						; size = 4
$T4 = -280						; size = 8
_strPtr$ = -272						; size = 4
_strLen$ = -268						; size = 4
$T5 = -264						; size = 8
_file$ = -256						; size = 184
_str$ = -68						; size = 24
_title$6 = -44						; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 4
?_compile@Shader@gfxu@@IAE_NI@Z PROC			; gfxu::Shader::_compile, COMDAT
; _this$ = ecx

; 261  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?_compile@Shader@gfxu@@IAE_NI@Z
  0000d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00013	50		 push	 eax
  00014	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c4		 xor	 eax, esp
  00021	89 84 24 08 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+284], eax
  00028	53		 push	 ebx
  00029	56		 push	 esi
  0002a	57		 push	 edi
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c4		 xor	 eax, esp
  00032	50		 push	 eax
  00033	8d 84 24 20 01
	00 00		 lea	 eax, DWORD PTR __$EHRec$[esp+300]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	8b f1		 mov	 esi, ecx

; 262  : 	if(compiled)

  00042	80 7e 20 00	 cmp	 BYTE PTR [esi+32], 0
  00046	74 07		 je	 SHORT $LN6@compile

; 263  : 	{
; 264  : 		return true;

  00048	b0 01		 mov	 al, 1
  0004a	e9 c1 02 00 00	 jmp	 $LN7@compile
$LN6@compile:

; 265  : 	}
; 266  : 
; 267  : 	std::ifstream file(fileName);

  0004f	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00052	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00055	53		 push	 ebx
  00056	8d 4c 24 3c	 lea	 ecx, DWORD PTR _file$[esp+316]
  0005a	e8 00 00 00 00	 call	 ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
  0005f	c7 84 24 28 01
	00 00 00 00 00
	00		 mov	 DWORD PTR __$EHRec$[esp+308], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  0006a	8b 44 24 2c	 mov	 eax, DWORD PTR _file$[esp+300]
  0006e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 328  : 		}
; 329  : 
; 330  : 	void __CLR_OR_THIS_CALL setstate(iostate _State, bool _Exreraise)
; 331  : 		{	// merge in state argument, possibly reraise exception
; 332  : 		if (_State != goodbit)
; 333  : 			clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
; 334  : 		}
; 335  : 
; 336  : 	void __CLR_OR_THIS_CALL setstate(iostate _State)
; 337  : 		{	// merge in state argument
; 338  : 		if (_State != goodbit)
; 339  : 			clear((iostate)((int)rdstate() | (int)_State), false);
; 340  : 		}
; 341  : 
; 342  : 	void __CLR_OR_THIS_CALL setstate(io_state _State)
; 343  : 		{	// merge in state argument, old style
; 344  : 		setstate((iostate)_State);
; 345  : 		}
; 346  : 
; 347  : 	bool __CLR_OR_THIS_CALL good() const
; 348  : 		{	// test if no state bits are set
; 349  : 		return (rdstate() == goodbit);

  00071	83 7c 04 38 00	 cmp	 DWORD PTR _file$[esp+eax+312], 0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 269  : 	if(!file.good())

  00076	74 42		 je	 SHORT $LN5@compile
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 912  : 		if (_Filebuffer.close() == 0)

  00078	8d 4c 24 3c	 lea	 ecx, DWORD PTR _file$[esp+316]
  0007c	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  00081	85 c0		 test	 eax, eax
  00083	75 2e		 jne	 SHORT $LN37@compile

; 913  : 			_Myios::setstate(ios_base::failbit);

  00085	8b 44 24 2c	 mov	 eax, DWORD PTR _file$[esp+300]
  00089	8d 4c 24 2c	 lea	 ecx, DWORD PTR _file$[esp+300]
  0008d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00090	03 c8		 add	 ecx, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  00092	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00095	83 c8 02	 or	 eax, 2

; 54   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00098	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0009c	75 03		 jne	 SHORT $LN29@compile
  0009e	83 c8 04	 or	 eax, 4
$LN29@compile:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 302  : 		_Mystate = (iostate)(_State & _Statmask);

  000a1	83 e0 17	 and	 eax, 23			; 00000017H
  000a4	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 303  : 		if ((_Mystate & _Except) == 0)

  000a7	85 41 10	 test	 DWORD PTR [ecx+16], eax
  000aa	74 07		 je	 SHORT $LN37@compile
  000ac	6a 00		 push	 0
  000ae	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN37@compile:
  000b3	32 db		 xor	 bl, bl
  000b5	e9 eb 01 00 00	 jmp	 $LN152@compile
$LN5@compile:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));

  000ba	ff 74 24 10	 push	 DWORD PTR __Cat$2[esp+300]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 495  : 		{	// construct from stream buffer in istream _Istr

  000be	8b 44 04 68	 mov	 eax, DWORD PTR _file$[esp+eax+360]

; 490  : 		{	// construct from stream buffer _Sb

  000c2	c6 44 24 1c 01	 mov	 BYTE PTR $T4[esp+308], 1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));

  000c7	ff 74 24 1c	 push	 DWORD PTR $T4[esp+308]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 495  : 		{	// construct from stream buffer in istream _Istr

  000cb	85 c0		 test	 eax, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));

  000cd	6a 00		 push	 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 495  : 		{	// construct from stream buffer in istream _Istr

  000cf	0f 94 44 24 34	 sete	 BYTE PTR $T5[esp+316]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));

  000d4	ff 74 24 34	 push	 DWORD PTR $T5[esp+316]
  000d8	8d 8c 24 f8 00
	00 00		 lea	 ecx, DWORD PTR _str$[esp+316]
  000df	50		 push	 eax

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  000e0	c7 84 24 10 01
	00 00 0f 00 00
	00		 mov	 DWORD PTR _str$[esp+340], 15 ; 0000000fH

; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  000eb	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR _str$[esp+336], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  000f6	c6 84 24 fc 00
	00 00 00	 mov	 BYTE PTR _str$[esp+320], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));

  000fe	e8 00 00 00 00	 call	 ??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<std::istreambuf_iterator<char,std::char_traits<char> > >
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 275  : 	std::string str = std::string((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());

  00103	c6 84 24 28 01
	00 00 01	 mov	 BYTE PTR __$EHRec$[esp+308], 1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 524  : 			: this->_Bx._Buf);

  0010b	83 bc 24 fc 00
	00 00 10	 cmp	 DWORD PTR _str$[esp+320], 16 ; 00000010H
  00113	8d 84 24 e8 00
	00 00		 lea	 eax, DWORD PTR _str$[esp+300]
  0011a	0f 43 84 24 e8
	00 00 00	 cmovae	 eax, DWORD PTR _str$[esp+300]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 276  : 	const char* strPtr = str.c_str();

  00122	89 44 24 1c	 mov	 DWORD PTR _strPtr$[esp+300], eax

; 277  : 	const int strLen = str.length();

  00126	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR _str$[esp+316]
  0012d	89 44 24 20	 mov	 DWORD PTR _strLen$[esp+300], eax

; 278  : 
; 279  : 	if(!strLen)

  00131	85 c0		 test	 eax, eax
  00133	75 07		 jne	 SHORT $LN4@compile
  00135	32 db		 xor	 bl, bl
  00137	e9 32 01 00 00	 jmp	 $LN14@compile
$LN4@compile:

; 280  : 	{
; 281  : 		return false;
; 282  : 	}
; 283  : 
; 284  : 	object = glCreateShader(type);

  0013c	ff 75 08	 push	 DWORD PTR _type$[ebp]
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewCreateShader

; 285  : 
; 286  : 	glShaderSource(object, 1, &strPtr, &strLen);

  00145	8d 4c 24 20	 lea	 ecx, DWORD PTR _strLen$[esp+300]
  00149	51		 push	 ecx
  0014a	8d 4c 24 20	 lea	 ecx, DWORD PTR _strPtr$[esp+304]
  0014e	51		 push	 ecx
  0014f	6a 01		 push	 1
  00151	50		 push	 eax
  00152	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00155	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewShaderSource

; 287  : 	glCompileShader(object);

  0015b	ff 76 1c	 push	 DWORD PTR [esi+28]
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewCompileShader

; 288  : 
; 289  : 	GLint compileStatus;
; 290  : 
; 291  : 	glGetObjectParameterivARB(object, GL_OBJECT_COMPILE_STATUS_ARB, &compileStatus);

  00164	8d 44 24 10	 lea	 eax, DWORD PTR _compileStatus$[esp+300]
  00168	50		 push	 eax
  00169	68 81 8b 00 00	 push	 35713			; 00008b81H
  0016e	ff 76 1c	 push	 DWORD PTR [esi+28]
  00171	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetObjectParameterivARB

; 292  : 
; 293  : 	if((compileStatus == GL_FALSE) & (GLWindow::instance != NULL))

  00177	33 c9		 xor	 ecx, ecx
  00179	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?instance@GLWindow@@2PAV1@A, ecx ; GLWindow::instance
  0017f	0f 95 c1	 setne	 cl
  00182	33 c0		 xor	 eax, eax
  00184	39 44 24 10	 cmp	 DWORD PTR _compileStatus$[esp+300], eax
  00188	0f 94 c0	 sete	 al
  0018b	85 c8		 test	 ecx, eax
  0018d	0f 84 cb 00 00
	00		 je	 $LN3@compile

; 294  : 	{
; 295  : 		GLint len;
; 296  : 		GLchar* str = new GLchar[1024];

  00193	68 00 04 00 00	 push	 1024			; 00000400H
  00198	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0019d	83 c4 04	 add	 esp, 4

; 297  : 		wstring title = L"Shader error in " + fileName;

  001a0	8d 8c 24 00 01
	00 00		 lea	 ecx, DWORD PTR _title$6[esp+300]
  001a7	53		 push	 ebx
  001a8	8b f8		 mov	 edi, eax
  001aa	e8 00 00 00 00	 call	 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001af	83 c4 04	 add	 esp, 4

; 298  : 		glGetShaderInfoLog(object, 1024, &len, str);

  001b2	57		 push	 edi
  001b3	8d 44 24 18	 lea	 eax, DWORD PTR _len$3[esp+304]
  001b7	50		 push	 eax
  001b8	68 00 04 00 00	 push	 1024			; 00000400H
  001bd	c6 84 24 34 01
	00 00 02	 mov	 BYTE PTR __$EHRec$[esp+320], 2
  001c5	ff 76 1c	 push	 DWORD PTR [esi+28]
  001c8	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetShaderInfoLog

; 299  : 		if(len > 0)

  001ce	8b 44 24 14	 mov	 eax, DWORD PTR _len$3[esp+300]
  001d2	85 c0		 test	 eax, eax
  001d4	7e 4c		 jle	 SHORT $LN2@compile

; 300  : 		{
; 301  : 			wchar_t* wideStr = new wchar_t[len + 1];

  001d6	33 c9		 xor	 ecx, ecx
  001d8	40		 inc	 eax
  001d9	ba 02 00 00 00	 mov	 edx, 2
  001de	f7 e2		 mul	 edx
  001e0	0f 90 c1	 seto	 cl
  001e3	f7 d9		 neg	 ecx
  001e5	0b c8		 or	 ecx, eax
  001e7	51		 push	 ecx
  001e8	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  001ed	83 c4 04	 add	 esp, 4
  001f0	8b f0		 mov	 esi, eax

; 302  : 			mbstowcs_s(NULL, wideStr, len + 1, str, len);

  001f2	8b 44 24 14	 mov	 eax, DWORD PTR _len$3[esp+300]
  001f6	50		 push	 eax
  001f7	57		 push	 edi
  001f8	40		 inc	 eax
  001f9	50		 push	 eax
  001fa	56		 push	 esi
  001fb	6a 00		 push	 0
  001fd	e8 00 00 00 00	 call	 _mbstowcs_s
; File c:\users\glenn\documents\github\wind\project\wind\wind\window.cpp

; 211  : 	MessageBox(hWnd, lpText, lpText, uType);

  00202	a1 00 00 00 00	 mov	 eax, DWORD PTR ?instance@GLWindow@@2PAV1@A ; GLWindow::instance
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 302  : 			mbstowcs_s(NULL, wideStr, len + 1, str, len);

  00207	83 c4 14	 add	 esp, 20			; 00000014H
; File c:\users\glenn\documents\github\wind\project\wind\wind\window.cpp

; 211  : 	MessageBox(hWnd, lpText, lpText, uType);

  0020a	6a 10		 push	 16			; 00000010H
  0020c	56		 push	 esi
  0020d	56		 push	 esi
  0020e	ff 70 08	 push	 DWORD PTR [eax+8]
  00211	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 305  : 			delete[] wideStr;

  00217	56		 push	 esi
  00218	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0021d	83 c4 04	 add	 esp, 4

; 306  : 		} else

  00220	eb 1a		 jmp	 SHORT $LN120@compile
$LN2@compile:
; File c:\users\glenn\documents\github\wind\project\wind\wind\window.cpp

; 211  : 	MessageBox(hWnd, lpText, lpText, uType);

  00222	a1 00 00 00 00	 mov	 eax, DWORD PTR ?instance@GLWindow@@2PAV1@A ; GLWindow::instance
  00227	6a 10		 push	 16			; 00000010H
  00229	68 00 00 00 00	 push	 OFFSET $SG4294949856
  0022e	68 00 00 00 00	 push	 OFFSET $SG4294949856
  00233	ff 70 08	 push	 DWORD PTR [eax+8]
  00236	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN120@compile:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 311  : 		delete[] str;

  0023c	57		 push	 edi
  0023d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00242	83 c4 04	 add	 esp, 4

; 312  : 		file.close();

  00245	8d 4c 24 2c	 lea	 ecx, DWORD PTR _file$[esp+300]
  00249	e8 00 00 00 00	 call	 ?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::close

; 313  : 		return false;

  0024e	8d 8c 24 00 01
	00 00		 lea	 ecx, DWORD PTR _title$6[esp+300]
  00255	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0025a	32 db		 xor	 bl, bl
  0025c	eb 10		 jmp	 SHORT $LN14@compile
$LN3@compile:

; 314  : 	}
; 315  : 	
; 316  : 	compiled = true;
; 317  : 	file.close();

  0025e	8d 4c 24 2c	 lea	 ecx, DWORD PTR _file$[esp+300]
  00262	c6 46 20 01	 mov	 BYTE PTR [esi+32], 1
  00266	e8 00 00 00 00	 call	 ?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::close

; 318  : 	return compiled;

  0026b	8a 5e 20	 mov	 bl, BYTE PTR [esi+32]
$LN14@compile:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0026e	83 bc 24 fc 00
	00 00 10	 cmp	 DWORD PTR _str$[esp+320], 16 ; 00000010H
  00276	72 0f		 jb	 SHORT $LN142@compile
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00278	ff b4 24 e8 00
	00 00		 push	 DWORD PTR _str$[esp+300]
  0027f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00284	83 c4 04	 add	 esp, 4
$LN142@compile:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00287	c7 84 24 fc 00
	00 00 0f 00 00
	00		 mov	 DWORD PTR _str$[esp+320], 15 ; 0000000fH

; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00292	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _str$[esp+316], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  0029d	c6 84 24 e8 00
	00 00 00	 mov	 BYTE PTR _str$[esp+300], 0
$LN152@compile:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 318  : 	return compiled;

  002a5	c7 84 24 28 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+308], -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 873  : 		{	// destroy the object

  002b0	8b 44 24 2c	 mov	 eax, DWORD PTR _file$[esp+300]
  002b4	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002b7	c7 44 04 2c 00
	00 00 00	 mov	 DWORD PTR _file$[esp+eax+300], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  002bf	8b 44 24 2c	 mov	 eax, DWORD PTR _file$[esp+300]
  002c3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002c6	8d 41 90	 lea	 eax, DWORD PTR [ecx-112]
  002c9	89 44 0c 28	 mov	 DWORD PTR _file$[esp+ecx+296], eax

; 874  : 		}

  002cd	8d 4c 24 3c	 lea	 ecx, DWORD PTR _file$[esp+316]
  002d1	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 71   : 		{	// destroy the object

  002d6	8b 44 24 2c	 mov	 eax, DWORD PTR _file$[esp+300]
  002da	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002dd	c7 44 04 2c 00
	00 00 00	 mov	 DWORD PTR _file$[esp+eax+300], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  002e5	8b 4c 24 2c	 mov	 ecx, DWORD PTR _file$[esp+300]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 532  : 		_Ios_base_dtor(this);

  002e9	8d 84 24 9c 00
	00 00		 lea	 eax, DWORD PTR _file$[esp+412]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 71   : 		{	// destroy the object

  002f0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 532  : 		_Ios_base_dtor(this);

  002f3	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 71   : 		{	// destroy the object

  002f4	8d 4a e8	 lea	 ecx, DWORD PTR [edx-24]
  002f7	89 4c 14 2c	 mov	 DWORD PTR _file$[esp+edx+300], ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 531  : 		{	// destroy the object

  002fb	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _file$[esp+416], OFFSET ??_7ios_base@std@@6B@

; 532  : 		_Ios_base_dtor(this);

  00306	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0030b	83 c4 04	 add	 esp, 4
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 318  : 	return compiled;

  0030e	8a c3		 mov	 al, bl
$LN7@compile:

; 319  : }

  00310	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+300]
  00317	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0031e	59		 pop	 ecx
  0031f	5f		 pop	 edi
  00320	5e		 pop	 esi
  00321	5b		 pop	 ebx
  00322	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+284]
  00329	33 cc		 xor	 ecx, esp
  0032b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00330	8b e5		 mov	 esp, ebp
  00332	5d		 pop	 ebp
  00333	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_compile@Shader@gfxu@@IAE_NI@Z$0:
  00000	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__unwindfunclet$?_compile@Shader@gfxu@@IAE_NI@Z$1:
  0000b	8d 4d bc	 lea	 ecx, DWORD PTR _str$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_compile@Shader@gfxu@@IAE_NI@Z$2:
  00013	8d 4d d4	 lea	 ecx, DWORD PTR _title$6[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?_compile@Shader@gfxu@@IAE_NI@Z:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 82 e4 fe ff
	ff		 lea	 eax, DWORD PTR [edx-284]
  00025	8b 8a e0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-288]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	83 c0 0c	 add	 eax, 12			; 0000000cH
  00035	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_compile@Shader@gfxu@@IAE_NI@Z
  00044	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_compile@Shader@gfxu@@IAE_NI@Z ENDP			; gfxu::Shader::_compile
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 873  : 		{	// destroy the object

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00006	8d 71 70	 lea	 esi, DWORD PTR [ecx+112]
  00009	c7 44 30 90 00
	00 00 00	 mov	 DWORD PTR [eax+esi-112], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  00011	8b 46 90	 mov	 eax, DWORD PTR [esi-112]
  00014	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00017	8d 41 90	 lea	 eax, DWORD PTR [ecx-112]
  0001a	89 44 31 8c	 mov	 DWORD PTR [ecx+esi-116], eax

; 874  : 		}

  0001e	8d 4e a0	 lea	 ecx, DWORD PTR [esi-96]
  00021	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 71   : 		{	// destroy the object

  00026	8b 46 90	 mov	 eax, DWORD PTR [esi-112]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 532  : 		_Ios_base_dtor(this);

  00029	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 71   : 		{	// destroy the object

  0002a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002d	c7 44 30 90 00
	00 00 00	 mov	 DWORD PTR [eax+esi-112], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00035	8b 46 90	 mov	 eax, DWORD PTR [esi-112]
  00038	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003b	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  0003e	89 44 31 8c	 mov	 DWORD PTR [ecx+esi-116], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 531  : 		{	// destroy the object

  00042	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@

; 532  : 		_Ios_base_dtor(this);

  00048	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0004d	83 c4 04	 add	 esp, 4
  00050	5e		 pop	 esi
  00051	c3		 ret	 0
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0Shader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_fileName$ = 8						; size = 24
??0Shader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; gfxu::Shader::Shader, COMDAT
; _this$ = ecx

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Shader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Shader@gfxu@@6B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00035	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 735  : 		assign(_Right, 0, npos);

  00037	6a ff		 push	 -1

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;
; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2260 : 			if (0 < _Newsize)
; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);
; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00039	c7 41 14 07 00
	00 00		 mov	 DWORD PTR [ecx+20], 7

; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00040	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 735  : 		assign(_Right, 0, npos);

  00047	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00048	66 89 01	 mov	 WORD PTR [ecx], ax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 735  : 		assign(_Right, 0, npos);

  0004b	8d 45 08	 lea	 eax, DWORD PTR _fileName$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00054	83 7d 1c 08	 cmp	 DWORD PTR _fileName$[ebp+20], 8
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 323  : {

  00058	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0005c	72 0b		 jb	 SHORT $LN83@Shader
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0005e	ff 75 08	 push	 DWORD PTR _fileName$[ebp]
  00061	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00066	83 c4 04	 add	 esp, 4
$LN83@Shader:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 325  : }

  00069	8b c6		 mov	 eax, esi
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Shader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _fileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??0Shader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Shader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Shader@gfxu@@QAE@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; gfxu::Shader::Shader
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?compile@VertexShader@gfxu@@UAE_NXZ
_TEXT	SEGMENT
?compile@VertexShader@gfxu@@UAE_NXZ PROC		; gfxu::VertexShader::compile, COMDAT
; _this$ = ecx

; 342  : 	return _compile(GL_VERTEX_SHADER);

  00000	68 31 8b 00 00	 push	 35633			; 00008b31H
  00005	e8 00 00 00 00	 call	 ?_compile@Shader@gfxu@@IAE_NI@Z ; gfxu::Shader::_compile

; 343  : }

  0000a	c3		 ret	 0
?compile@VertexShader@gfxu@@UAE_NXZ ENDP		; gfxu::VertexShader::compile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?compile@GeometryShader@gfxu@@UAE_NXZ
_TEXT	SEGMENT
?compile@GeometryShader@gfxu@@UAE_NXZ PROC		; gfxu::GeometryShader::compile, COMDAT
; _this$ = ecx

; 353  : 	return _compile(GL_GEOMETRY_SHADER);

  00000	68 d9 8d 00 00	 push	 36313			; 00008dd9H
  00005	e8 00 00 00 00	 call	 ?_compile@Shader@gfxu@@IAE_NI@Z ; gfxu::Shader::_compile

; 354  : }

  0000a	c3		 ret	 0
?compile@GeometryShader@gfxu@@UAE_NXZ ENDP		; gfxu::GeometryShader::compile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?compile@FragmentShader@gfxu@@UAE_NXZ
_TEXT	SEGMENT
?compile@FragmentShader@gfxu@@UAE_NXZ PROC		; gfxu::FragmentShader::compile, COMDAT
; _this$ = ecx

; 364  : 	return _compile(GL_FRAGMENT_SHADER);

  00000	68 30 8b 00 00	 push	 35632			; 00008b30H
  00005	e8 00 00 00 00	 call	 ?_compile@Shader@gfxu@@IAE_NI@Z ; gfxu::Shader::_compile

; 365  : }

  0000a	c3		 ret	 0
?compile@FragmentShader@gfxu@@UAE_NXZ ENDP		; gfxu::FragmentShader::compile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\window.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\window.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\window.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?create@ShaderProgram@gfxu@@AAE_NXZ
_TEXT	SEGMENT
_linkStatus$2 = -48					; size = 4
_len$3 = -44						; size = 4
_title$4 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?create@ShaderProgram@gfxu@@AAE_NXZ PROC		; gfxu::ShaderProgram::create, COMDAT
; _this$ = ecx

; 381  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?create@ShaderProgram@gfxu@@AAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx

; 382  : 	if(vShader || gShader || fShader)

  0002d	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00030	75 13		 jne	 SHORT $LN12@create
  00032	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00036	75 0d		 jne	 SHORT $LN12@create
  00038	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  0003c	75 07		 jne	 SHORT $LN12@create

; 458  : 		}
; 459  : 	}
; 460  : 
; 461  : 	return false;

  0003e	32 c0		 xor	 al, al
  00040	e9 fb 01 00 00	 jmp	 $LN14@create
$LN12@create:

; 383  : 	{
; 384  : 		object = glCreateProgramObjectARB();

  00045	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewCreateProgramObjectARB

; 385  : 
; 386  : 		if(vShader)

  0004b	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0004d	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00050	85 c9		 test	 ecx, ecx
  00052	74 20		 je	 SHORT $LN11@create

; 387  : 		{
; 388  : 			if(!vShader->compile())

  00054	8b 11		 mov	 edx, DWORD PTR [ecx]
  00056	8b 12		 mov	 edx, DWORD PTR [edx]
  00058	ff d2		 call	 edx
  0005a	84 c0		 test	 al, al
  0005c	75 08		 jne	 SHORT $LN10@create
$LN72@create:

; 389  : 			{
; 390  : 				return okay;

  0005e	8a 47 10	 mov	 al, BYTE PTR [edi+16]
  00061	e9 da 01 00 00	 jmp	 $LN14@create
$LN10@create:

; 391  : 			}
; 392  : 			glAttachShader(object, vShader->object);

  00066	8b 07		 mov	 eax, DWORD PTR [edi]
  00068	ff 70 1c	 push	 DWORD PTR [eax+28]
  0006b	ff 77 0c	 push	 DWORD PTR [edi+12]
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewAttachShader
$LN11@create:

; 393  : 		}
; 394  : 
; 395  : 		if(gShader)

  00074	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00077	85 c9		 test	 ecx, ecx
  00079	74 19		 je	 SHORT $LN9@create

; 396  : 		{
; 397  : 			if(!gShader->compile())

  0007b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
  0007f	ff d0		 call	 eax
  00081	84 c0		 test	 al, al
  00083	74 d9		 je	 SHORT $LN72@create

; 398  : 			{
; 399  : 				return okay;
; 400  : 			}
; 401  : 			glAttachShader(object, gShader->object);

  00085	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00088	ff 70 1c	 push	 DWORD PTR [eax+28]
  0008b	ff 77 0c	 push	 DWORD PTR [edi+12]
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewAttachShader
$LN9@create:

; 402  : 		}
; 403  : 
; 404  : 		if(fShader)

  00094	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00097	85 c9		 test	 ecx, ecx
  00099	74 19		 je	 SHORT $LN7@create

; 405  : 		{
; 406  : 			if(!fShader->compile())

  0009b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009d	8b 00		 mov	 eax, DWORD PTR [eax]
  0009f	ff d0		 call	 eax
  000a1	84 c0		 test	 al, al
  000a3	74 b9		 je	 SHORT $LN72@create

; 407  : 			{
; 408  : 				return okay;
; 409  : 			}
; 410  : 			glAttachShader(object, fShader->object);

  000a5	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000a8	ff 70 1c	 push	 DWORD PTR [eax+28]
  000ab	ff 77 0c	 push	 DWORD PTR [edi+12]
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewAttachShader
$LN7@create:

; 411  : 		}
; 412  : 
; 413  : 		glLinkProgram(object);

  000b4	ff 77 0c	 push	 DWORD PTR [edi+12]
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewLinkProgram

; 414  : 		GLint linkStatus;
; 415  : 
; 416  : 		glGetObjectParameterivARB(object, GL_OBJECT_LINK_STATUS_ARB, &linkStatus);

  000bd	8d 45 d0	 lea	 eax, DWORD PTR _linkStatus$2[ebp]
  000c0	50		 push	 eax
  000c1	68 82 8b 00 00	 push	 35714			; 00008b82H
  000c6	ff 77 0c	 push	 DWORD PTR [edi+12]
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetObjectParameterivARB

; 417  : 
; 418  : 		if((linkStatus == GL_FALSE) & (GLWindow::instance != NULL))

  000cf	33 c9		 xor	 ecx, ecx
  000d1	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?instance@GLWindow@@2PAV1@A, ecx ; GLWindow::instance
  000d7	0f 95 c1	 setne	 cl
  000da	33 c0		 xor	 eax, eax
  000dc	39 45 d0	 cmp	 DWORD PTR _linkStatus$2[ebp], eax
  000df	0f 94 c0	 sete	 al
  000e2	85 c8		 test	 ecx, eax
  000e4	0f 84 c3 00 00
	00		 je	 $LN5@create

; 419  : 		{
; 420  : 			GLint len;
; 421  : 			GLchar* str = new GLchar[1024];

  000ea	68 00 04 00 00	 push	 1024			; 00000400H
  000ef	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000f4	83 c4 04	 add	 esp, 4

; 422  : 			wstring title = L"Linking error";

  000f7	8d 4d d8	 lea	 ecx, DWORD PTR _title$4[ebp]
  000fa	68 00 00 00 00	 push	 OFFSET $SG4294949855
  000ff	8b d8		 mov	 ebx, eax
  00101	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 423  : 			glGetProgramInfoLog(object, 1024, &len, str);

  00106	53		 push	 ebx
  00107	8d 45 d4	 lea	 eax, DWORD PTR _len$3[ebp]
  0010a	50		 push	 eax
  0010b	68 00 04 00 00	 push	 1024			; 00000400H
  00110	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00117	ff 77 0c	 push	 DWORD PTR [edi+12]
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetProgramInfoLog

; 424  : 			if(len > 0)

  00120	8b 45 d4	 mov	 eax, DWORD PTR _len$3[ebp]
  00123	85 c0		 test	 eax, eax
  00125	7e 48		 jle	 SHORT $LN4@create

; 425  : 			{
; 426  : 				wchar_t* wideStr = new wchar_t[len + 1];

  00127	33 c9		 xor	 ecx, ecx
  00129	40		 inc	 eax
  0012a	ba 02 00 00 00	 mov	 edx, 2
  0012f	f7 e2		 mul	 edx
  00131	0f 90 c1	 seto	 cl
  00134	f7 d9		 neg	 ecx
  00136	0b c8		 or	 ecx, eax
  00138	51		 push	 ecx
  00139	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 427  : 				mbstowcs_s(NULL, wideStr, len + 1, str, len);

  0013e	8b 4d d4	 mov	 ecx, DWORD PTR _len$3[ebp]
  00141	51		 push	 ecx
  00142	53		 push	 ebx
  00143	41		 inc	 ecx
  00144	51		 push	 ecx
  00145	8b f0		 mov	 esi, eax
  00147	56		 push	 esi
  00148	6a 00		 push	 0
  0014a	e8 00 00 00 00	 call	 _mbstowcs_s
; File c:\users\glenn\documents\github\wind\project\wind\wind\window.cpp

; 211  : 	MessageBox(hWnd, lpText, lpText, uType);

  0014f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?instance@GLWindow@@2PAV1@A ; GLWindow::instance
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 427  : 				mbstowcs_s(NULL, wideStr, len + 1, str, len);

  00154	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\users\glenn\documents\github\wind\project\wind\wind\window.cpp

; 211  : 	MessageBox(hWnd, lpText, lpText, uType);

  00157	6a 10		 push	 16			; 00000010H
  00159	56		 push	 esi
  0015a	56		 push	 esi
  0015b	ff 70 08	 push	 DWORD PTR [eax+8]
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 430  : 				delete[] wideStr;

  00164	56		 push	 esi
  00165	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0016a	83 c4 04	 add	 esp, 4

; 431  : 			} else

  0016d	eb 1a		 jmp	 SHORT $LN35@create
$LN4@create:
; File c:\users\glenn\documents\github\wind\project\wind\wind\window.cpp

; 211  : 	MessageBox(hWnd, lpText, lpText, uType);

  0016f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?instance@GLWindow@@2PAV1@A ; GLWindow::instance
  00174	6a 10		 push	 16			; 00000010H
  00176	68 00 00 00 00	 push	 OFFSET $SG4294949854
  0017b	68 00 00 00 00	 push	 OFFSET $SG4294949854
  00180	ff 70 08	 push	 DWORD PTR [eax+8]
  00183	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxW@16
$LN35@create:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 436  : 			delete[] str;

  00189	53		 push	 ebx
  0018a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 438  : 			return okay;

  0018f	8a 5f 10	 mov	 bl, BYTE PTR [edi+16]
  00192	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00195	83 7d ec 08	 cmp	 DWORD PTR _title$4[ebp+20], 8
  00199	72 0b		 jb	 SHORT $LN59@create
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0019b	ff 75 d8	 push	 DWORD PTR _title$4[ebp]
  0019e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001a3	83 c4 04	 add	 esp, 4
$LN59@create:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 438  : 			return okay;

  001a6	8a c3		 mov	 al, bl
  001a8	e9 93 00 00 00	 jmp	 $LN14@create
$LN5@create:

; 439  : 		}
; 440  : 		else
; 441  : 		{
; 442  : 			glUseProgram(object);

  001ad	ff 77 0c	 push	 DWORD PTR [edi+12]
  001b0	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUseProgram

; 443  : 			modelview = glGetUniformLocation(object, "modelview");

  001b6	68 00 00 00 00	 push	 OFFSET $SG4294949853
  001bb	ff 77 0c	 push	 DWORD PTR [edi+12]
  001be	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetUniformLocation

; 444  : 			projection = glGetUniformLocation(object, "projection");

  001c4	68 00 00 00 00	 push	 OFFSET $SG4294949852
  001c9	ff 77 0c	 push	 DWORD PTR [edi+12]
  001cc	89 47 14	 mov	 DWORD PTR [edi+20], eax
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetUniformLocation

; 445  : 			const_color = glGetUniformLocation(object, "const_color");

  001d5	68 00 00 00 00	 push	 OFFSET $SG4294949851
  001da	ff 77 0c	 push	 DWORD PTR [edi+12]
  001dd	89 47 18	 mov	 DWORD PTR [edi+24], eax
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetUniformLocation

; 446  : 			cam_pos = glGetUniformLocation(object, "cam_pos");

  001e6	68 00 00 00 00	 push	 OFFSET $SG4294949850
  001eb	ff 77 0c	 push	 DWORD PTR [edi+12]
  001ee	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  001f1	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetUniformLocation

; 447  : 			fog_color = glGetUniformLocation(object, "fog_color");

  001f7	68 00 00 00 00	 push	 OFFSET $SG4294949849
  001fc	ff 77 0c	 push	 DWORD PTR [edi+12]
  001ff	89 47 20	 mov	 DWORD PTR [edi+32], eax
  00202	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetUniformLocation

; 448  : 			fog_dist = glGetUniformLocation(object, "fog_dist");

  00208	68 00 00 00 00	 push	 OFFSET $SG4294949848
  0020d	ff 77 0c	 push	 DWORD PTR [edi+12]
  00210	89 47 24	 mov	 DWORD PTR [edi+36], eax
  00213	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetUniformLocation

; 449  : 			texture1 = glGetUniformLocation(object, "texture_1");

  00219	68 00 00 00 00	 push	 OFFSET $SG4294949847
  0021e	ff 77 0c	 push	 DWORD PTR [edi+12]
  00221	89 47 28	 mov	 DWORD PTR [edi+40], eax
  00224	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGetUniformLocation
  0022a	89 47 2c	 mov	 DWORD PTR [edi+44], eax

; 450  : 		
; 451  : 			if(texture1 >= 0)

  0022d	85 c0		 test	 eax, eax
  0022f	78 09		 js	 SHORT $LN1@create

; 452  : 			{
; 453  : 				glUniform1i(texture1, 0);

  00231	6a 00		 push	 0
  00233	50		 push	 eax
  00234	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUniform1i
$LN1@create:

; 454  : 			}
; 455  : 
; 456  : 			okay = true;

  0023a	c6 47 10 01	 mov	 BYTE PTR [edi+16], 1

; 457  : 			return okay;

  0023e	b0 01		 mov	 al, 1
$LN14@create:

; 462  : }

  00240	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00243	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0024a	59		 pop	 ecx
  0024b	5f		 pop	 edi
  0024c	5e		 pop	 esi
  0024d	5b		 pop	 ebx
  0024e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00251	33 cd		 xor	 ecx, ebp
  00253	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00258	8b e5		 mov	 esp, ebp
  0025a	5d		 pop	 ebp
  0025b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?create@ShaderProgram@gfxu@@AAE_NXZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _title$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?create@ShaderProgram@gfxu@@AAE_NXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?create@ShaderProgram@gfxu@@AAE_NXZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?create@ShaderProgram@gfxu@@AAE_NXZ ENDP		; gfxu::ShaderProgram::create
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0MatrixStack@gfxu@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0MatrixStack@gfxu@@QAE@XZ PROC			; gfxu::MatrixStack::MatrixStack, COMDAT
; _this$ = ecx

; 478  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0MatrixStack@gfxu@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00029	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 79   : 		{	// construct childless container

  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 778  : 		_Map = _Mapptr();

  00031	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 779  : 		_Mapsize = 0;

  00038	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 780  : 		_Myoff = 0;

  0003f	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 781  : 		_Mysize = 0;

  00046	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0004d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00052	83 c4 04	 add	 esp, 4
  00055	85 c0		 test	 eax, eax
  00057	75 05		 jne	 SHORT $LN25@MatrixStac

; 29   : 		_Xbad_alloc();	// report no memory

  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN65@MatrixStac:
$LN25@MatrixStac:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 900  : 		this->_Myproxy = _Alproxy.allocate(1);

  0005e	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00060	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00066	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 902  : 		this->_Myproxy->_Mycont = this;

  0006d	8b 06		 mov	 eax, DWORD PTR [esi]
  0006f	89 30		 mov	 DWORD PTR [eax], esi
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 478  : {

  00071	0f 57 c0	 xorps	 xmm0, xmm0
  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 143  : 		data[i] = 0.0f;

  0007b	66 0f d6 46 14	 movq	 QWORD PTR [esi+20], xmm0
  00080	66 0f d6 46 1c	 movq	 QWORD PTR [esi+28], xmm0
  00085	66 0f d6 46 24	 movq	 QWORD PTR [esi+36], xmm0
  0008a	66 0f d6 46 2c	 movq	 QWORD PTR [esi+44], xmm0
  0008f	66 0f d6 46 34	 movq	 QWORD PTR [esi+52], xmm0
  00094	66 0f d6 46 3c	 movq	 QWORD PTR [esi+60], xmm0
  00099	66 0f d6 46 44	 movq	 QWORD PTR [esi+68], xmm0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 479  : 	clear();

  0009e	8b ce		 mov	 ecx, esi
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 143  : 		data[i] = 0.0f;

  000a0	66 0f d6 46 4c	 movq	 QWORD PTR [esi+76], xmm0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 479  : 	clear();

  000a5	e8 00 00 00 00	 call	 ?clear@MatrixStack@gfxu@@QAEXXZ ; gfxu::MatrixStack::clear

; 480  : }

  000aa	8b c6		 mov	 eax, esi
  000ac	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000af	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b6	59		 pop	 ecx
  000b7	5e		 pop	 esi
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
$LN64@MatrixStac:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MatrixStack@gfxu@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0MatrixStack@gfxu@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0MatrixStack@gfxu@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0MatrixStack@gfxu@@QAE@XZ ENDP			; gfxu::MatrixStack::MatrixStack
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??1?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ PROC ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::~stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1222 : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00008	ff 36		 push	 DWORD PTR [esi]
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 912  : 		this->_Myproxy = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??1?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ ENDP ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::~stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?unstack@MatrixStack@gfxu@@AAE?AVMatrix@geom@@XZ
_TEXT	SEGMENT
$T2 = -128						; size = 12
$T3 = -116						; size = 12
_stack2$ = -104						; size = 20
$T4 = -84						; size = 64
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?unstack@MatrixStack@gfxu@@AAE?AVMatrix@geom@@XZ PROC	; gfxu::MatrixStack::unstack, COMDAT
; _this$dead$ = ecx

; 483  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?unstack@MatrixStack@gfxu@@AAE?AVMatrix@geom@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 78	 sub	 esp, 120		; 00000078H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 33   : 		{	// construct by copying _Right

  0002c	68 00 00 00 00	 push	 OFFSET ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::MMS
  00031	8d 4d 98	 lea	 ecx, DWORD PTR _stack2$[ebp]
  00034	e8 00 00 00 00	 call	 ??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 484  : 	std::stack<geom::Matrix> stack2 = stack;

  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1382 : 		return (this->_Mysize == 0);

  00040	83 7d a8 00	 cmp	 DWORD PTR _stack2$[ebp+16], 0
  00044	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 143  : 		data[i] = 0.0f;

  00047	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  0004b	66 0f d6 46 08	 movq	 QWORD PTR [esi+8], xmm0
  00050	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
  00055	66 0f d6 46 18	 movq	 QWORD PTR [esi+24], xmm0
  0005a	66 0f d6 46 20	 movq	 QWORD PTR [esi+32], xmm0
  0005f	66 0f d6 46 28	 movq	 QWORD PTR [esi+40], xmm0
  00064	66 0f d6 46 30	 movq	 QWORD PTR [esi+48], xmm0
  00069	66 0f d6 46 38	 movq	 QWORD PTR [esi+56], xmm0

; 144  : 	}
; 145  : }
; 146  : 
; 147  : Matrix::Matrix(float* data)
; 148  : {
; 149  : 	for(int i = 0; i < 16; i++)
; 150  : 	{
; 151  : 		this->data[i] = data[i];
; 152  : 	}
; 153  : }
; 154  : 
; 155  : const float& Matrix::operator[](int index) const
; 156  : {
; 157  : 	return data[index];
; 158  : }
; 159  : 
; 160  : float& Matrix::operator[](int index)
; 161  : {
; 162  : 	return data[index];
; 163  : }
; 164  : 
; 165  : 
; 166  : Matrix Matrix::operator*(const Matrix& mat) const
; 167  : {
; 168  : 	Matrix result;
; 169  : 
; 170  : 	for(int i = 0; i < 4; i++)
; 171  : 	{
; 172  : 		for(int j = 0; j < 4; j++)
; 173  : 		{
; 174  : 			float value = 0.0f;
; 175  : 			for(int k = 0; k < 4; k++)
; 176  : 			{
; 177  : 				value += data[index(k, j)] * mat.data[index(i, k)];
; 178  : 			}
; 179  : 			result[index(i, j)] = value;
; 180  : 		}
; 181  : 	}
; 182  : 
; 183  : 	return result;
; 184  : }
; 185  : 
; 186  : Matrix Matrix::operator*(const float& scalar) const
; 187  : {
; 188  : 	Matrix result;
; 189  : 
; 190  : 	for(int i = 0; i < 16; i++)
; 191  : 	{
; 192  : 		result[i] = data[i] * scalar;
; 193  : 	}
; 194  : 
; 195  : 	return result;
; 196  : }
; 197  : 
; 198  : Vector Matrix::operator*(const Vector& vert) const
; 199  : {
; 200  : 	Vector result;
; 201  : 
; 202  : 	result.x = vert.x * data[0] + vert.y * data[1] + vert.z * data[2] + vert.w * data[3];
; 203  : 	result.y = vert.x * data[4] + vert.y * data[5] + vert.z * data[6] + vert.w * data[7];
; 204  : 	result.z = vert.x * data[8] + vert.y * data[9] + vert.z * data[10] + vert.w * data[11];
; 205  : 	result.w = vert.x * data[12] + vert.y * data[13] + vert.z * data[14] + vert.w * data[15];
; 206  : 
; 207  : 	return result;
; 208  : }
; 209  : 
; 210  : Matrix& Matrix::operator=(const Matrix& mat)
; 211  : {
; 212  : 	for(int i = 0; i < 16; i++)
; 213  : 	{
; 214  : 		data[i] = mat.data[i];
; 215  : 	}
; 216  : 
; 217  : 	return *this;
; 218  : }
; 219  : 
; 220  : Matrix Matrix::identity()
; 221  : {
; 222  : 	Matrix result;
; 223  : 	result[0] = 1.0f;

  0006e	c7 06 00 00 80
	3f		 mov	 DWORD PTR [esi], 1065353216 ; 3f800000H

; 224  : 	result[5] = 1.0f;

  00074	c7 46 14 00 00
	80 3f		 mov	 DWORD PTR [esi+20], 1065353216 ; 3f800000H

; 225  : 	result[10] = 1.0f;

  0007b	c7 46 28 00 00
	80 3f		 mov	 DWORD PTR [esi+40], 1065353216 ; 3f800000H

; 226  : 	result[15] = 1.0f;

  00082	c7 46 3c 00 00
	80 3f		 mov	 DWORD PTR [esi+60], 1065353216 ; 3f800000H
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 486  : 	while(!stack2.empty())

  00089	74 63		 je	 SHORT $LN74@unstack
  0008b	eb 03 8d 49 00	 npad	 5
$LL2@unstack:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1436 : 		return (*(end() - 1));

  00090	51		 push	 ecx
  00091	8d 45 80	 lea	 eax, DWORD PTR $T2[ebp]
  00094	50		 push	 eax
  00095	8d 45 8c	 lea	 eax, DWORD PTR $T3[ebp]
  00098	50		 push	 eax
  00099	8d 4d 98	 lea	 ecx, DWORD PTR _stack2$[ebp]
  0009c	e8 00 00 00 00	 call	 ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
  000a1	8b c8		 mov	 ecx, eax
  000a3	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
  000a8	8b d0		 mov	 edx, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  000aa	8b 02		 mov	 eax, DWORD PTR [edx]
  000ac	85 c0		 test	 eax, eax
  000ae	74 02		 je	 SHORT $LN39@unstack
$LN38@unstack:
  000b0	8b 00		 mov	 eax, DWORD PTR [eax]
$LN39@unstack:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  000b2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 1436 : 		return (*(end() - 1));

  000b5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  000b8	49		 dec	 ecx
  000b9	23 4a 08	 and	 ecx, DWORD PTR [edx+8]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 488  : 		mat = stack2.top() * mat;

  000bc	56		 push	 esi
  000bd	8d 55 ac	 lea	 edx, DWORD PTR $T4[ebp]
  000c0	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  000c3	52		 push	 edx
  000c4	e8 00 00 00 00	 call	 ??DMatrix@geom@@QBE?AV01@ABV01@@Z ; geom::Matrix::operator*
  000c9	50		 push	 eax
  000ca	8b ce		 mov	 ecx, esi
  000cc	e8 00 00 00 00	 call	 ??4Matrix@geom@@QAEAAV01@ABV01@@Z ; geom::Matrix::operator=
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1382 : 		return (this->_Mysize == 0);

  000d1	8b 4d a8	 mov	 ecx, DWORD PTR _stack2$[ebp+16]
  000d4	85 c9		 test	 ecx, ecx

; 1437 : 		}
; 1438 : 
; 1439 : 	const_reference back() const
; 1440 : 		{	// return last element of nonmutable sequence
; 1441 : 		return (*(end() - 1));
; 1442 : 		}
; 1443 : 
; 1444 : 	void push_front(const value_type& _Val)
; 1445 : 		{	// insert element at beginning
; 1446 : 		this->_Orphan_all();
; 1447 : 		_PUSH_FRONT_BEGIN;
; 1448 : 		this->_Getal().construct(
; 1449 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1450 : 		_PUSH_FRONT_END;
; 1451 : 		}
; 1452 : 
; 1453 : 	void pop_front()
; 1454 : 		{	// erase element at beginning
; 1455 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1456 : 		if (empty())
; 1457 : 			_DEBUG_ERROR("deque empty before pop");
; 1458 : 		else
; 1459 : 			{	// something to erase, do it
; 1460 : 			_Orphan_off(this->_Myoff);
; 1461 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1462 : 			this->_Getal().destroy(
; 1463 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1464 : 			if (--this->_Mysize == 0)
; 1465 : 				this->_Myoff = 0;
; 1466 : 			else
; 1467 : 				++this->_Myoff;
; 1468 : 			}
; 1469 : 
; 1470 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 		if (!empty())
; 1472 : 			{	// something to erase, do it
; 1473 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1474 : 			this->_Getal().destroy(
; 1475 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1476 : 			if (--this->_Mysize == 0)
; 1477 : 				this->_Myoff = 0;
; 1478 : 			else
; 1479 : 				++this->_Myoff;
; 1480 : 			}
; 1481 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1482 : 		}
; 1483 : 
; 1484 : 	void push_back(const value_type& _Val)
; 1485 : 		{	// insert element at end
; 1486 : 		this->_Orphan_all();
; 1487 : 		_PUSH_BACK_BEGIN;
; 1488 : 		this->_Getal().construct(
; 1489 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1490 : 		_PUSH_BACK_END;
; 1491 : 		}
; 1492 : 
; 1493 : 	void pop_back()
; 1494 : 		{	// erase element at end
; 1495 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1496 : 		if (empty())
; 1497 : 			_DEBUG_ERROR("deque empty before pop");
; 1498 : 		else
; 1499 : 			{	// something to erase, do it
; 1500 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1501 : 			_Orphan_off(_Newoff);
; 1502 : 			size_type _Block = this->_Getblock(_Newoff);
; 1503 : 			this->_Getal().destroy(
; 1504 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1505 : 			if (--this->_Mysize == 0)
; 1506 : 				this->_Myoff = 0;
; 1507 : 			}
; 1508 : 
; 1509 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1510 : 		if (!empty())

  000d6	74 16		 je	 SHORT $LN74@unstack

; 1511 : 			{	// something to erase, do it
; 1512 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1513 : 			size_type _Block = this->_Getblock(_Newoff);
; 1514 : 			this->_Getal().destroy(
; 1515 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1516 : 			if (--this->_Mysize == 0)

  000d8	8b 45 a4	 mov	 eax, DWORD PTR _stack2$[ebp+12]
  000db	49		 dec	 ecx
  000dc	ba 00 00 00 00	 mov	 edx, 0
  000e1	0f 44 c2	 cmove	 eax, edx
  000e4	89 4d a8	 mov	 DWORD PTR _stack2$[ebp+16], ecx
  000e7	89 45 a4	 mov	 DWORD PTR _stack2$[ebp+12], eax

; 1382 : 		return (this->_Mysize == 0);

  000ea	85 c9		 test	 ecx, ecx
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 486  : 	while(!stack2.empty())

  000ec	75 a2		 jne	 SHORT $LL2@unstack
$LN74@unstack:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1222 : 		_Tidy();

  000ee	8d 4d 98	 lea	 ecx, DWORD PTR _stack2$[ebp]
  000f1	e8 00 00 00 00	 call	 ?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  000f6	ff 75 98	 push	 DWORD PTR _stack2$[ebp]
  000f9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000fe	83 c4 04	 add	 esp, 4
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 492  : 	return mat;

  00101	8b c6		 mov	 eax, esi

; 493  : }

  00103	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00106	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010d	59		 pop	 ecx
  0010e	5e		 pop	 esi
  0010f	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00112	33 cd		 xor	 ecx, ebp
  00114	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?unstack@MatrixStack@gfxu@@AAE?AVMatrix@geom@@XZ$0:
  00000	8d 4d 98	 lea	 ecx, DWORD PTR _stack2$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?unstack@MatrixStack@gfxu@@AAE?AVMatrix@geom@@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?unstack@MatrixStack@gfxu@@AAE?AVMatrix@geom@@XZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?unstack@MatrixStack@gfxu@@AAE?AVMatrix@geom@@XZ ENDP	; gfxu::MatrixStack::unstack
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?clear@MatrixStack@gfxu@@QAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 64
$T2 = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
?clear@MatrixStack@gfxu@@QAEXXZ PROC			; gfxu::MatrixStack::clear, COMDAT
; _this$ = ecx

; 524  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f0	 and	 esp, -16		; fffffff0H
  00006	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 58	 mov	 DWORD PTR __$ArrayPad$[esp+92], eax
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1382 : 		return (this->_Mysize == 0);

  00017	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 525  : 	while(!stack.empty())

  0001b	74 14		 je	 SHORT $LN1@clear
  0001d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1382 : 		return (this->_Mysize == 0);

  00020	85 c0		 test	 eax, eax

; 1383 : 		}
; 1384 : 
; 1385 : 	allocator_type get_allocator() const _NOEXCEPT
; 1386 : 		{	// return allocator object for values
; 1387 : 		return (this->_Getal());
; 1388 : 		}
; 1389 : 
; 1390 : 	const_reference at(size_type _Pos) const
; 1391 : 		{	// subscript nonmutable sequence with checking
; 1392 : 		if (this->_Mysize <= _Pos)
; 1393 : 			_Xran();
; 1394 : 		return (*(begin() + _Pos));
; 1395 : 		}
; 1396 : 
; 1397 : 	reference at(size_type _Pos)
; 1398 : 		{	// subscript mutable sequence with checking
; 1399 : 		if (this->_Mysize <= _Pos)
; 1400 : 			_Xran();
; 1401 : 		return (*(begin() + _Pos));
; 1402 : 		}
; 1403 : 
; 1404 : 	const_reference operator[](size_type _Pos) const
; 1405 : 		{	// subscript nonmutable sequence
; 1406 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1407 : 		if (this->_Mysize <= _Pos)
; 1408 : 			_DEBUG_ERROR("deque subscript out of range");
; 1409 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1410 : 
; 1411 : 		return (*(begin() + _Pos));
; 1412 : 		}
; 1413 : 
; 1414 : 	reference operator[](size_type _Pos)
; 1415 : 		{	// subscript mutable sequence
; 1416 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1417 : 		if (this->_Mysize <= _Pos)
; 1418 : 			_DEBUG_ERROR("deque subscript out of range");
; 1419 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1420 : 
; 1421 : 		return (*(begin() + _Pos));
; 1422 : 		}
; 1423 : 
; 1424 : 	reference front()
; 1425 : 		{	// return first element of mutable sequence
; 1426 : 		return (*begin());
; 1427 : 		}
; 1428 : 
; 1429 : 	const_reference front() const
; 1430 : 		{	// return first element of nonmutable sequence
; 1431 : 		return (*begin());
; 1432 : 		}
; 1433 : 
; 1434 : 	reference back()
; 1435 : 		{	// return last element of mutable sequence
; 1436 : 		return (*(end() - 1));
; 1437 : 		}
; 1438 : 
; 1439 : 	const_reference back() const
; 1440 : 		{	// return last element of nonmutable sequence
; 1441 : 		return (*(end() - 1));
; 1442 : 		}
; 1443 : 
; 1444 : 	void push_front(const value_type& _Val)
; 1445 : 		{	// insert element at beginning
; 1446 : 		this->_Orphan_all();
; 1447 : 		_PUSH_FRONT_BEGIN;
; 1448 : 		this->_Getal().construct(
; 1449 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1450 : 		_PUSH_FRONT_END;
; 1451 : 		}
; 1452 : 
; 1453 : 	void pop_front()
; 1454 : 		{	// erase element at beginning
; 1455 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1456 : 		if (empty())
; 1457 : 			_DEBUG_ERROR("deque empty before pop");
; 1458 : 		else
; 1459 : 			{	// something to erase, do it
; 1460 : 			_Orphan_off(this->_Myoff);
; 1461 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1462 : 			this->_Getal().destroy(
; 1463 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1464 : 			if (--this->_Mysize == 0)
; 1465 : 				this->_Myoff = 0;
; 1466 : 			else
; 1467 : 				++this->_Myoff;
; 1468 : 			}
; 1469 : 
; 1470 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 		if (!empty())
; 1472 : 			{	// something to erase, do it
; 1473 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1474 : 			this->_Getal().destroy(
; 1475 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1476 : 			if (--this->_Mysize == 0)
; 1477 : 				this->_Myoff = 0;
; 1478 : 			else
; 1479 : 				++this->_Myoff;
; 1480 : 			}
; 1481 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1482 : 		}
; 1483 : 
; 1484 : 	void push_back(const value_type& _Val)
; 1485 : 		{	// insert element at end
; 1486 : 		this->_Orphan_all();
; 1487 : 		_PUSH_BACK_BEGIN;
; 1488 : 		this->_Getal().construct(
; 1489 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1490 : 		_PUSH_BACK_END;
; 1491 : 		}
; 1492 : 
; 1493 : 	void pop_back()
; 1494 : 		{	// erase element at end
; 1495 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1496 : 		if (empty())
; 1497 : 			_DEBUG_ERROR("deque empty before pop");
; 1498 : 		else
; 1499 : 			{	// something to erase, do it
; 1500 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1501 : 			_Orphan_off(_Newoff);
; 1502 : 			size_type _Block = this->_Getblock(_Newoff);
; 1503 : 			this->_Getal().destroy(
; 1504 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1505 : 			if (--this->_Mysize == 0)
; 1506 : 				this->_Myoff = 0;
; 1507 : 			}
; 1508 : 
; 1509 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1510 : 		if (!empty())

  00022	74 0a		 je	 SHORT $LN63@clear
$LN65@clear:

; 1511 : 			{	// something to erase, do it
; 1512 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1513 : 			size_type _Block = this->_Getblock(_Newoff);
; 1514 : 			this->_Getal().destroy(
; 1515 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1516 : 			if (--this->_Mysize == 0)

  00024	48		 dec	 eax
  00025	75 03		 jne	 SHORT $LN11@clear

; 1517 : 				this->_Myoff = 0;

  00027	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN11@clear:

; 1382 : 		return (this->_Mysize == 0);

  0002a	85 c0		 test	 eax, eax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 525  : 	while(!stack.empty())

  0002c	75 f6		 jne	 SHORT $LN65@clear
$LN63@clear:
  0002e	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN1@clear:
  00031	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 107  : 		c.push_back(_STD move(_Val));

  00034	8d 44 24 10	 lea	 eax, DWORD PTR $T2[esp+96]
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 143  : 		data[i] = 0.0f;

  00038	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR $T2[esp+96], xmm0
  0003e	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR $T2[esp+112], xmm0
  00044	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T2[esp+128], xmm0
  0004a	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T2[esp+144], xmm0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 107  : 		c.push_back(_STD move(_Val));

  00050	50		 push	 eax
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 223  : 	result[0] = 1.0f;

  00051	c7 44 24 14 00
	00 80 3f	 mov	 DWORD PTR $T2[esp+100], 1065353216 ; 3f800000H

; 224  : 	result[5] = 1.0f;

  00059	c7 44 24 28 00
	00 80 3f	 mov	 DWORD PTR $T2[esp+120], 1065353216 ; 3f800000H

; 225  : 	result[10] = 1.0f;

  00061	c7 44 24 3c 00
	00 80 3f	 mov	 DWORD PTR $T2[esp+140], 1065353216 ; 3f800000H

; 226  : 	result[15] = 1.0f;

  00069	c7 44 24 50 00
	00 80 3f	 mov	 DWORD PTR $T2[esp+160], 1065353216 ; 3f800000H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 107  : 		c.push_back(_STD move(_Val));

  00071	e8 00 00 00 00	 call	 ?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEX$$QAVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back
  00076	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 530  : 	topmost = geom::Matrix::identity();

  00079	8d 44 24 10	 lea	 eax, DWORD PTR $T1[esp+96]
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 143  : 		data[i] = 0.0f;

  0007d	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR $T1[esp+96], xmm0
  00083	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR $T1[esp+112], xmm0
  00089	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T1[esp+128], xmm0
  0008f	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T1[esp+144], xmm0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 530  : 	topmost = geom::Matrix::identity();

  00095	50		 push	 eax
  00096	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 223  : 	result[0] = 1.0f;

  00099	c7 44 24 14 00
	00 80 3f	 mov	 DWORD PTR $T1[esp+100], 1065353216 ; 3f800000H

; 224  : 	result[5] = 1.0f;

  000a1	c7 44 24 28 00
	00 80 3f	 mov	 DWORD PTR $T1[esp+120], 1065353216 ; 3f800000H

; 225  : 	result[10] = 1.0f;

  000a9	c7 44 24 3c 00
	00 80 3f	 mov	 DWORD PTR $T1[esp+140], 1065353216 ; 3f800000H

; 226  : 	result[15] = 1.0f;

  000b1	c7 44 24 50 00
	00 80 3f	 mov	 DWORD PTR $T1[esp+160], 1065353216 ; 3f800000H
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 530  : 	topmost = geom::Matrix::identity();

  000b9	e8 00 00 00 00	 call	 ??4Matrix@geom@@QAEAAV01@ABV01@@Z ; geom::Matrix::operator=

; 531  : 	changed = true;
; 532  : }

  000be	8b 4c 24 5c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+96]
  000c2	c6 46 54 01	 mov	 BYTE PTR [esi+84], 1
  000c6	5e		 pop	 esi
  000c7	33 cc		 xor	 ecx, esp
  000c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
?clear@MatrixStack@gfxu@@QAEXXZ ENDP			; gfxu::MatrixStack::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?getTopmost@MatrixStack@gfxu@@QAE?BVMatrix@geom@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?getTopmost@MatrixStack@gfxu@@QAE?BVMatrix@geom@@XZ PROC ; gfxu::MatrixStack::getTopmost, COMDAT
; _this$ = ecx

; 535  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  : 	return topmost;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 71 14	 lea	 esi, DWORD PTR [ecx+20]
  0000b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00010	8b f8		 mov	 edi, eax
  00012	f3 a5		 rep movsd
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi

; 537  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?getTopmost@MatrixStack@gfxu@@QAE?BVMatrix@geom@@XZ ENDP ; gfxu::MatrixStack::getTopmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?uploadChanges@Uniforms@gfxu@@SAXXZ
_TEXT	SEGMENT
tv365 = -140						; size = 4
$T1 = -136						; size = 64
$T2 = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
?uploadChanges@Uniforms@gfxu@@SAXXZ PROC		; gfxu::Uniforms::uploadChanges, COMDAT

; 552  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 553  : 	if(forceUpload | (MMS.changed & (ShaderProgram::current->modelview >= 0)))

  00013	0f b6 05 54 00
	00 00		 movzx	 eax, BYTE PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+84
  0001a	53		 push	 ebx
  0001b	8a 1d 00 00 00
	00		 mov	 bl, BYTE PTR ?forceUpload@Uniforms@gfxu@@0_NA ; gfxu::Uniforms::forceUpload
  00021	56		 push	 esi
  00022	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?current@ShaderProgram@gfxu@@2PAV12@A ; gfxu::ShaderProgram::current
  00028	33 c9		 xor	 ecx, ecx
  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	85 d2		 test	 edx, edx
  0002f	0f 99 c1	 setns	 cl
  00032	57		 push	 edi
  00033	23 c8		 and	 ecx, eax
  00035	0f b6 c3	 movzx	 eax, bl
  00038	0b c8		 or	 ecx, eax
  0003a	84 c9		 test	 cl, cl
  0003c	74 31		 je	 SHORT $LN6@uploadChan

; 554  : 	{
; 555  : 		glUniformMatrix4fv(ShaderProgram::current->modelview, 1, false, MMS.getTopmost().data);

  0003e	8d 45 b8	 lea	 eax, DWORD PTR $T2[ebp]
  00041	50		 push	 eax
  00042	6a 00		 push	 0
  00044	6a 01		 push	 1

; 536  : 	return topmost;

  00046	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0004b	be 14 00 00 00	 mov	 esi, OFFSET ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+20
  00050	8d 7d b8	 lea	 edi, DWORD PTR $T2[ebp]

; 554  : 	{
; 555  : 		glUniformMatrix4fv(ShaderProgram::current->modelview, 1, false, MMS.getTopmost().data);

  00053	52		 push	 edx

; 536  : 	return topmost;

  00054	f3 a5		 rep movsd

; 554  : 	{
; 555  : 		glUniformMatrix4fv(ShaderProgram::current->modelview, 1, false, MMS.getTopmost().data);

  00056	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUniformMatrix4fv

; 556  : 		MMS.changed = false;

  0005c	8a 1d 00 00 00
	00		 mov	 bl, BYTE PTR ?forceUpload@Uniforms@gfxu@@0_NA ; gfxu::Uniforms::forceUpload
  00062	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?current@ShaderProgram@gfxu@@2PAV12@A ; gfxu::ShaderProgram::current
  00068	c6 05 54 00 00
	00 00		 mov	 BYTE PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+84, 0
$LN6@uploadChan:

; 557  : 	}
; 558  : 
; 559  : 	if(forceUpload | (PMS.changed & (ShaderProgram::current->projection >= 0)))

  0006f	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00072	33 d2		 xor	 edx, edx
  00074	85 c0		 test	 eax, eax
  00076	0f 99 c2	 setns	 dl
  00079	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv365[ebp], eax
  0007f	0f b6 05 54 00
	00 00		 movzx	 eax, BYTE PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+84
  00086	23 d0		 and	 edx, eax
  00088	0f b6 c3	 movzx	 eax, bl
  0008b	0b d0		 or	 edx, eax
  0008d	84 d2		 test	 dl, dl
  0008f	74 3c		 je	 SHORT $LN5@uploadChan

; 560  : 	{
; 561  : 		glUniformMatrix4fv(ShaderProgram::current->projection, 1, false, PMS.getTopmost().data);

  00091	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00097	50		 push	 eax
  00098	6a 00		 push	 0
  0009a	6a 01		 push	 1
  0009c	ff b5 74 ff ff
	ff		 push	 DWORD PTR tv365[ebp]

; 536  : 	return topmost;

  000a2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000a7	be 14 00 00 00	 mov	 esi, OFFSET ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+20
  000ac	8d bd 78 ff ff
	ff		 lea	 edi, DWORD PTR $T1[ebp]
  000b2	f3 a5		 rep movsd

; 560  : 	{
; 561  : 		glUniformMatrix4fv(ShaderProgram::current->projection, 1, false, PMS.getTopmost().data);

  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUniformMatrix4fv

; 562  : 		PMS.changed = false;

  000ba	8a 1d 00 00 00
	00		 mov	 bl, BYTE PTR ?forceUpload@Uniforms@gfxu@@0_NA ; gfxu::Uniforms::forceUpload
  000c0	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?current@ShaderProgram@gfxu@@2PAV12@A ; gfxu::ShaderProgram::current
  000c6	c6 05 54 00 00
	00 00		 mov	 BYTE PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+84, 0
$LN5@uploadChan:

; 563  : 	}
; 564  : 
; 565  : 	if(forceUpload | (color.changed & (ShaderProgram::current->const_color >= 0)))

  000cd	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  000d0	0f b6 05 10 00
	00 00		 movzx	 eax, BYTE PTR ?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+16
  000d7	33 c9		 xor	 ecx, ecx
  000d9	85 d2		 test	 edx, edx
  000db	0f 99 c1	 setns	 cl
  000de	23 c8		 and	 ecx, eax
  000e0	0f b6 c3	 movzx	 eax, bl
  000e3	0b c8		 or	 ecx, eax
  000e5	84 c9		 test	 cl, cl
  000e7	74 4d		 je	 SHORT $LN4@uploadChan
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 10   : {

  000e9	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+12
  000f1	f3 0f 10 0d 08
	00 00 00	 movss	 xmm1, DWORD PTR ?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+8
  000f9	f3 0f 10 15 04
	00 00 00	 movss	 xmm2, DWORD PTR ?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+4
  00101	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR ?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 568  : 		glUniform4f(ShaderProgram::current->const_color, vec.x, vec.y, vec.z, vec.w);

  00109	83 ec 10	 sub	 esp, 16			; 00000010H
  0010c	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00112	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00118	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  0011e	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  00123	52		 push	 edx
  00124	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUniform4f
  0012a	8a 1d 00 00 00
	00		 mov	 bl, BYTE PTR ?forceUpload@Uniforms@gfxu@@0_NA ; gfxu::Uniforms::forceUpload
  00130	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?current@ShaderProgram@gfxu@@2PAV12@A ; gfxu::ShaderProgram::current
$LN4@uploadChan:

; 569  : 	}
; 570  : 
; 571  : 	if(forceUpload | (camPos.changed & (ShaderProgram::current->cam_pos >= 0)))

  00136	8b 56 20	 mov	 edx, DWORD PTR [esi+32]
  00139	0f b6 05 10 00
	00 00		 movzx	 eax, BYTE PTR ?camPos@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+16
  00140	33 c9		 xor	 ecx, ecx
  00142	85 d2		 test	 edx, edx
  00144	0f 99 c1	 setns	 cl
  00147	23 c8		 and	 ecx, eax
  00149	0f b6 c3	 movzx	 eax, bl
  0014c	0b c8		 or	 ecx, eax
  0014e	84 c9		 test	 cl, cl
  00150	74 4d		 je	 SHORT $LN3@uploadChan
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 10   : {

  00152	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?camPos@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+12
  0015a	f3 0f 10 0d 08
	00 00 00	 movss	 xmm1, DWORD PTR ?camPos@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+8
  00162	f3 0f 10 15 04
	00 00 00	 movss	 xmm2, DWORD PTR ?camPos@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+4
  0016a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR ?camPos@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 574  : 		glUniform4f(ShaderProgram::current->cam_pos, vec.x, vec.y, vec.z, vec.w);

  00172	83 ec 10	 sub	 esp, 16			; 00000010H
  00175	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0017b	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00181	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  00187	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  0018c	52		 push	 edx
  0018d	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUniform4f
  00193	8a 1d 00 00 00
	00		 mov	 bl, BYTE PTR ?forceUpload@Uniforms@gfxu@@0_NA ; gfxu::Uniforms::forceUpload
  00199	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?current@ShaderProgram@gfxu@@2PAV12@A ; gfxu::ShaderProgram::current
$LN3@uploadChan:

; 575  : 	}
; 576  : 
; 577  : 	if(forceUpload | (fogColor.changed & (ShaderProgram::current->fog_color >= 0)))

  0019f	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  001a2	0f b6 05 10 00
	00 00		 movzx	 eax, BYTE PTR ?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+16
  001a9	33 c9		 xor	 ecx, ecx
  001ab	85 d2		 test	 edx, edx
  001ad	0f 99 c1	 setns	 cl
  001b0	23 c8		 and	 ecx, eax
  001b2	0f b6 c3	 movzx	 eax, bl
  001b5	0b c8		 or	 ecx, eax
  001b7	84 c9		 test	 cl, cl
  001b9	74 4d		 je	 SHORT $LN2@uploadChan
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 10   : {

  001bb	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+12
  001c3	f3 0f 10 0d 08
	00 00 00	 movss	 xmm1, DWORD PTR ?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+8
  001cb	f3 0f 10 15 04
	00 00 00	 movss	 xmm2, DWORD PTR ?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+4
  001d3	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR ?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 580  : 		glUniform4f(ShaderProgram::current->fog_color, vec.x, vec.y, vec.z, vec.w);

  001db	83 ec 10	 sub	 esp, 16			; 00000010H
  001de	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  001e4	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  001ea	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  001f0	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  001f5	52		 push	 edx
  001f6	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUniform4f
  001fc	8a 1d 00 00 00
	00		 mov	 bl, BYTE PTR ?forceUpload@Uniforms@gfxu@@0_NA ; gfxu::Uniforms::forceUpload
  00202	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?current@ShaderProgram@gfxu@@2PAV12@A ; gfxu::ShaderProgram::current
$LN2@uploadChan:

; 581  : 	}
; 582  : 
; 583  : 	if(forceUpload | (fogDist.changed & (ShaderProgram::current->fog_dist >= 0)))

  00208	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  0020b	0f b6 05 04 00
	00 00		 movzx	 eax, BYTE PTR ?fogDist@Uniforms@gfxu@@2V?$Uniform@M@2@A+4
  00212	33 c9		 xor	 ecx, ecx
  00214	85 d2		 test	 edx, edx
  00216	0f 99 c1	 setns	 cl
  00219	23 c8		 and	 ecx, eax
  0021b	0f b6 c3	 movzx	 eax, bl
  0021e	0b c8		 or	 ecx, eax
  00220	84 c9		 test	 cl, cl
  00222	74 15		 je	 SHORT $LN1@uploadChan

; 584  : 	{
; 585  : 		glUniform1f(ShaderProgram::current->fog_dist, fogDist.get());

  00224	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?fogDist@Uniforms@gfxu@@2V?$Uniform@M@2@A
  0022c	51		 push	 ecx
  0022d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00232	52		 push	 edx
  00233	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewUniform1f
$LN1@uploadChan:

; 586  : 	}
; 587  : }

  00239	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023c	5f		 pop	 edi
  0023d	5e		 pop	 esi
  0023e	33 cd		 xor	 ecx, ebp
  00240	5b		 pop	 ebx
  00241	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00246	8b e5		 mov	 esp, ebp
  00248	5d		 pop	 ebp
  00249	c3		 ret	 0
?uploadChanges@Uniforms@gfxu@@SAXXZ ENDP		; gfxu::Uniforms::uploadChanges
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?setForceUpload@Uniforms@gfxu@@SAXXZ
_TEXT	SEGMENT
?setForceUpload@Uniforms@gfxu@@SAXXZ PROC		; gfxu::Uniforms::setForceUpload, COMDAT

; 597  : 	MMS.changed = PMS.changed = true;

  00000	c6 05 54 00 00
	00 01		 mov	 BYTE PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+84, 1
  00007	c6 05 54 00 00
	00 01		 mov	 BYTE PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+84, 1

; 598  : }

  0000e	c3		 ret	 0
?setForceUpload@Uniforms@gfxu@@SAXXZ ENDP		; gfxu::Uniforms::setForceUpload
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
text$yc	SEGMENT
??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ PROC	; `dynamic initializer for 'gfxu::Uniforms::MMS'', COMDAT

; 601  : MatrixStack Uniforms::MMS;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::MMS
  00005	e8 00 00 00 00	 call	 ??0MatrixStack@gfxu@@QAE@XZ ; gfxu::MatrixStack::MatrixStack
  0000a	68 00 00 00 00	 push	 OFFSET ??__F?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ ; `dynamic atexit destructor for 'gfxu::Uniforms::MMS''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ ENDP	; `dynamic initializer for 'gfxu::Uniforms::MMS''
text$yc	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??__F?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
text$yd	SEGMENT
__Alproxy$1 = -1					; size = 1
??__F?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ PROC	; `dynamic atexit destructor for 'gfxu::Uniforms::MMS'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1222 : 		_Tidy();

  00004	b9 00 00 00 00	 mov	 ecx, OFFSET ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::MMS
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy

; 886  : 
; 887  : 	void _Change_alloc(const _Alty&)
; 888  : 		{	// replace old allocator
; 889  : 		}
; 890  : 
; 891  : 	void _Swap_alloc(_Myt& _Right)
; 892  : 		{	// swap allocators
; 893  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 894  : 		}
; 895  : 
; 896  : 	void _Alloc_proxy()
; 897  : 		{	// construct proxy from _Alval
; 898  : 		typename _Alty::template rebind<_Container_proxy>::other
; 899  : 			_Alproxy;
; 900  : 		this->_Myproxy = _Alproxy.allocate(1);
; 901  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 902  : 		this->_Myproxy->_Mycont = this;
; 903  : 		}
; 904  : 
; 905  : 	void _Free_proxy()
; 906  : 		{	// destroy proxy
; 907  : 		typename _Alty::template rebind<_Container_proxy>::other
; 908  : 			_Alproxy;

  0000e	8d 4d ff	 lea	 ecx, DWORD PTR __Alproxy$1[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >

; 909  : 		this->_Orphan_all();
; 910  : 		_Alproxy.destroy(this->_Myproxy);

  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0001c	ff 35 00 00 00
	00		 push	 DWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00027	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 912  : 		this->_Myproxy = 0;

  0002a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A, 0

; 885  : 		}

  00034	e8 00 00 00 00	 call	 ??1?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QAE@XZ
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??__F?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ ENDP	; `dynamic atexit destructor for 'gfxu::Uniforms::MMS''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??1MatrixStack@gfxu@@QAE@XZ
_TEXT	SEGMENT
??1MatrixStack@gfxu@@QAE@XZ PROC			; gfxu::MatrixStack::~MatrixStack, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1222 : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00008	ff 36		 push	 DWORD PTR [esi]
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 912  : 		this->_Myproxy = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??1MatrixStack@gfxu@@QAE@XZ ENDP			; gfxu::MatrixStack::~MatrixStack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
text$yc	SEGMENT
??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ PROC	; `dynamic initializer for 'gfxu::Uniforms::PMS'', COMDAT

; 602  : MatrixStack Uniforms::PMS;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::PMS
  00005	e8 00 00 00 00	 call	 ??0MatrixStack@gfxu@@QAE@XZ ; gfxu::MatrixStack::MatrixStack
  0000a	68 00 00 00 00	 push	 OFFSET ??__F?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ ; `dynamic atexit destructor for 'gfxu::Uniforms::PMS''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ ENDP	; `dynamic initializer for 'gfxu::Uniforms::PMS''
text$yc	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??__F?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
text$yd	SEGMENT
__Alproxy$1 = -1					; size = 1
??__F?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ PROC	; `dynamic atexit destructor for 'gfxu::Uniforms::PMS'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1222 : 		_Tidy();

  00004	b9 00 00 00 00	 mov	 ecx, OFFSET ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::PMS
  00009	e8 00 00 00 00	 call	 ?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy

; 886  : 
; 887  : 	void _Change_alloc(const _Alty&)
; 888  : 		{	// replace old allocator
; 889  : 		}
; 890  : 
; 891  : 	void _Swap_alloc(_Myt& _Right)
; 892  : 		{	// swap allocators
; 893  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 894  : 		}
; 895  : 
; 896  : 	void _Alloc_proxy()
; 897  : 		{	// construct proxy from _Alval
; 898  : 		typename _Alty::template rebind<_Container_proxy>::other
; 899  : 			_Alproxy;
; 900  : 		this->_Myproxy = _Alproxy.allocate(1);
; 901  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 902  : 		this->_Myproxy->_Mycont = this;
; 903  : 		}
; 904  : 
; 905  : 	void _Free_proxy()
; 906  : 		{	// destroy proxy
; 907  : 		typename _Alty::template rebind<_Container_proxy>::other
; 908  : 			_Alproxy;

  0000e	8d 4d ff	 lea	 ecx, DWORD PTR __Alproxy$1[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >

; 909  : 		this->_Orphan_all();
; 910  : 		_Alproxy.destroy(this->_Myproxy);

  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0001c	ff 35 00 00 00
	00		 push	 DWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00027	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 912  : 		this->_Myproxy = 0;

  0002a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A, 0

; 885  : 		}

  00034	e8 00 00 00 00	 call	 ??1?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QAE@XZ
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??__F?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ ENDP	; `dynamic atexit destructor for 'gfxu::Uniforms::PMS''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
_TEXT	SEGMENT
_image$ = -72						; size = 12
$T2 = -60						; size = 4
_buffer$3 = -56						; size = 12
_this$GSCopy$1$ = -44					; size = 4
$T4 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_fileName$ = 8						; size = 24
?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; gfxu::Texture2D::init, COMDAT
; _this$ = ecx

; 650  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 d4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 651  : 	char* nFileName = new char[fileName.length() + 1];

  00037	8b 45 18	 mov	 eax, DWORD PTR _fileName$[ebp+16]
  0003a	40		 inc	 eax
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 652  : 	std::wcstombs(nFileName, fileName.c_str(), sizeof(char) * (fileName.length() + 1));

  00041	8b 4d 18	 mov	 ecx, DWORD PTR _fileName$[ebp+16]
  00044	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 524  : 			: this->_Bx._Buf);

  00047	83 7d 1c 08	 cmp	 DWORD PTR _fileName$[ebp+20], 8
  0004b	8d 55 08	 lea	 edx, DWORD PTR _fileName$[ebp]
  0004e	0f 43 55 08	 cmovae	 edx, DWORD PTR _fileName$[ebp]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 652  : 	std::wcstombs(nFileName, fileName.c_str(), sizeof(char) * (fileName.length() + 1));

  00052	41		 inc	 ecx
  00053	51		 push	 ecx
  00054	8b f8		 mov	 edi, eax
  00056	52		 push	 edx
  00057	57		 push	 edi
  00058	e8 00 00 00 00	 call	 _wcstombs
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 486  : 		_Myfirst = pointer();

  00060	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _image$[ebp], 0

; 487  : 		_Mylast = pointer();

  00067	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _image$[ebp+4], 0

; 488  : 		_Myend = pointer();

  0006e	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _image$[ebp+8], 0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 653  : 	std::vector<unsigned char> image;

  00075	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 523  : 			: _CSTD strlen(_First));

  00079	80 3f 00	 cmp	 BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  0007c	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH

; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00083	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  0008a	c6 45 d8 00	 mov	 BYTE PTR $T4[ebp], 0

; 523  : 			: _CSTD strlen(_First));

  0008e	75 04		 jne	 SHORT $LN72@init
  00090	33 c9		 xor	 ecx, ecx
  00092	eb 15		 jmp	 SHORT $LN73@init
$LN72@init:
  00094	8b cf		 mov	 ecx, edi
  00096	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00099	8d a4 24 00 00
	00 00		 npad	 7
$LL192@init:
  000a0	8a 01		 mov	 al, BYTE PTR [ecx]
  000a2	41		 inc	 ecx
  000a3	84 c0		 test	 al, al
  000a5	75 f9		 jne	 SHORT $LL192@init
  000a7	2b ca		 sub	 ecx, edx
$LN73@init:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  000a9	51		 push	 ecx
  000aa	57		 push	 edi
  000ab	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  000ae	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 486  : 		_Myfirst = pointer();

  000b3	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _buffer$3[ebp], 0

; 487  : 		_Mylast = pointer();

  000ba	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _buffer$3[ebp+4], 0

; 488  : 		_Myend = pointer();

  000c1	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _buffer$3[ebp+8], 0
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6194 :   load_file(buffer, filename);

  000c8	8d 55 d8	 lea	 edx, DWORD PTR $T4[ebp]
  000cb	8d 4d c8	 lea	 ecx, DWORD PTR _buffer$3[ebp]
  000ce	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000d2	e8 00 00 00 00	 call	 ?load_file@lodepng@@YAXAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z ; lodepng::load_file

; 6164 :   return decode(out, w, h, in.empty() ? 0 : &in[0], (unsigned)in.size(), colortype, bitdepth);

  000d7	8b 5d c8	 mov	 ebx, DWORD PTR _buffer$3[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1097 : 		return (this->_Myfirst == this->_Mylast);

  000da	8b 45 cc	 mov	 eax, DWORD PTR _buffer$3[ebp+4]
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6164 :   return decode(out, w, h, in.empty() ? 0 : &in[0], (unsigned)in.size(), colortype, bitdepth);

  000dd	33 d2		 xor	 edx, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1097 : 		return (this->_Myfirst == this->_Mylast);

  000df	3b d8		 cmp	 ebx, eax
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6164 :   return decode(out, w, h, in.empty() ? 0 : &in[0], (unsigned)in.size(), colortype, bitdepth);

  000e1	8b cb		 mov	 ecx, ebx
  000e3	0f 44 ca	 cmove	 ecx, edx
  000e6	83 ec 08	 sub	 esp, 8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  000e9	2b c3		 sub	 eax, ebx
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6164 :   return decode(out, w, h, in.empty() ? 0 : &in[0], (unsigned)in.size(), colortype, bitdepth);

  000eb	50		 push	 eax
  000ec	51		 push	 ecx
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 654  : 	if(!lodepng::decode(image, width, height, nFileName))

  000ed	8d 7e 1c	 lea	 edi, DWORD PTR [esi+28]
; File c:\users\glenn\documents\github\wind\project\wind\wind\lodepng.cpp

; 6164 :   return decode(out, w, h, in.empty() ? 0 : &in[0], (unsigned)in.size(), colortype, bitdepth);

  000f0	57		 push	 edi
  000f1	8d 56 18	 lea	 edx, DWORD PTR [esi+24]
  000f4	8d 4d b8	 lea	 ecx, DWORD PTR _image$[ebp]
  000f7	e8 00 00 00 00	 call	 ?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z ; lodepng::decode
  000fc	83 c4 14	 add	 esp, 20			; 00000014H

; 6195 :   return decode(out, w, h, buffer, colortype, bitdepth);

  000ff	89 45 c4	 mov	 DWORD PTR $T2[ebp], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1536 : 		if (this->_Myfirst != pointer())

  00102	85 db		 test	 ebx, ebx
  00104	74 0c		 je	 SHORT $LN97@init
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00106	53		 push	 ebx
  00107	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0010c	8b 45 c4	 mov	 eax, DWORD PTR $T2[ebp]
  0010f	83 c4 04	 add	 esp, 4
$LN97@init:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 654  : 	if(!lodepng::decode(image, width, height, nFileName))

  00112	85 c0		 test	 eax, eax
  00114	0f 94 c3	 sete	 bl
  00117	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0011b	83 7d ec 10	 cmp	 DWORD PTR $T4[ebp+20], 16 ; 00000010H
  0011f	72 0b		 jb	 SHORT $LN128@init
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00121	ff 75 d8	 push	 DWORD PTR $T4[ebp]
  00124	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00129	83 c4 04	 add	 esp, 4
$LN128@init:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 654  : 	if(!lodepng::decode(image, width, height, nFileName))

  0012c	84 db		 test	 bl, bl
  0012e	8b 5d b8	 mov	 ebx, DWORD PTR _image$[ebp]
  00131	74 4f		 je	 SHORT $LN1@init

; 655  : 	{
; 656  : 		data = new unsigned char[width * height * 4];

  00133	8b 07		 mov	 eax, DWORD PTR [edi]
  00135	0f af 46 18	 imul	 eax, DWORD PTR [esi+24]
  00139	c1 e0 02	 shl	 eax, 2
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00142	8b 55 d4	 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]

; 657  : 
; 658  : 		for(unsigned int i = 0; i < height; i++)

  00145	33 f6		 xor	 esi, esi
  00147	83 c4 04	 add	 esp, 4
  0014a	89 42 14	 mov	 DWORD PTR [edx+20], eax
  0014d	39 37		 cmp	 DWORD PTR [edi], esi
  0014f	76 31		 jbe	 SHORT $LN1@init
$LL3@init:

; 660  : 			memcpy(&data[i * width * 4], &image[(height - 1 - i) * width * 4], sizeof(unsigned char) * width * 4);

  00151	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00154	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  0015b	50		 push	 eax
  0015c	8b 07		 mov	 eax, DWORD PTR [edi]
  0015e	2b c6		 sub	 eax, esi
  00160	48		 dec	 eax
  00161	0f af c1	 imul	 eax, ecx
  00164	0f af ce	 imul	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1148 : 		return (*(this->_Myfirst + _Pos));

  00167	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 660  : 			memcpy(&data[i * width * 4], &image[(height - 1 - i) * width * 4], sizeof(unsigned char) * width * 4);

  0016a	50		 push	 eax
  0016b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0016e	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 _memcpy
  00177	8b 55 d4	 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]
  0017a	46		 inc	 esi
  0017b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017e	3b 37		 cmp	 esi, DWORD PTR [edi]
  00180	72 cf		 jb	 SHORT $LL3@init
$LN1@init:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1536 : 		if (this->_Myfirst != pointer())

  00182	85 db		 test	 ebx, ebx
  00184	74 09		 je	 SHORT $LN144@init
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00186	53		 push	 ebx
  00187	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0018c	83 c4 04	 add	 esp, 4
$LN144@init:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0018f	83 7d 1c 08	 cmp	 DWORD PTR _fileName$[ebp+20], 8
  00193	72 0b		 jb	 SHORT $LN177@init
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00195	ff 75 08	 push	 DWORD PTR _fileName$[ebp]
  00198	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0019d	83 c4 04	 add	 esp, 4
$LN177@init:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 663  : }

  001a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001aa	59		 pop	 ecx
  001ab	5f		 pop	 edi
  001ac	5e		 pop	 esi
  001ad	5b		 pop	 ebx
  001ae	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b1	33 cd		 xor	 ecx, ebp
  001b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b8	8b e5		 mov	 esp, ebp
  001ba	5d		 pop	 ebp
  001bb	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _fileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$1:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR _image$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
__unwindfunclet$?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$3:
  00018	8d 4d c8	 lea	 ecx, DWORD PTR _buffer$3[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
__ehhandler$?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?init@Texture2D@gfxu@@AAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; gfxu::Texture2D::init
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?upload@Texture2D@gfxu@@QAE_NXZ
_TEXT	SEGMENT
?upload@Texture2D@gfxu@@QAE_NXZ PROC			; gfxu::Texture2D::upload, COMDAT
; _this$ = ecx

; 679  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 680  : 	glGenTextures(1, &object);

  00004	57		 push	 edi
  00005	6a 01		 push	 1
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glGenTextures@8

; 681  : 	glBindTexture(GL_TEXTURE_2D, object);

  0000d	ff 37		 push	 DWORD PTR [edi]
  0000f	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glBindTexture@8

; 682  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, minFilter);

  0001a	ff 77 08	 push	 DWORD PTR [edi+8]
  0001d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__glTexParameteri@12
  00023	68 01 28 00 00	 push	 10241			; 00002801H
  00028	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0002d	ff d6		 call	 esi

; 683  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, magFilter);

  0002f	ff 77 04	 push	 DWORD PTR [edi+4]
  00032	68 00 28 00 00	 push	 10240			; 00002800H
  00037	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0003c	ff d6		 call	 esi

; 684  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, wrap);

  0003e	ff 77 0c	 push	 DWORD PTR [edi+12]
  00041	68 02 28 00 00	 push	 10242			; 00002802H
  00046	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0004b	ff d6		 call	 esi

; 685  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, wrap);

  0004d	ff 77 0c	 push	 DWORD PTR [edi+12]
  00050	68 03 28 00 00	 push	 10243			; 00002803H
  00055	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0005a	ff d6		 call	 esi

; 686  : 	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);

  0005c	ff 77 14	 push	 DWORD PTR [edi+20]
  0005f	68 01 14 00 00	 push	 5121			; 00001401H
  00064	68 08 19 00 00	 push	 6408			; 00001908H
  00069	6a 00		 push	 0
  0006b	ff 77 1c	 push	 DWORD PTR [edi+28]
  0006e	ff 77 18	 push	 DWORD PTR [edi+24]
  00071	68 08 19 00 00	 push	 6408			; 00001908H
  00076	6a 00		 push	 0
  00078	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__glTexImage2D@36

; 687  : 	if(mipmapped)

  00083	80 7f 10 00	 cmp	 BYTE PTR [edi+16], 0
  00087	74 0b		 je	 SHORT $LN4@upload

; 688  : 	{
; 689  : 		glGenerateMipmap(GL_TEXTURE_2D);

  00089	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR ___glewGenerateMipmap
$LN4@upload:

; 690  : 	}
; 691  : 
; 692  : 	uploaded = true;
; 693  : 
; 694  : 	return true;

  00094	b0 01		 mov	 al, 1
  00096	88 47 11	 mov	 BYTE PTR [edi+17], al
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi

; 695  : }

  0009b	c3		 ret	 0
?upload@Texture2D@gfxu@@QAE_NXZ ENDP			; gfxu::Texture2D::upload
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2219 : 		}
; 2220 : 
; 2221 : 	bool _Grow(size_type _Newsize,
; 2222 : 		bool _Trim = false)
; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2224 : 		if (max_size() < _Newsize)
; 2225 : 			_Xlen();	// result too long
; 2226 : 		if (this->_Myres < _Newsize)
; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow
; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
; 2231 : 		else if (_Newsize == 0)
; 2232 : 			_Eos(0);	// new size is zero, just null terminate
; 2233 : 		return (0 < _Newsize);	// return true only if more work to do
; 2234 : 		}
; 2235 : 
; 2236 : 	bool _Inside(const _Elem *_Ptr)
; 2237 : 		{	// test if _Ptr points inside string
; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)
; 2240 : 			return (false);	// don't ask
; 2241 : 		else
; 2242 : 			return (true);
; 2243 : 		}
; 2244 : 
; 2245 : 	static size_type _Pdif(const_iterator _P2,
; 2246 : 		const_iterator _P1)
; 2247 : 		{	// compute safe iterator difference
; 2248 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);
; 2249 : 		}
; 2250 : 
; 2251 : 	void _Tidy(bool _Built = false,
; 2252 : 		size_type _Newsize = 0)
; 2253 : 		{	// initialize buffer, deallocating any storage
; 2254 : 		if (!_Built)
; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)
; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;
; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2260 : 			if (0 < _Newsize)
; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);
; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00000	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH

; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00007	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  0000e	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 751  : 		}

  00011	8b c1		 mov	 eax, ecx
  00013	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 524  : 			: this->_Bx._Buf);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN5@c_str

; 1718 : 		return (this->_Myptr());

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1719 : 		}

  00008	c3		 ret	 0
$LN5@c_str:

; 1718 : 		return (this->_Myptr());

  00009	8b c1		 mov	 eax, ecx

; 1719 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length, COMDAT
; _this$ = ecx

; 1728 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1729 : 		}

  00003	c3		 ret	 0
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAE@XZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >, COMDAT
; _this$ = ecx

; 486  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 487  : 		_Mylast = pointer();

  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 488  : 		_Myend = pointer();

  0000d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 686  : 		}

  00014	8b c1		 mov	 eax, ecx
  00016	c3		 ret	 0
??0?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAE@XZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??1?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAE@XZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::~vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >, COMDAT
; _this$ = ecx

; 899  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 902  : 
; 903  : 	_Myt& operator=(const _Myt& _Right)
; 904  : 		{	// assign _Right
; 905  : 		if (this != &_Right)
; 906  : 			{	// different, assign it
; 907  :  #if _HAS_CPP0X
; 908  : 			if (this->_Getal() != _Right._Getal()
; 909  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 910  : 				{	// change allocator before copying
; 911  : 				_Tidy();
; 912  : 				this->_Change_alloc(_Right._Getal());
; 913  : 				}
; 914  :  #endif /* _HAS_CPP0X */
; 915  : 
; 916  : 			this->_Orphan_all();
; 917  : 
; 918  : 			if (_Right.empty())
; 919  : 				clear();	// new sequence empty, erase existing sequence
; 920  : 			else if (_Right.size() <= size())
; 921  : 				{	// enough elements, copy new and destroy old
; 922  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 923  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 924  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 925  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 926  : 				}
; 927  : 			else if (_Right.size() <= capacity())
; 928  : 				{	// enough room, copy and construct new
; 929  : 				pointer _Ptr = _Right._Myfirst + size();
; 930  : 				_Copy_impl(_Right._Myfirst,
; 931  : 					_Ptr, this->_Myfirst);
; 932  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 933  : 				}
; 934  : 			else
; 935  : 				{	// not enough room, allocate new array and construct new
; 936  : 				if (this->_Myfirst != pointer())
; 937  : 					{	// discard old array
; 938  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 939  : 					this->_Getal().deallocate(this->_Myfirst,
; 940  : 						this->_Myend - this->_Myfirst);
; 941  : 					}
; 942  : 				if (_Buy(_Right.size()))
; 943  : 					_TRY_BEGIN
; 944  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 945  : 						this->_Myfirst);
; 946  : 					_CATCH_ALL
; 947  : 					_Tidy();
; 948  : 					_RERAISE;
; 949  : 					_CATCH_END
; 950  : 				}
; 951  : 			}
; 952  : 		return (*this);
; 953  : 		}
; 954  : 
; 955  : 	void reserve(size_type _Count)
; 956  : 		{	// determine new minimum length of allocated storage
; 957  : 		if (capacity() < _Count)
; 958  : 			{	// something to do, check and reallocate
; 959  : 			if (max_size() < _Count)
; 960  : 				_Xlen();
; 961  : 			_Reallocate(_Count);
; 962  : 			}
; 963  : 		}
; 964  : 
; 965  : 	size_type capacity() const _NOEXCEPT
; 966  : 		{	// return current length of allocated storage
; 967  : 		return (this->_Myend - this->_Myfirst);
; 968  : 		}
; 969  : 
; 970  : 	size_type _Unused_capacity() const _NOEXCEPT
; 971  : 		{	// micro-optimization for capacity() - size()
; 972  : 		return (this->_Myend - this->_Mylast);
; 973  : 		}
; 974  : 
; 975  : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 976  : 		{	// micro-optimization for capacity() != size()
; 977  : 		return (this->_Myend != this->_Mylast);
; 978  : 		}
; 979  : 
; 980  : 	iterator begin() _NOEXCEPT
; 981  : 		{	// return iterator for beginning of mutable sequence
; 982  : 		return (iterator(this->_Myfirst, this));
; 983  : 		}
; 984  : 
; 985  : 	const_iterator begin() const _NOEXCEPT
; 986  : 		{	// return iterator for beginning of nonmutable sequence
; 987  : 		return (const_iterator(this->_Myfirst, this));
; 988  : 		}
; 989  : 
; 990  : 	iterator end() _NOEXCEPT
; 991  : 		{	// return iterator for end of mutable sequence
; 992  : 		return (iterator(this->_Mylast, this));
; 993  : 		}
; 994  : 
; 995  : 	const_iterator end() const _NOEXCEPT
; 996  : 		{	// return iterator for end of nonmutable sequence
; 997  : 		return (const_iterator(this->_Mylast, this));
; 998  : 		}
; 999  : 
; 1000 : 	iterator _Make_iter(const_iterator _Where) const
; 1001 : 		{	// make iterator from const_iterator
; 1002 : 		return (iterator(_Where._Ptr, this));
; 1003 : 		}
; 1004 : 
; 1005 : 	reverse_iterator rbegin() _NOEXCEPT
; 1006 : 		{	// return iterator for beginning of reversed mutable sequence
; 1007 : 		return (reverse_iterator(end()));
; 1008 : 		}
; 1009 : 
; 1010 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1011 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1012 : 		return (const_reverse_iterator(end()));
; 1013 : 		}
; 1014 : 
; 1015 : 	reverse_iterator rend() _NOEXCEPT
; 1016 : 		{	// return iterator for end of reversed mutable sequence
; 1017 : 		return (reverse_iterator(begin()));
; 1018 : 		}
; 1019 : 
; 1020 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1021 : 		{	// return iterator for end of reversed nonmutable sequence
; 1022 : 		return (const_reverse_iterator(begin()));
; 1023 : 		}
; 1024 : 
; 1025 :  #if _HAS_CPP0X
; 1026 : 	const_iterator cbegin() const _NOEXCEPT
; 1027 : 		{	// return iterator for beginning of nonmutable sequence
; 1028 : 		return (((const _Myt *)this)->begin());
; 1029 : 		}
; 1030 : 
; 1031 : 	const_iterator cend() const _NOEXCEPT
; 1032 : 		{	// return iterator for end of nonmutable sequence
; 1033 : 		return (((const _Myt *)this)->end());
; 1034 : 		}
; 1035 : 
; 1036 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1037 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1038 : 		return (((const _Myt *)this)->rbegin());
; 1039 : 		}
; 1040 : 
; 1041 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1042 : 		{	// return iterator for end of reversed nonmutable sequence
; 1043 : 		return (((const _Myt *)this)->rend());
; 1044 : 		}
; 1045 : 
; 1046 : 	void shrink_to_fit()
; 1047 : 		{	// reduce capacity
; 1048 : 		if (_Has_unused_capacity())
; 1049 : 			{	// worth shrinking, do it
; 1050 : 			if (empty())
; 1051 : 				_Tidy();
; 1052 : 			else
; 1053 : 				_Reallocate(size());
; 1054 : 			}
; 1055 : 		}
; 1056 :  #endif /* _HAS_CPP0X */
; 1057 : 
; 1058 : 	void resize(size_type _Newsize)
; 1059 : 		{	// determine new length, padding as needed
; 1060 : 		if (_Newsize < size())
; 1061 : 			erase(begin() + _Newsize, end());
; 1062 : 		else if (size() < _Newsize)
; 1063 : 			{	// pad as needed
; 1064 : 			_Alty _Alval(this->_Getal());
; 1065 : 			_Reserve(_Newsize - size());
; 1066 : 			_TRY_BEGIN
; 1067 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1068 : 				_Alval);
; 1069 : 			_CATCH_ALL
; 1070 : 			_Tidy();
; 1071 : 			_RERAISE;
; 1072 : 			_CATCH_END
; 1073 : 			this->_Mylast += _Newsize - size();
; 1074 : 			}
; 1075 : 		}
; 1076 : 
; 1077 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1078 : 		{	// determine new length, padding with _Val elements as needed
; 1079 : 		if (_Newsize < size())
; 1080 : 			erase(begin() + _Newsize, end());
; 1081 : 		else if (size() < _Newsize)
; 1082 : 			_Insert_n(end(), _Newsize - size(), _Val);
; 1083 : 		}
; 1084 : 
; 1085 : 	size_type size() const _NOEXCEPT
; 1086 : 		{	// return length of sequence
; 1087 : 		return (this->_Mylast - this->_Myfirst);
; 1088 : 		}
; 1089 : 
; 1090 : 	size_type max_size() const _NOEXCEPT
; 1091 : 		{	// return maximum possible length of sequence
; 1092 : 		return (this->_Getal().max_size());
; 1093 : 		}
; 1094 : 
; 1095 : 	bool empty() const _NOEXCEPT
; 1096 : 		{	// test if sequence is empty
; 1097 : 		return (this->_Myfirst == this->_Mylast);
; 1098 : 		}
; 1099 : 
; 1100 : 	_Alloc get_allocator() const _NOEXCEPT
; 1101 : 		{	// return allocator object for values
; 1102 : 		return (this->_Getal());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_reference at(size_type _Pos) const
; 1106 : 		{	// subscript nonmutable sequence with checking
; 1107 : 		if (size() <= _Pos)
; 1108 : 			_Xran();
; 1109 : 		return (*(this->_Myfirst + _Pos));
; 1110 : 		}
; 1111 : 
; 1112 : 	reference at(size_type _Pos)
; 1113 : 		{	// subscript mutable sequence with checking
; 1114 : 		if (size() <= _Pos)
; 1115 : 			_Xran();
; 1116 : 		return (*(this->_Myfirst + _Pos));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_reference operator[](size_type _Pos) const
; 1120 : 		{	// subscript nonmutable sequence
; 1121 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 : 		if (size() <= _Pos)
; 1123 : 			{	// report error
; 1124 : 			_DEBUG_ERROR("vector subscript out of range");
; 1125 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1126 : 			}
; 1127 : 
; 1128 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1129 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1130 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1131 : 
; 1132 : 		return (*(this->_Myfirst + _Pos));
; 1133 : 		}
; 1134 : 
; 1135 : 	reference operator[](size_type _Pos)
; 1136 : 		{	// subscript mutable sequence
; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));
; 1149 : 		}
; 1150 : 
; 1151 :  #if _HAS_CPP0X
; 1152 : 	pointer data() _NOEXCEPT
; 1153 : 		{	// return address of first element
; 1154 : 		return (this->_Myfirst);
; 1155 : 		}
; 1156 : 
; 1157 : 	const_pointer data() const _NOEXCEPT
; 1158 : 		{	// return address of first element
; 1159 : 		return (this->_Myfirst);
; 1160 : 		}
; 1161 :  #endif /* _HAS_CPP0X */
; 1162 : 
; 1163 : 	reference front()
; 1164 : 		{	// return first element of mutable sequence
; 1165 : 		return (*begin());
; 1166 : 		}
; 1167 : 
; 1168 : 	const_reference front() const
; 1169 : 		{	// return first element of nonmutable sequence
; 1170 : 		return (*begin());
; 1171 : 		}
; 1172 : 
; 1173 : 	reference back()
; 1174 : 		{	// return last element of mutable sequence
; 1175 : 		return (*(end() - 1));
; 1176 : 		}
; 1177 : 
; 1178 : 	const_reference back() const
; 1179 : 		{	// return last element of nonmutable sequence
; 1180 : 		return (*(end() - 1));
; 1181 : 		}
; 1182 : 
; 1183 : 	void push_back(const value_type& _Val)
; 1184 : 		{	// insert element at end
; 1185 : 		if (_Inside(_STD addressof(_Val)))
; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1188 : 			if (this->_Mylast == this->_Myend)
; 1189 : 				_Reserve(1);
; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);
; 1193 : 			++this->_Mylast;
; 1194 : 			}
; 1195 : 		else
; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)
; 1198 : 				_Reserve(1);
; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);
; 1202 : 			++this->_Mylast;
; 1203 : 			}
; 1204 : 		}
; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1489 : 		if (_Capacity < _Count)
; 1490 : 			_Capacity = _Count;
; 1491 : 		return (_Capacity);
; 1492 : 		}
; 1493 : 
; 1494 : 	bool _Inside(const value_type *_Ptr) const
; 1495 : 		{	// test if _Ptr points inside vector
; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1497 : 		}
; 1498 : 
; 1499 : 	void _Reallocate(size_type _Count)
; 1500 : 		{	// move to array of exactly _Count elements
; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1502 : 
; 1503 : 		_TRY_BEGIN
; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1507 : 		_RERAISE;
; 1508 : 		_CATCH_END
; 1509 : 
; 1510 : 		size_type _Size = size();
; 1511 : 		if (this->_Myfirst != pointer())
; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);
; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();
; 1519 : 		this->_Myend = _Ptr + _Count;
; 1520 : 		this->_Mylast = _Ptr + _Size;
; 1521 : 		this->_Myfirst = _Ptr;
; 1522 : 		}
; 1523 : 
; 1524 : 	void _Reserve(size_type _Count)
; 1525 : 		{	// ensure room for _Count new elements, grow exponentially
; 1526 : 		if (_Unused_capacity() < _Count)
; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)
; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));
; 1531 : 			}
; 1532 : 		}
; 1533 : 
; 1534 : 	void _Tidy()
; 1535 : 		{	// free all storage
; 1536 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN3@vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1542 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1543 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1544 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN3@vector:
  00026	5e		 pop	 esi

; 900  : 		_Tidy();
; 901  : 		}

  00027	c3		 ret	 0
??1?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAE@XZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::~vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXI@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::reserve, COMDAT
; _this$ = ecx

; 964  : 
; 965  : 	size_type capacity() const _NOEXCEPT
; 966  : 		{	// return current length of allocated storage
; 967  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	2b 11		 sub	 edx, DWORD PTR [ecx]
  00005	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 957  : 		if (capacity() < _Count)

  00016	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0001b	73 0a		 jae	 SHORT $LN2@reserve

; 958  : 			{	// something to do, check and reallocate
; 959  : 			if (max_size() < _Count)
; 960  : 				_Xlen();
; 961  : 			_Reallocate(_Count);

  0001d	68 00 20 00 00	 push	 8192			; 00002000H
  00022	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXI@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate
$LN2@reserve:

; 962  : 			}
; 963  : 		}

  00027	c2 04 00	 ret	 4
?reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXI@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?shrink_to_fit@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?shrink_to_fit@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::shrink_to_fit, COMDAT
; _this$ = ecx

; 1047 : 		{	// reduce capacity

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 		return (this->_Myend != this->_Mylast);

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	39 4e 08	 cmp	 DWORD PTR [esi+8], ecx

; 1048 : 		if (_Has_unused_capacity())

  00009	74 44		 je	 SHORT $LN1@shrink_to_

; 1088 : 		}
; 1089 : 
; 1090 : 	size_type max_size() const _NOEXCEPT
; 1091 : 		{	// return maximum possible length of sequence
; 1092 : 		return (this->_Getal().max_size());
; 1093 : 		}
; 1094 : 
; 1095 : 	bool empty() const _NOEXCEPT
; 1096 : 		{	// test if sequence is empty
; 1097 : 		return (this->_Myfirst == this->_Mylast);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	3b c1		 cmp	 eax, ecx

; 1049 : 			{	// worth shrinking, do it
; 1050 : 			if (empty())

  0000f	75 23		 jne	 SHORT $LN2@shrink_to_

; 1098 : 		}
; 1099 : 
; 1100 : 	_Alloc get_allocator() const _NOEXCEPT
; 1101 : 		{	// return allocator object for values
; 1102 : 		return (this->_Getal());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_reference at(size_type _Pos) const
; 1106 : 		{	// subscript nonmutable sequence with checking
; 1107 : 		if (size() <= _Pos)
; 1108 : 			_Xran();
; 1109 : 		return (*(this->_Myfirst + _Pos));
; 1110 : 		}
; 1111 : 
; 1112 : 	reference at(size_type _Pos)
; 1113 : 		{	// subscript mutable sequence with checking
; 1114 : 		if (size() <= _Pos)
; 1115 : 			_Xran();
; 1116 : 		return (*(this->_Myfirst + _Pos));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_reference operator[](size_type _Pos) const
; 1120 : 		{	// subscript nonmutable sequence
; 1121 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 : 		if (size() <= _Pos)
; 1123 : 			{	// report error
; 1124 : 			_DEBUG_ERROR("vector subscript out of range");
; 1125 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1126 : 			}
; 1127 : 
; 1128 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1129 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1130 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1131 : 
; 1132 : 		return (*(this->_Myfirst + _Pos));
; 1133 : 		}
; 1134 : 
; 1135 : 	reference operator[](size_type _Pos)
; 1136 : 		{	// subscript mutable sequence
; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));
; 1149 : 		}
; 1150 : 
; 1151 :  #if _HAS_CPP0X
; 1152 : 	pointer data() _NOEXCEPT
; 1153 : 		{	// return address of first element
; 1154 : 		return (this->_Myfirst);
; 1155 : 		}
; 1156 : 
; 1157 : 	const_pointer data() const _NOEXCEPT
; 1158 : 		{	// return address of first element
; 1159 : 		return (this->_Myfirst);
; 1160 : 		}
; 1161 :  #endif /* _HAS_CPP0X */
; 1162 : 
; 1163 : 	reference front()
; 1164 : 		{	// return first element of mutable sequence
; 1165 : 		return (*begin());
; 1166 : 		}
; 1167 : 
; 1168 : 	const_reference front() const
; 1169 : 		{	// return first element of nonmutable sequence
; 1170 : 		return (*begin());
; 1171 : 		}
; 1172 : 
; 1173 : 	reference back()
; 1174 : 		{	// return last element of mutable sequence
; 1175 : 		return (*(end() - 1));
; 1176 : 		}
; 1177 : 
; 1178 : 	const_reference back() const
; 1179 : 		{	// return last element of nonmutable sequence
; 1180 : 		return (*(end() - 1));
; 1181 : 		}
; 1182 : 
; 1183 : 	void push_back(const value_type& _Val)
; 1184 : 		{	// insert element at end
; 1185 : 		if (_Inside(_STD addressof(_Val)))
; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1188 : 			if (this->_Mylast == this->_Myend)
; 1189 : 				_Reserve(1);
; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);
; 1193 : 			++this->_Mylast;
; 1194 : 			}
; 1195 : 		else
; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)
; 1198 : 				_Reserve(1);
; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);
; 1202 : 			++this->_Mylast;
; 1203 : 			}
; 1204 : 		}
; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1489 : 		if (_Capacity < _Count)
; 1490 : 			_Capacity = _Count;
; 1491 : 		return (_Capacity);
; 1492 : 		}
; 1493 : 
; 1494 : 	bool _Inside(const value_type *_Ptr) const
; 1495 : 		{	// test if _Ptr points inside vector
; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1497 : 		}
; 1498 : 
; 1499 : 	void _Reallocate(size_type _Count)
; 1500 : 		{	// move to array of exactly _Count elements
; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1502 : 
; 1503 : 		_TRY_BEGIN
; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1507 : 		_RERAISE;
; 1508 : 		_CATCH_END
; 1509 : 
; 1510 : 		size_type _Size = size();
; 1511 : 		if (this->_Myfirst != pointer())
; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);
; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();
; 1519 : 		this->_Myend = _Ptr + _Count;
; 1520 : 		this->_Mylast = _Ptr + _Size;
; 1521 : 		this->_Myfirst = _Ptr;
; 1522 : 		}
; 1523 : 
; 1524 : 	void _Reserve(size_type _Count)
; 1525 : 		{	// ensure room for _Count new elements, grow exponentially
; 1526 : 		if (_Unused_capacity() < _Count)
; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)
; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));
; 1531 : 			}
; 1532 : 		}
; 1533 : 
; 1534 : 	void _Tidy()
; 1535 : 		{	// free all storage
; 1536 : 		if (this->_Myfirst != pointer())

  00011	85 c0		 test	 eax, eax
  00013	74 3a		 je	 SHORT $LN1@shrink_to_
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1542 : 			this->_Myfirst = pointer();

  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1543 : 			this->_Mylast = pointer();

  00024	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1544 : 			this->_Myend = pointer();

  0002b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00032	5e		 pop	 esi

; 1054 : 			}
; 1055 : 		}

  00033	c3		 ret	 0
$LN2@shrink_to_:

; 1056 :  #endif /* _HAS_CPP0X */
; 1057 : 
; 1058 : 	void resize(size_type _Newsize)
; 1059 : 		{	// determine new length, padding as needed
; 1060 : 		if (_Newsize < size())
; 1061 : 			erase(begin() + _Newsize, end());
; 1062 : 		else if (size() < _Newsize)
; 1063 : 			{	// pad as needed
; 1064 : 			_Alty _Alval(this->_Getal());
; 1065 : 			_Reserve(_Newsize - size());
; 1066 : 			_TRY_BEGIN
; 1067 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1068 : 				_Alval);
; 1069 : 			_CATCH_ALL
; 1070 : 			_Tidy();
; 1071 : 			_RERAISE;
; 1072 : 			_CATCH_END
; 1073 : 			this->_Mylast += _Newsize - size();
; 1074 : 			}
; 1075 : 		}
; 1076 : 
; 1077 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1078 : 		{	// determine new length, padding with _Val elements as needed
; 1079 : 		if (_Newsize < size())
; 1080 : 			erase(begin() + _Newsize, end());
; 1081 : 		else if (size() < _Newsize)
; 1082 : 			_Insert_n(end(), _Newsize - size(), _Val);
; 1083 : 		}
; 1084 : 
; 1085 : 	size_type size() const _NOEXCEPT
; 1086 : 		{	// return length of sequence
; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00034	2b c8		 sub	 ecx, eax
  00036	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0003b	f7 e9		 imul	 ecx
  0003d	c1 fa 02	 sar	 edx, 2
  00040	8b c2		 mov	 eax, edx
  00042	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00045	03 c2		 add	 eax, edx

; 1051 : 				_Tidy();
; 1052 : 			else
; 1053 : 				_Reallocate(size());

  00047	50		 push	 eax
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXI@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate
$LN1@shrink_to_:
  0004f	5e		 pop	 esi

; 1054 : 			}
; 1055 : 		}

  00050	c3		 ret	 0
?shrink_to_fit@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::shrink_to_fit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?size@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::size, COMDAT
; _this$ = ecx

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	2b 11		 sub	 edx, DWORD PTR [ecx]
  00005	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1088 : 		}

  00016	c3		 ret	 0
?size@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??A?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEAAVVertexUVRGBA@gfxu@@I@Z
_TEXT	SEGMENT
__Pos$dead$ = 8						; size = 4
??A?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEAAVVertexUVRGBA@gfxu@@I@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::operator[], COMDAT
; _this$ = ecx

; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1149 : 		}

  00002	c2 04 00	 ret	 4
??A?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEAAVVertexUVRGBA@gfxu@@I@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXABVVertexUVRGBA@gfxu@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXABVVertexUVRGBA@gfxu@@@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back, COMDAT
; _this$ = ecx

; 1184 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1489 : 		if (_Capacity < _Count)
; 1490 : 			_Capacity = _Count;
; 1491 : 		return (_Capacity);
; 1492 : 		}
; 1493 : 
; 1494 : 	bool _Inside(const value_type *_Ptr) const
; 1495 : 		{	// test if _Ptr points inside vector
; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00007	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	0f 83 81 00 00
	00		 jae	 $LN4@push_back
  00015	8b 06		 mov	 eax, DWORD PTR [esi]
  00017	3b c7		 cmp	 eax, edi
  00019	77 7b		 ja	 SHORT $LN4@push_back

; 1185 : 		if (_Inside(_STD addressof(_Val)))
; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  0001b	2b f8		 sub	 edi, eax
  0001d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00022	f7 ef		 imul	 edi
  00024	c1 fa 02	 sar	 edx, 2
  00027	8b fa		 mov	 edi, edx
  00029	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0002c	03 fa		 add	 edi, edx

; 1188 : 			if (this->_Mylast == this->_Myend)

  0002e	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00031	75 08		 jne	 SHORT $LN3@push_back

; 1189 : 				_Reserve(1);

  00033	51		 push	 ecx
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXI@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reserve
$LN3@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  0003b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1192 : 				this->_Myfirst[_Idx]);

  0003e	8d 14 7f	 lea	 edx, DWORD PTR [edi+edi*2]
  00041	8b 3e		 mov	 edi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00043	85 c9		 test	 ecx, ecx
  00045	0f 84 97 00 00
	00		 je	 $LN51@push_back
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  0004b	8b 04 d7	 mov	 eax, DWORD PTR [edi+edx*8]
  0004e	89 01		 mov	 DWORD PTR [ecx], eax
  00050	8b 44 d7 04	 mov	 eax, DWORD PTR [edi+edx*8+4]
  00054	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00057	8b 44 d7 08	 mov	 eax, DWORD PTR [edi+edx*8+8]
  0005b	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0005e	8b 44 d7 0c	 mov	 eax, DWORD PTR [edi+edx*8+12]
  00062	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00065	8b 44 d7 10	 mov	 eax, DWORD PTR [edi+edx*8+16]
  00069	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0006c	0f b6 44 d7 14	 movzx	 eax, BYTE PTR [edi+edx*8+20]
  00071	88 41 14	 mov	 BYTE PTR [ecx+20], al
  00074	0f b6 44 d7 15	 movzx	 eax, BYTE PTR [edi+edx*8+21]
  00079	88 41 15	 mov	 BYTE PTR [ecx+21], al
  0007c	0f b6 44 d7 16	 movzx	 eax, BYTE PTR [edi+edx*8+22]
  00081	88 41 16	 mov	 BYTE PTR [ecx+22], al
  00084	0f b6 44 d7 17	 movzx	 eax, BYTE PTR [edi+edx*8+23]
  00089	88 41 17	 mov	 BYTE PTR [ecx+23], al
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1202 : 			++this->_Mylast;

  0008c	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi

; 1203 : 			}
; 1204 : 		}

  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
$LN4@push_back:

; 1193 : 			++this->_Mylast;
; 1194 : 			}
; 1195 : 		else
; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)

  00096	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00099	75 08		 jne	 SHORT $LN1@push_back

; 1198 : 				_Reserve(1);

  0009b	51		 push	 ecx
  0009c	8b ce		 mov	 ecx, esi
  0009e	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXI@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reserve
$LN1@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  000a3	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000a6	85 c9		 test	 ecx, ecx
  000a8	74 38		 je	 SHORT $LN51@push_back
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  000aa	8b 07		 mov	 eax, DWORD PTR [edi]
  000ac	89 01		 mov	 DWORD PTR [ecx], eax
  000ae	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b1	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000b4	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000b7	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  000ba	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000bd	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  000c0	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  000c3	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  000c6	0f b6 47 14	 movzx	 eax, BYTE PTR [edi+20]
  000ca	88 41 14	 mov	 BYTE PTR [ecx+20], al
  000cd	0f b6 47 15	 movzx	 eax, BYTE PTR [edi+21]
  000d1	88 41 15	 mov	 BYTE PTR [ecx+21], al
  000d4	0f b6 47 16	 movzx	 eax, BYTE PTR [edi+22]
  000d8	88 41 16	 mov	 BYTE PTR [ecx+22], al
  000db	0f b6 47 17	 movzx	 eax, BYTE PTR [edi+23]
  000df	88 41 17	 mov	 BYTE PTR [ecx+23], al
$LN51@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1202 : 			++this->_Mylast;

  000e2	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi

; 1203 : 			}
; 1204 : 		}

  000e8	5d		 pop	 ebp
  000e9	c2 04 00	 ret	 4
?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXABVVertexUVRGBA@gfxu@@@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00000	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00002	c7 41 14 07 00
	00 00		 mov	 DWORD PTR [ecx+20], 7

; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00009	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00010	66 89 01	 mov	 WORD PTR [ecx], ax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 751  : 		}

  00013	8b c1		 mov	 eax, ecx
  00015	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 306  : 			: _CSTD wcslen(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 791  : 		{	// construct from [_Ptr, <null>)

  00007	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00009	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  0000b	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7

; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00012	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00019	66 89 06	 mov	 WORD PTR [esi], ax

; 306  : 			: _CSTD wcslen(_First));

  0001c	66 39 02	 cmp	 WORD PTR [edx], ax
  0001f	75 12		 jne	 SHORT $LN45@basic_stri
  00021	33 c9		 xor	 ecx, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00023	51		 push	 ecx
  00024	52		 push	 edx
  00025	8b ce		 mov	 ecx, esi
  00027	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
$LN45@basic_stri:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 306  : 			: _CSTD wcslen(_First));

  00033	8b ca		 mov	 ecx, edx
  00035	57		 push	 edi
  00036	8d 79 02	 lea	 edi, DWORD PTR [ecx+2]
  00039	8d a4 24 00 00
	00 00		 npad	 7
$LL47@basic_stri:
  00040	66 8b 01	 mov	 ax, WORD PTR [ecx]
  00043	83 c1 02	 add	 ecx, 2
  00046	66 85 c0	 test	 ax, ax
  00049	75 f5		 jne	 SHORT $LL47@basic_stri
  0004b	2b cf		 sub	 ecx, edi
  0004d	d1 f9		 sar	 ecx, 1
  0004f	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00050	51		 push	 ecx
  00051	52		 push	 edx
  00052	8b ce		 mov	 ecx, esi
  00054	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}

  00059	8b c6		 mov	 eax, esi
  0005b	5e		 pop	 esi
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\wchar.h
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 898  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 949  : 		if (_Right._Myres < this->_BUF_SIZE)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi

; 898  : 		{	// construct by moving _Right

  00008	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  0000a	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  0000c	c7 47 14 07 00
	00 00		 mov	 DWORD PTR [edi+20], 7

; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00013	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  0001a	66 89 07	 mov	 WORD PTR [edi], ax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 949  : 		if (_Right._Myres < this->_BUF_SIZE)

  0001d	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00021	73 15		 jae	 SHORT $LN44@basic_stri

; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);

  00023	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00026	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 336  : 			: (_Elem *)_CSTD wmemmove(_First1, _First2, _Count));

  00027	74 19		 je	 SHORT $LN43@basic_stri
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\wchar.h

; 1267 :             return (wchar_t *)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00029	03 c0		 add	 eax, eax
  0002b	50		 push	 eax
  0002c	56		 push	 esi
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 _memmove
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 952  : 		else

  00036	eb 0a		 jmp	 SHORT $LN43@basic_stri
$LN44@basic_stri:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	89 07		 mov	 DWORD PTR [edi], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 955  : 			_Right._Bx._Ptr = pointer();

  0003c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN43@basic_stri:

; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;

  00042	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00045	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 958  : 		this->_Myres = _Right._Myres;

  00048	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0004b	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  0004e	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00050	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7

; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00057	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  0005e	66 89 06	 mov	 WORD PTR [esi], ax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 901  : 		}

  00061	8b c7		 mov	 eax, edi
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 524  : 			: this->_Bx._Buf);

  00000	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00004	72 03		 jb	 SHORT $LN5@c_str

; 1718 : 		return (this->_Myptr());

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1719 : 		}

  00008	c3		 ret	 0
$LN5@c_str:

; 1718 : 		return (this->_Myptr());

  00009	8b c1		 mov	 eax, ecx

; 1719 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length, COMDAT
; _this$ = ecx

; 1728 : 		return (this->_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1729 : 		}

  00003	c3		 ret	 0
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
;	COMDAT ??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ PROC ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >, COMDAT
; _this$ = ecx

; 28   : 		{	// construct with empty container

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00003	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 79   : 		{	// construct childless container

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 778  : 		_Map = _Mapptr();

  0000b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 779  : 		_Mapsize = 0;

  00012	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 780  : 		_Myoff = 0;

  00019	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 781  : 		_Mysize = 0;

  00020	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	83 c4 04	 add	 esp, 4
  0002f	85 c0		 test	 eax, eax
  00031	74 17		 je	 SHORT $LN52@stack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 900  : 		this->_Myproxy = _Alproxy.allocate(1);

  00033	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0003b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 902  : 		this->_Myproxy->_Mycont = this;

  00042	8b 06		 mov	 eax, DWORD PTR [esi]
  00044	89 30		 mov	 DWORD PTR [eax], esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 29   : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	c3		 ret	 0
$LN52@stack:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0004a	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN54@stack:
$LN51@stack:
  0004f	cc		 int	 3
??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ ENDP ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
;	COMDAT ??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >, COMDAT
; _this$ = ecx

; 33   : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >

; 34   : 		}

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
;	COMDAT ?push@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEX$$QAVMatrix@geom@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEX$$QAVMatrix@geom@@@Z PROC ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::push, COMDAT
; _this$ = ecx

; 106  : 		{	// insert element at beginning

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 108  : 		}

  00003	5d		 pop	 ebp

; 107  : 		c.push_back(_STD move(_Val));

  00004	e9 00 00 00 00	 jmp	 ?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEX$$QAVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back
?push@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEX$$QAVMatrix@geom@@@Z ENDP ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::push
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
;	COMDAT ?empty@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QBE_NXZ PROC ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::empty, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1382 : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00005	0f 94 c0	 sete	 al
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 124  : 		}

  00008	c3		 ret	 0
?empty@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QBE_NXZ ENDP ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
;	COMDAT ?top@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEAAVMatrix@geom@@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 12
$T2 = -12						; size = 12
?top@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEAAVMatrix@geom@@XZ PROC ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::top, COMDAT
; _this$ = ecx

; 132  : 		{	// return last element of mutable stack

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1436 : 		return (*(end() - 1));

  00006	8d 45 f4	 lea	 eax, DWORD PTR $T2[ebp]
  00009	51		 push	 ecx
  0000a	50		 push	 eax
  0000b	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
  00014	8b c8		 mov	 ecx, eax
  00016	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
  0001b	8b d0		 mov	 edx, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0001d	8b 02		 mov	 eax, DWORD PTR [edx]
  0001f	85 c0		 test	 eax, eax
  00021	75 11		 jne	 SHORT $LN11@top
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00023	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 133  : 		return (c.back());

  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00029	49		 dec	 ecx
  0002a	23 4a 08	 and	 ecx, DWORD PTR [edx+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 133  : 		return (c.back());

  0002d	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 134  : 		}

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
$LN11@top:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00034	8b 00		 mov	 eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00036	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 133  : 		return (c.back());

  00039	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0003c	49		 dec	 ecx
  0003d	23 4a 08	 and	 ecx, DWORD PTR [edx+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 133  : 		return (c.back());

  00040	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 134  : 		}

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?top@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEAAVMatrix@geom@@XZ ENDP ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::top
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
;	COMDAT ?push@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEXABVMatrix@geom@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEXABVMatrix@geom@@@Z PROC ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::push, COMDAT
; _this$ = ecx

; 142  : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 144  : 		}

  00003	5d		 pop	 ebp

; 143  : 		c.push_back(_Val);

  00004	e9 00 00 00 00	 jmp	 ?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXABVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back
?push@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEXABVMatrix@geom@@@Z ENDP ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::push
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
;	COMDAT ?pop@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEXXZ PROC ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::pop, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1382 : 		return (this->_Mysize == 0);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	85 c0		 test	 eax, eax

; 1383 : 		}
; 1384 : 
; 1385 : 	allocator_type get_allocator() const _NOEXCEPT
; 1386 : 		{	// return allocator object for values
; 1387 : 		return (this->_Getal());
; 1388 : 		}
; 1389 : 
; 1390 : 	const_reference at(size_type _Pos) const
; 1391 : 		{	// subscript nonmutable sequence with checking
; 1392 : 		if (this->_Mysize <= _Pos)
; 1393 : 			_Xran();
; 1394 : 		return (*(begin() + _Pos));
; 1395 : 		}
; 1396 : 
; 1397 : 	reference at(size_type _Pos)
; 1398 : 		{	// subscript mutable sequence with checking
; 1399 : 		if (this->_Mysize <= _Pos)
; 1400 : 			_Xran();
; 1401 : 		return (*(begin() + _Pos));
; 1402 : 		}
; 1403 : 
; 1404 : 	const_reference operator[](size_type _Pos) const
; 1405 : 		{	// subscript nonmutable sequence
; 1406 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1407 : 		if (this->_Mysize <= _Pos)
; 1408 : 			_DEBUG_ERROR("deque subscript out of range");
; 1409 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1410 : 
; 1411 : 		return (*(begin() + _Pos));
; 1412 : 		}
; 1413 : 
; 1414 : 	reference operator[](size_type _Pos)
; 1415 : 		{	// subscript mutable sequence
; 1416 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1417 : 		if (this->_Mysize <= _Pos)
; 1418 : 			_DEBUG_ERROR("deque subscript out of range");
; 1419 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1420 : 
; 1421 : 		return (*(begin() + _Pos));
; 1422 : 		}
; 1423 : 
; 1424 : 	reference front()
; 1425 : 		{	// return first element of mutable sequence
; 1426 : 		return (*begin());
; 1427 : 		}
; 1428 : 
; 1429 : 	const_reference front() const
; 1430 : 		{	// return first element of nonmutable sequence
; 1431 : 		return (*begin());
; 1432 : 		}
; 1433 : 
; 1434 : 	reference back()
; 1435 : 		{	// return last element of mutable sequence
; 1436 : 		return (*(end() - 1));
; 1437 : 		}
; 1438 : 
; 1439 : 	const_reference back() const
; 1440 : 		{	// return last element of nonmutable sequence
; 1441 : 		return (*(end() - 1));
; 1442 : 		}
; 1443 : 
; 1444 : 	void push_front(const value_type& _Val)
; 1445 : 		{	// insert element at beginning
; 1446 : 		this->_Orphan_all();
; 1447 : 		_PUSH_FRONT_BEGIN;
; 1448 : 		this->_Getal().construct(
; 1449 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1450 : 		_PUSH_FRONT_END;
; 1451 : 		}
; 1452 : 
; 1453 : 	void pop_front()
; 1454 : 		{	// erase element at beginning
; 1455 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1456 : 		if (empty())
; 1457 : 			_DEBUG_ERROR("deque empty before pop");
; 1458 : 		else
; 1459 : 			{	// something to erase, do it
; 1460 : 			_Orphan_off(this->_Myoff);
; 1461 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1462 : 			this->_Getal().destroy(
; 1463 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1464 : 			if (--this->_Mysize == 0)
; 1465 : 				this->_Myoff = 0;
; 1466 : 			else
; 1467 : 				++this->_Myoff;
; 1468 : 			}
; 1469 : 
; 1470 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 		if (!empty())
; 1472 : 			{	// something to erase, do it
; 1473 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1474 : 			this->_Getal().destroy(
; 1475 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1476 : 			if (--this->_Mysize == 0)
; 1477 : 				this->_Myoff = 0;
; 1478 : 			else
; 1479 : 				++this->_Myoff;
; 1480 : 			}
; 1481 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1482 : 		}
; 1483 : 
; 1484 : 	void push_back(const value_type& _Val)
; 1485 : 		{	// insert element at end
; 1486 : 		this->_Orphan_all();
; 1487 : 		_PUSH_BACK_BEGIN;
; 1488 : 		this->_Getal().construct(
; 1489 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1490 : 		_PUSH_BACK_END;
; 1491 : 		}
; 1492 : 
; 1493 : 	void pop_back()
; 1494 : 		{	// erase element at end
; 1495 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1496 : 		if (empty())
; 1497 : 			_DEBUG_ERROR("deque empty before pop");
; 1498 : 		else
; 1499 : 			{	// something to erase, do it
; 1500 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1501 : 			_Orphan_off(_Newoff);
; 1502 : 			size_type _Block = this->_Getblock(_Newoff);
; 1503 : 			this->_Getal().destroy(
; 1504 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1505 : 			if (--this->_Mysize == 0)
; 1506 : 				this->_Myoff = 0;
; 1507 : 			}
; 1508 : 
; 1509 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1510 : 		if (!empty())

  00005	74 0d		 je	 SHORT $LN3@pop

; 1511 : 			{	// something to erase, do it
; 1512 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1513 : 			size_type _Block = this->_Getblock(_Newoff);
; 1514 : 			this->_Getal().destroy(
; 1515 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1516 : 			if (--this->_Mysize == 0)

  00007	48		 dec	 eax
  00008	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000b	75 07		 jne	 SHORT $LN3@pop

; 1517 : 				this->_Myoff = 0;

  0000d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$LN3@pop:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 149  : 		}

  00014	c3		 ret	 0
?pop@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEXXZ ENDP ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::pop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??1?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@XZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::~deque<geom::Matrix,std::allocator<geom::Matrix> >, COMDAT
; _this$ = ecx

; 1221 : 		{	// destroy the deque

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1222 : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00008	ff 36		 push	 DWORD PTR [esi]
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 912  : 		this->_Myproxy = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi

; 1223 : 		}

  00019	c3		 ret	 0
??1?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@XZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::~deque<geom::Matrix,std::allocator<geom::Matrix> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
;	COMDAT ??0?$Uniform@VVector@geom@@@gfxu@@QAE@XZ
_TEXT	SEGMENT
??0?$Uniform@VVector@geom@@@gfxu@@QAE@XZ PROC		; gfxu::Uniform<geom::Vector>::Uniform<geom::Vector>, COMDAT
; _this$ = ecx
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 16   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00014	c7 41 0c 00 00
	80 3f		 mov	 DWORD PTR [ecx+12], 1065353216 ; 3f800000H
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h

; 237  : 		{

  0001b	c6 41 10 01	 mov	 BYTE PTR [ecx+16], 1

; 238  : 
; 239  : 		}

  0001f	8b c1		 mov	 eax, ecx
  00021	c3		 ret	 0
??0?$Uniform@VVector@geom@@@gfxu@@QAE@XZ ENDP		; gfxu::Uniform<geom::Vector>::Uniform<geom::Vector>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
;	COMDAT ?get@?$Uniform@VVector@geom@@@gfxu@@QAE?AVVector@geom@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get@?$Uniform@VVector@geom@@@gfxu@@QAE?AVVector@geom@@XZ PROC ; gfxu::Uniform<geom::Vector>::get, COMDAT
; _this$ = ecx

; 246  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 10   : {

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	89 10		 mov	 DWORD PTR [eax], edx
  0000a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000d	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00010	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00013	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00016	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00019	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h

; 248  : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?get@?$Uniform@VVector@geom@@@gfxu@@QAE?AVVector@geom@@XZ ENDP ; gfxu::Uniform<geom::Vector>::get
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
;	COMDAT ??0?$Uniform@M@gfxu@@QAE@XZ
_TEXT	SEGMENT
??0?$Uniform@M@gfxu@@QAE@XZ PROC			; gfxu::Uniform<float>::Uniform<float>, COMDAT
; _this$dead$ = ecx

; 237  : 		{

  00000	c6 05 04 00 00
	00 01		 mov	 BYTE PTR ?fogDist@Uniforms@gfxu@@2V?$Uniform@M@2@A+4, 1

; 238  : 
; 239  : 		}

  00007	b8 00 00 00 00	 mov	 eax, OFFSET ?fogDist@Uniforms@gfxu@@2V?$Uniform@M@2@A ; gfxu::Uniforms::fogDist
  0000c	c3		 ret	 0
??0?$Uniform@M@gfxu@@QAE@XZ ENDP			; gfxu::Uniform<float>::Uniform<float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
;	COMDAT ?get@?$Uniform@M@gfxu@@QAEMXZ
_TEXT	SEGMENT
?get@?$Uniform@M@gfxu@@QAEMXZ PROC			; gfxu::Uniform<float>::get, COMDAT
; _this$ = ecx

; 247  : 			return val;

  00000	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]

; 248  : 		}

  00004	c3		 ret	 0
?get@?$Uniform@M@gfxu@@QAEMXZ ENDP			; gfxu::Uniform<float>::get
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??0?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::_Yarn<char>, COMDAT
; _this$ = ecx

; 3531 : 		{	// default construct

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0

; 3532 : 		}

  0000a	8b c1		 mov	 eax, ecx
  0000c	c3		 ret	 0
??0?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??1?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT
; _this$ = ecx

; 3580 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3583 : 
; 3584 : 	bool __CLR_OR_THIS_CALL empty() const
; 3585 : 		{	// test if empty string
; 3586 : 		return (_Myptr == 0);
; 3587 : 		}
; 3588 : 
; 3589 : 	const _Elem *__CLR_OR_THIS_CALL c_str() const
; 3590 : 		{	// return NTBS
; 3591 : 		return (_Myptr != 0 ? _Myptr : &_Nul);
; 3592 : 		}
; 3593 : 
; 3594 : 	bool __CLR_OR_THIS_CALL _Empty() const
; 3595 : 		{	// test if empty string
; 3596 : 		return (_Myptr == 0);
; 3597 : 		}
; 3598 : 
; 3599 : 	const _Elem *__CLR_OR_THIS_CALL _C_str() const
; 3600 : 		{	// return NTBS
; 3601 : 		return (_Myptr != 0 ? _Myptr : &_Nul);
; 3602 : 		}
; 3603 : 
; 3604 : private:
; 3605 : 	void __CLR_OR_THIS_CALL _Tidy()
; 3606 : 		{	// discard any string
; 3607 : 		if (_Myptr != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Yarn

; 3608 : 
; 3609 :  #ifdef _DEBUG
; 3610 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3611 : 
; 3612 :  #else /* _DEBUG */
; 3613 : 			_CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN6@Yarn:

; 3614 :  #endif /* _DEBUG */
; 3615 : 
; 3616 : 		_Myptr = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi

; 3581 : 		_Tidy();
; 3582 : 		}

  00019	c3		 ret	 0
??1?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?c_str@?$_Yarn@D@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$_Yarn@D@std@@QBEPBDXZ PROC			; std::_Yarn<char>::c_str, COMDAT
; _this$ = ecx

; 3591 : 		return (_Myptr != 0 ? _Myptr : &_Nul);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	75 03		 jne	 SHORT $LN4@c_str
  00006	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
$LN4@c_str:

; 3592 : 		}

  00009	c3		 ret	 0
?c_str@?$_Yarn@D@std@@QBEPBDXZ ENDP			; std::_Yarn<char>::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??0?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 3531 : 		{	// default construct

  00000	33 c0		 xor	 eax, eax
  00002	66 89 41 04	 mov	 WORD PTR [ecx+4], ax
  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 3532 : 		}

  0000c	8b c1		 mov	 eax, ecx
  0000e	c3		 ret	 0
??0?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??1?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 3580 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3583 : 
; 3584 : 	bool __CLR_OR_THIS_CALL empty() const
; 3585 : 		{	// test if empty string
; 3586 : 		return (_Myptr == 0);
; 3587 : 		}
; 3588 : 
; 3589 : 	const _Elem *__CLR_OR_THIS_CALL c_str() const
; 3590 : 		{	// return NTBS
; 3591 : 		return (_Myptr != 0 ? _Myptr : &_Nul);
; 3592 : 		}
; 3593 : 
; 3594 : 	bool __CLR_OR_THIS_CALL _Empty() const
; 3595 : 		{	// test if empty string
; 3596 : 		return (_Myptr == 0);
; 3597 : 		}
; 3598 : 
; 3599 : 	const _Elem *__CLR_OR_THIS_CALL _C_str() const
; 3600 : 		{	// return NTBS
; 3601 : 		return (_Myptr != 0 ? _Myptr : &_Nul);
; 3602 : 		}
; 3603 : 
; 3604 : private:
; 3605 : 	void __CLR_OR_THIS_CALL _Tidy()
; 3606 : 		{	// discard any string
; 3607 : 		if (_Myptr != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Yarn

; 3608 : 
; 3609 :  #ifdef _DEBUG
; 3610 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3611 : 
; 3612 :  #else /* _DEBUG */
; 3613 : 			_CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN6@Yarn:

; 3614 :  #endif /* _DEBUG */
; 3615 : 
; 3616 : 		_Myptr = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi

; 3581 : 		_Tidy();
; 3582 : 		}

  00019	c3		 ret	 0
??1?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 532  : 		_Ios_base_dtor(this);

  00000	51		 push	 ecx
  00001	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00007	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0000c	59		 pop	 ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 40   : 		}

  0000d	c3		 ret	 0
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ?_Add_vtordisp1@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Add_vtordisp1@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_ios<char,std::char_traits<char> >::_Add_vtordisp1, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Add_vtordisp1@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::_Add_vtordisp1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ?_Add_vtordisp2@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Add_vtordisp2@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_ios<char,std::char_traits<char> >::_Add_vtordisp2, COMDAT
; _this$ = ecx

; 48   : 		}

  00000	c3		 ret	 0
?_Add_vtordisp2@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::_Add_vtordisp2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 64   : 		{	// merge _State into state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 65   : 		if (_State != goodbit)
; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00003	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00006	0b 45 08	 or	 eax, DWORD PTR __State$[ebp]

; 54   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00009	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0000d	75 03		 jne	 SHORT $LN11@setstate
  0000f	83 c8 04	 or	 eax, 4
$LN11@setstate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 302  : 		_Mystate = (iostate)(_State & _Statmask);

  00012	83 e0 17	 and	 eax, 23			; 00000017H
  00015	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 303  : 		if ((_Mystate & _Except) == 0)

  00018	85 41 10	 test	 DWORD PTR [ecx+16], eax
  0001b	74 08		 je	 SHORT $LN19@setstate
  0001d	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  00020	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN19@setstate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 67   : 		}

  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT
; _this$ = ecx

; 96   : 		return (_Mystrbuf);

  00000	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]

; 97   : 		}

  00003	c3		 ret	 0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
;	COMDAT ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 71   : 		{	// destroy the object

  00000	8b 41 e8	 mov	 eax, DWORD PTR [ecx-24]
  00003	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00006	c7 44 08 e8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-24], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0000e	8b 41 e8	 mov	 eax, DWORD PTR [ecx-24]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	8d 42 e8	 lea	 eax, DWORD PTR [edx-24]
  00017	89 44 0a e4	 mov	 DWORD PTR [edx+ecx-28], eax

; 72   : 		}

  0001b	c3		 ret	 0
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
;	COMDAT ?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_istream<char,std::char_traits<char> >::_Add_vtordisp1, COMDAT
; _this$ = ecx

; 76   : 		}

  00000	c3		 ret	 0
?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Add_vtordisp1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 79   : 		{	// destroy the object

  00000	56		 push	 esi

; 80   : 		_DELETE_CRT(_Plocale);

  00001	8b 71 34	 mov	 esi, DWORD PTR [ecx+52]
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0000a	85 f6		 test	 esi, esi
  0000c	74 20		 je	 SHORT $LN5@basic_stre
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 422  : 		if (_Ptr != 0)

  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	85 c9		 test	 ecx, ecx
  00012	74 11		 je	 SHORT $LN11@basic_stre

; 423  : 			_DELETE_CRT(_Ptr->_Decref());

  00014	8b 01		 mov	 eax, DWORD PTR [ecx]
  00016	ff 50 08	 call	 DWORD PTR [eax+8]
  00019	85 c0		 test	 eax, eax
  0001b	74 08		 je	 SHORT $LN11@basic_stre
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	6a 01		 push	 1
  00021	8b c8		 mov	 ecx, eax
  00023	ff 12		 call	 DWORD PTR [edx]
$LN11@basic_stre:
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002b	83 c4 04	 add	 esp, 4
$LN5@basic_stre:
  0002e	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 81   : 		}

  0002f	c3		 ret	 0
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sgetc, COMDAT
; _this$ = ecx

; 155  : 
; 156  : 	streamsize __CLR_OR_THIS_CALL sgetn(_Elem *_Ptr,
; 157  : 		streamsize _Count)
; 158  : 		{	// get up to _Count characters into array beginning at _Ptr
; 159  : 		return (xsgetn(_Ptr, _Count));
; 160  : 		}
; 161  : 
; 162  : 	int_type __CLR_OR_THIS_CALL snextc()
; 163  : 		{	// point to next character and return it
; 164  : 		return (1 < _Gnavail()
; 165  : 			? _Traits::to_int_type(*_Gnpreinc())
; 166  : 			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
; 167  : 				? _Traits::eof() : sgetc());
; 168  : 		}
; 169  : 
; 170  : 	int_type __CLR_OR_THIS_CALL sputbackc(_Elem _Ch)
; 171  : 		{	// put back _Ch
; 172  : 		return (gptr() != 0 && eback() < gptr()
; 173  : 			&& _Traits::eq(_Ch, gptr()[-1])
; 174  : 			? _Traits::to_int_type(*_Gndec())
; 175  : 			: pbackfail(_Traits::to_int_type(_Ch)));
; 176  : 		}
; 177  : 
; 178  : 	void __CLR_OR_THIS_CALL stossc()
; 179  : 		{	// point past a character
; 180  : 		if (0 < _Gnavail())
; 181  : 			_Gninc();
; 182  : 		else
; 183  : 			uflow();
; 184  : 		}
; 185  : 
; 186  : 	int_type __CLR_OR_THIS_CALL sungetc()
; 187  : 		{	// back up one position
; 188  : 		return (gptr() != 0 && eback() < gptr()
; 189  : 			? _Traits::to_int_type(*_Gndec()) : pbackfail());
; 190  : 		}
; 191  : 
; 192  : 	int_type __CLR_OR_THIS_CALL sputc(_Elem _Ch)
; 193  : 		{	// put a character
; 194  : 		return (0 < _Pnavail()
; 195  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 196  : 			: overflow(_Traits::to_int_type(_Ch)));
; 197  : 		}
; 198  : 
; 199  : 	streamsize __CLR_OR_THIS_CALL sputn(const _Elem *_Ptr,
; 200  : 		streamsize _Count)
; 201  : 		{	// put _Count characters from array beginning at _Ptr
; 202  : 		return (xsputn(_Ptr, _Count));
; 203  : 		}
; 204  : 
; 205  : 	virtual void __CLR_OR_THIS_CALL _Lock()
; 206  : 		{	// set the thread lock (overridden by basic_filebuf)
; 207  : 		}
; 208  : 
; 209  : 	virtual void __CLR_OR_THIS_CALL _Unlock()
; 210  : 		{	// clear the thread lock (overridden by basic_filebuf)
; 211  : 		}
; 212  : 
; 213  : protected:
; 214  : 	_Elem *__CLR_OR_THIS_CALL eback() const
; 215  : 		{	// return beginning of read buffer
; 216  : 		return (*_IGfirst);
; 217  : 		}
; 218  : 
; 219  : 	_Elem *__CLR_OR_THIS_CALL gptr() const
; 220  : 		{	// return current position in read buffer
; 221  : 		return (*_IGnext);
; 222  : 		}
; 223  : 
; 224  : 	_Elem *__CLR_OR_THIS_CALL pbase() const
; 225  : 		{	// return beginning of write buffer
; 226  : 		return (*_IPfirst);
; 227  : 		}
; 228  : 
; 229  : 	_Elem *__CLR_OR_THIS_CALL pptr() const
; 230  : 		{	// return current position in write buffer
; 231  : 		return (*_IPnext);
; 232  : 		}
; 233  : 
; 234  : 	_Elem *__CLR_OR_THIS_CALL egptr() const
; 235  : 		{	// return end of read buffer
; 236  : 		return (*_IGnext + *_IGcount);
; 237  : 		}
; 238  : 
; 239  : 	void __CLR_OR_THIS_CALL gbump(int _Off)
; 240  : 		{	// alter current position in read buffer by _Off
; 241  : 		*_IGcount -= _Off;
; 242  : 		*_IGnext += _Off;
; 243  : 		}
; 244  : 
; 245  : 	void __CLR_OR_THIS_CALL setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
; 246  : 		{	// set pointers for read buffer
; 247  : 		*_IGfirst = _First;
; 248  : 		*_IGnext = _Next;
; 249  : 		*_IGcount = (int)(_Last - _Next);
; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;
; 266  : 		return ((*_IGnext)++);
; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	8b 10		 mov	 edx, DWORD PTR [eax]
  00005	85 d2		 test	 edx, edx
  00007	74 0c		 je	 SHORT $LN3@sgetc
  00009	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 152  : 		return (0 < _Gnavail()
; 153  : 			? _Traits::to_int_type(*gptr()) : underflow());

  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	7e 04		 jle	 SHORT $LN3@sgetc
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  00011	0f b6 02	 movzx	 eax, BYTE PTR [edx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 154  : 		}

  00014	c3		 ret	 0
$LN3@sgetc:

; 152  : 		return (0 < _Gnavail()
; 153  : 			? _Traits::to_int_type(*gptr()) : underflow());

  00015	8b 01		 mov	 eax, DWORD PTR [ecx]
  00017	ff 60 18	 jmp	 DWORD PTR [eax+24]
?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sgetc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 207  : 		}

  00000	c3		 ret	 0
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 211  : 		}

  00000	c3		 ret	 0
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 336  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 337  : 		}

  00003	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 341  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 342  : 		}

  00003	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc, COMDAT
; _this$ = ecx

; 346  : 		return (0);

  00000	33 c0		 xor	 eax, eax
  00002	33 d2		 xor	 edx, edx

; 347  : 		}

  00004	c3		 ret	 0
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 351  : 		return (_Traits::eof());

  00000	83 c8 ff	 or	 eax, -1

; 352  : 		}

  00003	c3		 ret	 0
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 355  : 		{	// get a character from stream, point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 357  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 50 18	 call	 DWORD PTR [eax+24]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  00008	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 357  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

  0000b	75 04		 jne	 SHORT $LN3@uflow
  0000d	0b c0		 or	 eax, eax
  0000f	5e		 pop	 esi

; 358  : 		}

  00010	c3		 ret	 0
$LN3@uflow:

; 265  : 		--*_IGcount;

  00011	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00014	ff 08		 dec	 DWORD PTR [eax]

; 266  : 		return ((*_IGnext)++);

  00016	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00019	5e		 pop	 esi
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0001f	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  00021	0f b6 02	 movzx	 eax, BYTE PTR [edx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 358  : 		}

  00024	c3		 ret	 0
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::uflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
_TEXT	SEGMENT
__Copied$2$ = -20					; size = 4
__Copied$1$ = -16					; size = 4
_this$1$ = -12						; size = 4
__Size$2$ = -8						; size = 4
__Copied$ = -8						; size = 8
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn, COMDAT
; _this$ = ecx

; 362  : 		{	// get _Count characters from stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx

; 363  : 		int_type _Meta;
; 364  : 		streamsize _Size, _Copied;
; 365  : 
; 366  : 		for (_Copied = 0; 0 < _Count; )

  0000a	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp+4]
  0000d	56		 push	 esi
  0000e	0f 57 c0	 xorps	 xmm0, xmm0
  00011	57		 push	 edi
  00012	89 4c 24 14	 mov	 DWORD PTR _this$1$[esp+32], ecx
  00016	66 0f 13 44 24
	18		 movlpd	 QWORD PTR __Copied$[esp+32], xmm0
  0001c	85 db		 test	 ebx, ebx
  0001e	0f 8c cf 00 00
	00		 jl	 $LN32@xsgetn
  00024	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00027	7f 08		 jg	 SHORT $LN31@xsgetn
  00029	85 ff		 test	 edi, edi
  0002b	0f 84 c2 00 00
	00		 je	 $LN32@xsgetn
$LN31@xsgetn:
  00031	8b 54 24 1c	 mov	 edx, DWORD PTR __Copied$[esp+36]
  00035	8b 44 24 18	 mov	 eax, DWORD PTR __Copied$[esp+32]
  00039	89 54 24 0c	 mov	 DWORD PTR __Copied$2$[esp+32], edx
  0003d	89 44 24 10	 mov	 DWORD PTR __Copied$1$[esp+32], eax
$LL7@xsgetn:

; 367  : 			if (0 < (_Size = _Gnavail()))

  00041	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  00046	8b f0		 mov	 esi, eax
  00048	8b c2		 mov	 eax, edx
  0004a	89 44 24 18	 mov	 DWORD PTR __Size$2$[esp+32], eax
  0004e	85 c0		 test	 eax, eax
  00050	7c 52		 jl	 SHORT $LN5@xsgetn
  00052	7f 04		 jg	 SHORT $LN28@xsgetn
  00054	85 f6		 test	 esi, esi
  00056	74 4c		 je	 SHORT $LN5@xsgetn
$LN28@xsgetn:

; 368  : 				{	// copy from read buffer
; 369  : 				if (_Count < _Size)

  00058	3b d8		 cmp	 ebx, eax
  0005a	7f 0c		 jg	 SHORT $LN4@xsgetn
  0005c	7c 04		 jl	 SHORT $LN29@xsgetn
  0005e	3b fe		 cmp	 edi, esi
  00060	73 06		 jae	 SHORT $LN4@xsgetn
$LN29@xsgetn:

; 370  : 					_Size = _Count;

  00062	8b f7		 mov	 esi, edi
  00064	89 5c 24 18	 mov	 DWORD PTR __Size$2$[esp+32], ebx
$LN4@xsgetn:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00068	85 f6		 test	 esi, esi
  0006a	74 15		 je	 SHORT $LN15@xsgetn
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 221  : 		return (*_IGnext);

  0006c	8b 4c 24 14	 mov	 ecx, DWORD PTR _this$1$[esp+32]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00070	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 221  : 		return (*_IGnext);

  00071	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00074	ff 30		 push	 DWORD PTR [eax]
  00076	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00079	e8 00 00 00 00	 call	 _memcpy
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@xsgetn:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 372  : 				_Ptr += _Size;

  00081	01 75 08	 add	 DWORD PTR __Ptr$[ebp], esi

; 373  : 				_Copied += _Size;

  00084	01 74 24 10	 add	 DWORD PTR __Copied$1$[esp+32], esi
  00088	8b 44 24 18	 mov	 eax, DWORD PTR __Size$2$[esp+32]

; 222  : 		}
; 223  : 
; 224  : 	_Elem *__CLR_OR_THIS_CALL pbase() const
; 225  : 		{	// return beginning of write buffer
; 226  : 		return (*_IPfirst);
; 227  : 		}
; 228  : 
; 229  : 	_Elem *__CLR_OR_THIS_CALL pptr() const
; 230  : 		{	// return current position in write buffer
; 231  : 		return (*_IPnext);
; 232  : 		}
; 233  : 
; 234  : 	_Elem *__CLR_OR_THIS_CALL egptr() const
; 235  : 		{	// return end of read buffer
; 236  : 		return (*_IGnext + *_IGcount);
; 237  : 		}
; 238  : 
; 239  : 	void __CLR_OR_THIS_CALL gbump(int _Off)
; 240  : 		{	// alter current position in read buffer by _Off
; 241  : 		*_IGcount -= _Off;

  0008c	8b 4c 24 14	 mov	 ecx, DWORD PTR _this$1$[esp+32]

; 373  : 				_Copied += _Size;

  00090	11 44 24 0c	 adc	 DWORD PTR __Copied$2$[esp+32], eax

; 374  : 				_Count -= _Size;

  00094	2b fe		 sub	 edi, esi
  00096	1b d8		 sbb	 ebx, eax

; 222  : 		}
; 223  : 
; 224  : 	_Elem *__CLR_OR_THIS_CALL pbase() const
; 225  : 		{	// return beginning of write buffer
; 226  : 		return (*_IPfirst);
; 227  : 		}
; 228  : 
; 229  : 	_Elem *__CLR_OR_THIS_CALL pptr() const
; 230  : 		{	// return current position in write buffer
; 231  : 		return (*_IPnext);
; 232  : 		}
; 233  : 
; 234  : 	_Elem *__CLR_OR_THIS_CALL egptr() const
; 235  : 		{	// return end of read buffer
; 236  : 		return (*_IGnext + *_IGcount);
; 237  : 		}
; 238  : 
; 239  : 	void __CLR_OR_THIS_CALL gbump(int _Off)
; 240  : 		{	// alter current position in read buffer by _Off
; 241  : 		*_IGcount -= _Off;

  00098	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0009b	29 30		 sub	 DWORD PTR [eax], esi

; 242  : 		*_IGnext += _Off;

  0009d	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  000a0	01 30		 add	 DWORD PTR [eax], esi

; 243  : 		}

  000a2	eb 2c		 jmp	 SHORT $LN1@xsgetn
$LN5@xsgetn:

; 377  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  000a4	8b 4c 24 14	 mov	 ecx, DWORD PTR _this$1$[esp+32]
  000a8	8b 01		 mov	 eax, DWORD PTR [ecx]
  000aa	ff 50 1c	 call	 DWORD PTR [eax+28]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  000ad	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 377  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  000b0	74 30		 je	 SHORT $LN34@xsgetn

; 378  : 				break;	// end of file, quit
; 379  : 			else
; 380  : 				{	// get a single character
; 381  : 				*_Ptr++ = _Traits::to_char_type(_Meta);

  000b2	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000b5	41		 inc	 ecx

; 382  : 				++_Copied;

  000b6	83 44 24 10 01	 add	 DWORD PTR __Copied$1$[esp+32], 1
  000bb	88 41 ff	 mov	 BYTE PTR [ecx-1], al
  000be	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx
  000c1	83 54 24 0c 00	 adc	 DWORD PTR __Copied$2$[esp+32], 0
  000c6	8b 4c 24 14	 mov	 ecx, DWORD PTR _this$1$[esp+32]

; 383  : 				--_Count;

  000ca	83 c7 ff	 add	 edi, -1
  000cd	83 d3 ff	 adc	 ebx, -1
$LN1@xsgetn:

; 363  : 		int_type _Meta;
; 364  : 		streamsize _Size, _Copied;
; 365  : 
; 366  : 		for (_Copied = 0; 0 < _Count; )

  000d0	85 db		 test	 ebx, ebx
  000d2	0f 8f 69 ff ff
	ff		 jg	 $LL7@xsgetn
  000d8	7c 08		 jl	 SHORT $LN34@xsgetn
  000da	85 ff		 test	 edi, edi
  000dc	0f 85 5f ff ff
	ff		 jne	 $LL7@xsgetn
$LN34@xsgetn:
  000e2	8b 54 24 0c	 mov	 edx, DWORD PTR __Copied$2$[esp+32]
  000e6	8b 44 24 10	 mov	 eax, DWORD PTR __Copied$1$[esp+32]

; 384  : 				}
; 385  : 
; 386  : 		return (_Copied);
; 387  : 		}

  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 0c 00	 ret	 12			; 0000000cH
$LN32@xsgetn:

; 363  : 		int_type _Meta;
; 364  : 		streamsize _Size, _Copied;
; 365  : 
; 366  : 		for (_Copied = 0; 0 < _Count; )

  000f3	8b 54 24 1c	 mov	 edx, DWORD PTR __Copied$[esp+36]
  000f7	8b 44 24 18	 mov	 eax, DWORD PTR __Copied$[esp+32]

; 384  : 				}
; 385  : 
; 386  : 		return (_Copied);
; 387  : 		}

  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c2 0c 00	 ret	 12			; 0000000cH
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
_TEXT	SEGMENT
__Copied$2$ = -20					; size = 4
__Copied$1$ = -16					; size = 4
_this$1$ = -12						; size = 4
__Size$2$ = -8						; size = 4
__Copied$ = -8						; size = 8
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn, COMDAT
; _this$ = ecx

; 391  : 		{	// put _Count characters to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	53		 push	 ebx

; 392  : 		streamsize _Size, _Copied;
; 393  : 
; 394  : 		for (_Copied = 0; 0 < _Count; )

  0000a	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp+4]
  0000d	56		 push	 esi
  0000e	0f 57 c0	 xorps	 xmm0, xmm0
  00011	57		 push	 edi
  00012	89 4c 24 14	 mov	 DWORD PTR _this$1$[esp+32], ecx
  00016	66 0f 13 44 24
	18		 movlpd	 QWORD PTR __Copied$[esp+32], xmm0
  0001c	85 db		 test	 ebx, ebx
  0001e	0f 8c d0 00 00
	00		 jl	 $LN32@xsputn
  00024	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00027	7f 08		 jg	 SHORT $LN31@xsputn
  00029	85 ff		 test	 edi, edi
  0002b	0f 84 c3 00 00
	00		 je	 $LN32@xsputn
$LN31@xsputn:
  00031	8b 54 24 1c	 mov	 edx, DWORD PTR __Copied$[esp+36]
  00035	8b 44 24 18	 mov	 eax, DWORD PTR __Copied$[esp+32]
  00039	89 54 24 0c	 mov	 DWORD PTR __Copied$2$[esp+32], edx
  0003d	89 44 24 10	 mov	 DWORD PTR __Copied$1$[esp+32], eax
$LL7@xsputn:

; 395  : 			if (0 < (_Size = _Pnavail()))

  00041	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
  00046	8b f0		 mov	 esi, eax
  00048	8b c2		 mov	 eax, edx
  0004a	89 44 24 18	 mov	 DWORD PTR __Size$2$[esp+32], eax
  0004e	85 c0		 test	 eax, eax
  00050	7c 52		 jl	 SHORT $LN5@xsputn
  00052	7f 04		 jg	 SHORT $LN28@xsputn
  00054	85 f6		 test	 esi, esi
  00056	74 4c		 je	 SHORT $LN5@xsputn
$LN28@xsputn:

; 396  : 				{	// copy to write buffer
; 397  : 				if (_Count < _Size)

  00058	3b d8		 cmp	 ebx, eax
  0005a	7f 0c		 jg	 SHORT $LN4@xsputn
  0005c	7c 04		 jl	 SHORT $LN29@xsputn
  0005e	3b fe		 cmp	 edi, esi
  00060	73 06		 jae	 SHORT $LN4@xsputn
$LN29@xsputn:

; 398  : 					_Size = _Count;

  00062	8b f7		 mov	 esi, edi
  00064	89 5c 24 18	 mov	 DWORD PTR __Size$2$[esp+32], ebx
$LN4@xsputn:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00068	85 f6		 test	 esi, esi
  0006a	74 15		 je	 SHORT $LN15@xsputn
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 231  : 		return (*_IPnext);

  0006c	8b 4c 24 14	 mov	 ecx, DWORD PTR _this$1$[esp+32]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00070	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 231  : 		return (*_IPnext);

  00071	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00074	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00077	ff 30		 push	 DWORD PTR [eax]
  00079	e8 00 00 00 00	 call	 _memcpy
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@xsputn:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 400  : 				_Ptr += _Size;

  00081	01 75 08	 add	 DWORD PTR __Ptr$[ebp], esi

; 401  : 				_Copied += _Size;

  00084	01 74 24 10	 add	 DWORD PTR __Copied$1$[esp+32], esi
  00088	8b 44 24 18	 mov	 eax, DWORD PTR __Size$2$[esp+32]

; 232  : 		}
; 233  : 
; 234  : 	_Elem *__CLR_OR_THIS_CALL egptr() const
; 235  : 		{	// return end of read buffer
; 236  : 		return (*_IGnext + *_IGcount);
; 237  : 		}
; 238  : 
; 239  : 	void __CLR_OR_THIS_CALL gbump(int _Off)
; 240  : 		{	// alter current position in read buffer by _Off
; 241  : 		*_IGcount -= _Off;
; 242  : 		*_IGnext += _Off;
; 243  : 		}
; 244  : 
; 245  : 	void __CLR_OR_THIS_CALL setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
; 246  : 		{	// set pointers for read buffer
; 247  : 		*_IGfirst = _First;
; 248  : 		*_IGnext = _Next;
; 249  : 		*_IGcount = (int)(_Last - _Next);
; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;
; 266  : 		return ((*_IGnext)++);
; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);
; 278  : 		}
; 279  : 
; 280  : 	void __CLR_OR_THIS_CALL pbump(int _Off)
; 281  : 		{	// alter current position in write buffer by _Off
; 282  : 		*_IPcount -= _Off;

  0008c	8b 4c 24 14	 mov	 ecx, DWORD PTR _this$1$[esp+32]

; 401  : 				_Copied += _Size;

  00090	11 44 24 0c	 adc	 DWORD PTR __Copied$2$[esp+32], eax

; 402  : 				_Count -= _Size;

  00094	2b fe		 sub	 edi, esi
  00096	1b d8		 sbb	 ebx, eax

; 232  : 		}
; 233  : 
; 234  : 	_Elem *__CLR_OR_THIS_CALL egptr() const
; 235  : 		{	// return end of read buffer
; 236  : 		return (*_IGnext + *_IGcount);
; 237  : 		}
; 238  : 
; 239  : 	void __CLR_OR_THIS_CALL gbump(int _Off)
; 240  : 		{	// alter current position in read buffer by _Off
; 241  : 		*_IGcount -= _Off;
; 242  : 		*_IGnext += _Off;
; 243  : 		}
; 244  : 
; 245  : 	void __CLR_OR_THIS_CALL setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
; 246  : 		{	// set pointers for read buffer
; 247  : 		*_IGfirst = _First;
; 248  : 		*_IGnext = _Next;
; 249  : 		*_IGcount = (int)(_Last - _Next);
; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;
; 266  : 		return ((*_IGnext)++);
; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);
; 278  : 		}
; 279  : 
; 280  : 	void __CLR_OR_THIS_CALL pbump(int _Off)
; 281  : 		{	// alter current position in write buffer by _Off
; 282  : 		*_IPcount -= _Off;

  00098	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0009b	29 30		 sub	 DWORD PTR [eax], esi

; 283  : 		*_IPnext += _Off;

  0009d	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  000a0	01 30		 add	 DWORD PTR [eax], esi

; 403  : 				pbump((int)_Size);
; 404  : 				}
; 405  : 			else if (_Traits::eq_int_type(_Traits::eof(),

  000a2	eb 2d		 jmp	 SHORT $LN1@xsputn
$LN5@xsputn:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  000a4	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 406  : 				overflow(_Traits::to_int_type(*_Ptr))))

  000a7	8b 4c 24 14	 mov	 ecx, DWORD PTR _this$1$[esp+32]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  000ab	0f b6 06	 movzx	 eax, BYTE PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 406  : 				overflow(_Traits::to_int_type(*_Ptr))))

  000ae	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b0	50		 push	 eax
  000b1	ff 52 0c	 call	 DWORD PTR [edx+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  000b4	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 406  : 				overflow(_Traits::to_int_type(*_Ptr))))

  000b7	74 2a		 je	 SHORT $LN34@xsputn

; 407  : 				break;	// single character put failed, quit
; 408  : 			else
; 409  : 				{	// count character successfully put
; 410  : 				++_Ptr;

  000b9	8b 4c 24 14	 mov	 ecx, DWORD PTR _this$1$[esp+32]
  000bd	46		 inc	 esi

; 411  : 				++_Copied;

  000be	83 44 24 10 01	 add	 DWORD PTR __Copied$1$[esp+32], 1
  000c3	89 75 08	 mov	 DWORD PTR __Ptr$[ebp], esi
  000c6	83 54 24 0c 00	 adc	 DWORD PTR __Copied$2$[esp+32], 0

; 412  : 				--_Count;

  000cb	83 c7 ff	 add	 edi, -1
  000ce	83 d3 ff	 adc	 ebx, -1
$LN1@xsputn:

; 392  : 		streamsize _Size, _Copied;
; 393  : 
; 394  : 		for (_Copied = 0; 0 < _Count; )

  000d1	85 db		 test	 ebx, ebx
  000d3	0f 8f 68 ff ff
	ff		 jg	 $LL7@xsputn
  000d9	7c 08		 jl	 SHORT $LN34@xsputn
  000db	85 ff		 test	 edi, edi
  000dd	0f 85 5e ff ff
	ff		 jne	 $LL7@xsputn
$LN34@xsputn:
  000e3	8b 54 24 0c	 mov	 edx, DWORD PTR __Copied$2$[esp+32]
  000e7	8b 44 24 10	 mov	 eax, DWORD PTR __Copied$1$[esp+32]

; 413  : 				}
; 414  : 
; 415  : 		return (_Copied);
; 416  : 		}

  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c2 0c 00	 ret	 12			; 0000000cH
$LN32@xsputn:

; 392  : 		streamsize _Size, _Copied;
; 393  : 
; 394  : 		for (_Copied = 0; 0 < _Count; )

  000f4	8b 54 24 1c	 mov	 edx, DWORD PTR __Copied$[esp+36]
  000f8	8b 44 24 18	 mov	 eax, DWORD PTR __Copied$[esp+32]

; 413  : 				}
; 414  : 
; 415  : 		return (_Copied);
; 416  : 		}

  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 0c 00	 ret	 12			; 0000000cH
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 8
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 421  : 		{	// change position by offset, according to way and mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 43   : 		{	// construct with stream offset

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3_JB
  0000c	89 08		 mov	 DWORD PTR [eax], ecx
  0000e	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3_JB+4
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00017	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0001e	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00025	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 423  : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 427  : 		{	// change to specified position, according to mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 43   : 		{	// construct with stream offset

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3_JB
  0000c	89 08		 mov	 DWORD PTR [eax], ecx
  0000e	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3_JB+4
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00017	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0001e	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00025	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 429  : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 433  : 		return (this);

  00000	8b c1		 mov	 eax, ecx

; 434  : 		}

  00002	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 438  : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 439  : 		}

  00002	c3		 ret	 0
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 443  : 		}

  00000	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Str$ = 8						; size = 4
__Mode$dead$ = 12					; size = 4
__Prot$dead$ = 16					; size = 4
_$initVBases$dead$ = 20					; size = 4
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 773  : 		{	// construct with wide-named file -- EXTENSION

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx
  00029	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  0002c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00033	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 187  : 	__CLR_OR_THIS_CALL basic_ios()

  00039	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 773  : 		{	// construct with wide-named file -- EXTENSION

  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 35   : 		{	// construct from stream buffer pointer

  00047	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 773  : 		{	// construct with wide-named file -- EXTENSION

  00049	8d 7e 10	 lea	 edi, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 35   : 		{	// construct from stream buffer pointer

  0004c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004f	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00056	c7 04 06 00 00
	00 00		 mov	 DWORD PTR [esi+eax], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0005d	8b 06		 mov	 eax, DWORD PTR [esi]
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 36   : 		_Myios::init(_Strbuf, _Isstd);

  00062	51		 push	 ecx
  00063	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  00066	89 44 31 fc	 mov	 DWORD PTR [ecx+esi-4], eax
  0006a	8b 06		 mov	 eax, DWORD PTR [esi]
  0006c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00073	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0007a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007d	57		 push	 edi
  0007e	03 ce		 add	 ecx, esi
  00080	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 773  : 		{	// construct with wide-named file -- EXTENSION

  00085	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0008c	8b 06		 mov	 eax, DWORD PTR [esi]
  0008e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00091	c7 04 06 00 00
	00 00		 mov	 DWORD PTR [esi+eax], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  00098	8b 06		 mov	 eax, DWORD PTR [esi]
  0009a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009d	8d 41 90	 lea	 eax, DWORD PTR [ecx-112]
  000a0	89 44 31 fc	 mov	 DWORD PTR [ecx+esi-4], eax

; 146  : 		{	// construct from pointer to C stream

  000a4	8b cf		 mov	 ecx, edi
  000a6	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 313  : 		_IGfirst = &_Gfirst;

  000ab	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000ae	89 47 0c	 mov	 DWORD PTR [edi+12], eax

; 315  : 		_IGnext = &_Gnext;

  000b1	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  000b4	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 316  : 		_IPnext = &_Pnext;

  000b7	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  000ba	89 47 20	 mov	 DWORD PTR [edi+32], eax

; 317  : 		_IGcount = &_Gcount;

  000bd	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  000c0	89 47 2c	 mov	 DWORD PTR [edi+44], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 146  : 		{	// construct from pointer to C stream

  000c3	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@

; 147  : 		_Init(_File, _Newfl);
; 148  : 		}
; 149  : 
; 150  : 	virtual __CLR_OR_THIS_CALL ~basic_filebuf() _NOEXCEPT
; 151  : 		{	// destroy the object
; 152  : 		if (_Myfile != 0)
; 153  : 			_Reset_back();	// revert from _Mychar buffer
; 154  : 		if (_Closef)
; 155  : 			close();
; 156  : 		}
; 157  : 
; 158  : 	typedef typename _Traits::int_type int_type;
; 159  : 	typedef typename _Traits::pos_type pos_type;
; 160  : 	typedef typename _Traits::off_type off_type;
; 161  : 
; 162  : 	basic_filebuf(_Uninitialized)
; 163  : 		: _Mysb(_Noinit)
; 164  : 		{	// construct uninitialized
; 165  : 		}
; 166  : 
; 167  : 	basic_filebuf(_Myt&& _Right)
; 168  : 		{	// construct by copying _Right
; 169  : 		_Init(_Right._Myfile, _Newfl);	// match buffering styles
; 170  : 		_Init((_Filet *)0, _Closefl);	// then make *this look closed
; 171  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 172  : 		}
; 173  : 
; 174  : 	_Myt& operator=(_Myt&& _Right)
; 175  : 		{	// assign from _Right
; 176  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 177  : 		return (*this);
; 178  : 		}
; 179  : 
; 180  : 	void _Assign_rv(_Myt&& _Right)
; 181  : 		{	// assign by moving _Right
; 182  : 		if (this != &_Right)
; 183  : 			{	// different, worth moving
; 184  : 			close();
; 185  : 			this->swap(_Right);
; 186  : 			}
; 187  : 		}
; 188  : 
; 189  : 	void swap(_Myt& _Right)
; 190  : 		{	// swap with _Right
; 191  : 		if (this != &_Right)
; 192  : 			{	// different, worth swapping
; 193  : 			// save values altered by _Init
; 194  : 			_Filet *_Myfile_sav = _Myfile;
; 195  : 			const _Cvt *_Pcvt_sav = _Pcvt;
; 196  : 			typename _Traits::state_type _State_sav = _State;
; 197  : 			bool _Wrotesome_sav = _Wrotesome;
; 198  : 			bool _Closef_sav = _Closef;
; 199  : 			bool _Set_eback_sav = _Mysb::eback() == &_Mychar;
; 200  : 			bool _Set_eback_live = _Mysb::gptr() == &_Mychar;
; 201  : 
; 202  : 			_Elem *_Pfirst = _Mysb::pbase();
; 203  : 			_Elem *_Pnext = _Mysb::pptr();
; 204  : 			_Elem *_Pend = _Mysb::epptr();
; 205  : 			_Elem *_Gfirst = _Mysb::eback();
; 206  : 			_Elem *_Gnext = _Mysb::gptr();
; 207  : 			_Elem *_Gend = _Mysb::egptr();
; 208  : 
; 209  : 			// reinitialize *this
; 210  : 			_Init(_Right._Myfile, _Right._Myfile != 0 ? _Openfl : _Newfl);
; 211  : 			_Mysb::setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
; 212  : 			if (_Right.eback() != &_Right._Mychar)
; 213  : 				_Mysb::setg(_Right.eback(), _Right.gptr(), _Right.egptr());
; 214  : 			else if (_Right.gptr() != &_Right._Mychar)
; 215  : 				_Mysb::setg(&_Mychar, &_Mychar + 1, &_Mychar + 1);
; 216  : 			else
; 217  : 				_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);
; 218  : 
; 219  : 			_Pcvt = _Right._Pcvt;
; 220  : 			_State = _Right._State;
; 221  : 			_Wrotesome = _Right._Wrotesome;
; 222  : 			_Closef = _Right._Closef;
; 223  : 
; 224  : 			// reinitialize _Right
; 225  : 			_Right._Init(_Myfile_sav, _Myfile_sav != 0 ? _Openfl : _Newfl);
; 226  : 			_Right.setp(_Pfirst, _Pnext, _Pend);
; 227  : 			if (!_Set_eback_sav)
; 228  : 				_Right.setg(_Gfirst, _Gnext, _Gend);
; 229  : 			else if (!_Set_eback_live)
; 230  : 				_Right.setg(&_Right._Mychar, &_Right._Mychar + 1,
; 231  : 					&_Right._Mychar + 1);
; 232  : 			else
; 233  : 				_Right.setg(&_Right._Mychar, &_Right._Mychar,
; 234  : 					&_Right._Mychar + 1);
; 235  : 
; 236  : 			_Right._Pcvt = _Pcvt_sav;
; 237  : 			_Right._State = _State_sav;
; 238  : 			_Right._Wrotesome = _Wrotesome_sav;
; 239  : 			_Right._Closef = _Closef_sav;
; 240  : 
; 241  : 			// swap ancillary data
; 242  : 			_STD swap(_Set_eback, _Right._Set_eback);
; 243  : 			_STD swap(_Set_egptr, _Right._Set_egptr);
; 244  : 			_STD swap(_Mychar, _Right._Mychar);
; 245  : 			_STD swap(_Mysb::_Plocale, _Right._Plocale);
; 246  : 			}
; 247  : 		}
; 248  : 
; 249  : private:
; 250  : 		basic_filebuf(const _Myt& _Right);	// not defined
; 251  : 		_Myt& operator=(const _Myt&);	// not defined
; 252  : public:
; 253  : 	enum _Initfl
; 254  : 		{	// reasons for a call to _Init
; 255  : 		_Newfl, _Openfl, _Closefl};
; 256  : 
; 257  : 	bool is_open() const
; 258  : 		{	// test if C stream has been opened
; 259  : 		return (_Myfile != 0);
; 260  : 		}
; 261  : 
; 262  : 	_Myt *open(const char *_Filename,
; 263  : 		ios_base::openmode _Mode,
; 264  : 		int _Prot = (int)ios_base::_Openprot)
; 265  : 		{	// open a C stream with specified mode
; 266  : 		_Filet *_File;
; 267  : 		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
; 268  : 			return (0);	// open failed
; 269  : 
; 270  : 		_Init(_File, _Openfl);
; 271  : 		_Initcvt(&_USE(_Mysb::getloc(), _Cvt));
; 272  : 		return (this);	// open succeeded
; 273  : 		}
; 274  : 
; 275  :  #if _HAS_CPP0X
; 276  : 	_Myt *open(const string& _Str,
; 277  : 		ios_base::openmode _Mode,
; 278  : 		int _Prot = (int)ios_base::_Openprot)
; 279  : 		{	// open a C stream with specified mode
; 280  : 		return (open(_Str.c_str(), _Mode, _Prot));
; 281  : 		}
; 282  :  #endif /* _HAS_CPP0X */
; 283  : 
; 284  : 	_Myt *open(const char *_Filename, ios_base::open_mode _Mode)
; 285  : 		{	// open a C stream with specified mode (old style)
; 286  : 		return (open(_Filename, (ios_base::openmode)_Mode));
; 287  : 		}
; 288  : 
; 289  : 	_Myt *open(const wchar_t *_Filename,
; 290  : 		ios_base::openmode _Mode,
; 291  : 		int _Prot = (int)ios_base::_Openprot)
; 292  : 		{	// open a wide-named C stream -- EXTENSION
; 293  : 		_Filet *_File;
; 294  : 		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
; 295  : 			return (0);	// open failed
; 296  : 
; 297  : 		_Init(_File, _Openfl);
; 298  : 		_Initcvt(&_USE(_Mysb::getloc(), _Cvt));
; 299  : 		return (this);	// open succeeded
; 300  : 		}
; 301  : 
; 302  :  #if _HAS_CPP0X
; 303  : 	_Myt *open(const wstring& _Str,
; 304  : 		ios_base::openmode _Mode,
; 305  : 		int _Prot = (int)ios_base::_Openprot)
; 306  : 		{	// open a wide-named C stream -- EXTENSION
; 307  : 		return (open(_Str.c_str(), _Mode, _Prot));
; 308  : 		}
; 309  :  #endif /* _HAS_CPP0X */
; 310  : 
; 311  : 	_Myt *open(const wchar_t *_Filename,
; 312  : 		ios_base::open_mode _Mode)
; 313  : 		{	// open a wide-named C stream (old style) -- EXTENSION
; 314  : 		return (open(_Filename, (ios_base::openmode)_Mode));
; 315  : 		}
; 316  : 
; 317  :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 318  : 	_Myt *open(const unsigned short *_Filename,
; 319  : 		ios_base::openmode _Mode,
; 320  : 		int _Prot = (int)ios_base::_Openprot)
; 321  : 		{	// open a wide-named C stream -- EXTENSION
; 322  : 		_Filet *_File;
; 323  : 		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
; 324  : 			return (0);	// open failed
; 325  : 
; 326  : 		_Init(_File, _Openfl);
; 327  : 		_Initcvt(&_USE(_Mysb::getloc(), _Cvt));
; 328  : 		return (this);	// open succeeded
; 329  : 		}
; 330  : 
; 331  : 	_Myt *open(const unsigned short *_Filename,
; 332  : 		ios_base::open_mode _Mode)
; 333  : 		{	// open a wide-named C stream (old style) -- EXTENSION
; 334  : 		return (open(_Filename, (ios_base::openmode)_Mode));
; 335  : 		}
; 336  :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 337  : 
; 338  : 	_Myt *close()
; 339  : 		{	// close the C stream
; 340  : 		_Myt *_Ans = this;
; 341  : 		if (_Myfile == 0)
; 342  : 			_Ans = 0;
; 343  : 		else
; 344  : 			{	// put any homing sequence and close file
; 345  : 			if (!_Endwrite())
; 346  : 				_Ans = 0;
; 347  : 			if (fclose(_Myfile) != 0)
; 348  : 				_Ans = 0;
; 349  : 			}
; 350  : 		_Init(0, _Closefl);
; 351  : 		return (_Ans);
; 352  : 		}
; 353  : 
; 354  : 	virtual void __CLR_OR_THIS_CALL _Lock()
; 355  : 		{	// lock file instead of stream buffer
; 356  : 		if (_Myfile)
; 357  : 			_CSTD _lock_file(_Myfile);
; 358  : 		}
; 359  : 
; 360  : 	virtual void __CLR_OR_THIS_CALL _Unlock()
; 361  : 		{	// unlock file instead of stream buffer
; 362  : 		if (_Myfile)
; 363  : 			_CSTD _unlock_file(_Myfile);
; 364  : 		}
; 365  : 
; 366  : protected:
; 367  : 	virtual int_type __CLR_OR_THIS_CALL overflow(int_type _Meta =
; 368  : 		_Traits::eof())
; 369  : 		{	// put an element to stream
; 370  : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))
; 371  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code
; 372  : 		else if (_Mysb::pptr() != 0
; 373  : 			&& _Mysb::pptr() < _Mysb::epptr())
; 374  : 			{	// room in buffer, store it
; 375  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
; 376  : 			return (_Meta);
; 377  : 			}
; 378  : 		else if (_Myfile == 0)
; 379  : 			return (_Traits::eof());	// no open C stream, fail
; 380  : 		_Reset_back();	// revert from _Mychar buffer
; 381  : 		if (_Pcvt == 0)
; 382  : 			return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)
; 383  : 				? _Meta : _Traits::eof());	// no codecvt facet, put as is
; 384  : 		else
; 385  : 			{	// put using codecvt facet
; 386  : 			const int _STRING_INC = 8;
; 387  : 			const _Elem _Ch = _Traits::to_char_type(_Meta);
; 388  : 			const _Elem *_Src;
; 389  : 			char *_Dest;
; 390  : 
; 391  : 			string _Str(_STRING_INC, '\0');
; 392  : 			for (; ; )
; 393  : 				switch (_Pcvt->out(_State,
; 394  : 					&_Ch, &_Ch + 1, _Src,
; 395  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
; 396  : 				{	// test result of converting one element
; 397  : 				case codecvt_base::partial:
; 398  : 				case codecvt_base::ok:
; 399  : 					{	// converted something, try to put it out
; 400  : 					size_t _Count = _Dest - &*_Str.begin();
; 401  : 					if (0 < _Count && _Count !=
; 402  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))
; 403  : 						return (_Traits::eof());	// write failed
; 404  : 
; 405  : 					_Wrotesome = true;	// write succeeded
; 406  : 					if (_Src != &_Ch)
; 407  : 						return (_Meta);	// converted whole element
; 408  : 
; 409  : 					if (0 < _Count)
; 410  : 						;
; 411  : 					else if (_Str.size() < 4 * _STRING_INC)
; 412  : 						_Str.append(_STRING_INC, '\0');	// try with more space
; 413  : 					else
; 414  : 						return (_Traits::eof());	// conversion failed
; 415  : 					break;
; 416  : 					}
; 417  : 
; 418  : 				case codecvt_base::noconv:
; 419  : 					return (_Fputc(_Ch, _Myfile) ? _Meta
; 420  : 						: _Traits::eof());	// no conversion, put as is
; 421  : 
; 422  : 				default:
; 423  : 					return (_Traits::eof());	// conversion failed
; 424  : 				}
; 425  : 			}
; 426  : 	}
; 427  : 
; 428  : 	virtual int_type __CLR_OR_THIS_CALL pbackfail(int_type _Meta =
; 429  : 		_Traits::eof())
; 430  : 		{	// put an element back to stream
; 431  : 		if (_Mysb::gptr() != 0
; 432  : 			&& _Mysb::eback() < _Mysb::gptr()
; 433  : 			&& (_Traits::eq_int_type(_Traits::eof(), _Meta)
; 434  : 			|| _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
; 435  : 				_Meta)))
; 436  : 			{	// just back up position
; 437  : 			_Mysb::_Gndec();
; 438  : 			return (_Traits::not_eof(_Meta));
; 439  : 			}
; 440  : 		else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))
; 441  : 			return (_Traits::eof());	// no open C stream or EOF, fail
; 442  : 		else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))
; 443  : 			return (_Meta);	// no facet and unget succeeded, return
; 444  : 		else if (_Mysb::gptr() != &_Mychar)
; 445  : 			{	// putback to _Mychar
; 446  : 			_Mychar = _Traits::to_char_type(_Meta);
; 447  : 			_Set_back();	// switch to _Mychar buffer
; 448  : 			return (_Meta);
; 449  : 			}
; 450  : 		else
; 451  : 			return (_Traits::eof());	// nowhere to put back
; 452  : 	}
; 453  : 
; 454  : 	virtual int_type __CLR_OR_THIS_CALL underflow()
; 455  : 		{	// get an element from stream, but don't point past it
; 456  : 		int_type _Meta;
; 457  : 		if (_Mysb::gptr() != 0
; 458  : 			&& _Mysb::gptr() < _Mysb::egptr())
; 459  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered
; 460  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
; 461  : 			return (_Meta);	// uflow failed, return EOF
; 462  : 		else
; 463  : 			{	// get a char, don't point past it
; 464  : 			pbackfail(_Meta);
; 465  : 			return (_Meta);
; 466  : 			}
; 467  : 		}
; 468  : 
; 469  : 	virtual int_type __CLR_OR_THIS_CALL uflow()
; 470  : 		{	// get an element from stream, point past it
; 471  : 		if (_Mysb::gptr() != 0
; 472  : 			&& _Mysb::gptr() < _Mysb::egptr())
; 473  : 			return (_Traits::to_int_type(
; 474  : 				*_Mysb::_Gninc()));	// return buffered
; 475  : 		else if (_Myfile == 0)
; 476  : 			return (_Traits::eof());	// no open C stream, fail
; 477  : 		_Reset_back();	// revert from _Mychar buffer
; 478  : 		if (_Pcvt == 0)
; 479  : 			{	// no codecvt facet, just get it
; 480  : 			_Elem _Ch = 0;
; 481  : 			return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch)
; 482  : 				: _Traits::eof());
; 483  : 			}
; 484  : 		else
; 485  : 			{	// build string until codecvt succeeds
; 486  : 			string _Str;
; 487  : 
; 488  : 			for (; ; )
; 489  : 				{	// get using codecvt facet
; 490  : 				_Elem _Ch, *_Dest;
; 491  : 				const char *_Src;
; 492  : 				int _Nleft;
; 493  : 				int _Meta = fgetc(_Myfile);
; 494  : 
; 495  : 				if (_Meta == EOF)
; 496  : 					return (_Traits::eof());	// partial char?
; 497  : 
; 498  : 				_Str.append(1, (char)_Meta);	// append byte and convert
; 499  : 				switch (_Pcvt->in(_State,
; 500  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Src,
; 501  : 					&_Ch, &_Ch + 1, _Dest))
; 502  : 					{	// test result of converting one element
; 503  : 				case codecvt_base::partial:
; 504  : 				case codecvt_base::ok:
; 505  : 					if (_Dest != &_Ch)
; 506  : 						{	// got an element, put back excess and deliver it
; 507  : 						_Nleft = (int)(&*_Str.begin() + _Str.size() - _Src);
; 508  : 						for (; 0 < _Nleft; )
; 509  : 							ungetc(_Src[--_Nleft], _Myfile);
; 510  : 						return (_Traits::to_int_type(_Ch));
; 511  : 						}
; 512  : 					else
; 513  : 						_Str.erase((size_t)0,	// partial, discard used input
; 514  : 							(size_t)(_Src - &*_Str.begin()));
; 515  : 					break;
; 516  : 
; 517  : 				case codecvt_base::noconv:
; 518  : 					if (_Str.size() < sizeof (_Elem))
; 519  : 						break;	// no conversion, but need more chars
; 520  : 
; 521  : 					_CRT_SECURE_MEMCPY(&_Ch, sizeof (_Elem), &*_Str.begin(),
; 522  : 						sizeof (_Elem));	// copy raw bytes to element
; 523  : 
; 524  : 					return (_Traits::to_int_type(_Ch));	// return result
; 525  : 
; 526  : 				default:
; 527  : 					return (_Traits::eof());	// conversion failed
; 528  : 					}
; 529  : 				}
; 530  : 			}
; 531  : 		}
; 532  : 
; 533  : 	virtual pos_type __CLR_OR_THIS_CALL seekoff(off_type _Off,
; 534  : 		ios_base::seekdir _Way,
; 535  : 		ios_base::openmode =
; 536  : 			(ios_base::openmode)(ios_base::in | ios_base::out))
; 537  : 		{	// change position by _Off
; 538  : 		fpos_t _Fileposition;
; 539  : 
; 540  : 		if (_Mysb::gptr() == &_Mychar	// something putback
; 541  : 			&& _Way == ios_base::cur	// a relative seek
; 542  : 			&& _Pcvt == 0)	// not converting
; 543  : 			_Off -= (off_type)sizeof (_Elem);	// back up over _Elem bytes
; 544  : 
; 545  : 		if (_Myfile == 0 || !_Endwrite()
; 546  : 			|| (_Off != 0 || _Way != ios_base::cur)
; 547  : 				&& _FSEEK_OFF(_Myfile, _Off, _Way) != 0
; 548  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)
; 549  : 			return (pos_type(_BADOFF));	// report failure
; 550  : 
; 551  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback
; 552  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,
; 553  : 			_Fileposition));	// return new position
; 554  : 		}
; 555  : 
; 556  : 	virtual pos_type __CLR_OR_THIS_CALL seekpos(pos_type _Pos,
; 557  : 		ios_base::openmode =
; 558  : 			(ios_base::openmode)(ios_base::in | ios_base::out))
; 559  : 		{	// change position to _Pos
; 560  : 		fpos_t _Fileposition = _POS_TYPE_TO_FPOS_T(_Pos);
; 561  : 		off_type _Off = (off_type)_Pos - (off_type)_FPOSOFF(_Fileposition);
; 562  : 
; 563  : 		if (_Myfile == 0 || !_Endwrite()
; 564  : 			|| fsetpos(_Myfile, &_Fileposition) != 0
; 565  : 			|| _Off != 0 && _FSEEK_OFF(_Myfile, _Off, SEEK_CUR) != 0
; 566  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)
; 567  : 			return (pos_type(_BADOFF));	// report failure
; 568  : 
; 569  : 		_State = _POS_TYPE_TO_STATE(_Pos);
; 570  : 
; 571  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback
; 572  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,
; 573  : 			_Fileposition));	// return new position
; 574  : 		}
; 575  : 
; 576  : 	virtual _Mysb *__CLR_OR_THIS_CALL setbuf(_Elem *_Buffer, streamsize _Count)
; 577  : 		{	// offer _Buffer to C stream
; 578  : 		if (_Myfile == 0 || setvbuf(_Myfile, (char *)_Buffer,
; 579  : 			_Buffer == 0 && _Count == 0 ? _IONBF : _IOFBF,
; 580  : 			(size_t)_Count * sizeof (_Elem)) != 0)
; 581  : 			return (0);	// failed
; 582  : 		else
; 583  : 			{	// new buffer, reinitialize pointers
; 584  : 			_Init(_Myfile, _Openfl);
; 585  : 			return (this);
; 586  : 			}
; 587  : 		}
; 588  : 
; 589  : 	virtual int __CLR_OR_THIS_CALL sync()
; 590  : 		{	// synchronize C stream with external file
; 591  : 		return (_Myfile == 0
; 592  : 			|| _Traits::eq_int_type(_Traits::eof(), overflow())
; 593  : 			|| 0 <= fflush(_Myfile) ? 0 : -1);
; 594  : 		}
; 595  : 
; 596  : 	virtual void __CLR_OR_THIS_CALL imbue(const locale& _Loc)
; 597  : 		{	// set locale to argument (capture nontrivial codecvt facet)
; 598  : 		_Initcvt(&_USE(_Loc, _Cvt));
; 599  : 		}
; 600  : 
; 601  : 	void _Init(_Filet *_File, _Initfl _Which)
; 602  : 		{	// initialize to C stream _File after {new, open, close}
; 603  : 		__PURE_APPDOMAIN_GLOBAL static _Myst _Stinit;	// initial state
; 604  : 
; 605  : 		_Closef = _Which == _Openfl;

  000c9	c6 47 4c 00	 mov	 BYTE PTR [edi+76], 0

; 606  : 		_Wrotesome = false;

  000cd	c6 47 45 00	 mov	 BYTE PTR [edi+69], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 314  : 		_IPfirst = &_Pfirst;

  000d1	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000d4	89 4f 10	 mov	 DWORD PTR [edi+16], ecx

; 318  : 		_IPcount = &_Pcount;

  000d7	8d 47 28	 lea	 eax, DWORD PTR [edi+40]
  000da	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;
; 266  : 		return ((*_IGnext)++);
; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);
; 278  : 		}
; 279  : 
; 280  : 	void __CLR_OR_THIS_CALL pbump(int _Off)
; 281  : 		{	// alter current position in write buffer by _Off
; 282  : 		*_IPcount -= _Off;
; 283  : 		*_IPnext += _Off;
; 284  : 		}
; 285  : 
; 286  : 	void __CLR_OR_THIS_CALL setp(_Elem *_First, _Elem *_Last)
; 287  : 		{	// set pointers for write buffer
; 288  : 		*_IPfirst = _First;

  000dd	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 289  : 		*_IPnext = _First;

  000e3	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000e6	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 290  : 		*_IPcount = (int)(_Last - _First);

  000ec	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  000ef	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 247  : 		*_IGfirst = _First;

  000f5	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000f8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 248  : 		*_IGnext = _Next;

  000fe	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00101	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 249  : 		*_IGcount = (int)(_Last - _Next);

  00107	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  0010a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 629  : 		_State = _Stinit;

  00110	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
  00115	c7 47 50 00 00
	00 00		 mov	 DWORD PTR [edi+80], 0
  0011c	89 47 48	 mov	 DWORD PTR [edi+72], eax

; 630  : 		_Pcvt = 0;	// pointer to codecvt facet

  0011f	c7 47 40 00 00
	00 00		 mov	 DWORD PTR [edi+64], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 524  : 			: this->_Bx._Buf);

  00126	8b 45 08	 mov	 eax, DWORD PTR __Str$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 773  : 		{	// construct with wide-named file -- EXTENSION

  00129	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 524  : 			: this->_Bx._Buf);

  0012d	83 78 14 08	 cmp	 DWORD PTR [eax+20], 8
  00131	72 02		 jb	 SHORT $LN41@basic_ifst
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00133	8b 00		 mov	 eax, DWORD PTR [eax]
$LN41@basic_ifst:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 774  : 		if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::in, _Prot) == 0)

  00135	83 ec 08	 sub	 esp, 8
  00138	8b cf		 mov	 ecx, edi
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PB_WHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  00140	85 c0		 test	 eax, eax
  00142	75 29		 jne	 SHORT $LN66@basic_ifst

; 775  : 			_Myios::setstate(ios_base::failbit);

  00144	8b 06		 mov	 eax, DWORD PTR [esi]
  00146	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00149	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 775  : 			_Myios::setstate(ios_base::failbit);

  0014d	03 ce		 add	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  0014f	83 c8 02	 or	 eax, 2

; 54   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00152	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00156	75 03		 jne	 SHORT $LN51@basic_ifst
  00158	83 c8 04	 or	 eax, 4
$LN51@basic_ifst:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 302  : 		_Mystate = (iostate)(_State & _Statmask);

  0015b	83 e0 17	 and	 eax, 23			; 00000017H
  0015e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 303  : 		if ((_Mystate & _Except) == 0)

  00161	85 41 10	 test	 DWORD PTR [ecx+16], eax
  00164	74 07		 je	 SHORT $LN66@basic_ifst
  00166	6a 00		 push	 0
  00168	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN66@basic_ifst:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 776  : 		}

  0016d	8b c6		 mov	 eax, esi
  0016f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00172	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00179	59		 pop	 ecx
  0017a	5f		 pop	 edi
  0017b	5e		 pop	 esi
  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN6@basic_ifst
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 70	 add	 ecx, 112		; 00000070H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN6@basic_ifst:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z$1:
  0001c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 18	 add	 ecx, 24			; 00000018H
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z$2:
  00027	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 c1 10	 add	 ecx, 16			; 00000010H
  0002d	e9 00 00 00 00	 jmp	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z:
  00032	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00036	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00039	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z
  00048	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 873  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 90	 mov	 eax, DWORD PTR [esi-112]

; 874  : 		}

  00006	8d 4e a0	 lea	 ecx, DWORD PTR [esi-96]
  00009	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000c	c7 44 30 90 00
	00 00 00	 mov	 DWORD PTR [eax+esi-112], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  00014	8b 46 90	 mov	 eax, DWORD PTR [esi-112]
  00017	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001a	8d 42 90	 lea	 eax, DWORD PTR [edx-112]
  0001d	89 44 32 8c	 mov	 DWORD PTR [edx+esi-116], eax
  00021	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 71   : 		{	// destroy the object

  00026	8b 46 90	 mov	 eax, DWORD PTR [esi-112]
  00029	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002c	c7 44 30 90 00
	00 00 00	 mov	 DWORD PTR [eax+esi-112], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00034	8b 46 90	 mov	 eax, DWORD PTR [esi-112]
  00037	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003a	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  0003d	89 44 31 8c	 mov	 DWORD PTR [ecx+esi-116], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 874  : 		}

  00041	5e		 pop	 esi
  00042	c3		 ret	 0
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 911  : 		{	// close the C stream

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 912  : 		if (_Filebuffer.close() == 0)

  00003	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00006	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  0000b	85 c0		 test	 eax, eax
  0000d	75 29		 jne	 SHORT $LN19@close

; 913  : 			_Myios::setstate(ios_base::failbit);

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00014	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 913  : 			_Myios::setstate(ios_base::failbit);

  00018	03 ce		 add	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  0001a	83 c8 02	 or	 eax, 2

; 54   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  0001d	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00021	75 03		 jne	 SHORT $LN11@close
  00023	83 c8 04	 or	 eax, 4
$LN11@close:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 302  : 		_Mystate = (iostate)(_State & _Statmask);

  00026	83 e0 17	 and	 eax, 23			; 00000017H
  00029	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 303  : 		if ((_Mystate & _Except) == 0)

  0002c	85 41 10	 test	 DWORD PTR [ecx+16], eax
  0002f	74 07		 je	 SHORT $LN19@close
  00031	6a 00		 push	 0
  00033	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN19@close:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 914  : 		}

  00038	5e		 pop	 esi
  00039	c3		 ret	 0
?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 151  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 152  : 		if (_Myfile != 0)

  00003	83 7e 50 00	 cmp	 DWORD PTR [esi+80], 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
  0000d	74 1e		 je	 SHORT $LN10@basic_file
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 216  : 		return (*_IGfirst);

  0000f	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 688  : 		if (_Mysb::eback() == &_Mychar)

  00012	8d 46 44	 lea	 eax, DWORD PTR [esi+68]
  00015	39 02		 cmp	 DWORD PTR [edx], eax
  00017	75 14		 jne	 SHORT $LN10@basic_file
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 247  : 		*_IGfirst = _First;

  00019	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 689  : 			_Mysb::setg(_Set_eback, _Set_egptr, _Set_egptr);

  0001c	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 247  : 		*_IGfirst = _First;

  0001f	89 02		 mov	 DWORD PTR [edx], eax

; 248  : 		*_IGnext = _Next;

  00021	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00024	89 08		 mov	 DWORD PTR [eax], ecx

; 249  : 		*_IGcount = (int)(_Last - _Next);

  00026	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00029	2b c9		 sub	 ecx, ecx
  0002b	89 08		 mov	 DWORD PTR [eax], ecx
$LN10@basic_file:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 154  : 		if (_Closef)

  0002d	80 7e 4c 00	 cmp	 BYTE PTR [esi+76], 0
  00031	74 07		 je	 SHORT $LN1@basic_file

; 155  : 			close();

  00033	8b ce		 mov	 ecx, esi
  00035	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
$LN1@basic_file:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 79   : 		{	// destroy the object

  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@

; 80   : 		_DELETE_CRT(_Plocale);

  00040	8b 76 34	 mov	 esi, DWORD PTR [esi+52]
  00043	85 f6		 test	 esi, esi
  00045	74 20		 je	 SHORT $LN16@basic_file
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 422  : 		if (_Ptr != 0)

  00047	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00049	85 c9		 test	 ecx, ecx
  0004b	74 11		 je	 SHORT $LN22@basic_file

; 423  : 			_DELETE_CRT(_Ptr->_Decref());

  0004d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004f	ff 50 08	 call	 DWORD PTR [eax+8]
  00052	85 c0		 test	 eax, eax
  00054	74 08		 je	 SHORT $LN22@basic_file
  00056	8b 10		 mov	 edx, DWORD PTR [eax]
  00058	6a 01		 push	 1
  0005a	8b c8		 mov	 ecx, eax
  0005c	ff 12		 call	 DWORD PTR [edx]
$LN22@basic_file:
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00064	83 c4 04	 add	 esp, 4
$LN16@basic_file:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 156  : 		}

  00067	5e		 pop	 esi
  00068	c3		 ret	 0
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 356  : 		if (_Myfile)

  00000	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  00003	85 c0		 test	 eax, eax
  00005	74 07		 je	 SHORT $LN1@Lock

; 357  : 			_CSTD _lock_file(_Myfile);

  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 __lock_file
  0000d	59		 pop	 ecx
$LN1@Lock:

; 358  : 		}

  0000e	c3		 ret	 0
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 362  : 		if (_Myfile)

  00000	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  00003	85 c0		 test	 eax, eax
  00005	74 07		 je	 SHORT $LN1@Unlock

; 363  : 			_CSTD _unlock_file(_Myfile);

  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 __unlock_file
  0000d	59		 pop	 ecx
$LN1@Unlock:

; 364  : 		}

  0000e	c3		 ret	 0
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
__Ch$2 = -53						; size = 1
__Dest$3 = -52						; size = 4
__Src$4 = -48						; size = 4
__Str$5 = -44						; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
__Meta$ = 8						; size = 4
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 369  : 		{	// put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
  0000d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00013	50		 push	 eax
  00014	83 ec 30	 sub	 esp, 48			; 00000030H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	89 44 24 28	 mov	 DWORD PTR __$ArrayPad$[esp+60], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c4		 xor	 eax, esp
  0002c	50		 push	 eax
  0002d	8d 44 24 40	 lea	 eax, DWORD PTR __$EHRec$[esp+76]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  00039	8b 4d 08	 mov	 ecx, DWORD PTR __Meta$[ebp]
  0003c	83 f9 ff	 cmp	 ecx, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 370  : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0003f	75 07		 jne	 SHORT $LN20@overflow

; 371  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  00041	33 c0		 xor	 eax, eax
  00043	e9 bb 01 00 00	 jmp	 $LN14@overflow
$LN20@overflow:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 231  : 		return (*_IPnext);

  00048	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  0004b	8b 10		 mov	 edx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 373  : 			&& _Mysb::pptr() < _Mysb::epptr())

  0004d	85 d2		 test	 edx, edx
  0004f	74 25		 je	 SHORT $LN18@overflow
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 254  : 		return (*_IPnext + *_IPcount);

  00051	8b 73 30	 mov	 esi, DWORD PTR [ebx+48]
  00054	8b 3e		 mov	 edi, DWORD PTR [esi]
  00056	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 373  : 			&& _Mysb::pptr() < _Mysb::epptr())

  00059	3b d0		 cmp	 edx, eax
  0005b	73 19		 jae	 SHORT $LN18@overflow
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 302  : 		--*_IPcount;

  0005d	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  00060	89 06		 mov	 DWORD PTR [esi], eax

; 303  : 		return ((*_IPnext)++);

  00062	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]
  00065	8b 11		 mov	 edx, DWORD PTR [ecx]
  00067	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0006a	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 375  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0006c	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  0006f	88 02		 mov	 BYTE PTR [edx], al

; 376  : 			return (_Meta);

  00071	e9 8d 01 00 00	 jmp	 $LN14@overflow
$LN18@overflow:

; 377  : 			}
; 378  : 		else if (_Myfile == 0)

  00076	83 7b 50 00	 cmp	 DWORD PTR [ebx+80], 0
  0007a	75 08		 jne	 SHORT $LN16@overflow

; 379  : 			return (_Traits::eof());	// no open C stream, fail

  0007c	83 c8 ff	 or	 eax, -1
  0007f	e9 7f 01 00 00	 jmp	 $LN14@overflow
$LN16@overflow:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 216  : 		return (*_IGfirst);

  00084	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 688  : 		if (_Mysb::eback() == &_Mychar)

  00087	8d 43 44	 lea	 eax, DWORD PTR [ebx+68]
  0008a	39 02		 cmp	 DWORD PTR [edx], eax
  0008c	75 17		 jne	 SHORT $LN61@overflow
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 247  : 		*_IGfirst = _First;

  0008e	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 689  : 			_Mysb::setg(_Set_eback, _Set_egptr, _Set_egptr);

  00091	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 247  : 		*_IGfirst = _First;

  00094	89 02		 mov	 DWORD PTR [edx], eax

; 248  : 		*_IGnext = _Next;

  00096	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00099	89 08		 mov	 DWORD PTR [eax], ecx

; 249  : 		*_IGcount = (int)(_Last - _Next);

  0009b	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  0009e	2b c9		 sub	 ecx, ecx
  000a0	89 08		 mov	 DWORD PTR [eax], ecx
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR __Meta$[ebp]
$LN61@overflow:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 381  : 		if (_Pcvt == 0)

  000a5	83 7b 40 00	 cmp	 DWORD PTR [ebx+64], 0
  000a9	75 1f		 jne	 SHORT $LN15@overflow

; 83   : 	return (fputc(_Byte, _File) != EOF);

  000ab	ff 73 50	 push	 DWORD PTR [ebx+80]
  000ae	0f be c1	 movsx	 eax, cl
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 _fputc

; 382  : 			return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)
; 383  : 				? _Meta : _Traits::eof());	// no codecvt facet, put as is

  000b7	83 c9 ff	 or	 ecx, -1

; 83   : 	return (fputc(_Byte, _File) != EOF);

  000ba	83 c4 08	 add	 esp, 8
  000bd	3b c1		 cmp	 eax, ecx

; 382  : 			return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)
; 383  : 				? _Meta : _Traits::eof());	// no codecvt facet, put as is

  000bf	0f 45 4d 08	 cmovne	 ecx, DWORD PTR __Meta$[ebp]
  000c3	8b c1		 mov	 eax, ecx
  000c5	e9 39 01 00 00	 jmp	 $LN14@overflow
$LN15@overflow:

; 384  : 		else
; 385  : 			{	// put using codecvt facet
; 386  : 			const int _STRING_INC = 8;
; 387  : 			const _Elem _Ch = _Traits::to_char_type(_Meta);

  000ca	88 4c 24 17	 mov	 BYTE PTR __Ch$2[esp+76], cl
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  000ce	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  000d3	c6 44 24 20 00	 mov	 BYTE PTR __Str$5[esp+76], 0
  000d8	0f 57 c0	 xorps	 xmm0, xmm0

; 559  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  000db	66 0f d6 44 24
	20		 movq	 QWORD PTR __Str$5[esp+76], xmm0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  000e1	8d 44 24 20	 lea	 eax, DWORD PTR __Str$5[esp+76]
  000e5	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000e8	0f 43 44 24 20	 cmovae	 eax, DWORD PTR __Str$5[esp+76]

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  000ed	89 4c 24 34	 mov	 DWORD PTR __Str$5[esp+96], ecx

; 518  : 		}
; 519  : 
; 520  : 	const value_type *_Myptr() const
; 521  : 		{	// determine current pointer to buffer for nonmutable string
; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);
; 525  : 		}
; 526  : 
; 527  : 	union _Bxty
; 528  : 		{	// storage for small buffer or pointer to larger one
; 529  : 		value_type _Buf[_BUF_SIZE];
; 530  : 		pointer _Ptr;
; 531  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 532  : 		} _Bx;
; 533  : 
; 534  : 	size_type _Mysize;	// current length of string
; 535  : 	size_type _Myres;	// current storage reserved for string
; 536  : 	};
; 537  : 
; 538  : 		// TEMPLATE CLASS _String_alloc
; 539  : template<bool _Al_has_storage,
; 540  : 	class _Alloc_types>
; 541  : 	class _String_alloc
; 542  : 		: public _String_val<typename _Alloc_types::_Val_types>
; 543  : 	{	// base class for basic_string to hold allocator with storage
; 544  : public:
; 545  : 	typedef _String_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 546  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 547  : 
; 548  : 	typedef typename _Alloc_types::_Alty _Alty;
; 549  : 
; 550  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 551  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 552  : 		: _Alval(_Al)
; 553  : 		{	// construct allocator from _Al
; 554  : 		}
; 555  : 
; 556  : 	void _Change_alloc(const _Alty& _Al)
; 557  : 		{	// replace old allocator
; 558  : 		_Alval = _Al;
; 559  : 		}
; 560  : 
; 561  : 	void _Swap_alloc(_Myt& _Right)
; 562  : 		{	// swap allocators
; 563  : 		_Swap_adl(this->_Alval, _Right._Alval);
; 564  : 		}
; 565  : 
; 566  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 567  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 568  : 		: _Alval(_Al)
; 569  : 		{	// construct allocator from _Al
; 570  : 		_Alloc_proxy();
; 571  : 		}
; 572  : 
; 573  : 	~_String_alloc() _NOEXCEPT
; 574  : 		{	// destroy the object
; 575  : 		_Free_proxy();
; 576  : 		}
; 577  : 
; 578  : 	void _Change_alloc(const _Alty& _Al)
; 579  : 		{	// replace old allocator
; 580  : 		_Free_proxy();
; 581  : 		_Alval = _Al;
; 582  : 		_Alloc_proxy();
; 583  : 		}
; 584  : 
; 585  : 	void _Swap_alloc(_Myt& _Right)
; 586  : 		{	// swap allocators
; 587  : 		_Swap_adl(_Alval, _Right._Alval);
; 588  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 589  : 		}
; 590  : 
; 591  : 	void _Alloc_proxy()
; 592  : 		{	// construct proxy from _Alval
; 593  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 594  : 			_Alproxy(_Alval);
; 595  : 		this->_Myproxy = _Alproxy.allocate(1);
; 596  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 597  : 		this->_Myproxy->_Mycont = this;
; 598  : 		}
; 599  : 
; 600  : 	void _Free_proxy()
; 601  : 		{	// destroy proxy
; 602  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 603  : 			_Alproxy(_Alval);
; 604  : 		this->_Orphan_all();
; 605  : 		_Alproxy.destroy(this->_Myproxy);
; 606  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 607  : 		this->_Myproxy = 0;
; 608  : 		}
; 609  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 610  : 
; 611  : 	_Alty& _Getal()
; 612  : 		{	// get reference to allocator
; 613  : 		return (_Alval);
; 614  : 		}
; 615  : 
; 616  : 	const _Alty& _Getal() const
; 617  : 		{	// get reference to allocator
; 618  : 		return (_Alval);
; 619  : 		}
; 620  : 
; 621  : 	_Alty _Alval;	// allocator object for strings
; 622  : 	};
; 623  : 
; 624  : template<class _Alloc_types>
; 625  : 	class _String_alloc<false, _Alloc_types>
; 626  : 		: public _String_val<typename _Alloc_types::_Val_types>
; 627  : 	{	// base class for basic_string to hold allocator with no storage
; 628  : public:
; 629  : 	typedef _String_alloc<false, _Alloc_types> _Myt;
; 630  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 631  : 
; 632  : 	typedef typename _Alloc_types::_Alty _Alty;
; 633  : 
; 634  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 635  : 	_String_alloc(const _Alloc& = _Alloc())
; 636  : 		{	// construct allocator from _Al
; 637  : 		}
; 638  : 
; 639  : 	void _Change_alloc(const _Alty&)
; 640  : 		{	// replace old allocator
; 641  : 		}
; 642  : 
; 643  : 	void _Swap_alloc(_Myt&)
; 644  : 		{	// swap allocators
; 645  : 		}
; 646  : 
; 647  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 648  : 	_String_alloc(const _Alloc& = _Alloc())
; 649  : 		{	// construct allocator from _Al
; 650  : 		_Alloc_proxy();
; 651  : 		}
; 652  : 
; 653  : 	~_String_alloc() _NOEXCEPT
; 654  : 		{	// destroy the object
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Change_alloc(const _Alty&)
; 659  : 		{	// replace old allocator
; 660  : 		}
; 661  : 
; 662  : 	void _Swap_alloc(_Myt& _Right)
; 663  : 		{	// swap allocators
; 664  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 665  : 		}
; 666  : 
; 667  : 	void _Alloc_proxy()
; 668  : 		{	// construct proxy from _Alval
; 669  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 670  : 			_Alproxy;
; 671  : 		this->_Myproxy = _Alproxy.allocate(1);
; 672  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 673  : 		this->_Myproxy->_Mycont = this;
; 674  : 		}
; 675  : 
; 676  : 	void _Free_proxy()
; 677  : 		{	// destroy proxy
; 678  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 679  : 			_Alproxy;
; 680  : 		this->_Orphan_all();
; 681  : 		_Alproxy.destroy(this->_Myproxy);
; 682  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 683  : 		this->_Myproxy = 0;
; 684  : 		}
; 685  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 686  : 
; 687  : 	_Alty _Getal() const
; 688  : 		{	// get reference to allocator
; 689  : 		return (_Alty());
; 690  : 		}
; 691  : 	};
; 692  : 
; 693  : 		// TEMPLATE CLASS basic_string
; 694  : template<class _Elem,
; 695  : 	class _Traits,
; 696  : 	class _Alloc>
; 697  : 	class basic_string
; 698  : 		: public _String_alloc<!is_empty<_Alloc>::value,
; 699  : 			_String_base_types<_Elem, _Alloc> >
; 700  : 	{	// null-terminated transparent array of elements
; 701  : public:
; 702  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 703  : 	typedef _String_alloc<!is_empty<_Alloc>::value,
; 704  : 		_String_base_types<_Elem, _Alloc> > _Mybase;
; 705  : 	typedef _Traits traits_type;
; 706  : 	typedef _Alloc allocator_type;
; 707  : 
; 708  : 	typedef typename _Mybase::_Alty _Alty;
; 709  : 
; 710  : 	typedef typename _Mybase::value_type value_type;
; 711  : 	typedef typename _Mybase::size_type size_type;
; 712  : 	typedef typename _Mybase::difference_type difference_type;
; 713  : 	typedef typename _Mybase::pointer pointer;
; 714  : 	typedef typename _Mybase::const_pointer const_pointer;
; 715  : 	typedef typename _Mybase::reference reference;
; 716  : 	typedef typename _Mybase::const_reference const_reference;
; 717  : 
; 718  : 	typedef typename _Mybase::iterator iterator;
; 719  : 	typedef typename _Mybase::const_iterator const_iterator;
; 720  : 
; 721  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 722  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 723  : 
; 724  : 	basic_string(const _Myt& _Right)
; 725  : 
; 726  :  #if _HAS_CPP0X
; 727  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 728  : 
; 729  :  #else /* _HAS_CPP0X */
; 730  : 		: _Mybase(_Right._Getal())
; 731  :  #endif /* _HAS_CPP0X */
; 732  : 
; 733  : 		{	// construct by copying _Right
; 734  : 		_Tidy();
; 735  : 		assign(_Right, 0, npos);
; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  000f1	c7 44 24 30 08
	00 00 00	 mov	 DWORD PTR __Str$5[esp+92], 8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  000f9	c6 40 08 00	 mov	 BYTE PTR [eax+8], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 391  : 			string _Str(_STRING_INC, '\0');

  000fd	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+84], 0
  00105	eb 09 8d a4 24
	00 00 00 00 8b
	ff		 npad	 11
$LL13@overflow:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  00110	83 7c 24 34 10	 cmp	 DWORD PTR __Str$5[esp+96], 16 ; 00000010H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 395  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  00115	8b 73 40	 mov	 esi, DWORD PTR [ebx+64]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 869  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));

  00118	8d 44 24 18	 lea	 eax, DWORD PTR __Dest$3[esp+76]
  0011c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0011e	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 395  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  0011f	8b 44 24 34	 mov	 eax, DWORD PTR __Str$5[esp+96]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  00123	8d 4c 24 24	 lea	 ecx, DWORD PTR __Str$5[esp+80]
  00127	0f 43 4c 24 24	 cmovae	 ecx, DWORD PTR __Str$5[esp+80]
  0012c	8d 54 24 24	 lea	 edx, DWORD PTR __Str$5[esp+80]
  00130	0f 43 54 24 24	 cmovae	 edx, DWORD PTR __Str$5[esp+80]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 395  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  00135	03 c1		 add	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 869  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));

  00137	50		 push	 eax
  00138	52		 push	 edx
  00139	8d 44 24 28	 lea	 eax, DWORD PTR __Src$4[esp+88]
  0013d	50		 push	 eax
  0013e	8d 44 24 28	 lea	 eax, DWORD PTR __Ch$2[esp+93]
  00142	50		 push	 eax
  00143	8d 44 24 2b	 lea	 eax, DWORD PTR __Ch$2[esp+96]
  00147	50		 push	 eax
  00148	8d 43 48	 lea	 eax, DWORD PTR [ebx+72]
  0014b	50		 push	 eax
  0014c	8b ce		 mov	 ecx, esi
  0014e	ff 57 1c	 call	 DWORD PTR [edi+28]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 395  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  00151	85 c0		 test	 eax, eax
  00153	0f 88 92 00 00
	00		 js	 $LN1@overflow
  00159	83 f8 01	 cmp	 eax, 1
  0015c	7f 6a		 jg	 SHORT $LN334@overflow
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  0015e	8b 7c 24 34	 mov	 edi, DWORD PTR __Str$5[esp+96]
  00162	8b 4c 24 20	 mov	 ecx, DWORD PTR __Str$5[esp+76]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 400  : 					size_t _Count = _Dest - &*_Str.begin();

  00166	8b 74 24 18	 mov	 esi, DWORD PTR __Dest$3[esp+76]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  0016a	83 ff 10	 cmp	 edi, 16			; 00000010H
  0016d	8d 44 24 20	 lea	 eax, DWORD PTR __Str$5[esp+76]
  00171	0f 43 c1	 cmovae	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 400  : 					size_t _Count = _Dest - &*_Str.begin();

  00174	2b f0		 sub	 esi, eax

; 402  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

  00176	74 1d		 je	 SHORT $LN8@overflow
  00178	ff 73 50	 push	 DWORD PTR [ebx+80]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  0017b	8d 44 24 24	 lea	 eax, DWORD PTR __Str$5[esp+80]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 402  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

  0017f	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  00180	83 ff 10	 cmp	 edi, 16			; 00000010H
  00183	0f 43 c1	 cmovae	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 402  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

  00186	6a 01		 push	 1
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 _fwrite
  0018e	83 c4 10	 add	 esp, 16			; 00000010H
  00191	3b f0		 cmp	 esi, eax
  00193	75 56		 jne	 SHORT $LN1@overflow
$LN8@overflow:

; 403  : 						return (_Traits::eof());	// write failed
; 404  : 
; 405  : 					_Wrotesome = true;	// write succeeded
; 406  : 					if (_Src != &_Ch)

  00195	8d 44 24 17	 lea	 eax, DWORD PTR __Ch$2[esp+76]
  00199	c6 43 45 01	 mov	 BYTE PTR [ebx+69], 1
  0019d	39 44 24 1c	 cmp	 DWORD PTR __Src$4[esp+76], eax
  001a1	75 20		 jne	 SHORT $LN336@overflow

; 407  : 						return (_Meta);	// converted whole element
; 408  : 
; 409  : 					if (0 < _Count)

  001a3	85 f6		 test	 esi, esi
  001a5	0f 85 65 ff ff
	ff		 jne	 $LL13@overflow

; 410  : 						;
; 411  : 					else if (_Str.size() < 4 * _STRING_INC)

  001ab	83 7c 24 30 20	 cmp	 DWORD PTR __Str$5[esp+92], 32 ; 00000020H
  001b0	73 39		 jae	 SHORT $LN1@overflow

; 412  : 						_Str.append(_STRING_INC, '\0');	// try with more space

  001b2	56		 push	 esi
  001b3	6a 08		 push	 8
  001b5	8d 4c 24 28	 lea	 ecx, DWORD PTR __Str$5[esp+84]
  001b9	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 424  : 				}

  001be	e9 4d ff ff ff	 jmp	 $LL13@overflow
$LN336@overflow:
  001c3	8b 5d 08	 mov	 ebx, DWORD PTR __Meta$[ebp]
  001c6	eb 26		 jmp	 SHORT $LN31@overflow
$LN334@overflow:

; 395  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  001c8	83 f8 03	 cmp	 eax, 3
  001cb	75 1e		 jne	 SHORT $LN1@overflow

; 83   : 	return (fputc(_Byte, _File) != EOF);

  001cd	0f be 44 24 17	 movsx	 eax, BYTE PTR __Ch$2[esp+76]
  001d2	ff 73 50	 push	 DWORD PTR [ebx+80]
  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 _fputc

; 413  : 					else
; 414  : 						return (_Traits::eof());	// conversion failed
; 415  : 					break;
; 416  : 					}
; 417  : 
; 418  : 				case codecvt_base::noconv:
; 419  : 					return (_Fputc(_Ch, _Myfile) ? _Meta
; 420  : 						: _Traits::eof());	// no conversion, put as is

  001db	83 c9 ff	 or	 ecx, -1

; 83   : 	return (fputc(_Byte, _File) != EOF);

  001de	83 c4 08	 add	 esp, 8
  001e1	3b c1		 cmp	 eax, ecx

; 413  : 					else
; 414  : 						return (_Traits::eof());	// conversion failed
; 415  : 					break;
; 416  : 					}
; 417  : 
; 418  : 				case codecvt_base::noconv:
; 419  : 					return (_Fputc(_Ch, _Myfile) ? _Meta
; 420  : 						: _Traits::eof());	// no conversion, put as is

  001e3	0f 45 4d 08	 cmovne	 ecx, DWORD PTR __Meta$[ebp]
  001e7	8b d9		 mov	 ebx, ecx
  001e9	eb 03		 jmp	 SHORT $LN31@overflow
$LN1@overflow:

; 423  : 					return (_Traits::eof());	// conversion failed

  001eb	83 cb ff	 or	 ebx, -1
$LN31@overflow:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  001ee	83 7c 24 34 10	 cmp	 DWORD PTR __Str$5[esp+96], 16 ; 00000010H
  001f3	72 0c		 jb	 SHORT $LN321@overflow
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  001f5	ff 74 24 20	 push	 DWORD PTR __Str$5[esp+76]
  001f9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001fe	83 c4 04	 add	 esp, 4
$LN321@overflow:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 423  : 					return (_Traits::eof());	// conversion failed

  00201	8b c3		 mov	 eax, ebx
$LN14@overflow:

; 425  : 			}
; 426  : 	}

  00203	8b 4c 24 40	 mov	 ecx, DWORD PTR __$EHRec$[esp+76]
  00207	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0020e	59		 pop	 ecx
  0020f	5f		 pop	 edi
  00210	5e		 pop	 esi
  00211	5b		 pop	 ebx
  00212	8b 4c 24 28	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+60]
  00216	33 cc		 xor	 ecx, esp
  00218	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021d	8b e5		 mov	 esp, ebp
  0021f	5d		 pop	 ebp
  00220	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Str$5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 c4	 lea	 eax, DWORD PTR [edx-60]
  0000f	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::overflow
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 430  : 		{	// put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 435  : 				_Meta)))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Meta$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 221  : 		return (*_IGnext);

  0000a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 435  : 				_Meta)))

  0000d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000f	85 c9		 test	 ecx, ecx
  00011	74 2c		 je	 SHORT $LN10@pbackfail
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 216  : 		return (*_IGfirst);

  00013	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 435  : 				_Meta)))

  00016	39 08		 cmp	 DWORD PTR [eax], ecx
  00018	73 25		 jae	 SHORT $LN10@pbackfail
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  0001a	83 fb ff	 cmp	 ebx, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 435  : 				_Meta)))

  0001d	74 08		 je	 SHORT $LN9@pbackfail
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  0001f	0f b6 41 ff	 movzx	 eax, BYTE PTR [ecx-1]

; 594  : 		return (_Left == _Right);

  00023	3b c3		 cmp	 eax, ebx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 435  : 				_Meta)))

  00025	75 18		 jne	 SHORT $LN10@pbackfail
$LN9@pbackfail:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 259  : 		++*_IGcount;

  00027	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0002a	ff 00		 inc	 DWORD PTR [eax]

; 260  : 		return (--*_IGnext);

  0002c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0002f	5e		 pop	 esi
  00030	ff 08		 dec	 DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 600  : 		return (_Meta != eof() ? _Meta : !eof());

  00032	33 c0		 xor	 eax, eax
  00034	83 fb ff	 cmp	 ebx, -1
  00037	0f 45 c3	 cmovne	 eax, ebx
  0003a	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 452  : 	}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
$LN10@pbackfail:

; 440  : 		else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))

  0003f	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  00042	85 c0		 test	 eax, eax
  00044	74 38		 je	 SHORT $LN6@pbackfail
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  00046	83 fb ff	 cmp	 ebx, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 440  : 		else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))

  00049	74 33		 je	 SHORT $LN6@pbackfail

; 442  : 		else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))

  0004b	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  0004f	75 12		 jne	 SHORT $LN4@pbackfail

; 107  : 	return (ungetc((unsigned char)_Byte, _File) != EOF);

  00051	0f b6 cb	 movzx	 ecx, bl
  00054	50		 push	 eax
  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 _ungetc
  0005b	83 c4 08	 add	 esp, 8
  0005e	83 f8 ff	 cmp	 eax, -1

; 442  : 		else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))

  00061	75 13		 jne	 SHORT $LN55@pbackfail
$LN4@pbackfail:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 221  : 		return (*_IGnext);

  00063	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 444  : 		else if (_Mysb::gptr() != &_Mychar)

  00066	8d 4e 44	 lea	 ecx, DWORD PTR [esi+68]
  00069	39 08		 cmp	 DWORD PTR [eax], ecx
  0006b	74 11		 je	 SHORT $LN6@pbackfail

; 445  : 			{	// putback to _Mychar
; 446  : 			_Mychar = _Traits::to_char_type(_Meta);

  0006d	88 19		 mov	 BYTE PTR [ecx], bl

; 447  : 			_Set_back();	// switch to _Mychar buffer

  0006f	8b ce		 mov	 ecx, esi
  00071	e8 00 00 00 00	 call	 ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
$LN55@pbackfail:

; 448  : 			return (_Meta);

  00076	5e		 pop	 esi
  00077	8b c3		 mov	 eax, ebx
  00079	5b		 pop	 ebx

; 452  : 	}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN6@pbackfail:
  0007e	5e		 pop	 esi

; 441  : 			return (_Traits::eof());	// no open C stream or EOF, fail

  0007f	83 c8 ff	 or	 eax, -1
  00082	5b		 pop	 ebx

; 452  : 	}

  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 455  : 		{	// get an element from stream, but don't point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 221  : 		return (*_IGnext);

  00003	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 458  : 			&& _Mysb::gptr() < _Mysb::egptr())

  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	85 c9		 test	 ecx, ecx
  0000a	74 10		 je	 SHORT $LN4@underflow
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 236  : 		return (*_IGnext + *_IGcount);

  0000c	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
  00011	03 c1		 add	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 458  : 			&& _Mysb::gptr() < _Mysb::egptr())

  00013	3b c8		 cmp	 ecx, eax
  00015	73 05		 jae	 SHORT $LN4@underflow
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  00017	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  0001a	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 467  : 		}

  0001b	c3		 ret	 0
$LN4@underflow:

; 460  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	57		 push	 edi
  0001f	8b ce		 mov	 ecx, esi
  00021	ff 50 1c	 call	 DWORD PTR [eax+28]
  00024	8b f8		 mov	 edi, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  00026	83 ff ff	 cmp	 edi, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 460  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  00029	75 05		 jne	 SHORT $LN2@underflow

; 461  : 			return (_Meta);	// uflow failed, return EOF

  0002b	5f		 pop	 edi
  0002c	0b c0		 or	 eax, eax
  0002e	5e		 pop	 esi

; 467  : 		}

  0002f	c3		 ret	 0
$LN2@underflow:

; 462  : 		else
; 463  : 			{	// get a char, don't point past it
; 464  : 			pbackfail(_Meta);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	57		 push	 edi
  00033	8b ce		 mov	 ecx, esi
  00035	ff 50 10	 call	 DWORD PTR [eax+16]

; 465  : 			return (_Meta);

  00038	8b c7		 mov	 eax, edi
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi

; 467  : 		}

  0003c	c3		 ret	 0
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
__Ch$2 = -53						; size = 1
__Src$3 = -52						; size = 4
__Dest$4 = -48						; size = 4
__Str$5 = -44						; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 470  : 		{	// get an element from stream, point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  0000d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00013	50		 push	 eax
  00014	83 ec 30	 sub	 esp, 48			; 00000030H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	89 44 24 28	 mov	 DWORD PTR __$ArrayPad$[esp+60], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c4		 xor	 eax, esp
  0002c	50		 push	 eax
  0002d	8d 44 24 40	 lea	 eax, DWORD PTR __$EHRec$[esp+76]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 221  : 		return (*_IGnext);

  00039	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 472  : 			&& _Mysb::gptr() < _Mysb::egptr())

  0003e	85 c9		 test	 ecx, ecx
  00040	74 23		 je	 SHORT $LN18@uflow
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 236  : 		return (*_IGnext + *_IGcount);

  00042	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]
  00045	8b 32		 mov	 esi, DWORD PTR [edx]
  00047	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 472  : 			&& _Mysb::gptr() < _Mysb::egptr())

  0004a	3b c8		 cmp	 ecx, eax
  0004c	73 17		 jae	 SHORT $LN18@uflow
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 265  : 		--*_IGcount;

  0004e	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00051	89 02		 mov	 DWORD PTR [edx], eax

; 266  : 		return ((*_IGnext)++);

  00053	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]
  00056	8b 11		 mov	 edx, DWORD PTR [ecx]
  00058	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0005b	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  0005d	0f b6 02	 movzx	 eax, BYTE PTR [edx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 474  : 				*_Mysb::_Gninc()));	// return buffered

  00060	e9 58 01 00 00	 jmp	 $LN14@uflow
$LN18@uflow:

; 475  : 		else if (_Myfile == 0)

  00065	83 7b 50 00	 cmp	 DWORD PTR [ebx+80], 0
  00069	75 08		 jne	 SHORT $LN16@uflow
$LN21@uflow:

; 476  : 			return (_Traits::eof());	// no open C stream, fail

  0006b	83 c8 ff	 or	 eax, -1
  0006e	e9 4a 01 00 00	 jmp	 $LN14@uflow
$LN16@uflow:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 216  : 		return (*_IGfirst);

  00073	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 688  : 		if (_Mysb::eback() == &_Mychar)

  00076	8d 43 44	 lea	 eax, DWORD PTR [ebx+68]
  00079	39 02		 cmp	 DWORD PTR [edx], eax
  0007b	75 14		 jne	 SHORT $LN44@uflow
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 247  : 		*_IGfirst = _First;

  0007d	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 689  : 			_Mysb::setg(_Set_eback, _Set_egptr, _Set_egptr);

  00080	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 247  : 		*_IGfirst = _First;

  00083	89 02		 mov	 DWORD PTR [edx], eax

; 248  : 		*_IGnext = _Next;

  00085	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00088	89 08		 mov	 DWORD PTR [eax], ecx

; 249  : 		*_IGcount = (int)(_Last - _Next);

  0008a	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  0008d	2b c9		 sub	 ecx, ecx
  0008f	89 08		 mov	 DWORD PTR [eax], ecx
$LN44@uflow:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 478  : 		if (_Pcvt == 0)

  00091	83 7b 40 00	 cmp	 DWORD PTR [ebx+64], 0
  00095	75 18		 jne	 SHORT $LN15@uflow

; 39   : 	if ((_Meta = fgetc(_File)) == EOF)

  00097	ff 73 50	 push	 DWORD PTR [ebx+80]
  0009a	e8 00 00 00 00	 call	 _fgetc
  0009f	83 c4 04	 add	 esp, 4
  000a2	83 f8 ff	 cmp	 eax, -1
  000a5	74 c4		 je	 SHORT $LN21@uflow
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  000a7	0f b6 c0	 movzx	 eax, al
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 482  : 				: _Traits::eof());

  000aa	e9 0e 01 00 00	 jmp	 $LN14@uflow
$LN15@uflow:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  000af	c7 44 24 34 0f
	00 00 00	 mov	 DWORD PTR __Str$5[esp+96], 15 ; 0000000fH

; 518  : 		}
; 519  : 
; 520  : 	const value_type *_Myptr() const
; 521  : 		{	// determine current pointer to buffer for nonmutable string
; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);
; 525  : 		}
; 526  : 
; 527  : 	union _Bxty
; 528  : 		{	// storage for small buffer or pointer to larger one
; 529  : 		value_type _Buf[_BUF_SIZE];
; 530  : 		pointer _Ptr;
; 531  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 532  : 		} _Bx;
; 533  : 
; 534  : 	size_type _Mysize;	// current length of string
; 535  : 	size_type _Myres;	// current storage reserved for string
; 536  : 	};
; 537  : 
; 538  : 		// TEMPLATE CLASS _String_alloc
; 539  : template<bool _Al_has_storage,
; 540  : 	class _Alloc_types>
; 541  : 	class _String_alloc
; 542  : 		: public _String_val<typename _Alloc_types::_Val_types>
; 543  : 	{	// base class for basic_string to hold allocator with storage
; 544  : public:
; 545  : 	typedef _String_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 546  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 547  : 
; 548  : 	typedef typename _Alloc_types::_Alty _Alty;
; 549  : 
; 550  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 551  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 552  : 		: _Alval(_Al)
; 553  : 		{	// construct allocator from _Al
; 554  : 		}
; 555  : 
; 556  : 	void _Change_alloc(const _Alty& _Al)
; 557  : 		{	// replace old allocator
; 558  : 		_Alval = _Al;
; 559  : 		}
; 560  : 
; 561  : 	void _Swap_alloc(_Myt& _Right)
; 562  : 		{	// swap allocators
; 563  : 		_Swap_adl(this->_Alval, _Right._Alval);
; 564  : 		}
; 565  : 
; 566  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 567  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 568  : 		: _Alval(_Al)
; 569  : 		{	// construct allocator from _Al
; 570  : 		_Alloc_proxy();
; 571  : 		}
; 572  : 
; 573  : 	~_String_alloc() _NOEXCEPT
; 574  : 		{	// destroy the object
; 575  : 		_Free_proxy();
; 576  : 		}
; 577  : 
; 578  : 	void _Change_alloc(const _Alty& _Al)
; 579  : 		{	// replace old allocator
; 580  : 		_Free_proxy();
; 581  : 		_Alval = _Al;
; 582  : 		_Alloc_proxy();
; 583  : 		}
; 584  : 
; 585  : 	void _Swap_alloc(_Myt& _Right)
; 586  : 		{	// swap allocators
; 587  : 		_Swap_adl(_Alval, _Right._Alval);
; 588  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 589  : 		}
; 590  : 
; 591  : 	void _Alloc_proxy()
; 592  : 		{	// construct proxy from _Alval
; 593  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 594  : 			_Alproxy(_Alval);
; 595  : 		this->_Myproxy = _Alproxy.allocate(1);
; 596  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 597  : 		this->_Myproxy->_Mycont = this;
; 598  : 		}
; 599  : 
; 600  : 	void _Free_proxy()
; 601  : 		{	// destroy proxy
; 602  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 603  : 			_Alproxy(_Alval);
; 604  : 		this->_Orphan_all();
; 605  : 		_Alproxy.destroy(this->_Myproxy);
; 606  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 607  : 		this->_Myproxy = 0;
; 608  : 		}
; 609  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 610  : 
; 611  : 	_Alty& _Getal()
; 612  : 		{	// get reference to allocator
; 613  : 		return (_Alval);
; 614  : 		}
; 615  : 
; 616  : 	const _Alty& _Getal() const
; 617  : 		{	// get reference to allocator
; 618  : 		return (_Alval);
; 619  : 		}
; 620  : 
; 621  : 	_Alty _Alval;	// allocator object for strings
; 622  : 	};
; 623  : 
; 624  : template<class _Alloc_types>
; 625  : 	class _String_alloc<false, _Alloc_types>
; 626  : 		: public _String_val<typename _Alloc_types::_Val_types>
; 627  : 	{	// base class for basic_string to hold allocator with no storage
; 628  : public:
; 629  : 	typedef _String_alloc<false, _Alloc_types> _Myt;
; 630  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 631  : 
; 632  : 	typedef typename _Alloc_types::_Alty _Alty;
; 633  : 
; 634  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 635  : 	_String_alloc(const _Alloc& = _Alloc())
; 636  : 		{	// construct allocator from _Al
; 637  : 		}
; 638  : 
; 639  : 	void _Change_alloc(const _Alty&)
; 640  : 		{	// replace old allocator
; 641  : 		}
; 642  : 
; 643  : 	void _Swap_alloc(_Myt&)
; 644  : 		{	// swap allocators
; 645  : 		}
; 646  : 
; 647  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 648  : 	_String_alloc(const _Alloc& = _Alloc())
; 649  : 		{	// construct allocator from _Al
; 650  : 		_Alloc_proxy();
; 651  : 		}
; 652  : 
; 653  : 	~_String_alloc() _NOEXCEPT
; 654  : 		{	// destroy the object
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Change_alloc(const _Alty&)
; 659  : 		{	// replace old allocator
; 660  : 		}
; 661  : 
; 662  : 	void _Swap_alloc(_Myt& _Right)
; 663  : 		{	// swap allocators
; 664  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 665  : 		}
; 666  : 
; 667  : 	void _Alloc_proxy()
; 668  : 		{	// construct proxy from _Alval
; 669  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 670  : 			_Alproxy;
; 671  : 		this->_Myproxy = _Alproxy.allocate(1);
; 672  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 673  : 		this->_Myproxy->_Mycont = this;
; 674  : 		}
; 675  : 
; 676  : 	void _Free_proxy()
; 677  : 		{	// destroy proxy
; 678  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 679  : 			_Alproxy;
; 680  : 		this->_Orphan_all();
; 681  : 		_Alproxy.destroy(this->_Myproxy);
; 682  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 683  : 		this->_Myproxy = 0;
; 684  : 		}
; 685  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 686  : 
; 687  : 	_Alty _Getal() const
; 688  : 		{	// get reference to allocator
; 689  : 		return (_Alty());
; 690  : 		}
; 691  : 	};
; 692  : 
; 693  : 		// TEMPLATE CLASS basic_string
; 694  : template<class _Elem,
; 695  : 	class _Traits,
; 696  : 	class _Alloc>
; 697  : 	class basic_string
; 698  : 		: public _String_alloc<!is_empty<_Alloc>::value,
; 699  : 			_String_base_types<_Elem, _Alloc> >
; 700  : 	{	// null-terminated transparent array of elements
; 701  : public:
; 702  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 703  : 	typedef _String_alloc<!is_empty<_Alloc>::value,
; 704  : 		_String_base_types<_Elem, _Alloc> > _Mybase;
; 705  : 	typedef _Traits traits_type;
; 706  : 	typedef _Alloc allocator_type;
; 707  : 
; 708  : 	typedef typename _Mybase::_Alty _Alty;
; 709  : 
; 710  : 	typedef typename _Mybase::value_type value_type;
; 711  : 	typedef typename _Mybase::size_type size_type;
; 712  : 	typedef typename _Mybase::difference_type difference_type;
; 713  : 	typedef typename _Mybase::pointer pointer;
; 714  : 	typedef typename _Mybase::const_pointer const_pointer;
; 715  : 	typedef typename _Mybase::reference reference;
; 716  : 	typedef typename _Mybase::const_reference const_reference;
; 717  : 
; 718  : 	typedef typename _Mybase::iterator iterator;
; 719  : 	typedef typename _Mybase::const_iterator const_iterator;
; 720  : 
; 721  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 722  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 723  : 
; 724  : 	basic_string(const _Myt& _Right)
; 725  : 
; 726  :  #if _HAS_CPP0X
; 727  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 728  : 
; 729  :  #else /* _HAS_CPP0X */
; 730  : 		: _Mybase(_Right._Getal())
; 731  :  #endif /* _HAS_CPP0X */
; 732  : 
; 733  : 		{	// construct by copying _Right
; 734  : 		_Tidy();
; 735  : 		assign(_Right, 0, npos);
; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  000b7	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR __Str$5[esp+92], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  000bf	c6 44 24 20 00	 mov	 BYTE PTR __Str$5[esp+76], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 486  : 			string _Str;

  000c4	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+84], 0

; 487  : 
; 488  : 			for (; ; )
; 489  : 				{	// get using codecvt facet
; 490  : 				_Elem _Ch, *_Dest;
; 491  : 				const char *_Src;
; 492  : 				int _Nleft;
; 493  : 				int _Meta = fgetc(_Myfile);

  000cc	ff 73 50	 push	 DWORD PTR [ebx+80]
  000cf	e8 00 00 00 00	 call	 _fgetc
  000d4	83 c4 04	 add	 esp, 4

; 494  : 
; 495  : 				if (_Meta == EOF)

  000d7	83 f8 ff	 cmp	 eax, -1
  000da	0f 84 c5 00 00
	00		 je	 $LN232@uflow
$LL13@uflow:

; 496  : 					return (_Traits::eof());	// partial char?
; 497  : 
; 498  : 				_Str.append(1, (char)_Meta);	// append byte and convert

  000e0	50		 push	 eax
  000e1	6a 01		 push	 1
  000e3	8d 4c 24 28	 lea	 ecx, DWORD PTR __Str$5[esp+84]
  000e7	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  000ec	83 7c 24 34 10	 cmp	 DWORD PTR __Str$5[esp+96], 16 ; 00000010H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 501  : 					&_Ch, &_Ch + 1, _Dest))

  000f1	8b 4b 40	 mov	 ecx, DWORD PTR [ebx+64]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 861  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));

  000f4	8d 44 24 1c	 lea	 eax, DWORD PTR __Dest$4[esp+76]
  000f8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fa	50		 push	 eax
  000fb	8d 44 24 1c	 lea	 eax, DWORD PTR __Ch$2[esp+81]
  000ff	50		 push	 eax
  00100	8d 44 24 1f	 lea	 eax, DWORD PTR __Ch$2[esp+84]
  00104	50		 push	 eax
  00105	8d 44 24 24	 lea	 eax, DWORD PTR __Src$3[esp+88]
  00109	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 501  : 					&_Ch, &_Ch + 1, _Dest))

  0010a	8b 44 24 40	 mov	 eax, DWORD PTR __Str$5[esp+108]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  0010e	8d 7c 24 30	 lea	 edi, DWORD PTR __Str$5[esp+92]
  00112	0f 43 7c 24 30	 cmovae	 edi, DWORD PTR __Str$5[esp+92]
  00117	8d 74 24 30	 lea	 esi, DWORD PTR __Str$5[esp+92]
  0011b	0f 43 74 24 30	 cmovae	 esi, DWORD PTR __Str$5[esp+92]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 501  : 					&_Ch, &_Ch + 1, _Dest))

  00120	03 c7		 add	 eax, edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 861  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));

  00122	50		 push	 eax
  00123	56		 push	 esi
  00124	8d 43 48	 lea	 eax, DWORD PTR [ebx+72]
  00127	50		 push	 eax
  00128	ff 52 18	 call	 DWORD PTR [edx+24]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 501  : 					&_Ch, &_Ch + 1, _Dest))

  0012b	85 c0		 test	 eax, eax
  0012d	78 76		 js	 SHORT $LN232@uflow
  0012f	83 f8 01	 cmp	 eax, 1
  00132	7e 33		 jle	 SHORT $LN8@uflow
  00134	83 f8 03	 cmp	 eax, 3
  00137	75 6c		 jne	 SHORT $LN232@uflow

; 515  : 					break;
; 516  : 
; 517  : 				case codecvt_base::noconv:
; 518  : 					if (_Str.size() < sizeof (_Elem))

  00139	83 7c 24 30 01	 cmp	 DWORD PTR __Str$5[esp+92], 1
  0013e	72 51		 jb	 SHORT $LN4@uflow
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  00140	83 7c 24 34 10	 cmp	 DWORD PTR __Str$5[esp+96], 16 ; 00000010H
  00145	8d 44 24 20	 lea	 eax, DWORD PTR __Str$5[esp+76]
  00149	0f 43 44 24 20	 cmovae	 eax, DWORD PTR __Str$5[esp+76]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 521  : 					_CRT_SECURE_MEMCPY(&_Ch, sizeof (_Elem), &*_Str.begin(),

  0014e	6a 01		 push	 1
  00150	50		 push	 eax
  00151	8d 44 24 1f	 lea	 eax, DWORD PTR __Ch$2[esp+84]
  00155	6a 01		 push	 1
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 _memcpy_s
  0015d	83 c4 10	 add	 esp, 16			; 00000010H
$LN242@uflow:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  00160	0f b6 74 24 17	 movzx	 esi, BYTE PTR __Ch$2[esp+76]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 524  : 					return (_Traits::to_int_type(_Ch));	// return result

  00165	eb 41		 jmp	 SHORT $LN26@uflow
$LN8@uflow:

; 502  : 					{	// test result of converting one element
; 503  : 				case codecvt_base::partial:
; 504  : 				case codecvt_base::ok:
; 505  : 					if (_Dest != &_Ch)

  00167	8d 44 24 17	 lea	 eax, DWORD PTR __Ch$2[esp+76]
  0016b	39 44 24 1c	 cmp	 DWORD PTR __Dest$4[esp+76], eax

; 514  : 							(size_t)(_Src - &*_Str.begin()));

  0016f	8b 44 24 18	 mov	 eax, DWORD PTR __Src$3[esp+76]
  00173	75 66		 jne	 SHORT $LN234@uflow
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  00175	83 7c 24 34 10	 cmp	 DWORD PTR __Str$5[esp+96], 16 ; 00000010H
  0017a	8d 4c 24 20	 lea	 ecx, DWORD PTR __Str$5[esp+76]
  0017e	0f 43 4c 24 20	 cmovae	 ecx, DWORD PTR __Str$5[esp+76]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 514  : 							(size_t)(_Src - &*_Str.begin()));

  00183	2b c1		 sub	 eax, ecx
  00185	50		 push	 eax
  00186	6a 00		 push	 0
  00188	8d 4c 24 28	 lea	 ecx, DWORD PTR __Str$5[esp+84]
  0018c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
$LN4@uflow:

; 487  : 
; 488  : 			for (; ; )
; 489  : 				{	// get using codecvt facet
; 490  : 				_Elem _Ch, *_Dest;
; 491  : 				const char *_Src;
; 492  : 				int _Nleft;
; 493  : 				int _Meta = fgetc(_Myfile);

  00191	ff 73 50	 push	 DWORD PTR [ebx+80]
  00194	e8 00 00 00 00	 call	 _fgetc
  00199	83 c4 04	 add	 esp, 4

; 494  : 
; 495  : 				if (_Meta == EOF)

  0019c	83 f8 ff	 cmp	 eax, -1
  0019f	0f 85 3b ff ff
	ff		 jne	 $LL13@uflow
$LN232@uflow:
  001a5	83 ce ff	 or	 esi, -1
$LN26@uflow:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  001a8	83 7c 24 34 10	 cmp	 DWORD PTR __Str$5[esp+96], 16 ; 00000010H
  001ad	72 0c		 jb	 SHORT $LN218@uflow
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  001af	ff 74 24 20	 push	 DWORD PTR __Str$5[esp+76]
  001b3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001b8	83 c4 04	 add	 esp, 4
$LN218@uflow:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 527  : 					return (_Traits::eof());	// conversion failed

  001bb	8b c6		 mov	 eax, esi
$LN14@uflow:

; 528  : 					}
; 529  : 				}
; 530  : 			}
; 531  : 		}

  001bd	8b 4c 24 40	 mov	 ecx, DWORD PTR __$EHRec$[esp+76]
  001c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c8	59		 pop	 ecx
  001c9	5f		 pop	 edi
  001ca	5e		 pop	 esi
  001cb	5b		 pop	 ebx
  001cc	8b 4c 24 28	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+60]
  001d0	33 cc		 xor	 ecx, esp
  001d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c3		 ret	 0
$LN234@uflow:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  001db	83 7c 24 34 10	 cmp	 DWORD PTR __Str$5[esp+96], 16 ; 00000010H
  001e0	8d 74 24 20	 lea	 esi, DWORD PTR __Str$5[esp+76]
  001e4	0f 43 74 24 20	 cmovae	 esi, DWORD PTR __Str$5[esp+76]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 507  : 						_Nleft = (int)(&*_Str.begin() + _Str.size() - _Src);

  001e9	2b f0		 sub	 esi, eax
  001eb	03 74 24 30	 add	 esi, DWORD PTR __Str$5[esp+92]

; 508  : 						for (; 0 < _Nleft; )

  001ef	85 f6		 test	 esi, esi
  001f1	0f 8e 69 ff ff
	ff		 jle	 $LN242@uflow
$LL6@uflow:

; 509  : 							ungetc(_Src[--_Nleft], _Myfile);

  001f7	0f be 44 06 ff	 movsx	 eax, BYTE PTR [esi+eax-1]
  001fc	ff 73 50	 push	 DWORD PTR [ebx+80]
  001ff	4e		 dec	 esi
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 _ungetc
  00206	83 c4 08	 add	 esp, 8
  00209	85 f6		 test	 esi, esi
  0020b	0f 8e 4f ff ff
	ff		 jle	 $LN242@uflow

; 508  : 						for (; 0 < _Nleft; )

  00211	8b 44 24 18	 mov	 eax, DWORD PTR __Src$3[esp+76]
  00215	eb e0		 jmp	 SHORT $LL6@uflow
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Str$5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 c4	 lea	 eax, DWORD PTR [edx-60]
  0000f	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::uflow
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
_TEXT	SEGMENT
__Fileposition$ = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Way$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 537  : 		{	// change position by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 221  : 		return (*_IGnext);

  0000e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 542  : 			&& _Pcvt == 0)	// not converting

  00011	8d 4e 44	 lea	 ecx, DWORD PTR [esi+68]
  00014	39 08		 cmp	 DWORD PTR [eax], ecx
  00016	75 1a		 jne	 SHORT $LN21@seekoff
  00018	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  0001c	75 14		 jne	 SHORT $LN21@seekoff
  0001e	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  00022	75 0e		 jne	 SHORT $LN21@seekoff

; 543  : 			_Off -= (off_type)sizeof (_Elem);	// back up over _Elem bytes

  00024	8b 7d 0c	 mov	 edi, DWORD PTR __Off$[ebp]
  00027	8b 5d 10	 mov	 ebx, DWORD PTR __Off$[ebp+4]
  0002a	83 c7 ff	 add	 edi, -1
  0002d	83 d3 ff	 adc	 ebx, -1
  00030	eb 06		 jmp	 SHORT $LN5@seekoff
$LN21@seekoff:
  00032	8b 5d 10	 mov	 ebx, DWORD PTR __Off$[ebp+4]
  00035	8b 7d 0c	 mov	 edi, DWORD PTR __Off$[ebp]
$LN5@seekoff:

; 544  : 
; 545  : 		if (_Myfile == 0 || !_Endwrite()
; 546  : 			|| (_Off != 0 || _Way != ios_base::cur)
; 547  : 				&& _FSEEK_OFF(_Myfile, _Off, _Way) != 0
; 548  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

  00038	83 7e 50 00	 cmp	 DWORD PTR [esi+80], 0
  0003c	0f 84 8a 00 00
	00		 je	 $LN3@seekoff
  00042	8b ce		 mov	 ecx, esi
  00044	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00049	84 c0		 test	 al, al
  0004b	74 7f		 je	 SHORT $LN3@seekoff
  0004d	8b c7		 mov	 eax, edi
  0004f	0b c3		 or	 eax, ebx
  00051	8b 45 14	 mov	 eax, DWORD PTR __Way$[ebp]
  00054	75 05		 jne	 SHORT $LN1@seekoff
  00056	83 f8 01	 cmp	 eax, 1
  00059	74 12		 je	 SHORT $LN2@seekoff
$LN1@seekoff:
  0005b	50		 push	 eax
  0005c	53		 push	 ebx
  0005d	57		 push	 edi
  0005e	ff 76 50	 push	 DWORD PTR [esi+80]
  00061	e8 00 00 00 00	 call	 __fseeki64
  00066	83 c4 10	 add	 esp, 16			; 00000010H
  00069	85 c0		 test	 eax, eax
  0006b	75 5f		 jne	 SHORT $LN3@seekoff
$LN2@seekoff:
  0006d	8d 44 24 10	 lea	 eax, DWORD PTR __Fileposition$[esp+24]
  00071	50		 push	 eax
  00072	ff 76 50	 push	 DWORD PTR [esi+80]
  00075	e8 00 00 00 00	 call	 _fgetpos
  0007a	83 c4 08	 add	 esp, 8
  0007d	85 c0		 test	 eax, eax
  0007f	75 4b		 jne	 SHORT $LN3@seekoff
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 216  : 		return (*_IGfirst);

  00081	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 688  : 		if (_Mysb::eback() == &_Mychar)

  00084	8d 46 44	 lea	 eax, DWORD PTR [esi+68]
  00087	39 02		 cmp	 DWORD PTR [edx], eax
  00089	75 14		 jne	 SHORT $LN17@seekoff
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 247  : 		*_IGfirst = _First;

  0008b	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 689  : 			_Mysb::setg(_Set_eback, _Set_egptr, _Set_egptr);

  0008e	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 247  : 		*_IGfirst = _First;

  00091	89 02		 mov	 DWORD PTR [edx], eax

; 248  : 		*_IGnext = _Next;

  00093	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00096	89 08		 mov	 DWORD PTR [eax], ecx

; 249  : 		*_IGcount = (int)(_Last - _Next);

  00098	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0009b	2b c9		 sub	 ecx, ecx
  0009d	89 08		 mov	 DWORD PTR [eax], ecx
$LN17@seekoff:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 48   : 		{	// construct with conversion state and C file position

  0009f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a2	8b 4c 24 10	 mov	 ecx, DWORD PTR __Fileposition$[esp+24]
  000a6	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000a9	8b 4c 24 14	 mov	 ecx, DWORD PTR __Fileposition$[esp+28]
  000ad	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  000b0	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000b3	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000b9	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  000c0	89 48 10	 mov	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 554  : 		}

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 14 00	 ret	 20			; 00000014H
$LN3@seekoff:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 43   : 		{	// construct with stream offset

  000cc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3_JB
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 554  : 		}

  000d5	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 43   : 		{	// construct with stream offset

  000d6	89 08		 mov	 DWORD PTR [eax], ecx
  000d8	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3_JB+4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 554  : 		}

  000de	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 43   : 		{	// construct with stream offset

  000df	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000e2	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  000e9	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  000f0	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 554  : 		}

  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
__Fileposition$ = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Pos$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 559  : 		{	// change position to _Pos

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 560  : 		fpos_t _Fileposition = _POS_TYPE_TO_FPOS_T(_Pos);

  00009	8b 45 14	 mov	 eax, DWORD PTR __Pos$[ebp+8]
  0000c	53		 push	 ebx

; 561  : 		off_type _Off = (off_type)_Pos - (off_type)_FPOSOFF(_Fileposition);

  0000d	8b 5d 10	 mov	 ebx, DWORD PTR __Pos$[ebp+4]
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx
  00013	89 44 24 0c	 mov	 DWORD PTR __Fileposition$[esp+20], eax

; 562  : 
; 563  : 		if (_Myfile == 0 || !_Endwrite()
; 564  : 			|| fsetpos(_Myfile, &_Fileposition) != 0
; 565  : 			|| _Off != 0 && _FSEEK_OFF(_Myfile, _Off, SEEK_CUR) != 0
; 566  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

  00017	83 7e 50 00	 cmp	 DWORD PTR [esi+80], 0
  0001b	8b 45 18	 mov	 eax, DWORD PTR __Pos$[ebp+12]
  0001e	57		 push	 edi
  0001f	8b 7d 0c	 mov	 edi, DWORD PTR __Pos$[ebp]
  00022	89 44 24 14	 mov	 DWORD PTR __Fileposition$[esp+28], eax
  00026	0f 84 84 00 00
	00		 je	 $LN2@seekpos
  0002c	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00031	84 c0		 test	 al, al
  00033	74 7b		 je	 SHORT $LN2@seekpos
  00035	8d 44 24 10	 lea	 eax, DWORD PTR __Fileposition$[esp+24]
  00039	50		 push	 eax
  0003a	ff 76 50	 push	 DWORD PTR [esi+80]
  0003d	e8 00 00 00 00	 call	 _fsetpos
  00042	83 c4 08	 add	 esp, 8
  00045	85 c0		 test	 eax, eax
  00047	75 67		 jne	 SHORT $LN2@seekpos
  00049	8b c7		 mov	 eax, edi
  0004b	0b c3		 or	 eax, ebx
  0004d	74 13		 je	 SHORT $LN1@seekpos
  0004f	6a 01		 push	 1
  00051	53		 push	 ebx
  00052	57		 push	 edi
  00053	ff 76 50	 push	 DWORD PTR [esi+80]
  00056	e8 00 00 00 00	 call	 __fseeki64
  0005b	83 c4 10	 add	 esp, 16			; 00000010H
  0005e	85 c0		 test	 eax, eax
  00060	75 4e		 jne	 SHORT $LN2@seekpos
$LN1@seekpos:
  00062	8d 44 24 10	 lea	 eax, DWORD PTR __Fileposition$[esp+24]
  00066	50		 push	 eax
  00067	ff 76 50	 push	 DWORD PTR [esi+80]
  0006a	e8 00 00 00 00	 call	 _fgetpos
  0006f	83 c4 08	 add	 esp, 8
  00072	85 c0		 test	 eax, eax
  00074	75 3a		 jne	 SHORT $LN2@seekpos

; 567  : 			return (pos_type(_BADOFF));	// report failure
; 568  : 
; 569  : 		_State = _POS_TYPE_TO_STATE(_Pos);

  00076	8b 45 1c	 mov	 eax, DWORD PTR __Pos$[ebp+16]

; 570  : 
; 571  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback

  00079	8b ce		 mov	 ecx, esi
  0007b	89 46 48	 mov	 DWORD PTR [esi+72], eax
  0007e	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 48   : 		{	// construct with conversion state and C file position

  00083	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00086	8b 4c 24 10	 mov	 ecx, DWORD PTR __Fileposition$[esp+24]
  0008a	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0008d	8b 4c 24 14	 mov	 ecx, DWORD PTR __Fileposition$[esp+28]
  00091	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00094	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00097	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0009d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  000a4	89 48 10	 mov	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 574  : 		}

  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 20 00	 ret	 32			; 00000020H
$LN2@seekpos:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 43   : 		{	// construct with stream offset

  000b0	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3_JB
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 574  : 		}

  000b9	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 43   : 		{	// construct with stream offset

  000ba	89 08		 mov	 DWORD PTR [eax], ecx
  000bc	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?_BADOFF@std@@3_JB+4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 574  : 		}

  000c2	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 43   : 		{	// construct with stream offset

  000c3	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  000c6	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  000cd	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  000d4	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 574  : 		}

  000db	5b		 pop	 ebx
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Count$ = 12						; size = 8
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 577  : 		{	// offer _Buffer to C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 578  : 		if (_Myfile == 0 || setvbuf(_Myfile, (char *)_Buffer,
; 579  : 			_Buffer == 0 && _Count == 0 ? _IONBF : _IOFBF,
; 580  : 			(size_t)_Count * sizeof (_Elem)) != 0)

  00006	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 3b		 je	 SHORT $LN2@setbuf
  0000d	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00010	85 d2		 test	 edx, edx
  00012	75 0d		 jne	 SHORT $LN6@setbuf
  00014	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00017	0b 45 10	 or	 eax, DWORD PTR __Count$[ebp+4]
  0001a	75 05		 jne	 SHORT $LN6@setbuf
  0001c	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  0001f	eb 02		 jmp	 SHORT $LN7@setbuf
$LN6@setbuf:
  00021	33 c0		 xor	 eax, eax
$LN7@setbuf:
  00023	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00026	50		 push	 eax
  00027	52		 push	 edx
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _setvbuf
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
  00031	85 c0		 test	 eax, eax
  00033	75 13		 jne	 SHORT $LN2@setbuf

; 582  : 		else
; 583  : 			{	// new buffer, reinitialize pointers
; 584  : 			_Init(_Myfile, _Openfl);

  00035	6a 01		 push	 1
  00037	ff 76 50	 push	 DWORD PTR [esi+80]
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 585  : 			return (this);

  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi

; 586  : 			}
; 587  : 		}

  00044	5d		 pop	 ebp
  00045	c2 0c 00	 ret	 12			; 0000000cH
$LN2@setbuf:

; 581  : 			return (0);	// failed

  00048	33 c0		 xor	 eax, eax
  0004a	5e		 pop	 esi

; 586  : 			}
; 587  : 		}

  0004b	5d		 pop	 ebp
  0004c	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 590  : 		{	// synchronize C stream with external file

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 593  : 			|| 0 <= fflush(_Myfile) ? 0 : -1);

  00003	83 7e 50 00	 cmp	 DWORD PTR [esi+80], 0
  00007	74 20		 je	 SHORT $LN3@sync
  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	6a ff		 push	 -1
  0000d	ff 50 0c	 call	 DWORD PTR [eax+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  00010	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 593  : 			|| 0 <= fflush(_Myfile) ? 0 : -1);

  00013	74 14		 je	 SHORT $LN3@sync
  00015	ff 76 50	 push	 DWORD PTR [esi+80]
  00018	e8 00 00 00 00	 call	 _fflush
  0001d	83 c4 04	 add	 esp, 4
  00020	85 c0		 test	 eax, eax
  00022	79 05		 jns	 SHORT $LN3@sync
  00024	83 c8 ff	 or	 eax, -1
  00027	5e		 pop	 esi

; 594  : 		}

  00028	c3		 ret	 0
$LN3@sync:

; 593  : 			|| 0 <= fflush(_Myfile) ? 0 : -1);

  00029	33 c0		 xor	 eax, eax
  0002b	5e		 pop	 esi

; 594  : 		}

  0002c	c3		 ret	 0
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
__Loc$ = 8						; size = 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 597  : 		{	// set locale to argument (capture nontrivial codecvt facet)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 598  : 		_Initcvt(&_USE(_Loc, _Cvt));

  00004	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
  0000e	83 c4 04	 add	 esp, 4
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
  00019	5e		 pop	 esi

; 599  : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
__Sb$dead$ = 8						; size = 4
??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::istreambuf_iterator<char,std::char_traits<char> >::istreambuf_iterator<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 490  : 		{	// construct from stream buffer _Sb

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1

; 491  : 		}

  0000a	8b c1		 mov	 eax, ecx
  0000c	c2 04 00	 ret	 4
??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::istreambuf_iterator<char,std::char_traits<char> >::istreambuf_iterator<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@AAV?$basic_istream@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@AAV?$basic_istream@DU?$char_traits@D@std@@@1@@Z PROC ; std::istreambuf_iterator<char,std::char_traits<char> >::istreambuf_iterator<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 495  : 		{	// construct from stream buffer in istream _Istr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000b	8b 44 10 38	 mov	 eax, DWORD PTR [eax+edx+56]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
  00011	8b 02		 mov	 eax, DWORD PTR [edx]
  00013	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00016	83 7c 10 38 00	 cmp	 DWORD PTR [eax+edx+56], 0
  0001b	0f 94 c0	 sete	 al
  0001e	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 496  : 		}

  00021	8b c1		 mov	 eax, ecx
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@AAV?$basic_istream@DU?$char_traits@D@std@@@1@@Z ENDP ; std::istreambuf_iterator<char,std::char_traits<char> >::istreambuf_iterator<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 486  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 487  : 		_Mylast = pointer();

  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 488  : 		_Myend = pointer();

  0000d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 686  : 		}

  00014	8b c1		 mov	 eax, ecx
  00016	c3		 ret	 0
??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 899  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 902  : 
; 903  : 	_Myt& operator=(const _Myt& _Right)
; 904  : 		{	// assign _Right
; 905  : 		if (this != &_Right)
; 906  : 			{	// different, assign it
; 907  :  #if _HAS_CPP0X
; 908  : 			if (this->_Getal() != _Right._Getal()
; 909  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 910  : 				{	// change allocator before copying
; 911  : 				_Tidy();
; 912  : 				this->_Change_alloc(_Right._Getal());
; 913  : 				}
; 914  :  #endif /* _HAS_CPP0X */
; 915  : 
; 916  : 			this->_Orphan_all();
; 917  : 
; 918  : 			if (_Right.empty())
; 919  : 				clear();	// new sequence empty, erase existing sequence
; 920  : 			else if (_Right.size() <= size())
; 921  : 				{	// enough elements, copy new and destroy old
; 922  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 923  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 924  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 925  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 926  : 				}
; 927  : 			else if (_Right.size() <= capacity())
; 928  : 				{	// enough room, copy and construct new
; 929  : 				pointer _Ptr = _Right._Myfirst + size();
; 930  : 				_Copy_impl(_Right._Myfirst,
; 931  : 					_Ptr, this->_Myfirst);
; 932  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 933  : 				}
; 934  : 			else
; 935  : 				{	// not enough room, allocate new array and construct new
; 936  : 				if (this->_Myfirst != pointer())
; 937  : 					{	// discard old array
; 938  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 939  : 					this->_Getal().deallocate(this->_Myfirst,
; 940  : 						this->_Myend - this->_Myfirst);
; 941  : 					}
; 942  : 				if (_Buy(_Right.size()))
; 943  : 					_TRY_BEGIN
; 944  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 945  : 						this->_Myfirst);
; 946  : 					_CATCH_ALL
; 947  : 					_Tidy();
; 948  : 					_RERAISE;
; 949  : 					_CATCH_END
; 950  : 				}
; 951  : 			}
; 952  : 		return (*this);
; 953  : 		}
; 954  : 
; 955  : 	void reserve(size_type _Count)
; 956  : 		{	// determine new minimum length of allocated storage
; 957  : 		if (capacity() < _Count)
; 958  : 			{	// something to do, check and reallocate
; 959  : 			if (max_size() < _Count)
; 960  : 				_Xlen();
; 961  : 			_Reallocate(_Count);
; 962  : 			}
; 963  : 		}
; 964  : 
; 965  : 	size_type capacity() const _NOEXCEPT
; 966  : 		{	// return current length of allocated storage
; 967  : 		return (this->_Myend - this->_Myfirst);
; 968  : 		}
; 969  : 
; 970  : 	size_type _Unused_capacity() const _NOEXCEPT
; 971  : 		{	// micro-optimization for capacity() - size()
; 972  : 		return (this->_Myend - this->_Mylast);
; 973  : 		}
; 974  : 
; 975  : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 976  : 		{	// micro-optimization for capacity() != size()
; 977  : 		return (this->_Myend != this->_Mylast);
; 978  : 		}
; 979  : 
; 980  : 	iterator begin() _NOEXCEPT
; 981  : 		{	// return iterator for beginning of mutable sequence
; 982  : 		return (iterator(this->_Myfirst, this));
; 983  : 		}
; 984  : 
; 985  : 	const_iterator begin() const _NOEXCEPT
; 986  : 		{	// return iterator for beginning of nonmutable sequence
; 987  : 		return (const_iterator(this->_Myfirst, this));
; 988  : 		}
; 989  : 
; 990  : 	iterator end() _NOEXCEPT
; 991  : 		{	// return iterator for end of mutable sequence
; 992  : 		return (iterator(this->_Mylast, this));
; 993  : 		}
; 994  : 
; 995  : 	const_iterator end() const _NOEXCEPT
; 996  : 		{	// return iterator for end of nonmutable sequence
; 997  : 		return (const_iterator(this->_Mylast, this));
; 998  : 		}
; 999  : 
; 1000 : 	iterator _Make_iter(const_iterator _Where) const
; 1001 : 		{	// make iterator from const_iterator
; 1002 : 		return (iterator(_Where._Ptr, this));
; 1003 : 		}
; 1004 : 
; 1005 : 	reverse_iterator rbegin() _NOEXCEPT
; 1006 : 		{	// return iterator for beginning of reversed mutable sequence
; 1007 : 		return (reverse_iterator(end()));
; 1008 : 		}
; 1009 : 
; 1010 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1011 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1012 : 		return (const_reverse_iterator(end()));
; 1013 : 		}
; 1014 : 
; 1015 : 	reverse_iterator rend() _NOEXCEPT
; 1016 : 		{	// return iterator for end of reversed mutable sequence
; 1017 : 		return (reverse_iterator(begin()));
; 1018 : 		}
; 1019 : 
; 1020 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1021 : 		{	// return iterator for end of reversed nonmutable sequence
; 1022 : 		return (const_reverse_iterator(begin()));
; 1023 : 		}
; 1024 : 
; 1025 :  #if _HAS_CPP0X
; 1026 : 	const_iterator cbegin() const _NOEXCEPT
; 1027 : 		{	// return iterator for beginning of nonmutable sequence
; 1028 : 		return (((const _Myt *)this)->begin());
; 1029 : 		}
; 1030 : 
; 1031 : 	const_iterator cend() const _NOEXCEPT
; 1032 : 		{	// return iterator for end of nonmutable sequence
; 1033 : 		return (((const _Myt *)this)->end());
; 1034 : 		}
; 1035 : 
; 1036 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1037 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1038 : 		return (((const _Myt *)this)->rbegin());
; 1039 : 		}
; 1040 : 
; 1041 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1042 : 		{	// return iterator for end of reversed nonmutable sequence
; 1043 : 		return (((const _Myt *)this)->rend());
; 1044 : 		}
; 1045 : 
; 1046 : 	void shrink_to_fit()
; 1047 : 		{	// reduce capacity
; 1048 : 		if (_Has_unused_capacity())
; 1049 : 			{	// worth shrinking, do it
; 1050 : 			if (empty())
; 1051 : 				_Tidy();
; 1052 : 			else
; 1053 : 				_Reallocate(size());
; 1054 : 			}
; 1055 : 		}
; 1056 :  #endif /* _HAS_CPP0X */
; 1057 : 
; 1058 : 	void resize(size_type _Newsize)
; 1059 : 		{	// determine new length, padding as needed
; 1060 : 		if (_Newsize < size())
; 1061 : 			erase(begin() + _Newsize, end());
; 1062 : 		else if (size() < _Newsize)
; 1063 : 			{	// pad as needed
; 1064 : 			_Alty _Alval(this->_Getal());
; 1065 : 			_Reserve(_Newsize - size());
; 1066 : 			_TRY_BEGIN
; 1067 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1068 : 				_Alval);
; 1069 : 			_CATCH_ALL
; 1070 : 			_Tidy();
; 1071 : 			_RERAISE;
; 1072 : 			_CATCH_END
; 1073 : 			this->_Mylast += _Newsize - size();
; 1074 : 			}
; 1075 : 		}
; 1076 : 
; 1077 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1078 : 		{	// determine new length, padding with _Val elements as needed
; 1079 : 		if (_Newsize < size())
; 1080 : 			erase(begin() + _Newsize, end());
; 1081 : 		else if (size() < _Newsize)
; 1082 : 			_Insert_n(end(), _Newsize - size(), _Val);
; 1083 : 		}
; 1084 : 
; 1085 : 	size_type size() const _NOEXCEPT
; 1086 : 		{	// return length of sequence
; 1087 : 		return (this->_Mylast - this->_Myfirst);
; 1088 : 		}
; 1089 : 
; 1090 : 	size_type max_size() const _NOEXCEPT
; 1091 : 		{	// return maximum possible length of sequence
; 1092 : 		return (this->_Getal().max_size());
; 1093 : 		}
; 1094 : 
; 1095 : 	bool empty() const _NOEXCEPT
; 1096 : 		{	// test if sequence is empty
; 1097 : 		return (this->_Myfirst == this->_Mylast);
; 1098 : 		}
; 1099 : 
; 1100 : 	_Alloc get_allocator() const _NOEXCEPT
; 1101 : 		{	// return allocator object for values
; 1102 : 		return (this->_Getal());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_reference at(size_type _Pos) const
; 1106 : 		{	// subscript nonmutable sequence with checking
; 1107 : 		if (size() <= _Pos)
; 1108 : 			_Xran();
; 1109 : 		return (*(this->_Myfirst + _Pos));
; 1110 : 		}
; 1111 : 
; 1112 : 	reference at(size_type _Pos)
; 1113 : 		{	// subscript mutable sequence with checking
; 1114 : 		if (size() <= _Pos)
; 1115 : 			_Xran();
; 1116 : 		return (*(this->_Myfirst + _Pos));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_reference operator[](size_type _Pos) const
; 1120 : 		{	// subscript nonmutable sequence
; 1121 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 : 		if (size() <= _Pos)
; 1123 : 			{	// report error
; 1124 : 			_DEBUG_ERROR("vector subscript out of range");
; 1125 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1126 : 			}
; 1127 : 
; 1128 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1129 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1130 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1131 : 
; 1132 : 		return (*(this->_Myfirst + _Pos));
; 1133 : 		}
; 1134 : 
; 1135 : 	reference operator[](size_type _Pos)
; 1136 : 		{	// subscript mutable sequence
; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));
; 1149 : 		}
; 1150 : 
; 1151 :  #if _HAS_CPP0X
; 1152 : 	pointer data() _NOEXCEPT
; 1153 : 		{	// return address of first element
; 1154 : 		return (this->_Myfirst);
; 1155 : 		}
; 1156 : 
; 1157 : 	const_pointer data() const _NOEXCEPT
; 1158 : 		{	// return address of first element
; 1159 : 		return (this->_Myfirst);
; 1160 : 		}
; 1161 :  #endif /* _HAS_CPP0X */
; 1162 : 
; 1163 : 	reference front()
; 1164 : 		{	// return first element of mutable sequence
; 1165 : 		return (*begin());
; 1166 : 		}
; 1167 : 
; 1168 : 	const_reference front() const
; 1169 : 		{	// return first element of nonmutable sequence
; 1170 : 		return (*begin());
; 1171 : 		}
; 1172 : 
; 1173 : 	reference back()
; 1174 : 		{	// return last element of mutable sequence
; 1175 : 		return (*(end() - 1));
; 1176 : 		}
; 1177 : 
; 1178 : 	const_reference back() const
; 1179 : 		{	// return last element of nonmutable sequence
; 1180 : 		return (*(end() - 1));
; 1181 : 		}
; 1182 : 
; 1183 : 	void push_back(const value_type& _Val)
; 1184 : 		{	// insert element at end
; 1185 : 		if (_Inside(_STD addressof(_Val)))
; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1188 : 			if (this->_Mylast == this->_Myend)
; 1189 : 				_Reserve(1);
; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);
; 1193 : 			++this->_Mylast;
; 1194 : 			}
; 1195 : 		else
; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)
; 1198 : 				_Reserve(1);
; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);
; 1202 : 			++this->_Mylast;
; 1203 : 			}
; 1204 : 		}
; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1489 : 		if (_Capacity < _Count)
; 1490 : 			_Capacity = _Count;
; 1491 : 		return (_Capacity);
; 1492 : 		}
; 1493 : 
; 1494 : 	bool _Inside(const value_type *_Ptr) const
; 1495 : 		{	// test if _Ptr points inside vector
; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1497 : 		}
; 1498 : 
; 1499 : 	void _Reallocate(size_type _Count)
; 1500 : 		{	// move to array of exactly _Count elements
; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1502 : 
; 1503 : 		_TRY_BEGIN
; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1507 : 		_RERAISE;
; 1508 : 		_CATCH_END
; 1509 : 
; 1510 : 		size_type _Size = size();
; 1511 : 		if (this->_Myfirst != pointer())
; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);
; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();
; 1519 : 		this->_Myend = _Ptr + _Count;
; 1520 : 		this->_Mylast = _Ptr + _Size;
; 1521 : 		this->_Myfirst = _Ptr;
; 1522 : 		}
; 1523 : 
; 1524 : 	void _Reserve(size_type _Count)
; 1525 : 		{	// ensure room for _Count new elements, grow exponentially
; 1526 : 		if (_Unused_capacity() < _Count)
; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)
; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));
; 1531 : 			}
; 1532 : 		}
; 1533 : 
; 1534 : 	void _Tidy()
; 1535 : 		{	// free all storage
; 1536 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN3@vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1542 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1543 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1544 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN3@vector:
  00026	5e		 pop	 esi

; 900  : 		_Tidy();
; 901  : 		}

  00027	c3		 ret	 0
??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::operator[], COMDAT
; _this$ = ecx

; 1136 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	03 45 08	 add	 eax, DWORD PTR __Pos$[ebp]

; 1149 : 		}

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
??A?$vector@EV?$allocator@E@std@@@std@@QAEAAEI@Z ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 532  : 		_Ios_base_dtor(this);

  00006	56		 push	 esi
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  0000d	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00012	83 c4 04	 add	 esp, 4
  00015	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00019	74 09		 je	 SHORT $LN8@scalar
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00021	83 c4 04	 add	 esp, 4
$LN8@scalar:
  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 71 e8	 lea	 esi, DWORD PTR [ecx-24]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 71   : 		{	// destroy the object

  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	8d 56 18	 lea	 edx, DWORD PTR [esi+24]
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 532  : 		_Ios_base_dtor(this);

  0000f	52		 push	 edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 71   : 		{	// destroy the object

  00010	c7 44 10 e8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-24], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00018	8b 42 e8	 mov	 eax, DWORD PTR [edx-24]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  00021	89 44 11 e4	 mov	 DWORD PTR [ecx+edx-28], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 531  : 		{	// destroy the object

  00025	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ios_base@std@@6B@

; 532  : 		_Ios_base_dtor(this);

  0002b	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00030	83 c4 04	 add	 esp, 4
  00033	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00037	74 09		 je	 SHORT $LN12@scalar
  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003f	83 c4 04	 add	 esp, 4
$LN12@scalar:
  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 80   : 		_DELETE_CRT(_Plocale);

  00007	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  00010	85 ff		 test	 edi, edi
  00012	74 20		 je	 SHORT $LN8@scalar
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 422  : 		if (_Ptr != 0)

  00014	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00016	85 c9		 test	 ecx, ecx
  00018	74 11		 je	 SHORT $LN14@scalar

; 423  : 			_DELETE_CRT(_Ptr->_Decref());

  0001a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001c	ff 50 08	 call	 DWORD PTR [eax+8]
  0001f	85 c0		 test	 eax, eax
  00021	74 08		 je	 SHORT $LN14@scalar
  00023	8b 10		 mov	 edx, DWORD PTR [eax]
  00025	6a 01		 push	 1
  00027	8b c8		 mov	 ecx, eax
  00029	ff 12		 call	 DWORD PTR [edx]
$LN14@scalar:
  0002b	57		 push	 edi
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00031	83 c4 04	 add	 esp, 4
$LN8@scalar:
  00034	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00038	74 09		 je	 SHORT $LN16@scalar
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00040	83 c4 04	 add	 esp, 4
$LN16@scalar:
  00043	5f		 pop	 edi
  00044	8b c6		 mov	 eax, esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??_Glocale@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glocale@std@@QAEPAXI@Z PROC				; std::locale::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 422  : 		if (_Ptr != 0)

  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	85 c9		 test	 ecx, ecx
  0000a	74 11		 je	 SHORT $LN7@scalar

; 423  : 			_DELETE_CRT(_Ptr->_Decref());

  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	ff 50 08	 call	 DWORD PTR [eax+8]
  00011	85 c0		 test	 eax, eax
  00013	74 08		 je	 SHORT $LN7@scalar
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	6a 01		 push	 1
  00019	8b c8		 mov	 ecx, eax
  0001b	ff 12		 call	 DWORD PTR [edx]
$LN7@scalar:
  0001d	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00021	74 09		 je	 SHORT $LN9@scalar
  00023	56		 push	 esi
  00024	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00029	83 c4 04	 add	 esp, 4
$LN9@scalar:
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??_Glocale@std@@QAEPAXI@Z ENDP				; std::locale::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8d 79 90	 lea	 edi, DWORD PTR [ecx-112]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 873  : 		{	// destroy the object

  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8d 77 70	 lea	 esi, DWORD PTR [edi+112]
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	c7 44 30 90 00
	00 00 00	 mov	 DWORD PTR [eax+esi-112], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  00018	8b 46 90	 mov	 eax, DWORD PTR [esi-112]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	8d 41 90	 lea	 eax, DWORD PTR [ecx-112]
  00021	89 44 31 8c	 mov	 DWORD PTR [ecx+esi-116], eax

; 874  : 		}

  00025	8d 4e a0	 lea	 ecx, DWORD PTR [esi-96]
  00028	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 71   : 		{	// destroy the object

  0002d	8b 46 90	 mov	 eax, DWORD PTR [esi-112]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 532  : 		_Ios_base_dtor(this);

  00030	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 71   : 		{	// destroy the object

  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	c7 44 30 90 00
	00 00 00	 mov	 DWORD PTR [eax+esi-112], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0003c	8b 46 90	 mov	 eax, DWORD PTR [esi-112]
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  00045	89 44 31 8c	 mov	 DWORD PTR [ecx+esi-116], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 531  : 		{	// destroy the object

  00049	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@

; 532  : 		_Ios_base_dtor(this);

  0004f	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00054	83 c4 04	 add	 esp, 4
  00057	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0005b	74 09		 je	 SHORT $LN14@scalar
  0005d	57		 push	 edi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00063	83 c4 04	 add	 esp, 4
$LN14@scalar:
  00066	8b c7		 mov	 eax, edi
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 09		 je	 SHORT $LN4@scalar
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
$LN4@scalar:
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 71   : 		{	// destroy the object

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8d 51 18	 lea	 edx, DWORD PTR [ecx+24]
  00005	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 532  : 		_Ios_base_dtor(this);

  00008	52		 push	 edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream

; 71   : 		{	// destroy the object

  00009	c7 44 10 e8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-24], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00011	8b 42 e8	 mov	 eax, DWORD PTR [edx-24]
  00014	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00017	8d 41 e8	 lea	 eax, DWORD PTR [ecx-24]
  0001a	89 44 11 e4	 mov	 DWORD PTR [ecx+edx-28], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 531  : 		{	// destroy the object

  0001e	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ios_base@std@@6B@

; 532  : 		_Ios_base_dtor(this);

  00024	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00029	59		 pop	 ecx
  0002a	c3		 ret	 0
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 805  : 		{	// construct from _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 807  : 		assign(_Count, _Ch);

  00004	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR __Count$[ebp]

; 2219 : 		}
; 2220 : 
; 2221 : 	bool _Grow(size_type _Newsize,
; 2222 : 		bool _Trim = false)
; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2224 : 		if (max_size() < _Newsize)
; 2225 : 			_Xlen();	// result too long
; 2226 : 		if (this->_Myres < _Newsize)
; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow
; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
; 2231 : 		else if (_Newsize == 0)
; 2232 : 			_Eos(0);	// new size is zero, just null terminate
; 2233 : 		return (0 < _Newsize);	// return true only if more work to do
; 2234 : 		}
; 2235 : 
; 2236 : 	bool _Inside(const _Elem *_Ptr)
; 2237 : 		{	// test if _Ptr points inside string
; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)
; 2240 : 			return (false);	// don't ask
; 2241 : 		else
; 2242 : 			return (true);
; 2243 : 		}
; 2244 : 
; 2245 : 	static size_type _Pdif(const_iterator _P2,
; 2246 : 		const_iterator _P1)
; 2247 : 		{	// compute safe iterator difference
; 2248 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);
; 2249 : 		}
; 2250 : 
; 2251 : 	void _Tidy(bool _Built = false,
; 2252 : 		size_type _Newsize = 0)
; 2253 : 		{	// initialize buffer, deallocating any storage
; 2254 : 		if (!_Built)
; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)
; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;
; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2260 : 			if (0 < _Newsize)
; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);
; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  0000c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00013	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  0001a	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 807  : 		assign(_Count, _Ch);

  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 808  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1066 : 		{	// append _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1067 : 		if (npos - this->_Mysize <= _Count)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	83 c8 ff	 or	 eax, -1
  0000d	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00010	2b c1		 sub	 eax, ecx
  00012	3b c3		 cmp	 eax, ebx
  00014	76 7c		 jbe	 SHORT $LN87@append

; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00016	85 db		 test	 ebx, ebx
  00018	74 70		 je	 SHORT $LN81@append
  0001a	57		 push	 edi
  0001b	8d 3c 19	 lea	 edi, DWORD PTR [ecx+ebx]

; 2219 : 		}
; 2220 : 
; 2221 : 	bool _Grow(size_type _Newsize,
; 2222 : 		bool _Trim = false)
; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2224 : 		if (max_size() < _Newsize)

  0001e	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00021	77 79		 ja	 SHORT $LN89@append

; 2225 : 			_Xlen();	// result too long
; 2226 : 		if (this->_Myres < _Newsize)

  00023	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00026	3b c7		 cmp	 eax, edi
  00028	73 33		 jae	 SHORT $LN12@append

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0002a	51		 push	 ecx
  0002b	57		 push	 edi
  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2232 : 			_Eos(0);	// new size is zero, just null terminate
; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

  00033	85 ff		 test	 edi, edi

; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00035	74 52		 je	 SHORT $LN83@append
$LN86@append:

; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);

  00037	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  0003a	8b ce		 mov	 ecx, esi
  0003c	53		 push	 ebx
  0003d	ff 76 10	 push	 DWORD PTR [esi+16]
  00040	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 517  : 			: this->_Bx._Buf);

  00045	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00049	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 517  : 			: this->_Bx._Buf);

  0004c	72 35		 jb	 SHORT $LN77@append
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00050	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  00054	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1076 : 		return (*this);

  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx

; 1077 : 		}

  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
$LN12@append:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
; 2231 : 		else if (_Newsize == 0)

  0005d	85 ff		 test	 edi, edi
  0005f	75 d6		 jne	 SHORT $LN86@append

; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00061	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 517  : 			: this->_Bx._Buf);

  00064	83 f8 10	 cmp	 eax, 16			; 00000010H
  00067	72 0e		 jb	 SHORT $LN67@append
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00069	8b 06		 mov	 eax, DWORD PTR [esi]
  0006b	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  0006c	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1076 : 		return (*this);

  0006f	8b c6		 mov	 eax, esi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx

; 1077 : 		}

  00073	5d		 pop	 ebp
  00074	c2 08 00	 ret	 8
$LN67@append:
  00077	5f		 pop	 edi

; 517  : 			: this->_Bx._Buf);

  00078	8b c6		 mov	 eax, esi
  0007a	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  0007b	c6 00 00	 mov	 BYTE PTR [eax], 0
  0007e	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1077 : 		}

  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
$LN77@append:

; 517  : 			: this->_Bx._Buf);

  00083	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00085	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN83@append:
  00089	5f		 pop	 edi
$LN81@append:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1076 : 		return (*this);

  0008a	8b c6		 mov	 eax, esi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx

; 1077 : 		}

  0008e	5d		 pop	 ebp
  0008f	c2 08 00	 ret	 8
$LN87@append:

; 2234 : 		}
; 2235 : 
; 2236 : 	bool _Inside(const _Elem *_Ptr)
; 2237 : 		{	// test if _Ptr points inside string
; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)
; 2240 : 			return (false);	// don't ask
; 2241 : 		else
; 2242 : 			return (true);
; 2243 : 		}
; 2244 : 
; 2245 : 	static size_type _Pdif(const_iterator _P2,
; 2246 : 		const_iterator _P1)
; 2247 : 		{	// compute safe iterator difference
; 2248 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);
; 2249 : 		}
; 2250 : 
; 2251 : 	void _Tidy(bool _Built = false,
; 2252 : 		size_type _Newsize = 0)
; 2253 : 		{	// initialize buffer, deallocating any storage
; 2254 : 		if (!_Built)
; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)
; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;
; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2260 : 			if (0 < _Newsize)
; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);
; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;
; 2266 : 		_Eos(_Newsize);
; 2267 : 		}
; 2268 : 
; 2269 : 	__declspec(noreturn) void _Xlen() const
; 2270 : 		{	// report a length_error
; 2271 : 		_Xlength_error("string too long");

  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00097	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN90@append:
$LN89@append:
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000a1	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN91@append:
$LN84@append:
  000a6	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 1574 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 		}
; 56   : 
; 57   : 	typedef pointer _Unchecked_type;
; 58   : 
; 59   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 60   : 		{	// reset from unchecked iterator
; 61   : 		this->_Ptr = _Right;
; 62   : 		return (*this);
; 63   : 		}
; 64   : 
; 65   : 	_Unchecked_type _Unchecked() const
; 66   : 		{	// make an unchecked iterator
; 67   : 		return (_Unchecked_type(this->_Ptr));
; 68   : 		}
; 69   : 
; 70   : 	reference operator*() const
; 71   : 		{	// return designated object
; 72   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 73   : 		if (this->_Getcont() == 0
; 74   : 			|| this->_Ptr == 0
; 75   : 			|| this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 76   : 			|| ((_Mystr *)this->_Getcont())->_Myptr()
; 77   : 				+ ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
; 78   : 			{	// report error
; 79   : 			_DEBUG_ERROR("string iterator not dereferencable");
; 80   : 			_SCL_SECURE_OUT_OF_RANGE;
; 81   : 			}
; 82   : 
; 83   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 84   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 85   : 		_SCL_SECURE_VALIDATE_RANGE(
; 86   : 			((_Mystr *)this->_Getcont())->_Myptr() <= this->_Ptr
; 87   : 			&& this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 88   : 				+ ((_Mystr *)this->_Getcont())->_Mysize);
; 89   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 90   : 
; 91   : 		_Analysis_assume_(this->_Ptr != 0);
; 92   : 
; 93   : 		return (*this->_Ptr);
; 94   : 		}
; 95   : 
; 96   : 	pointer operator->() const
; 97   : 		{	// return pointer to class object
; 98   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 99   : 		}
; 100  : 
; 101  : 	_Myiter& operator++()
; 102  : 		{	// preincrement
; 103  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 104  : 		if (this->_Getcont() == 0
; 105  : 			|| this->_Ptr == 0
; 106  : 			|| ((_Mystr *)this->_Getcont())->_Myptr()
; 107  : 				+ ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
; 108  : 			{	// report error
; 109  : 			_DEBUG_ERROR("string iterator not incrementable");
; 110  : 			_SCL_SECURE_OUT_OF_RANGE;
; 111  : 			}
; 112  : 
; 113  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 114  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 115  : 		_SCL_SECURE_VALIDATE_RANGE(
; 116  : 			this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 117  : 				+ ((_Mystr *)this->_Getcont())->_Mysize);
; 118  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 119  : 
; 120  : 		++this->_Ptr;
; 121  : 		return (*this);
; 122  : 		}
; 123  : 
; 124  : 	_Myiter operator++(int)
; 125  : 		{	// postincrement
; 126  : 		_Myiter _Tmp = *this;
; 127  : 		++*this;
; 128  : 		return (_Tmp);
; 129  : 		}
; 130  : 
; 131  : 	_Myiter& operator--()
; 132  : 		{	// predecrement
; 133  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 134  : 		if (this->_Getcont() == 0
; 135  : 			|| this->_Ptr == 0
; 136  : 			|| this->_Ptr <= ((_Mystr *)this->_Getcont())->_Myptr())
; 137  : 			{	// report error
; 138  : 			_DEBUG_ERROR("string iterator not decrementable");
; 139  : 			_SCL_SECURE_OUT_OF_RANGE;
; 140  : 			}
; 141  : 
; 142  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 143  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 144  : 		_SCL_SECURE_VALIDATE_RANGE(
; 145  : 			((_Mystr *)this->_Getcont())->_Myptr() < this->_Ptr);
; 146  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 147  : 
; 148  : 		--this->_Ptr;
; 149  : 		return (*this);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter operator--(int)
; 153  : 		{	// postdecrement
; 154  : 		_Myiter _Tmp = *this;
; 155  : 		--*this;
; 156  : 		return (_Tmp);
; 157  : 		}
; 158  : 
; 159  : 	_Myiter& operator+=(difference_type _Off)
; 160  : 		{	// increment by integer
; 161  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 162  : 		if (this->_Getcont() == 0
; 163  : 			|| this->_Ptr == 0
; 164  : 			|| this->_Ptr + _Off < ((_Mystr *)this->_Getcont())->_Myptr()
; 165  : 			|| ((_Mystr *)this->_Getcont())->_Myptr()
; 166  : 				+ ((_Mystr *)this->_Getcont())->_Mysize < this->_Ptr + _Off)
; 167  : 			{	// report error
; 168  : 			_DEBUG_ERROR("string iterator + offset out of range");
; 169  : 			_SCL_SECURE_OUT_OF_RANGE;
; 170  : 			}
; 171  : 
; 172  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 173  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 174  : 		_SCL_SECURE_VALIDATE_RANGE(
; 175  : 			((_Mystr *)this->_Getcont())->_Myptr() <= this->_Ptr + _Off
; 176  : 				&& this->_Ptr + _Off <= ((_Mystr *)this->_Getcont())->_Myptr()
; 177  : 					+ ((_Mystr *)this->_Getcont())->_Mysize);
; 178  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 179  : 
; 180  : 		_Ptr += _Off;
; 181  : 		return (*this);
; 182  : 		}
; 183  : 
; 184  : 	_Myiter operator+(difference_type _Off) const
; 185  : 		{	// return this + integer
; 186  : 		_Myiter _Tmp = *this;
; 187  : 		return (_Tmp += _Off);
; 188  : 		}
; 189  : 
; 190  : 	_Myiter& operator-=(difference_type _Off)
; 191  : 		{	// decrement by integer
; 192  : 		return (*this += -_Off);
; 193  : 		}
; 194  : 
; 195  : 	_Myiter operator-(difference_type _Off) const
; 196  : 		{	// return this - integer
; 197  : 		_Myiter _Tmp = *this;
; 198  : 		return (_Tmp -= _Off);
; 199  : 		}
; 200  : 
; 201  : 	difference_type operator-(const _Myiter& _Right) const
; 202  : 		{	// return difference of iterators
; 203  : 		_Compat(_Right);
; 204  : 		return (this->_Ptr - _Right._Ptr);
; 205  : 		}
; 206  : 
; 207  : 	reference operator[](difference_type _Off) const
; 208  : 		{	// subscript
; 209  : 		return (*(*this + _Off));
; 210  : 		}
; 211  : 
; 212  : 	bool operator==(const _Myiter& _Right) const
; 213  : 		{	// test for iterator equality
; 214  : 		_Compat(_Right);
; 215  : 		return (this->_Ptr == _Right._Ptr);
; 216  : 		}
; 217  : 
; 218  : 	bool operator!=(const _Myiter& _Right) const
; 219  : 		{	// test for iterator inequality
; 220  : 		return (!(*this == _Right));
; 221  : 		}
; 222  : 
; 223  : 	bool operator<(const _Myiter& _Right) const
; 224  : 		{	// test if this < _Right
; 225  : 		_Compat(_Right);
; 226  : 		return (this->_Ptr < _Right._Ptr);
; 227  : 		}
; 228  : 
; 229  : 	bool operator>(const _Myiter& _Right) const
; 230  : 		{	// test if this > _Right
; 231  : 		return (_Right < *this);
; 232  : 		}
; 233  : 
; 234  : 	bool operator<=(const _Myiter& _Right) const
; 235  : 		{	// test if this <= _Right
; 236  : 		return (!(_Right < *this));
; 237  : 		}
; 238  : 
; 239  : 	bool operator>=(const _Myiter& _Right) const
; 240  : 		{	// test if this >= _Right
; 241  : 		return (!(*this < _Right));
; 242  : 		}
; 243  : 
; 244  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 245  : 	void _Compat(const _Myiter& _Right) const
; 246  : 		{	// test for compatible iterator pair
; 247  : 		if (this->_Getcont() == 0
; 248  : 			|| this->_Getcont() != _Right._Getcont())
; 249  : 			{	// report error
; 250  : 			_DEBUG_ERROR("string iterators incompatible");
; 251  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 252  : 			}
; 253  : 		}
; 254  : 
; 255  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 256  : 	void _Compat(const _Myiter& _Right) const
; 257  : 		{	// test for compatible iterator pair
; 258  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 259  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 260  : 		}
; 261  : 
; 262  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 263  : 	void _Compat(const _Myiter&) const
; 264  : 		{	// test for compatible iterator pair
; 265  : 		}
; 266  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 267  : 
; 268  : 	pointer _Ptr;	// pointer to element in string
; 269  : 	};
; 270  : 
; 271  : template<class _Mystr> inline
; 272  : 	typename _String_const_iterator<_Mystr>::_Unchecked_type
; 273  : 		_Unchecked(_String_const_iterator<_Mystr> _Iter)
; 274  : 	{	// convert to unchecked
; 275  : 	return (_Iter._Unchecked());
; 276  : 	}
; 277  : 
; 278  : template<class _Mystr> inline
; 279  : 	_String_const_iterator<_Mystr>
; 280  : 		_Rechecked(_String_const_iterator<_Mystr>& _Iter,
; 281  : 			typename _String_const_iterator<_Mystr>
; 282  : 				::_Unchecked_type _Right)
; 283  : 	{	// convert to checked
; 284  : 	return (_Iter._Rechecked(_Right));
; 285  : 	}
; 286  : 
; 287  : template<class _Mystr> inline
; 288  : 	_String_const_iterator<_Mystr> operator+(
; 289  : 		typename _String_const_iterator<_Mystr>
; 290  : 			::difference_type _Off,
; 291  : 		_String_const_iterator<_Mystr> _Next)
; 292  : 	{	// add offset to iterator
; 293  : 	return (_Next += _Off);
; 294  : 	}
; 295  : 
; 296  : 		// TEMPLATE CLASS _String_iterator
; 297  : template<class _Mystr>
; 298  : 	class _String_iterator
; 299  : 		: public _String_const_iterator<_Mystr>
; 300  : 	{	// iterator for mutable string
; 301  : public:
; 302  : 	typedef _String_iterator<_Mystr> _Myiter;
; 303  : 	typedef _String_const_iterator<_Mystr> _Mybase;
; 304  : 	typedef random_access_iterator_tag iterator_category;
; 305  : 
; 306  : 	typedef typename _Mystr::value_type value_type;
; 307  : 	typedef typename _Mystr::difference_type difference_type;
; 308  : 	typedef typename _Mystr::pointer pointer;
; 309  : 	typedef typename _Mystr::reference reference;
; 310  : 
; 311  : 	_String_iterator()
; 312  : 		{	// construct with null string pointer
; 313  : 		}
; 314  : 
; 315  : 	_String_iterator(pointer _Parg, const _Container_base *_Pstring)
; 316  : 		: _Mybase(_Parg, _Pstring)
; 317  : 		{	// construct with pointer _Parg
; 318  : 		}
; 319  : 
; 320  : 	typedef pointer _Unchecked_type;
; 321  : 
; 322  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 323  : 		{	// reset from unchecked iterator
; 324  : 		this->_Ptr = _Right;
; 325  : 		return (*this);
; 326  : 		}
; 327  : 
; 328  : 	_Unchecked_type _Unchecked() const
; 329  : 		{	// make an unchecked iterator
; 330  : 		return (_Unchecked_type(this->_Ptr));
; 331  : 		}
; 332  : 
; 333  : 	reference operator*() const
; 334  : 		{	// return designated object
; 335  : 		return ((reference)**(_Mybase *)this);
; 336  : 		}
; 337  : 
; 338  : 	pointer operator->() const
; 339  : 		{	// return pointer to class object
; 340  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 341  : 		}
; 342  : 
; 343  : 	_Myiter& operator++()
; 344  : 		{	// preincrement
; 345  : 		++*(_Mybase *)this;
; 346  : 		return (*this);
; 347  : 		}
; 348  : 
; 349  : 	_Myiter operator++(int)
; 350  : 		{	// postincrement
; 351  : 		_Myiter _Tmp = *this;
; 352  : 		++*this;
; 353  : 		return (_Tmp);
; 354  : 		}
; 355  : 
; 356  : 	_Myiter& operator--()
; 357  : 		{	// predecrement
; 358  : 		--*(_Mybase *)this;
; 359  : 		return (*this);
; 360  : 		}
; 361  : 
; 362  : 	_Myiter operator--(int)
; 363  : 		{	// postdecrement
; 364  : 		_Myiter _Tmp = *this;
; 365  : 		--*this;
; 366  : 		return (_Tmp);
; 367  : 		}
; 368  : 
; 369  : 	_Myiter& operator+=(difference_type _Off)
; 370  : 		{	// increment by integer
; 371  : 		*(_Mybase *)this += _Off;
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator+(difference_type _Off) const
; 376  : 		{	// return this + integer
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		return (_Tmp += _Off);
; 379  : 		}
; 380  : 
; 381  : 	_Myiter& operator-=(difference_type _Off)
; 382  : 		{	// decrement by integer
; 383  : 		return (*this += -_Off);
; 384  : 		}
; 385  : 
; 386  : 	_Myiter operator-(difference_type _Off) const
; 387  : 		{	// return this - integer
; 388  : 		_Myiter _Tmp = *this;
; 389  : 		return (_Tmp -= _Off);
; 390  : 		}
; 391  : 
; 392  : 	difference_type operator-(const _Mybase& _Right) const
; 393  : 		{	// return difference of iterators
; 394  : 		return ((_Mybase)*this - _Right);
; 395  : 		}
; 396  : 
; 397  : 	reference operator[](difference_type _Off) const
; 398  : 		{	// subscript
; 399  : 		return (*(*this + _Off));
; 400  : 		}
; 401  : 	};
; 402  : 
; 403  : template<class _Mystr> inline
; 404  : 	typename _String_iterator<_Mystr>::_Unchecked_type
; 405  : 		_Unchecked(_String_iterator<_Mystr> _Iter)
; 406  : 	{	// convert to unchecked
; 407  : 	return (_Iter._Unchecked());
; 408  : 	}
; 409  : 
; 410  : template<class _Mystr> inline
; 411  : 	_String_iterator<_Mystr>
; 412  : 		_Rechecked(_String_iterator<_Mystr>& _Iter,
; 413  : 			typename _String_iterator<_Mystr>
; 414  : 				::_Unchecked_type _Right)
; 415  : 	{	// convert to checked
; 416  : 	return (_Iter._Rechecked(_Right));
; 417  : 	}
; 418  : 
; 419  : template<class _Mystr> inline
; 420  : 	_String_iterator<_Mystr> operator+(
; 421  : 		typename _String_iterator<_Mystr>
; 422  : 			::difference_type _Off,
; 423  : 		_String_iterator<_Mystr> _Next)
; 424  : 	{	// add offset to iterator
; 425  : 	return (_Next += _Off);
; 426  : 	}
; 427  : 
; 428  : 		// basic_string TYPE WRAPPERS
; 429  : template<class _Value_type,
; 430  : 	class _Size_type,
; 431  : 	class _Difference_type,
; 432  : 	class _Pointer,
; 433  : 	class _Const_pointer,
; 434  : 	class _Reference,
; 435  : 	class _Const_reference>
; 436  : 	struct _String_iter_types
; 437  : 	{	// wraps types needed by iterators
; 438  : 	typedef _Value_type value_type;
; 439  : 	typedef _Size_type size_type;
; 440  : 	typedef _Difference_type difference_type;
; 441  : 	typedef _Pointer pointer;
; 442  : 	typedef _Const_pointer const_pointer;
; 443  : 	typedef _Reference reference;
; 444  : 	typedef _Const_reference const_reference;
; 445  : 	};
; 446  : 
; 447  : template<class _Ty,
; 448  : 	class _Alloc0>
; 449  : 	struct _String_base_types
; 450  : 	{	// types needed for a container base
; 451  : 	typedef _Alloc0 _Alloc;
; 452  : 	typedef _String_base_types<_Ty, _Alloc> _Myt;
; 453  : 
; 454  :  #if _HAS_CPP0X
; 455  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 456  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 457  : 
; 458  :  #else /* _HAS_CPP0X */
; 459  : 	typedef typename _Alloc::template rebind<_Ty>::other _Alty;
; 460  :  #endif /* _HAS_CPP0X */
; 461  : 
; 462  : 	typedef typename _Alty::pointer _Tptr;
; 463  : 	typedef typename _Alty::template rebind<_Tptr>::other _Alpty;
; 464  : 
; 465  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 466  : 		_Simple_types<typename _Alty::value_type>,
; 467  : 		_String_iter_types<typename _Alty::value_type,
; 468  : 			typename _Alty::size_type,
; 469  : 			typename _Alty::difference_type,
; 470  : 			typename _Alty::pointer,
; 471  : 			typename _Alty::const_pointer,
; 472  : 			typename _Alty::reference,
; 473  : 			typename _Alty::const_reference> >::type
; 474  : 		_Val_types;
; 475  : 	};
; 476  : 
; 477  : 		// TEMPLATE CLASS _String_val
; 478  : template<class _Val_types>
; 479  : 	class _String_val
; 480  : 		: public _Container_base
; 481  : 	{	// base class for basic_string to hold data
; 482  : public:
; 483  : 	typedef _String_val<_Val_types> _Myt;
; 484  : 
; 485  : 	typedef typename _Val_types::value_type value_type;
; 486  : 	typedef typename _Val_types::size_type size_type;
; 487  : 	typedef typename _Val_types::difference_type difference_type;
; 488  : 	typedef typename _Val_types::pointer pointer;
; 489  : 	typedef typename _Val_types::const_pointer const_pointer;
; 490  : 	typedef typename _Val_types::reference reference;
; 491  : 	typedef typename _Val_types::const_reference const_reference;
; 492  : 
; 493  : 	typedef _String_iterator<_Myt> iterator;
; 494  : 	typedef _String_const_iterator<_Myt> const_iterator;
; 495  : 
; 496  : 	_String_val()
; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;
; 499  : 		_Myres = 0;
; 500  : 		}
; 501  : 
; 502  : 	enum
; 503  : 		{	// length of internal buffer, [1, 16]
; 504  : 		_BUF_SIZE = 16 / sizeof (value_type) < 1 ? 1
; 505  : 			: 16 / sizeof (value_type)};
; 506  : 	enum
; 507  : 		{	// roundup mask for allocated buffers, [0, 15]
; 508  : 		_ALLOC_MASK = sizeof (value_type) <= 1 ? 15
; 509  : 			: sizeof (value_type) <= 2 ? 7
; 510  : 			: sizeof (value_type) <= 4 ? 3
; 511  : 			: sizeof (value_type) <= 8 ? 1 : 0};
; 512  : 
; 513  : 	value_type *_Myptr()
; 514  : 		{	// determine current pointer to buffer for mutable string
; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

  00003	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 54   : 		this->_Ptr = _Parg;

  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 55   : 		}
; 56   : 
; 57   : 	typedef pointer _Unchecked_type;
; 58   : 
; 59   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 60   : 		{	// reset from unchecked iterator
; 61   : 		this->_Ptr = _Right;
; 62   : 		return (*this);
; 63   : 		}
; 64   : 
; 65   : 	_Unchecked_type _Unchecked() const
; 66   : 		{	// make an unchecked iterator
; 67   : 		return (_Unchecked_type(this->_Ptr));
; 68   : 		}
; 69   : 
; 70   : 	reference operator*() const
; 71   : 		{	// return designated object
; 72   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 73   : 		if (this->_Getcont() == 0
; 74   : 			|| this->_Ptr == 0
; 75   : 			|| this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 76   : 			|| ((_Mystr *)this->_Getcont())->_Myptr()
; 77   : 				+ ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
; 78   : 			{	// report error
; 79   : 			_DEBUG_ERROR("string iterator not dereferencable");
; 80   : 			_SCL_SECURE_OUT_OF_RANGE;
; 81   : 			}
; 82   : 
; 83   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 84   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 85   : 		_SCL_SECURE_VALIDATE_RANGE(
; 86   : 			((_Mystr *)this->_Getcont())->_Myptr() <= this->_Ptr
; 87   : 			&& this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 88   : 				+ ((_Mystr *)this->_Getcont())->_Mysize);
; 89   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 90   : 
; 91   : 		_Analysis_assume_(this->_Ptr != 0);
; 92   : 
; 93   : 		return (*this->_Ptr);
; 94   : 		}
; 95   : 
; 96   : 	pointer operator->() const
; 97   : 		{	// return pointer to class object
; 98   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 99   : 		}
; 100  : 
; 101  : 	_Myiter& operator++()
; 102  : 		{	// preincrement
; 103  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 104  : 		if (this->_Getcont() == 0
; 105  : 			|| this->_Ptr == 0
; 106  : 			|| ((_Mystr *)this->_Getcont())->_Myptr()
; 107  : 				+ ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
; 108  : 			{	// report error
; 109  : 			_DEBUG_ERROR("string iterator not incrementable");
; 110  : 			_SCL_SECURE_OUT_OF_RANGE;
; 111  : 			}
; 112  : 
; 113  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 114  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 115  : 		_SCL_SECURE_VALIDATE_RANGE(
; 116  : 			this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 117  : 				+ ((_Mystr *)this->_Getcont())->_Mysize);
; 118  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 119  : 
; 120  : 		++this->_Ptr;
; 121  : 		return (*this);
; 122  : 		}
; 123  : 
; 124  : 	_Myiter operator++(int)
; 125  : 		{	// postincrement
; 126  : 		_Myiter _Tmp = *this;
; 127  : 		++*this;
; 128  : 		return (_Tmp);
; 129  : 		}
; 130  : 
; 131  : 	_Myiter& operator--()
; 132  : 		{	// predecrement
; 133  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 134  : 		if (this->_Getcont() == 0
; 135  : 			|| this->_Ptr == 0
; 136  : 			|| this->_Ptr <= ((_Mystr *)this->_Getcont())->_Myptr())
; 137  : 			{	// report error
; 138  : 			_DEBUG_ERROR("string iterator not decrementable");
; 139  : 			_SCL_SECURE_OUT_OF_RANGE;
; 140  : 			}
; 141  : 
; 142  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 143  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 144  : 		_SCL_SECURE_VALIDATE_RANGE(
; 145  : 			((_Mystr *)this->_Getcont())->_Myptr() < this->_Ptr);
; 146  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 147  : 
; 148  : 		--this->_Ptr;
; 149  : 		return (*this);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter operator--(int)
; 153  : 		{	// postdecrement
; 154  : 		_Myiter _Tmp = *this;
; 155  : 		--*this;
; 156  : 		return (_Tmp);
; 157  : 		}
; 158  : 
; 159  : 	_Myiter& operator+=(difference_type _Off)
; 160  : 		{	// increment by integer
; 161  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 162  : 		if (this->_Getcont() == 0
; 163  : 			|| this->_Ptr == 0
; 164  : 			|| this->_Ptr + _Off < ((_Mystr *)this->_Getcont())->_Myptr()
; 165  : 			|| ((_Mystr *)this->_Getcont())->_Myptr()
; 166  : 				+ ((_Mystr *)this->_Getcont())->_Mysize < this->_Ptr + _Off)
; 167  : 			{	// report error
; 168  : 			_DEBUG_ERROR("string iterator + offset out of range");
; 169  : 			_SCL_SECURE_OUT_OF_RANGE;
; 170  : 			}
; 171  : 
; 172  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 173  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 174  : 		_SCL_SECURE_VALIDATE_RANGE(
; 175  : 			((_Mystr *)this->_Getcont())->_Myptr() <= this->_Ptr + _Off
; 176  : 				&& this->_Ptr + _Off <= ((_Mystr *)this->_Getcont())->_Myptr()
; 177  : 					+ ((_Mystr *)this->_Getcont())->_Mysize);
; 178  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 179  : 
; 180  : 		_Ptr += _Off;
; 181  : 		return (*this);
; 182  : 		}
; 183  : 
; 184  : 	_Myiter operator+(difference_type _Off) const
; 185  : 		{	// return this + integer
; 186  : 		_Myiter _Tmp = *this;
; 187  : 		return (_Tmp += _Off);
; 188  : 		}
; 189  : 
; 190  : 	_Myiter& operator-=(difference_type _Off)
; 191  : 		{	// decrement by integer
; 192  : 		return (*this += -_Off);
; 193  : 		}
; 194  : 
; 195  : 	_Myiter operator-(difference_type _Off) const
; 196  : 		{	// return this - integer
; 197  : 		_Myiter _Tmp = *this;
; 198  : 		return (_Tmp -= _Off);
; 199  : 		}
; 200  : 
; 201  : 	difference_type operator-(const _Myiter& _Right) const
; 202  : 		{	// return difference of iterators
; 203  : 		_Compat(_Right);
; 204  : 		return (this->_Ptr - _Right._Ptr);
; 205  : 		}
; 206  : 
; 207  : 	reference operator[](difference_type _Off) const
; 208  : 		{	// subscript
; 209  : 		return (*(*this + _Off));
; 210  : 		}
; 211  : 
; 212  : 	bool operator==(const _Myiter& _Right) const
; 213  : 		{	// test for iterator equality
; 214  : 		_Compat(_Right);
; 215  : 		return (this->_Ptr == _Right._Ptr);
; 216  : 		}
; 217  : 
; 218  : 	bool operator!=(const _Myiter& _Right) const
; 219  : 		{	// test for iterator inequality
; 220  : 		return (!(*this == _Right));
; 221  : 		}
; 222  : 
; 223  : 	bool operator<(const _Myiter& _Right) const
; 224  : 		{	// test if this < _Right
; 225  : 		_Compat(_Right);
; 226  : 		return (this->_Ptr < _Right._Ptr);
; 227  : 		}
; 228  : 
; 229  : 	bool operator>(const _Myiter& _Right) const
; 230  : 		{	// test if this > _Right
; 231  : 		return (_Right < *this);
; 232  : 		}
; 233  : 
; 234  : 	bool operator<=(const _Myiter& _Right) const
; 235  : 		{	// test if this <= _Right
; 236  : 		return (!(_Right < *this));
; 237  : 		}
; 238  : 
; 239  : 	bool operator>=(const _Myiter& _Right) const
; 240  : 		{	// test if this >= _Right
; 241  : 		return (!(*this < _Right));
; 242  : 		}
; 243  : 
; 244  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 245  : 	void _Compat(const _Myiter& _Right) const
; 246  : 		{	// test for compatible iterator pair
; 247  : 		if (this->_Getcont() == 0
; 248  : 			|| this->_Getcont() != _Right._Getcont())
; 249  : 			{	// report error
; 250  : 			_DEBUG_ERROR("string iterators incompatible");
; 251  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 252  : 			}
; 253  : 		}
; 254  : 
; 255  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 256  : 	void _Compat(const _Myiter& _Right) const
; 257  : 		{	// test for compatible iterator pair
; 258  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 259  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 260  : 		}
; 261  : 
; 262  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 263  : 	void _Compat(const _Myiter&) const
; 264  : 		{	// test for compatible iterator pair
; 265  : 		}
; 266  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 267  : 
; 268  : 	pointer _Ptr;	// pointer to element in string
; 269  : 	};
; 270  : 
; 271  : template<class _Mystr> inline
; 272  : 	typename _String_const_iterator<_Mystr>::_Unchecked_type
; 273  : 		_Unchecked(_String_const_iterator<_Mystr> _Iter)
; 274  : 	{	// convert to unchecked
; 275  : 	return (_Iter._Unchecked());
; 276  : 	}
; 277  : 
; 278  : template<class _Mystr> inline
; 279  : 	_String_const_iterator<_Mystr>
; 280  : 		_Rechecked(_String_const_iterator<_Mystr>& _Iter,
; 281  : 			typename _String_const_iterator<_Mystr>
; 282  : 				::_Unchecked_type _Right)
; 283  : 	{	// convert to checked
; 284  : 	return (_Iter._Rechecked(_Right));
; 285  : 	}
; 286  : 
; 287  : template<class _Mystr> inline
; 288  : 	_String_const_iterator<_Mystr> operator+(
; 289  : 		typename _String_const_iterator<_Mystr>
; 290  : 			::difference_type _Off,
; 291  : 		_String_const_iterator<_Mystr> _Next)
; 292  : 	{	// add offset to iterator
; 293  : 	return (_Next += _Off);
; 294  : 	}
; 295  : 
; 296  : 		// TEMPLATE CLASS _String_iterator
; 297  : template<class _Mystr>
; 298  : 	class _String_iterator
; 299  : 		: public _String_const_iterator<_Mystr>
; 300  : 	{	// iterator for mutable string
; 301  : public:
; 302  : 	typedef _String_iterator<_Mystr> _Myiter;
; 303  : 	typedef _String_const_iterator<_Mystr> _Mybase;
; 304  : 	typedef random_access_iterator_tag iterator_category;
; 305  : 
; 306  : 	typedef typename _Mystr::value_type value_type;
; 307  : 	typedef typename _Mystr::difference_type difference_type;
; 308  : 	typedef typename _Mystr::pointer pointer;
; 309  : 	typedef typename _Mystr::reference reference;
; 310  : 
; 311  : 	_String_iterator()
; 312  : 		{	// construct with null string pointer
; 313  : 		}
; 314  : 
; 315  : 	_String_iterator(pointer _Parg, const _Container_base *_Pstring)
; 316  : 		: _Mybase(_Parg, _Pstring)
; 317  : 		{	// construct with pointer _Parg
; 318  : 		}
; 319  : 
; 320  : 	typedef pointer _Unchecked_type;
; 321  : 
; 322  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 323  : 		{	// reset from unchecked iterator
; 324  : 		this->_Ptr = _Right;
; 325  : 		return (*this);
; 326  : 		}
; 327  : 
; 328  : 	_Unchecked_type _Unchecked() const
; 329  : 		{	// make an unchecked iterator
; 330  : 		return (_Unchecked_type(this->_Ptr));
; 331  : 		}
; 332  : 
; 333  : 	reference operator*() const
; 334  : 		{	// return designated object
; 335  : 		return ((reference)**(_Mybase *)this);
; 336  : 		}
; 337  : 
; 338  : 	pointer operator->() const
; 339  : 		{	// return pointer to class object
; 340  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 341  : 		}
; 342  : 
; 343  : 	_Myiter& operator++()
; 344  : 		{	// preincrement
; 345  : 		++*(_Mybase *)this;
; 346  : 		return (*this);
; 347  : 		}
; 348  : 
; 349  : 	_Myiter operator++(int)
; 350  : 		{	// postincrement
; 351  : 		_Myiter _Tmp = *this;
; 352  : 		++*this;
; 353  : 		return (_Tmp);
; 354  : 		}
; 355  : 
; 356  : 	_Myiter& operator--()
; 357  : 		{	// predecrement
; 358  : 		--*(_Mybase *)this;
; 359  : 		return (*this);
; 360  : 		}
; 361  : 
; 362  : 	_Myiter operator--(int)
; 363  : 		{	// postdecrement
; 364  : 		_Myiter _Tmp = *this;
; 365  : 		--*this;
; 366  : 		return (_Tmp);
; 367  : 		}
; 368  : 
; 369  : 	_Myiter& operator+=(difference_type _Off)
; 370  : 		{	// increment by integer
; 371  : 		*(_Mybase *)this += _Off;
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator+(difference_type _Off) const
; 376  : 		{	// return this + integer
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		return (_Tmp += _Off);
; 379  : 		}
; 380  : 
; 381  : 	_Myiter& operator-=(difference_type _Off)
; 382  : 		{	// decrement by integer
; 383  : 		return (*this += -_Off);
; 384  : 		}
; 385  : 
; 386  : 	_Myiter operator-(difference_type _Off) const
; 387  : 		{	// return this - integer
; 388  : 		_Myiter _Tmp = *this;
; 389  : 		return (_Tmp -= _Off);
; 390  : 		}
; 391  : 
; 392  : 	difference_type operator-(const _Mybase& _Right) const
; 393  : 		{	// return difference of iterators
; 394  : 		return ((_Mybase)*this - _Right);
; 395  : 		}
; 396  : 
; 397  : 	reference operator[](difference_type _Off) const
; 398  : 		{	// subscript
; 399  : 		return (*(*this + _Off));
; 400  : 		}
; 401  : 	};
; 402  : 
; 403  : template<class _Mystr> inline
; 404  : 	typename _String_iterator<_Mystr>::_Unchecked_type
; 405  : 		_Unchecked(_String_iterator<_Mystr> _Iter)
; 406  : 	{	// convert to unchecked
; 407  : 	return (_Iter._Unchecked());
; 408  : 	}
; 409  : 
; 410  : template<class _Mystr> inline
; 411  : 	_String_iterator<_Mystr>
; 412  : 		_Rechecked(_String_iterator<_Mystr>& _Iter,
; 413  : 			typename _String_iterator<_Mystr>
; 414  : 				::_Unchecked_type _Right)
; 415  : 	{	// convert to checked
; 416  : 	return (_Iter._Rechecked(_Right));
; 417  : 	}
; 418  : 
; 419  : template<class _Mystr> inline
; 420  : 	_String_iterator<_Mystr> operator+(
; 421  : 		typename _String_iterator<_Mystr>
; 422  : 			::difference_type _Off,
; 423  : 		_String_iterator<_Mystr> _Next)
; 424  : 	{	// add offset to iterator
; 425  : 	return (_Next += _Off);
; 426  : 	}
; 427  : 
; 428  : 		// basic_string TYPE WRAPPERS
; 429  : template<class _Value_type,
; 430  : 	class _Size_type,
; 431  : 	class _Difference_type,
; 432  : 	class _Pointer,
; 433  : 	class _Const_pointer,
; 434  : 	class _Reference,
; 435  : 	class _Const_reference>
; 436  : 	struct _String_iter_types
; 437  : 	{	// wraps types needed by iterators
; 438  : 	typedef _Value_type value_type;
; 439  : 	typedef _Size_type size_type;
; 440  : 	typedef _Difference_type difference_type;
; 441  : 	typedef _Pointer pointer;
; 442  : 	typedef _Const_pointer const_pointer;
; 443  : 	typedef _Reference reference;
; 444  : 	typedef _Const_reference const_reference;
; 445  : 	};
; 446  : 
; 447  : template<class _Ty,
; 448  : 	class _Alloc0>
; 449  : 	struct _String_base_types
; 450  : 	{	// types needed for a container base
; 451  : 	typedef _Alloc0 _Alloc;
; 452  : 	typedef _String_base_types<_Ty, _Alloc> _Myt;
; 453  : 
; 454  :  #if _HAS_CPP0X
; 455  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 456  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 457  : 
; 458  :  #else /* _HAS_CPP0X */
; 459  : 	typedef typename _Alloc::template rebind<_Ty>::other _Alty;
; 460  :  #endif /* _HAS_CPP0X */
; 461  : 
; 462  : 	typedef typename _Alty::pointer _Tptr;
; 463  : 	typedef typename _Alty::template rebind<_Tptr>::other _Alpty;
; 464  : 
; 465  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 466  : 		_Simple_types<typename _Alty::value_type>,
; 467  : 		_String_iter_types<typename _Alty::value_type,
; 468  : 			typename _Alty::size_type,
; 469  : 			typename _Alty::difference_type,
; 470  : 			typename _Alty::pointer,
; 471  : 			typename _Alty::const_pointer,
; 472  : 			typename _Alty::reference,
; 473  : 			typename _Alty::const_reference> >::type
; 474  : 		_Val_types;
; 475  : 	};
; 476  : 
; 477  : 		// TEMPLATE CLASS _String_val
; 478  : template<class _Val_types>
; 479  : 	class _String_val
; 480  : 		: public _Container_base
; 481  : 	{	// base class for basic_string to hold data
; 482  : public:
; 483  : 	typedef _String_val<_Val_types> _Myt;
; 484  : 
; 485  : 	typedef typename _Val_types::value_type value_type;
; 486  : 	typedef typename _Val_types::size_type size_type;
; 487  : 	typedef typename _Val_types::difference_type difference_type;
; 488  : 	typedef typename _Val_types::pointer pointer;
; 489  : 	typedef typename _Val_types::const_pointer const_pointer;
; 490  : 	typedef typename _Val_types::reference reference;
; 491  : 	typedef typename _Val_types::const_reference const_reference;
; 492  : 
; 493  : 	typedef _String_iterator<_Myt> iterator;
; 494  : 	typedef _String_const_iterator<_Myt> const_iterator;
; 495  : 
; 496  : 	_String_val()
; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;
; 499  : 		_Myres = 0;
; 500  : 		}
; 501  : 
; 502  : 	enum
; 503  : 		{	// length of internal buffer, [1, 16]
; 504  : 		_BUF_SIZE = 16 / sizeof (value_type) < 1 ? 1
; 505  : 			: 16 / sizeof (value_type)};
; 506  : 	enum
; 507  : 		{	// roundup mask for allocated buffers, [0, 15]
; 508  : 		_ALLOC_MASK = sizeof (value_type) <= 1 ? 15
; 509  : 			: sizeof (value_type) <= 2 ? 7
; 510  : 			: sizeof (value_type) <= 4 ? 3
; 511  : 			: sizeof (value_type) <= 8 ? 1 : 0};
; 512  : 
; 513  : 	value_type *_Myptr()
; 514  : 		{	// determine current pointer to buffer for mutable string
; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

  0000a	72 02		 jb	 SHORT $LN5@begin
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN5@begin:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 54   : 		this->_Ptr = _Parg;

  0000e	89 08		 mov	 DWORD PTR [eax], ecx

; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::capacity, COMDAT
; _this$ = ecx

; 967  : 		return (this->_Myend - this->_Myfirst);

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	2b 11		 sub	 edx, DWORD PTR [ecx]
  00005	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 968  : 		}

  00016	c3		 ret	 0
?capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Has_unused_capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 977  : 		return (this->_Myend != this->_Mylast);

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	33 c0		 xor	 eax, eax
  00005	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00008	0f 95 c0	 setne	 al

; 978  : 		}

  0000b	c3		 ret	 0
?_Has_unused_capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?max_size@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::max_size, COMDAT
; _this$dead$ = ecx

; 1092 : 		return (this->_Getal().max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1093 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?empty@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBE_NXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::empty, COMDAT
; _this$ = ecx

; 1097 : 		return (this->_Myfirst == this->_Mylast);

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	33 c0		 xor	 eax, eax
  00004	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00007	0f 94 c0	 sete	 al

; 1098 : 		}

  0000a	c3		 ret	 0
?empty@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBE_NXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXPAVVertexUVRGBA@gfxu@@0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXPAVVertexUVRGBA@gfxu@@0@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXPAVVertexUVRGBA@gfxu@@0@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IBE_NPBVVertexUVRGBA@gfxu@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IBE_NPBVVertexUVRGBA@gfxu@@@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Inside, COMDAT
; _this$ = ecx

; 1495 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1497 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1497 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IBE_NPBVVertexUVRGBA@gfxu@@@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$1$ = 8						; size = 4
__Cat$1 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXI@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate, COMDAT
; _this$ = ecx

; 1500 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  00005	8b 75 08	 mov	 esi, DWORD PTR __Count$[ebp]
  00008	57		 push	 edi

; 23   : 	void *_Ptr = 0;

  00009	33 ff		 xor	 edi, edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1500 : 		{	// move to array of exactly _Count elements

  0000b	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  0000d	85 f6		 test	 esi, esi
  0000f	74 1d		 je	 SHORT $LN16@Reallocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00011	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  00017	77 6f		 ja	 SHORT $LN49@Reallocate
  00019	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0001c	c1 e0 03	 shl	 eax, 3
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	8b f8		 mov	 edi, eax
  00027	83 c4 04	 add	 esp, 4
  0002a	85 ff		 test	 edi, edi
  0002c	74 5a		 je	 SHORT $LN49@Reallocate
$LN16@Reallocate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  0002e	ff 75 08	 push	 DWORD PTR __Cat$1[ebp]
  00031	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00034	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00036	83 ec 08	 sub	 esp, 8
  00039	57		 push	 edi
  0003a	e8 00 00 00 00	 call	 ??$_Uninit_move@PAVVertexUVRGBA@gfxu@@PAV12@V?$allocator@VVertexUVRGBA@gfxu@@@std@@V12@@std@@YAPAVVertexUVRGBA@gfxu@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<gfxu::VertexUVRGBA *,gfxu::VertexUVRGBA *,std::allocator<gfxu::VertexUVRGBA>,gfxu::VertexUVRGBA>
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  0003f	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00042	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  00044	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00049	f7 e9		 imul	 ecx

; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1502 : 
; 1503 : 		_TRY_BEGIN
; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1507 : 		_RERAISE;
; 1508 : 		_CATCH_END
; 1509 : 
; 1510 : 		size_type _Size = size();
; 1511 : 		if (this->_Myfirst != pointer())

  0004b	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  0004d	c1 fa 02	 sar	 edx, 2
  00050	8b ca		 mov	 ecx, edx
  00052	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00055	03 ca		 add	 ecx, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00057	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  0005a	89 4d 08	 mov	 DWORD PTR __Size$1$[ebp], ecx

; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1502 : 
; 1503 : 		_TRY_BEGIN
; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1507 : 		_RERAISE;
; 1508 : 		_CATCH_END
; 1509 : 
; 1510 : 		size_type _Size = size();
; 1511 : 		if (this->_Myfirst != pointer())

  0005d	85 c0		 test	 eax, eax
  0005f	74 0c		 je	 SHORT $LN44@Reallocate
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00067	8b 4d 08	 mov	 ecx, DWORD PTR __Size$1$[ebp]
  0006a	83 c4 04	 add	 esp, 4
$LN44@Reallocate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1519 : 		this->_Myend = _Ptr + _Count;

  0006d	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]

; 1520 : 		this->_Mylast = _Ptr + _Size;
; 1521 : 		this->_Myfirst = _Ptr;

  00070	89 3b		 mov	 DWORD PTR [ebx], edi
  00072	8d 04 c7	 lea	 eax, DWORD PTR [edi+eax*8]
  00075	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  00078	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0007b	8d 04 c7	 lea	 eax, DWORD PTR [edi+eax*8]
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00083	5b		 pop	 ebx

; 1522 : 		}

  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
$LN49@Reallocate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00088	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN51@Reallocate:
$LN48@Reallocate:
  0008d	cc		 int	 3
?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXI@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?_Reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXI@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reserve, COMDAT
; _this$ = ecx

; 1525 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	56		 push	 esi

; 968  : 		}
; 969  : 
; 970  : 	size_type _Unused_capacity() const _NOEXCEPT
; 971  : 		{	// micro-optimization for capacity() - size()
; 972  : 		return (this->_Myend - this->_Mylast);

  00001	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00004	57		 push	 edi
  00005	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00008	8b d7		 mov	 edx, edi
  0000a	2b d6		 sub	 edx, esi
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	f7 ea		 imul	 edx
  00013	c1 fa 02	 sar	 edx, 2
  00016	8b c2		 mov	 eax, edx
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	03 c2		 add	 eax, edx

; 1526 : 		if (_Unused_capacity() < _Count)

  0001d	83 f8 01	 cmp	 eax, 1
  00020	73 60		 jae	 SHORT $LN2@Reserve

; 973  : 		}
; 974  : 
; 975  : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 976  : 		{	// micro-optimization for capacity() != size()
; 977  : 		return (this->_Myend != this->_Mylast);
; 978  : 		}
; 979  : 
; 980  : 	iterator begin() _NOEXCEPT
; 981  : 		{	// return iterator for beginning of mutable sequence
; 982  : 		return (iterator(this->_Myfirst, this));
; 983  : 		}
; 984  : 
; 985  : 	const_iterator begin() const _NOEXCEPT
; 986  : 		{	// return iterator for beginning of nonmutable sequence
; 987  : 		return (const_iterator(this->_Myfirst, this));
; 988  : 		}
; 989  : 
; 990  : 	iterator end() _NOEXCEPT
; 991  : 		{	// return iterator for end of mutable sequence
; 992  : 		return (iterator(this->_Mylast, this));
; 993  : 		}
; 994  : 
; 995  : 	const_iterator end() const _NOEXCEPT
; 996  : 		{	// return iterator for end of nonmutable sequence
; 997  : 		return (const_iterator(this->_Mylast, this));
; 998  : 		}
; 999  : 
; 1000 : 	iterator _Make_iter(const_iterator _Where) const
; 1001 : 		{	// make iterator from const_iterator
; 1002 : 		return (iterator(_Where._Ptr, this));
; 1003 : 		}
; 1004 : 
; 1005 : 	reverse_iterator rbegin() _NOEXCEPT
; 1006 : 		{	// return iterator for beginning of reversed mutable sequence
; 1007 : 		return (reverse_iterator(end()));
; 1008 : 		}
; 1009 : 
; 1010 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1011 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1012 : 		return (const_reverse_iterator(end()));
; 1013 : 		}
; 1014 : 
; 1015 : 	reverse_iterator rend() _NOEXCEPT
; 1016 : 		{	// return iterator for end of reversed mutable sequence
; 1017 : 		return (reverse_iterator(begin()));
; 1018 : 		}
; 1019 : 
; 1020 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1021 : 		{	// return iterator for end of reversed nonmutable sequence
; 1022 : 		return (const_reverse_iterator(begin()));
; 1023 : 		}
; 1024 : 
; 1025 :  #if _HAS_CPP0X
; 1026 : 	const_iterator cbegin() const _NOEXCEPT
; 1027 : 		{	// return iterator for beginning of nonmutable sequence
; 1028 : 		return (((const _Myt *)this)->begin());
; 1029 : 		}
; 1030 : 
; 1031 : 	const_iterator cend() const _NOEXCEPT
; 1032 : 		{	// return iterator for end of nonmutable sequence
; 1033 : 		return (((const _Myt *)this)->end());
; 1034 : 		}
; 1035 : 
; 1036 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1037 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1038 : 		return (((const _Myt *)this)->rbegin());
; 1039 : 		}
; 1040 : 
; 1041 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1042 : 		{	// return iterator for end of reversed nonmutable sequence
; 1043 : 		return (((const _Myt *)this)->rend());
; 1044 : 		}
; 1045 : 
; 1046 : 	void shrink_to_fit()
; 1047 : 		{	// reduce capacity
; 1048 : 		if (_Has_unused_capacity())
; 1049 : 			{	// worth shrinking, do it
; 1050 : 			if (empty())
; 1051 : 				_Tidy();
; 1052 : 			else
; 1053 : 				_Reallocate(size());
; 1054 : 			}
; 1055 : 		}
; 1056 :  #endif /* _HAS_CPP0X */
; 1057 : 
; 1058 : 	void resize(size_type _Newsize)
; 1059 : 		{	// determine new length, padding as needed
; 1060 : 		if (_Newsize < size())
; 1061 : 			erase(begin() + _Newsize, end());
; 1062 : 		else if (size() < _Newsize)
; 1063 : 			{	// pad as needed
; 1064 : 			_Alty _Alval(this->_Getal());
; 1065 : 			_Reserve(_Newsize - size());
; 1066 : 			_TRY_BEGIN
; 1067 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1068 : 				_Alval);
; 1069 : 			_CATCH_ALL
; 1070 : 			_Tidy();
; 1071 : 			_RERAISE;
; 1072 : 			_CATCH_END
; 1073 : 			this->_Mylast += _Newsize - size();
; 1074 : 			}
; 1075 : 		}
; 1076 : 
; 1077 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1078 : 		{	// determine new length, padding with _Val elements as needed
; 1079 : 		if (_Newsize < size())
; 1080 : 			erase(begin() + _Newsize, end());
; 1081 : 		else if (size() < _Newsize)
; 1082 : 			_Insert_n(end(), _Newsize - size(), _Val);
; 1083 : 		}
; 1084 : 
; 1085 : 	size_type size() const _NOEXCEPT
; 1086 : 		{	// return length of sequence
; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00022	2b 31		 sub	 esi, DWORD PTR [ecx]
  00024	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00029	f7 ee		 imul	 esi
  0002b	c1 fa 02	 sar	 edx, 2
  0002e	8b f2		 mov	 esi, edx
  00030	53		 push	 ebx
  00031	c1 ee 1f	 shr	 esi, 31			; 0000001fH

; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)

  00034	bb aa aa aa 0a	 mov	 ebx, 178956970		; 0aaaaaaaH

; 973  : 		}
; 974  : 
; 975  : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 976  : 		{	// micro-optimization for capacity() != size()
; 977  : 		return (this->_Myend != this->_Mylast);
; 978  : 		}
; 979  : 
; 980  : 	iterator begin() _NOEXCEPT
; 981  : 		{	// return iterator for beginning of mutable sequence
; 982  : 		return (iterator(this->_Myfirst, this));
; 983  : 		}
; 984  : 
; 985  : 	const_iterator begin() const _NOEXCEPT
; 986  : 		{	// return iterator for beginning of nonmutable sequence
; 987  : 		return (const_iterator(this->_Myfirst, this));
; 988  : 		}
; 989  : 
; 990  : 	iterator end() _NOEXCEPT
; 991  : 		{	// return iterator for end of mutable sequence
; 992  : 		return (iterator(this->_Mylast, this));
; 993  : 		}
; 994  : 
; 995  : 	const_iterator end() const _NOEXCEPT
; 996  : 		{	// return iterator for end of nonmutable sequence
; 997  : 		return (const_iterator(this->_Mylast, this));
; 998  : 		}
; 999  : 
; 1000 : 	iterator _Make_iter(const_iterator _Where) const
; 1001 : 		{	// make iterator from const_iterator
; 1002 : 		return (iterator(_Where._Ptr, this));
; 1003 : 		}
; 1004 : 
; 1005 : 	reverse_iterator rbegin() _NOEXCEPT
; 1006 : 		{	// return iterator for beginning of reversed mutable sequence
; 1007 : 		return (reverse_iterator(end()));
; 1008 : 		}
; 1009 : 
; 1010 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1011 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1012 : 		return (const_reverse_iterator(end()));
; 1013 : 		}
; 1014 : 
; 1015 : 	reverse_iterator rend() _NOEXCEPT
; 1016 : 		{	// return iterator for end of reversed mutable sequence
; 1017 : 		return (reverse_iterator(begin()));
; 1018 : 		}
; 1019 : 
; 1020 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1021 : 		{	// return iterator for end of reversed nonmutable sequence
; 1022 : 		return (const_reverse_iterator(begin()));
; 1023 : 		}
; 1024 : 
; 1025 :  #if _HAS_CPP0X
; 1026 : 	const_iterator cbegin() const _NOEXCEPT
; 1027 : 		{	// return iterator for beginning of nonmutable sequence
; 1028 : 		return (((const _Myt *)this)->begin());
; 1029 : 		}
; 1030 : 
; 1031 : 	const_iterator cend() const _NOEXCEPT
; 1032 : 		{	// return iterator for end of nonmutable sequence
; 1033 : 		return (((const _Myt *)this)->end());
; 1034 : 		}
; 1035 : 
; 1036 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1037 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1038 : 		return (((const _Myt *)this)->rbegin());
; 1039 : 		}
; 1040 : 
; 1041 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1042 : 		{	// return iterator for end of reversed nonmutable sequence
; 1043 : 		return (((const _Myt *)this)->rend());
; 1044 : 		}
; 1045 : 
; 1046 : 	void shrink_to_fit()
; 1047 : 		{	// reduce capacity
; 1048 : 		if (_Has_unused_capacity())
; 1049 : 			{	// worth shrinking, do it
; 1050 : 			if (empty())
; 1051 : 				_Tidy();
; 1052 : 			else
; 1053 : 				_Reallocate(size());
; 1054 : 			}
; 1055 : 		}
; 1056 :  #endif /* _HAS_CPP0X */
; 1057 : 
; 1058 : 	void resize(size_type _Newsize)
; 1059 : 		{	// determine new length, padding as needed
; 1060 : 		if (_Newsize < size())
; 1061 : 			erase(begin() + _Newsize, end());
; 1062 : 		else if (size() < _Newsize)
; 1063 : 			{	// pad as needed
; 1064 : 			_Alty _Alval(this->_Getal());
; 1065 : 			_Reserve(_Newsize - size());
; 1066 : 			_TRY_BEGIN
; 1067 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1068 : 				_Alval);
; 1069 : 			_CATCH_ALL
; 1070 : 			_Tidy();
; 1071 : 			_RERAISE;
; 1072 : 			_CATCH_END
; 1073 : 			this->_Mylast += _Newsize - size();
; 1074 : 			}
; 1075 : 		}
; 1076 : 
; 1077 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1078 : 		{	// determine new length, padding with _Val elements as needed
; 1079 : 		if (_Newsize < size())
; 1080 : 			erase(begin() + _Newsize, end());
; 1081 : 		else if (size() < _Newsize)
; 1082 : 			_Insert_n(end(), _Newsize - size(), _Val);
; 1083 : 		}
; 1084 : 
; 1085 : 	size_type size() const _NOEXCEPT
; 1086 : 		{	// return length of sequence
; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00039	03 f2		 add	 esi, edx

; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)

  0003b	8b c3		 mov	 eax, ebx
  0003d	2b c6		 sub	 eax, esi
  0003f	83 f8 01	 cmp	 eax, 1
  00042	72 43		 jb	 SHORT $LN42@Reserve

; 967  : 		return (this->_Myend - this->_Myfirst);

  00044	2b 39		 sub	 edi, DWORD PTR [ecx]
  00046	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004b	f7 ef		 imul	 edi
  0004d	c1 fa 02	 sar	 edx, 2
  00050	8b c2		 mov	 eax, edx
  00052	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00055	03 c2		 add	 eax, edx

; 1088 : 		}
; 1089 : 
; 1090 : 	size_type max_size() const _NOEXCEPT
; 1091 : 		{	// return maximum possible length of sequence
; 1092 : 		return (this->_Getal().max_size());
; 1093 : 		}
; 1094 : 
; 1095 : 	bool empty() const _NOEXCEPT
; 1096 : 		{	// test if sequence is empty
; 1097 : 		return (this->_Myfirst == this->_Mylast);
; 1098 : 		}
; 1099 : 
; 1100 : 	_Alloc get_allocator() const _NOEXCEPT
; 1101 : 		{	// return allocator object for values
; 1102 : 		return (this->_Getal());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_reference at(size_type _Pos) const
; 1106 : 		{	// subscript nonmutable sequence with checking
; 1107 : 		if (size() <= _Pos)
; 1108 : 			_Xran();
; 1109 : 		return (*(this->_Myfirst + _Pos));
; 1110 : 		}
; 1111 : 
; 1112 : 	reference at(size_type _Pos)
; 1113 : 		{	// subscript mutable sequence with checking
; 1114 : 		if (size() <= _Pos)
; 1115 : 			_Xran();
; 1116 : 		return (*(this->_Myfirst + _Pos));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_reference operator[](size_type _Pos) const
; 1120 : 		{	// subscript nonmutable sequence
; 1121 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 : 		if (size() <= _Pos)
; 1123 : 			{	// report error
; 1124 : 			_DEBUG_ERROR("vector subscript out of range");
; 1125 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1126 : 			}
; 1127 : 
; 1128 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1129 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1130 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1131 : 
; 1132 : 		return (*(this->_Myfirst + _Pos));
; 1133 : 		}
; 1134 : 
; 1135 : 	reference operator[](size_type _Pos)
; 1136 : 		{	// subscript mutable sequence
; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));
; 1149 : 		}
; 1150 : 
; 1151 :  #if _HAS_CPP0X
; 1152 : 	pointer data() _NOEXCEPT
; 1153 : 		{	// return address of first element
; 1154 : 		return (this->_Myfirst);
; 1155 : 		}
; 1156 : 
; 1157 : 	const_pointer data() const _NOEXCEPT
; 1158 : 		{	// return address of first element
; 1159 : 		return (this->_Myfirst);
; 1160 : 		}
; 1161 :  #endif /* _HAS_CPP0X */
; 1162 : 
; 1163 : 	reference front()
; 1164 : 		{	// return first element of mutable sequence
; 1165 : 		return (*begin());
; 1166 : 		}
; 1167 : 
; 1168 : 	const_reference front() const
; 1169 : 		{	// return first element of nonmutable sequence
; 1170 : 		return (*begin());
; 1171 : 		}
; 1172 : 
; 1173 : 	reference back()
; 1174 : 		{	// return last element of mutable sequence
; 1175 : 		return (*(end() - 1));
; 1176 : 		}
; 1177 : 
; 1178 : 	const_reference back() const
; 1179 : 		{	// return last element of nonmutable sequence
; 1180 : 		return (*(end() - 1));
; 1181 : 		}
; 1182 : 
; 1183 : 	void push_back(const value_type& _Val)
; 1184 : 		{	// insert element at end
; 1185 : 		if (_Inside(_STD addressof(_Val)))
; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1188 : 			if (this->_Mylast == this->_Myend)
; 1189 : 				_Reserve(1);
; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);
; 1193 : 			++this->_Mylast;
; 1194 : 			}
; 1195 : 		else
; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)
; 1198 : 				_Reserve(1);
; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);
; 1202 : 			++this->_Mylast;
; 1203 : 			}
; 1204 : 		}
; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00057	8b d0		 mov	 edx, eax
  00059	d1 ea		 shr	 edx, 1
  0005b	2b da		 sub	 ebx, edx

; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

  0005d	46		 inc	 esi

; 1088 : 		}
; 1089 : 
; 1090 : 	size_type max_size() const _NOEXCEPT
; 1091 : 		{	// return maximum possible length of sequence
; 1092 : 		return (this->_Getal().max_size());
; 1093 : 		}
; 1094 : 
; 1095 : 	bool empty() const _NOEXCEPT
; 1096 : 		{	// test if sequence is empty
; 1097 : 		return (this->_Myfirst == this->_Mylast);
; 1098 : 		}
; 1099 : 
; 1100 : 	_Alloc get_allocator() const _NOEXCEPT
; 1101 : 		{	// return allocator object for values
; 1102 : 		return (this->_Getal());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_reference at(size_type _Pos) const
; 1106 : 		{	// subscript nonmutable sequence with checking
; 1107 : 		if (size() <= _Pos)
; 1108 : 			_Xran();
; 1109 : 		return (*(this->_Myfirst + _Pos));
; 1110 : 		}
; 1111 : 
; 1112 : 	reference at(size_type _Pos)
; 1113 : 		{	// subscript mutable sequence with checking
; 1114 : 		if (size() <= _Pos)
; 1115 : 			_Xran();
; 1116 : 		return (*(this->_Myfirst + _Pos));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_reference operator[](size_type _Pos) const
; 1120 : 		{	// subscript nonmutable sequence
; 1121 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 : 		if (size() <= _Pos)
; 1123 : 			{	// report error
; 1124 : 			_DEBUG_ERROR("vector subscript out of range");
; 1125 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1126 : 			}
; 1127 : 
; 1128 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1129 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1130 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1131 : 
; 1132 : 		return (*(this->_Myfirst + _Pos));
; 1133 : 		}
; 1134 : 
; 1135 : 	reference operator[](size_type _Pos)
; 1136 : 		{	// subscript mutable sequence
; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));
; 1149 : 		}
; 1150 : 
; 1151 :  #if _HAS_CPP0X
; 1152 : 	pointer data() _NOEXCEPT
; 1153 : 		{	// return address of first element
; 1154 : 		return (this->_Myfirst);
; 1155 : 		}
; 1156 : 
; 1157 : 	const_pointer data() const _NOEXCEPT
; 1158 : 		{	// return address of first element
; 1159 : 		return (this->_Myfirst);
; 1160 : 		}
; 1161 :  #endif /* _HAS_CPP0X */
; 1162 : 
; 1163 : 	reference front()
; 1164 : 		{	// return first element of mutable sequence
; 1165 : 		return (*begin());
; 1166 : 		}
; 1167 : 
; 1168 : 	const_reference front() const
; 1169 : 		{	// return first element of nonmutable sequence
; 1170 : 		return (*begin());
; 1171 : 		}
; 1172 : 
; 1173 : 	reference back()
; 1174 : 		{	// return last element of mutable sequence
; 1175 : 		return (*(end() - 1));
; 1176 : 		}
; 1177 : 
; 1178 : 	const_reference back() const
; 1179 : 		{	// return last element of nonmutable sequence
; 1180 : 		return (*(end() - 1));
; 1181 : 		}
; 1182 : 
; 1183 : 	void push_back(const value_type& _Val)
; 1184 : 		{	// insert element at end
; 1185 : 		if (_Inside(_STD addressof(_Val)))
; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1188 : 			if (this->_Mylast == this->_Myend)
; 1189 : 				_Reserve(1);
; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);
; 1193 : 			++this->_Mylast;
; 1194 : 			}
; 1195 : 		else
; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)
; 1198 : 				_Reserve(1);
; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);
; 1202 : 			++this->_Mylast;
; 1203 : 			}
; 1204 : 		}
; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0005e	3b d8		 cmp	 ebx, eax
  00060	5b		 pop	 ebx
  00061	73 12		 jae	 SHORT $LN27@Reserve
  00063	33 c0		 xor	 eax, eax

; 1489 : 		if (_Capacity < _Count)

  00065	3b c6		 cmp	 eax, esi
  00067	0f 42 c6	 cmovb	 eax, esi

; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXI@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi

; 1531 : 			}
; 1532 : 		}

  00072	c2 04 00	 ret	 4
$LN27@Reserve:

; 1088 : 		}
; 1089 : 
; 1090 : 	size_type max_size() const _NOEXCEPT
; 1091 : 		{	// return maximum possible length of sequence
; 1092 : 		return (this->_Getal().max_size());
; 1093 : 		}
; 1094 : 
; 1095 : 	bool empty() const _NOEXCEPT
; 1096 : 		{	// test if sequence is empty
; 1097 : 		return (this->_Myfirst == this->_Mylast);
; 1098 : 		}
; 1099 : 
; 1100 : 	_Alloc get_allocator() const _NOEXCEPT
; 1101 : 		{	// return allocator object for values
; 1102 : 		return (this->_Getal());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_reference at(size_type _Pos) const
; 1106 : 		{	// subscript nonmutable sequence with checking
; 1107 : 		if (size() <= _Pos)
; 1108 : 			_Xran();
; 1109 : 		return (*(this->_Myfirst + _Pos));
; 1110 : 		}
; 1111 : 
; 1112 : 	reference at(size_type _Pos)
; 1113 : 		{	// subscript mutable sequence with checking
; 1114 : 		if (size() <= _Pos)
; 1115 : 			_Xran();
; 1116 : 		return (*(this->_Myfirst + _Pos));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_reference operator[](size_type _Pos) const
; 1120 : 		{	// subscript nonmutable sequence
; 1121 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 : 		if (size() <= _Pos)
; 1123 : 			{	// report error
; 1124 : 			_DEBUG_ERROR("vector subscript out of range");
; 1125 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1126 : 			}
; 1127 : 
; 1128 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1129 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1130 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1131 : 
; 1132 : 		return (*(this->_Myfirst + _Pos));
; 1133 : 		}
; 1134 : 
; 1135 : 	reference operator[](size_type _Pos)
; 1136 : 		{	// subscript mutable sequence
; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));
; 1149 : 		}
; 1150 : 
; 1151 :  #if _HAS_CPP0X
; 1152 : 	pointer data() _NOEXCEPT
; 1153 : 		{	// return address of first element
; 1154 : 		return (this->_Myfirst);
; 1155 : 		}
; 1156 : 
; 1157 : 	const_pointer data() const _NOEXCEPT
; 1158 : 		{	// return address of first element
; 1159 : 		return (this->_Myfirst);
; 1160 : 		}
; 1161 :  #endif /* _HAS_CPP0X */
; 1162 : 
; 1163 : 	reference front()
; 1164 : 		{	// return first element of mutable sequence
; 1165 : 		return (*begin());
; 1166 : 		}
; 1167 : 
; 1168 : 	const_reference front() const
; 1169 : 		{	// return first element of nonmutable sequence
; 1170 : 		return (*begin());
; 1171 : 		}
; 1172 : 
; 1173 : 	reference back()
; 1174 : 		{	// return last element of mutable sequence
; 1175 : 		return (*(end() - 1));
; 1176 : 		}
; 1177 : 
; 1178 : 	const_reference back() const
; 1179 : 		{	// return last element of nonmutable sequence
; 1180 : 		return (*(end() - 1));
; 1181 : 		}
; 1182 : 
; 1183 : 	void push_back(const value_type& _Val)
; 1184 : 		{	// insert element at end
; 1185 : 		if (_Inside(_STD addressof(_Val)))
; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1188 : 			if (this->_Mylast == this->_Myend)
; 1189 : 				_Reserve(1);
; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);
; 1193 : 			++this->_Mylast;
; 1194 : 			}
; 1195 : 		else
; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)
; 1198 : 				_Reserve(1);
; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);
; 1202 : 			++this->_Mylast;
; 1203 : 			}
; 1204 : 		}
; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00075	03 c2		 add	 eax, edx

; 1489 : 		if (_Capacity < _Count)

  00077	3b c6		 cmp	 eax, esi
  00079	0f 42 c6	 cmovb	 eax, esi

; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXI@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate
$LN2@Reserve:

; 1531 : 			}
; 1532 : 		}

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	c2 04 00	 ret	 4
$LN42@Reserve:

; 1533 : 
; 1534 : 	void _Tidy()
; 1535 : 		{	// free all storage
; 1536 : 		if (this->_Myfirst != pointer())
; 1537 : 			{	// something to free, destroy and deallocate it
; 1538 : 			this->_Orphan_all();
; 1539 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1540 : 			this->_Getal().deallocate(this->_Myfirst,
; 1541 : 				this->_Myend - this->_Myfirst);
; 1542 : 			this->_Myfirst = pointer();
; 1543 : 			this->_Mylast = pointer();
; 1544 : 			this->_Myend = pointer();
; 1545 : 			}
; 1546 : 		}
; 1547 : 
; 1548 : 	template<class _Iter>
; 1549 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1550 : 		{	// copy initializing [_First, _Last), using allocator
; 1551 : 		_Alty _Alval(this->_Getal());
; 1552 : 		return (_Uninitialized_copy(_First, _Last,
; 1553 : 			_Ptr, _Alval));
; 1554 : 		}
; 1555 : 
; 1556 : 	template<class _Iter>
; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1558 : 		{	// move initializing [_First, _Last), using allocator
; 1559 : 		_Alty _Alval(this->_Getal());
; 1560 : 		return (_Uninitialized_move(_First, _Last,
; 1561 : 			_Ptr, _Alval));
; 1562 : 		}
; 1563 : 
; 1564 : 	iterator _Insert_n(const_iterator _Where,
; 1565 : 		size_type _Count, const value_type& _Val)
; 1566 : 		{	// insert _Count * _Val at _Where
; 1567 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1568 : 		if (_VICONT(_Where) != this
; 1569 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1570 : 			|| this->_Mylast < _VIPTR(_Where))
; 1571 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1572 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 
; 1574 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1575 : 		if (_Count == 0)
; 1576 : 			;
; 1577 : 		else if (_Unused_capacity() < _Count)
; 1578 : 			{	// not enough room, reallocate
; 1579 : 			if (max_size() - size() < _Count)
; 1580 : 				_Xlen();	// result too long
; 1581 : 
; 1582 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1583 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1584 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst;
; 1585 : 			int _Ncopied = 0;
; 1586 : 
; 1587 : 			_TRY_BEGIN
; 1588 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1589 : 				_STD addressof(_Val));	// add new stuff
; 1590 : 			++_Ncopied;
; 1591 : 			_Umove(this->_Myfirst, _VIPTR(_Where),
; 1592 : 				_Newvec);	// copy prefix
; 1593 : 			++_Ncopied;
; 1594 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1595 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1596 : 			_CATCH_ALL
; 1597 : 			if (1 < _Ncopied)
; 1598 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1599 : 			if (0 < _Ncopied)
; 1600 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1601 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1602 : 			_RERAISE;
; 1603 : 			_CATCH_END
; 1604 : 
; 1605 : 			_Count += size();
; 1606 : 			if (this->_Myfirst != pointer())
; 1607 : 				{	// destroy and deallocate old array
; 1608 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1609 : 				this->_Getal().deallocate(this->_Myfirst,
; 1610 : 					this->_Myend - this->_Myfirst);
; 1611 : 				}
; 1612 : 
; 1613 : 			this->_Orphan_all();
; 1614 : 			this->_Myend = _Newvec + _Capacity;
; 1615 : 			this->_Mylast = _Newvec + _Count;
; 1616 : 			this->_Myfirst = _Newvec;
; 1617 : 			}
; 1618 : 		else if ((size_type)(this->_Mylast - _VIPTR(_Where))
; 1619 : 			< _Count)
; 1620 : 			{	// new stuff spills off end
; 1621 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1622 : 
; 1623 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1624 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1625 : 
; 1626 : 			_TRY_BEGIN
; 1627 : 			_Ufill(this->_Mylast,
; 1628 : 				_Count - (this->_Mylast - _VIPTR(_Where)),
; 1629 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1630 : 			_CATCH_ALL
; 1631 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1632 : 				this->_Mylast + _Count);
; 1633 : 			_RERAISE;
; 1634 : 			_CATCH_END
; 1635 : 
; 1636 : 			this->_Mylast += _Count;
; 1637 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1638 : 			_STD fill(_VIPTR(_Where), this->_Mylast - _Count,
; 1639 : 				_Tmp);	// insert up to old end
; 1640 : 			}
; 1641 : 		else
; 1642 : 			{	// new stuff can all be assigned
; 1643 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1644 : 
; 1645 : 			pointer _Oldend = this->_Mylast;
; 1646 : 			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1647 : 				this->_Mylast);	// copy suffix
; 1648 : 
; 1649 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1650 : 			_Copy_backward(_VIPTR(_Where), _Oldend - _Count,
; 1651 : 				_Oldend);	// copy hole
; 1652 : 			_STD fill(_VIPTR(_Where),
; 1653 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1654 : 			}
; 1655 : 		return (begin() + _Off);
; 1656 : 		}
; 1657 : 
; 1658 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1659 : 		{	// copy initializing _Count * _Val, using allocator
; 1660 : 		_Alty _Alval(this->_Getal());
; 1661 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
; 1662 : 		return (_Ptr + _Count);
; 1663 : 		}
; 1664 : 
; 1665 : 	__declspec(noreturn) void _Xlen() const
; 1666 : 		{	// report a length_error
; 1667 : 		_Xlength_error("vector<T> too long");

  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0008c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN44@Reserve:
$LN41@Reserve:
  00091	cc		 int	 3
?_Reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXI@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Tidy, COMDAT
; _this$ = ecx

; 1535 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1536 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN1@Tidy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1542 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1543 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1544 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN1@Tidy:
  00026	5e		 pop	 esi

; 1545 : 			}
; 1546 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEXXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IBEXXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Xlen, COMDAT
; _this$dead$ = ecx

; 1667 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IBEXXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IBEXPAVVertexUVRGBA@gfxu@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IBEXPAVVertexUVRGBA@gfxu@@0@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1694 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IBEXPAVVertexUVRGBA@gfxu@@0@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@VVertexUVRGBA@gfxu@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@VVertexUVRGBA@gfxu@@@std@@QAE@XZ PROC	; std::allocator<gfxu::VertexUVRGBA>::allocator<gfxu::VertexUVRGBA>, COMDAT
; _this$ = ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@VVertexUVRGBA@gfxu@@@std@@QAE@XZ ENDP	; std::allocator<gfxu::VertexUVRGBA>::allocator<gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@QAE@ABV?$allocator@VVertexUVRGBA@gfxu@@@1@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@QAE@ABV?$allocator@VVertexUVRGBA@gfxu@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >, COMDAT
; _this$ = ecx

; 486  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 487  : 		_Mylast = pointer();

  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 488  : 		_Myend = pointer();

  0000d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 594  : 		{	// construct allocator from _Al
; 595  : 		}

  00014	8b c1		 mov	 eax, ecx
  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@QAE@ABV?$allocator@VVertexUVRGBA@gfxu@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >::_Getal, COMDAT
; _this$dead$ = ecx

; 646  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 647  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\wchar.h
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv, COMDAT
; _this$ = ecx

; 948  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 949  : 		if (_Right._Myres < this->_BUF_SIZE)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  0000c	8b f9		 mov	 edi, ecx
  0000e	73 15		 jae	 SHORT $LN2@Assign_rv

; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);

  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00013	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 336  : 			: (_Elem *)_CSTD wmemmove(_First1, _First2, _Count));

  00014	74 1d		 je	 SHORT $LN1@Assign_rv
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\wchar.h

; 1267 :             return (wchar_t *)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00016	03 c0		 add	 eax, eax
  00018	50		 push	 eax
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 952  : 		else

  00023	eb 0e		 jmp	 SHORT $LN1@Assign_rv
$LN2@Assign_rv:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00025	85 ff		 test	 edi, edi
  00027	74 04		 je	 SHORT $LN23@Assign_rv
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	89 07		 mov	 DWORD PTR [edi], eax
$LN23@Assign_rv:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 955  : 			_Right._Bx._Ptr = pointer();

  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN1@Assign_rv:

; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;

  00033	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00036	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 958  : 		this->_Myres = _Right._Myres;

  00039	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003c	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 2219 : 		}
; 2220 : 
; 2221 : 	bool _Grow(size_type _Newsize,
; 2222 : 		bool _Trim = false)
; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2224 : 		if (max_size() < _Newsize)
; 2225 : 			_Xlen();	// result too long
; 2226 : 		if (this->_Myres < _Newsize)
; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow
; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
; 2231 : 		else if (_Newsize == 0)
; 2232 : 			_Eos(0);	// new size is zero, just null terminate
; 2233 : 		return (0 < _Newsize);	// return true only if more work to do
; 2234 : 		}
; 2235 : 
; 2236 : 	bool _Inside(const _Elem *_Ptr)
; 2237 : 		{	// test if _Ptr points inside string
; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)
; 2240 : 			return (false);	// don't ask
; 2241 : 		else
; 2242 : 			return (true);
; 2243 : 		}
; 2244 : 
; 2245 : 	static size_type _Pdif(const_iterator _P2,
; 2246 : 		const_iterator _P1)
; 2247 : 		{	// compute safe iterator difference
; 2248 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);
; 2249 : 		}
; 2250 : 
; 2251 : 	void _Tidy(bool _Built = false,
; 2252 : 		size_type _Newsize = 0)
; 2253 : 		{	// initialize buffer, deallocating any storage
; 2254 : 		if (!_Built)
; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)
; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;
; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2260 : 			if (0 < _Newsize)
; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);
; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  0003f	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7

; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00046	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  0004d	33 c0		 xor	 eax, eax
  0004f	5f		 pop	 edi
  00050	66 89 06	 mov	 WORD PTR [esi], ax
  00053	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 960  : 		}

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 306  : 			: _CSTD wcslen(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
  00007	66 83 3a 00	 cmp	 WORD PTR [edx], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1142 : 		{	// assign [_Ptr, <null>)

  0000b	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 306  : 			: _CSTD wcslen(_First));

  0000d	75 0e		 jne	 SHORT $LN5@assign
  0000f	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00011	50		 push	 eax
  00012	52		 push	 edx
  00013	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00018	5e		 pop	 esi

; 1145 : 		}

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
$LN5@assign:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 306  : 			: _CSTD wcslen(_First));

  0001d	8b c2		 mov	 eax, edx
  0001f	57		 push	 edi
  00020	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
$LL7@assign:
  00023	66 8b 08	 mov	 cx, WORD PTR [eax]
  00026	83 c0 02	 add	 eax, 2
  00029	66 85 c9	 test	 cx, cx
  0002c	75 f5		 jne	 SHORT $LL7@assign
  0002e	2b c7		 sub	 eax, edi
  00030	5f		 pop	 edi
  00031	d1 f8		 sar	 eax, 1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00033	50		 push	 eax
  00034	52		 push	 edx
  00035	8b ce		 mov	 ecx, esi
  00037	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  0003c	5e		 pop	 esi

; 1145 : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@XZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >, COMDAT
; _this$ = ecx

; 956  : 		{	// construct empty deque

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00003	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 79   : 		{	// construct childless container

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 778  : 		_Map = _Mapptr();

  0000b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 779  : 		_Mapsize = 0;

  00012	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 780  : 		_Myoff = 0;

  00019	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 781  : 		_Mysize = 0;

  00020	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	83 c4 04	 add	 esp, 4
  0002f	85 c0		 test	 eax, eax
  00031	74 17		 je	 SHORT $LN48@deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 900  : 		this->_Myproxy = _Alproxy.allocate(1);

  00033	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0003b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 902  : 		this->_Myproxy->_Mycont = this;

  00042	8b 06		 mov	 eax, DWORD PTR [esi]
  00044	89 30		 mov	 DWORD PTR [eax], esi

; 957  : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	c3		 ret	 0
$LN48@deque:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0004a	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN50@deque:
$LN47@deque:
  0004f	cc		 int	 3
??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@XZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T2 = -48						; size = 12
$T3 = -36						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Lock$4 = 8						; size = 4
__Right$ = 8						; size = 4
??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >, COMDAT
; _this$ = ecx

; 991  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00030	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 79   : 		{	// construct childless container

  00032	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 778  : 		_Map = _Mapptr();

  00038	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 779  : 		_Mapsize = 0;

  0003f	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 780  : 		_Myoff = 0;

  00046	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 781  : 		_Mysize = 0;

  0004d	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00054	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00059	83 c4 04	 add	 esp, 4
  0005c	85 c0		 test	 eax, eax
  0005e	75 05		 jne	 SHORT $LN31@deque

; 29   : 		_Xbad_alloc();	// report no memory

  00060	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN82@deque:
$LN31@deque:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 900  : 		this->_Myproxy = _Alproxy.allocate(1);

  00065	89 07		 mov	 DWORD PTR [edi], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00067	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0006d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 902  : 		this->_Myproxy->_Mycont = this;

  00074	8b 07		 mov	 eax, DWORD PTR [edi]
  00076	89 38		 mov	 DWORD PTR [eax], edi

; 993  : 		insert(begin(), _Right.begin(), _Right.end());

  00078	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00082	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00085	54		 push	 esp
  00086	e8 00 00 00 00	 call	 ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBE?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0008e	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00091	54		 push	 esp
  00092	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBE?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  00097	8d 45 dc	 lea	 eax, DWORD PTR $T3[ebp]
  0009a	50		 push	 eax
  0009b	8b cf		 mov	 ecx, edi
  0009d	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  000a1	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  000a6	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000a9	8b f4		 mov	 esi, esp
  000ab	8b d8		 mov	 ebx, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 118  : 		{	// copy an iterator

  000ad	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000b3	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 119  : 		*this = _Right;
; 120  : 		}
; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)

  000ba	8b 03		 mov	 eax, DWORD PTR [ebx]
  000bc	85 c0		 test	 eax, eax
  000be	74 1e		 je	 SHORT $LN70@deque

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  000c0	8b 00		 mov	 eax, DWORD PTR [eax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  000c2	85 c0		 test	 eax, eax
  000c4	75 14		 jne	 SHORT $LN71@deque

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  000c6	6a 03		 push	 3
  000c8	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  000cb	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  000d0	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  000d3	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  000d8	eb 04		 jmp	 SHORT $LN70@deque
$LN71@deque:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  000da	8b 00		 mov	 eax, DWORD PTR [eax]
  000dc	89 06		 mov	 DWORD PTR [esi], eax
$LN70@deque:
  000de	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000e1	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 993  : 		insert(begin(), _Right.begin(), _Right.end());

  000e4	8d 45 d0	 lea	 eax, DWORD PTR $T2[ebp]
  000e7	50		 push	 eax
  000e8	8b cf		 mov	 ecx, edi
  000ea	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000ee	e8 00 00 00 00	 call	 ??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >

; 997  : 		_CATCH_END
; 998  : 		}

  000f3	8b c7		 mov	 eax, edi
  000f5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ff	59		 pop	 ecx
  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	5b		 pop	 ebx
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c2 04 00	 ret	 4
__catch$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z$0:

; 994  : 		_CATCH_ALL
; 995  : 		_Tidy();

  00109	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010c	e8 00 00 00 00	 call	 ?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy

; 996  : 		_RERAISE;

  00111	6a 00		 push	 0
  00113	6a 00		 push	 0
  00115	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN83@deque:
$LN81@deque:
  0011a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::~_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >
__unwindfunclet$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z$3:
  00008	e9 00 00 00 00	 jmp	 ??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z$4:
  0000d	e9 00 00 00 00	 jmp	 ??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEX$$QAVMatrix@geom@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEX$$QAVMatrix@geom@@@Z PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back, COMDAT
; _this$ = ecx

; 1152 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	57		 push	 edi

; 1154 : 		_PUSH_BACK_BEGIN;

  00007	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000a	40		 inc	 eax
  0000b	39 43 08	 cmp	 DWORD PTR [ebx+8], eax
  0000e	77 06		 ja	 SHORT $LN2@push_back
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXI@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Growmap
$LN2@push_back:
  00016	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00019	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001c	49		 dec	 ecx
  0001d	21 4b 0c	 and	 DWORD PTR [ebx+12], ecx
  00020	03 43 0c	 add	 eax, DWORD PTR [ebx+12]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00023	23 c8		 and	 ecx, eax

; 1154 : 		_PUSH_BACK_BEGIN;

  00025	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00028	8d 3c 8d 00 00
	00 00		 lea	 edi, DWORD PTR [ecx*4]
  0002f	83 3c 07 00	 cmp	 DWORD PTR [edi+eax], 0
  00033	75 16		 jne	 SHORT $LN1@push_back
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00035	6a 40		 push	 64			; 00000040H
  00037	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003c	8b c8		 mov	 ecx, eax
  0003e	83 c4 04	 add	 esp, 4
  00041	85 c9		 test	 ecx, ecx
  00043	74 25		 je	 SHORT $LN45@push_back
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1154 : 		_PUSH_BACK_BEGIN;

  00045	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00048	89 0c 07	 mov	 DWORD PTR [edi+eax], ecx
$LN1@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  0004b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0004e	8b 3c 07	 mov	 edi, DWORD PTR [edi+eax]
  00051	85 ff		 test	 edi, edi
  00053	74 0c		 je	 SHORT $LN38@push_back
  00055	56		 push	 esi
  00056	8b 75 08	 mov	 esi, DWORD PTR __Val$[ebp]
  00059	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0005e	f3 a5		 rep movsd
  00060	5e		 pop	 esi
$LN38@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1158 : 		_PUSH_BACK_END;

  00061	ff 43 10	 inc	 DWORD PTR [ebx+16]
  00064	5f		 pop	 edi
  00065	5b		 pop	 ebx

; 1159 : 		}

  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
$LN45@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0006a	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN47@push_back:
$LN44@push_back:
  0006f	cc		 int	 3
?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEX$$QAVMatrix@geom@@@Z ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?empty@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBE_NXZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::empty, COMDAT
; _this$ = ecx

; 1382 : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00005	0f 94 c0	 sete	 al

; 1383 : 		}

  00008	c3		 ret	 0
?empty@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBE_NXZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEAAVMatrix@geom@@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 12
$T2 = -12						; size = 12
?back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEAAVMatrix@geom@@XZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::back, COMDAT
; _this$ = ecx

; 1435 : 		{	// return last element of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1436 : 		return (*(end() - 1));

  00006	8d 45 f4	 lea	 eax, DWORD PTR $T2[ebp]
  00009	51		 push	 ecx
  0000a	50		 push	 eax
  0000b	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
  00014	8b c8		 mov	 ecx, eax
  00016	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
  0001b	8b d0		 mov	 edx, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0001d	8b 02		 mov	 eax, DWORD PTR [edx]
  0001f	85 c0		 test	 eax, eax
  00021	75 11		 jne	 SHORT $LN9@back
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00023	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 1436 : 		return (*(end() - 1));

  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00029	49		 dec	 ecx
  0002a	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 1436 : 		return (*(end() - 1));

  0002d	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 1437 : 		}

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
$LN9@back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00034	8b 00		 mov	 eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00036	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 1436 : 		return (*(end() - 1));

  00039	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0003c	49		 dec	 ecx
  0003d	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 1436 : 		return (*(end() - 1));

  00040	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 1437 : 		}

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEAAVMatrix@geom@@XZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXABVMatrix@geom@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXABVMatrix@geom@@@Z PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back, COMDAT
; _this$ = ecx

; 1485 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	57		 push	 edi

; 1487 : 		_PUSH_BACK_BEGIN;

  00007	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000a	40		 inc	 eax
  0000b	39 43 08	 cmp	 DWORD PTR [ebx+8], eax
  0000e	77 06		 ja	 SHORT $LN2@push_back
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXI@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Growmap
$LN2@push_back:
  00016	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00019	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0001c	49		 dec	 ecx
  0001d	21 4b 0c	 and	 DWORD PTR [ebx+12], ecx
  00020	03 43 0c	 add	 eax, DWORD PTR [ebx+12]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00023	23 c8		 and	 ecx, eax

; 1487 : 		_PUSH_BACK_BEGIN;

  00025	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00028	8d 3c 8d 00 00
	00 00		 lea	 edi, DWORD PTR [ecx*4]
  0002f	83 3c 07 00	 cmp	 DWORD PTR [edi+eax], 0
  00033	75 16		 jne	 SHORT $LN1@push_back
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00035	6a 40		 push	 64			; 00000040H
  00037	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003c	8b c8		 mov	 ecx, eax
  0003e	83 c4 04	 add	 esp, 4
  00041	85 c9		 test	 ecx, ecx
  00043	74 25		 je	 SHORT $LN41@push_back
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1487 : 		_PUSH_BACK_BEGIN;

  00045	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00048	89 0c 07	 mov	 DWORD PTR [edi+eax], ecx
$LN1@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  0004b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0004e	8b 3c 07	 mov	 edi, DWORD PTR [edi+eax]
  00051	85 ff		 test	 edi, edi
  00053	74 0c		 je	 SHORT $LN36@push_back
  00055	56		 push	 esi
  00056	8b 75 08	 mov	 esi, DWORD PTR __Val$[ebp]
  00059	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0005e	f3 a5		 rep movsd
  00060	5e		 pop	 esi
$LN36@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1490 : 		_PUSH_BACK_END;

  00061	ff 43 10	 inc	 DWORD PTR [ebx+16]
  00064	5f		 pop	 edi
  00065	5b		 pop	 ebx

; 1491 : 		}

  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
$LN41@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0006a	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN43@push_back:
$LN40@push_back:
  0006f	cc		 int	 3
?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXABVMatrix@geom@@@Z ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?pop_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXXZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::pop_back, COMDAT
; _this$ = ecx

; 1382 : 		return (this->_Mysize == 0);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	85 c0		 test	 eax, eax

; 1495 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1496 : 		if (empty())
; 1497 : 			_DEBUG_ERROR("deque empty before pop");
; 1498 : 		else
; 1499 : 			{	// something to erase, do it
; 1500 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1501 : 			_Orphan_off(_Newoff);
; 1502 : 			size_type _Block = this->_Getblock(_Newoff);
; 1503 : 			this->_Getal().destroy(
; 1504 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1505 : 			if (--this->_Mysize == 0)
; 1506 : 				this->_Myoff = 0;
; 1507 : 			}
; 1508 : 
; 1509 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1510 : 		if (!empty())

  00005	74 0d		 je	 SHORT $LN1@pop_back

; 1511 : 			{	// something to erase, do it
; 1512 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1513 : 			size_type _Block = this->_Getblock(_Newoff);
; 1514 : 			this->_Getal().destroy(
; 1515 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1516 : 			if (--this->_Mysize == 0)

  00007	48		 dec	 eax
  00008	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000b	75 07		 jne	 SHORT $LN1@pop_back

; 1517 : 				this->_Myoff = 0;

  0000d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$LN1@pop_back:

; 1518 : 			}
; 1519 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1520 : 		}

  00014	c3		 ret	 0
?pop_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXXZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::pop_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXXZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy, COMDAT
; _this$ = ecx

; 1857 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1382 : 		return (this->_Mysize == 0);

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00006	85 c0		 test	 eax, eax

; 1858 : 		_Alpty _Almap(this->_Getal());
; 1859 : 		while (!empty())

  00008	74 0d		 je	 SHORT $LN5@Tidy
$LN42@Tidy:

; 1383 : 		}
; 1384 : 
; 1385 : 	allocator_type get_allocator() const _NOEXCEPT
; 1386 : 		{	// return allocator object for values
; 1387 : 		return (this->_Getal());
; 1388 : 		}
; 1389 : 
; 1390 : 	const_reference at(size_type _Pos) const
; 1391 : 		{	// subscript nonmutable sequence with checking
; 1392 : 		if (this->_Mysize <= _Pos)
; 1393 : 			_Xran();
; 1394 : 		return (*(begin() + _Pos));
; 1395 : 		}
; 1396 : 
; 1397 : 	reference at(size_type _Pos)
; 1398 : 		{	// subscript mutable sequence with checking
; 1399 : 		if (this->_Mysize <= _Pos)
; 1400 : 			_Xran();
; 1401 : 		return (*(begin() + _Pos));
; 1402 : 		}
; 1403 : 
; 1404 : 	const_reference operator[](size_type _Pos) const
; 1405 : 		{	// subscript nonmutable sequence
; 1406 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1407 : 		if (this->_Mysize <= _Pos)
; 1408 : 			_DEBUG_ERROR("deque subscript out of range");
; 1409 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1410 : 
; 1411 : 		return (*(begin() + _Pos));
; 1412 : 		}
; 1413 : 
; 1414 : 	reference operator[](size_type _Pos)
; 1415 : 		{	// subscript mutable sequence
; 1416 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1417 : 		if (this->_Mysize <= _Pos)
; 1418 : 			_DEBUG_ERROR("deque subscript out of range");
; 1419 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1420 : 
; 1421 : 		return (*(begin() + _Pos));
; 1422 : 		}
; 1423 : 
; 1424 : 	reference front()
; 1425 : 		{	// return first element of mutable sequence
; 1426 : 		return (*begin());
; 1427 : 		}
; 1428 : 
; 1429 : 	const_reference front() const
; 1430 : 		{	// return first element of nonmutable sequence
; 1431 : 		return (*begin());
; 1432 : 		}
; 1433 : 
; 1434 : 	reference back()
; 1435 : 		{	// return last element of mutable sequence
; 1436 : 		return (*(end() - 1));
; 1437 : 		}
; 1438 : 
; 1439 : 	const_reference back() const
; 1440 : 		{	// return last element of nonmutable sequence
; 1441 : 		return (*(end() - 1));
; 1442 : 		}
; 1443 : 
; 1444 : 	void push_front(const value_type& _Val)
; 1445 : 		{	// insert element at beginning
; 1446 : 		this->_Orphan_all();
; 1447 : 		_PUSH_FRONT_BEGIN;
; 1448 : 		this->_Getal().construct(
; 1449 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1450 : 		_PUSH_FRONT_END;
; 1451 : 		}
; 1452 : 
; 1453 : 	void pop_front()
; 1454 : 		{	// erase element at beginning
; 1455 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1456 : 		if (empty())
; 1457 : 			_DEBUG_ERROR("deque empty before pop");
; 1458 : 		else
; 1459 : 			{	// something to erase, do it
; 1460 : 			_Orphan_off(this->_Myoff);
; 1461 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1462 : 			this->_Getal().destroy(
; 1463 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1464 : 			if (--this->_Mysize == 0)
; 1465 : 				this->_Myoff = 0;
; 1466 : 			else
; 1467 : 				++this->_Myoff;
; 1468 : 			}
; 1469 : 
; 1470 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 		if (!empty())
; 1472 : 			{	// something to erase, do it
; 1473 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1474 : 			this->_Getal().destroy(
; 1475 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1476 : 			if (--this->_Mysize == 0)
; 1477 : 				this->_Myoff = 0;
; 1478 : 			else
; 1479 : 				++this->_Myoff;
; 1480 : 			}
; 1481 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1482 : 		}
; 1483 : 
; 1484 : 	void push_back(const value_type& _Val)
; 1485 : 		{	// insert element at end
; 1486 : 		this->_Orphan_all();
; 1487 : 		_PUSH_BACK_BEGIN;
; 1488 : 		this->_Getal().construct(
; 1489 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1490 : 		_PUSH_BACK_END;
; 1491 : 		}
; 1492 : 
; 1493 : 	void pop_back()
; 1494 : 		{	// erase element at end
; 1495 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1496 : 		if (empty())
; 1497 : 			_DEBUG_ERROR("deque empty before pop");
; 1498 : 		else
; 1499 : 			{	// something to erase, do it
; 1500 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1501 : 			_Orphan_off(_Newoff);
; 1502 : 			size_type _Block = this->_Getblock(_Newoff);
; 1503 : 			this->_Getal().destroy(
; 1504 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1505 : 			if (--this->_Mysize == 0)
; 1506 : 				this->_Myoff = 0;
; 1507 : 			}
; 1508 : 
; 1509 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1510 : 		if (!empty())
; 1511 : 			{	// something to erase, do it
; 1512 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1513 : 			size_type _Block = this->_Getblock(_Newoff);
; 1514 : 			this->_Getal().destroy(
; 1515 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1516 : 			if (--this->_Mysize == 0)

  0000a	48		 dec	 eax
  0000b	75 03		 jne	 SHORT $LN13@Tidy

; 1517 : 				this->_Myoff = 0;

  0000d	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN13@Tidy:

; 1382 : 		return (this->_Mysize == 0);

  00010	85 c0		 test	 eax, eax

; 1858 : 		_Alpty _Almap(this->_Getal());
; 1859 : 		while (!empty())

  00012	75 f6		 jne	 SHORT $LN42@Tidy
  00014	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN5@Tidy:
  00017	57		 push	 edi

; 1861 : 		for (size_type _Block = this->_Mapsize; 0 < _Block; )

  00018	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0001b	85 ff		 test	 edi, edi
  0001d	74 19		 je	 SHORT $LN3@Tidy
  0001f	90		 npad	 1
$LL4@Tidy:

; 1862 : 			{	// free storage for a block and destroy pointer
; 1863 : 			if (this->_Map[--_Block] != pointer())

  00020	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00023	4f		 dec	 edi
  00024	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00027	85 c0		 test	 eax, eax
  00029	74 09		 je	 SHORT $LN2@Tidy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00031	83 c4 04	 add	 esp, 4
$LN2@Tidy:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1861 : 		for (size_type _Block = this->_Mapsize; 0 < _Block; )

  00034	85 ff		 test	 edi, edi
  00036	75 e8		 jne	 SHORT $LL4@Tidy
$LN3@Tidy:

; 1864 : 				{	// free block and destroy its pointer
; 1865 : 				this->_Getal().deallocate(this->_Map[_Block], _DEQUESIZ);
; 1866 : 				this->_Getal().destroy(&this->_Map[_Block]);
; 1867 : 				}
; 1868 : 			}
; 1869 : 
; 1870 : 		if (this->_Map != _Mapptr())

  00038	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003b	5f		 pop	 edi
  0003c	85 c0		 test	 eax, eax
  0003e	74 09		 je	 SHORT $LN40@Tidy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00046	83 c4 04	 add	 esp, 4
$LN40@Tidy:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1874 : 		this->_Map = _Mapptr();

  00049	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00050	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00057	5e		 pop	 esi

; 1875 : 		}

  00058	c3		 ret	 0
?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXXZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??1?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::~_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >, COMDAT
; _this$ = ecx

; 883  : 		{	// destroy proxy

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00003	ff 36		 push	 DWORD PTR [esi]
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 912  : 		this->_Myproxy = 0;

  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	5e		 pop	 esi

; 884  : 		_Free_proxy();
; 885  : 		}

  00014	c3		 ret	 0
??1?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::~_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$_Yarn@D@std@@AAEXXZ PROC			; std::_Yarn<char>::_Tidy, COMDAT
; _this$ = ecx

; 3606 : 		{	// discard any string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3607 : 		if (_Myptr != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN4@Tidy

; 3608 : 
; 3609 :  #ifdef _DEBUG
; 3610 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3611 : 
; 3612 :  #else /* _DEBUG */
; 3613 : 			_CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN4@Tidy:

; 3614 :  #endif /* _DEBUG */
; 3615 : 
; 3616 : 		_Myptr = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi

; 3617 : 		}

  00019	c3		 ret	 0
?_Tidy@?$_Yarn@D@std@@AAEXXZ ENDP			; std::_Yarn<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@_W@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$_Yarn@_W@std@@AAEXXZ PROC			; std::_Yarn<wchar_t>::_Tidy, COMDAT
; _this$ = ecx

; 3606 : 		{	// discard any string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3607 : 		if (_Myptr != 0)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN4@Tidy

; 3608 : 
; 3609 :  #ifdef _DEBUG
; 3610 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3611 : 
; 3612 :  #else /* _DEBUG */
; 3613 : 			_CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN4@Tidy:

; 3614 :  #endif /* _DEBUG */
; 3615 : 
; 3616 : 		_Myptr = 0;

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi

; 3617 : 		}

  00019	c3		 ret	 0
?_Tidy@?$_Yarn@_W@std@@AAEXXZ ENDP			; std::_Yarn<wchar_t>::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT
; _this$ = ecx

; 52   : 		{	// set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 53   : 		ios_base::clear((iostate)(_Mystrbuf == 0
; 54   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00003	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00007	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  0000a	75 03		 jne	 SHORT $LN4@clear
  0000c	83 c8 04	 or	 eax, 4
$LN4@clear:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 302  : 		_Mystate = (iostate)(_State & _Statmask);

  0000f	83 e0 17	 and	 eax, 23			; 00000017H
  00012	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 303  : 		if ((_Mystate & _Except) == 0)

  00015	85 41 10	 test	 DWORD PTR [ecx+16], eax
  00018	74 08		 je	 SHORT $LN11@clear
  0001a	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  0001d	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN11@clear:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 55   : 		}

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T2 = 8							; size = 4
__Strbuf$ = 8						; size = 4
__Isstd$dead$ = 12					; size = 1
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::init, COMDAT
; _this$ = ecx

; 174  : 		{	// initialize with stream buffer pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 175  : 		_Init();	// initialize ios_base

  00026	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init

; 176  : 		_Mystrbuf = _Strbuf;

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Strbuf$[ebp]
  0002e	89 46 38	 mov	 DWORD PTR [esi+56], eax

; 135  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  00031	8d 45 08	 lea	 eax, DWORD PTR $T2[ebp]
  00034	50		 push	 eax
  00035	8b ce		 mov	 ecx, esi

; 177  : 		_Tiestr = 0;

  00037	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0

; 135  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  0003e	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00043	50		 push	 eax
  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004b	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  00050	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 422  : 		if (_Ptr != 0)

  00057	8b 4d 08	 mov	 ecx, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 135  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  0005a	83 c4 04	 add	 esp, 4
  0005d	8b f8		 mov	 edi, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 422  : 		if (_Ptr != 0)

  0005f	85 c9		 test	 ecx, ecx
  00061	74 11		 je	 SHORT $LN11@init

; 423  : 			_DELETE_CRT(_Ptr->_Decref());

  00063	8b 11		 mov	 edx, DWORD PTR [ecx]
  00065	ff 52 08	 call	 DWORD PTR [edx+8]
  00068	85 c0		 test	 eax, eax
  0006a	74 08		 je	 SHORT $LN11@init
  0006c	8b 10		 mov	 edx, DWORD PTR [eax]
  0006e	6a 01		 push	 1
  00070	8b c8		 mov	 ecx, eax
  00072	ff 12		 call	 DWORD PTR [edx]
$LN11@init:

; 424  : 		}
; 425  : 
; 426  : 	locale& operator=(const locale& _Right) _THROW0()
; 427  : 		{	// assign a locale
; 428  : 		if (_Ptr != _Right._Ptr)
; 429  : 			{	// different implementation, point at new one
; 430  : 			_DELETE_CRT(_Ptr->_Decref());
; 431  : 			_Ptr = _Right._Ptr;
; 432  : 			_Ptr->_Incref();
; 433  : 			}
; 434  : 		return (*this);
; 435  : 		}
; 436  :  #endif /* _NO_LOCALES */
; 437  : 
; 438  : 	string name() const
; 439  : 		{	// return locale name
; 440  : 		return (_Ptr == 0 ? string() : _Ptr->_Name.c_str());
; 441  : 		}
; 442  : 
; 443  : 	const char *c_str() const
; 444  : 		{	// return locale name as NTBS
; 445  : 		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());
; 446  : 		}
; 447  : 
; 448  : 	const facet *_Getfacet(size_t _Id) const
; 449  : 		{	// look up a facet in locale object
; 450  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 451  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end
; 452  : 		if (_Facptr != 0 || !_Ptr->_Xparent)
; 453  : 			return (_Facptr);	// found facet or not transparent
; 454  : 		else
; 455  : 			{	// look in current locale
; 456  : 			locale::_Locimp *_Ptr = _Getgloballocale();
; 457  : 			return (_Id < _Ptr->_Facetcount
; 458  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 459  : 				: 0);	// no entry in current locale
; 460  : 			}
; 461  : 		}
; 462  : 
; 463  : 	bool operator==(const locale& _Loc) const
; 464  : 		{	// compare locales for equality
; 465  : 		return (_Ptr == _Loc._Ptr
; 466  : 			|| name().compare("*") != 0 && name().compare(_Loc.name()) == 0);
; 467  : 		}
; 468  : 
; 469  : 	bool operator!=(const locale& _Right) const
; 470  : 		{	// test for locale inequality
; 471  : 		return (!(*this == _Right));
; 472  : 		}
; 473  : 
; 474  : 	static _MRTIMP2_PURE const locale& __CLRCALL_PURE_OR_CDECL
; 475  : 		classic();	// classic "C" locale
; 476  : 
; 477  : 	static _MRTIMP2_PURE locale __CLRCALL_PURE_OR_CDECL
; 478  : 		global(const locale&);	// current locale
; 479  : 
; 480  : 	static _MRTIMP2_PURE locale __CLRCALL_PURE_OR_CDECL
; 481  : 		empty();	// empty (transparent) locale
; 482  : 
; 483  : private:
; 484  : 	locale(_Locimp *_Ptrimp)
; 485  : 		: _Ptr(_Ptrimp)
; 486  : 		{	// construct from _Locimp pointer
; 487  : 		}
; 488  : 
; 489  :     static _MRTIMP2_PURE _Locimp *__CLRCALL_PURE_OR_CDECL
; 490  : 		_Init(bool _Do_incref = false);	// initialize locale
; 491  : 	static _MRTIMP2_PURE _Locimp *__CLRCALL_PURE_OR_CDECL
; 492  : 		_Getgloballocale();
; 493  : 	static _MRTIMP2_PURE void __CLRCALL_PURE_OR_CDECL
; 494  : 		_Setgloballocale(void *);
; 495  : 
; 496  : 	bool _Badname(const _Locinfo& _Lobj)
; 497  : 		{	// test if name is "*"
; 498  : 		return (_CSTD strcmp(_Lobj._Getname(), "*") == 0);
; 499  : 		}
; 500  : 
; 501  : 	_Locimp *_Ptr;	// pointer to locale implementation object
; 502  : 	};
; 503  : 
; 504  : 		// SUPPORT TEMPLATES
; 505  : 
; 506  :  #if _NO_LOCALES
; 507  : inline _Locinfo& _Get_locinfo()
; 508  : 	{	// get reference to common locale info
; 509  : 	static _Locinfo _Lobj;
; 510  : 	return (_Lobj);
; 511  : 	}
; 512  : 
; 513  : template<class _Facet>
; 514  : 	class _Wrap_facet
; 515  : 		: public _Facet
; 516  : 	{	// makes a facet destructible and shareable
; 517  : public:
; 518  : 	_Wrap_facet()
; 519  : 		: _Facet(_Get_locinfo())
; 520  : 		{	// construct from locale object
; 521  : 		}
; 522  : 	};
; 523  :  #endif /* _NO_LOCALES */
; 524  : 
; 525  : template<class _Facet>
; 526  : 	struct _Facetptr
; 527  : 	{	// store pointer to lazy facet for use_facet
; 528  : 	__PURE_APPDOMAIN_GLOBAL static const locale::facet *_Psave;
; 529  : 	};
; 530  : 
; 531  : template<class _Facet>
; 532  : 	__PURE_APPDOMAIN_GLOBAL const locale::facet *_Facetptr<_Facet>::
; 533  : 		_Psave = 0;
; 534  : 
; 535  :   #define _ADDFAC(loc, pfac)	locale(loc, pfac)	/* add facet to locale */
; 536  : 
; 537  :   #define _USE(loc, fac)	\
; 538  : 	use_facet< fac >(loc)	/* get facet reference from locale */
; 539  : 
; 540  : template<class _Facet> inline
; 541  : 	const _Facet& __CRTDECL use_facet(const locale& _Loc)
; 542  : 
; 543  : 	{	// get facet reference from locale
; 544  :  #if _NO_LOCALES
; 545  : 	static _Wrap_facet<_Facet> _Wfac;
; 546  : 	return (*(_Facet *)&_Wfac);
; 547  : 
; 548  :  #else /* _NO_LOCALES */
; 549  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic
; 550  : 		const locale::facet *_Psave =
; 551  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 552  : 
; 553  : 		size_t _Id = _Facet::id;
; 554  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);
; 555  : 
; 556  : 		if (_Pf != 0)
; 557  : 			;	// got facet from locale
; 558  : 		else if (_Psave != 0)
; 559  : 			_Pf = _Psave;	// lazy facet already allocated
; 560  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))
; 561  : 
; 562  :  #if _HAS_EXCEPTIONS
; 563  : 
; 564  : 			_THROW_NCEE(_XSTD bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed
; 565  : 
; 566  :  #else /* _HAS_EXCEPTIONS */
; 567  : 			abort();	// lazy disallowed
; 568  :  #endif /* _HAS_EXCEPTIONS */
; 569  : 
; 570  : 		else
; 571  : 			{	// queue up lazy facet for destruction
; 572  : 			_Pf = _Psave;
; 573  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 574  : 
; 575  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 576  : 			_Pfmod->_Incref();
; 577  : 
; 578  :  #if defined(_M_CEE)
; 579  : 			_Facet_Register_m(_Pfmod);
; 580  : 
; 581  :  #else /* defined(_M_CEE) */
; 582  : 			_Facet_Register(_Pfmod);
; 583  :  #endif /* defined(_M_CEE) */
; 584  : 			}
; 585  : 
; 586  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast
; 587  : 	_END_LOCK()
; 588  :  #endif /* _NO_LOCALES */
; 589  : 	}	// end of use_facet body
; 590  : 
; 591  : 		// TEMPLATE FUNCTION _Getloctxt
; 592  : template<class _Elem,
; 593  : 	class _InIt> inline
; 594  : 	int __CRTDECL _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
; 595  : 		const _Elem *_Ptr)
; 596  : 	{	// find field at _Ptr that matches longest in [_First, _Last)
; 597  : 	for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
; 598  : 		if (_Ptr[_Off] == _Ptr[0])
; 599  : 			++_Numfields;	// add fields with leading mark to initial count
; 600  : 	string _Str(_Numfields, '\0');	// one column counter for each field
; 601  : 
; 602  : 	int _Ans = -2;	// no candidates so far
; 603  : 	for (size_t _Column = 1; ; ++_Column, ++_First, _Ans = -1)
; 604  : 		{	// test each element against all viable fields
; 605  : 		bool _Prefix = false;	// seen at least one valid prefix
; 606  : 		size_t _Off = 0;	// offset into fields
; 607  : 		size_t _Field = 0;	// current field number
; 608  : 
; 609  : 		for (; _Field < _Numfields; ++_Field)
; 610  : 			{	// test element at _Column in field _Field
; 611  : 			for (; _Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0]; ++_Off)
; 612  : 				;	// find beginning of field
; 613  : 
; 614  : 			if (_Str[_Field] != '\0')
; 615  : 				_Off += _Str[_Field];	// skip tested columns in field
; 616  : 			else if (_Ptr[_Off += _Column] == _Ptr[0]
; 617  : 				|| _Ptr[_Off] == (_Elem)0)
; 618  : 				{	// matched all of field, save as possible answer
; 619  : 				_Str[_Field] = (char)(_Column < 127
; 620  : 					? _Column : 127);	// save skip count if small enough
; 621  : 				_Ans = (int)_Field;	// save answer
; 622  : 				}
; 623  : 			else if (_First == _Last || _Ptr[_Off] != *_First)
; 624  : 				_Str[_Field] = (char)(_Column < 127
; 625  : 					? _Column : 127);	// no match, just save skip count
; 626  : 			else
; 627  : 				_Prefix = true;	// still a valid prefix
; 628  : 			}
; 629  : 
; 630  : 		if (!_Prefix || _First == _Last)
; 631  : 			break;	// no pending prefixes or no input, give up
; 632  : 		}
; 633  : 	return (_Ans);	// return field number or negative value on failure
; 634  : 	}
; 635  : 
; 636  : 		// TEMPLATE FUNCTION _Maklocbyte
; 637  : #define _MAKLOCBYTE(Elem, chr, cvt) \
; 638  : 	_Maklocbyte((_Elem)chr, cvt)	/* convert Elem to char */
; 639  : 
; 640  : template<class _Elem> inline
; 641  : 	char __CRTDECL _Maklocbyte(_Elem _Char,
; 642  : 		const _Locinfo::_Cvtvec&)
; 643  : 	{	// convert _Elem to char using _Cvtvec
; 644  : 	return ((char)(unsigned char)_Char);
; 645  : 	}
; 646  : 
; 647  : template<> inline
; 648  : 	char __CRTDECL _Maklocbyte(wchar_t _Char,
; 649  : 		const _Locinfo::_Cvtvec& _Cvt)
; 650  : 	{	// convert wchar_t to char using _Cvtvec
; 651  : 	char _Byte = '\0';
; 652  : 	_Mbstinit(_Mbst1);
; 653  : 	_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
; 654  : 	return (_Byte);
; 655  : 	}
; 656  : 
; 657  :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 658  : template<> inline
; 659  : 	char __CRTDECL _Maklocbyte(unsigned short _Char,
; 660  : 		const _Locinfo::_Cvtvec &_Cvt)
; 661  : 	{	// convert unsigned short to char using _Cvtvec
; 662  : 	char _Byte = '\0';
; 663  : 	_Mbstinit(_Mbst1);
; 664  : 	_Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
; 665  : 	return (_Byte);
; 666  : 	}
; 667  :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 668  : 
; 669  : 		// TEMPLATE FUNCTION _Maklocchr
; 670  : #define _MAKLOCCHR(Elem, chr, cvt) \
; 671  : 	_Maklocchr(chr, (Elem *)0, cvt)	/* convert char to Elem */
; 672  : 
; 673  : template<class _Elem> inline
; 674  : 	_Elem __CRTDECL _Maklocchr(char _Byte, _Elem *,
; 675  : 		const _Locinfo::_Cvtvec&)
; 676  : 	{	// convert char to _Elem using _Cvtvec
; 677  : 	return ((_Elem)(unsigned char)_Byte);
; 678  : 	}
; 679  : 
; 680  : template<> inline
; 681  : 	wchar_t __CRTDECL _Maklocchr(char _Byte, wchar_t *,
; 682  : 		const _Locinfo::_Cvtvec& _Cvt)
; 683  : 	{	// convert char to wchar_t using _Cvtvec
; 684  : 	wchar_t _Wc = L'\0';
; 685  : 	_Mbstinit(_Mbst1);
; 686  : 	_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
; 687  : 	return (_Wc);
; 688  : 	}
; 689  : 
; 690  :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 691  : template<> inline
; 692  : 	unsigned short __CRTDECL _Maklocchr(char _Byte, unsigned short *,
; 693  : 		const _Locinfo::_Cvtvec &_Cvt)
; 694  : 	{	// convert char to unsigned short using _Cvtvec
; 695  : 	unsigned short _Wc = (unsigned short)0;
; 696  : 	_Mbstinit(_Mbst1);
; 697  : 	_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
; 698  : 	return (_Wc);
; 699  : 	}
; 700  :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 701  : 
; 702  : 		// TEMPLATE FUNCTION _Maklocstr
; 703  : #define _MAKLOCSTR(Elem, str, cvt)	\
; 704  : 	_Maklocstr(str, (Elem *)0, cvt)	/* convert C string to Elem sequence */
; 705  : 
; 706  : template<class _Elem> inline
; 707  : 	_Elem *__CRTDECL _Maklocstr(const char *_Ptr, _Elem *,
; 708  : 		const _Locinfo::_Cvtvec&)
; 709  : 	{	// convert C string to _Elem sequence using _Cvtvec
; 710  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;
; 711  : 	_Elem *_Ptrdest = _NEW_CRT _Elem[_Count];
; 712  : 
; 713  :  #pragma warning(push)
; 714  :  #pragma warning(disable: 6011)	/* quiet prefast noise */
; 715  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
; 716  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;
; 717  :  #pragma warning(pop)
; 718  : 
; 719  : 	return (_Ptrdest);
; 720  : 	}
; 721  : 
; 722  : template<> inline
; 723  : 	wchar_t *__CRTDECL _Maklocstr(const char *_Ptr, wchar_t *,
; 724  : 		const _Locinfo::_Cvtvec& _Cvt)
; 725  : 	{	// convert C string to wchar_t sequence using _Cvtvec
; 726  : 	size_t _Count, _Count1;
; 727  : 	size_t _Wchars;
; 728  : 	const char *_Ptr1;
; 729  : 	int _Bytes;
; 730  : 	wchar_t _Wc;
; 731  : 	_Mbstinit(_Mbst1);
; 732  : 
; 733  : 	_Count1 = _CSTD strlen(_Ptr) + 1;
; 734  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
; 735  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
; 736  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
; 737  : 			break;
; 738  : 	++_Wchars;	// count terminating nul
; 739  : 
; 740  : 	wchar_t *_Ptrdest = _NEW_CRT wchar_t[_Wchars];
; 741  : 	wchar_t *_Ptrnext = _Ptrdest;
; 742  : 	_Mbstinit(_Mbst2);
; 743  : 
; 744  :  #pragma warning(push)
; 745  :  #pragma warning(disable: 6011)	/* quiet prefast noise */
; 746  : 	for (; 0 < _Wchars;
; 747  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
; 748  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
; 749  : 			break;
; 750  : 	*_Ptrnext = L'\0';
; 751  :  #pragma warning(pop)
; 752  : 
; 753  : 	return (_Ptrdest);
; 754  : 	}
; 755  : 
; 756  :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 757  : template<> inline
; 758  : 	unsigned short *__CRTDECL _Maklocstr(const char *_Ptr, unsigned short *,
; 759  : 		const _Locinfo::_Cvtvec &_Cvt)
; 760  : 	{	// convert C string to unsigned short sequence using _Cvtvec
; 761  : 	size_t _Count, _Count1;
; 762  : 	size_t _Wchars;
; 763  : 	const char *_Ptr1;
; 764  : 	int _Bytes;
; 765  : 	unsigned short _Wc;
; 766  : 	_Mbstinit(_Mbst1);
; 767  : 
; 768  : 	_Count1 = _CSTD strlen(_Ptr) + 1;
; 769  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
; 770  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
; 771  : 		if ((_Bytes =
; 772  : 			_Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
; 773  : 			break;
; 774  : 	++_Wchars;	// count terminating nul
; 775  : 
; 776  : 	wchar_t *_Ptrdest = _NEW_CRT wchar_t[_Wchars];
; 777  : 	wchar_t *_Ptrnext = _Ptrdest;
; 778  : 	_Mbstinit(_Mbst2);
; 779  : 	for (; 0 < _Wchars;
; 780  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
; 781  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
; 782  : 			break;
; 783  : 	*_Ptrnext = L'\0';
; 784  : 	return ((unsigned short *)_Ptrdest);
; 785  : 	}
; 786  :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 787  : 
; 788  : 		// STRUCT codecvt_base
; 789  :  #pragma warning(push)
; 790  :  #pragma warning(disable: 4275)
; 791  : 
; 792  : class _CRTIMP2_PURE codecvt_base
; 793  : 	: public locale::facet
; 794  : 	{	// base class for codecvt
; 795  : public:
; 796  : 	enum
; 797  : 		{	// constants for different parse states
; 798  : 		ok, partial, error, noconv};
; 799  : 	typedef int result;
; 800  : 
; 801  : 	__CLR_OR_THIS_CALL codecvt_base(size_t _Refs = 0)
; 802  : 		: locale::facet(_Refs)
; 803  : 		{	// default constructor
; 804  : 		}
; 805  : 
; 806  : 	bool __CLR_OR_THIS_CALL always_noconv() const _THROW0()
; 807  : 		{	// return true if conversions never change input (from codecvt)
; 808  : 		return (do_always_noconv());
; 809  : 		}
; 810  : 
; 811  : 	int __CLR_OR_THIS_CALL max_length() const _THROW0()
; 812  : 		{	// return maximum length required for a conversion (from codecvt)
; 813  : 		return (do_max_length());
; 814  : 		}
; 815  : 
; 816  : 	int __CLR_OR_THIS_CALL encoding() const _THROW0()
; 817  : 		{	// return length of code sequence (from codecvt)
; 818  : 		return (do_encoding());
; 819  : 		}
; 820  : 
; 821  : 	__CLR_OR_THIS_CALL ~codecvt_base() _NOEXCEPT
; 822  : 		{	// destroy the object
; 823  : 		}
; 824  : 
; 825  : protected:
; 826  : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const _THROW0()
; 827  : 		{	// return true if conversions never change input (from codecvt)
; 828  : 		return (false);
; 829  : 		}
; 830  : 
; 831  : 	virtual int __CLR_OR_THIS_CALL do_max_length() const _THROW0()
; 832  : 		{	// return maximum length required for a conversion (from codecvt)
; 833  : 		return (1);
; 834  : 		}
; 835  : 
; 836  : 	virtual int __CLR_OR_THIS_CALL do_encoding() const _THROW0()
; 837  : 		{	// return length of code sequence (from codecvt)
; 838  : 		return (1);	// -1 ==> state dependent, 0 ==> varying length
; 839  : 		}
; 840  : 	};
; 841  : 
; 842  :  #pragma warning(pop)
; 843  : 
; 844  : 		// TEMPLATE CLASS codecvt
; 845  : template<class _Elem,
; 846  : 	class _Byte,
; 847  : 	class _Statype>
; 848  : 	class codecvt
; 849  : 		: public codecvt_base
; 850  : 	{	// facet for converting between _Elem and char (_Byte) sequences
; 851  : public:
; 852  : 	typedef _Elem intern_type;
; 853  : 	typedef _Byte extern_type;
; 854  : 	typedef _Statype state_type;
; 855  : 
; 856  : 	result __CLR_OR_THIS_CALL in(_Statype& _State,
; 857  : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 858  : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 859  : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 860  : 		return (do_in(_State,
; 861  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 862  : 		}
; 863  : 
; 864  : 	result __CLR_OR_THIS_CALL out(_Statype& _State,
; 865  : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 866  : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 867  : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last2)
; 868  : 		return (do_out(_State,
; 869  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 870  : 		}
; 871  : 
; 872  : 	result __CLR_OR_THIS_CALL unshift(_Statype& _State,
; 873  : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 874  : 		{	// generate bytes to return to default shift state
; 875  : 		return (do_unshift(_State, _First2, _Last2, _Mid2));
; 876  : 		}
; 877  : 
; 878  : 	int __CLR_OR_THIS_CALL length(_Statype& _State, const _Byte *_First1,
; 879  : 		const _Byte *_Last1, size_t _Count) const
; 880  : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 881  : 		return (do_length(_State, _First1, _Last1, _Count));
; 882  : 		}
; 883  : 
; 884  : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;	// unique facet id
; 885  : 
; 886  : 	explicit __CLR_OR_THIS_CALL codecvt(size_t _Refs = 0)
; 887  : 		: codecvt_base(_Refs)
; 888  : 		{	// construct from current locale
; 889  : 		_Init(_Locinfo());
; 890  : 		}
; 891  : 
; 892  : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
; 893  : 		: codecvt_base(_Refs)
; 894  : 		{	// construct from specified locale
; 895  : 		_Init(_Lobj);
; 896  : 		}
; 897  : 
; 898  : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = 0,
; 899  : 		const locale *_Ploc = 0)
; 900  : 		{	// return locale category mask and construct standard facet
; 901  : 		if (_Ppf != 0 && *_Ppf == 0)
; 902  : 			*_Ppf = _NEW_CRT codecvt<_Elem, _Byte, _Statype>(
; 903  : 				_Locinfo(_Ploc->c_str()));
; 904  : 		return (_X_CTYPE);
; 905  : 		}
; 906  : 
; 907  : protected:
; 908  : 	virtual __CLR_OR_THIS_CALL ~codecvt() _NOEXCEPT
; 909  : 		{	// destroy the object
; 910  : 		}
; 911  : 
; 912  : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo&)
; 913  : 		{	// initialize from _Locinfo object
; 914  : 		}
; 915  : 
; 916  : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const _THROW0()
; 917  : 		{	// return true if conversions never change input (from codecvt)
; 918  : 		return (is_same<_Byte, _Elem>::value);
; 919  : 		}
; 920  : 
; 921  : 	virtual result __CLR_OR_THIS_CALL do_in(_Statype&,
; 922  : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 923  : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 924  : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 925  : 		_Mid1 = _First1, _Mid2 = _First2;
; 926  : 		if (is_same<_Byte, _Elem>::value)
; 927  : 			return (noconv);	// convert nothing
; 928  : 		else
; 929  : 			{	// types differ, copy one for one
; 930  : 			for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
; 931  : 				*_Mid2 = (_Elem)*_Mid1;
; 932  : 			return (ok);
; 933  : 			}
; 934  : 		}
; 935  : 
; 936  : 	virtual result __CLR_OR_THIS_CALL do_out(_Statype&,
; 937  : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 938  : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 939  : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 940  : 		_Mid1 = _First1, _Mid2 = _First2;
; 941  : 		if (is_same<_Byte, _Elem>::value)
; 942  : 			return (noconv);	// convert nothing
; 943  : 		else
; 944  : 			{	// types differ, copy one for one
; 945  : 			for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
; 946  : 				*_Mid2 = (_Byte)*_Mid1;
; 947  : 			return (ok);
; 948  : 			}
; 949  : 		}
; 950  : 
; 951  : 	virtual result __CLR_OR_THIS_CALL do_unshift(_Statype&,
; 952  : 		_Byte *_First2, _Byte *, _Byte *&_Mid2) const
; 953  : 		{	// generate bytes to return to default shift state
; 954  : 		_Mid2 = _First2;
; 955  : 		return (ok);	// convert nothing
; 956  : 		}
; 957  : 
; 958  : 	virtual int __CLR_OR_THIS_CALL do_length(_Statype&, const _Byte *_First1,
; 959  : 		const _Byte *_Last1, size_t _Count) const
; 960  : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 961  : 		return ((int)(_Count < (size_t)(_Last1 - _First1)
; 962  : 			? _Count : _Last1 - _First1));	// assume 1-to-1 conversion
; 963  : 		}
; 964  : 	};
; 965  : 
; 966  : 		// STATIC codecvt::id OBJECT
; 967  : template<class _Elem,
; 968  : 	class _Byte,
; 969  : 	class _Statype>
; 970  : 	__PURE_APPDOMAIN_GLOBAL locale::id codecvt<_Elem, _Byte, _Statype>::id;
; 971  : 
; 972  :  #if _HAS_CHAR16_T_LANGUAGE_SUPPORT
; 973  : 		// ENUM _Codecvt_mode
; 974  : enum _Codecvt_mode {
; 975  : 	_Consume_header = 4,
; 976  : 	_Generate_header = 2
; 977  : 	};
; 978  : 
; 979  : 		// CLASS codecvt<char16_t, char, _Mbstatet>
; 980  : template<>
; 981  : 	class _CRTIMP2_PURE codecvt<char16_t, char, _Mbstatet>
; 982  : 	: public codecvt_base
; 983  : 	{	// facet for converting between char16_t and UTF-8 byte sequences
; 984  : public:
; 985  : 	typedef codecvt<char16_t, char, _Mbstatet> _Mybase;
; 986  : 	typedef char16_t _Elem;
; 987  : 	typedef char _Byte;
; 988  : 	typedef _Mbstatet _Statype;
; 989  : 	typedef _Elem intern_type;
; 990  : 	typedef _Byte extern_type;
; 991  : 	typedef _Statype state_type;
; 992  : 
; 993  : 	result __CLR_OR_THIS_CALL in(_Statype& _State,
; 994  : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 995  : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 996  : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 997  : 		return (do_in(_State,
; 998  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 999  : 		}
; 1000 : 
; 1001 : 	result __CLR_OR_THIS_CALL out(_Statype& _State,
; 1002 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1003 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1004 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1005 : 		return (do_out(_State,
; 1006 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1007 : 		}
; 1008 : 
; 1009 : 	result __CLR_OR_THIS_CALL unshift(_Statype& _State,
; 1010 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1011 : 		{	// generate bytes to return to default shift state
; 1012 : 		return (do_unshift(_State,
; 1013 : 			_First2, _Last2, _Mid2));
; 1014 : 		}
; 1015 : 
; 1016 : 	int __CLR_OR_THIS_CALL length(_Statype& _State, const _Byte *_First1,
; 1017 : 		const _Byte *_Last1, size_t _Count) const
; 1018 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1019 : 		return (do_length(_State, _First1, _Last1, _Count));
; 1020 : 		}
; 1021 : 
; 1022 : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;
; 1023 : 
; 1024 : 	explicit __CLR_OR_THIS_CALL codecvt(size_t _Refs = 0)
; 1025 : 		: codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
; 1026 : 		{	// construct from current locale
; 1027 : 		_BEGIN_LOCINFO(_Lobj)
; 1028 : 			_Init(_Lobj);
; 1029 : 		_END_LOCINFO()
; 1030 : 		}
; 1031 : 
; 1032 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
; 1033 : 		: codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
; 1034 : 		{	// construct from specified locale
; 1035 : 		_Init(_Lobj);
; 1036 : 		}
; 1037 : 
; 1038 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
; 1039 : 		_Codecvt_mode _Mode_arg, size_t _Refs = 0)
; 1040 : 		: codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
; 1041 : 		{	// construct from specified locale and parameters
; 1042 : 		_Init(_Lobj);
; 1043 : 		}
; 1044 : 
; 1045 : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = 0,
; 1046 : 		const locale *_Ploc = 0)
; 1047 : 		{	// return locale category mask and construct standard facet
; 1048 : 		if (_Ppf != 0 && *_Ppf == 0)
; 1049 : 			*_Ppf = _NEW_CRT codecvt<_Elem, _Byte, _Statype>(
; 1050 : 				_Locinfo(_Ploc->c_str()));
; 1051 : 		return (_X_CTYPE);
; 1052 : 		}
; 1053 : 
; 1054 : protected:
; 1055 : 	virtual __CLR_OR_THIS_CALL ~codecvt() _NOEXCEPT
; 1056 : 		{	// destroy the object
; 1057 : 		}
; 1058 : 
; 1059 : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo&)
; 1060 : 		{	// initialize
; 1061 : 		}
; 1062 : 
; 1063 : 	virtual result __CLR_OR_THIS_CALL do_in(_Statype& _State,
; 1064 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1065 : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1066 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last2)
; 1067 : 		unsigned short *_Pstate = (unsigned short *)&_State;
; 1068 : 		_Mid1 = _First1;
; 1069 : 		_Mid2 = _First2;
; 1070 : 
; 1071 : 		for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
; 1072 : 			{	// convert a multibyte sequence
; 1073 : 			unsigned char _By = (unsigned char)*_Mid1;
; 1074 : 			unsigned long _Ch;
; 1075 : 			int _Nextra, _Nskip;
; 1076 : 
; 1077 : 			if (*_Pstate <= 1)
; 1078 : 				;	// no leftover word
; 1079 : 			else if (_By < 0x80 || 0xc0 <= _By)
; 1080 : 				return (_Mybase::error);	// not continuation byte
; 1081 : 			else
; 1082 : 				{	// deliver second half of two-word value
; 1083 : 				++_Mid1;
; 1084 : 				*_Mid2++ = (_Elem)(*_Pstate | _By & 0x3f);
; 1085 : 				*_Pstate = 1;
; 1086 : 				continue;
; 1087 : 				}
; 1088 : 
; 1089 : 			if (_By < 0x80)
; 1090 : 				_Ch = _By, _Nextra = 0;
; 1091 : 			else if (_By < 0xc0)
; 1092 : 				{	// 0x80-0xdf not first byte
; 1093 : 				++_Mid1;
; 1094 : 				return (_Mybase::error);
; 1095 : 				}
; 1096 : 			else if (_By < 0xe0)
; 1097 : 				_Ch = _By & 0x1f, _Nextra = 1;
; 1098 : 			else if (_By < 0xf0)
; 1099 : 				_Ch = _By & 0x0f, _Nextra = 2;
; 1100 : 			else if (_By < 0xf8)
; 1101 : 				_Ch = _By & 0x07, _Nextra = 3;
; 1102 : 			else
; 1103 : 				_Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;
; 1104 : 
; 1105 : 			_Nskip = _Nextra < 3 ? 0 : 1;	// leave a byte for 2nd word
; 1106 : 			_First1 = _Mid1;	// roll back point
; 1107 : 
; 1108 : 			if (_Nextra == 0)
; 1109 : 				++_Mid1;
; 1110 : 			else if (_Last1 - _Mid1 < _Nextra + 1 - _Nskip)
; 1111 : 				break;	// not enough input
; 1112 : 			else
; 1113 : 				for (++_Mid1; _Nskip < _Nextra; --_Nextra, ++_Mid1)
; 1114 : 					if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
; 1115 : 						return (_Mybase::error);	// not continuation byte
; 1116 : 					else
; 1117 : 						_Ch = _Ch << 6 | _By & 0x3f;
; 1118 : 			if (0 < _Nskip)
; 1119 : 				_Ch <<= 6;	// get last byte on next call
; 1120 : 
; 1121 : 			if ((_Maxcode < 0x10ffff ? _Maxcode : 0x10ffff) < _Ch)
; 1122 : 				return (_Mybase::error);	// value too large
; 1123 : 			else if (0xffff < _Ch)
; 1124 : 				{	// deliver first half of two-word value, save second word
; 1125 : 				unsigned short _Ch0 =
; 1126 : 					(unsigned short)(0xd800 | (_Ch >> 10) - 0x0040);
; 1127 : 
; 1128 : 				*_Mid2++ = (_Elem)_Ch0;
; 1129 : 				*_Pstate = (unsigned short)(0xdc00 | _Ch & 0x03ff);
; 1130 : 				continue;
; 1131 : 				}
; 1132 : 
; 1133 : 			if (_Nskip == 0)
; 1134 : 				;
; 1135 : 			else if (_Mid1 == _Last1)
; 1136 : 				{	// not enough bytes, noncanonical value
; 1137 : 				_Mid1 = _First1;
; 1138 : 				break;
; 1139 : 				}
; 1140 : 			else if ((_By = (unsigned char)*_Mid1++) < 0x80 || 0xc0 <= _By)
; 1141 : 				return (_Mybase::error);	// not continuation byte
; 1142 : 			else
; 1143 : 				_Ch |= _By & 0x3f;	// complete noncanonical value
; 1144 : 
; 1145 : 			if (*_Pstate == 0)
; 1146 : 				{	// first time, maybe look for and consume header
; 1147 : 				*_Pstate = 1;
; 1148 : 
; 1149 : 				if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
; 1150 : 					{	// drop header and retry
; 1151 : 					result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
; 1152 : 						_First2, _Last2, _Mid2);
; 1153 : 
; 1154 : 					if (_Ans == _Mybase::partial)
; 1155 : 						{	// roll back header determination
; 1156 : 						*_Pstate = 0;
; 1157 : 						_Mid1 = _First1;
; 1158 : 						}
; 1159 : 					return (_Ans);
; 1160 : 					}
; 1161 : 				}
; 1162 : 
; 1163 : 			*_Mid2++ = (_Elem)_Ch;
; 1164 : 			}
; 1165 : 
; 1166 : 		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
; 1167 : 		}
; 1168 : 
; 1169 : 	virtual result __CLR_OR_THIS_CALL do_out(_Statype& _State,
; 1170 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1171 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1172 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1173 : 		unsigned short *_Pstate = (unsigned short *)&_State;
; 1174 : 		_Mid1 = _First1;
; 1175 : 		_Mid2 = _First2;
; 1176 : 
; 1177 : 		for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
; 1178 : 			{	// convert and put a wide char
; 1179 : 			unsigned long _Ch;
; 1180 : 			unsigned short _Ch1 = (unsigned short)*_Mid1;
; 1181 : 			bool _Save = false;
; 1182 : 
; 1183 : 			if (1 < *_Pstate)
; 1184 : 				{	// get saved MS 11 bits from *_Pstate
; 1185 : 				if (_Ch1 < 0xdc00 || 0xe000 <= _Ch1)
; 1186 : 					return (_Mybase::error);	// bad second word
; 1187 : 				_Ch = (*_Pstate << 10) | (_Ch1 - 0xdc00);
; 1188 : 				}
; 1189 : 			else if (0xd800 <= _Ch1 && _Ch1 < 0xdc00)
; 1190 : 				{	// get new first word
; 1191 : 				_Ch = (_Ch1 - 0xd800 + 0x0040) << 10;
; 1192 : 				_Save = true;	// put only first byte, rest with second word
; 1193 : 				}
; 1194 : 			else
; 1195 : 				_Ch = _Ch1;	// not first word, just put it
; 1196 : 
; 1197 : 			_Byte _By;
; 1198 : 			int _Nextra;
; 1199 : 
; 1200 : 			if (_Ch < 0x0080)
; 1201 : 				_By = (_Byte)_Ch, _Nextra = 0;
; 1202 : 			else if (_Ch < 0x0800)
; 1203 : 				_By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
; 1204 : 			else if (_Ch < 0x10000)
; 1205 : 				_By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
; 1206 : 			else
; 1207 : 				_By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;
; 1208 : 
; 1209 : 			int _Nput = _Nextra < 3 ? _Nextra + 1 : _Save ? 1 : 3;
; 1210 : 
; 1211 : 			if (_Last2 - _Mid2 < _Nput)
; 1212 : 				break;	// not enough room, even without header
; 1213 : 			else if (*_Pstate != 0 || (_Mode & _Generate_header) == 0)
; 1214 : 				;	// no header to put
; 1215 : 			else if (_Last2 - _Mid2 < 3 + _Nput)
; 1216 : 				break;	// not enough room for header + output
; 1217 : 			else
; 1218 : 				{	// prepend header
; 1219 : 				*_Mid2++ = (_Byte)(unsigned char)0xef;
; 1220 : 				*_Mid2++ = (_Byte)(unsigned char)0xbb;
; 1221 : 				*_Mid2++ = (_Byte)(unsigned char)0xbf;
; 1222 : 				}
; 1223 : 
; 1224 : 			++_Mid1;
; 1225 : 			if (_Save || _Nextra < 3)
; 1226 : 				{	// put first byte of sequence, if not already put
; 1227 : 				*_Mid2++ = _By;
; 1228 : 				--_Nput;
; 1229 : 				}
; 1230 : 			for (; 0 < _Nput; --_Nput)
; 1231 : 				*_Mid2++ = (_Byte)(_Ch >> 6 * --_Nextra & 0x3f | 0x80);
; 1232 : 
; 1233 : 			*_Pstate = (unsigned short)(_Save ? _Ch >> 10 : 1);
; 1234 : 			}
; 1235 : 
; 1236 : 		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
; 1237 : 		}
; 1238 : 
; 1239 : 	virtual result __CLR_OR_THIS_CALL do_unshift(_Statype& _State,
; 1240 : 		_Byte *_First2, _Byte *, _Byte *& _Mid2) const
; 1241 : 		{	// generate bytes to return to default shift state
; 1242 : 		unsigned short *_Pstate = (unsigned short *)&_State;
; 1243 : 		_Mid2 = _First2;
; 1244 : 
; 1245 : 		return (1 < *_Pstate
; 1246 : 			? _Mybase::error : _Mybase::ok);	// fail if trailing first word
; 1247 : 		}
; 1248 : 
; 1249 : 	virtual int __CLR_OR_THIS_CALL do_length(_Statype& _State, const _Byte *_First1,
; 1250 : 		const _Byte *_Last1, size_t _Count) const _THROW0()
; 1251 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1252 : 		size_t _Wchars = 0;
; 1253 : 		_Statype _Mystate = _State;
; 1254 : 
; 1255 : 		for (; _Wchars < _Count && _First1 != _Last1; )
; 1256 : 			{	// convert another wide character
; 1257 : 			const _Byte *_Mid1;
; 1258 : 			_Elem *_Mid2;
; 1259 : 			_Elem _Ch;
; 1260 : 
; 1261 : 			switch (do_in(_Mystate, _First1, _Last1, _Mid1,
; 1262 : 				&_Ch, &_Ch + 1, _Mid2))
; 1263 : 				{	// test result of single wide-char conversion
; 1264 : 			case _Mybase::noconv:
; 1265 : 				return ((int)(_Wchars + (_Last1 - _First1)));
; 1266 : 
; 1267 : 			case _Mybase::ok:
; 1268 : 				if (_Mid2 == &_Ch + 1)
; 1269 : 					++_Wchars;	// replacement do_in might not convert one
; 1270 : 				_First1 = _Mid1;
; 1271 : 				break;
; 1272 : 
; 1273 : 			default:
; 1274 : 				return ((int)_Wchars);	// error or partial
; 1275 : 				}
; 1276 : 			}
; 1277 : 
; 1278 : 		return ((int)_Wchars);
; 1279 : 		}
; 1280 : 
; 1281 : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const _THROW0()
; 1282 : 		{	// return true if conversions never change input
; 1283 : 		return (false);
; 1284 : 		}
; 1285 : 
; 1286 : 	virtual int __CLR_OR_THIS_CALL do_max_length() const _THROW0()
; 1287 : 		{	// return maximum length required for a conversion
; 1288 : 		return ((_Mode & _Consume_header) != 0 ? 9	// header + max input
; 1289 : 			: (_Mode & _Generate_header) != 0 ? 7	// header + max output
; 1290 : 			: 6);	// 6-byte max input sequence, no 3-byte header
; 1291 : 		}
; 1292 : 
; 1293 : 	virtual int do_encoding() const _THROW0()
; 1294 : 		{	// return length of code sequence (from codecvt)
; 1295 : 		return (0);	// 0 => varying length
; 1296 : 		}
; 1297 : 
; 1298 : private:
; 1299 : 	unsigned long _Maxcode;	// default: 0x10ffff
; 1300 : 	_Codecvt_mode _Mode;	// default: _Consume_header
; 1301 : 	};
; 1302 : 
; 1303 : 		// CLASS codecvt<char32_t, char, _Mbstatet>
; 1304 : template<>
; 1305 : 	class _CRTIMP2_PURE codecvt<char32_t, char, _Mbstatet>
; 1306 : 	: public codecvt_base
; 1307 : 	{	// facet for converting between char32_t and UTF-8 byte sequences
; 1308 : public:
; 1309 : 	typedef codecvt<char32_t, char, _Mbstatet> _Mybase;
; 1310 : 	typedef char32_t _Elem;
; 1311 : 	typedef char _Byte;
; 1312 : 	typedef _Mbstatet _Statype;
; 1313 : 	typedef _Elem intern_type;
; 1314 : 	typedef _Byte extern_type;
; 1315 : 	typedef _Statype state_type;
; 1316 : 
; 1317 : 	result __CLR_OR_THIS_CALL in(_Statype& _State,
; 1318 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1319 : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1320 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 1321 : 		return (do_in(_State,
; 1322 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1323 : 		}
; 1324 : 
; 1325 : 	result __CLR_OR_THIS_CALL out(_Statype& _State,
; 1326 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1327 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1328 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1329 : 		return (do_out(_State,
; 1330 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1331 : 		}
; 1332 : 
; 1333 : 	result __CLR_OR_THIS_CALL unshift(_Statype& _State,
; 1334 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1335 : 		{	// generate bytes to return to default shift state
; 1336 : 		return (do_unshift(_State,
; 1337 : 			_First2, _Last2, _Mid2));
; 1338 : 		}
; 1339 : 
; 1340 : 	int __CLR_OR_THIS_CALL length(_Statype& _State, const _Byte *_First1,
; 1341 : 		const _Byte *_Last1, size_t _Count) const
; 1342 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1343 : 		return (do_length(_State, _First1, _Last1, _Count));
; 1344 : 		}
; 1345 : 
; 1346 : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;
; 1347 : 
; 1348 : 	explicit __CLR_OR_THIS_CALL codecvt(size_t _Refs = 0)
; 1349 : 		: codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
; 1350 : 		{	// construct from current locale
; 1351 : 		_BEGIN_LOCINFO(_Lobj)
; 1352 : 			_Init(_Lobj);
; 1353 : 		_END_LOCINFO()
; 1354 : 		}
; 1355 : 
; 1356 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
; 1357 : 		: codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
; 1358 : 		{	// construct from specified locale
; 1359 : 		_Init(_Lobj);
; 1360 : 		}
; 1361 : 
; 1362 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
; 1363 : 		_Codecvt_mode _Mode_arg, size_t _Refs = 0)
; 1364 : 		: codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
; 1365 : 		{	// construct from specified locale and parameters
; 1366 : 		_Init(_Lobj);
; 1367 : 		}
; 1368 : 
; 1369 : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = 0,
; 1370 : 		const locale *_Ploc = 0)
; 1371 : 		{	// return locale category mask and construct standard facet
; 1372 : 		if (_Ppf != 0 && *_Ppf == 0)
; 1373 : 			*_Ppf = _NEW_CRT codecvt<_Elem, _Byte, _Statype>(
; 1374 : 				_Locinfo(_Ploc->c_str()));
; 1375 : 		return (_X_CTYPE);
; 1376 : 		}
; 1377 : 
; 1378 : protected:
; 1379 : 	virtual __CLR_OR_THIS_CALL ~codecvt() _NOEXCEPT
; 1380 : 		{	// destroy the object
; 1381 : 		}
; 1382 : 
; 1383 : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo&)
; 1384 : 		{	// initialize
; 1385 : 		}
; 1386 : 
; 1387 : 	virtual result __CLR_OR_THIS_CALL do_in(_Statype& _State,
; 1388 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1389 : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1390 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 1391 : 		char *_Pstate = (char *)&_State;
; 1392 : 		_Mid1 = _First1;
; 1393 : 		_Mid2 = _First2;
; 1394 : 
; 1395 : 		for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
; 1396 : 			{	// convert a multibyte sequence
; 1397 : 			unsigned char _By = (unsigned char)*_Mid1;
; 1398 : 			unsigned long _Ch;
; 1399 : 			int _Nextra;
; 1400 : 
; 1401 : 			if (_By < 0x80)
; 1402 : 				_Ch = _By, _Nextra = 0;
; 1403 : 			else if (_By < 0xc0)
; 1404 : 				{	// 0x80-0xdf not first byte
; 1405 : 				++_Mid1;
; 1406 : 				return (_Mybase::error);
; 1407 : 				}
; 1408 : 			else if (_By < 0xe0)
; 1409 : 				_Ch = _By & 0x1f, _Nextra = 1;
; 1410 : 			else if (_By < 0xf0)
; 1411 : 				_Ch = _By & 0x0f, _Nextra = 2;
; 1412 : 			else if (_By < 0xf8)
; 1413 : 				_Ch = _By & 0x07, _Nextra = 3;
; 1414 : 			else
; 1415 : 				_Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;
; 1416 : 
; 1417 : 			if (_Nextra == 0)
; 1418 : 				++_Mid1;
; 1419 : 			else if (_Last1 - _Mid1 < _Nextra + 1)
; 1420 : 				break;	// not enough input
; 1421 : 			else
; 1422 : 				for (++_Mid1; 0 < _Nextra; --_Nextra, ++_Mid1)
; 1423 : 					if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
; 1424 : 						return (_Mybase::error);	// not continuation byte
; 1425 : 					else
; 1426 : 						_Ch = _Ch << 6 | _By & 0x3f;
; 1427 : 
; 1428 : 			if (*_Pstate == 0)
; 1429 : 				{	// first time, maybe look for and consume header
; 1430 : 				*_Pstate = 1;
; 1431 : 
; 1432 : 				if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
; 1433 : 					{	// drop header and retry
; 1434 : 					result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
; 1435 : 						_First2, _Last2, _Mid2);
; 1436 : 
; 1437 : 					if (_Ans == _Mybase::partial)
; 1438 : 						{	// roll back header determination
; 1439 : 						*_Pstate = 0;
; 1440 : 						_Mid1 = _First1;
; 1441 : 						}
; 1442 : 					return (_Ans);
; 1443 : 					}
; 1444 : 				}
; 1445 : 
; 1446 : 			if (_Maxcode < _Ch)
; 1447 : 				return (_Mybase::error);	// code too large
; 1448 : 			*_Mid2++ = (_Elem)_Ch;
; 1449 : 			}
; 1450 : 
; 1451 : 		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
; 1452 : 		}
; 1453 : 
; 1454 : 	virtual result __CLR_OR_THIS_CALL do_out(_Statype& _State,
; 1455 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1456 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1457 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1458 : 		char *_Pstate = (char *)&_State;
; 1459 : 		_Mid1 = _First1;
; 1460 : 		_Mid2 = _First2;
; 1461 : 
; 1462 : 		for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
; 1463 : 			{	// convert and put a wide char
; 1464 : 			_Byte _By;
; 1465 : 			int _Nextra;
; 1466 : 			unsigned long _Ch = (unsigned long)*_Mid1;
; 1467 : 
; 1468 : 			if (_Maxcode < _Ch)
; 1469 : 				return (_Mybase::error);
; 1470 : 
; 1471 : 			if (_Ch < 0x0080)
; 1472 : 				_By = (_Byte)_Ch, _Nextra = 0;
; 1473 : 			else if (_Ch < 0x0800)
; 1474 : 				_By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
; 1475 : 			else if (_Ch < 0x00010000)
; 1476 : 				_By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
; 1477 : 			else if (_Ch < 0x00200000)
; 1478 : 				_By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;
; 1479 : 			else if (_Ch < 0x04000000)
; 1480 : 				_By = (_Byte)(0xf8 | _Ch >> 24), _Nextra = 4;
; 1481 : 			else
; 1482 : 				_By = (_Byte)(0xfc | _Ch >> 30 & 0x03), _Nextra = 5;
; 1483 : 
; 1484 : 			if (*_Pstate == 0)
; 1485 : 				{	// first time, maybe generate header
; 1486 : 				*_Pstate = 1;
; 1487 : 				if ((_Mode & _Generate_header) == 0)
; 1488 : 					;
; 1489 : 				else if (_Last2 - _Mid2 < 3 + 1 + _Nextra)
; 1490 : 					return (_Mybase::partial);	// not enough room for both
; 1491 : 				else
; 1492 : 					{	// prepend header
; 1493 : 					*_Mid2++ = (_Byte)(unsigned char)0xef;
; 1494 : 					*_Mid2++ = (_Byte)(unsigned char)0xbb;
; 1495 : 					*_Mid2++ = (_Byte)(unsigned char)0xbf;
; 1496 : 					}
; 1497 : 				}
; 1498 : 
; 1499 : 			if (_Last2 - _Mid2 < 1 + _Nextra)
; 1500 : 				break;	// not enough room for output
; 1501 : 
; 1502 : 			++_Mid1;
; 1503 : 			for (*_Mid2++ = _By; 0 < _Nextra; )
; 1504 : 				*_Mid2++ = (_Byte)(_Ch >> 6 * --_Nextra & 0x3f | 0x80);
; 1505 : 			}
; 1506 : 		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
; 1507 : 		}
; 1508 : 
; 1509 : 	virtual result __CLR_OR_THIS_CALL do_unshift(_Statype&,
; 1510 : 		_Byte *_First2, _Byte *, _Byte *& _Mid2) const
; 1511 : 		{	// generate bytes to return to default shift state
; 1512 : 		_Mid2 = _First2;
; 1513 : 		return (_Mybase::ok);
; 1514 : 		}
; 1515 : 
; 1516 : 	virtual int __CLR_OR_THIS_CALL do_length(_Statype& _State, const _Byte *_First1,
; 1517 : 		const _Byte *_Last1, size_t _Count) const _THROW0()
; 1518 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1519 : 		int _Wchars = 0;
; 1520 : 		_Statype _Mystate = _State;
; 1521 : 
; 1522 : 		for (; (size_t)_Wchars < _Count && _First1 != _Last1; )
; 1523 : 			{	// convert another wide character
; 1524 : 			const _Byte *_Mid1;
; 1525 : 			_Elem *_Mid2;
; 1526 : 			_Elem _Ch;
; 1527 : 
; 1528 : 			switch (do_in(_Mystate, _First1, _Last1, _Mid1,
; 1529 : 				&_Ch, &_Ch + 1, _Mid2))
; 1530 : 				{	// test result of single wide-char conversion
; 1531 : 			case _Mybase::noconv:
; 1532 : 				return ((int)(_Wchars + (int)(_Last1 - _First1)));
; 1533 : 
; 1534 : 			case _Mybase::ok:
; 1535 : 				if (_Mid2 == &_Ch + 1)
; 1536 : 					++_Wchars;	// replacement do_in might not convert one
; 1537 : 				_First1 = _Mid1;
; 1538 : 				break;
; 1539 : 
; 1540 : 			default:
; 1541 : 				return ((int)_Wchars);	// error or partial
; 1542 : 				}
; 1543 : 			}
; 1544 : 
; 1545 : 		return ((int)_Wchars);
; 1546 : 		}
; 1547 : 
; 1548 : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const _THROW0()
; 1549 : 		{	// return true if conversions never change input
; 1550 : 		return (false);
; 1551 : 		}
; 1552 : 
; 1553 : 	virtual int __CLR_OR_THIS_CALL do_max_length() const _THROW0()
; 1554 : 		{	// return maximum length required for a conversion
; 1555 : 		return ((_Mode & (_Consume_header | _Generate_header)) != 0
; 1556 : 			? 9 : 6);
; 1557 : 		}
; 1558 : 
; 1559 : 	virtual int __CLR_OR_THIS_CALL do_encoding() const _THROW0()
; 1560 : 		{	// return length of code sequence (from codecvt)
; 1561 : 		return ((_Mode & (_Consume_header | _Generate_header)) != 0
; 1562 : 			? -1 : 0);	// -1 => state dependent, 0 => varying length
; 1563 : 		}
; 1564 : 
; 1565 : private:
; 1566 : 	unsigned long _Maxcode;	// default: 0xffffffff
; 1567 : 	_Codecvt_mode _Mode;	// default: _Consume_header
; 1568 : 	};
; 1569 :  #endif /* _HAS_CHAR16_T_LANGUAGE_SUPPORT */
; 1570 : 
; 1571 : 		// CLASS codecvt<wchar_t, char, _Mbstatet>
; 1572 : template<>
; 1573 : 	class _CRTIMP2_PURE codecvt<wchar_t, char, _Mbstatet>
; 1574 : 	: public codecvt_base
; 1575 : 	{	// facet for converting between wchar_t and char (_Byte) sequences
; 1576 : public:
; 1577 : 	typedef wchar_t _Elem;
; 1578 : 	typedef char _Byte;
; 1579 : 	typedef _Mbstatet _Statype;
; 1580 : 	typedef _Elem intern_type;
; 1581 : 	typedef _Byte extern_type;
; 1582 : 	typedef _Statype state_type;
; 1583 : 
; 1584 : 	result __CLR_OR_THIS_CALL in(_Statype& _State,
; 1585 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1586 : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1587 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 1588 : 		return (do_in(_State,
; 1589 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1590 : 		}
; 1591 : 
; 1592 : 	result __CLR_OR_THIS_CALL out(_Statype& _State,
; 1593 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1594 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1595 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1596 : 		return (do_out(_State,
; 1597 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1598 : 		}
; 1599 : 
; 1600 : 	result __CLR_OR_THIS_CALL unshift(_Statype& _State,
; 1601 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1602 : 		{	// generate bytes to return to default shift state
; 1603 : 		return (do_unshift(_State,
; 1604 : 			_First2, _Last2, _Mid2));
; 1605 : 		}
; 1606 : 
; 1607 : 	int __CLR_OR_THIS_CALL length(_Statype& _State, const _Byte *_First1,
; 1608 : 		const _Byte *_Last1, size_t _Count) const
; 1609 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1610 : 		return (do_length(_State, _First1, _Last1, _Count));
; 1611 : 		}
; 1612 : 
; 1613 : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;
; 1614 : 
; 1615 : 	explicit __CLR_OR_THIS_CALL codecvt(size_t _Refs = 0)
; 1616 : 		: codecvt_base(_Refs)
; 1617 : 		{	// construct from current locale
; 1618 : 		_BEGIN_LOCINFO(_Lobj)
; 1619 : 			_Init(_Lobj);
; 1620 : 		_END_LOCINFO()
; 1621 : 		}
; 1622 : 
; 1623 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
; 1624 : 		: codecvt_base(_Refs)
; 1625 : 		{	// construct from specified locale
; 1626 : 		_Init(_Lobj);
; 1627 : 		}
; 1628 : 
; 1629 : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = 0,
; 1630 : 		const locale *_Ploc = 0)
; 1631 : 		{	// return locale category mask and construct standard facet
; 1632 : 		if (_Ppf != 0 && *_Ppf == 0)
; 1633 : 			*_Ppf = _NEW_CRT codecvt<_Elem, _Byte, _Statype>(
; 1634 : 				_Locinfo(_Ploc->c_str()));
; 1635 : 		return (_X_CTYPE);
; 1636 : 		}
; 1637 : 
; 1638 : protected:
; 1639 : 	virtual __CLR_OR_THIS_CALL ~codecvt() _NOEXCEPT
; 1640 : 		{	// destroy the object
; 1641 : 		}
; 1642 : 
; 1643 : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo& _Lobj)
; 1644 : 		{	// initialize from _Lobj
; 1645 : 		_Cvt = _Lobj._Getcvt();
; 1646 : 		}
; 1647 : 
; 1648 : 	virtual result __CLR_OR_THIS_CALL do_in(_Statype& _State,
; 1649 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1650 : 			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1651 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 1652 : 		_DEBUG_RANGE(_First1, _Last1);
; 1653 : 		_DEBUG_RANGE(_First2, _Last2);
; 1654 : 		_Mid1 = _First1, _Mid2 = _First2;
; 1655 : 		result _Ans = _Mid1 == _Last1 ? ok : partial;
; 1656 : 		int _Bytes;
; 1657 : 
; 1658 : 		while (_Mid1 != _Last1 && _Mid2 != _Last2)
; 1659 : 			switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1,
; 1660 : 				&_State, &_Cvt))
; 1661 : 			{	// test result of locale-specific mbrtowc call
; 1662 : 			case -2:	// partial conversion
; 1663 : 				_Mid1 = _Last1;
; 1664 : 				return (_Ans);
; 1665 : 
; 1666 : 			case -1:	// failed conversion
; 1667 : 				return (error);
; 1668 : 
; 1669 : 			case 0:	// may have converted null character
; 1670 : 				if (*_Mid2 == (_Elem)0)
; 1671 : 					_Bytes = (int)_CSTD strlen(_Mid1) + 1;
; 1672 : 				// fall through
; 1673 : 
; 1674 : 			default:	// converted _Bytes bytes to a wchar_t
; 1675 : 				if (_Bytes == -3)
; 1676 : 					_Bytes = 0;	// wchar_t generated from state info
; 1677 : 				_Mid1 += _Bytes;
; 1678 : 				++_Mid2;
; 1679 : 				_Ans = ok;
; 1680 : 			}
; 1681 : 		return (_Ans);
; 1682 : 		}
; 1683 : 
; 1684 : 	virtual result __CLR_OR_THIS_CALL do_out(_Statype& _State,
; 1685 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1686 : 			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1687 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1688 : 		_DEBUG_RANGE(_First1, _Last1);
; 1689 : 		_DEBUG_RANGE(_First2, _Last2);
; 1690 : 		_Mid1 = _First1, _Mid2 = _First2;
; 1691 : 		result _Ans = _Mid1 == _Last1 ? ok : partial;
; 1692 : 		int _Bytes;
; 1693 : 
; 1694 : 		while (_Mid1 != _Last1 && _Mid2 != _Last2)
; 1695 : 			if ((int)MB_CUR_MAX <= _Last2 - _Mid2)
; 1696 : 				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
; 1697 : 					&_State, &_Cvt)) < 0)
; 1698 : 					return (error);	// locale-specific wcrtomb failed
; 1699 : 				else
; 1700 : 					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
; 1701 : 			else
; 1702 : 				{	// destination too small, convert into buffer
; 1703 : 				_Byte _Buf[MB_LEN_MAX];
; 1704 : 				_Statype _Stsave = _State;
; 1705 : 
; 1706 : 				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
; 1707 : 					&_State, &_Cvt)) < 0)
; 1708 : 					return (error);	// locale-specific wcrtomb failed
; 1709 : 				else if (_Last2 - _Mid2 < _Bytes)
; 1710 : 					{	// converted too many, roll back and return previous
; 1711 : 					_State = _Stsave;
; 1712 : 					return (_Ans);
; 1713 : 					}
; 1714 : 				else
; 1715 : 					{	// copy converted bytes from buffer
; 1716 : 					_CSTD memcpy(_Mid2, _Buf, _Bytes);
; 1717 : 					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
; 1718 : 					}
; 1719 : 				}
; 1720 : 		return (_Ans);
; 1721 : 		}
; 1722 : 
; 1723 : 	virtual result __CLR_OR_THIS_CALL do_unshift(_Statype& _State,
; 1724 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1725 : 		{	// generate bytes to return to default shift state
; 1726 : 		_DEBUG_RANGE(_First2, _Last2);
; 1727 : 		_Mid2 = _First2;
; 1728 : 		result _Ans = ok;
; 1729 : 		int _Bytes;
; 1730 : 		_Byte _Buf[MB_LEN_MAX];
; 1731 : 		_Statype _Stsave = _State;
; 1732 : 
; 1733 : 		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
; 1734 : 			_Ans = error;	// locale-specific wcrtomb failed
; 1735 : 		else if (_Last2 - _Mid2 < --_Bytes)
; 1736 : 			{	// converted too many, roll back and return
; 1737 : 			_State = _Stsave;
; 1738 : 			_Ans = partial;
; 1739 : 			}
; 1740 : 		else if (0 < _Bytes)
; 1741 : 			{	// copy converted bytes from buffer
; 1742 : 			_CSTD memcpy(_Mid2, _Buf, _Bytes);
; 1743 : 			_Mid2 += _Bytes;
; 1744 : 			}
; 1745 : 		return (_Ans);
; 1746 : 		}
; 1747 : 
; 1748 : 	virtual int __CLR_OR_THIS_CALL do_length(_Statype& _State, const _Byte *_First1,
; 1749 : 		const _Byte *_Last1, size_t _Count) const
; 1750 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1751 : 		_DEBUG_RANGE(_First1, _Last1);
; 1752 : 		int _Wchars;
; 1753 : 		const _Byte *_Mid1;
; 1754 : 		_Statype _Mystate = _State;
; 1755 : 
; 1756 : 		for (_Wchars = 0, _Mid1 = _First1;
; 1757 : 			(size_t)_Wchars < _Count && _Mid1 != _Last1; )
; 1758 : 			{	// convert another wchar_t
; 1759 : 			int _Bytes;
; 1760 : 			_Elem _Ch;
; 1761 : 
; 1762 : 			switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1,
; 1763 : 				&_Mystate, &_Cvt))
; 1764 : 				{	// test result of locale-specific mbrtowc call
; 1765 : 			case -2:	// partial conversion
; 1766 : 				return (_Wchars);
; 1767 : 
; 1768 : 			case -1:	// failed conversion
; 1769 : 				return (_Wchars);
; 1770 : 
; 1771 : 			case 0:	// may have converted null character
; 1772 : 				if (_Ch == (_Elem)0)
; 1773 : 					_Bytes = (int)_CSTD strlen(_Mid1) + 1;
; 1774 : 				// fall through
; 1775 : 
; 1776 : 			default:	// converted _Bytes bytes to a wchar_t
; 1777 : 				if (_Bytes == -3)
; 1778 : 					_Bytes = 0;	// wchar_t generated from state info
; 1779 : 				_Mid1 += _Bytes;
; 1780 : 				++_Wchars;
; 1781 : 				}
; 1782 : 			}
; 1783 : 		return (_Wchars);
; 1784 : 		}
; 1785 : 
; 1786 : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const _THROW0()
; 1787 : 		{	// return true if conversions never change input
; 1788 : 		return (false);
; 1789 : 		}
; 1790 : 
; 1791 : 	virtual int __CLR_OR_THIS_CALL do_max_length() const _THROW0()
; 1792 : 		{	// return maximum length required for a conversion (from codecvt)
; 1793 : 		return (MB_LEN_MAX);
; 1794 : 		}
; 1795 : 
; 1796 : 	virtual int __CLR_OR_THIS_CALL do_encoding() const _THROW0()
; 1797 : 		{	// return length of code sequence (from codecvt)
; 1798 : 		return (0);	// 0 => varying length
; 1799 : 		}
; 1800 : 
; 1801 : private:
; 1802 : 	_Locinfo::_Cvtvec _Cvt;	// locale info passed to _Mbrtowc, _Wcrtomb
; 1803 : 	};
; 1804 : 
; 1805 :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 1806 : 		// CLASS codecvt<unsigned short, char, _Mbstatet>
; 1807 : template<>
; 1808 : 	class _CRTIMP2_PURE codecvt<unsigned short, char, _Mbstatet>
; 1809 : 	: public codecvt_base
; 1810 : 	{	// facet for converting between unsigned short and char sequences
; 1811 : public:
; 1812 : 	typedef unsigned short _Elem;
; 1813 : 	typedef char _Byte;
; 1814 : 	typedef _Mbstatet _Statype;
; 1815 : 	typedef _Elem intern_type;
; 1816 : 	typedef _Byte extern_type;
; 1817 : 	typedef _Statype state_type;
; 1818 : 
; 1819 : 	result __CLR_OR_THIS_CALL in(_Statype& _State,
; 1820 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1821 : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1822 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 1823 : 		return (do_in(_State,
; 1824 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1825 : 		}
; 1826 : 
; 1827 : 	result __CLR_OR_THIS_CALL out(_Statype& _State,
; 1828 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1829 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1830 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1831 : 		return (do_out(_State,
; 1832 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1833 : 		}
; 1834 : 
; 1835 : 	result __CLR_OR_THIS_CALL unshift(_Statype& _State,
; 1836 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1837 : 		{	// generate bytes to return to default shift state
; 1838 : 		return (do_unshift(_State,
; 1839 : 			_First2, _Last2, _Mid2));
; 1840 : 		}
; 1841 : 
; 1842 : 	int __CLR_OR_THIS_CALL length(_Statype& _State, const _Byte *_First1,
; 1843 : 		const _Byte *_Last1, size_t _Count) const
; 1844 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1845 : 		return (do_length(_State, _First1, _Last1, _Count));
; 1846 : 		}
; 1847 : 
; 1848 : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;
; 1849 : 
; 1850 : 	explicit __CLR_OR_THIS_CALL codecvt(size_t _Refs = 0)
; 1851 : 		: codecvt_base(_Refs)
; 1852 : 		{	// construct from current locale
; 1853 : 		_BEGIN_LOCINFO(_Lobj)
; 1854 : 			_Init(_Lobj);
; 1855 : 		_END_LOCINFO()
; 1856 : 		}
; 1857 : 
; 1858 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
; 1859 : 		: codecvt_base(_Refs)
; 1860 : 		{	// construct from specified locale
; 1861 : 		_Init(_Lobj);
; 1862 : 		}
; 1863 : 
; 1864 : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = 0,
; 1865 : 		const locale *_Ploc = 0)
; 1866 : 		{	// return locale category mask and construct standard facet
; 1867 : 		if (_Ppf != 0 && *_Ppf == 0)
; 1868 : 			*_Ppf = _NEW_CRT codecvt<_Elem, _Byte, _Statype>(
; 1869 : 				_Locinfo(_Ploc->c_str()));
; 1870 : 		return (_X_CTYPE);
; 1871 : 		}
; 1872 : 
; 1873 : protected:
; 1874 : 	virtual __CLR_OR_THIS_CALL ~codecvt() _NOEXCEPT
; 1875 : 		{	// destroy the object
; 1876 : 		}
; 1877 : 
; 1878 : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo& _Lobj)
; 1879 : 		{	// initialize from _Lobj
; 1880 : 		_Cvt = _Lobj._Getcvt();
; 1881 : 		}
; 1882 : 
; 1883 : 	virtual result __CLR_OR_THIS_CALL do_in(_Statype& _State,
; 1884 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1885 : 			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1886 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 1887 : 		_DEBUG_RANGE(_First1, _Last1);
; 1888 : 		_DEBUG_RANGE(_First2, _Last2);
; 1889 : 		_Mid1 = _First1, _Mid2 = _First2;
; 1890 : 		result _Ans = _Mid1 == _Last1 ? ok : partial;
; 1891 : 		int _Bytes;
; 1892 : 
; 1893 : 		while (_Mid1 != _Last1 && _Mid2 != _Last2)
; 1894 : 			switch (_Bytes = _Mbrtowc((wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1,
; 1895 : 				&_State, &_Cvt))
; 1896 : 			{	// test result of locale-specific mbrtowc call
; 1897 : 			case -2:	// partial conversion
; 1898 : 				_Mid1 = _Last1;
; 1899 : 				return (_Ans);
; 1900 : 
; 1901 : 			case -1:	// failed conversion
; 1902 : 				return (error);
; 1903 : 
; 1904 : 			case 0:	// may have converted null character
; 1905 : 				if (*_Mid2 == (_Elem)0)
; 1906 : 					_Bytes = (int)_CSTD strlen(_Mid1) + 1;
; 1907 : 				// fall through
; 1908 : 
; 1909 : 			default:	// converted _Bytes bytes to an unsigned short
; 1910 : 				if (_Bytes == -3)
; 1911 : 					_Bytes = 0;	// wchar_t generated from state info
; 1912 : 				_Mid1 += _Bytes;
; 1913 : 				++_Mid2;
; 1914 : 				_Ans = ok;
; 1915 : 			}
; 1916 : 		return (_Ans);
; 1917 : 		}
; 1918 : 
; 1919 : 	virtual result __CLR_OR_THIS_CALL do_out(_Statype& _State,
; 1920 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1921 : 			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1922 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1923 : 		_DEBUG_RANGE(_First1, _Last1);
; 1924 : 		_DEBUG_RANGE(_First2, _Last2);
; 1925 : 		_Mid1 = _First1, _Mid2 = _First2;
; 1926 : 		result _Ans = _Mid1 == _Last1 ? ok : partial;
; 1927 : 		int _Bytes;
; 1928 : 
; 1929 : 		while (_Mid1 != _Last1 && _Mid2 != _Last2)
; 1930 : 			if ((int)MB_CUR_MAX <= _Last2 - _Mid2)
; 1931 : 				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
; 1932 : 					&_State, &_Cvt)) < 0)
; 1933 : 					return (error);	// locale-specific wcrtomb failed
; 1934 : 				else
; 1935 : 					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
; 1936 : 			else
; 1937 : 				{	// destination too small, convert into buffer
; 1938 : 				_Byte _Buf[MB_LEN_MAX];
; 1939 : 				_Statype _Stsave = _State;
; 1940 : 
; 1941 : 				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
; 1942 : 					&_State, &_Cvt)) < 0)
; 1943 : 					return (error);	// locale-specific wcrtomb failed
; 1944 : 				else if (_Last2 - _Mid2 < _Bytes)
; 1945 : 					{	// converted too many, roll back and return previous
; 1946 : 					_State = _Stsave;
; 1947 : 					return (_Ans);
; 1948 : 					}
; 1949 : 				else
; 1950 : 					{	// copy converted bytes from buffer
; 1951 : 					_CSTD memcpy(_Mid2, _Buf, _Bytes);
; 1952 : 					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
; 1953 : 					}
; 1954 : 				}
; 1955 : 		return (_Ans);
; 1956 : 		}
; 1957 : 
; 1958 : 	virtual result __CLR_OR_THIS_CALL do_unshift(_Statype& _State,
; 1959 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1960 : 		{	// generate bytes to return to default shift state
; 1961 : 		_DEBUG_RANGE(_First2, _Last2);
; 1962 : 		_Mid2 = _First2;
; 1963 : 		result _Ans = ok;
; 1964 : 		int _Bytes;
; 1965 : 		_Byte _Buf[MB_LEN_MAX];
; 1966 : 		_Statype _Stsave = _State;
; 1967 : 
; 1968 : 		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
; 1969 : 			_Ans = error;	// locale-specific wcrtomb failed
; 1970 : 		else if (_Last2 - _Mid2 < --_Bytes)
; 1971 : 			{	// converted too many, roll back and return
; 1972 : 			_State = _Stsave;
; 1973 : 			_Ans = partial;
; 1974 : 			}
; 1975 : 		else if (0 < _Bytes)
; 1976 : 			{	// copy converted bytes from buffer
; 1977 : 			_CSTD memcpy(_Mid2, _Buf, _Bytes);
; 1978 : 			_Mid2 += _Bytes;
; 1979 : 			}
; 1980 : 		return (_Ans);
; 1981 : 		}
; 1982 : 
; 1983 : 	virtual int __CLR_OR_THIS_CALL do_length(_Statype& _State, const _Byte *_First1,
; 1984 : 		const _Byte *_Last1, size_t _Count) const
; 1985 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1986 : 		_DEBUG_RANGE(_First1, _Last1);
; 1987 : 		int _Wchars;
; 1988 : 		const _Byte *_Mid1;
; 1989 : 		_Statype _Mystate = _State;
; 1990 : 
; 1991 : 		for (_Wchars = 0, _Mid1 = _First1;
; 1992 : 			(size_t)_Wchars < _Count && _Mid1 != _Last1; )
; 1993 : 			{	// convert another unsigned char
; 1994 : 			int _Bytes;
; 1995 : 			_Elem _Ch;
; 1996 : 
; 1997 : 			switch (_Bytes = _Mbrtowc((wchar_t *)&_Ch, _Mid1, _Last1 - _Mid1,
; 1998 : 				&_Mystate, &_Cvt))
; 1999 : 				{	// test result of locale-specific mbrtowc call
; 2000 : 			case -2:	// partial conversion
; 2001 : 				return (_Wchars);
; 2002 : 
; 2003 : 			case -1:	// failed conversion
; 2004 : 				return (_Wchars);
; 2005 : 
; 2006 : 			case 0:	// may have converted null character
; 2007 : 				if (_Ch == (_Elem)0)
; 2008 : 					_Bytes = (int)_CSTD strlen(_Mid1) + 1;
; 2009 : 				// fall through
; 2010 : 
; 2011 : 			default:	// converted _Bytes bytes to an unsigned char
; 2012 : 				if (_Bytes == -3)
; 2013 : 					_Bytes = 0;	// wchar_t generated from state info
; 2014 : 				_Mid1 += _Bytes;
; 2015 : 				++_Wchars;
; 2016 : 				}
; 2017 : 			}
; 2018 : 		return (_Wchars);
; 2019 : 		}
; 2020 : 
; 2021 : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const _THROW0()
; 2022 : 		{	// return true if conversions never change input
; 2023 : 		return (false);
; 2024 : 		}
; 2025 : 
; 2026 : 	virtual int __CLR_OR_THIS_CALL do_max_length() const _THROW0()
; 2027 : 		{	// return maximum length required for a conversion (from codecvt)
; 2028 : 		return (MB_LEN_MAX);
; 2029 : 		}
; 2030 : 
; 2031 : 	virtual int __CLR_OR_THIS_CALL do_encoding() const _THROW0()
; 2032 : 		{	// return length of code sequence (from codecvt)
; 2033 : 		return (0);	// 0 => varying length
; 2034 : 		}
; 2035 : 
; 2036 : private:
; 2037 : 	_Locinfo::_Cvtvec _Cvt;	// locale info passed to _Mbrtowc, _Wcrtomb
; 2038 : 	};
; 2039 :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 2040 : 
; 2041 : 		// TEMPLATE CLASS codecvt_byname
; 2042 : template<class _Elem,
; 2043 : 	class _Byte,
; 2044 : 	class _Statype>
; 2045 : 	class codecvt_byname
; 2046 : 		: public codecvt<_Elem, _Byte, _Statype>
; 2047 : 	{	// codecvt for named locale
; 2048 : public:
; 2049 : 	explicit __CLR_OR_THIS_CALL codecvt_byname(const char *_Locname, size_t _Refs = 0)
; 2050 : 		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
; 2051 : 		{	// construct for named locale
; 2052 : 		}
; 2053 : 
; 2054 :  #if _HAS_CPP0X
; 2055 : 	explicit __CLR_OR_THIS_CALL codecvt_byname(const string& _Str, size_t _Refs = 0)
; 2056 : 		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
; 2057 : 		{	// construct for named locale
; 2058 : 		}
; 2059 :  #endif /* _HAS_CPP0X */
; 2060 : 
; 2061 : protected:
; 2062 : 	virtual __CLR_OR_THIS_CALL ~codecvt_byname() _NOEXCEPT
; 2063 : 		{	// destroy the object
; 2064 : 		}
; 2065 : 	};
; 2066 : 
; 2067 : 		// STRUCT ctype_base
; 2068 :  #pragma warning(push)
; 2069 :  #pragma warning(disable: 4275)
; 2070 : 
; 2071 : struct _CRTIMP2_PURE ctype_base
; 2072 : 	: public locale::facet
; 2073 : 	{	// base for ctype
; 2074 : 	enum
; 2075 : 		{	// constants for character classifications
; 2076 : 		alnum = _DI | _LO | _UP | _XA, alpha = _LO | _UP | _XA,
; 2077 : 		cntrl = _BB, digit = _DI, graph = _DI | _LO | _PU | _UP | _XA,
; 2078 : 		lower = _LO, print = _DI | _LO | _PU | _SP | _UP | _XA | _XD,
; 2079 : 		punct = _PU, space = _CN | _SP | _XS, upper = _UP,
; 2080 : 		xdigit = _XD, blank = _CN | _SP | _XS | _XB};
; 2081 : 	typedef short mask;	// to match <ctype.h>
; 2082 : 
; 2083 : 	__CLR_OR_THIS_CALL ctype_base(size_t _Refs = 0)
; 2084 : 		: locale::facet(_Refs)
; 2085 : 		{	// default constructor
; 2086 : 		}
; 2087 : 
; 2088 : 	__CLR_OR_THIS_CALL ~ctype_base() _NOEXCEPT
; 2089 : 		{	// destroy the object
; 2090 : 		}
; 2091 : 	};
; 2092 : 
; 2093 :  #pragma warning(pop)
; 2094 : 
; 2095 : 		// TEMPLATE CLASS ctype
; 2096 : template<class _Elem>
; 2097 : 	class ctype
; 2098 : 		: public ctype_base
; 2099 : 	{	// facet for classifying elements, converting cases
; 2100 : public:
; 2101 : 	typedef _Elem char_type;
; 2102 : 
; 2103 : 	bool __CLR_OR_THIS_CALL is(mask _Maskval, _Elem _Ch) const
; 2104 : 		{	// test if element fits any mask classifications
; 2105 : 		return (do_is(_Maskval, _Ch));
; 2106 : 		}
; 2107 : 
; 2108 : 	const _Elem *__CLR_OR_THIS_CALL is(const _Elem *_First, const _Elem *_Last,
; 2109 : 		mask *_Dest) const
; 2110 : 		{	// get mask sequence for elements in [_First, _Last)
; 2111 : 		return (do_is(_First, _Last, _Dest));
; 2112 : 		}
; 2113 : 
; 2114 : 	const _Elem *__CLR_OR_THIS_CALL scan_is(mask _Maskval, const _Elem *_First,
; 2115 : 		const _Elem *_Last) const
; 2116 : 		{	// find first in [_First, _Last) that fits mask classification
; 2117 : 		return (do_scan_is(_Maskval, _First, _Last));
; 2118 : 		}
; 2119 : 
; 2120 : 	const _Elem *__CLR_OR_THIS_CALL scan_not(mask _Maskval, const _Elem *_First,
; 2121 : 		const _Elem *_Last) const
; 2122 : 		{	// find first in [_First, _Last) not fitting mask classification
; 2123 : 		return (do_scan_not(_Maskval, _First, _Last));
; 2124 : 		}
; 2125 : 
; 2126 : 	_Elem __CLR_OR_THIS_CALL tolower(_Elem _Ch) const
; 2127 : 		{	// convert element to lower case
; 2128 : 		return (do_tolower(_Ch));
; 2129 : 		}
; 2130 : 
; 2131 : 	const _Elem *__CLR_OR_THIS_CALL tolower(_Elem *_First, const _Elem *_Last) const
; 2132 : 		{	// convert [_First, _Last) in place to lower case
; 2133 : 		return (do_tolower(_First, _Last));
; 2134 : 		}
; 2135 : 
; 2136 : 	_Elem __CLR_OR_THIS_CALL toupper(_Elem _Ch) const
; 2137 : 		{	// convert element to upper case
; 2138 : 		return (do_toupper(_Ch));
; 2139 : 		}
; 2140 : 
; 2141 : 	const _Elem *__CLR_OR_THIS_CALL toupper(_Elem *_First, const _Elem *_Last) const
; 2142 : 		{	// convert [_First, _Last) in place to upper case
; 2143 : 		return (do_toupper(_First, _Last));
; 2144 : 		}
; 2145 : 
; 2146 : 	_Elem __CLR_OR_THIS_CALL widen(char _Byte) const
; 2147 : 		{	// widen char
; 2148 : 		return (do_widen(_Byte));
; 2149 : 		}
; 2150 : 
; 2151 : 	const char *__CLR_OR_THIS_CALL widen(const char *_First, const char *_Last,
; 2152 : 		_Elem *_Dest) const
; 2153 : 		{	// widen chars in [_First, _Last)
; 2154 : 		return (do_widen(_First, _Last, _Dest));
; 2155 : 		}
; 2156 : 
; 2157 : 	char __CLR_OR_THIS_CALL narrow(_Elem _Ch, char _Dflt = '\0') const
; 2158 : 		{	// narrow element to char
; 2159 : 		return (do_narrow(_Ch, _Dflt));
; 2160 : 		}
; 2161 : 
; 2162 : 	const _Elem *__CLR_OR_THIS_CALL narrow(const _Elem *_First, const _Elem *_Last,
; 2163 : 		char _Dflt, char *_Dest) const
; 2164 : 		{	// narrow elements in [_First, _Last) to chars
; 2165 : 		return (do_narrow(_First, _Last, _Dflt, _Dest));
; 2166 : 		}
; 2167 : 
; 2168 : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;
; 2169 : 
; 2170 : 	explicit __CLR_OR_THIS_CALL ctype(size_t _Refs = 0)
; 2171 : 		: ctype_base(_Refs)
; 2172 : 		{	// construct from current locale
; 2173 : 		_BEGIN_LOCINFO(_Lobj)
; 2174 : 			_Init(_Lobj);
; 2175 : 		_END_LOCINFO()
; 2176 : 		}
; 2177 : 
; 2178 : 	__CLR_OR_THIS_CALL ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
; 2179 : 		: ctype_base(_Refs)
; 2180 : 		{	// construct from specified locale
; 2181 : 		_Init(_Lobj);
; 2182 : 		}
; 2183 : 
; 2184 : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = 0,
; 2185 : 		const locale *_Ploc = 0)
; 2186 : 		{	// return locale category mask and construct standard facet
; 2187 : 		if (_Ppf != 0 && *_Ppf == 0)
; 2188 : 			*_Ppf = _NEW_CRT ctype<_Elem>(
; 2189 : 				_Locinfo(_Ploc->c_str()));
; 2190 : 		return (_X_CTYPE);
; 2191 : 		}
; 2192 : 
; 2193 : protected:
; 2194 : 	virtual __CLR_OR_THIS_CALL ~ctype() _NOEXCEPT
; 2195 : 		{	// destroy the object
; 2196 : 		if (_Ctype._Delfl)
; 2197 : 			free((void *)_Ctype._Table);
; 2198 : 
; 2199 : 		free((void *)_Ctype._LocaleName);
; 2200 : 		}
; 2201 : 
; 2202 : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo& _Lobj)
; 2203 : 		{	// initialize from _Lobj
; 2204 : 		_Ctype = _Lobj._Getctype();
; 2205 : 		_Cvt = _Lobj._Getcvt();
; 2206 : 		}
; 2207 : 
; 2208 : 	virtual bool __CLR_OR_THIS_CALL do_is(mask _Maskval, _Elem _Ch) const
; 2209 : 		{	// test if element fits any mask classifications
; 2210 : 		return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
; 2211 : 			& _Maskval) != 0);
; 2212 : 		}
; 2213 : 
; 2214 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_is(const _Elem *_First, const _Elem *_Last,
; 2215 : 		mask *_Dest) const
; 2216 : 		{	// get mask sequence for elements in [_First, _Last)
; 2217 : 		_DEBUG_RANGE(_First, _Last);
; 2218 : 		_DEBUG_POINTER(_Dest);
; 2219 : 		for (; _First != _Last; ++_First, ++_Dest)
; 2220 : 			*_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
; 2221 : 		return (_First);
; 2222 : 		}
; 2223 : 
; 2224 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_scan_is(mask _Maskval,
; 2225 : 		const _Elem *_First, const _Elem *_Last) const
; 2226 : 		{	// find first in [_First, _Last) that fits mask classification
; 2227 : 		_DEBUG_RANGE(_First, _Last);
; 2228 : 		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
; 2229 : 			;
; 2230 : 		return (_First);
; 2231 : 		}
; 2232 : 
; 2233 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_scan_not(mask _Maskval,
; 2234 : 		const _Elem *_First, const _Elem *_Last) const
; 2235 : 		{	// find first in [_First, _Last) not fitting mask classification
; 2236 : 		_DEBUG_RANGE(_First, _Last);
; 2237 : 		for (; _First != _Last && is(_Maskval, *_First); ++_First)
; 2238 : 			;
; 2239 : 		return (_First);
; 2240 : 		}
; 2241 : 
; 2242 : 	virtual _Elem __CLR_OR_THIS_CALL do_tolower(_Elem _Ch) const
; 2243 : 		{	// convert element to lower case
; 2244 : 		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
; 2245 : 		if (_Byte == '\0')
; 2246 : 			return (_Ch);
; 2247 : 		else
; 2248 : 			return (widen((char)_Tolower(_Byte, &_Ctype)));
; 2249 : 		}
; 2250 : 
; 2251 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_tolower(_Elem *_First,
; 2252 : 		const _Elem *_Last) const
; 2253 : 		{	// convert [_First, _Last) in place to lower case
; 2254 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2255 : 		for (; _First != _Last; ++_First)
; 2256 : 			{	// convert *_First to lower case
; 2257 : 			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
; 2258 : 			if (_Byte != '\0')
; 2259 : 				*_First = (widen((char)_Tolower(_Byte, &_Ctype)));
; 2260 : 			}
; 2261 : 		return ((const _Elem *)_First);
; 2262 : 		}
; 2263 : 
; 2264 : 	virtual _Elem __CLR_OR_THIS_CALL do_toupper(_Elem _Ch) const
; 2265 : 		{	// convert element to upper case
; 2266 : 		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
; 2267 : 		if (_Byte == '\0')
; 2268 : 			return (_Ch);
; 2269 : 		else
; 2270 : 			return (widen((char)_Toupper(_Byte, &_Ctype)));
; 2271 : 		}
; 2272 : 
; 2273 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_toupper(_Elem *_First,
; 2274 : 		const _Elem *_Last) const
; 2275 : 		{	// convert [_First, _Last) in place to upper case
; 2276 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2277 : 		for (; _First != _Last; ++_First)
; 2278 : 			{	// convert *_First to upper case
; 2279 : 			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
; 2280 : 			if (_Byte != '\0')
; 2281 : 				*_First = (widen((char)_Toupper(_Byte, &_Ctype)));
; 2282 : 			}
; 2283 : 		return ((const _Elem *)_First);
; 2284 : 		}
; 2285 : 
; 2286 : 	virtual _Elem __CLR_OR_THIS_CALL do_widen(char _Byte) const
; 2287 : 		{	// widen char
; 2288 : 		return (_MAKLOCCHR(_Elem, _Byte, _Cvt));
; 2289 : 		}
; 2290 : 
; 2291 : 	virtual const char *__CLR_OR_THIS_CALL do_widen(const char *_First,
; 2292 : 		const char *_Last, _Elem *_Dest) const
; 2293 : 		{	// widen chars in [_First, _Last)
; 2294 : 		_DEBUG_RANGE(_First, _Last);
; 2295 : 		_DEBUG_POINTER(_Dest);
; 2296 : 		for (; _First != _Last; ++_First, ++_Dest)
; 2297 : 			*_Dest = _MAKLOCCHR(_Elem, *_First, _Cvt);
; 2298 : 		return (_First);
; 2299 : 		}
; 2300 : 
; 2301 : 	char __CLR_OR_THIS_CALL _Donarrow(_Elem _Ch, char _Dflt) const
; 2302 : 		{	// narrow element to char
; 2303 : 		char _Byte;
; 2304 : 		if (_Ch == (_Elem)0)
; 2305 : 			return ('\0');
; 2306 : 		else if ((_Byte = _MAKLOCBYTE(_Elem, _Ch, _Cvt)) == '\0')
; 2307 : 			return (_Dflt);
; 2308 : 		else
; 2309 : 			return (_Byte);
; 2310 : 		}
; 2311 : 
; 2312 : 	virtual char __CLR_OR_THIS_CALL do_narrow(_Elem _Ch, char _Dflt) const
; 2313 : 		{	// narrow element to char
; 2314 : 		return (_Donarrow(_Ch, _Dflt));
; 2315 : 		}
; 2316 : 
; 2317 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_narrow(const _Elem *_First,
; 2318 : 		const _Elem *_Last, char _Dflt, char *_Dest) const
; 2319 : 		{	// narrow elements in [_First, _Last) to chars
; 2320 : 		_DEBUG_RANGE(_First, _Last);
; 2321 : 		_DEBUG_POINTER(_Dest);
; 2322 : 		for (; _First != _Last; ++_First, ++_Dest)
; 2323 : 			*_Dest = _Donarrow(*_First, _Dflt);
; 2324 : 		return (_First);
; 2325 : 		}
; 2326 : 
; 2327 : private:
; 2328 : 	_Locinfo::_Ctypevec _Ctype;	// locale info passed to _Tolower, etc.
; 2329 : 	_Locinfo::_Cvtvec _Cvt;		// conversion information
; 2330 : 	};
; 2331 : 
; 2332 : 		// STATIC ctype::id OBJECT
; 2333 : template<class _Elem>
; 2334 : 	locale::id ctype<_Elem>::id;
; 2335 : 
; 2336 : 		// CLASS ctype<char>
; 2337 : template<>
; 2338 : 	class _CRTIMP2_PURE ctype<char>
; 2339 : 	: public ctype_base
; 2340 : 	{	// facet for classifying char elements, converting cases
; 2341 : 	typedef ctype<char> _Myt;
; 2342 : 
; 2343 : public:
; 2344 : 	typedef char _Elem;
; 2345 : 	typedef _Elem char_type;
; 2346 : 
; 2347 : 	bool __CLR_OR_THIS_CALL is(mask _Maskval, _Elem _Ch) const
; 2348 : 		{	// test if element fits any mask classifications
; 2349 : 		return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
; 2350 : 		}
; 2351 : 
; 2352 : 	const _Elem *__CLR_OR_THIS_CALL is(const _Elem *_First,
; 2353 : 		const _Elem *_Last, mask *_Dest) const
; 2354 : 		{	// get mask sequence for elements in [_First, _Last)
; 2355 : 		_DEBUG_RANGE(_First, _Last);
; 2356 : 		_DEBUG_POINTER(_Dest);
; 2357 : 		for (; _First != _Last; ++_First, ++_Dest)
; 2358 : 			*_Dest = _Ctype._Table[(unsigned char)*_First];
; 2359 : 		return (_First);
; 2360 : 		}
; 2361 : 
; 2362 : 	const _Elem *__CLR_OR_THIS_CALL scan_is(mask _Maskval,
; 2363 : 		const _Elem *_First, const _Elem *_Last) const
; 2364 : 		{	// find first in [_First, _Last) that fits mask classification
; 2365 : 		_DEBUG_RANGE(_First, _Last);
; 2366 : 		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
; 2367 : 			;
; 2368 : 		return (_First);
; 2369 : 		}
; 2370 : 
; 2371 : 	const _Elem *__CLR_OR_THIS_CALL scan_not(mask _Maskval,
; 2372 : 		const _Elem *_First, const _Elem *_Last) const
; 2373 : 		{	// find first in [_First, _Last) not fitting mask classification
; 2374 : 		_DEBUG_RANGE(_First, _Last);
; 2375 : 		for (; _First != _Last && is(_Maskval, *_First); ++_First)
; 2376 : 			;
; 2377 : 		return (_First);
; 2378 : 		}
; 2379 : 
; 2380 : 	_Elem __CLR_OR_THIS_CALL tolower(_Elem _Ch) const
; 2381 : 		{	// convert element to lower case
; 2382 : 		return (do_tolower(_Ch));
; 2383 : 		}
; 2384 : 
; 2385 : 	const _Elem *__CLR_OR_THIS_CALL tolower(_Elem *_First, const _Elem *_Last) const
; 2386 : 		{	// convert [_First, _Last) in place to lower case
; 2387 : 		return (do_tolower(_First, _Last));
; 2388 : 		}
; 2389 : 
; 2390 : 	_Elem __CLR_OR_THIS_CALL toupper(_Elem _Ch) const
; 2391 : 		{	// convert element to upper case
; 2392 : 		return (do_toupper(_Ch));
; 2393 : 		}
; 2394 : 
; 2395 : 	const _Elem *__CLR_OR_THIS_CALL toupper(_Elem *_First, const _Elem *_Last) const
; 2396 : 		{	// convert [_First, _Last) in place to upper case
; 2397 : 		return (do_toupper(_First, _Last));
; 2398 : 		}
; 2399 : 
; 2400 : 	_Elem __CLR_OR_THIS_CALL widen(char _Byte) const
; 2401 : 		{	// widen char
; 2402 : 		return (do_widen(_Byte));

  00074	8b 07		 mov	 eax, DWORD PTR [edi]
  00076	6a 20		 push	 32			; 00000020H
  00078	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0007b	8b cf		 mov	 ecx, edi
  0007d	ff d0		 call	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 180  : 		if (_Mystrbuf == 0)

  0007f	83 7e 38 00	 cmp	 DWORD PTR [esi+56], 0
  00083	88 46 40	 mov	 BYTE PTR [esi+64], al
  00086	75 1a		 jne	 SHORT $LN1@init

; 55   : 		}
; 56   : 
; 57   : 	void __CLR_OR_THIS_CALL clear(io_state _State)
; 58   : 		{	// set state to _State
; 59   : 		clear((iostate)_State);
; 60   : 		}
; 61   : 
; 62   : 	void __CLR_OR_THIS_CALL setstate(iostate _State,
; 63   : 		bool _Reraise = false)
; 64   : 		{	// merge _State into state, possibly reraise exception
; 65   : 		if (_State != goodbit)
; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00088	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 54   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  0008b	83 c8 04	 or	 eax, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 302  : 		_Mystate = (iostate)(_State & _Statmask);

  0008e	83 e0 17	 and	 eax, 23			; 00000017H
  00091	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 303  : 		if ((_Mystate & _Except) == 0)

  00094	85 46 10	 test	 DWORD PTR [esi+16], eax
  00097	74 09		 je	 SHORT $LN1@init
  00099	6a 00		 push	 0
  0009b	8b ce		 mov	 ecx, esi
  0009d	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear
$LN1@init:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 185  : 		}

  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::init
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 187  : 	__CLR_OR_THIS_CALL basic_ios()

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 188  : 		{	// default constructor, do nothing
; 189  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\istream
;	COMDAT ??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$dead$ = 12					; size = 1
_$initVBases$dead$ = 16					; size = 4
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 35   : 		{	// construct from stream buffer pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00032	8b 06		 mov	 eax, DWORD PTR [esi]

; 36   : 		_Myios::init(_Strbuf, _Isstd);

  00034	51		 push	 ecx
  00035	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00038	ff 75 08	 push	 DWORD PTR __Strbuf$[ebp]
  0003b	c7 04 06 00 00
	00 00		 mov	 DWORD PTR [esi+eax], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  00042	8b 06		 mov	 eax, DWORD PTR [esi]
  00044	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00047	8d 42 e8	 lea	 eax, DWORD PTR [edx-24]
  0004a	89 44 32 fc	 mov	 DWORD PTR [edx+esi-4], eax
  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00057	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0005e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00061	03 ce		 add	 ecx, esi
  00063	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init

; 37   : 		}

  00068	8b c6		 mov	 eax, esi
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sbumpc, COMDAT
; _this$ = ecx

; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 1a		 je	 SHORT $LN3@sbumpc
  00008	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0000b	8b 02		 mov	 eax, DWORD PTR [edx]

; 146  : 		return (0 < _Gnavail()
; 147  : 			? _Traits::to_int_type(*_Gninc()) : uflow());

  0000d	85 c0		 test	 eax, eax
  0000f	7e 11		 jle	 SHORT $LN3@sbumpc

; 149  : 
; 150  : 	int_type __CLR_OR_THIS_CALL sgetc()
; 151  : 		{	// get a character and don't point past it
; 152  : 		return (0 < _Gnavail()
; 153  : 			? _Traits::to_int_type(*gptr()) : underflow());
; 154  : 		}
; 155  : 
; 156  : 	streamsize __CLR_OR_THIS_CALL sgetn(_Elem *_Ptr,
; 157  : 		streamsize _Count)
; 158  : 		{	// get up to _Count characters into array beginning at _Ptr
; 159  : 		return (xsgetn(_Ptr, _Count));
; 160  : 		}
; 161  : 
; 162  : 	int_type __CLR_OR_THIS_CALL snextc()
; 163  : 		{	// point to next character and return it
; 164  : 		return (1 < _Gnavail()
; 165  : 			? _Traits::to_int_type(*_Gnpreinc())
; 166  : 			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
; 167  : 				? _Traits::eof() : sgetc());
; 168  : 		}
; 169  : 
; 170  : 	int_type __CLR_OR_THIS_CALL sputbackc(_Elem _Ch)
; 171  : 		{	// put back _Ch
; 172  : 		return (gptr() != 0 && eback() < gptr()
; 173  : 			&& _Traits::eq(_Ch, gptr()[-1])
; 174  : 			? _Traits::to_int_type(*_Gndec())
; 175  : 			: pbackfail(_Traits::to_int_type(_Ch)));
; 176  : 		}
; 177  : 
; 178  : 	void __CLR_OR_THIS_CALL stossc()
; 179  : 		{	// point past a character
; 180  : 		if (0 < _Gnavail())
; 181  : 			_Gninc();
; 182  : 		else
; 183  : 			uflow();
; 184  : 		}
; 185  : 
; 186  : 	int_type __CLR_OR_THIS_CALL sungetc()
; 187  : 		{	// back up one position
; 188  : 		return (gptr() != 0 && eback() < gptr()
; 189  : 			? _Traits::to_int_type(*_Gndec()) : pbackfail());
; 190  : 		}
; 191  : 
; 192  : 	int_type __CLR_OR_THIS_CALL sputc(_Elem _Ch)
; 193  : 		{	// put a character
; 194  : 		return (0 < _Pnavail()
; 195  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 196  : 			: overflow(_Traits::to_int_type(_Ch)));
; 197  : 		}
; 198  : 
; 199  : 	streamsize __CLR_OR_THIS_CALL sputn(const _Elem *_Ptr,
; 200  : 		streamsize _Count)
; 201  : 		{	// put _Count characters from array beginning at _Ptr
; 202  : 		return (xsputn(_Ptr, _Count));
; 203  : 		}
; 204  : 
; 205  : 	virtual void __CLR_OR_THIS_CALL _Lock()
; 206  : 		{	// set the thread lock (overridden by basic_filebuf)
; 207  : 		}
; 208  : 
; 209  : 	virtual void __CLR_OR_THIS_CALL _Unlock()
; 210  : 		{	// clear the thread lock (overridden by basic_filebuf)
; 211  : 		}
; 212  : 
; 213  : protected:
; 214  : 	_Elem *__CLR_OR_THIS_CALL eback() const
; 215  : 		{	// return beginning of read buffer
; 216  : 		return (*_IGfirst);
; 217  : 		}
; 218  : 
; 219  : 	_Elem *__CLR_OR_THIS_CALL gptr() const
; 220  : 		{	// return current position in read buffer
; 221  : 		return (*_IGnext);
; 222  : 		}
; 223  : 
; 224  : 	_Elem *__CLR_OR_THIS_CALL pbase() const
; 225  : 		{	// return beginning of write buffer
; 226  : 		return (*_IPfirst);
; 227  : 		}
; 228  : 
; 229  : 	_Elem *__CLR_OR_THIS_CALL pptr() const
; 230  : 		{	// return current position in write buffer
; 231  : 		return (*_IPnext);
; 232  : 		}
; 233  : 
; 234  : 	_Elem *__CLR_OR_THIS_CALL egptr() const
; 235  : 		{	// return end of read buffer
; 236  : 		return (*_IGnext + *_IGcount);
; 237  : 		}
; 238  : 
; 239  : 	void __CLR_OR_THIS_CALL gbump(int _Off)
; 240  : 		{	// alter current position in read buffer by _Off
; 241  : 		*_IGcount -= _Off;
; 242  : 		*_IGnext += _Off;
; 243  : 		}
; 244  : 
; 245  : 	void __CLR_OR_THIS_CALL setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
; 246  : 		{	// set pointers for read buffer
; 247  : 		*_IGfirst = _First;
; 248  : 		*_IGnext = _Next;
; 249  : 		*_IGcount = (int)(_Last - _Next);
; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;

  00011	48		 dec	 eax
  00012	89 02		 mov	 DWORD PTR [edx], eax

; 266  : 		return ((*_IGnext)++);

  00014	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0001c	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  0001e	0f b6 02	 movzx	 eax, BYTE PTR [edx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 148  : 		}

  00021	c3		 ret	 0
$LN3@sbumpc:

; 146  : 		return (0 < _Gnavail()
; 147  : 			? _Traits::to_int_type(*_Gninc()) : uflow());

  00022	8b 01		 mov	 eax, DWORD PTR [ecx]
  00024	ff 60 1c	 jmp	 DWORD PTR [eax+28]
?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sbumpc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::eback, COMDAT
; _this$ = ecx

; 216  : 		return (*_IGfirst);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 217  : 		}

  00005	c3		 ret	 0
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::eback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::gptr, COMDAT
; _this$ = ecx

; 221  : 		return (*_IGnext);

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 222  : 		}

  00005	c3		 ret	 0
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pptr, COMDAT
; _this$ = ecx

; 231  : 		return (*_IPnext);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 232  : 		}

  00005	c3		 ret	 0
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::egptr, COMDAT
; _this$ = ecx

; 236  : 		return (*_IGnext + *_IGcount);

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00003	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	03 01		 add	 eax, DWORD PTR [ecx]

; 237  : 		}

  0000a	c3		 ret	 0
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::egptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::gbump, COMDAT
; _this$ = ecx

; 240  : 		{	// alter current position in read buffer by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 241  : 		*_IGcount -= _Off;

  00003	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00009	29 10		 sub	 DWORD PTR [eax], edx

; 242  : 		*_IGnext += _Off;

  0000b	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0000e	01 10		 add	 DWORD PTR [eax], edx

; 243  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gbump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::epptr, COMDAT
; _this$ = ecx

; 254  : 		return (*_IPnext + *_IPcount);

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	03 01		 add	 eax, DWORD PTR [ecx]

; 255  : 		}

  0000a	c3		 ret	 0
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::epptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gndec, COMDAT
; _this$ = ecx

; 259  : 		++*_IGcount;

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00003	ff 00		 inc	 DWORD PTR [eax]

; 260  : 		return (--*_IGnext);

  00005	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	48		 dec	 eax
  0000b	89 01		 mov	 DWORD PTR [ecx], eax

; 261  : 		}

  0000d	c3		 ret	 0
?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gndec
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc, COMDAT
; _this$ = ecx

; 265  : 		--*_IGcount;

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 266  : 		return ((*_IGnext)++);

  00005	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00008	8b 02		 mov	 eax, DWORD PTR [edx]
  0000a	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000d	89 0a		 mov	 DWORD PTR [edx], ecx

; 267  : 		}

  0000f	c3		 ret	 0
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail, COMDAT
; _this$ = ecx

; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 07		 je	 SHORT $LN3@Gnavail
  00008	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	99		 cdq

; 278  : 		}

  0000e	c3		 ret	 0
$LN3@Gnavail:

; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  0000f	33 c0		 xor	 eax, eax
  00011	99		 cdq

; 278  : 		}

  00012	c3		 ret	 0
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbump, COMDAT
; _this$ = ecx

; 281  : 		{	// alter current position in write buffer by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 282  : 		*_IPcount -= _Off;

  00003	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00009	29 10		 sub	 DWORD PTR [eax], edx

; 283  : 		*_IPnext += _Off;

  0000b	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0000e	01 10		 add	 DWORD PTR [eax], edx

; 284  : 		}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbump
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT
; _this$ = ecx

; 302  : 		--*_IPcount;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 303  : 		return ((*_IPnext)++);

  00005	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00008	8b 02		 mov	 eax, DWORD PTR [edx]
  0000a	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000d	89 0a		 mov	 DWORD PTR [edx], ecx

; 304  : 		}

  0000f	c3		 ret	 0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT
; _this$ = ecx

; 308  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 07		 je	 SHORT $LN3@Pnavail
  00008	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	99		 cdq

; 309  : 		}

  0000e	c3		 ret	 0
$LN3@Pnavail:

; 308  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  0000f	33 c0		 xor	 eax, eax
  00011	99		 cdq

; 309  : 		}

  00012	c3		 ret	 0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
_TEXT	SEGMENT
__File$dead$ = 8					; size = 4
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 146  : 		{	// construct from pointer to C stream

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >

; 147  : 		_Init(_File, _Newfl);

  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	8b ce		 mov	 ecx, esi
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
  00014	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 148  : 		}

  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PB_WHH@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T2 = 8							; size = 4
__Filename$ = 8						; size = 4
__Mode$dead$ = 12					; size = 4
__Prot$dead$ = 16					; size = 4
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PB_WHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::open, COMDAT
; _this$ = ecx

; 292  : 		{	// open a wide-named C stream -- EXTENSION

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PB_WHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 293  : 		_Filet *_File;
; 294  : 		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)

  00025	83 7e 50 00	 cmp	 DWORD PTR [esi+80], 0
  00029	75 73		 jne	 SHORT $LN1@open
  0002b	6a 40		 push	 64			; 00000040H
  0002d	6a 01		 push	 1
  0002f	ff 75 08	 push	 DWORD PTR __Filename$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Fiopen@std@@YAPAU_iobuf@@PB_WHH@Z ; std::_Fiopen
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	85 c0		 test	 eax, eax
  0003c	74 60		 je	 SHORT $LN1@open

; 296  : 
; 297  : 		_Init(_File, _Openfl);

  0003e	6a 01		 push	 1
  00040	50		 push	 eax
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 298  : 		_Initcvt(&_USE(_Mysb::getloc(), _Cvt));

  00048	8d 45 08	 lea	 eax, DWORD PTR $T2[ebp]
  0004b	50		 push	 eax
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ ; std::basic_streambuf<char,std::char_traits<char> >::getloc
  00053	50		 push	 eax
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005b	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
  00060	83 c4 04	 add	 esp, 4
  00063	8b ce		 mov	 ecx, esi
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
  0006b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 422  : 		if (_Ptr != 0)

  00072	8b 4d 08	 mov	 ecx, DWORD PTR $T2[ebp]
  00075	85 c9		 test	 ecx, ecx
  00077	74 11		 je	 SHORT $LN9@open

; 423  : 			_DELETE_CRT(_Ptr->_Decref());

  00079	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007b	ff 50 08	 call	 DWORD PTR [eax+8]
  0007e	85 c0		 test	 eax, eax
  00080	74 08		 je	 SHORT $LN9@open
  00082	8b 10		 mov	 edx, DWORD PTR [eax]
  00084	6a 01		 push	 1
  00086	8b c8		 mov	 ecx, eax
  00088	ff 12		 call	 DWORD PTR [edx]
$LN9@open:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 299  : 		return (this);	// open succeeded

  0008a	8b c6		 mov	 eax, esi

; 300  : 		}

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5e		 pop	 esi
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
$LN1@open:

; 295  : 			return (0);	// open failed

  0009e	33 c0		 xor	 eax, eax

; 300  : 		}

  000a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000aa	59		 pop	 ecx
  000ab	5e		 pop	 esi
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PB_WHH@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PB_WHH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PB_WHH@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PB_WHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::open
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ
_TEXT	SEGMENT
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 339  : 		{	// close the C stream

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 340  : 		_Myt *_Ans = this;
; 341  : 		if (_Myfile == 0)

  00004	83 7e 50 00	 cmp	 DWORD PTR [esi+80], 0
  00008	75 04		 jne	 SHORT $LN4@close

; 342  : 			_Ans = 0;

  0000a	33 ff		 xor	 edi, edi

; 343  : 		else

  0000c	eb 20		 jmp	 SHORT $LN1@close
$LN4@close:

; 344  : 			{	// put any homing sequence and close file
; 345  : 			if (!_Endwrite())

  0000e	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite

; 346  : 				_Ans = 0;
; 347  : 			if (fclose(_Myfile) != 0)

  00013	ff 76 50	 push	 DWORD PTR [esi+80]
  00016	33 c9		 xor	 ecx, ecx
  00018	84 c0		 test	 al, al
  0001a	8b fe		 mov	 edi, esi
  0001c	0f 44 f9	 cmove	 edi, ecx
  0001f	e8 00 00 00 00	 call	 _fclose
  00024	33 c9		 xor	 ecx, ecx
  00026	83 c4 04	 add	 esp, 4
  00029	85 c0		 test	 eax, eax
  0002b	0f 45 f9	 cmovne	 edi, ecx
$LN1@close:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 313  : 		_IGfirst = &_Gfirst;

  0002e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00031	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 315  : 		_IGnext = &_Gnext;

  00034	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00037	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 316  : 		_IPnext = &_Pnext;

  0003a	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  0003d	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 317  : 		_IGcount = &_Gcount;

  00040	8d 46 24	 lea	 eax, DWORD PTR [esi+36]
  00043	89 46 2c	 mov	 DWORD PTR [esi+44], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 605  : 		_Closef = _Which == _Openfl;

  00046	c6 46 4c 00	 mov	 BYTE PTR [esi+76], 0

; 606  : 		_Wrotesome = false;

  0004a	c6 46 45 00	 mov	 BYTE PTR [esi+69], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 314  : 		_IPfirst = &_Pfirst;

  0004e	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00051	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 318  : 		_IPcount = &_Pcount;

  00054	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  00057	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;
; 266  : 		return ((*_IGnext)++);
; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);
; 278  : 		}
; 279  : 
; 280  : 	void __CLR_OR_THIS_CALL pbump(int _Off)
; 281  : 		{	// alter current position in write buffer by _Off
; 282  : 		*_IPcount -= _Off;
; 283  : 		*_IPnext += _Off;
; 284  : 		}
; 285  : 
; 286  : 	void __CLR_OR_THIS_CALL setp(_Elem *_First, _Elem *_Last)
; 287  : 		{	// set pointers for write buffer
; 288  : 		*_IPfirst = _First;

  0005a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 289  : 		*_IPnext = _First;

  00060	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00063	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 290  : 		*_IPcount = (int)(_Last - _First);

  00069	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0006c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 247  : 		*_IGfirst = _First;

  00072	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 351  : 		return (_Ans);

  00075	8b c7		 mov	 eax, edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 247  : 		*_IGfirst = _First;

  00077	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 248  : 		*_IGnext = _Next;

  0007d	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 352  : 		}

  00080	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 248  : 		*_IGnext = _Next;

  00081	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 249  : 		*_IGcount = (int)(_Last - _Next);

  00087	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0008a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 629  : 		_State = _Stinit;

  00090	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
  00096	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
  0009d	89 4e 48	 mov	 DWORD PTR [esi+72], ecx

; 630  : 		_Pcvt = 0;	// pointer to codecvt facet

  000a0	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 352  : 		}

  000a7	5e		 pop	 esi
  000a8	c3		 ret	 0
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z
_TEXT	SEGMENT
__File$ = 8						; size = 4
__Which$ = 12						; size = 4
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 602  : 		{	// initialize to C stream _File after {new, open, close}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 603  : 		__PURE_APPDOMAIN_GLOBAL static _Myst _Stinit;	// initial state
; 604  : 
; 605  : 		_Closef = _Which == _Openfl;

  00003	83 7d 0c 01	 cmp	 DWORD PTR __Which$[ebp], 1

; 606  : 		_Wrotesome = false;

  00007	c6 41 45 00	 mov	 BYTE PTR [ecx+69], 0
  0000b	0f 94 c0	 sete	 al
  0000e	88 41 4c	 mov	 BYTE PTR [ecx+76], al
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 313  : 		_IGfirst = &_Gfirst;

  00011	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00014	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 314  : 		_IPfirst = &_Pfirst;
; 315  : 		_IGnext = &_Gnext;

  00017	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  0001a	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 316  : 		_IPnext = &_Pnext;

  0001d	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00020	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 317  : 		_IGcount = &_Gcount;

  00023	8d 41 24	 lea	 eax, DWORD PTR [ecx+36]
  00026	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
  00029	8d 51 08	 lea	 edx, DWORD PTR [ecx+8]
  0002c	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 318  : 		_IPcount = &_Pcount;

  0002f	8d 41 28	 lea	 eax, DWORD PTR [ecx+40]
  00032	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;
; 266  : 		return ((*_IGnext)++);
; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);
; 278  : 		}
; 279  : 
; 280  : 	void __CLR_OR_THIS_CALL pbump(int _Off)
; 281  : 		{	// alter current position in write buffer by _Off
; 282  : 		*_IPcount -= _Off;
; 283  : 		*_IPnext += _Off;
; 284  : 		}
; 285  : 
; 286  : 	void __CLR_OR_THIS_CALL setp(_Elem *_First, _Elem *_Last)
; 287  : 		{	// set pointers for write buffer
; 288  : 		*_IPfirst = _First;

  00035	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 289  : 		*_IPnext = _First;

  0003b	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 617  : 		if (_File != 0 && sizeof (_Elem) == 1)

  0003e	8b 55 08	 mov	 edx, DWORD PTR __File$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 289  : 		*_IPnext = _First;

  00041	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 290  : 		*_IPcount = (int)(_Last - _First);

  00047	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0004a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 247  : 		*_IGfirst = _First;

  00050	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00053	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 248  : 		*_IGnext = _Next;

  00059	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0005c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 249  : 		*_IGcount = (int)(_Last - _Next);

  00062	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00065	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 617  : 		if (_File != 0 && sizeof (_Elem) == 1)

  0006b	85 d2		 test	 edx, edx
  0006d	74 18		 je	 SHORT $LN10@Init

; 618  :   #pragma warning(pop)
; 619  : 
; 620  : 			{	// point inside C stream with [first, first + count) buffer
; 621  : 			_Elem **_Pb = (_Elem **)&_File->_IOBASE;

  0006f	8d 42 08	 lea	 eax, DWORD PTR [edx+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 326  : 		_IGfirst = _Gf;

  00072	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 327  : 		_IPfirst = _Pf;

  00075	89 41 10	 mov	 DWORD PTR [ecx+16], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 623  : 			int *_Nr = (int *)&_File->_IORCNT;

  00078	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 328  : 		_IGnext = _Gn;

  0007b	89 51 1c	 mov	 DWORD PTR [ecx+28], edx

; 329  : 		_IPnext = _Pn;

  0007e	89 51 20	 mov	 DWORD PTR [ecx+32], edx

; 330  : 		_IGcount = _Gc;

  00081	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 331  : 		_IPcount = _Pc;

  00084	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN10@Init:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 629  : 		_State = _Stinit;

  00087	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
  0008c	89 51 50	 mov	 DWORD PTR [ecx+80], edx
  0008f	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 630  : 		_Pcvt = 0;	// pointer to codecvt facet

  00092	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0

; 631  : 		}

  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
_TEXT	SEGMENT
__Dest$2 = -48						; size = 4
__Str$3 = -44						; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite, COMDAT
; _this$ = ecx

; 634  : 		{	// put shift to initial conversion state, as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
  0000d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00013	50		 push	 eax
  00014	83 ec 28	 sub	 esp, 40			; 00000028H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c4		 xor	 eax, esp
  0001e	89 44 24 20	 mov	 DWORD PTR __$ArrayPad$[esp+52], eax
  00022	53		 push	 ebx
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c4		 xor	 eax, esp
  0002c	50		 push	 eax
  0002d	8d 44 24 38	 lea	 eax, DWORD PTR __$EHRec$[esp+68]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	8b d9		 mov	 ebx, ecx

; 635  : 		if (_Pcvt == 0 || !_Wrotesome)

  00039	83 7b 40 00	 cmp	 DWORD PTR [ebx+64], 0
  0003d	0f 84 11 01 00
	00		 je	 $LN14@Endwrite
  00043	80 7b 45 00	 cmp	 BYTE PTR [ebx+69], 0
  00047	0f 84 07 01 00
	00		 je	 $LN14@Endwrite

; 641  : 			if (_Traits::eq_int_type(_Traits::eof(), overflow()))

  0004d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004f	6a ff		 push	 -1
  00051	ff 50 0c	 call	 DWORD PTR [eax+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  00054	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 641  : 			if (_Traits::eq_int_type(_Traits::eof(), overflow()))

  00057	75 07		 jne	 SHORT $LN12@Endwrite

; 642  : 				return (false);

  00059	32 c0		 xor	 al, al
  0005b	e9 f6 00 00 00	 jmp	 $LN13@Endwrite
$LN12@Endwrite:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00060	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00065	c6 44 24 18 00	 mov	 BYTE PTR __Str$3[esp+68], 0
  0006a	0f 57 c0	 xorps	 xmm0, xmm0

; 559  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  0006d	66 0f d6 44 24
	18		 movq	 QWORD PTR __Str$3[esp+68], xmm0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  00073	8d 44 24 18	 lea	 eax, DWORD PTR __Str$3[esp+68]
  00077	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0007a	0f 43 44 24 18	 cmovae	 eax, DWORD PTR __Str$3[esp+68]

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  0007f	89 4c 24 2c	 mov	 DWORD PTR __Str$3[esp+88], ecx

; 518  : 		}
; 519  : 
; 520  : 	const value_type *_Myptr() const
; 521  : 		{	// determine current pointer to buffer for nonmutable string
; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);
; 525  : 		}
; 526  : 
; 527  : 	union _Bxty
; 528  : 		{	// storage for small buffer or pointer to larger one
; 529  : 		value_type _Buf[_BUF_SIZE];
; 530  : 		pointer _Ptr;
; 531  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 532  : 		} _Bx;
; 533  : 
; 534  : 	size_type _Mysize;	// current length of string
; 535  : 	size_type _Myres;	// current storage reserved for string
; 536  : 	};
; 537  : 
; 538  : 		// TEMPLATE CLASS _String_alloc
; 539  : template<bool _Al_has_storage,
; 540  : 	class _Alloc_types>
; 541  : 	class _String_alloc
; 542  : 		: public _String_val<typename _Alloc_types::_Val_types>
; 543  : 	{	// base class for basic_string to hold allocator with storage
; 544  : public:
; 545  : 	typedef _String_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 546  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 547  : 
; 548  : 	typedef typename _Alloc_types::_Alty _Alty;
; 549  : 
; 550  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 551  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 552  : 		: _Alval(_Al)
; 553  : 		{	// construct allocator from _Al
; 554  : 		}
; 555  : 
; 556  : 	void _Change_alloc(const _Alty& _Al)
; 557  : 		{	// replace old allocator
; 558  : 		_Alval = _Al;
; 559  : 		}
; 560  : 
; 561  : 	void _Swap_alloc(_Myt& _Right)
; 562  : 		{	// swap allocators
; 563  : 		_Swap_adl(this->_Alval, _Right._Alval);
; 564  : 		}
; 565  : 
; 566  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 567  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 568  : 		: _Alval(_Al)
; 569  : 		{	// construct allocator from _Al
; 570  : 		_Alloc_proxy();
; 571  : 		}
; 572  : 
; 573  : 	~_String_alloc() _NOEXCEPT
; 574  : 		{	// destroy the object
; 575  : 		_Free_proxy();
; 576  : 		}
; 577  : 
; 578  : 	void _Change_alloc(const _Alty& _Al)
; 579  : 		{	// replace old allocator
; 580  : 		_Free_proxy();
; 581  : 		_Alval = _Al;
; 582  : 		_Alloc_proxy();
; 583  : 		}
; 584  : 
; 585  : 	void _Swap_alloc(_Myt& _Right)
; 586  : 		{	// swap allocators
; 587  : 		_Swap_adl(_Alval, _Right._Alval);
; 588  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 589  : 		}
; 590  : 
; 591  : 	void _Alloc_proxy()
; 592  : 		{	// construct proxy from _Alval
; 593  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 594  : 			_Alproxy(_Alval);
; 595  : 		this->_Myproxy = _Alproxy.allocate(1);
; 596  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 597  : 		this->_Myproxy->_Mycont = this;
; 598  : 		}
; 599  : 
; 600  : 	void _Free_proxy()
; 601  : 		{	// destroy proxy
; 602  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 603  : 			_Alproxy(_Alval);
; 604  : 		this->_Orphan_all();
; 605  : 		_Alproxy.destroy(this->_Myproxy);
; 606  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 607  : 		this->_Myproxy = 0;
; 608  : 		}
; 609  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 610  : 
; 611  : 	_Alty& _Getal()
; 612  : 		{	// get reference to allocator
; 613  : 		return (_Alval);
; 614  : 		}
; 615  : 
; 616  : 	const _Alty& _Getal() const
; 617  : 		{	// get reference to allocator
; 618  : 		return (_Alval);
; 619  : 		}
; 620  : 
; 621  : 	_Alty _Alval;	// allocator object for strings
; 622  : 	};
; 623  : 
; 624  : template<class _Alloc_types>
; 625  : 	class _String_alloc<false, _Alloc_types>
; 626  : 		: public _String_val<typename _Alloc_types::_Val_types>
; 627  : 	{	// base class for basic_string to hold allocator with no storage
; 628  : public:
; 629  : 	typedef _String_alloc<false, _Alloc_types> _Myt;
; 630  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 631  : 
; 632  : 	typedef typename _Alloc_types::_Alty _Alty;
; 633  : 
; 634  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 635  : 	_String_alloc(const _Alloc& = _Alloc())
; 636  : 		{	// construct allocator from _Al
; 637  : 		}
; 638  : 
; 639  : 	void _Change_alloc(const _Alty&)
; 640  : 		{	// replace old allocator
; 641  : 		}
; 642  : 
; 643  : 	void _Swap_alloc(_Myt&)
; 644  : 		{	// swap allocators
; 645  : 		}
; 646  : 
; 647  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 648  : 	_String_alloc(const _Alloc& = _Alloc())
; 649  : 		{	// construct allocator from _Al
; 650  : 		_Alloc_proxy();
; 651  : 		}
; 652  : 
; 653  : 	~_String_alloc() _NOEXCEPT
; 654  : 		{	// destroy the object
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Change_alloc(const _Alty&)
; 659  : 		{	// replace old allocator
; 660  : 		}
; 661  : 
; 662  : 	void _Swap_alloc(_Myt& _Right)
; 663  : 		{	// swap allocators
; 664  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 665  : 		}
; 666  : 
; 667  : 	void _Alloc_proxy()
; 668  : 		{	// construct proxy from _Alval
; 669  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 670  : 			_Alproxy;
; 671  : 		this->_Myproxy = _Alproxy.allocate(1);
; 672  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 673  : 		this->_Myproxy->_Mycont = this;
; 674  : 		}
; 675  : 
; 676  : 	void _Free_proxy()
; 677  : 		{	// destroy proxy
; 678  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 679  : 			_Alproxy;
; 680  : 		this->_Orphan_all();
; 681  : 		_Alproxy.destroy(this->_Myproxy);
; 682  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 683  : 		this->_Myproxy = 0;
; 684  : 		}
; 685  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 686  : 
; 687  : 	_Alty _Getal() const
; 688  : 		{	// get reference to allocator
; 689  : 		return (_Alty());
; 690  : 		}
; 691  : 	};
; 692  : 
; 693  : 		// TEMPLATE CLASS basic_string
; 694  : template<class _Elem,
; 695  : 	class _Traits,
; 696  : 	class _Alloc>
; 697  : 	class basic_string
; 698  : 		: public _String_alloc<!is_empty<_Alloc>::value,
; 699  : 			_String_base_types<_Elem, _Alloc> >
; 700  : 	{	// null-terminated transparent array of elements
; 701  : public:
; 702  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 703  : 	typedef _String_alloc<!is_empty<_Alloc>::value,
; 704  : 		_String_base_types<_Elem, _Alloc> > _Mybase;
; 705  : 	typedef _Traits traits_type;
; 706  : 	typedef _Alloc allocator_type;
; 707  : 
; 708  : 	typedef typename _Mybase::_Alty _Alty;
; 709  : 
; 710  : 	typedef typename _Mybase::value_type value_type;
; 711  : 	typedef typename _Mybase::size_type size_type;
; 712  : 	typedef typename _Mybase::difference_type difference_type;
; 713  : 	typedef typename _Mybase::pointer pointer;
; 714  : 	typedef typename _Mybase::const_pointer const_pointer;
; 715  : 	typedef typename _Mybase::reference reference;
; 716  : 	typedef typename _Mybase::const_reference const_reference;
; 717  : 
; 718  : 	typedef typename _Mybase::iterator iterator;
; 719  : 	typedef typename _Mybase::const_iterator const_iterator;
; 720  : 
; 721  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 722  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 723  : 
; 724  : 	basic_string(const _Myt& _Right)
; 725  : 
; 726  :  #if _HAS_CPP0X
; 727  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 728  : 
; 729  :  #else /* _HAS_CPP0X */
; 730  : 		: _Mybase(_Right._Getal())
; 731  :  #endif /* _HAS_CPP0X */
; 732  : 
; 733  : 		{	// construct by copying _Right
; 734  : 		_Tidy();
; 735  : 		assign(_Right, 0, npos);
; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00083	c7 44 24 28 08
	00 00 00	 mov	 DWORD PTR __Str$3[esp+84], 8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  0008b	c6 40 08 00	 mov	 BYTE PTR [eax+8], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 644  : 			string _Str(_STRING_INC, '\0');

  0008f	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+76], 0
  00097	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL11@Endwrite:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  000a0	83 7c 24 2c 10	 cmp	 DWORD PTR __Str$3[esp+88], 16 ; 00000010H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 647  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  000a5	8b 4b 40	 mov	 ecx, DWORD PTR [ebx+64]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 875  : 		return (do_unshift(_State, _First2, _Last2, _Mid2));

  000a8	8d 44 24 14	 lea	 eax, DWORD PTR __Dest$2[esp+68]
  000ac	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ae	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 647  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  000af	8b 44 24 2c	 mov	 eax, DWORD PTR __Str$3[esp+88]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  000b3	8d 7c 24 1c	 lea	 edi, DWORD PTR __Str$3[esp+72]
  000b7	0f 43 7c 24 1c	 cmovae	 edi, DWORD PTR __Str$3[esp+72]
  000bc	8d 74 24 1c	 lea	 esi, DWORD PTR __Str$3[esp+72]
  000c0	0f 43 74 24 1c	 cmovae	 esi, DWORD PTR __Str$3[esp+72]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 647  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  000c5	03 c7		 add	 eax, edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 875  : 		return (do_unshift(_State, _First2, _Last2, _Mid2));

  000c7	50		 push	 eax
  000c8	56		 push	 esi
  000c9	8d 43 48	 lea	 eax, DWORD PTR [ebx+72]
  000cc	50		 push	 eax
  000cd	ff 52 20	 call	 DWORD PTR [edx+32]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 647  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  000d0	83 e8 00	 sub	 eax, 0
  000d3	74 0c		 je	 SHORT $LN7@Endwrite
  000d5	48		 dec	 eax
  000d6	74 0d		 je	 SHORT $LN6@Endwrite
  000d8	83 e8 02	 sub	 eax, 2
  000db	74 5e		 je	 SHORT $LN280@Endwrite
$LN279@Endwrite:
  000dd	32 db		 xor	 bl, bl
  000df	eb 5c		 jmp	 SHORT $LN21@Endwrite
$LN7@Endwrite:

; 648  : 				{	// test result of homing conversion
; 649  : 				case codecvt_base::ok:
; 650  : 					_Wrotesome = false;	// homed successfully

  000e1	c6 43 45 00	 mov	 BYTE PTR [ebx+69], 0
$LN6@Endwrite:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  000e5	8b 4c 24 2c	 mov	 ecx, DWORD PTR __Str$3[esp+88]
  000e9	8b 54 24 18	 mov	 edx, DWORD PTR __Str$3[esp+68]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 654  : 					size_t _Count = _Dest - &*_Str.begin();

  000ed	8b 74 24 14	 mov	 esi, DWORD PTR __Dest$2[esp+68]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  000f1	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000f4	8d 44 24 18	 lea	 eax, DWORD PTR __Str$3[esp+68]
  000f8	0f 43 c2	 cmovae	 eax, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 654  : 					size_t _Count = _Dest - &*_Str.begin();

  000fb	2b f0		 sub	 esi, eax

; 656  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

  000fd	74 1d		 je	 SHORT $LN5@Endwrite
  000ff	ff 73 50	 push	 DWORD PTR [ebx+80]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  00102	83 f9 10	 cmp	 ecx, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 656  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

  00105	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  00106	8d 44 24 20	 lea	 eax, DWORD PTR __Str$3[esp+76]
  0010a	0f 43 c2	 cmovae	 eax, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 656  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

  0010d	6a 01		 push	 1
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 _fwrite
  00115	83 c4 10	 add	 esp, 16			; 00000010H
  00118	3b f0		 cmp	 esi, eax
  0011a	75 c1		 jne	 SHORT $LN279@Endwrite
$LN5@Endwrite:

; 657  : 						return (false);	// write failed
; 658  : 					if (!_Wrotesome)

  0011c	80 7b 45 00	 cmp	 BYTE PTR [ebx+69], 0
  00120	74 19		 je	 SHORT $LN280@Endwrite

; 660  : 					if (_Count == 0)

  00122	85 f6		 test	 esi, esi
  00124	0f 85 76 ff ff
	ff		 jne	 $LL11@Endwrite

; 661  : 						_Str.append(_STRING_INC, '\0');	// try with more space

  0012a	56		 push	 esi
  0012b	6a 08		 push	 8
  0012d	8d 4c 24 20	 lea	 ecx, DWORD PTR __Str$3[esp+76]
  00131	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 670  : 				}

  00136	e9 65 ff ff ff	 jmp	 $LL11@Endwrite
$LN280@Endwrite:

; 659  : 						return (true);

  0013b	b3 01		 mov	 bl, 1
$LN21@Endwrite:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0013d	83 7c 24 2c 10	 cmp	 DWORD PTR __Str$3[esp+88], 16 ; 00000010H
  00142	72 0c		 jb	 SHORT $LN266@Endwrite
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00144	ff 74 24 18	 push	 DWORD PTR __Str$3[esp+68]
  00148	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0014d	83 c4 04	 add	 esp, 4
$LN266@Endwrite:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 669  : 					return (false);	// conversion failed

  00150	8a c3		 mov	 al, bl
  00152	eb 02		 jmp	 SHORT $LN13@Endwrite
$LN14@Endwrite:

; 636  : 			return (true);

  00154	b0 01		 mov	 al, 1
$LN13@Endwrite:

; 671  : 			}
; 672  : 		}

  00156	8b 4c 24 38	 mov	 ecx, DWORD PTR __$EHRec$[esp+68]
  0015a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00161	59		 pop	 ecx
  00162	5f		 pop	 edi
  00163	5e		 pop	 esi
  00164	5b		 pop	 ebx
  00165	8b 4c 24 20	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+52]
  00169	33 cc		 xor	 ecx, esp
  0016b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Str$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 cc	 lea	 eax, DWORD PTR [edx-52]
  0000f	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z
_TEXT	SEGMENT
__Newpcvt$ = 8						; size = 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt, COMDAT
; _this$ = ecx

; 675  : 		{	// initialize codecvt pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 808  : 		return (do_always_noconv());

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Newpcvt$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 675  : 		{	// initialize codecvt pointer

  00008	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 808  : 		return (do_always_noconv());

  0000a	8b 07		 mov	 eax, DWORD PTR [edi]
  0000c	8b cf		 mov	 ecx, edi
  0000e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00011	ff d0		 call	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 676  : 		if (_Newpcvt->always_noconv())

  00013	84 c0		 test	 al, al
  00015	74 0d		 je	 SHORT $LN2@Initcvt

; 677  : 			_Pcvt = 0;	// nothing to do

  00017	5f		 pop	 edi
  00018	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  0001f	5e		 pop	 esi

; 683  : 		}

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN2@Initcvt:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 313  : 		_IGfirst = &_Gfirst;

  00024	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00027	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 314  : 		_IPfirst = &_Pfirst;
; 315  : 		_IGnext = &_Gnext;

  0002a	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  0002d	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 316  : 		_IPnext = &_Pnext;

  00030	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00033	89 46 20	 mov	 DWORD PTR [esi+32], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 680  : 			_Pcvt = _Newpcvt;

  00036	89 7e 40	 mov	 DWORD PTR [esi+64], edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 317  : 		_IGcount = &_Gcount;

  00039	8d 46 24	 lea	 eax, DWORD PTR [esi+36]
  0003c	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0003f	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00042	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 318  : 		_IPcount = &_Pcount;

  00045	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  00048	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;
; 266  : 		return ((*_IGnext)++);
; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);
; 278  : 		}
; 279  : 
; 280  : 	void __CLR_OR_THIS_CALL pbump(int _Off)
; 281  : 		{	// alter current position in write buffer by _Off
; 282  : 		*_IPcount -= _Off;
; 283  : 		*_IPnext += _Off;
; 284  : 		}
; 285  : 
; 286  : 	void __CLR_OR_THIS_CALL setp(_Elem *_First, _Elem *_Last)
; 287  : 		{	// set pointers for write buffer
; 288  : 		*_IPfirst = _First;

  0004b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 289  : 		*_IPnext = _First;

  00051	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00054	5f		 pop	 edi
  00055	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 290  : 		*_IPcount = (int)(_Last - _First);

  0005b	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0005e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 247  : 		*_IGfirst = _First;

  00064	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00067	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 248  : 		*_IGnext = _Next;

  0006d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00070	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 249  : 		*_IGcount = (int)(_Last - _Next);

  00076	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00079	5e		 pop	 esi
  0007a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 683  : 		}

  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back, COMDAT
; _this$ = ecx

; 687  : 		{	// restore buffer after putback

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 216  : 		return (*_IGfirst);

  00001	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 688  : 		if (_Mysb::eback() == &_Mychar)

  00004	8d 41 44	 lea	 eax, DWORD PTR [ecx+68]
  00007	39 06		 cmp	 DWORD PTR [esi], eax
  00009	75 14		 jne	 SHORT $LN6@Reset_back
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 247  : 		*_IGfirst = _First;

  0000b	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 689  : 			_Mysb::setg(_Set_eback, _Set_egptr, _Set_egptr);

  0000e	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 247  : 		*_IGfirst = _First;

  00011	89 06		 mov	 DWORD PTR [esi], eax

; 248  : 		*_IGnext = _Next;

  00013	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00016	89 10		 mov	 DWORD PTR [eax], edx

; 249  : 		*_IGcount = (int)(_Last - _Next);

  00018	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0001b	2b d2		 sub	 edx, edx
  0001d	89 10		 mov	 DWORD PTR [eax], edx
$LN6@Reset_back:
  0001f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 690  : 		}

  00020	c3		 ret	 0
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back, COMDAT
; _this$ = ecx

; 693  : 		{	// set up putback area

  00000	56		 push	 esi
  00001	8b d1		 mov	 edx, ecx
  00003	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 216  : 		return (*_IGfirst);

  00004	8b 7a 0c	 mov	 edi, DWORD PTR [edx+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 694  : 		if (_Mysb::eback() != &_Mychar)

  00007	8d 72 44	 lea	 esi, DWORD PTR [edx+68]
  0000a	8b 07		 mov	 eax, DWORD PTR [edi]
  0000c	3b c6		 cmp	 eax, esi
  0000e	74 10		 je	 SHORT $LN1@Set_back
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 236  : 		return (*_IGnext + *_IGcount);

  00010	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 696  : 			_Set_eback = _Mysb::eback();

  00013	89 42 38	 mov	 DWORD PTR [edx+56], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 236  : 		return (*_IGnext + *_IGcount);

  00016	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00019	8b 00		 mov	 eax, DWORD PTR [eax]
  0001b	03 01		 add	 eax, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 697  : 			_Set_egptr = _Mysb::egptr();

  0001d	89 42 3c	 mov	 DWORD PTR [edx+60], eax
$LN1@Set_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 247  : 		*_IGfirst = _First;

  00020	89 37		 mov	 DWORD PTR [edi], esi

; 248  : 		*_IGnext = _Next;

  00022	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]

; 249  : 		*_IGcount = (int)(_Last - _Next);

  00025	8b ca		 mov	 ecx, edx
  00027	89 30		 mov	 DWORD PTR [eax], esi
  00029	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0002c	2b ce		 sub	 ecx, esi
  0002e	83 c1 45	 add	 ecx, 69			; 00000045H
  00031	5f		 pop	 edi
  00032	89 08		 mov	 DWORD PTR [eax], ecx
  00034	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 700  : 		}

  00035	c3		 ret	 0
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy, COMDAT
; _this$ = ecx

; 1535 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1536 : 		if (this->_Myfirst != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 1d		 je	 SHORT $LN1@Tidy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1542 : 			this->_Myfirst = pointer();

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1543 : 			this->_Mylast = pointer();

  00018	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1544 : 			this->_Myend = pointer();

  0001f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN1@Tidy:
  00026	5e		 pop	 esi

; 1545 : 			}
; 1546 : 		}

  00027	c3		 ret	 0
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@E@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@E@std@@QAE@XZ PROC			; std::allocator<unsigned char>::allocator<unsigned char>, COMDAT
; _this$ = ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@E@std@@QAE@XZ ENDP			; std::allocator<unsigned char>::allocator<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >, COMDAT
; _this$ = ecx

; 486  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 487  : 		_Mylast = pointer();

  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 488  : 		_Myend = pointer();

  0000d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 594  : 		{	// construct allocator from _Al
; 595  : 		}

  00014	8b c1		 mov	 eax, ecx
  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@H@std@@QAE@_J@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 8
??0?$fpos@H@std@@QAE@_J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with stream offset

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_BADOFF@std@@3_JB
  00005	89 01		 mov	 DWORD PTR [ecx], eax
  00007	a1 04 00 00 00	 mov	 eax, DWORD PTR ?_BADOFF@std@@3_JB+4
  0000c	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 44   : 		}

  00024	8b c1		 mov	 eax, ecx
  00026	c2 08 00	 ret	 8
??0?$fpos@H@std@@QAE@_J@Z ENDP				; std::fpos<int>::fpos<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@H@std@@QAE@H_J@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Fileposition$ = 12					; size = 8
??0?$fpos@H@std@@QAE@H_J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 48   : 		{	// construct with conversion state and C file position

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Fileposition$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00009	8b 45 10	 mov	 eax, DWORD PTR __Fileposition$[ebp+4]
  0000c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0000f	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00012	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00015	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0001b	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 49   : 		}

  00022	8b c1		 mov	 eax, ecx
  00024	5d		 pop	 ebp
  00025	c2 0c 00	 ret	 12			; 0000000cH
??0?$fpos@H@std@@QAE@H_J@Z ENDP				; std::fpos<int>::fpos<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?state@?$fpos@H@std@@QBEHXZ
_TEXT	SEGMENT
?state@?$fpos@H@std@@QBEHXZ PROC			; std::fpos<int>::state, COMDAT
; _this$ = ecx

; 53   : 		return (_Mystate);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 54   : 		}

  00003	c3		 ret	 0
?state@?$fpos@H@std@@QBEHXZ ENDP			; std::fpos<int>::state
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?seekpos@?$fpos@H@std@@QBE_JXZ
_TEXT	SEGMENT
?seekpos@?$fpos@H@std@@QBE_JXZ PROC			; std::fpos<int>::seekpos, COMDAT
; _this$ = ecx

; 63   : 		return (_Fpos);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]

; 64   : 		}

  00006	c3		 ret	 0
?seekpos@?$fpos@H@std@@QBE_JXZ ENDP			; std::fpos<int>::seekpos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ??B?$fpos@H@std@@QBE_JXZ
_TEXT	SEGMENT
??B?$fpos@H@std@@QBE_JXZ PROC				; std::fpos<int>::operator __int64, COMDAT
; _this$ = ecx

; 68   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	03 01		 add	 eax, DWORD PTR [ecx]
  00005	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00008	13 51 04	 adc	 edx, DWORD PTR [ecx+4]

; 69   : 		}

  0000b	c3		 ret	 0
??B?$fpos@H@std@@QBE_JXZ ENDP				; std::fpos<int>::operator __int64
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
__Last2$ = 28						; size = 4
__Mid2$ = 32						; size = 4
?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z PROC	; std::codecvt<char,char,int>::in, COMDAT
; _this$ = ecx

; 859  : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 860  : 		return (do_in(_State,
; 861  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 862  : 		}

  00005	5d		 pop	 ebp

; 860  : 		return (do_in(_State,
; 861  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));

  00006	ff 60 18	 jmp	 DWORD PTR [eax+24]
?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z ENDP	; std::codecvt<char,char,int>::in
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
__Last2$ = 28						; size = 4
__Mid2$ = 32						; size = 4
?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z PROC ; std::codecvt<char,char,int>::out, COMDAT
; _this$ = ecx

; 867  : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last2)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 868  : 		return (do_out(_State,
; 869  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 870  : 		}

  00005	5d		 pop	 ebp

; 868  : 		return (do_out(_State,
; 869  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));

  00006	ff 60 1c	 jmp	 DWORD PTR [eax+28]
?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z ENDP ; std::codecvt<char,char,int>::out
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??1?$codecvt@DDH@std@@MAE@XZ
_TEXT	SEGMENT
??1?$codecvt@DDH@std@@MAE@XZ PROC			; std::codecvt<char,char,int>::~codecvt<char,char,int>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet

; 24   : 		{	// ensure that derived classes can be destroyed properly

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 910  : 		}

  00006	c3		 ret	 0
??1?$codecvt@DDH@std@@MAE@XZ ENDP			; std::codecvt<char,char,int>::~codecvt<char,char,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_always_noconv@?$codecvt@DDH@std@@MBE_NXZ
_TEXT	SEGMENT
?do_always_noconv@?$codecvt@DDH@std@@MBE_NXZ PROC	; std::codecvt<char,char,int>::do_always_noconv, COMDAT
; _this$ = ecx

; 918  : 		return (is_same<_Byte, _Elem>::value);

  00000	b0 01		 mov	 al, 1

; 919  : 		}

  00002	c3		 ret	 0
?do_always_noconv@?$codecvt@DDH@std@@MBE_NXZ ENDP	; std::codecvt<char,char,int>::do_always_noconv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_in@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
__Last2$ = 28						; size = 4
__Mid2$ = 32						; size = 4
?do_in@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z PROC ; std::codecvt<char,char,int>::do_in, COMDAT
; _this$ = ecx

; 924  : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 925  : 		_Mid1 = _First1, _Mid2 = _First2;

  00003	8b 4d 14	 mov	 ecx, DWORD PTR __Mid1$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __First1$[ebp]
  00009	89 01		 mov	 DWORD PTR [ecx], eax
  0000b	8b 4d 20	 mov	 ecx, DWORD PTR __Mid2$[ebp]
  0000e	8b 45 18	 mov	 eax, DWORD PTR __First2$[ebp]
  00011	89 01		 mov	 DWORD PTR [ecx], eax

; 926  : 		if (is_same<_Byte, _Elem>::value)
; 927  : 			return (noconv);	// convert nothing

  00013	b8 03 00 00 00	 mov	 eax, 3

; 928  : 		else
; 929  : 			{	// types differ, copy one for one
; 930  : 			for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
; 931  : 				*_Mid2 = (_Elem)*_Mid1;
; 932  : 			return (ok);
; 933  : 			}
; 934  : 		}

  00018	5d		 pop	 ebp
  00019	c2 1c 00	 ret	 28			; 0000001cH
?do_in@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z ENDP ; std::codecvt<char,char,int>::do_in
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_out@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
__Last2$ = 28						; size = 4
__Mid2$ = 32						; size = 4
?do_out@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z PROC ; std::codecvt<char,char,int>::do_out, COMDAT
; _this$ = ecx

; 939  : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 940  : 		_Mid1 = _First1, _Mid2 = _First2;

  00003	8b 4d 14	 mov	 ecx, DWORD PTR __Mid1$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __First1$[ebp]
  00009	89 01		 mov	 DWORD PTR [ecx], eax
  0000b	8b 4d 20	 mov	 ecx, DWORD PTR __Mid2$[ebp]
  0000e	8b 45 18	 mov	 eax, DWORD PTR __First2$[ebp]
  00011	89 01		 mov	 DWORD PTR [ecx], eax

; 941  : 		if (is_same<_Byte, _Elem>::value)
; 942  : 			return (noconv);	// convert nothing

  00013	b8 03 00 00 00	 mov	 eax, 3

; 943  : 		else
; 944  : 			{	// types differ, copy one for one
; 945  : 			for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
; 946  : 				*_Mid2 = (_Byte)*_Mid1;
; 947  : 			return (ok);
; 948  : 			}
; 949  : 		}

  00018	5d		 pop	 ebp
  00019	c2 1c 00	 ret	 28			; 0000001cH
?do_out@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z ENDP ; std::codecvt<char,char,int>::do_out
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_unshift@?$codecvt@DDH@std@@MBEHAAHPAD1AAPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__First2$ = 12						; size = 4
___formal$ = 16						; size = 4
__Mid2$ = 20						; size = 4
?do_unshift@?$codecvt@DDH@std@@MBEHAAHPAD1AAPAD@Z PROC	; std::codecvt<char,char,int>::do_unshift, COMDAT
; _this$ = ecx

; 953  : 		{	// generate bytes to return to default shift state

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 954  : 		_Mid2 = _First2;

  00003	8b 4d 14	 mov	 ecx, DWORD PTR __Mid2$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __First2$[ebp]
  00009	89 01		 mov	 DWORD PTR [ecx], eax

; 955  : 		return (ok);	// convert nothing

  0000b	33 c0		 xor	 eax, eax

; 956  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 10 00	 ret	 16			; 00000010H
?do_unshift@?$codecvt@DDH@std@@MBEHAAHPAD1AAPAD@Z ENDP	; std::codecvt<char,char,int>::do_unshift
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_length@?$codecvt@DDH@std@@MBEHAAHPBD1I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Count$ = 20						; size = 4
?do_length@?$codecvt@DDH@std@@MBEHAAHPBD1I@Z PROC	; std::codecvt<char,char,int>::do_length, COMDAT
; _this$ = ecx

; 960  : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 961  : 		return ((int)(_Count < (size_t)(_Last1 - _First1)
; 962  : 			? _Count : _Last1 - _First1));	// assume 1-to-1 conversion

  00003	8b 45 10	 mov	 eax, DWORD PTR __Last1$[ebp]
  00006	2b 45 0c	 sub	 eax, DWORD PTR __First1$[ebp]
  00009	39 45 14	 cmp	 DWORD PTR __Count$[ebp], eax
  0000c	0f 42 45 14	 cmovb	 eax, DWORD PTR __Count$[ebp]

; 963  : 		}

  00010	5d		 pop	 ebp
  00011	c2 10 00	 ret	 16			; 00000010H
?do_length@?$codecvt@DDH@std@@MBEHAAHPBD1I@Z ENDP	; std::codecvt<char,char,int>::do_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ
_TEXT	SEGMENT
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 335  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 336  : 		}

  00002	c3		 ret	 0
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT
; _this$dead$ = ecx
  00000	c3		 ret	 0
??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT
; _this$dead$ = ecx
  00000	c3		 ret	 0
??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Lock$1 = 8						; size = 4
___that$ = 8						; size = 4
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00007	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]

; 118  : 		{	// copy an iterator

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00017	8b 07		 mov	 eax, DWORD PTR [edi]
  00019	85 c0		 test	 eax, eax
  0001b	74 2a		 je	 SHORT $LN12@Deque_cons

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  0001d	8b 00		 mov	 eax, DWORD PTR [eax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  0001f	85 c0		 test	 eax, eax
  00021	75 20		 jne	 SHORT $LN13@Deque_cons

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00023	6a 03		 push	 3
  00025	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00028	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  0002d	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00030	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00035	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00038	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003b	5f		 pop	 edi
  0003c	8b c6		 mov	 eax, esi
  0003e	5e		 pop	 esi
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
$LN13@Deque_cons:

; 151  : 		else
; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  00043	8b 00		 mov	 eax, DWORD PTR [eax]
  00045	89 06		 mov	 DWORD PTR [esi], eax
$LN12@Deque_cons:
  00047	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0004a	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004d	5f		 pop	 edi
  0004e	8b c6		 mov	 eax, esi
  00050	5e		 pop	 esi
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QAE@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::~_Deque_val<std::_Deque_simple_types<geom::Matrix> >, COMDAT
; _this$dead$ = ecx
  00000	c3		 ret	 0
??1?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::~_Deque_val<std::_Deque_simple_types<geom::Matrix> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet
;	COMDAT ??_G?$codecvt@DDH@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$codecvt@DDH@std@@MAEPAXI@Z PROC			; std::codecvt<char,char,int>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 24   : 		{	// ensure that derived classes can be destroyed properly

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 09		 je	 SHORT $LN12@scalar
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$LN12@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??_G?$codecvt@DDH@std@@MAEPAXI@Z ENDP			; std::codecvt<char,char,int>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1148 : 		{	// assign _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1149 : 		if (_Count == npos)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	83 ff ff	 cmp	 edi, -1
  0000d	0f 84 9e 00 00
	00		 je	 $LN106@assign

; 2219 : 		}
; 2220 : 
; 2221 : 	bool _Grow(size_type _Newsize,
; 2222 : 		bool _Trim = false)
; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2224 : 		if (max_size() < _Newsize)

  00013	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00016	0f 87 9f 00 00
	00		 ja	 $LN108@assign

; 2225 : 			_Xlen();	// result too long
; 2226 : 		if (this->_Myres < _Newsize)

  0001c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001f	3b c7		 cmp	 eax, edi
  00021	73 21		 jae	 SHORT $LN12@assign

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  00023	ff 76 10	 push	 DWORD PTR [esi+16]
  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2232 : 			_Eos(0);	// new size is zero, just null terminate
; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

  0002c	85 ff		 test	 edi, edi

; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))

  0002e	74 79		 je	 SHORT $LN101@assign
$LN105@assign:

; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)

  00030	83 ff 01	 cmp	 edi, 1
  00033	75 3c		 jne	 SHORT $LN74@assign

; 517  : 			: this->_Bx._Buf);

  00035	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00039	72 2d		 jb	 SHORT $LN79@assign
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  0003d	8a 45 0c	 mov	 al, BYTE PTR __Ch$[ebp]
  00040	88 01		 mov	 BYTE PTR [ecx], al
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2177 : 		else

  00042	eb 48		 jmp	 SHORT $LN91@assign
$LN12@assign:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
; 2231 : 		else if (_Newsize == 0)

  00044	85 ff		 test	 edi, edi
  00046	75 e8		 jne	 SHORT $LN105@assign

; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00048	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 517  : 			: this->_Bx._Buf);

  0004b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004e	72 0d		 jb	 SHORT $LN67@assign
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00050	8b 06		 mov	 eax, DWORD PTR [esi]
  00052	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00053	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1157 : 		return (*this);

  00056	8b c6		 mov	 eax, esi
  00058	5e		 pop	 esi

; 1158 : 		}

  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
$LN67@assign:

; 517  : 			: this->_Bx._Buf);

  0005d	8b c6		 mov	 eax, esi
  0005f	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00060	c6 00 00	 mov	 BYTE PTR [eax], 0
  00063	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1158 : 		}

  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
$LN79@assign:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00068	8a 45 0c	 mov	 al, BYTE PTR __Ch$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  0006b	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  0006d	88 01		 mov	 BYTE PTR [ecx], al
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2177 : 		else

  0006f	eb 1b		 jmp	 SHORT $LN91@assign
$LN74@assign:

; 517  : 			: this->_Bx._Buf);

  00071	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00075	72 04		 jb	 SHORT $LN87@assign
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00077	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  00079	eb 02		 jmp	 SHORT $LN88@assign
$LN87@assign:
  0007b	8b ce		 mov	 ecx, esi
$LN88@assign:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 559  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  0007d	0f be 45 0c	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00081	57		 push	 edi
  00082	50		 push	 eax
  00083	51		 push	 ecx
  00084	e8 00 00 00 00	 call	 _memset
  00089	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN91@assign:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  0008c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00090	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 517  : 			: this->_Bx._Buf);

  00093	72 0e		 jb	 SHORT $LN97@assign
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00095	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00097	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  0009b	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1157 : 		return (*this);

  0009c	8b c6		 mov	 eax, esi
  0009e	5e		 pop	 esi

; 1158 : 		}

  0009f	5d		 pop	 ebp
  000a0	c2 08 00	 ret	 8
$LN97@assign:

; 517  : 			: this->_Bx._Buf);

  000a3	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  000a5	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN101@assign:
  000a9	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1157 : 		return (*this);

  000aa	8b c6		 mov	 eax, esi
  000ac	5e		 pop	 esi

; 1158 : 		}

  000ad	5d		 pop	 ebp
  000ae	c2 08 00	 ret	 8
$LN106@assign:

; 2234 : 		}
; 2235 : 
; 2236 : 	bool _Inside(const _Elem *_Ptr)
; 2237 : 		{	// test if _Ptr points inside string
; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)
; 2240 : 			return (false);	// don't ask
; 2241 : 		else
; 2242 : 			return (true);
; 2243 : 		}
; 2244 : 
; 2245 : 	static size_type _Pdif(const_iterator _P2,
; 2246 : 		const_iterator _P1)
; 2247 : 		{	// compute safe iterator difference
; 2248 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);
; 2249 : 		}
; 2250 : 
; 2251 : 	void _Tidy(bool _Built = false,
; 2252 : 		size_type _Newsize = 0)
; 2253 : 		{	// initialize buffer, deallocating any storage
; 2254 : 		if (!_Built)
; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)
; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;
; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2260 : 			if (0 < _Newsize)
; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);
; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;
; 2266 : 		_Eos(_Newsize);
; 2267 : 		}
; 2268 : 
; 2269 : 	__declspec(noreturn) void _Xlen() const
; 2270 : 		{	// report a length_error
; 2271 : 		_Xlength_error("string too long");

  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000b6	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN109@assign:
$LN108@assign:
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000c0	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN110@assign:
$LN103@assign:
  000c5	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2175 : 		if (_Count == 1)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b d1		 mov	 edx, ecx
  00008	83 f8 01	 cmp	 eax, 1
  0000b	75 15		 jne	 SHORT $LN2@Chassign

; 517  : 			: this->_Bx._Buf);

  0000d	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  00011	72 02		 jb	 SHORT $LN8@Chassign
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00013	8b 12		 mov	 edx, DWORD PTR [edx]
$LN8@Chassign:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00015	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00018	8a 4d 10	 mov	 cl, BYTE PTR __Ch$[ebp]
  0001b	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2179 : 		}

  0001e	5d		 pop	 ebp
  0001f	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Chassign:

; 517  : 			: this->_Bx._Buf);

  00022	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  00026	72 02		 jb	 SHORT $LN16@Chassign
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00028	8b 12		 mov	 edx, DWORD PTR [edx]
$LN16@Chassign:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 559  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  0002a	50		 push	 eax
  0002b	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  0002f	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);

  00030	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00033	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 559  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _memset
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2179 : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 0c 00	 ret	 12			; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 972  : 		return (this->_Myend - this->_Mylast);

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 02	 sar	 edx, 2
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx

; 973  : 		}

  00017	c3		 ret	 0
?_Unused_capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IBEII@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1484 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 967  : 		return (this->_Myend - this->_Myfirst);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	2b 11		 sub	 edx, DWORD PTR [ecx]
  00008	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000d	f7 ea		 imul	 edx
  0000f	c1 fa 02	 sar	 edx, 2
  00012	56		 push	 esi
  00013	8b f2		 mov	 esi, edx
  00015	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00018	03 f2		 add	 esi, edx

; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0001a	8b ce		 mov	 ecx, esi
  0001c	d1 e9		 shr	 ecx, 1
  0001e	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH
  00023	2b c1		 sub	 eax, ecx
  00025	3b c6		 cmp	 eax, esi
  00027	73 10		 jae	 SHORT $LN4@Grow_to
  00029	33 f6		 xor	 esi, esi

; 1489 : 		if (_Capacity < _Count)

  0002b	3b 75 08	 cmp	 esi, DWORD PTR __Count$[ebp]
  0002e	0f 42 75 08	 cmovb	 esi, DWORD PTR __Count$[ebp]

; 1490 : 			_Capacity = _Count;
; 1491 : 		return (_Capacity);

  00032	8b c6		 mov	 eax, esi
  00034	5e		 pop	 esi

; 1492 : 		}

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
$LN4@Grow_to:

; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00039	03 f1		 add	 esi, ecx

; 1489 : 		if (_Capacity < _Count)

  0003b	3b 75 08	 cmp	 esi, DWORD PTR __Count$[ebp]
  0003e	0f 42 75 08	 cmovb	 esi, DWORD PTR __Count$[ebp]

; 1490 : 			_Capacity = _Count;
; 1491 : 		return (_Capacity);

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi

; 1492 : 		}

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?_Grow_to@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IBEII@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >, COMDAT
; _this$ = ecx

; 831  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEPAVVertexUVRGBA@gfxu@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEPAVVertexUVRGBA@gfxu@@I@Z PROC ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::allocate, COMDAT
; _this$dead$ = ecx

; 875  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1c		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00011	77 1b		 ja	 SHORT $LN14@allocate
  00013	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00016	c1 e0 03	 shl	 eax, 3
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001f	8b c8		 mov	 ecx, eax
  00021	83 c4 04	 add	 esp, 4
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 876  : 		return (_Mybase::allocate(_Count));

  00028	8b c1		 mov	 eax, ecx

; 877  : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002e	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00033	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEPAVVertexUVRGBA@gfxu@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$dead$ = 12					; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@I@Z PROC ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::deallocate, COMDAT
; _this$dead$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 586  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 887  : 		_Mybase::deallocate(_Ptr, _Count);
; 888  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::max_size, COMDAT
; _this$dead$ = ecx

; 914  : 		return (_Mytraits::max_size(*this));

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 915  : 		}

  00005	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@VVertexUVRGBA@gfxu@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@VVertexUVRGBA@gfxu@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<gfxu::VertexUVRGBA> >::_Vector_val<std::_Simple_types<gfxu::VertexUVRGBA> >, COMDAT
; _this$ = ecx

; 485  : 		{	// initialize values
; 486  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 487  : 		_Mylast = pointer();

  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 488  : 		_Myend = pointer();

  0000d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 489  : 		}

  00014	8b c1		 mov	 eax, ecx
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@VVertexUVRGBA@gfxu@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<gfxu::VertexUVRGBA> >::_Vector_val<std::_Simple_types<gfxu::VertexUVRGBA> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\wchar.h
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2234 : 		}
; 2235 : 
; 2236 : 	bool _Inside(const _Elem *_Ptr)
; 2237 : 		{	// test if _Ptr points inside string
; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

  00008	8b f1		 mov	 esi, ecx

; 2234 : 		}
; 2235 : 
; 2236 : 	bool _Inside(const _Elem *_Ptr)
; 2237 : 		{	// test if _Ptr points inside string
; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

  0000a	85 db		 test	 ebx, ebx
  0000c	74 48		 je	 SHORT $LN2@assign

; 517  : 			: this->_Bx._Buf);

  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	83 f9 08	 cmp	 ecx, 8
  00014	72 04		 jb	 SHORT $LN12@assign
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  00018	eb 02		 jmp	 SHORT $LN13@assign
$LN12@assign:
  0001a	8b c6		 mov	 eax, esi
$LN13@assign:

; 2234 : 		}
; 2235 : 
; 2236 : 	bool _Inside(const _Elem *_Ptr)
; 2237 : 		{	// test if _Ptr points inside string
; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

  0001c	3b d8		 cmp	 ebx, eax
  0001e	72 36		 jb	 SHORT $LN2@assign

; 517  : 			: this->_Bx._Buf);

  00020	83 f9 08	 cmp	 ecx, 8
  00023	72 04		 jb	 SHORT $LN18@assign
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00025	8b 16		 mov	 edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  00027	eb 02		 jmp	 SHORT $LN19@assign
$LN18@assign:
  00029	8b d6		 mov	 edx, esi
$LN19@assign:

; 2234 : 		}
; 2235 : 
; 2236 : 	bool _Inside(const _Elem *_Ptr)
; 2237 : 		{	// test if _Ptr points inside string
; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

  0002b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002e	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00031	3b c3		 cmp	 eax, ebx
  00033	76 21		 jbe	 SHORT $LN2@assign

; 517  : 			: this->_Bx._Buf);

  00035	83 f9 08	 cmp	 ecx, 8
  00038	72 04		 jb	 SHORT $LN24@assign
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  0003a	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  0003c	eb 02		 jmp	 SHORT $LN25@assign
$LN24@assign:
  0003e	8b c6		 mov	 eax, esi
$LN25@assign:

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

  00040	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00043	2b d8		 sub	 ebx, eax
  00045	d1 fb		 sar	 ebx, 1
  00047	53		 push	 ebx
  00048	56		 push	 esi
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx

; 1139 : 		}

  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN2@assign:
  00056	57		 push	 edi

; 2219 : 		}
; 2220 : 
; 2221 : 	bool _Grow(size_type _Newsize,
; 2222 : 		bool _Trim = false)
; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2224 : 		if (max_size() < _Newsize)

  00057	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0005a	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00060	0f 87 89 00 00
	00		 ja	 $LN122@assign

; 2225 : 			_Xlen();	// result too long
; 2226 : 		if (this->_Myres < _Newsize)

  00066	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00069	3b c7		 cmp	 eax, edi
  0006b	73 19		 jae	 SHORT $LN32@assign

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  0006d	ff 76 10	 push	 DWORD PTR [esi+16]
  00070	8b ce		 mov	 ecx, esi
  00072	57		 push	 edi
  00073	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy

; 2232 : 			_Eos(0);	// new size is zero, just null terminate
; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

  00078	85 ff		 test	 edi, edi

; 1132 : 
; 1133 : 		if (_Grow(_Count))

  0007a	74 6a		 je	 SHORT $LN116@assign
$LN121@assign:

; 517  : 			: this->_Bx._Buf);

  0007c	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8
  00080	72 2e		 jb	 SHORT $LN98@assign
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00082	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  00084	eb 2c		 jmp	 SHORT $LN99@assign
$LN32@assign:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
; 2231 : 		else if (_Newsize == 0)

  00086	85 ff		 test	 edi, edi
  00088	75 f2		 jne	 SHORT $LN121@assign

; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  0008a	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 517  : 			: this->_Bx._Buf);

  0008d	83 f8 08	 cmp	 eax, 8
  00090	72 10		 jb	 SHORT $LN89@assign
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00092	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00094	33 c9		 xor	 ecx, ecx
  00096	5f		 pop	 edi
  00097	66 89 08	 mov	 WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1138 : 		return (*this);

  0009a	8b c6		 mov	 eax, esi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx

; 1139 : 		}

  0009e	5d		 pop	 ebp
  0009f	c2 08 00	 ret	 8
$LN89@assign:
  000a2	5f		 pop	 edi

; 517  : 			: this->_Bx._Buf);

  000a3	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  000a5	33 c9		 xor	 ecx, ecx
  000a7	5e		 pop	 esi
  000a8	66 89 08	 mov	 WORD PTR [eax], cx
  000ab	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1139 : 		}

  000ac	5d		 pop	 ebp
  000ad	c2 08 00	 ret	 8
$LN98@assign:

; 517  : 			: this->_Bx._Buf);

  000b0	8b ce		 mov	 ecx, esi
$LN99@assign:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 313  : 			: (_Elem *)_CSTD wmemcpy(_First1, _First2, _Count));

  000b2	85 ff		 test	 edi, edi
  000b4	74 0e		 je	 SHORT $LN105@assign
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\wchar.h

; 1257 :             return (wchar_t *)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000b6	8d 04 3f	 lea	 eax, DWORD PTR [edi+edi]
  000b9	50		 push	 eax
  000ba	53		 push	 ebx
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 _memcpy
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN105@assign:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  000c4	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8

; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  000c8	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 517  : 			: this->_Bx._Buf);

  000cb	72 11		 jb	 SHORT $LN112@assign
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  000cd	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  000cf	33 c9		 xor	 ecx, ecx
  000d1	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
  000d5	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1138 : 		return (*this);

  000d6	8b c6		 mov	 eax, esi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx

; 1139 : 		}

  000da	5d		 pop	 ebp
  000db	c2 08 00	 ret	 8
$LN112@assign:

; 517  : 			: this->_Bx._Buf);

  000de	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  000e0	33 c9		 xor	 ecx, ecx
  000e2	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN116@assign:
  000e6	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1138 : 		return (*this);

  000e7	8b c6		 mov	 eax, esi
  000e9	5e		 pop	 esi
  000ea	5b		 pop	 ebx

; 1139 : 		}

  000eb	5d		 pop	 ebp
  000ec	c2 08 00	 ret	 8
$LN122@assign:

; 2240 : 			return (false);	// don't ask
; 2241 : 		else
; 2242 : 			return (true);
; 2243 : 		}
; 2244 : 
; 2245 : 	static size_type _Pdif(const_iterator _P2,
; 2246 : 		const_iterator _P1)
; 2247 : 		{	// compute safe iterator difference
; 2248 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);
; 2249 : 		}
; 2250 : 
; 2251 : 	void _Tidy(bool _Built = false,
; 2252 : 		size_type _Newsize = 0)
; 2253 : 		{	// initialize buffer, deallocating any storage
; 2254 : 		if (!_Built)
; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)
; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;
; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2260 : 			if (0 < _Newsize)
; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);
; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;
; 2266 : 		_Eos(_Newsize);
; 2267 : 		}
; 2268 : 
; 2269 : 	__declspec(noreturn) void _Xlen() const
; 2270 : 		{	// report a length_error
; 2271 : 		_Xlength_error("string too long");

  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000f4	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN124@assign:
$LN119@assign:
  000f9	cc		 int	 3
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin, COMDAT
; _this$ = ecx

; 1259 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 113  : 		{	// construct orphaned iterator

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1260 : 		return (iterator(this->_Myoff, this));

  00006	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 113  : 		{	// construct orphaned iterator

  0000b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 166  : 			_Myproxy = _Parent_proxy;

  00012	89 08		 mov	 DWORD PTR [eax], ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 306  : 		_Myoff = _Off;

  00014	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1261 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBE?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBE?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin, COMDAT
; _this$ = ecx

; 1264 : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 113  : 		{	// construct orphaned iterator

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1265 : 		return (const_iterator(this->_Myoff, this));

  00006	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 113  : 		{	// construct orphaned iterator

  0000b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 166  : 			_Myproxy = _Parent_proxy;

  00012	89 08		 mov	 DWORD PTR [eax], ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 306  : 		_Myoff = _Off;

  00014	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1266 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBE?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end, COMDAT
; _this$ = ecx

; 1269 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 		return (iterator(this->_Myoff + this->_Mysize, this));

  00003	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 113  : 		{	// construct orphaned iterator

  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1270 : 		return (iterator(this->_Myoff + this->_Mysize, this));

  00009	03 51 0c	 add	 edx, DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 113  : 		{	// construct orphaned iterator

  0000e	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 166  : 			_Myproxy = _Parent_proxy;

  00015	89 08		 mov	 DWORD PTR [eax], ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 306  : 		_Myoff = _Off;

  00017	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1271 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBE?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBE?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end, COMDAT
; _this$ = ecx

; 1274 : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1275 : 		return (const_iterator(this->_Myoff + this->_Mysize, this));

  00003	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 113  : 		{	// construct orphaned iterator

  00006	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1275 : 		return (const_iterator(this->_Myoff + this->_Mysize, this));

  00009	03 51 0c	 add	 edx, DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 113  : 		{	// construct orphaned iterator

  0000e	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 166  : 			_Myproxy = _Parent_proxy;

  00015	89 08		 mov	 DWORD PTR [eax], ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 306  : 		_Myoff = _Off;

  00017	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1276 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBE?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
tv523 = -16						; size = 4
__Myptr$1$ = -12					; size = 4
__Myboff$1$ = -8					; size = 4
__Ptr$1$ = -4						; size = 4
__Count$dead$ = 8					; size = 4
?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXI@Z PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Growmap, COMDAT
; _this$ = ecx

; 1802 : 		{	// grow map by at least _Count pointers, _Mapsize a power of 2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi

; 1803 : 		static_assert(1 < _DEQUEMAPSIZ,
; 1804 : 			"The _Xlen() test should always be performed.");
; 1805 : 
; 1806 : 		typedef typename _Alpty::pointer _Blockptr;
; 1807 : 		_Alpty _Almap(this->_Getal());
; 1808 : 		size_type _Newsize = 0 < this->_Mapsize ? this->_Mapsize : 1;

  0000a	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  0000d	be 01 00 00 00	 mov	 esi, 1
  00012	85 d2		 test	 edx, edx
  00014	0f 45 f2	 cmovne	 esi, edx
$LL7@Growmap:

; 1809 : 		while (_Newsize - this->_Mapsize < _Count || _Newsize < _DEQUEMAPSIZ)

  00017	8b c6		 mov	 eax, esi
  00019	2b c2		 sub	 eax, edx
  0001b	83 f8 01	 cmp	 eax, 1
  0001e	72 05		 jb	 SHORT $LN5@Growmap
  00020	83 fe 08	 cmp	 esi, 8
  00023	73 13		 jae	 SHORT $LN6@Growmap
$LN5@Growmap:

; 1810 : 			{	// scale _Newsize to 2^N >= _Mapsize + _Count
; 1811 : 			if (max_size() / _DEQUESIZ - _Newsize < _Newsize)

  00025	b8 ff ff ff 03	 mov	 eax, 67108863		; 03ffffffH
  0002a	2b c6		 sub	 eax, esi
  0002c	3b c6		 cmp	 eax, esi
  0002e	0f 82 30 01 00
	00		 jb	 $LN111@Growmap

; 1812 : 				_Xlen();	// result too long
; 1813 : 			_Newsize *= 2;

  00034	03 f6		 add	 esi, esi

; 1814 : 			}

  00036	eb df		 jmp	 SHORT $LL7@Growmap
$LN6@Growmap:

; 1815 : 		_Count = _Newsize - this->_Mapsize;

  00038	2b f2		 sub	 esi, edx
  0003a	57		 push	 edi

; 1816 : 
; 1817 : 		size_type _Myboff = this->_Myoff / _DEQUESIZ;

  0003b	8b 7b 0c	 mov	 edi, DWORD PTR [ebx+12]

; 1818 : 		_Mapptr _Newmap = _Almap.allocate(this->_Mapsize + _Count);

  0003e	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  00041	89 7d f8	 mov	 DWORD PTR __Myboff$1$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 23   : 	void *_Ptr = 0;

  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$1$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

  0004b	85 c0		 test	 eax, eax
  0004d	74 22		 je	 SHORT $LN32@Growmap

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0004f	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00054	0f 87 05 01 00
	00		 ja	 $LN130@Growmap
  0005a	c1 e0 02	 shl	 eax, 2
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00063	83 c4 04	 add	 esp, 4
  00066	89 45 fc	 mov	 DWORD PTR __Ptr$1$[ebp], eax
  00069	85 c0		 test	 eax, eax
  0006b	0f 84 ee 00 00
	00		 je	 $LN130@Growmap
$LN32@Growmap:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1823 : 			_Myptr, _Almap);	// copy initial to end

  00071	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00074	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00077	c1 e0 02	 shl	 eax, 2
  0007a	8d 14 b9	 lea	 edx, DWORD PTR [ecx+edi*4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  0007d	2b c2		 sub	 eax, edx
  0007f	03 c1		 add	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1819 : 		_Mapptr _Myptr = _Newmap + _Myboff;

  00081	8b 4d f8	 mov	 ecx, DWORD PTR __Myboff$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00084	c1 f8 02	 sar	 eax, 2

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00087	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1819 : 		_Mapptr _Myptr = _Newmap + _Myboff;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00091	57		 push	 edi
  00092	52		 push	 edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1819 : 		_Mapptr _Myptr = _Newmap + _Myboff;

  00093	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1824 : 		if (_Myboff <= _Count)

  0009c	8b 4d f8	 mov	 ecx, DWORD PTR __Myboff$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0009f	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a2	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  000a5	89 55 f4	 mov	 DWORD PTR __Myptr$1$[ebp], edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1824 : 		if (_Myboff <= _Count)

  000a8	3b ce		 cmp	 ecx, esi
  000aa	77 43		 ja	 SHORT $LN3@Growmap

; 1828 : 				_Myptr, _Almap);	// copy rest of old

  000ac	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  000af	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1830 : 				_Almap);	// clear suffix of new

  000b6	8b fe		 mov	 edi, esi
  000b8	2b f9		 sub	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  000ba	c1 f8 02	 sar	 eax, 2
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1830 : 				_Almap);	// clear suffix of new

  000bd	89 7d f0	 mov	 DWORD PTR tv523[ebp], edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000c0	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  000c7	57		 push	 edi
  000c8	52		 push	 edx
  000c9	ff 75 f4	 push	 DWORD PTR __Myptr$1$[ebp]
  000cc	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2678 : 	for (; 0 < _Count; --_Count, ++_Dest)

  000d1	8b 4d f0	 mov	 ecx, DWORD PTR tv523[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	03 f8		 add	 edi, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2678 : 	for (; 0 < _Count; --_Count, ++_Dest)

  000d9	85 c9		 test	 ecx, ecx
  000db	74 04		 je	 SHORT $LN61@Growmap
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1828 : 				_Myptr, _Almap);	// copy rest of old

  000dd	33 c0		 xor	 eax, eax
  000df	f3 ab		 rep stosd
$LN61@Growmap:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2678 : 	for (; 0 < _Count; --_Count, ++_Dest)

  000e1	8b 45 f8	 mov	 eax, DWORD PTR __Myboff$1$[ebp]
  000e4	85 c0		 test	 eax, eax
  000e6	74 55		 je	 SHORT $LN99@Growmap
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 660  : 	_Fill_n(_First, _Count, (_Valty)0);

  000e8	8b 7d fc	 mov	 edi, DWORD PTR __Ptr$1$[ebp]
  000eb	8b c8		 mov	 ecx, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1834 : 		else

  000ed	eb 4a		 jmp	 SHORT $LN129@Growmap
$LN3@Growmap:

; 1838 : 				_Myptr, _Almap);	// copy more old

  000ef	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000f2	8d 3c b5 00 00
	00 00		 lea	 edi, DWORD PTR [esi*4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000f9	8b c7		 mov	 eax, edi
  000fb	83 e0 fc	 and	 eax, -4			; fffffffcH
  000fe	50		 push	 eax
  000ff	51		 push	 ecx
  00100	52		 push	 edx
  00101	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1841 : 				_Newmap, _Almap);	// copy rest of old

  00106	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00109	8d 0c 07	 lea	 ecx, DWORD PTR [edi+eax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  0010c	8b 7d f8	 mov	 edi, DWORD PTR __Myboff$1$[ebp]
  0010f	8d 14 bd 00 00
	00 00		 lea	 edx, DWORD PTR [edi*4]
  00116	2b d1		 sub	 edx, ecx
  00118	03 d0		 add	 edx, eax
  0011a	c1 fa 02	 sar	 edx, 2

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0011d	8d 3c 95 00 00
	00 00		 lea	 edi, DWORD PTR [edx*4]
  00124	57		 push	 edi
  00125	51		 push	 ecx
  00126	ff 75 fc	 push	 DWORD PTR __Ptr$1$[ebp]
  00129	e8 00 00 00 00	 call	 _memmove
  0012e	83 c4 18	 add	 esp, 24			; 00000018H
  00131	03 f8		 add	 edi, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2678 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00133	85 f6		 test	 esi, esi
  00135	74 06		 je	 SHORT $LN99@Growmap
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1838 : 				_Myptr, _Almap);	// copy more old

  00137	8b ce		 mov	 ecx, esi
$LN129@Growmap:
  00139	33 c0		 xor	 eax, eax
  0013b	f3 ab		 rep stosd
$LN99@Growmap:

; 1842 : 			_Uninitialized_default_fill_n(_Myptr, _Count,
; 1843 : 				_Almap);	// clear rest to initial block
; 1844 : 			}
; 1845 : 
; 1846 : 		_Destroy_range(this->_Map + _Myboff, this->_Map + this->_Mapsize,
; 1847 : 			_Almap);
; 1848 : 		if (this->_Map != _Mapptr())

  0013d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00140	5f		 pop	 edi
  00141	85 c0		 test	 eax, eax
  00143	74 09		 je	 SHORT $LN104@Growmap
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0014b	83 c4 04	 add	 esp, 4
$LN104@Growmap:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1853 : 		this->_Mapsize += _Count;

  0014e	01 73 08	 add	 DWORD PTR [ebx+8], esi
  00151	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$1$[ebp]
  00154	5e		 pop	 esi
  00155	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00158	5b		 pop	 ebx

; 1854 : 		}

  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c2 04 00	 ret	 4
$LN130@Growmap:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0015f	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN132@Growmap:
$LN111@Growmap:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1793 : 		_Xlength_error("deque<T> too long");

  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
  00169	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN133@Growmap:
$LN128@Growmap:
  0016e	cc		 int	 3
?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXI@Z ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@VMatrix@geom@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@VMatrix@geom@@@std@@QAE@XZ PROC		; std::allocator<geom::Matrix>::allocator<geom::Matrix>, COMDAT
; _this$ = ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@VMatrix@geom@@@std@@QAE@XZ ENDP		; std::allocator<geom::Matrix>::allocator<geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??0?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV?$allocator@VMatrix@geom@@@1@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
??0?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV?$allocator@VMatrix@geom@@@1@@Z PROC ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >, COMDAT
; _this$ = ecx

; 877  : 	_Deque_alloc(const _Alloc& = _Alloc())

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00003	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 79   : 		{	// construct childless container

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 778  : 		_Map = _Mapptr();

  0000b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 779  : 		_Mapsize = 0;

  00012	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 780  : 		_Myoff = 0;

  00019	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 781  : 		_Mysize = 0;

  00020	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	83 c4 04	 add	 esp, 4
  0002f	85 c0		 test	 eax, eax
  00031	74 19		 je	 SHORT $LN42@Deque_allo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 900  : 		this->_Myproxy = _Alproxy.allocate(1);

  00033	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0003b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 902  : 		this->_Myproxy->_Mycont = this;

  00042	8b 06		 mov	 eax, DWORD PTR [esi]
  00044	89 30		 mov	 DWORD PTR [eax], esi

; 880  : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	c2 04 00	 ret	 4
$LN42@Deque_allo:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0004c	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN44@Deque_allo:
$LN41@Deque_allo:
  00051	cc		 int	 3
??0?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV?$allocator@VMatrix@geom@@@1@@Z ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 906  : 		{	// destroy proxy

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00003	ff 36		 push	 DWORD PTR [esi]
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 912  : 		this->_Myproxy = 0;

  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00013	5e		 pop	 esi

; 913  : 		}

  00014	c3		 ret	 0
?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@2@XZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Getal, COMDAT
; _this$dead$ = ecx

; 916  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 917  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 918  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@2@XZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QBE?AU12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QBE?AU12@XZ PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::select_on_container_copy_construction, COMDAT
; _this$dead$ = ecx

; 806  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 807  : 		return (_Mytraits::select_on_container_copy_construction(*this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 808  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QBE?AU12@XZ ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEPAVMatrix@geom@@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEPAVMatrix@geom@@I@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::allocate, COMDAT
; _this$dead$ = ecx

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00000	6a 40		 push	 64			; 00000040H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4
  0000a	85 c0		 test	 eax, eax
  0000c	74 03		 je	 SHORT $LN15@allocate

; 876  : 		return (_Mybase::allocate(_Count));
; 877  : 		}

  0000e	c2 04 00	 ret	 4
$LN15@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00011	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN17@allocate:
$LN14@allocate:
  00016	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEPAVMatrix@geom@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAVMatrix@geom@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$dead$ = 12					; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAVMatrix@geom@@I@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::deallocate, COMDAT
; _this$dead$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 586  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 887  : 		_Mybase::deallocate(_Ptr, _Count);
; 888  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAVMatrix@geom@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@QAEXPAPAVMatrix@geom@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$dead$ = 12					; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@QAEXPAPAVMatrix@geom@@I@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix *> >::deallocate, COMDAT
; _this$dead$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 586  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 887  : 		_Mybase::deallocate(_Ptr, _Count);
; 888  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@QAEXPAPAVMatrix@geom@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Getblock@?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QBEII@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Getblock@?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QBEII@Z PROC ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::_Getblock, COMDAT
; _this$ = ecx

; 785  : 		{	// determine block from offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 786  : 			// NB: _Mapsize and _DEQUESIZ are guaranteed to be powers of 2
; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	48		 dec	 eax
  00007	23 45 08	 and	 eax, DWORD PTR __Off$[ebp]

; 788  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Getblock@?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QBEII@Z ENDP ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::_Getblock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Byte$dead$ = 8					; size = 1
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z PROC ; std::basic_ios<char,std::char_traits<char> >::widen, COMDAT
; _this$ = ecx

; 134  : 		{	// convert _Byte to character using imbued locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 135  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  00024	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  0002d	50		 push	 eax
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00035	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  0003a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 422  : 		if (_Ptr != 0)

  00041	8b 4d f0	 mov	 ecx, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 135  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  00044	83 c4 04	 add	 esp, 4
  00047	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 422  : 		if (_Ptr != 0)

  00049	85 c9		 test	 ecx, ecx
  0004b	74 11		 je	 SHORT $LN7@widen

; 423  : 			_DELETE_CRT(_Ptr->_Decref());

  0004d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004f	ff 52 08	 call	 DWORD PTR [edx+8]
  00052	85 c0		 test	 eax, eax
  00054	74 08		 je	 SHORT $LN7@widen
  00056	8b 10		 mov	 edx, DWORD PTR [eax]
  00058	6a 01		 push	 1
  0005a	8b c8		 mov	 ecx, eax
  0005c	ff 12		 call	 DWORD PTR [edx]
$LN7@widen:

; 424  : 		}
; 425  : 
; 426  : 	locale& operator=(const locale& _Right) _THROW0()
; 427  : 		{	// assign a locale
; 428  : 		if (_Ptr != _Right._Ptr)
; 429  : 			{	// different implementation, point at new one
; 430  : 			_DELETE_CRT(_Ptr->_Decref());
; 431  : 			_Ptr = _Right._Ptr;
; 432  : 			_Ptr->_Incref();
; 433  : 			}
; 434  : 		return (*this);
; 435  : 		}
; 436  :  #endif /* _NO_LOCALES */
; 437  : 
; 438  : 	string name() const
; 439  : 		{	// return locale name
; 440  : 		return (_Ptr == 0 ? string() : _Ptr->_Name.c_str());
; 441  : 		}
; 442  : 
; 443  : 	const char *c_str() const
; 444  : 		{	// return locale name as NTBS
; 445  : 		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());
; 446  : 		}
; 447  : 
; 448  : 	const facet *_Getfacet(size_t _Id) const
; 449  : 		{	// look up a facet in locale object
; 450  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 451  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end
; 452  : 		if (_Facptr != 0 || !_Ptr->_Xparent)
; 453  : 			return (_Facptr);	// found facet or not transparent
; 454  : 		else
; 455  : 			{	// look in current locale
; 456  : 			locale::_Locimp *_Ptr = _Getgloballocale();
; 457  : 			return (_Id < _Ptr->_Facetcount
; 458  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 459  : 				: 0);	// no entry in current locale
; 460  : 			}
; 461  : 		}
; 462  : 
; 463  : 	bool operator==(const locale& _Loc) const
; 464  : 		{	// compare locales for equality
; 465  : 		return (_Ptr == _Loc._Ptr
; 466  : 			|| name().compare("*") != 0 && name().compare(_Loc.name()) == 0);
; 467  : 		}
; 468  : 
; 469  : 	bool operator!=(const locale& _Right) const
; 470  : 		{	// test for locale inequality
; 471  : 		return (!(*this == _Right));
; 472  : 		}
; 473  : 
; 474  : 	static _MRTIMP2_PURE const locale& __CLRCALL_PURE_OR_CDECL
; 475  : 		classic();	// classic "C" locale
; 476  : 
; 477  : 	static _MRTIMP2_PURE locale __CLRCALL_PURE_OR_CDECL
; 478  : 		global(const locale&);	// current locale
; 479  : 
; 480  : 	static _MRTIMP2_PURE locale __CLRCALL_PURE_OR_CDECL
; 481  : 		empty();	// empty (transparent) locale
; 482  : 
; 483  : private:
; 484  : 	locale(_Locimp *_Ptrimp)
; 485  : 		: _Ptr(_Ptrimp)
; 486  : 		{	// construct from _Locimp pointer
; 487  : 		}
; 488  : 
; 489  :     static _MRTIMP2_PURE _Locimp *__CLRCALL_PURE_OR_CDECL
; 490  : 		_Init(bool _Do_incref = false);	// initialize locale
; 491  : 	static _MRTIMP2_PURE _Locimp *__CLRCALL_PURE_OR_CDECL
; 492  : 		_Getgloballocale();
; 493  : 	static _MRTIMP2_PURE void __CLRCALL_PURE_OR_CDECL
; 494  : 		_Setgloballocale(void *);
; 495  : 
; 496  : 	bool _Badname(const _Locinfo& _Lobj)
; 497  : 		{	// test if name is "*"
; 498  : 		return (_CSTD strcmp(_Lobj._Getname(), "*") == 0);
; 499  : 		}
; 500  : 
; 501  : 	_Locimp *_Ptr;	// pointer to locale implementation object
; 502  : 	};
; 503  : 
; 504  : 		// SUPPORT TEMPLATES
; 505  : 
; 506  :  #if _NO_LOCALES
; 507  : inline _Locinfo& _Get_locinfo()
; 508  : 	{	// get reference to common locale info
; 509  : 	static _Locinfo _Lobj;
; 510  : 	return (_Lobj);
; 511  : 	}
; 512  : 
; 513  : template<class _Facet>
; 514  : 	class _Wrap_facet
; 515  : 		: public _Facet
; 516  : 	{	// makes a facet destructible and shareable
; 517  : public:
; 518  : 	_Wrap_facet()
; 519  : 		: _Facet(_Get_locinfo())
; 520  : 		{	// construct from locale object
; 521  : 		}
; 522  : 	};
; 523  :  #endif /* _NO_LOCALES */
; 524  : 
; 525  : template<class _Facet>
; 526  : 	struct _Facetptr
; 527  : 	{	// store pointer to lazy facet for use_facet
; 528  : 	__PURE_APPDOMAIN_GLOBAL static const locale::facet *_Psave;
; 529  : 	};
; 530  : 
; 531  : template<class _Facet>
; 532  : 	__PURE_APPDOMAIN_GLOBAL const locale::facet *_Facetptr<_Facet>::
; 533  : 		_Psave = 0;
; 534  : 
; 535  :   #define _ADDFAC(loc, pfac)	locale(loc, pfac)	/* add facet to locale */
; 536  : 
; 537  :   #define _USE(loc, fac)	\
; 538  : 	use_facet< fac >(loc)	/* get facet reference from locale */
; 539  : 
; 540  : template<class _Facet> inline
; 541  : 	const _Facet& __CRTDECL use_facet(const locale& _Loc)
; 542  : 
; 543  : 	{	// get facet reference from locale
; 544  :  #if _NO_LOCALES
; 545  : 	static _Wrap_facet<_Facet> _Wfac;
; 546  : 	return (*(_Facet *)&_Wfac);
; 547  : 
; 548  :  #else /* _NO_LOCALES */
; 549  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic
; 550  : 		const locale::facet *_Psave =
; 551  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet
; 552  : 
; 553  : 		size_t _Id = _Facet::id;
; 554  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);
; 555  : 
; 556  : 		if (_Pf != 0)
; 557  : 			;	// got facet from locale
; 558  : 		else if (_Psave != 0)
; 559  : 			_Pf = _Psave;	// lazy facet already allocated
; 560  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))
; 561  : 
; 562  :  #if _HAS_EXCEPTIONS
; 563  : 
; 564  : 			_THROW_NCEE(_XSTD bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed
; 565  : 
; 566  :  #else /* _HAS_EXCEPTIONS */
; 567  : 			abort();	// lazy disallowed
; 568  :  #endif /* _HAS_EXCEPTIONS */
; 569  : 
; 570  : 		else
; 571  : 			{	// queue up lazy facet for destruction
; 572  : 			_Pf = _Psave;
; 573  : 			_Facetptr<_Facet>::_Psave = _Psave;
; 574  : 
; 575  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 576  : 			_Pfmod->_Incref();
; 577  : 
; 578  :  #if defined(_M_CEE)
; 579  : 			_Facet_Register_m(_Pfmod);
; 580  : 
; 581  :  #else /* defined(_M_CEE) */
; 582  : 			_Facet_Register(_Pfmod);
; 583  :  #endif /* defined(_M_CEE) */
; 584  : 			}
; 585  : 
; 586  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast
; 587  : 	_END_LOCK()
; 588  :  #endif /* _NO_LOCALES */
; 589  : 	}	// end of use_facet body
; 590  : 
; 591  : 		// TEMPLATE FUNCTION _Getloctxt
; 592  : template<class _Elem,
; 593  : 	class _InIt> inline
; 594  : 	int __CRTDECL _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
; 595  : 		const _Elem *_Ptr)
; 596  : 	{	// find field at _Ptr that matches longest in [_First, _Last)
; 597  : 	for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
; 598  : 		if (_Ptr[_Off] == _Ptr[0])
; 599  : 			++_Numfields;	// add fields with leading mark to initial count
; 600  : 	string _Str(_Numfields, '\0');	// one column counter for each field
; 601  : 
; 602  : 	int _Ans = -2;	// no candidates so far
; 603  : 	for (size_t _Column = 1; ; ++_Column, ++_First, _Ans = -1)
; 604  : 		{	// test each element against all viable fields
; 605  : 		bool _Prefix = false;	// seen at least one valid prefix
; 606  : 		size_t _Off = 0;	// offset into fields
; 607  : 		size_t _Field = 0;	// current field number
; 608  : 
; 609  : 		for (; _Field < _Numfields; ++_Field)
; 610  : 			{	// test element at _Column in field _Field
; 611  : 			for (; _Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0]; ++_Off)
; 612  : 				;	// find beginning of field
; 613  : 
; 614  : 			if (_Str[_Field] != '\0')
; 615  : 				_Off += _Str[_Field];	// skip tested columns in field
; 616  : 			else if (_Ptr[_Off += _Column] == _Ptr[0]
; 617  : 				|| _Ptr[_Off] == (_Elem)0)
; 618  : 				{	// matched all of field, save as possible answer
; 619  : 				_Str[_Field] = (char)(_Column < 127
; 620  : 					? _Column : 127);	// save skip count if small enough
; 621  : 				_Ans = (int)_Field;	// save answer
; 622  : 				}
; 623  : 			else if (_First == _Last || _Ptr[_Off] != *_First)
; 624  : 				_Str[_Field] = (char)(_Column < 127
; 625  : 					? _Column : 127);	// no match, just save skip count
; 626  : 			else
; 627  : 				_Prefix = true;	// still a valid prefix
; 628  : 			}
; 629  : 
; 630  : 		if (!_Prefix || _First == _Last)
; 631  : 			break;	// no pending prefixes or no input, give up
; 632  : 		}
; 633  : 	return (_Ans);	// return field number or negative value on failure
; 634  : 	}
; 635  : 
; 636  : 		// TEMPLATE FUNCTION _Maklocbyte
; 637  : #define _MAKLOCBYTE(Elem, chr, cvt) \
; 638  : 	_Maklocbyte((_Elem)chr, cvt)	/* convert Elem to char */
; 639  : 
; 640  : template<class _Elem> inline
; 641  : 	char __CRTDECL _Maklocbyte(_Elem _Char,
; 642  : 		const _Locinfo::_Cvtvec&)
; 643  : 	{	// convert _Elem to char using _Cvtvec
; 644  : 	return ((char)(unsigned char)_Char);
; 645  : 	}
; 646  : 
; 647  : template<> inline
; 648  : 	char __CRTDECL _Maklocbyte(wchar_t _Char,
; 649  : 		const _Locinfo::_Cvtvec& _Cvt)
; 650  : 	{	// convert wchar_t to char using _Cvtvec
; 651  : 	char _Byte = '\0';
; 652  : 	_Mbstinit(_Mbst1);
; 653  : 	_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
; 654  : 	return (_Byte);
; 655  : 	}
; 656  : 
; 657  :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 658  : template<> inline
; 659  : 	char __CRTDECL _Maklocbyte(unsigned short _Char,
; 660  : 		const _Locinfo::_Cvtvec &_Cvt)
; 661  : 	{	// convert unsigned short to char using _Cvtvec
; 662  : 	char _Byte = '\0';
; 663  : 	_Mbstinit(_Mbst1);
; 664  : 	_Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
; 665  : 	return (_Byte);
; 666  : 	}
; 667  :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 668  : 
; 669  : 		// TEMPLATE FUNCTION _Maklocchr
; 670  : #define _MAKLOCCHR(Elem, chr, cvt) \
; 671  : 	_Maklocchr(chr, (Elem *)0, cvt)	/* convert char to Elem */
; 672  : 
; 673  : template<class _Elem> inline
; 674  : 	_Elem __CRTDECL _Maklocchr(char _Byte, _Elem *,
; 675  : 		const _Locinfo::_Cvtvec&)
; 676  : 	{	// convert char to _Elem using _Cvtvec
; 677  : 	return ((_Elem)(unsigned char)_Byte);
; 678  : 	}
; 679  : 
; 680  : template<> inline
; 681  : 	wchar_t __CRTDECL _Maklocchr(char _Byte, wchar_t *,
; 682  : 		const _Locinfo::_Cvtvec& _Cvt)
; 683  : 	{	// convert char to wchar_t using _Cvtvec
; 684  : 	wchar_t _Wc = L'\0';
; 685  : 	_Mbstinit(_Mbst1);
; 686  : 	_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
; 687  : 	return (_Wc);
; 688  : 	}
; 689  : 
; 690  :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 691  : template<> inline
; 692  : 	unsigned short __CRTDECL _Maklocchr(char _Byte, unsigned short *,
; 693  : 		const _Locinfo::_Cvtvec &_Cvt)
; 694  : 	{	// convert char to unsigned short using _Cvtvec
; 695  : 	unsigned short _Wc = (unsigned short)0;
; 696  : 	_Mbstinit(_Mbst1);
; 697  : 	_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
; 698  : 	return (_Wc);
; 699  : 	}
; 700  :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 701  : 
; 702  : 		// TEMPLATE FUNCTION _Maklocstr
; 703  : #define _MAKLOCSTR(Elem, str, cvt)	\
; 704  : 	_Maklocstr(str, (Elem *)0, cvt)	/* convert C string to Elem sequence */
; 705  : 
; 706  : template<class _Elem> inline
; 707  : 	_Elem *__CRTDECL _Maklocstr(const char *_Ptr, _Elem *,
; 708  : 		const _Locinfo::_Cvtvec&)
; 709  : 	{	// convert C string to _Elem sequence using _Cvtvec
; 710  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;
; 711  : 	_Elem *_Ptrdest = _NEW_CRT _Elem[_Count];
; 712  : 
; 713  :  #pragma warning(push)
; 714  :  #pragma warning(disable: 6011)	/* quiet prefast noise */
; 715  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
; 716  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;
; 717  :  #pragma warning(pop)
; 718  : 
; 719  : 	return (_Ptrdest);
; 720  : 	}
; 721  : 
; 722  : template<> inline
; 723  : 	wchar_t *__CRTDECL _Maklocstr(const char *_Ptr, wchar_t *,
; 724  : 		const _Locinfo::_Cvtvec& _Cvt)
; 725  : 	{	// convert C string to wchar_t sequence using _Cvtvec
; 726  : 	size_t _Count, _Count1;
; 727  : 	size_t _Wchars;
; 728  : 	const char *_Ptr1;
; 729  : 	int _Bytes;
; 730  : 	wchar_t _Wc;
; 731  : 	_Mbstinit(_Mbst1);
; 732  : 
; 733  : 	_Count1 = _CSTD strlen(_Ptr) + 1;
; 734  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
; 735  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
; 736  : 		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
; 737  : 			break;
; 738  : 	++_Wchars;	// count terminating nul
; 739  : 
; 740  : 	wchar_t *_Ptrdest = _NEW_CRT wchar_t[_Wchars];
; 741  : 	wchar_t *_Ptrnext = _Ptrdest;
; 742  : 	_Mbstinit(_Mbst2);
; 743  : 
; 744  :  #pragma warning(push)
; 745  :  #pragma warning(disable: 6011)	/* quiet prefast noise */
; 746  : 	for (; 0 < _Wchars;
; 747  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
; 748  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
; 749  : 			break;
; 750  : 	*_Ptrnext = L'\0';
; 751  :  #pragma warning(pop)
; 752  : 
; 753  : 	return (_Ptrdest);
; 754  : 	}
; 755  : 
; 756  :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 757  : template<> inline
; 758  : 	unsigned short *__CRTDECL _Maklocstr(const char *_Ptr, unsigned short *,
; 759  : 		const _Locinfo::_Cvtvec &_Cvt)
; 760  : 	{	// convert C string to unsigned short sequence using _Cvtvec
; 761  : 	size_t _Count, _Count1;
; 762  : 	size_t _Wchars;
; 763  : 	const char *_Ptr1;
; 764  : 	int _Bytes;
; 765  : 	unsigned short _Wc;
; 766  : 	_Mbstinit(_Mbst1);
; 767  : 
; 768  : 	_Count1 = _CSTD strlen(_Ptr) + 1;
; 769  : 	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
; 770  : 		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
; 771  : 		if ((_Bytes =
; 772  : 			_Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
; 773  : 			break;
; 774  : 	++_Wchars;	// count terminating nul
; 775  : 
; 776  : 	wchar_t *_Ptrdest = _NEW_CRT wchar_t[_Wchars];
; 777  : 	wchar_t *_Ptrnext = _Ptrdest;
; 778  : 	_Mbstinit(_Mbst2);
; 779  : 	for (; 0 < _Wchars;
; 780  : 		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
; 781  : 		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
; 782  : 			break;
; 783  : 	*_Ptrnext = L'\0';
; 784  : 	return ((unsigned short *)_Ptrdest);
; 785  : 	}
; 786  :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 787  : 
; 788  : 		// STRUCT codecvt_base
; 789  :  #pragma warning(push)
; 790  :  #pragma warning(disable: 4275)
; 791  : 
; 792  : class _CRTIMP2_PURE codecvt_base
; 793  : 	: public locale::facet
; 794  : 	{	// base class for codecvt
; 795  : public:
; 796  : 	enum
; 797  : 		{	// constants for different parse states
; 798  : 		ok, partial, error, noconv};
; 799  : 	typedef int result;
; 800  : 
; 801  : 	__CLR_OR_THIS_CALL codecvt_base(size_t _Refs = 0)
; 802  : 		: locale::facet(_Refs)
; 803  : 		{	// default constructor
; 804  : 		}
; 805  : 
; 806  : 	bool __CLR_OR_THIS_CALL always_noconv() const _THROW0()
; 807  : 		{	// return true if conversions never change input (from codecvt)
; 808  : 		return (do_always_noconv());
; 809  : 		}
; 810  : 
; 811  : 	int __CLR_OR_THIS_CALL max_length() const _THROW0()
; 812  : 		{	// return maximum length required for a conversion (from codecvt)
; 813  : 		return (do_max_length());
; 814  : 		}
; 815  : 
; 816  : 	int __CLR_OR_THIS_CALL encoding() const _THROW0()
; 817  : 		{	// return length of code sequence (from codecvt)
; 818  : 		return (do_encoding());
; 819  : 		}
; 820  : 
; 821  : 	__CLR_OR_THIS_CALL ~codecvt_base() _NOEXCEPT
; 822  : 		{	// destroy the object
; 823  : 		}
; 824  : 
; 825  : protected:
; 826  : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const _THROW0()
; 827  : 		{	// return true if conversions never change input (from codecvt)
; 828  : 		return (false);
; 829  : 		}
; 830  : 
; 831  : 	virtual int __CLR_OR_THIS_CALL do_max_length() const _THROW0()
; 832  : 		{	// return maximum length required for a conversion (from codecvt)
; 833  : 		return (1);
; 834  : 		}
; 835  : 
; 836  : 	virtual int __CLR_OR_THIS_CALL do_encoding() const _THROW0()
; 837  : 		{	// return length of code sequence (from codecvt)
; 838  : 		return (1);	// -1 ==> state dependent, 0 ==> varying length
; 839  : 		}
; 840  : 	};
; 841  : 
; 842  :  #pragma warning(pop)
; 843  : 
; 844  : 		// TEMPLATE CLASS codecvt
; 845  : template<class _Elem,
; 846  : 	class _Byte,
; 847  : 	class _Statype>
; 848  : 	class codecvt
; 849  : 		: public codecvt_base
; 850  : 	{	// facet for converting between _Elem and char (_Byte) sequences
; 851  : public:
; 852  : 	typedef _Elem intern_type;
; 853  : 	typedef _Byte extern_type;
; 854  : 	typedef _Statype state_type;
; 855  : 
; 856  : 	result __CLR_OR_THIS_CALL in(_Statype& _State,
; 857  : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 858  : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 859  : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 860  : 		return (do_in(_State,
; 861  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 862  : 		}
; 863  : 
; 864  : 	result __CLR_OR_THIS_CALL out(_Statype& _State,
; 865  : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 866  : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 867  : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last2)
; 868  : 		return (do_out(_State,
; 869  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 870  : 		}
; 871  : 
; 872  : 	result __CLR_OR_THIS_CALL unshift(_Statype& _State,
; 873  : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 874  : 		{	// generate bytes to return to default shift state
; 875  : 		return (do_unshift(_State, _First2, _Last2, _Mid2));
; 876  : 		}
; 877  : 
; 878  : 	int __CLR_OR_THIS_CALL length(_Statype& _State, const _Byte *_First1,
; 879  : 		const _Byte *_Last1, size_t _Count) const
; 880  : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 881  : 		return (do_length(_State, _First1, _Last1, _Count));
; 882  : 		}
; 883  : 
; 884  : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;	// unique facet id
; 885  : 
; 886  : 	explicit __CLR_OR_THIS_CALL codecvt(size_t _Refs = 0)
; 887  : 		: codecvt_base(_Refs)
; 888  : 		{	// construct from current locale
; 889  : 		_Init(_Locinfo());
; 890  : 		}
; 891  : 
; 892  : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
; 893  : 		: codecvt_base(_Refs)
; 894  : 		{	// construct from specified locale
; 895  : 		_Init(_Lobj);
; 896  : 		}
; 897  : 
; 898  : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = 0,
; 899  : 		const locale *_Ploc = 0)
; 900  : 		{	// return locale category mask and construct standard facet
; 901  : 		if (_Ppf != 0 && *_Ppf == 0)
; 902  : 			*_Ppf = _NEW_CRT codecvt<_Elem, _Byte, _Statype>(
; 903  : 				_Locinfo(_Ploc->c_str()));
; 904  : 		return (_X_CTYPE);
; 905  : 		}
; 906  : 
; 907  : protected:
; 908  : 	virtual __CLR_OR_THIS_CALL ~codecvt() _NOEXCEPT
; 909  : 		{	// destroy the object
; 910  : 		}
; 911  : 
; 912  : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo&)
; 913  : 		{	// initialize from _Locinfo object
; 914  : 		}
; 915  : 
; 916  : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const _THROW0()
; 917  : 		{	// return true if conversions never change input (from codecvt)
; 918  : 		return (is_same<_Byte, _Elem>::value);
; 919  : 		}
; 920  : 
; 921  : 	virtual result __CLR_OR_THIS_CALL do_in(_Statype&,
; 922  : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 923  : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 924  : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 925  : 		_Mid1 = _First1, _Mid2 = _First2;
; 926  : 		if (is_same<_Byte, _Elem>::value)
; 927  : 			return (noconv);	// convert nothing
; 928  : 		else
; 929  : 			{	// types differ, copy one for one
; 930  : 			for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
; 931  : 				*_Mid2 = (_Elem)*_Mid1;
; 932  : 			return (ok);
; 933  : 			}
; 934  : 		}
; 935  : 
; 936  : 	virtual result __CLR_OR_THIS_CALL do_out(_Statype&,
; 937  : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 938  : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 939  : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 940  : 		_Mid1 = _First1, _Mid2 = _First2;
; 941  : 		if (is_same<_Byte, _Elem>::value)
; 942  : 			return (noconv);	// convert nothing
; 943  : 		else
; 944  : 			{	// types differ, copy one for one
; 945  : 			for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
; 946  : 				*_Mid2 = (_Byte)*_Mid1;
; 947  : 			return (ok);
; 948  : 			}
; 949  : 		}
; 950  : 
; 951  : 	virtual result __CLR_OR_THIS_CALL do_unshift(_Statype&,
; 952  : 		_Byte *_First2, _Byte *, _Byte *&_Mid2) const
; 953  : 		{	// generate bytes to return to default shift state
; 954  : 		_Mid2 = _First2;
; 955  : 		return (ok);	// convert nothing
; 956  : 		}
; 957  : 
; 958  : 	virtual int __CLR_OR_THIS_CALL do_length(_Statype&, const _Byte *_First1,
; 959  : 		const _Byte *_Last1, size_t _Count) const
; 960  : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 961  : 		return ((int)(_Count < (size_t)(_Last1 - _First1)
; 962  : 			? _Count : _Last1 - _First1));	// assume 1-to-1 conversion
; 963  : 		}
; 964  : 	};
; 965  : 
; 966  : 		// STATIC codecvt::id OBJECT
; 967  : template<class _Elem,
; 968  : 	class _Byte,
; 969  : 	class _Statype>
; 970  : 	__PURE_APPDOMAIN_GLOBAL locale::id codecvt<_Elem, _Byte, _Statype>::id;
; 971  : 
; 972  :  #if _HAS_CHAR16_T_LANGUAGE_SUPPORT
; 973  : 		// ENUM _Codecvt_mode
; 974  : enum _Codecvt_mode {
; 975  : 	_Consume_header = 4,
; 976  : 	_Generate_header = 2
; 977  : 	};
; 978  : 
; 979  : 		// CLASS codecvt<char16_t, char, _Mbstatet>
; 980  : template<>
; 981  : 	class _CRTIMP2_PURE codecvt<char16_t, char, _Mbstatet>
; 982  : 	: public codecvt_base
; 983  : 	{	// facet for converting between char16_t and UTF-8 byte sequences
; 984  : public:
; 985  : 	typedef codecvt<char16_t, char, _Mbstatet> _Mybase;
; 986  : 	typedef char16_t _Elem;
; 987  : 	typedef char _Byte;
; 988  : 	typedef _Mbstatet _Statype;
; 989  : 	typedef _Elem intern_type;
; 990  : 	typedef _Byte extern_type;
; 991  : 	typedef _Statype state_type;
; 992  : 
; 993  : 	result __CLR_OR_THIS_CALL in(_Statype& _State,
; 994  : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 995  : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 996  : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 997  : 		return (do_in(_State,
; 998  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 999  : 		}
; 1000 : 
; 1001 : 	result __CLR_OR_THIS_CALL out(_Statype& _State,
; 1002 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1003 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1004 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1005 : 		return (do_out(_State,
; 1006 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1007 : 		}
; 1008 : 
; 1009 : 	result __CLR_OR_THIS_CALL unshift(_Statype& _State,
; 1010 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1011 : 		{	// generate bytes to return to default shift state
; 1012 : 		return (do_unshift(_State,
; 1013 : 			_First2, _Last2, _Mid2));
; 1014 : 		}
; 1015 : 
; 1016 : 	int __CLR_OR_THIS_CALL length(_Statype& _State, const _Byte *_First1,
; 1017 : 		const _Byte *_Last1, size_t _Count) const
; 1018 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1019 : 		return (do_length(_State, _First1, _Last1, _Count));
; 1020 : 		}
; 1021 : 
; 1022 : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;
; 1023 : 
; 1024 : 	explicit __CLR_OR_THIS_CALL codecvt(size_t _Refs = 0)
; 1025 : 		: codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
; 1026 : 		{	// construct from current locale
; 1027 : 		_BEGIN_LOCINFO(_Lobj)
; 1028 : 			_Init(_Lobj);
; 1029 : 		_END_LOCINFO()
; 1030 : 		}
; 1031 : 
; 1032 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
; 1033 : 		: codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
; 1034 : 		{	// construct from specified locale
; 1035 : 		_Init(_Lobj);
; 1036 : 		}
; 1037 : 
; 1038 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
; 1039 : 		_Codecvt_mode _Mode_arg, size_t _Refs = 0)
; 1040 : 		: codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
; 1041 : 		{	// construct from specified locale and parameters
; 1042 : 		_Init(_Lobj);
; 1043 : 		}
; 1044 : 
; 1045 : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = 0,
; 1046 : 		const locale *_Ploc = 0)
; 1047 : 		{	// return locale category mask and construct standard facet
; 1048 : 		if (_Ppf != 0 && *_Ppf == 0)
; 1049 : 			*_Ppf = _NEW_CRT codecvt<_Elem, _Byte, _Statype>(
; 1050 : 				_Locinfo(_Ploc->c_str()));
; 1051 : 		return (_X_CTYPE);
; 1052 : 		}
; 1053 : 
; 1054 : protected:
; 1055 : 	virtual __CLR_OR_THIS_CALL ~codecvt() _NOEXCEPT
; 1056 : 		{	// destroy the object
; 1057 : 		}
; 1058 : 
; 1059 : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo&)
; 1060 : 		{	// initialize
; 1061 : 		}
; 1062 : 
; 1063 : 	virtual result __CLR_OR_THIS_CALL do_in(_Statype& _State,
; 1064 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1065 : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1066 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last2)
; 1067 : 		unsigned short *_Pstate = (unsigned short *)&_State;
; 1068 : 		_Mid1 = _First1;
; 1069 : 		_Mid2 = _First2;
; 1070 : 
; 1071 : 		for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
; 1072 : 			{	// convert a multibyte sequence
; 1073 : 			unsigned char _By = (unsigned char)*_Mid1;
; 1074 : 			unsigned long _Ch;
; 1075 : 			int _Nextra, _Nskip;
; 1076 : 
; 1077 : 			if (*_Pstate <= 1)
; 1078 : 				;	// no leftover word
; 1079 : 			else if (_By < 0x80 || 0xc0 <= _By)
; 1080 : 				return (_Mybase::error);	// not continuation byte
; 1081 : 			else
; 1082 : 				{	// deliver second half of two-word value
; 1083 : 				++_Mid1;
; 1084 : 				*_Mid2++ = (_Elem)(*_Pstate | _By & 0x3f);
; 1085 : 				*_Pstate = 1;
; 1086 : 				continue;
; 1087 : 				}
; 1088 : 
; 1089 : 			if (_By < 0x80)
; 1090 : 				_Ch = _By, _Nextra = 0;
; 1091 : 			else if (_By < 0xc0)
; 1092 : 				{	// 0x80-0xdf not first byte
; 1093 : 				++_Mid1;
; 1094 : 				return (_Mybase::error);
; 1095 : 				}
; 1096 : 			else if (_By < 0xe0)
; 1097 : 				_Ch = _By & 0x1f, _Nextra = 1;
; 1098 : 			else if (_By < 0xf0)
; 1099 : 				_Ch = _By & 0x0f, _Nextra = 2;
; 1100 : 			else if (_By < 0xf8)
; 1101 : 				_Ch = _By & 0x07, _Nextra = 3;
; 1102 : 			else
; 1103 : 				_Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;
; 1104 : 
; 1105 : 			_Nskip = _Nextra < 3 ? 0 : 1;	// leave a byte for 2nd word
; 1106 : 			_First1 = _Mid1;	// roll back point
; 1107 : 
; 1108 : 			if (_Nextra == 0)
; 1109 : 				++_Mid1;
; 1110 : 			else if (_Last1 - _Mid1 < _Nextra + 1 - _Nskip)
; 1111 : 				break;	// not enough input
; 1112 : 			else
; 1113 : 				for (++_Mid1; _Nskip < _Nextra; --_Nextra, ++_Mid1)
; 1114 : 					if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
; 1115 : 						return (_Mybase::error);	// not continuation byte
; 1116 : 					else
; 1117 : 						_Ch = _Ch << 6 | _By & 0x3f;
; 1118 : 			if (0 < _Nskip)
; 1119 : 				_Ch <<= 6;	// get last byte on next call
; 1120 : 
; 1121 : 			if ((_Maxcode < 0x10ffff ? _Maxcode : 0x10ffff) < _Ch)
; 1122 : 				return (_Mybase::error);	// value too large
; 1123 : 			else if (0xffff < _Ch)
; 1124 : 				{	// deliver first half of two-word value, save second word
; 1125 : 				unsigned short _Ch0 =
; 1126 : 					(unsigned short)(0xd800 | (_Ch >> 10) - 0x0040);
; 1127 : 
; 1128 : 				*_Mid2++ = (_Elem)_Ch0;
; 1129 : 				*_Pstate = (unsigned short)(0xdc00 | _Ch & 0x03ff);
; 1130 : 				continue;
; 1131 : 				}
; 1132 : 
; 1133 : 			if (_Nskip == 0)
; 1134 : 				;
; 1135 : 			else if (_Mid1 == _Last1)
; 1136 : 				{	// not enough bytes, noncanonical value
; 1137 : 				_Mid1 = _First1;
; 1138 : 				break;
; 1139 : 				}
; 1140 : 			else if ((_By = (unsigned char)*_Mid1++) < 0x80 || 0xc0 <= _By)
; 1141 : 				return (_Mybase::error);	// not continuation byte
; 1142 : 			else
; 1143 : 				_Ch |= _By & 0x3f;	// complete noncanonical value
; 1144 : 
; 1145 : 			if (*_Pstate == 0)
; 1146 : 				{	// first time, maybe look for and consume header
; 1147 : 				*_Pstate = 1;
; 1148 : 
; 1149 : 				if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
; 1150 : 					{	// drop header and retry
; 1151 : 					result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
; 1152 : 						_First2, _Last2, _Mid2);
; 1153 : 
; 1154 : 					if (_Ans == _Mybase::partial)
; 1155 : 						{	// roll back header determination
; 1156 : 						*_Pstate = 0;
; 1157 : 						_Mid1 = _First1;
; 1158 : 						}
; 1159 : 					return (_Ans);
; 1160 : 					}
; 1161 : 				}
; 1162 : 
; 1163 : 			*_Mid2++ = (_Elem)_Ch;
; 1164 : 			}
; 1165 : 
; 1166 : 		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
; 1167 : 		}
; 1168 : 
; 1169 : 	virtual result __CLR_OR_THIS_CALL do_out(_Statype& _State,
; 1170 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1171 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1172 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1173 : 		unsigned short *_Pstate = (unsigned short *)&_State;
; 1174 : 		_Mid1 = _First1;
; 1175 : 		_Mid2 = _First2;
; 1176 : 
; 1177 : 		for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
; 1178 : 			{	// convert and put a wide char
; 1179 : 			unsigned long _Ch;
; 1180 : 			unsigned short _Ch1 = (unsigned short)*_Mid1;
; 1181 : 			bool _Save = false;
; 1182 : 
; 1183 : 			if (1 < *_Pstate)
; 1184 : 				{	// get saved MS 11 bits from *_Pstate
; 1185 : 				if (_Ch1 < 0xdc00 || 0xe000 <= _Ch1)
; 1186 : 					return (_Mybase::error);	// bad second word
; 1187 : 				_Ch = (*_Pstate << 10) | (_Ch1 - 0xdc00);
; 1188 : 				}
; 1189 : 			else if (0xd800 <= _Ch1 && _Ch1 < 0xdc00)
; 1190 : 				{	// get new first word
; 1191 : 				_Ch = (_Ch1 - 0xd800 + 0x0040) << 10;
; 1192 : 				_Save = true;	// put only first byte, rest with second word
; 1193 : 				}
; 1194 : 			else
; 1195 : 				_Ch = _Ch1;	// not first word, just put it
; 1196 : 
; 1197 : 			_Byte _By;
; 1198 : 			int _Nextra;
; 1199 : 
; 1200 : 			if (_Ch < 0x0080)
; 1201 : 				_By = (_Byte)_Ch, _Nextra = 0;
; 1202 : 			else if (_Ch < 0x0800)
; 1203 : 				_By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
; 1204 : 			else if (_Ch < 0x10000)
; 1205 : 				_By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
; 1206 : 			else
; 1207 : 				_By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;
; 1208 : 
; 1209 : 			int _Nput = _Nextra < 3 ? _Nextra + 1 : _Save ? 1 : 3;
; 1210 : 
; 1211 : 			if (_Last2 - _Mid2 < _Nput)
; 1212 : 				break;	// not enough room, even without header
; 1213 : 			else if (*_Pstate != 0 || (_Mode & _Generate_header) == 0)
; 1214 : 				;	// no header to put
; 1215 : 			else if (_Last2 - _Mid2 < 3 + _Nput)
; 1216 : 				break;	// not enough room for header + output
; 1217 : 			else
; 1218 : 				{	// prepend header
; 1219 : 				*_Mid2++ = (_Byte)(unsigned char)0xef;
; 1220 : 				*_Mid2++ = (_Byte)(unsigned char)0xbb;
; 1221 : 				*_Mid2++ = (_Byte)(unsigned char)0xbf;
; 1222 : 				}
; 1223 : 
; 1224 : 			++_Mid1;
; 1225 : 			if (_Save || _Nextra < 3)
; 1226 : 				{	// put first byte of sequence, if not already put
; 1227 : 				*_Mid2++ = _By;
; 1228 : 				--_Nput;
; 1229 : 				}
; 1230 : 			for (; 0 < _Nput; --_Nput)
; 1231 : 				*_Mid2++ = (_Byte)(_Ch >> 6 * --_Nextra & 0x3f | 0x80);
; 1232 : 
; 1233 : 			*_Pstate = (unsigned short)(_Save ? _Ch >> 10 : 1);
; 1234 : 			}
; 1235 : 
; 1236 : 		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
; 1237 : 		}
; 1238 : 
; 1239 : 	virtual result __CLR_OR_THIS_CALL do_unshift(_Statype& _State,
; 1240 : 		_Byte *_First2, _Byte *, _Byte *& _Mid2) const
; 1241 : 		{	// generate bytes to return to default shift state
; 1242 : 		unsigned short *_Pstate = (unsigned short *)&_State;
; 1243 : 		_Mid2 = _First2;
; 1244 : 
; 1245 : 		return (1 < *_Pstate
; 1246 : 			? _Mybase::error : _Mybase::ok);	// fail if trailing first word
; 1247 : 		}
; 1248 : 
; 1249 : 	virtual int __CLR_OR_THIS_CALL do_length(_Statype& _State, const _Byte *_First1,
; 1250 : 		const _Byte *_Last1, size_t _Count) const _THROW0()
; 1251 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1252 : 		size_t _Wchars = 0;
; 1253 : 		_Statype _Mystate = _State;
; 1254 : 
; 1255 : 		for (; _Wchars < _Count && _First1 != _Last1; )
; 1256 : 			{	// convert another wide character
; 1257 : 			const _Byte *_Mid1;
; 1258 : 			_Elem *_Mid2;
; 1259 : 			_Elem _Ch;
; 1260 : 
; 1261 : 			switch (do_in(_Mystate, _First1, _Last1, _Mid1,
; 1262 : 				&_Ch, &_Ch + 1, _Mid2))
; 1263 : 				{	// test result of single wide-char conversion
; 1264 : 			case _Mybase::noconv:
; 1265 : 				return ((int)(_Wchars + (_Last1 - _First1)));
; 1266 : 
; 1267 : 			case _Mybase::ok:
; 1268 : 				if (_Mid2 == &_Ch + 1)
; 1269 : 					++_Wchars;	// replacement do_in might not convert one
; 1270 : 				_First1 = _Mid1;
; 1271 : 				break;
; 1272 : 
; 1273 : 			default:
; 1274 : 				return ((int)_Wchars);	// error or partial
; 1275 : 				}
; 1276 : 			}
; 1277 : 
; 1278 : 		return ((int)_Wchars);
; 1279 : 		}
; 1280 : 
; 1281 : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const _THROW0()
; 1282 : 		{	// return true if conversions never change input
; 1283 : 		return (false);
; 1284 : 		}
; 1285 : 
; 1286 : 	virtual int __CLR_OR_THIS_CALL do_max_length() const _THROW0()
; 1287 : 		{	// return maximum length required for a conversion
; 1288 : 		return ((_Mode & _Consume_header) != 0 ? 9	// header + max input
; 1289 : 			: (_Mode & _Generate_header) != 0 ? 7	// header + max output
; 1290 : 			: 6);	// 6-byte max input sequence, no 3-byte header
; 1291 : 		}
; 1292 : 
; 1293 : 	virtual int do_encoding() const _THROW0()
; 1294 : 		{	// return length of code sequence (from codecvt)
; 1295 : 		return (0);	// 0 => varying length
; 1296 : 		}
; 1297 : 
; 1298 : private:
; 1299 : 	unsigned long _Maxcode;	// default: 0x10ffff
; 1300 : 	_Codecvt_mode _Mode;	// default: _Consume_header
; 1301 : 	};
; 1302 : 
; 1303 : 		// CLASS codecvt<char32_t, char, _Mbstatet>
; 1304 : template<>
; 1305 : 	class _CRTIMP2_PURE codecvt<char32_t, char, _Mbstatet>
; 1306 : 	: public codecvt_base
; 1307 : 	{	// facet for converting between char32_t and UTF-8 byte sequences
; 1308 : public:
; 1309 : 	typedef codecvt<char32_t, char, _Mbstatet> _Mybase;
; 1310 : 	typedef char32_t _Elem;
; 1311 : 	typedef char _Byte;
; 1312 : 	typedef _Mbstatet _Statype;
; 1313 : 	typedef _Elem intern_type;
; 1314 : 	typedef _Byte extern_type;
; 1315 : 	typedef _Statype state_type;
; 1316 : 
; 1317 : 	result __CLR_OR_THIS_CALL in(_Statype& _State,
; 1318 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1319 : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1320 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 1321 : 		return (do_in(_State,
; 1322 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1323 : 		}
; 1324 : 
; 1325 : 	result __CLR_OR_THIS_CALL out(_Statype& _State,
; 1326 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1327 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1328 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1329 : 		return (do_out(_State,
; 1330 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1331 : 		}
; 1332 : 
; 1333 : 	result __CLR_OR_THIS_CALL unshift(_Statype& _State,
; 1334 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1335 : 		{	// generate bytes to return to default shift state
; 1336 : 		return (do_unshift(_State,
; 1337 : 			_First2, _Last2, _Mid2));
; 1338 : 		}
; 1339 : 
; 1340 : 	int __CLR_OR_THIS_CALL length(_Statype& _State, const _Byte *_First1,
; 1341 : 		const _Byte *_Last1, size_t _Count) const
; 1342 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1343 : 		return (do_length(_State, _First1, _Last1, _Count));
; 1344 : 		}
; 1345 : 
; 1346 : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;
; 1347 : 
; 1348 : 	explicit __CLR_OR_THIS_CALL codecvt(size_t _Refs = 0)
; 1349 : 		: codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
; 1350 : 		{	// construct from current locale
; 1351 : 		_BEGIN_LOCINFO(_Lobj)
; 1352 : 			_Init(_Lobj);
; 1353 : 		_END_LOCINFO()
; 1354 : 		}
; 1355 : 
; 1356 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
; 1357 : 		: codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
; 1358 : 		{	// construct from specified locale
; 1359 : 		_Init(_Lobj);
; 1360 : 		}
; 1361 : 
; 1362 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
; 1363 : 		_Codecvt_mode _Mode_arg, size_t _Refs = 0)
; 1364 : 		: codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
; 1365 : 		{	// construct from specified locale and parameters
; 1366 : 		_Init(_Lobj);
; 1367 : 		}
; 1368 : 
; 1369 : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = 0,
; 1370 : 		const locale *_Ploc = 0)
; 1371 : 		{	// return locale category mask and construct standard facet
; 1372 : 		if (_Ppf != 0 && *_Ppf == 0)
; 1373 : 			*_Ppf = _NEW_CRT codecvt<_Elem, _Byte, _Statype>(
; 1374 : 				_Locinfo(_Ploc->c_str()));
; 1375 : 		return (_X_CTYPE);
; 1376 : 		}
; 1377 : 
; 1378 : protected:
; 1379 : 	virtual __CLR_OR_THIS_CALL ~codecvt() _NOEXCEPT
; 1380 : 		{	// destroy the object
; 1381 : 		}
; 1382 : 
; 1383 : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo&)
; 1384 : 		{	// initialize
; 1385 : 		}
; 1386 : 
; 1387 : 	virtual result __CLR_OR_THIS_CALL do_in(_Statype& _State,
; 1388 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1389 : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1390 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 1391 : 		char *_Pstate = (char *)&_State;
; 1392 : 		_Mid1 = _First1;
; 1393 : 		_Mid2 = _First2;
; 1394 : 
; 1395 : 		for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
; 1396 : 			{	// convert a multibyte sequence
; 1397 : 			unsigned char _By = (unsigned char)*_Mid1;
; 1398 : 			unsigned long _Ch;
; 1399 : 			int _Nextra;
; 1400 : 
; 1401 : 			if (_By < 0x80)
; 1402 : 				_Ch = _By, _Nextra = 0;
; 1403 : 			else if (_By < 0xc0)
; 1404 : 				{	// 0x80-0xdf not first byte
; 1405 : 				++_Mid1;
; 1406 : 				return (_Mybase::error);
; 1407 : 				}
; 1408 : 			else if (_By < 0xe0)
; 1409 : 				_Ch = _By & 0x1f, _Nextra = 1;
; 1410 : 			else if (_By < 0xf0)
; 1411 : 				_Ch = _By & 0x0f, _Nextra = 2;
; 1412 : 			else if (_By < 0xf8)
; 1413 : 				_Ch = _By & 0x07, _Nextra = 3;
; 1414 : 			else
; 1415 : 				_Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;
; 1416 : 
; 1417 : 			if (_Nextra == 0)
; 1418 : 				++_Mid1;
; 1419 : 			else if (_Last1 - _Mid1 < _Nextra + 1)
; 1420 : 				break;	// not enough input
; 1421 : 			else
; 1422 : 				for (++_Mid1; 0 < _Nextra; --_Nextra, ++_Mid1)
; 1423 : 					if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
; 1424 : 						return (_Mybase::error);	// not continuation byte
; 1425 : 					else
; 1426 : 						_Ch = _Ch << 6 | _By & 0x3f;
; 1427 : 
; 1428 : 			if (*_Pstate == 0)
; 1429 : 				{	// first time, maybe look for and consume header
; 1430 : 				*_Pstate = 1;
; 1431 : 
; 1432 : 				if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
; 1433 : 					{	// drop header and retry
; 1434 : 					result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
; 1435 : 						_First2, _Last2, _Mid2);
; 1436 : 
; 1437 : 					if (_Ans == _Mybase::partial)
; 1438 : 						{	// roll back header determination
; 1439 : 						*_Pstate = 0;
; 1440 : 						_Mid1 = _First1;
; 1441 : 						}
; 1442 : 					return (_Ans);
; 1443 : 					}
; 1444 : 				}
; 1445 : 
; 1446 : 			if (_Maxcode < _Ch)
; 1447 : 				return (_Mybase::error);	// code too large
; 1448 : 			*_Mid2++ = (_Elem)_Ch;
; 1449 : 			}
; 1450 : 
; 1451 : 		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
; 1452 : 		}
; 1453 : 
; 1454 : 	virtual result __CLR_OR_THIS_CALL do_out(_Statype& _State,
; 1455 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1456 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1457 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1458 : 		char *_Pstate = (char *)&_State;
; 1459 : 		_Mid1 = _First1;
; 1460 : 		_Mid2 = _First2;
; 1461 : 
; 1462 : 		for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
; 1463 : 			{	// convert and put a wide char
; 1464 : 			_Byte _By;
; 1465 : 			int _Nextra;
; 1466 : 			unsigned long _Ch = (unsigned long)*_Mid1;
; 1467 : 
; 1468 : 			if (_Maxcode < _Ch)
; 1469 : 				return (_Mybase::error);
; 1470 : 
; 1471 : 			if (_Ch < 0x0080)
; 1472 : 				_By = (_Byte)_Ch, _Nextra = 0;
; 1473 : 			else if (_Ch < 0x0800)
; 1474 : 				_By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
; 1475 : 			else if (_Ch < 0x00010000)
; 1476 : 				_By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
; 1477 : 			else if (_Ch < 0x00200000)
; 1478 : 				_By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;
; 1479 : 			else if (_Ch < 0x04000000)
; 1480 : 				_By = (_Byte)(0xf8 | _Ch >> 24), _Nextra = 4;
; 1481 : 			else
; 1482 : 				_By = (_Byte)(0xfc | _Ch >> 30 & 0x03), _Nextra = 5;
; 1483 : 
; 1484 : 			if (*_Pstate == 0)
; 1485 : 				{	// first time, maybe generate header
; 1486 : 				*_Pstate = 1;
; 1487 : 				if ((_Mode & _Generate_header) == 0)
; 1488 : 					;
; 1489 : 				else if (_Last2 - _Mid2 < 3 + 1 + _Nextra)
; 1490 : 					return (_Mybase::partial);	// not enough room for both
; 1491 : 				else
; 1492 : 					{	// prepend header
; 1493 : 					*_Mid2++ = (_Byte)(unsigned char)0xef;
; 1494 : 					*_Mid2++ = (_Byte)(unsigned char)0xbb;
; 1495 : 					*_Mid2++ = (_Byte)(unsigned char)0xbf;
; 1496 : 					}
; 1497 : 				}
; 1498 : 
; 1499 : 			if (_Last2 - _Mid2 < 1 + _Nextra)
; 1500 : 				break;	// not enough room for output
; 1501 : 
; 1502 : 			++_Mid1;
; 1503 : 			for (*_Mid2++ = _By; 0 < _Nextra; )
; 1504 : 				*_Mid2++ = (_Byte)(_Ch >> 6 * --_Nextra & 0x3f | 0x80);
; 1505 : 			}
; 1506 : 		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
; 1507 : 		}
; 1508 : 
; 1509 : 	virtual result __CLR_OR_THIS_CALL do_unshift(_Statype&,
; 1510 : 		_Byte *_First2, _Byte *, _Byte *& _Mid2) const
; 1511 : 		{	// generate bytes to return to default shift state
; 1512 : 		_Mid2 = _First2;
; 1513 : 		return (_Mybase::ok);
; 1514 : 		}
; 1515 : 
; 1516 : 	virtual int __CLR_OR_THIS_CALL do_length(_Statype& _State, const _Byte *_First1,
; 1517 : 		const _Byte *_Last1, size_t _Count) const _THROW0()
; 1518 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1519 : 		int _Wchars = 0;
; 1520 : 		_Statype _Mystate = _State;
; 1521 : 
; 1522 : 		for (; (size_t)_Wchars < _Count && _First1 != _Last1; )
; 1523 : 			{	// convert another wide character
; 1524 : 			const _Byte *_Mid1;
; 1525 : 			_Elem *_Mid2;
; 1526 : 			_Elem _Ch;
; 1527 : 
; 1528 : 			switch (do_in(_Mystate, _First1, _Last1, _Mid1,
; 1529 : 				&_Ch, &_Ch + 1, _Mid2))
; 1530 : 				{	// test result of single wide-char conversion
; 1531 : 			case _Mybase::noconv:
; 1532 : 				return ((int)(_Wchars + (int)(_Last1 - _First1)));
; 1533 : 
; 1534 : 			case _Mybase::ok:
; 1535 : 				if (_Mid2 == &_Ch + 1)
; 1536 : 					++_Wchars;	// replacement do_in might not convert one
; 1537 : 				_First1 = _Mid1;
; 1538 : 				break;
; 1539 : 
; 1540 : 			default:
; 1541 : 				return ((int)_Wchars);	// error or partial
; 1542 : 				}
; 1543 : 			}
; 1544 : 
; 1545 : 		return ((int)_Wchars);
; 1546 : 		}
; 1547 : 
; 1548 : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const _THROW0()
; 1549 : 		{	// return true if conversions never change input
; 1550 : 		return (false);
; 1551 : 		}
; 1552 : 
; 1553 : 	virtual int __CLR_OR_THIS_CALL do_max_length() const _THROW0()
; 1554 : 		{	// return maximum length required for a conversion
; 1555 : 		return ((_Mode & (_Consume_header | _Generate_header)) != 0
; 1556 : 			? 9 : 6);
; 1557 : 		}
; 1558 : 
; 1559 : 	virtual int __CLR_OR_THIS_CALL do_encoding() const _THROW0()
; 1560 : 		{	// return length of code sequence (from codecvt)
; 1561 : 		return ((_Mode & (_Consume_header | _Generate_header)) != 0
; 1562 : 			? -1 : 0);	// -1 => state dependent, 0 => varying length
; 1563 : 		}
; 1564 : 
; 1565 : private:
; 1566 : 	unsigned long _Maxcode;	// default: 0xffffffff
; 1567 : 	_Codecvt_mode _Mode;	// default: _Consume_header
; 1568 : 	};
; 1569 :  #endif /* _HAS_CHAR16_T_LANGUAGE_SUPPORT */
; 1570 : 
; 1571 : 		// CLASS codecvt<wchar_t, char, _Mbstatet>
; 1572 : template<>
; 1573 : 	class _CRTIMP2_PURE codecvt<wchar_t, char, _Mbstatet>
; 1574 : 	: public codecvt_base
; 1575 : 	{	// facet for converting between wchar_t and char (_Byte) sequences
; 1576 : public:
; 1577 : 	typedef wchar_t _Elem;
; 1578 : 	typedef char _Byte;
; 1579 : 	typedef _Mbstatet _Statype;
; 1580 : 	typedef _Elem intern_type;
; 1581 : 	typedef _Byte extern_type;
; 1582 : 	typedef _Statype state_type;
; 1583 : 
; 1584 : 	result __CLR_OR_THIS_CALL in(_Statype& _State,
; 1585 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1586 : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1587 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 1588 : 		return (do_in(_State,
; 1589 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1590 : 		}
; 1591 : 
; 1592 : 	result __CLR_OR_THIS_CALL out(_Statype& _State,
; 1593 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1594 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1595 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1596 : 		return (do_out(_State,
; 1597 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1598 : 		}
; 1599 : 
; 1600 : 	result __CLR_OR_THIS_CALL unshift(_Statype& _State,
; 1601 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1602 : 		{	// generate bytes to return to default shift state
; 1603 : 		return (do_unshift(_State,
; 1604 : 			_First2, _Last2, _Mid2));
; 1605 : 		}
; 1606 : 
; 1607 : 	int __CLR_OR_THIS_CALL length(_Statype& _State, const _Byte *_First1,
; 1608 : 		const _Byte *_Last1, size_t _Count) const
; 1609 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1610 : 		return (do_length(_State, _First1, _Last1, _Count));
; 1611 : 		}
; 1612 : 
; 1613 : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;
; 1614 : 
; 1615 : 	explicit __CLR_OR_THIS_CALL codecvt(size_t _Refs = 0)
; 1616 : 		: codecvt_base(_Refs)
; 1617 : 		{	// construct from current locale
; 1618 : 		_BEGIN_LOCINFO(_Lobj)
; 1619 : 			_Init(_Lobj);
; 1620 : 		_END_LOCINFO()
; 1621 : 		}
; 1622 : 
; 1623 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
; 1624 : 		: codecvt_base(_Refs)
; 1625 : 		{	// construct from specified locale
; 1626 : 		_Init(_Lobj);
; 1627 : 		}
; 1628 : 
; 1629 : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = 0,
; 1630 : 		const locale *_Ploc = 0)
; 1631 : 		{	// return locale category mask and construct standard facet
; 1632 : 		if (_Ppf != 0 && *_Ppf == 0)
; 1633 : 			*_Ppf = _NEW_CRT codecvt<_Elem, _Byte, _Statype>(
; 1634 : 				_Locinfo(_Ploc->c_str()));
; 1635 : 		return (_X_CTYPE);
; 1636 : 		}
; 1637 : 
; 1638 : protected:
; 1639 : 	virtual __CLR_OR_THIS_CALL ~codecvt() _NOEXCEPT
; 1640 : 		{	// destroy the object
; 1641 : 		}
; 1642 : 
; 1643 : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo& _Lobj)
; 1644 : 		{	// initialize from _Lobj
; 1645 : 		_Cvt = _Lobj._Getcvt();
; 1646 : 		}
; 1647 : 
; 1648 : 	virtual result __CLR_OR_THIS_CALL do_in(_Statype& _State,
; 1649 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1650 : 			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1651 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 1652 : 		_DEBUG_RANGE(_First1, _Last1);
; 1653 : 		_DEBUG_RANGE(_First2, _Last2);
; 1654 : 		_Mid1 = _First1, _Mid2 = _First2;
; 1655 : 		result _Ans = _Mid1 == _Last1 ? ok : partial;
; 1656 : 		int _Bytes;
; 1657 : 
; 1658 : 		while (_Mid1 != _Last1 && _Mid2 != _Last2)
; 1659 : 			switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1,
; 1660 : 				&_State, &_Cvt))
; 1661 : 			{	// test result of locale-specific mbrtowc call
; 1662 : 			case -2:	// partial conversion
; 1663 : 				_Mid1 = _Last1;
; 1664 : 				return (_Ans);
; 1665 : 
; 1666 : 			case -1:	// failed conversion
; 1667 : 				return (error);
; 1668 : 
; 1669 : 			case 0:	// may have converted null character
; 1670 : 				if (*_Mid2 == (_Elem)0)
; 1671 : 					_Bytes = (int)_CSTD strlen(_Mid1) + 1;
; 1672 : 				// fall through
; 1673 : 
; 1674 : 			default:	// converted _Bytes bytes to a wchar_t
; 1675 : 				if (_Bytes == -3)
; 1676 : 					_Bytes = 0;	// wchar_t generated from state info
; 1677 : 				_Mid1 += _Bytes;
; 1678 : 				++_Mid2;
; 1679 : 				_Ans = ok;
; 1680 : 			}
; 1681 : 		return (_Ans);
; 1682 : 		}
; 1683 : 
; 1684 : 	virtual result __CLR_OR_THIS_CALL do_out(_Statype& _State,
; 1685 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1686 : 			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1687 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1688 : 		_DEBUG_RANGE(_First1, _Last1);
; 1689 : 		_DEBUG_RANGE(_First2, _Last2);
; 1690 : 		_Mid1 = _First1, _Mid2 = _First2;
; 1691 : 		result _Ans = _Mid1 == _Last1 ? ok : partial;
; 1692 : 		int _Bytes;
; 1693 : 
; 1694 : 		while (_Mid1 != _Last1 && _Mid2 != _Last2)
; 1695 : 			if ((int)MB_CUR_MAX <= _Last2 - _Mid2)
; 1696 : 				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
; 1697 : 					&_State, &_Cvt)) < 0)
; 1698 : 					return (error);	// locale-specific wcrtomb failed
; 1699 : 				else
; 1700 : 					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
; 1701 : 			else
; 1702 : 				{	// destination too small, convert into buffer
; 1703 : 				_Byte _Buf[MB_LEN_MAX];
; 1704 : 				_Statype _Stsave = _State;
; 1705 : 
; 1706 : 				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
; 1707 : 					&_State, &_Cvt)) < 0)
; 1708 : 					return (error);	// locale-specific wcrtomb failed
; 1709 : 				else if (_Last2 - _Mid2 < _Bytes)
; 1710 : 					{	// converted too many, roll back and return previous
; 1711 : 					_State = _Stsave;
; 1712 : 					return (_Ans);
; 1713 : 					}
; 1714 : 				else
; 1715 : 					{	// copy converted bytes from buffer
; 1716 : 					_CSTD memcpy(_Mid2, _Buf, _Bytes);
; 1717 : 					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
; 1718 : 					}
; 1719 : 				}
; 1720 : 		return (_Ans);
; 1721 : 		}
; 1722 : 
; 1723 : 	virtual result __CLR_OR_THIS_CALL do_unshift(_Statype& _State,
; 1724 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1725 : 		{	// generate bytes to return to default shift state
; 1726 : 		_DEBUG_RANGE(_First2, _Last2);
; 1727 : 		_Mid2 = _First2;
; 1728 : 		result _Ans = ok;
; 1729 : 		int _Bytes;
; 1730 : 		_Byte _Buf[MB_LEN_MAX];
; 1731 : 		_Statype _Stsave = _State;
; 1732 : 
; 1733 : 		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
; 1734 : 			_Ans = error;	// locale-specific wcrtomb failed
; 1735 : 		else if (_Last2 - _Mid2 < --_Bytes)
; 1736 : 			{	// converted too many, roll back and return
; 1737 : 			_State = _Stsave;
; 1738 : 			_Ans = partial;
; 1739 : 			}
; 1740 : 		else if (0 < _Bytes)
; 1741 : 			{	// copy converted bytes from buffer
; 1742 : 			_CSTD memcpy(_Mid2, _Buf, _Bytes);
; 1743 : 			_Mid2 += _Bytes;
; 1744 : 			}
; 1745 : 		return (_Ans);
; 1746 : 		}
; 1747 : 
; 1748 : 	virtual int __CLR_OR_THIS_CALL do_length(_Statype& _State, const _Byte *_First1,
; 1749 : 		const _Byte *_Last1, size_t _Count) const
; 1750 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1751 : 		_DEBUG_RANGE(_First1, _Last1);
; 1752 : 		int _Wchars;
; 1753 : 		const _Byte *_Mid1;
; 1754 : 		_Statype _Mystate = _State;
; 1755 : 
; 1756 : 		for (_Wchars = 0, _Mid1 = _First1;
; 1757 : 			(size_t)_Wchars < _Count && _Mid1 != _Last1; )
; 1758 : 			{	// convert another wchar_t
; 1759 : 			int _Bytes;
; 1760 : 			_Elem _Ch;
; 1761 : 
; 1762 : 			switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1,
; 1763 : 				&_Mystate, &_Cvt))
; 1764 : 				{	// test result of locale-specific mbrtowc call
; 1765 : 			case -2:	// partial conversion
; 1766 : 				return (_Wchars);
; 1767 : 
; 1768 : 			case -1:	// failed conversion
; 1769 : 				return (_Wchars);
; 1770 : 
; 1771 : 			case 0:	// may have converted null character
; 1772 : 				if (_Ch == (_Elem)0)
; 1773 : 					_Bytes = (int)_CSTD strlen(_Mid1) + 1;
; 1774 : 				// fall through
; 1775 : 
; 1776 : 			default:	// converted _Bytes bytes to a wchar_t
; 1777 : 				if (_Bytes == -3)
; 1778 : 					_Bytes = 0;	// wchar_t generated from state info
; 1779 : 				_Mid1 += _Bytes;
; 1780 : 				++_Wchars;
; 1781 : 				}
; 1782 : 			}
; 1783 : 		return (_Wchars);
; 1784 : 		}
; 1785 : 
; 1786 : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const _THROW0()
; 1787 : 		{	// return true if conversions never change input
; 1788 : 		return (false);
; 1789 : 		}
; 1790 : 
; 1791 : 	virtual int __CLR_OR_THIS_CALL do_max_length() const _THROW0()
; 1792 : 		{	// return maximum length required for a conversion (from codecvt)
; 1793 : 		return (MB_LEN_MAX);
; 1794 : 		}
; 1795 : 
; 1796 : 	virtual int __CLR_OR_THIS_CALL do_encoding() const _THROW0()
; 1797 : 		{	// return length of code sequence (from codecvt)
; 1798 : 		return (0);	// 0 => varying length
; 1799 : 		}
; 1800 : 
; 1801 : private:
; 1802 : 	_Locinfo::_Cvtvec _Cvt;	// locale info passed to _Mbrtowc, _Wcrtomb
; 1803 : 	};
; 1804 : 
; 1805 :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 1806 : 		// CLASS codecvt<unsigned short, char, _Mbstatet>
; 1807 : template<>
; 1808 : 	class _CRTIMP2_PURE codecvt<unsigned short, char, _Mbstatet>
; 1809 : 	: public codecvt_base
; 1810 : 	{	// facet for converting between unsigned short and char sequences
; 1811 : public:
; 1812 : 	typedef unsigned short _Elem;
; 1813 : 	typedef char _Byte;
; 1814 : 	typedef _Mbstatet _Statype;
; 1815 : 	typedef _Elem intern_type;
; 1816 : 	typedef _Byte extern_type;
; 1817 : 	typedef _Statype state_type;
; 1818 : 
; 1819 : 	result __CLR_OR_THIS_CALL in(_Statype& _State,
; 1820 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1821 : 		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1822 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 1823 : 		return (do_in(_State,
; 1824 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1825 : 		}
; 1826 : 
; 1827 : 	result __CLR_OR_THIS_CALL out(_Statype& _State,
; 1828 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1829 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1830 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1831 : 		return (do_out(_State,
; 1832 : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 1833 : 		}
; 1834 : 
; 1835 : 	result __CLR_OR_THIS_CALL unshift(_Statype& _State,
; 1836 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1837 : 		{	// generate bytes to return to default shift state
; 1838 : 		return (do_unshift(_State,
; 1839 : 			_First2, _Last2, _Mid2));
; 1840 : 		}
; 1841 : 
; 1842 : 	int __CLR_OR_THIS_CALL length(_Statype& _State, const _Byte *_First1,
; 1843 : 		const _Byte *_Last1, size_t _Count) const
; 1844 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1845 : 		return (do_length(_State, _First1, _Last1, _Count));
; 1846 : 		}
; 1847 : 
; 1848 : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;
; 1849 : 
; 1850 : 	explicit __CLR_OR_THIS_CALL codecvt(size_t _Refs = 0)
; 1851 : 		: codecvt_base(_Refs)
; 1852 : 		{	// construct from current locale
; 1853 : 		_BEGIN_LOCINFO(_Lobj)
; 1854 : 			_Init(_Lobj);
; 1855 : 		_END_LOCINFO()
; 1856 : 		}
; 1857 : 
; 1858 : 	__CLR_OR_THIS_CALL codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
; 1859 : 		: codecvt_base(_Refs)
; 1860 : 		{	// construct from specified locale
; 1861 : 		_Init(_Lobj);
; 1862 : 		}
; 1863 : 
; 1864 : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = 0,
; 1865 : 		const locale *_Ploc = 0)
; 1866 : 		{	// return locale category mask and construct standard facet
; 1867 : 		if (_Ppf != 0 && *_Ppf == 0)
; 1868 : 			*_Ppf = _NEW_CRT codecvt<_Elem, _Byte, _Statype>(
; 1869 : 				_Locinfo(_Ploc->c_str()));
; 1870 : 		return (_X_CTYPE);
; 1871 : 		}
; 1872 : 
; 1873 : protected:
; 1874 : 	virtual __CLR_OR_THIS_CALL ~codecvt() _NOEXCEPT
; 1875 : 		{	// destroy the object
; 1876 : 		}
; 1877 : 
; 1878 : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo& _Lobj)
; 1879 : 		{	// initialize from _Lobj
; 1880 : 		_Cvt = _Lobj._Getcvt();
; 1881 : 		}
; 1882 : 
; 1883 : 	virtual result __CLR_OR_THIS_CALL do_in(_Statype& _State,
; 1884 : 		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
; 1885 : 			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
; 1886 : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)
; 1887 : 		_DEBUG_RANGE(_First1, _Last1);
; 1888 : 		_DEBUG_RANGE(_First2, _Last2);
; 1889 : 		_Mid1 = _First1, _Mid2 = _First2;
; 1890 : 		result _Ans = _Mid1 == _Last1 ? ok : partial;
; 1891 : 		int _Bytes;
; 1892 : 
; 1893 : 		while (_Mid1 != _Last1 && _Mid2 != _Last2)
; 1894 : 			switch (_Bytes = _Mbrtowc((wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1,
; 1895 : 				&_State, &_Cvt))
; 1896 : 			{	// test result of locale-specific mbrtowc call
; 1897 : 			case -2:	// partial conversion
; 1898 : 				_Mid1 = _Last1;
; 1899 : 				return (_Ans);
; 1900 : 
; 1901 : 			case -1:	// failed conversion
; 1902 : 				return (error);
; 1903 : 
; 1904 : 			case 0:	// may have converted null character
; 1905 : 				if (*_Mid2 == (_Elem)0)
; 1906 : 					_Bytes = (int)_CSTD strlen(_Mid1) + 1;
; 1907 : 				// fall through
; 1908 : 
; 1909 : 			default:	// converted _Bytes bytes to an unsigned short
; 1910 : 				if (_Bytes == -3)
; 1911 : 					_Bytes = 0;	// wchar_t generated from state info
; 1912 : 				_Mid1 += _Bytes;
; 1913 : 				++_Mid2;
; 1914 : 				_Ans = ok;
; 1915 : 			}
; 1916 : 		return (_Ans);
; 1917 : 		}
; 1918 : 
; 1919 : 	virtual result __CLR_OR_THIS_CALL do_out(_Statype& _State,
; 1920 : 		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
; 1921 : 			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1922 : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)
; 1923 : 		_DEBUG_RANGE(_First1, _Last1);
; 1924 : 		_DEBUG_RANGE(_First2, _Last2);
; 1925 : 		_Mid1 = _First1, _Mid2 = _First2;
; 1926 : 		result _Ans = _Mid1 == _Last1 ? ok : partial;
; 1927 : 		int _Bytes;
; 1928 : 
; 1929 : 		while (_Mid1 != _Last1 && _Mid2 != _Last2)
; 1930 : 			if ((int)MB_CUR_MAX <= _Last2 - _Mid2)
; 1931 : 				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
; 1932 : 					&_State, &_Cvt)) < 0)
; 1933 : 					return (error);	// locale-specific wcrtomb failed
; 1934 : 				else
; 1935 : 					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
; 1936 : 			else
; 1937 : 				{	// destination too small, convert into buffer
; 1938 : 				_Byte _Buf[MB_LEN_MAX];
; 1939 : 				_Statype _Stsave = _State;
; 1940 : 
; 1941 : 				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
; 1942 : 					&_State, &_Cvt)) < 0)
; 1943 : 					return (error);	// locale-specific wcrtomb failed
; 1944 : 				else if (_Last2 - _Mid2 < _Bytes)
; 1945 : 					{	// converted too many, roll back and return previous
; 1946 : 					_State = _Stsave;
; 1947 : 					return (_Ans);
; 1948 : 					}
; 1949 : 				else
; 1950 : 					{	// copy converted bytes from buffer
; 1951 : 					_CSTD memcpy(_Mid2, _Buf, _Bytes);
; 1952 : 					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
; 1953 : 					}
; 1954 : 				}
; 1955 : 		return (_Ans);
; 1956 : 		}
; 1957 : 
; 1958 : 	virtual result __CLR_OR_THIS_CALL do_unshift(_Statype& _State,
; 1959 : 		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
; 1960 : 		{	// generate bytes to return to default shift state
; 1961 : 		_DEBUG_RANGE(_First2, _Last2);
; 1962 : 		_Mid2 = _First2;
; 1963 : 		result _Ans = ok;
; 1964 : 		int _Bytes;
; 1965 : 		_Byte _Buf[MB_LEN_MAX];
; 1966 : 		_Statype _Stsave = _State;
; 1967 : 
; 1968 : 		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
; 1969 : 			_Ans = error;	// locale-specific wcrtomb failed
; 1970 : 		else if (_Last2 - _Mid2 < --_Bytes)
; 1971 : 			{	// converted too many, roll back and return
; 1972 : 			_State = _Stsave;
; 1973 : 			_Ans = partial;
; 1974 : 			}
; 1975 : 		else if (0 < _Bytes)
; 1976 : 			{	// copy converted bytes from buffer
; 1977 : 			_CSTD memcpy(_Mid2, _Buf, _Bytes);
; 1978 : 			_Mid2 += _Bytes;
; 1979 : 			}
; 1980 : 		return (_Ans);
; 1981 : 		}
; 1982 : 
; 1983 : 	virtual int __CLR_OR_THIS_CALL do_length(_Statype& _State, const _Byte *_First1,
; 1984 : 		const _Byte *_Last1, size_t _Count) const
; 1985 : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))
; 1986 : 		_DEBUG_RANGE(_First1, _Last1);
; 1987 : 		int _Wchars;
; 1988 : 		const _Byte *_Mid1;
; 1989 : 		_Statype _Mystate = _State;
; 1990 : 
; 1991 : 		for (_Wchars = 0, _Mid1 = _First1;
; 1992 : 			(size_t)_Wchars < _Count && _Mid1 != _Last1; )
; 1993 : 			{	// convert another unsigned char
; 1994 : 			int _Bytes;
; 1995 : 			_Elem _Ch;
; 1996 : 
; 1997 : 			switch (_Bytes = _Mbrtowc((wchar_t *)&_Ch, _Mid1, _Last1 - _Mid1,
; 1998 : 				&_Mystate, &_Cvt))
; 1999 : 				{	// test result of locale-specific mbrtowc call
; 2000 : 			case -2:	// partial conversion
; 2001 : 				return (_Wchars);
; 2002 : 
; 2003 : 			case -1:	// failed conversion
; 2004 : 				return (_Wchars);
; 2005 : 
; 2006 : 			case 0:	// may have converted null character
; 2007 : 				if (_Ch == (_Elem)0)
; 2008 : 					_Bytes = (int)_CSTD strlen(_Mid1) + 1;
; 2009 : 				// fall through
; 2010 : 
; 2011 : 			default:	// converted _Bytes bytes to an unsigned char
; 2012 : 				if (_Bytes == -3)
; 2013 : 					_Bytes = 0;	// wchar_t generated from state info
; 2014 : 				_Mid1 += _Bytes;
; 2015 : 				++_Wchars;
; 2016 : 				}
; 2017 : 			}
; 2018 : 		return (_Wchars);
; 2019 : 		}
; 2020 : 
; 2021 : 	virtual bool __CLR_OR_THIS_CALL do_always_noconv() const _THROW0()
; 2022 : 		{	// return true if conversions never change input
; 2023 : 		return (false);
; 2024 : 		}
; 2025 : 
; 2026 : 	virtual int __CLR_OR_THIS_CALL do_max_length() const _THROW0()
; 2027 : 		{	// return maximum length required for a conversion (from codecvt)
; 2028 : 		return (MB_LEN_MAX);
; 2029 : 		}
; 2030 : 
; 2031 : 	virtual int __CLR_OR_THIS_CALL do_encoding() const _THROW0()
; 2032 : 		{	// return length of code sequence (from codecvt)
; 2033 : 		return (0);	// 0 => varying length
; 2034 : 		}
; 2035 : 
; 2036 : private:
; 2037 : 	_Locinfo::_Cvtvec _Cvt;	// locale info passed to _Mbrtowc, _Wcrtomb
; 2038 : 	};
; 2039 :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 2040 : 
; 2041 : 		// TEMPLATE CLASS codecvt_byname
; 2042 : template<class _Elem,
; 2043 : 	class _Byte,
; 2044 : 	class _Statype>
; 2045 : 	class codecvt_byname
; 2046 : 		: public codecvt<_Elem, _Byte, _Statype>
; 2047 : 	{	// codecvt for named locale
; 2048 : public:
; 2049 : 	explicit __CLR_OR_THIS_CALL codecvt_byname(const char *_Locname, size_t _Refs = 0)
; 2050 : 		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
; 2051 : 		{	// construct for named locale
; 2052 : 		}
; 2053 : 
; 2054 :  #if _HAS_CPP0X
; 2055 : 	explicit __CLR_OR_THIS_CALL codecvt_byname(const string& _Str, size_t _Refs = 0)
; 2056 : 		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
; 2057 : 		{	// construct for named locale
; 2058 : 		}
; 2059 :  #endif /* _HAS_CPP0X */
; 2060 : 
; 2061 : protected:
; 2062 : 	virtual __CLR_OR_THIS_CALL ~codecvt_byname() _NOEXCEPT
; 2063 : 		{	// destroy the object
; 2064 : 		}
; 2065 : 	};
; 2066 : 
; 2067 : 		// STRUCT ctype_base
; 2068 :  #pragma warning(push)
; 2069 :  #pragma warning(disable: 4275)
; 2070 : 
; 2071 : struct _CRTIMP2_PURE ctype_base
; 2072 : 	: public locale::facet
; 2073 : 	{	// base for ctype
; 2074 : 	enum
; 2075 : 		{	// constants for character classifications
; 2076 : 		alnum = _DI | _LO | _UP | _XA, alpha = _LO | _UP | _XA,
; 2077 : 		cntrl = _BB, digit = _DI, graph = _DI | _LO | _PU | _UP | _XA,
; 2078 : 		lower = _LO, print = _DI | _LO | _PU | _SP | _UP | _XA | _XD,
; 2079 : 		punct = _PU, space = _CN | _SP | _XS, upper = _UP,
; 2080 : 		xdigit = _XD, blank = _CN | _SP | _XS | _XB};
; 2081 : 	typedef short mask;	// to match <ctype.h>
; 2082 : 
; 2083 : 	__CLR_OR_THIS_CALL ctype_base(size_t _Refs = 0)
; 2084 : 		: locale::facet(_Refs)
; 2085 : 		{	// default constructor
; 2086 : 		}
; 2087 : 
; 2088 : 	__CLR_OR_THIS_CALL ~ctype_base() _NOEXCEPT
; 2089 : 		{	// destroy the object
; 2090 : 		}
; 2091 : 	};
; 2092 : 
; 2093 :  #pragma warning(pop)
; 2094 : 
; 2095 : 		// TEMPLATE CLASS ctype
; 2096 : template<class _Elem>
; 2097 : 	class ctype
; 2098 : 		: public ctype_base
; 2099 : 	{	// facet for classifying elements, converting cases
; 2100 : public:
; 2101 : 	typedef _Elem char_type;
; 2102 : 
; 2103 : 	bool __CLR_OR_THIS_CALL is(mask _Maskval, _Elem _Ch) const
; 2104 : 		{	// test if element fits any mask classifications
; 2105 : 		return (do_is(_Maskval, _Ch));
; 2106 : 		}
; 2107 : 
; 2108 : 	const _Elem *__CLR_OR_THIS_CALL is(const _Elem *_First, const _Elem *_Last,
; 2109 : 		mask *_Dest) const
; 2110 : 		{	// get mask sequence for elements in [_First, _Last)
; 2111 : 		return (do_is(_First, _Last, _Dest));
; 2112 : 		}
; 2113 : 
; 2114 : 	const _Elem *__CLR_OR_THIS_CALL scan_is(mask _Maskval, const _Elem *_First,
; 2115 : 		const _Elem *_Last) const
; 2116 : 		{	// find first in [_First, _Last) that fits mask classification
; 2117 : 		return (do_scan_is(_Maskval, _First, _Last));
; 2118 : 		}
; 2119 : 
; 2120 : 	const _Elem *__CLR_OR_THIS_CALL scan_not(mask _Maskval, const _Elem *_First,
; 2121 : 		const _Elem *_Last) const
; 2122 : 		{	// find first in [_First, _Last) not fitting mask classification
; 2123 : 		return (do_scan_not(_Maskval, _First, _Last));
; 2124 : 		}
; 2125 : 
; 2126 : 	_Elem __CLR_OR_THIS_CALL tolower(_Elem _Ch) const
; 2127 : 		{	// convert element to lower case
; 2128 : 		return (do_tolower(_Ch));
; 2129 : 		}
; 2130 : 
; 2131 : 	const _Elem *__CLR_OR_THIS_CALL tolower(_Elem *_First, const _Elem *_Last) const
; 2132 : 		{	// convert [_First, _Last) in place to lower case
; 2133 : 		return (do_tolower(_First, _Last));
; 2134 : 		}
; 2135 : 
; 2136 : 	_Elem __CLR_OR_THIS_CALL toupper(_Elem _Ch) const
; 2137 : 		{	// convert element to upper case
; 2138 : 		return (do_toupper(_Ch));
; 2139 : 		}
; 2140 : 
; 2141 : 	const _Elem *__CLR_OR_THIS_CALL toupper(_Elem *_First, const _Elem *_Last) const
; 2142 : 		{	// convert [_First, _Last) in place to upper case
; 2143 : 		return (do_toupper(_First, _Last));
; 2144 : 		}
; 2145 : 
; 2146 : 	_Elem __CLR_OR_THIS_CALL widen(char _Byte) const
; 2147 : 		{	// widen char
; 2148 : 		return (do_widen(_Byte));
; 2149 : 		}
; 2150 : 
; 2151 : 	const char *__CLR_OR_THIS_CALL widen(const char *_First, const char *_Last,
; 2152 : 		_Elem *_Dest) const
; 2153 : 		{	// widen chars in [_First, _Last)
; 2154 : 		return (do_widen(_First, _Last, _Dest));
; 2155 : 		}
; 2156 : 
; 2157 : 	char __CLR_OR_THIS_CALL narrow(_Elem _Ch, char _Dflt = '\0') const
; 2158 : 		{	// narrow element to char
; 2159 : 		return (do_narrow(_Ch, _Dflt));
; 2160 : 		}
; 2161 : 
; 2162 : 	const _Elem *__CLR_OR_THIS_CALL narrow(const _Elem *_First, const _Elem *_Last,
; 2163 : 		char _Dflt, char *_Dest) const
; 2164 : 		{	// narrow elements in [_First, _Last) to chars
; 2165 : 		return (do_narrow(_First, _Last, _Dflt, _Dest));
; 2166 : 		}
; 2167 : 
; 2168 : 	__PURE_APPDOMAIN_GLOBAL static locale::id id;
; 2169 : 
; 2170 : 	explicit __CLR_OR_THIS_CALL ctype(size_t _Refs = 0)
; 2171 : 		: ctype_base(_Refs)
; 2172 : 		{	// construct from current locale
; 2173 : 		_BEGIN_LOCINFO(_Lobj)
; 2174 : 			_Init(_Lobj);
; 2175 : 		_END_LOCINFO()
; 2176 : 		}
; 2177 : 
; 2178 : 	__CLR_OR_THIS_CALL ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
; 2179 : 		: ctype_base(_Refs)
; 2180 : 		{	// construct from specified locale
; 2181 : 		_Init(_Lobj);
; 2182 : 		}
; 2183 : 
; 2184 : 	static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet **_Ppf = 0,
; 2185 : 		const locale *_Ploc = 0)
; 2186 : 		{	// return locale category mask and construct standard facet
; 2187 : 		if (_Ppf != 0 && *_Ppf == 0)
; 2188 : 			*_Ppf = _NEW_CRT ctype<_Elem>(
; 2189 : 				_Locinfo(_Ploc->c_str()));
; 2190 : 		return (_X_CTYPE);
; 2191 : 		}
; 2192 : 
; 2193 : protected:
; 2194 : 	virtual __CLR_OR_THIS_CALL ~ctype() _NOEXCEPT
; 2195 : 		{	// destroy the object
; 2196 : 		if (_Ctype._Delfl)
; 2197 : 			free((void *)_Ctype._Table);
; 2198 : 
; 2199 : 		free((void *)_Ctype._LocaleName);
; 2200 : 		}
; 2201 : 
; 2202 : 	void __CLR_OR_THIS_CALL _Init(const _Locinfo& _Lobj)
; 2203 : 		{	// initialize from _Lobj
; 2204 : 		_Ctype = _Lobj._Getctype();
; 2205 : 		_Cvt = _Lobj._Getcvt();
; 2206 : 		}
; 2207 : 
; 2208 : 	virtual bool __CLR_OR_THIS_CALL do_is(mask _Maskval, _Elem _Ch) const
; 2209 : 		{	// test if element fits any mask classifications
; 2210 : 		return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
; 2211 : 			& _Maskval) != 0);
; 2212 : 		}
; 2213 : 
; 2214 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_is(const _Elem *_First, const _Elem *_Last,
; 2215 : 		mask *_Dest) const
; 2216 : 		{	// get mask sequence for elements in [_First, _Last)
; 2217 : 		_DEBUG_RANGE(_First, _Last);
; 2218 : 		_DEBUG_POINTER(_Dest);
; 2219 : 		for (; _First != _Last; ++_First, ++_Dest)
; 2220 : 			*_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
; 2221 : 		return (_First);
; 2222 : 		}
; 2223 : 
; 2224 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_scan_is(mask _Maskval,
; 2225 : 		const _Elem *_First, const _Elem *_Last) const
; 2226 : 		{	// find first in [_First, _Last) that fits mask classification
; 2227 : 		_DEBUG_RANGE(_First, _Last);
; 2228 : 		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
; 2229 : 			;
; 2230 : 		return (_First);
; 2231 : 		}
; 2232 : 
; 2233 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_scan_not(mask _Maskval,
; 2234 : 		const _Elem *_First, const _Elem *_Last) const
; 2235 : 		{	// find first in [_First, _Last) not fitting mask classification
; 2236 : 		_DEBUG_RANGE(_First, _Last);
; 2237 : 		for (; _First != _Last && is(_Maskval, *_First); ++_First)
; 2238 : 			;
; 2239 : 		return (_First);
; 2240 : 		}
; 2241 : 
; 2242 : 	virtual _Elem __CLR_OR_THIS_CALL do_tolower(_Elem _Ch) const
; 2243 : 		{	// convert element to lower case
; 2244 : 		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
; 2245 : 		if (_Byte == '\0')
; 2246 : 			return (_Ch);
; 2247 : 		else
; 2248 : 			return (widen((char)_Tolower(_Byte, &_Ctype)));
; 2249 : 		}
; 2250 : 
; 2251 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_tolower(_Elem *_First,
; 2252 : 		const _Elem *_Last) const
; 2253 : 		{	// convert [_First, _Last) in place to lower case
; 2254 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2255 : 		for (; _First != _Last; ++_First)
; 2256 : 			{	// convert *_First to lower case
; 2257 : 			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
; 2258 : 			if (_Byte != '\0')
; 2259 : 				*_First = (widen((char)_Tolower(_Byte, &_Ctype)));
; 2260 : 			}
; 2261 : 		return ((const _Elem *)_First);
; 2262 : 		}
; 2263 : 
; 2264 : 	virtual _Elem __CLR_OR_THIS_CALL do_toupper(_Elem _Ch) const
; 2265 : 		{	// convert element to upper case
; 2266 : 		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
; 2267 : 		if (_Byte == '\0')
; 2268 : 			return (_Ch);
; 2269 : 		else
; 2270 : 			return (widen((char)_Toupper(_Byte, &_Ctype)));
; 2271 : 		}
; 2272 : 
; 2273 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_toupper(_Elem *_First,
; 2274 : 		const _Elem *_Last) const
; 2275 : 		{	// convert [_First, _Last) in place to upper case
; 2276 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2277 : 		for (; _First != _Last; ++_First)
; 2278 : 			{	// convert *_First to upper case
; 2279 : 			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
; 2280 : 			if (_Byte != '\0')
; 2281 : 				*_First = (widen((char)_Toupper(_Byte, &_Ctype)));
; 2282 : 			}
; 2283 : 		return ((const _Elem *)_First);
; 2284 : 		}
; 2285 : 
; 2286 : 	virtual _Elem __CLR_OR_THIS_CALL do_widen(char _Byte) const
; 2287 : 		{	// widen char
; 2288 : 		return (_MAKLOCCHR(_Elem, _Byte, _Cvt));
; 2289 : 		}
; 2290 : 
; 2291 : 	virtual const char *__CLR_OR_THIS_CALL do_widen(const char *_First,
; 2292 : 		const char *_Last, _Elem *_Dest) const
; 2293 : 		{	// widen chars in [_First, _Last)
; 2294 : 		_DEBUG_RANGE(_First, _Last);
; 2295 : 		_DEBUG_POINTER(_Dest);
; 2296 : 		for (; _First != _Last; ++_First, ++_Dest)
; 2297 : 			*_Dest = _MAKLOCCHR(_Elem, *_First, _Cvt);
; 2298 : 		return (_First);
; 2299 : 		}
; 2300 : 
; 2301 : 	char __CLR_OR_THIS_CALL _Donarrow(_Elem _Ch, char _Dflt) const
; 2302 : 		{	// narrow element to char
; 2303 : 		char _Byte;
; 2304 : 		if (_Ch == (_Elem)0)
; 2305 : 			return ('\0');
; 2306 : 		else if ((_Byte = _MAKLOCBYTE(_Elem, _Ch, _Cvt)) == '\0')
; 2307 : 			return (_Dflt);
; 2308 : 		else
; 2309 : 			return (_Byte);
; 2310 : 		}
; 2311 : 
; 2312 : 	virtual char __CLR_OR_THIS_CALL do_narrow(_Elem _Ch, char _Dflt) const
; 2313 : 		{	// narrow element to char
; 2314 : 		return (_Donarrow(_Ch, _Dflt));
; 2315 : 		}
; 2316 : 
; 2317 : 	virtual const _Elem *__CLR_OR_THIS_CALL do_narrow(const _Elem *_First,
; 2318 : 		const _Elem *_Last, char _Dflt, char *_Dest) const
; 2319 : 		{	// narrow elements in [_First, _Last) to chars
; 2320 : 		_DEBUG_RANGE(_First, _Last);
; 2321 : 		_DEBUG_POINTER(_Dest);
; 2322 : 		for (; _First != _Last; ++_First, ++_Dest)
; 2323 : 			*_Dest = _Donarrow(*_First, _Dflt);
; 2324 : 		return (_First);
; 2325 : 		}
; 2326 : 
; 2327 : private:
; 2328 : 	_Locinfo::_Ctypevec _Ctype;	// locale info passed to _Tolower, etc.
; 2329 : 	_Locinfo::_Cvtvec _Cvt;		// conversion information
; 2330 : 	};
; 2331 : 
; 2332 : 		// STATIC ctype::id OBJECT
; 2333 : template<class _Elem>
; 2334 : 	locale::id ctype<_Elem>::id;
; 2335 : 
; 2336 : 		// CLASS ctype<char>
; 2337 : template<>
; 2338 : 	class _CRTIMP2_PURE ctype<char>
; 2339 : 	: public ctype_base
; 2340 : 	{	// facet for classifying char elements, converting cases
; 2341 : 	typedef ctype<char> _Myt;
; 2342 : 
; 2343 : public:
; 2344 : 	typedef char _Elem;
; 2345 : 	typedef _Elem char_type;
; 2346 : 
; 2347 : 	bool __CLR_OR_THIS_CALL is(mask _Maskval, _Elem _Ch) const
; 2348 : 		{	// test if element fits any mask classifications
; 2349 : 		return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
; 2350 : 		}
; 2351 : 
; 2352 : 	const _Elem *__CLR_OR_THIS_CALL is(const _Elem *_First,
; 2353 : 		const _Elem *_Last, mask *_Dest) const
; 2354 : 		{	// get mask sequence for elements in [_First, _Last)
; 2355 : 		_DEBUG_RANGE(_First, _Last);
; 2356 : 		_DEBUG_POINTER(_Dest);
; 2357 : 		for (; _First != _Last; ++_First, ++_Dest)
; 2358 : 			*_Dest = _Ctype._Table[(unsigned char)*_First];
; 2359 : 		return (_First);
; 2360 : 		}
; 2361 : 
; 2362 : 	const _Elem *__CLR_OR_THIS_CALL scan_is(mask _Maskval,
; 2363 : 		const _Elem *_First, const _Elem *_Last) const
; 2364 : 		{	// find first in [_First, _Last) that fits mask classification
; 2365 : 		_DEBUG_RANGE(_First, _Last);
; 2366 : 		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
; 2367 : 			;
; 2368 : 		return (_First);
; 2369 : 		}
; 2370 : 
; 2371 : 	const _Elem *__CLR_OR_THIS_CALL scan_not(mask _Maskval,
; 2372 : 		const _Elem *_First, const _Elem *_Last) const
; 2373 : 		{	// find first in [_First, _Last) not fitting mask classification
; 2374 : 		_DEBUG_RANGE(_First, _Last);
; 2375 : 		for (; _First != _Last && is(_Maskval, *_First); ++_First)
; 2376 : 			;
; 2377 : 		return (_First);
; 2378 : 		}
; 2379 : 
; 2380 : 	_Elem __CLR_OR_THIS_CALL tolower(_Elem _Ch) const
; 2381 : 		{	// convert element to lower case
; 2382 : 		return (do_tolower(_Ch));
; 2383 : 		}
; 2384 : 
; 2385 : 	const _Elem *__CLR_OR_THIS_CALL tolower(_Elem *_First, const _Elem *_Last) const
; 2386 : 		{	// convert [_First, _Last) in place to lower case
; 2387 : 		return (do_tolower(_First, _Last));
; 2388 : 		}
; 2389 : 
; 2390 : 	_Elem __CLR_OR_THIS_CALL toupper(_Elem _Ch) const
; 2391 : 		{	// convert element to upper case
; 2392 : 		return (do_toupper(_Ch));
; 2393 : 		}
; 2394 : 
; 2395 : 	const _Elem *__CLR_OR_THIS_CALL toupper(_Elem *_First, const _Elem *_Last) const
; 2396 : 		{	// convert [_First, _Last) in place to upper case
; 2397 : 		return (do_toupper(_First, _Last));
; 2398 : 		}
; 2399 : 
; 2400 : 	_Elem __CLR_OR_THIS_CALL widen(char _Byte) const
; 2401 : 		{	// widen char
; 2402 : 		return (do_widen(_Byte));

  0005e	8b 06		 mov	 eax, DWORD PTR [esi]
  00060	6a 20		 push	 32			; 00000020H
  00062	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00065	8b ce		 mov	 ecx, esi
  00067	ff d0		 call	 eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 137  : 		}

  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	5e		 pop	 esi
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::widen
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 26   : 		{	// construct with no buffers

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	6a 04		 push	 4
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	8b f8		 mov	 edi, eax
  00013	83 c4 04	 add	 esp, 4
  00016	85 ff		 test	 edi, edi
  00018	74 0e		 je	 SHORT $LN3@basic_stre
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 329  : 		{	// construct from current locale

  0001a	6a 01		 push	 1
  0001c	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  00021	83 c4 04	 add	 esp, 4
  00024	89 07		 mov	 DWORD PTR [edi], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 26   : 		{	// construct with no buffers

  00026	eb 02		 jmp	 SHORT $LN4@basic_stre
$LN3@basic_stre:
  00028	33 ff		 xor	 edi, edi
$LN4@basic_stre:

; 291  : 		}
; 292  : 
; 293  : 	void __CLR_OR_THIS_CALL setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
; 294  : 		{	// set pointers for write buffer, extended version
; 295  : 		*_IPfirst = _First;
; 296  : 		*_IPnext = _Next;
; 297  : 		*_IPcount = (int)(_Last - _Next);
; 298  : 		}
; 299  : 
; 300  : 	_Elem *__CLR_OR_THIS_CALL _Pninc()
; 301  : 		{	// increment current position in write buffer
; 302  : 		--*_IPcount;
; 303  : 		return ((*_IPnext)++);
; 304  : 		}
; 305  : 
; 306  : 	streamsize __CLR_OR_THIS_CALL _Pnavail() const
; 307  : 		{	// count number of available positions in write buffer
; 308  : 		return (*_IPnext != 0 ? *_IPcount : 0);
; 309  : 		}
; 310  : 
; 311  : 	void __CLR_OR_THIS_CALL _Init()
; 312  : 		{	// initialize buffer parameters for no buffers
; 313  : 		_IGfirst = &_Gfirst;

  0002a	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0002d	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 314  : 		_IPfirst = &_Pfirst;
; 315  : 		_IGnext = &_Gnext;

  00030	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00033	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 316  : 		_IPnext = &_Pnext;

  00036	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00039	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 26   : 		{	// construct with no buffers

  0003c	89 7e 34	 mov	 DWORD PTR [esi+52], edi

; 317  : 		_IGcount = &_Gcount;

  0003f	8d 46 24	 lea	 eax, DWORD PTR [esi+36]
  00042	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00045	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00048	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 318  : 		_IPcount = &_Pcount;

  0004b	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  0004e	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;
; 266  : 		return ((*_IGnext)++);
; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);
; 278  : 		}
; 279  : 
; 280  : 	void __CLR_OR_THIS_CALL pbump(int _Off)
; 281  : 		{	// alter current position in write buffer by _Off
; 282  : 		*_IPcount -= _Off;
; 283  : 		*_IPnext += _Off;
; 284  : 		}
; 285  : 
; 286  : 	void __CLR_OR_THIS_CALL setp(_Elem *_First, _Elem *_Last)
; 287  : 		{	// set pointers for write buffer
; 288  : 		*_IPfirst = _First;

  00051	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 289  : 		*_IPnext = _First;

  00057	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0005a	5f		 pop	 edi
  0005b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 290  : 		*_IPcount = (int)(_Last - _First);

  00061	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00064	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 29   : 
; 30   : 	__CLR_OR_THIS_CALL basic_streambuf(_Uninitialized)
; 31   : 		{	// construct uninitialized
; 32   : 		}
; 33   : 
; 34   : 	__CLR_OR_THIS_CALL basic_streambuf(const _Myt& _Right)
; 35   : 		: _Plocale(_NEW_CRT locale(_Right.getloc()))
; 36   : 		{	// construct by copying _Right
; 37   : 		_Init();
; 38   : 		setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
; 39   : 		setg(_Right.eback(), _Right.gptr(), _Right.egptr());
; 40   : 		}
; 41   : 
; 42   : 	_Myt& __CLR_OR_THIS_CALL operator=(const _Myt& _Right)
; 43   : 		{	// assign from _Right
; 44   : 		if (this != &_Right)
; 45   : 			{	// different, worth copying
; 46   : 			setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
; 47   : 			setg(_Right.eback(), _Right.gptr(), _Right.egptr());
; 48   : 			pubimbue(_Right.getloc());
; 49   : 			}
; 50   : 		return (*this);
; 51   : 		}
; 52   : 
; 53   : 	void __CLR_OR_THIS_CALL swap(_Myt& _Right)
; 54   : 		{	// swap with _Right
; 55   : 		if (this != &_Right)
; 56   : 			{	// different, worth swapping
; 57   : 			_Elem *_Pfirst = pbase();
; 58   : 			_Elem *_Pnext = pptr();
; 59   : 			_Elem *_Pend = epptr();
; 60   : 			_Elem *_Gfirst = eback();
; 61   : 			_Elem *_Gnext = gptr();
; 62   : 			_Elem *_Gend = egptr();
; 63   : 
; 64   : 			setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
; 65   : 			_Right.setp(_Pfirst, _Pnext, _Pend);
; 66   : 
; 67   : 			setg(_Right.eback(), _Right.gptr(), _Right.egptr());
; 68   : 			_Right.setg(_Gfirst, _Gnext, _Gend);
; 69   : 
; 70   : 			_STD swap(_Plocale, _Right._Plocale);
; 71   : 			}
; 72   : 		}
; 73   : 
; 74   : public:
; 75   : 	typedef _Elem char_type;
; 76   : 	typedef _Traits traits_type;
; 77   : 
; 78   : 	virtual __CLR_OR_THIS_CALL ~basic_streambuf() _NOEXCEPT
; 79   : 		{	// destroy the object
; 80   : 		_DELETE_CRT(_Plocale);
; 81   : 		}
; 82   : 
; 83   : 	typedef typename _Traits::int_type int_type;
; 84   : 	typedef typename _Traits::pos_type pos_type;
; 85   : 	typedef typename _Traits::off_type off_type;
; 86   : 
; 87   : 	pos_type __CLR_OR_THIS_CALL pubseekoff(off_type _Off,
; 88   : 		ios_base::seekdir _Way,
; 89   : 		ios_base::openmode _Mode = ios_base::in | ios_base::out)
; 90   : 		{	// change position by _Off, according to _Way, _Mode
; 91   : 		return (seekoff(_Off, _Way, _Mode));
; 92   : 		}
; 93   : 
; 94   : 	pos_type __CLR_OR_THIS_CALL pubseekoff(off_type _Off,
; 95   : 		ios_base::seek_dir _Way,
; 96   : 		ios_base::open_mode _Mode)
; 97   : 		{	// change position by _Off, according to _Way, _Mode (old style)
; 98   : 		return (pubseekoff(_Off, (ios_base::seekdir)_Way,
; 99   : 			(ios_base::openmode)_Mode));
; 100  : 		}
; 101  : 
; 102  : 	pos_type __CLR_OR_THIS_CALL pubseekpos(pos_type _Pos,
; 103  : 		ios_base::openmode _Mode = ios_base::in | ios_base::out)
; 104  : 		{	// change position to _Pos, according to _Mode
; 105  : 		return (seekpos(_Pos, _Mode));
; 106  : 		}
; 107  : 
; 108  : 	pos_type __CLR_OR_THIS_CALL pubseekpos(pos_type _Pos,
; 109  : 		ios_base::open_mode _Mode)
; 110  : 		{	// change position to _Pos, according to _Mode (old style)
; 111  : 		return (seekpos(_Pos, (ios_base::openmode)_Mode));
; 112  : 		}
; 113  : 
; 114  : 	_Myt *__CLR_OR_THIS_CALL pubsetbuf(_Elem *_Buffer,
; 115  : 		streamsize _Count)
; 116  : 		{	// offer _Buffer to external agent
; 117  : 		return (setbuf(_Buffer, _Count));
; 118  : 		}
; 119  : 
; 120  : 	locale __CLR_OR_THIS_CALL pubimbue(const locale &_Newlocale)
; 121  : 		{	// set locale to argument
; 122  : 		locale _Oldlocale = *_Plocale;
; 123  : 		imbue(_Newlocale);
; 124  : 		*_Plocale = _Newlocale;
; 125  : 		return (_Oldlocale);
; 126  : 		}
; 127  : 
; 128  : 	locale __CLR_OR_THIS_CALL getloc() const
; 129  : 		{	// get locale
; 130  : 		return (*_Plocale);
; 131  : 		}
; 132  : 
; 133  : 	streamsize __CLR_OR_THIS_CALL in_avail()
; 134  : 		{	// return count of buffered input characters
; 135  : 		streamsize _Res = _Gnavail();
; 136  : 		return (0 < _Res ? _Res : showmanyc());
; 137  : 		}
; 138  : 
; 139  : 	int __CLR_OR_THIS_CALL pubsync()
; 140  : 		{	// synchronize with external agent
; 141  : 		return (sync());
; 142  : 		}
; 143  : 
; 144  : 	int_type __CLR_OR_THIS_CALL sbumpc()
; 145  : 		{	// get a character and point past it
; 146  : 		return (0 < _Gnavail()
; 147  : 			? _Traits::to_int_type(*_Gninc()) : uflow());
; 148  : 		}
; 149  : 
; 150  : 	int_type __CLR_OR_THIS_CALL sgetc()
; 151  : 		{	// get a character and don't point past it
; 152  : 		return (0 < _Gnavail()
; 153  : 			? _Traits::to_int_type(*gptr()) : underflow());
; 154  : 		}
; 155  : 
; 156  : 	streamsize __CLR_OR_THIS_CALL sgetn(_Elem *_Ptr,
; 157  : 		streamsize _Count)
; 158  : 		{	// get up to _Count characters into array beginning at _Ptr
; 159  : 		return (xsgetn(_Ptr, _Count));
; 160  : 		}
; 161  : 
; 162  : 	int_type __CLR_OR_THIS_CALL snextc()
; 163  : 		{	// point to next character and return it
; 164  : 		return (1 < _Gnavail()
; 165  : 			? _Traits::to_int_type(*_Gnpreinc())
; 166  : 			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
; 167  : 				? _Traits::eof() : sgetc());
; 168  : 		}
; 169  : 
; 170  : 	int_type __CLR_OR_THIS_CALL sputbackc(_Elem _Ch)
; 171  : 		{	// put back _Ch
; 172  : 		return (gptr() != 0 && eback() < gptr()
; 173  : 			&& _Traits::eq(_Ch, gptr()[-1])
; 174  : 			? _Traits::to_int_type(*_Gndec())
; 175  : 			: pbackfail(_Traits::to_int_type(_Ch)));
; 176  : 		}
; 177  : 
; 178  : 	void __CLR_OR_THIS_CALL stossc()
; 179  : 		{	// point past a character
; 180  : 		if (0 < _Gnavail())
; 181  : 			_Gninc();
; 182  : 		else
; 183  : 			uflow();
; 184  : 		}
; 185  : 
; 186  : 	int_type __CLR_OR_THIS_CALL sungetc()
; 187  : 		{	// back up one position
; 188  : 		return (gptr() != 0 && eback() < gptr()
; 189  : 			? _Traits::to_int_type(*_Gndec()) : pbackfail());
; 190  : 		}
; 191  : 
; 192  : 	int_type __CLR_OR_THIS_CALL sputc(_Elem _Ch)
; 193  : 		{	// put a character
; 194  : 		return (0 < _Pnavail()
; 195  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 196  : 			: overflow(_Traits::to_int_type(_Ch)));
; 197  : 		}
; 198  : 
; 199  : 	streamsize __CLR_OR_THIS_CALL sputn(const _Elem *_Ptr,
; 200  : 		streamsize _Count)
; 201  : 		{	// put _Count characters from array beginning at _Ptr
; 202  : 		return (xsputn(_Ptr, _Count));
; 203  : 		}
; 204  : 
; 205  : 	virtual void __CLR_OR_THIS_CALL _Lock()
; 206  : 		{	// set the thread lock (overridden by basic_filebuf)
; 207  : 		}
; 208  : 
; 209  : 	virtual void __CLR_OR_THIS_CALL _Unlock()
; 210  : 		{	// clear the thread lock (overridden by basic_filebuf)
; 211  : 		}
; 212  : 
; 213  : protected:
; 214  : 	_Elem *__CLR_OR_THIS_CALL eback() const
; 215  : 		{	// return beginning of read buffer
; 216  : 		return (*_IGfirst);
; 217  : 		}
; 218  : 
; 219  : 	_Elem *__CLR_OR_THIS_CALL gptr() const
; 220  : 		{	// return current position in read buffer
; 221  : 		return (*_IGnext);
; 222  : 		}
; 223  : 
; 224  : 	_Elem *__CLR_OR_THIS_CALL pbase() const
; 225  : 		{	// return beginning of write buffer
; 226  : 		return (*_IPfirst);
; 227  : 		}
; 228  : 
; 229  : 	_Elem *__CLR_OR_THIS_CALL pptr() const
; 230  : 		{	// return current position in write buffer
; 231  : 		return (*_IPnext);
; 232  : 		}
; 233  : 
; 234  : 	_Elem *__CLR_OR_THIS_CALL egptr() const
; 235  : 		{	// return end of read buffer
; 236  : 		return (*_IGnext + *_IGcount);
; 237  : 		}
; 238  : 
; 239  : 	void __CLR_OR_THIS_CALL gbump(int _Off)
; 240  : 		{	// alter current position in read buffer by _Off
; 241  : 		*_IGcount -= _Off;
; 242  : 		*_IGnext += _Off;
; 243  : 		}
; 244  : 
; 245  : 	void __CLR_OR_THIS_CALL setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
; 246  : 		{	// set pointers for read buffer
; 247  : 		*_IGfirst = _First;

  0006a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0006d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 248  : 		*_IGnext = _Next;

  00073	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00076	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 249  : 		*_IGcount = (int)(_Last - _Next);

  0007c	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0007f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 27   : 		_Init();
; 28   : 		}

  00085	8b c6		 mov	 eax, esi
  00087	5e		 pop	 esi
  00088	c3		 ret	 0
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::getloc, COMDAT
; _this$ = ecx

; 129  : 		{	// get locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 323  : 		{	// construct by copying

  00003	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00006	56		 push	 esi
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000c	89 0e		 mov	 DWORD PTR [esi], ecx

; 324  : 		_Ptr->_Incref();

  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	ff 52 04	 call	 DWORD PTR [edx+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 130  : 		return (*_Plocale);

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi

; 131  : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::getloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setg, COMDAT
; _this$ = ecx

; 246  : 		{	// set pointers for read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 247  : 		*_IGfirst = _First;

  00003	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 02		 mov	 DWORD PTR [edx], eax

; 248  : 		*_IGnext = _Next;

  0000b	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0000e	8b 55 0c	 mov	 edx, DWORD PTR __Next$[ebp]
  00011	56		 push	 esi

; 249  : 		*_IGcount = (int)(_Last - _Next);

  00012	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  00015	89 10		 mov	 DWORD PTR [eax], edx
  00017	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0001a	2b f2		 sub	 esi, edx
  0001c	89 30		 mov	 DWORD PTR [eax], esi
  0001e	5e		 pop	 esi

; 250  : 		}

  0001f	5d		 pop	 ebp
  00020	c2 0c 00	 ret	 12			; 0000000cH
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setg
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 313  : 		_IGfirst = &_Gfirst;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 314  : 		_IPfirst = &_Pfirst;
; 315  : 		_IGnext = &_Gnext;

  00006	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  00009	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 316  : 		_IPnext = &_Pnext;

  0000c	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  0000f	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 317  : 		_IGcount = &_Gcount;

  00012	8d 41 24	 lea	 eax, DWORD PTR [ecx+36]
  00015	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
  00018	8d 51 08	 lea	 edx, DWORD PTR [ecx+8]
  0001b	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 318  : 		_IPcount = &_Pcount;

  0001e	8d 41 28	 lea	 eax, DWORD PTR [ecx+40]
  00021	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;
; 266  : 		return ((*_IGnext)++);
; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);
; 278  : 		}
; 279  : 
; 280  : 	void __CLR_OR_THIS_CALL pbump(int _Off)
; 281  : 		{	// alter current position in write buffer by _Off
; 282  : 		*_IPcount -= _Off;
; 283  : 		*_IPnext += _Off;
; 284  : 		}
; 285  : 
; 286  : 	void __CLR_OR_THIS_CALL setp(_Elem *_First, _Elem *_Last)
; 287  : 		{	// set pointers for write buffer
; 288  : 		*_IPfirst = _First;

  00024	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 289  : 		*_IPnext = _First;

  0002a	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 290  : 		*_IPcount = (int)(_Last - _First);

  00033	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 247  : 		*_IGfirst = _First;

  0003c	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 248  : 		*_IGnext = _Next;

  00045	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00048	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 249  : 		*_IGcount = (int)(_Last - _Next);

  0004e	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00051	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 319  : 		setp(0, 0);
; 320  : 		setg(0, 0, 0);
; 321  : 		}

  00057	c3		 ret	 0
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z
_TEXT	SEGMENT
__Gf$ = 8						; size = 4
__Gn$ = 12						; size = 4
__Gc$ = 16						; size = 4
__Pf$ = 20						; size = 4
__Pn$ = 24						; size = 4
__Pc$ = 28						; size = 4
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 325  : 		{	// initialize buffer parameters as specified

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 326  : 		_IGfirst = _Gf;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Gf$[ebp]
  00006	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 327  : 		_IPfirst = _Pf;

  00009	8b 45 14	 mov	 eax, DWORD PTR __Pf$[ebp]
  0000c	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 328  : 		_IGnext = _Gn;

  0000f	8b 45 0c	 mov	 eax, DWORD PTR __Gn$[ebp]
  00012	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 329  : 		_IPnext = _Pn;

  00015	8b 45 18	 mov	 eax, DWORD PTR __Pn$[ebp]
  00018	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 330  : 		_IGcount = _Gc;

  0001b	8b 45 10	 mov	 eax, DWORD PTR __Gc$[ebp]
  0001e	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 331  : 		_IPcount = _Pc;

  00021	8b 45 1c	 mov	 eax, DWORD PTR __Pc$[ebp]
  00024	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 332  : 		}

  00027	5d		 pop	 ebp
  00028	c2 18 00	 ret	 24			; 00000018H
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ
_TEXT	SEGMENT
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 72   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 73   : 		if (this->_Getcont() == 0
; 74   : 			|| this->_Ptr == 0
; 75   : 			|| this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 76   : 			|| ((_Mystr *)this->_Getcont())->_Myptr()
; 77   : 				+ ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
; 78   : 			{	// report error
; 79   : 			_DEBUG_ERROR("string iterator not dereferencable");
; 80   : 			_SCL_SECURE_OUT_OF_RANGE;
; 81   : 			}
; 82   : 
; 83   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 84   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 85   : 		_SCL_SECURE_VALIDATE_RANGE(
; 86   : 			((_Mystr *)this->_Getcont())->_Myptr() <= this->_Ptr
; 87   : 			&& this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 88   : 				+ ((_Mystr *)this->_Getcont())->_Mysize);
; 89   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 90   : 
; 91   : 		_Analysis_assume_(this->_Ptr != 0);
; 92   : 
; 93   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 94   : 		}

  00002	c3		 ret	 0
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Getal, COMDAT
; _this$dead$ = ecx

; 646  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 647  : 		return (_Alty());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$dead$ = 12					; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned char> >::deallocate, COMDAT
; _this$dead$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 586  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 887  : 		_Mybase::deallocate(_Ptr, _Count);
; 888  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >, COMDAT
; _this$ = ecx

; 485  : 		{	// initialize values
; 486  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 487  : 		_Mylast = pointer();

  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 488  : 		_Myend = pointer();

  0000d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 489  : 		}

  00014	8b c1		 mov	 eax, ecx
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__First2$ = 12						; size = 4
__Last2$ = 16						; size = 4
__Mid2$ = 20						; size = 4
?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z PROC	; std::codecvt<char,char,int>::unshift, COMDAT
; _this$ = ecx

; 874  : 		{	// generate bytes to return to default shift state

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 875  : 		return (do_unshift(_State, _First2, _Last2, _Mid2));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 876  : 		}

  00005	5d		 pop	 ebp

; 875  : 		return (do_unshift(_State, _First2, _Last2, _Mid2));

  00006	ff 60 20	 jmp	 DWORD PTR [eax+32]
?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z ENDP	; std::codecvt<char,char,int>::unshift
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 317  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 54   : 		this->_Ptr = _Parg;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 318  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEAAVMatrix@geom@@XZ
_TEXT	SEGMENT
??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEAAVMatrix@geom@@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*, COMDAT
; _this$ = ecx

; 603  : 		{	// return designated object

  00000	8b d1		 mov	 edx, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]
  00004	85 c0		 test	 eax, eax
  00006	75 0e		 jne	 SHORT $LN7@operator
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00008	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 604  : 		return ((reference)**(_Mybase *)this);

  0000b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0000e	49		 dec	 ecx
  0000f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 604  : 		return ((reference)**(_Mybase *)this);

  00012	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 605  : 		}

  00015	c3		 ret	 0
$LN7@operator:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00018	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 604  : 		return ((reference)**(_Mybase *)this);

  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0001e	49		 dec	 ecx
  0001f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 604  : 		return ((reference)**(_Mybase *)this);

  00022	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 605  : 		}

  00025	c3		 ret	 0
??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEAAVMatrix@geom@@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
__Lock$1 = -4						; size = 4
__Lock$2 = 8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$dead$ = 12					; size = 4
??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-, COMDAT
; _this$ = ecx

; 656  : 		{	// return this - integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 118  : 		{	// copy an iterator

  00009	33 db		 xor	 ebx, ebx

; 119  : 		*this = _Right;
; 120  : 		}
; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)

  0000b	8b 07		 mov	 eax, DWORD PTR [edi]
  0000d	85 c0		 test	 eax, eax
  0000f	74 1c		 je	 SHORT $LN16@operator

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00013	85 c0		 test	 eax, eax
  00015	75 14		 jne	 SHORT $LN17@operator

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00017	6a 03		 push	 3
  00019	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  0001c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00021	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00024	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  00029	eb 02		 jmp	 SHORT $LN16@operator
$LN17@operator:

; 166  : 			_Myproxy = _Parent_proxy;

  0002b	8b 18		 mov	 ebx, DWORD PTR [eax]
$LN16@operator:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 640  : 		this->_Myoff += _Off;

  0002d	8b 7f 08	 mov	 edi, DWORD PTR [edi+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 118  : 		{	// copy an iterator

  00030	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 640  : 		this->_Myoff += _Off;

  00033	4f		 dec	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 118  : 		{	// copy an iterator

  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0003a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 119  : 		*this = _Right;
; 120  : 		}
; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)

  00041	85 db		 test	 ebx, ebx
  00043	74 2a		 je	 SHORT $LN53@operator

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00045	8b 03		 mov	 eax, DWORD PTR [ebx]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00047	85 c0		 test	 eax, eax
  00049	75 20		 jne	 SHORT $LN43@operator

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  0004b	6a 03		 push	 3
  0004d	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00055	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00058	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0005d	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00060	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 658  : 		return (_Tmp -= _Off);

  00061	8b c6		 mov	 eax, esi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx

; 659  : 		}

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
$LN43@operator:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  0006b	8b 00		 mov	 eax, DWORD PTR [eax]
  0006d	89 06		 mov	 DWORD PTR [esi], eax
$LN53@operator:
  0006f	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00072	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 658  : 		return (_Tmp -= _Off);

  00073	8b c6		 mov	 eax, esi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx

; 659  : 		}

  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 08 00	 ret	 8
??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Lock$1 = 8						; size = 4
___that$ = 8						; size = 4
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00007	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]

; 118  : 		{	// copy an iterator

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00017	8b 07		 mov	 eax, DWORD PTR [edi]
  00019	85 c0		 test	 eax, eax
  0001b	74 2a		 je	 SHORT $LN14@Deque_iter

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  0001d	8b 00		 mov	 eax, DWORD PTR [eax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  0001f	85 c0		 test	 eax, eax
  00021	75 20		 jne	 SHORT $LN15@Deque_iter

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00023	6a 03		 push	 3
  00025	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00028	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  0002d	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00030	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00035	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00038	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003b	5f		 pop	 edi
  0003c	8b c6		 mov	 eax, esi
  0003e	5e		 pop	 esi
  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
$LN15@Deque_iter:

; 151  : 		else
; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  00043	8b 00		 mov	 eax, DWORD PTR [eax]
  00045	89 06		 mov	 DWORD PTR [esi], eax
$LN14@Deque_iter:
  00047	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0004a	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004d	5f		 pop	 edi
  0004e	8b c6		 mov	 eax, esi
  00050	5e		 pop	 esi
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
?deallocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@I@Z PROC ; std::allocator<gfxu::VertexUVRGBA>::deallocate, COMDAT
; _this$dead$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 586  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 587  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@I@Z ENDP ; std::allocator<gfxu::VertexUVRGBA>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEPAVVertexUVRGBA@gfxu@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEPAVVertexUVRGBA@gfxu@@I@Z PROC ; std::allocator<gfxu::VertexUVRGBA>::allocate, COMDAT
; _this$dead$ = ecx

; 590  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 1c		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00011	77 1b		 ja	 SHORT $LN11@allocate
  00013	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00016	c1 e0 03	 shl	 eax, 3
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001f	8b c8		 mov	 ecx, eax
  00021	83 c4 04	 add	 esp, 4
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 591  : 		return (_Allocate(_Count, (pointer)0));

  00028	8b c1		 mov	 eax, ecx

; 592  : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002e	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00033	cc		 int	 3
?allocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEPAVVertexUVRGBA@gfxu@@I@Z ENDP ; std::allocator<gfxu::VertexUVRGBA>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAIABV?$allocator@VVertexUVRGBA@gfxu@@@2@@Z
_TEXT	SEGMENT
?max_size@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAIABV?$allocator@VVertexUVRGBA@gfxu@@@2@@Z PROC ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::max_size, COMDAT
; __Al$dead$ = ecx

; 762  : 		return (_Al.max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 763  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAIABV?$allocator@VVertexUVRGBA@gfxu@@@2@@Z ENDP ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?max_size@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBEIXZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::max_size, COMDAT
; _this$dead$ = ecx

; 1377 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 03	 mov	 eax, 67108863		; 03ffffffH

; 1378 : 		}

  00005	c3		 ret	 0
?max_size@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QBEIXZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Xlen@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IBEXXZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Xlen, COMDAT
; _this$dead$ = ecx

; 1793 : 		_Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IBEXXZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@VMatrix@geom@@@std@@QAEXPAVMatrix@geom@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
?deallocate@?$allocator@VMatrix@geom@@@std@@QAEXPAVMatrix@geom@@I@Z PROC ; std::allocator<geom::Matrix>::deallocate, COMDAT
; _this$dead$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 586  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 587  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@VMatrix@geom@@@std@@QAEXPAVMatrix@geom@@I@Z ENDP ; std::allocator<geom::Matrix>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@VMatrix@geom@@@std@@QAEPAVMatrix@geom@@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?allocate@?$allocator@VMatrix@geom@@@std@@QAEPAVMatrix@geom@@I@Z PROC ; std::allocator<geom::Matrix>::allocate, COMDAT
; _this$dead$ = ecx

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00000	6a 40		 push	 64			; 00000040H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4
  0000a	85 c0		 test	 eax, eax
  0000c	74 03		 je	 SHORT $LN12@allocate

; 591  : 		return (_Allocate(_Count, (pointer)0));
; 592  : 		}

  0000e	c2 04 00	 ret	 4
$LN12@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00011	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN14@allocate:
$LN11@allocate:
  00016	cc		 int	 3
?allocate@?$allocator@VMatrix@geom@@@std@@QAEPAVMatrix@geom@@I@Z ENDP ; std::allocator<geom::Matrix>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 897  : 		{	// construct proxy from _Alval

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00001	6a 08		 push	 8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 897  : 		{	// construct proxy from _Alval

  00003	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 15		 je	 SHORT $LN35@Alloc_prox
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 900  : 		this->_Myproxy = _Alproxy.allocate(1);

  00011	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00013	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 902  : 		this->_Myproxy->_Mycont = this;

  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	89 30		 mov	 DWORD PTR [eax], esi
  00024	5e		 pop	 esi

; 903  : 		}

  00025	c3		 ret	 0
$LN35@Alloc_prox:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00026	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN37@Alloc_prox:
$LN34@Alloc_prox:
  0002b	cc		 int	 3
?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::_Wrap_alloc<std::allocator<geom::Matrix> >, COMDAT
; _this$ = ecx

; 831  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::_Wrap_alloc<std::allocator<geom::Matrix> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV?$allocator@VMatrix@geom@@@1@@Z
_TEXT	SEGMENT
__Right$dead$ = 8					; size = 4
??0?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV?$allocator@VMatrix@geom@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::_Wrap_alloc<std::allocator<geom::Matrix> >, COMDAT
; _this$ = ecx

; 836  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAE@ABV?$allocator@VMatrix@geom@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::_Wrap_alloc<std::allocator<geom::Matrix> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SA?AV?$allocator@VMatrix@geom@@@2@ABV32@@Z
_TEXT	SEGMENT
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SA?AV?$allocator@VMatrix@geom@@@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<geom::Matrix> >::select_on_container_copy_construction, COMDAT
; ___$ReturnUdt$ = ecx
; __Al$dead$ = edx

; 768  : 		return (_Al.select_on_container_copy_construction());

  00000	8b c1		 mov	 eax, ecx

; 769  : 		}

  00002	c3		 ret	 0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SA?AV?$allocator@VMatrix@geom@@@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<geom::Matrix> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@QAEPAPAVMatrix@geom@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@QAEPAPAVMatrix@geom@@I@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix *> >::allocate, COMDAT
; _this$dead$ = ecx

; 875  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN14@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 876  : 		return (_Mybase::allocate(_Count));

  00025	8b c1		 mov	 eax, ecx

; 877  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN16@allocate:
$LN13@allocate:
  00030	cc		 int	 3
?allocate@?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@QAEPAPAVMatrix@geom@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVMatrix@geom@@@std@@QAEXPAPAVMatrix@geom@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
?deallocate@?$allocator@PAVMatrix@geom@@@std@@QAEXPAPAVMatrix@geom@@I@Z PROC ; std::allocator<geom::Matrix *>::deallocate, COMDAT
; _this$dead$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 586  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 587  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVMatrix@geom@@@std@@QAEXPAPAVMatrix@geom@@I@Z ENDP ; std::allocator<geom::Matrix *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??0?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QAE@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::_Deque_val<std::_Deque_simple_types<geom::Matrix> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 79   : 		{	// construct childless container

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 778  : 		_Map = _Mapptr();

  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 779  : 		_Mapsize = 0;

  0000d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 780  : 		_Myoff = 0;

  00014	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 781  : 		_Mysize = 0;

  0001b	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 782  : 		}

  00022	8b c1		 mov	 eax, ecx
  00024	c3		 ret	 0
??0?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::_Deque_val<std::_Deque_simple_types<geom::Matrix> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 288  : 		*_IPfirst = _First;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 289  : 		*_IPnext = _First;

  00009	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 290  : 		*_IPcount = (int)(_Last - _First);

  00012	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 291  : 		}

  0001b	c2 08 00	 ret	 8
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 51   : 	_String_const_iterator(pointer _Parg, const _Container_base *_Pstring)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 		{	// construct with pointer _Parg
; 53   : 		this->_Adopt(_Pstring);
; 54   : 		this->_Ptr = _Parg;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 55   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@E@std@@QAEXPAEI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
?deallocate@?$allocator@E@std@@QAEXPAEI@Z PROC		; std::allocator<unsigned char>::deallocate, COMDAT
; _this$dead$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 586  : 		::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4

; 587  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?deallocate@?$allocator@E@std@@QAEXPAEI@Z ENDP		; std::allocator<unsigned char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<unsigned char> >::_Wrap_alloc<std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 831  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<unsigned char> >::_Wrap_alloc<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Lock$1 = 12						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT
; _this$ = ecx

; 586  : 		{	// construct with offset _Off in *_Pdeque

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 146  : 		if (_Parent == 0)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdeque$[ebp]
  00006	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 586  : 		{	// construct with offset _Off in *_Pdeque

  00007	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 113  : 		{	// construct orphaned iterator

  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0000f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 146  : 		if (_Parent == 0)

  00016	85 c0		 test	 eax, eax
  00018	75 1f		 jne	 SHORT $LN10@Deque_iter

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  0001a	6a 03		 push	 3
  0001c	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  0001f	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00024	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00027	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 306  : 		_Myoff = _Off;

  0002c	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0002f	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 587  : 		}

  00032	8b c6		 mov	 eax, esi
  00034	5e		 pop	 esi
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
$LN10@Deque_iter:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  00039	8b 00		 mov	 eax, DWORD PTR [eax]
  0003b	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 306  : 		_Myoff = _Off;

  0003d	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00040	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 587  : 		}

  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi
  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$dead$ = 8						; size = 4
??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-=, COMDAT
; _this$ = ecx

; 640  : 		this->_Myoff += _Off;

  00000	ff 49 08	 dec	 DWORD PTR [ecx+8]

; 652  : 		return (*this += -_Off);

  00003	8b c1		 mov	 eax, ecx

; 653  : 		}

  00005	c2 04 00	 ret	 4
??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Lock$1 = 12						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT
; _this$ = ecx

; 303  : 	_Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 146  : 		if (_Parent == 0)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdeque$[ebp]
  00006	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 303  : 	_Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)

  00007	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 113  : 		{	// construct orphaned iterator

  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0000f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 146  : 		if (_Parent == 0)

  00016	85 c0		 test	 eax, eax
  00018	75 1f		 jne	 SHORT $LN8@Deque_cons

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  0001a	6a 03		 push	 3
  0001c	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  0001f	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00024	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00027	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 306  : 		_Myoff = _Off;

  0002c	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0002f	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 307  : 		}

  00032	8b c6		 mov	 eax, esi
  00034	5e		 pop	 esi
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
$LN8@Deque_cons:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  00039	8b 00		 mov	 eax, DWORD PTR [eax]
  0003b	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 306  : 		_Myoff = _Off;

  0003d	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00040	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 307  : 		}

  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi
  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEABVMatrix@geom@@XZ
_TEXT	SEGMENT
??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEABVMatrix@geom@@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*, COMDAT
; _this$ = ecx

; 323  : 		{	// return designated object

  00000	8b d1		 mov	 edx, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]
  00004	85 c0		 test	 eax, eax
  00006	75 0e		 jne	 SHORT $LN5@operator
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00008	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 324  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 325  : 
; 326  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 327  : 		if (_Mycont == 0
; 328  : 			|| this->_Myoff < _Mycont->_Myoff
; 329  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 330  : 		{	// report error
; 331  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 332  : 		_SCL_SECURE_OUT_OF_RANGE;
; 333  : 		}
; 334  : 
; 335  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 336  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 337  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 338  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 339  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 340  : 
; 341  : 		_Analysis_assume_(_Mycont != 0);
; 342  : 
; 343  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 344  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 345  : 		return (_Mycont->_Map[_Block][_Off]);

  0000b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0000e	49		 dec	 ecx
  0000f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 324  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 325  : 
; 326  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 327  : 		if (_Mycont == 0
; 328  : 			|| this->_Myoff < _Mycont->_Myoff
; 329  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 330  : 		{	// report error
; 331  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 332  : 		_SCL_SECURE_OUT_OF_RANGE;
; 333  : 		}
; 334  : 
; 335  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 336  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 337  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 338  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 339  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 340  : 
; 341  : 		_Analysis_assume_(_Mycont != 0);
; 342  : 
; 343  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 344  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 345  : 		return (_Mycont->_Map[_Block][_Off]);

  00012	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 346  : 		}

  00015	c3		 ret	 0
$LN5@operator:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00018	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 324  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 325  : 
; 326  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 327  : 		if (_Mycont == 0
; 328  : 			|| this->_Myoff < _Mycont->_Myoff
; 329  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 330  : 		{	// report error
; 331  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 332  : 		_SCL_SECURE_OUT_OF_RANGE;
; 333  : 		}
; 334  : 
; 335  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 336  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 337  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 338  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 339  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 340  : 
; 341  : 		_Analysis_assume_(_Mycont != 0);
; 342  : 
; 343  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 344  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 345  : 		return (_Mycont->_Map[_Block][_Off]);

  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0001e	49		 dec	 ecx
  0001f	23 4a 08	 and	 ecx, DWORD PTR [edx+8]

; 324  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 325  : 
; 326  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 327  : 		if (_Mycont == 0
; 328  : 			|| this->_Myoff < _Mycont->_Myoff
; 329  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 330  : 		{	// report error
; 331  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 332  : 		_SCL_SECURE_OUT_OF_RANGE;
; 333  : 		}
; 334  : 
; 335  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 336  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 337  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 338  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 339  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 340  : 
; 341  : 		_Analysis_assume_(_Mycont != 0);
; 342  : 
; 343  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 344  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 345  : 		return (_Mycont->_Map[_Block][_Off]);

  00022	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 346  : 		}

  00025	c3		 ret	 0
??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEABVMatrix@geom@@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@VVertexUVRGBA@gfxu@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@VVertexUVRGBA@gfxu@@@std@@QBEIXZ PROC ; std::allocator<gfxu::VertexUVRGBA>::max_size, COMDAT
; _this$dead$ = ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 629  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@VVertexUVRGBA@gfxu@@@std@@QBEIXZ ENDP ; std::allocator<gfxu::VertexUVRGBA>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator@VMatrix@geom@@@std@@QBE?AV12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$allocator@VMatrix@geom@@@std@@QBE?AV12@XZ PROC ; std::allocator<geom::Matrix>::select_on_container_copy_construction, COMDAT
; _this$dead$ = ecx

; 544  : 		{	// return this allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 545  : 		return (*this);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 546  : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?select_on_container_copy_construction@?$allocator@VMatrix@geom@@@std@@QBE?AV12@XZ ENDP ; std::allocator<geom::Matrix>::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@VMatrix@geom@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
??0?$allocator@VMatrix@geom@@@std@@QAE@ABV01@@Z PROC	; std::allocator<geom::Matrix>::allocator<geom::Matrix>, COMDAT
; _this$ = ecx

; 570  : 		{	// construct by copying (do nothing)
; 571  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@VMatrix@geom@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<geom::Matrix>::allocator<geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::max_size, COMDAT
; _this$dead$ = ecx

; 914  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 03	 mov	 eax, 67108863		; 03ffffffH

; 915  : 		}

  00005	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVMatrix@geom@@@std@@QAEPAPAVMatrix@geom@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVMatrix@geom@@@std@@QAEPAPAVMatrix@geom@@I@Z PROC ; std::allocator<geom::Matrix *>::allocate, COMDAT
; _this$dead$ = ecx

; 590  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00011	77 18		 ja	 SHORT $LN11@allocate
  00013	c1 e0 02	 shl	 eax, 2
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	8b c8		 mov	 ecx, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	85 c9		 test	 ecx, ecx
  00023	74 06		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 591  : 		return (_Allocate(_Count, (pointer)0));

  00025	8b c1		 mov	 eax, ecx

; 592  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN13@allocate:
$LN10@allocate:
  00030	cc		 int	 3
?allocate@?$allocator@PAVMatrix@geom@@@std@@QAEPAPAVMatrix@geom@@I@Z ENDP ; std::allocator<geom::Matrix *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=, COMDAT
; _this$ = ecx

; 639  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 640  : 		this->_Myoff += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	01 41 08	 add	 DWORD PTR [ecx+8], eax

; 641  : 		return (*this);

  00009	8b c1		 mov	 eax, ecx

; 642  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@2@@Z
_TEXT	SEGMENT
__Lock$1 = 8						; size = 4
__Pdeque$ = 8						; size = 4
?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@2@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Setcont, COMDAT
; _this$ = ecx

; 531  : 		{	// set container pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 146  : 		if (_Parent == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pdeque$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 16		 jne	 SHORT $LN4@Setcont

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  0000a	6a 03		 push	 3
  0000c	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  0000f	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00014	8d 4d 08	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00017	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 533  : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN4@Setcont:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  00020	8b 00		 mov	 eax, DWORD PTR [eax]
  00022	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 533  : 		}

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@2@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Setcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAIABV?$allocator@VMatrix@geom@@@2@@Z
_TEXT	SEGMENT
?max_size@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAIABV?$allocator@VMatrix@geom@@@2@@Z PROC ; std::allocator_traits<std::allocator<geom::Matrix> >::max_size, COMDAT
; __Al$dead$ = ecx

; 762  : 		return (_Al.max_size());

  00000	b8 ff ff ff 03	 mov	 eax, 67108863		; 03ffffffH

; 763  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAIABV?$allocator@VMatrix@geom@@@2@@Z ENDP ; std::allocator_traits<std::allocator<geom::Matrix> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@VMatrix@geom@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@VMatrix@geom@@@std@@QBEIXZ PROC	; std::allocator<geom::Matrix>::max_size, COMDAT
; _this$dead$ = ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 03	 mov	 eax, 67108863		; 03ffffffH

; 629  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@VMatrix@geom@@@std@@QBEIXZ ENDP	; std::allocator<geom::Matrix>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 12
__Lock$3 = -24						; size = 4
__Lock$4 = -20						; size = 4
__Psave$5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 543  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 544  :  #if _NO_LOCALES
; 545  : 	static _Wrap_facet<_Facet> _Wfac;
; 546  : 	return (*(_Facet *)&_Wfac);
; 547  : 
; 548  :  #else /* _NO_LOCALES */
; 549  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00028	6a 00		 push	 0
  0002a	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 79   : 			if (_Id == 0)

  00039	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id

; 550  : 		const locale::facet *_Psave =
; 551  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  0003f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  00045	89 5d f0	 mov	 DWORD PTR __Psave$5[ebp], ebx

; 79   : 			if (_Id == 0)

  00048	85 ff		 test	 edi, edi
  0004a	75 2f		 jne	 SHORT $LN11@use_facet

; 80   : 				{	// still zero, allocate stamp
; 81   : 				_BEGIN_LOCK(_LOCK_LOCALE)

  0004c	57		 push	 edi
  0004d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 82   : 					if (_Id == 0)

  00055	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, edi ; std::ctype<char>::id
  0005b	75 10		 jne	 SHORT $LN10@use_facet

; 83   : 						_Id = ++_Id_cnt;

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00062	40		 inc	 eax
  00063	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, eax ; std::ctype<char>::id
$LN10@use_facet:

; 84   : 				_END_LOCK()

  0006d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00070	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00075	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
$LN11@use_facet:

; 85   : 				}
; 86   : 			return (_Id);
; 87   : 			}
; 88   : 
; 89   : 	private:
; 90   : 		size_t _Id;	// the identifier stamp
; 91   : 
; 92   : 		__PURE_APPDOMAIN_GLOBAL static int _Id_cnt;
; 93   : 
; 94   : 		__CLR_OR_THIS_CALL id(const id&);	// not defined
; 95   : 		id& __CLR_OR_THIS_CALL operator=(const id&);	// not defined
; 96   : 		};
; 97   : 
; 98   : 	class _Locimp;
; 99   : 
; 100  : 			// CLASS facet
; 101  : 	class _CRTIMP2_PURE facet
; 102  : 		: public _Facet_base
; 103  : 		{	// base class for all locale facets, performs reference counting
; 104  : 		friend class locale;
; 105  : 		friend class _Locimp;
; 106  : 
; 107  : 		template<class _Ty>
; 108  : 			friend void __CLRCALL_OR_CDECL _DebugHeapDelete(_Ty *_Ptr);
; 109  : 
; 110  : 	public:
; 111  : 		static size_t __CLRCALL_OR_CDECL _Getcat(const facet ** = 0,
; 112  : 			const locale * = 0)
; 113  : 			{	// get category value, or -1 if no corresponding C category
; 114  : 			return ((size_t)(-1));
; 115  : 			}
; 116  : 
; 117  :   #if defined(_DEBUG) && !defined(_M_X64)
; 118  : 		void *__CLRCALL_OR_CDECL operator new(size_t _Size)
; 119  : 			{	// replace operator new
; 120  : 			return (operator new(_Size, _DebugHeapTag_func(),
; 121  : 				__FILE__, __LINE__));
; 122  : 			}
; 123  : 
; 124  : 		void *__CLRCALL_OR_CDECL operator new(size_t _Size,
; 125  : 			const _DebugHeapTag_t& _Tag, char *_File, int _Line)
; 126  : 			{	// replace debugging operator new
; 127  : 			return (::operator new(_Size, _Tag, _File, _Line));
; 128  : 			}
; 129  : 
; 130  : 		void __CLRCALL_OR_CDECL operator delete(void *_Ptr,
; 131  : 			const _DebugHeapTag_t&, char *, int)
; 132  : 			{	// replace debugging operator delete
; 133  : 			operator delete(_Ptr);
; 134  : 			}
; 135  : 
; 136  : 		void __CLRCALL_OR_CDECL operator delete(void *_Ptr)
; 137  : 			{	// replace operator delete
; 138  : 			_DebugHeapDelete((facet *)_Ptr);
; 139  : 			}
; 140  :   #endif /* defined(_DEBUG) etc. */
; 141  : 
; 142  : 		virtual void __CLR_OR_THIS_CALL _Incref()
; 143  : 			{   // increment use count
; 144  : 			_MT_INCR(_Mtx, _Refs);
; 145  : 			}
; 146  : 
; 147  : 		virtual _Facet_base *__CLR_OR_THIS_CALL _Decref()
; 148  : 			{   // decrement use count
; 149  : 			if (_MT_DECR(_Mtx, _Refs) == 0)
; 150  : 				return (this);
; 151  : 			else
; 152  : 				return (0);
; 153  : 			}
; 154  : 
; 155  : private:
; 156  : 	_Atomic_counter_t _Refs;	// the reference count
; 157  : 
; 158  : 	protected:
; 159  : 		explicit __CLR_OR_THIS_CALL facet(size_t _Initrefs = 0)
; 160  : 			{	// construct with initial reference count
; 161  : 			_Init_atomic_counter(_Refs, (_Atomic_integral_t)_Initrefs);
; 162  : 			}
; 163  : 
; 164  : 		virtual __CLR_OR_THIS_CALL ~facet() _NOEXCEPT
; 165  : 			{	// ensure that derived classes can be destroyed properly
; 166  : 			}
; 167  : 
; 168  : 		private:
; 169  : 			__CLR_OR_THIS_CALL facet(const facet&);	// not defined
; 170  : 
; 171  : 		facet& __CLR_OR_THIS_CALL operator=(const facet&);	// not defined
; 172  : 		};
; 173  : 
; 174  : 			// CLASS _Locimp
; 175  :  #pragma warning(push)
; 176  :  #pragma warning(disable: 4275)
; 177  : 
; 178  : 	class _CRTIMP2_PURE _Locimp
; 179  : 		: public facet
; 180  : 		{	// reference-counted actual implementation of a locale
; 181  : 	protected:
; 182  : 		__CLR_OR_THIS_CALL ~_Locimp() _NOEXCEPT
; 183  : 		{	// destroy the object
; 184  : 		_Locimp_dtor(this);
; 185  : 		}
; 186  : 
; 187  : 	private:
; 188  : 		static _MRTIMP2_PURE_NPURE _Locimp *__CLRCALL_PURE_OR_CDECL
; 189  : 			_New_Locimp(bool _Transparent = false);
; 190  : 		static _MRTIMP2_PURE_NPURE _Locimp *__CLRCALL_PURE_OR_CDECL
; 191  : 			_New_Locimp(const _Locimp& _Right);
; 192  : 
; 193  : 		static _MRTIMP2_PURE_NPURE void __CLRCALL_PURE_OR_CDECL
; 194  : 			_Locimp_dtor(_Locimp *);
; 195  : 		static _MRTIMP2_PURE_NPURE void __CLRCALL_PURE_OR_CDECL
; 196  : 			_Locimp_Addfac(_Locimp *, facet *, size_t);	// add a facet
; 197  : 		static void __CLRCALL_PURE_OR_CDECL
; 198  : 			_Locimp_ctor(_Locimp *, const _Locimp&);
; 199  : 
; 200  : 		friend class locale;
; 201  : 
; 202  : 		__CLR_OR_THIS_CALL _Locimp(bool _Transparent)
; 203  : 			: locale::facet(1), _Facetvec(0), _Facetcount(0),
; 204  : 				_Catmask(none), _Xparent(_Transparent),
; 205  : 					_Name("*")
; 206  : 			{	// construct an empty _Locimp
; 207  : 			}
; 208  : 
; 209  : 		__CLR_OR_THIS_CALL _Locimp(const _Locimp& _Right)
; 210  : 			: locale::facet(1), _Facetvec(0), _Facetcount(_Right._Facetcount),
; 211  : 				_Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
; 212  : 					_Name(_Right._Name.c_str())
; 213  : 			{	// construct by copying
; 214  : 			_Locimp_ctor(this, _Right);
; 215  : 			}
; 216  : 
; 217  : 		void __CLR_OR_THIS_CALL _Addfac(facet *_Pfacet, size_t _Id)
; 218  : 			{	// add a facet
; 219  : 			_Locimp_Addfac(this, _Pfacet, _Id);
; 220  : 			}
; 221  : 
; 222  : 		static _Locimp *__CLRCALL_OR_CDECL _Makeloc(const _Locinfo&,
; 223  : 			category, _Locimp *, const locale *);	// make essential facets
; 224  : 
; 225  : 		static void __CLRCALL_OR_CDECL _Makewloc(const _Locinfo&,
; 226  : 			category, _Locimp *, const locale *);	// make wchar_t facets
; 227  : 
; 228  :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 229  : 		static void __CLRCALL_OR_CDECL _Makeushloc(const _Locinfo&,
; 230  : 			category, _Locimp *, const locale *);	// make ushort facets
; 231  :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 232  : 
; 233  : 		static void __CLRCALL_OR_CDECL _Makexloc(const _Locinfo&,
; 234  : 			category, _Locimp *, const locale *);	// make remaining facets
; 235  : 
; 236  : 		facet **_Facetvec;	// pointer to vector of facets
; 237  : 		size_t _Facetcount;	// size of vector of facets
; 238  : 		category _Catmask;	// mask describing implemented categories
; 239  : 		bool _Xparent;	// true if locale is transparent
; 240  : 		_Yarn<char> _Name;	// locale name, or "*" if not known
; 241  : 
; 242  : 		__PURE_APPDOMAIN_GLOBAL static _Locimp *_Clocptr;
; 243  : 
; 244  : private:
; 245  : 		_Locimp& __CLR_OR_THIS_CALL operator=(const _Locimp&);	// not defined
; 246  : 		};
; 247  : 
; 248  :  #pragma warning(pop)
; 249  : 
; 250  : 	template<class _Elem,
; 251  : 		class _Traits,
; 252  : 		class _Alloc>
; 253  : 		bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 254  : 			const basic_string<_Elem, _Traits, _Alloc>& _Right) const
; 255  : 		{	// compare _Left and _Right strings using collate facet in locale
; 256  : 		const _STD collate<_Elem>& _Coll_fac =
; 257  : 			use_facet<_STD collate<_Elem> >(*this);
; 258  : 
; 259  : 		return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
; 260  : 			_Right.c_str(), _Right.c_str() + _Right.size()) < 0);
; 261  : 		}
; 262  : 
; 263  : 	template<class _Facet>
; 264  : 		locale combine(const locale& _Loc) const
; 265  : 		{	// combine two locales
; 266  : 		_Facet *_Facptr;
; 267  : 
; 268  : 		_TRY_BEGIN
; 269  : 			_Facptr = (_Facet *)&use_facet<_Facet>(_Loc);
; 270  : 		_CATCH_ALL
; 271  : 			_Xruntime_error("locale::combine facet missing");
; 272  : 		_CATCH_END
; 273  : 
; 274  : 		_Locimp *_Newimp = _Locimp::_New_Locimp(*_Ptr);
; 275  : 		_Newimp->_Addfac(_Facptr, _Facet::id);
; 276  : 		_Newimp->_Catmask = 0;
; 277  : 		_Newimp->_Name = "*";
; 278  : 		return (locale(_Newimp));
; 279  : 		}
; 280  : 
; 281  : 	template<class _Facet>
; 282  : 		locale(const locale& _Loc, const _Facet *_Facptr)
; 283  : 			: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 284  : 		{	// construct from _Loc, replacing facet with *_Facptr
; 285  : 		if (_Facptr != 0)
; 286  : 			{	// replace facet
; 287  : 			_Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
; 288  : 			if (_Facet::_Getcat() != (size_t)(-1))
; 289  : 				{	// no C category
; 290  : 				_Ptr->_Catmask = 0;
; 291  : 				_Ptr->_Name = "*";
; 292  : 				}
; 293  : 			}
; 294  : 		}
; 295  : 
; 296  : 	locale(_Uninitialized)
; 297  : 		{	// defer construction
; 298  : 		}
; 299  : 
; 300  :  #if _NO_LOCALES
; 301  : 	locale(const locale& _Right) _THROW0()
; 302  : 		: _Ptr(0)
; 303  : 		{	// construct by copying
; 304  : 		}
; 305  : 
; 306  : 	locale() _THROW0()
; 307  : 		: _Ptr(0)
; 308  : 		{	// construct from current locale
; 309  : 		}
; 310  : 
; 311  : 	~locale() _NOEXCEPT
; 312  : 		{	// destroy the object
; 313  : 		}
; 314  : 
; 315  : 	locale& operator=(const locale& _Right) _THROW0()
; 316  : 		{	// assign a locale
; 317  : 		return (*this);
; 318  : 		}
; 319  : 
; 320  :  #else /* _NO_LOCALES */
; 321  : 	locale(const locale& _Right) _THROW0()
; 322  : 		: _Ptr(_Right._Ptr)
; 323  : 		{	// construct by copying
; 324  : 		_Ptr->_Incref();
; 325  : 		}
; 326  : 
; 327  : 	locale() _THROW0()
; 328  : 		: _Ptr(_Init(true))
; 329  : 		{	// construct from current locale
; 330  : 		}
; 331  : 
; 332  : 	locale(const locale& _Loc, const locale& _Other,
; 333  : 		category _Cat)
; 334  : 		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 335  : 		{	// construct a locale by copying named facets
; 336  : 		_TRY_BEGIN
; 337  : 		_BEGIN_LOCINFO(_Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str()))
; 338  : 			_Locimp::_Makeloc(_Lobj._Addcats(_Cat & _Other._Ptr->_Catmask,
; 339  : 				_Other._Ptr->_Name.c_str()), _Cat, _Ptr, &_Other);
; 340  : 		_END_LOCINFO()
; 341  : 		_CATCH_ALL
; 342  : 		_DELETE_CRT(_Ptr->_Decref());
; 343  : 		_RERAISE;
; 344  : 		_CATCH_END
; 345  : 		}
; 346  : 
; 347  : 	explicit locale(const char *_Locname,
; 348  : 		category _Cat = all) 	// construct from named locale for category
; 349  : 		: _Ptr(_Locimp::_New_Locimp())
; 350  : 		{	// construct a locale with named facets
; 351  : 		_TRY_BEGIN
; 352  : 		_Init();
; 353  : 		_BEGIN_LOCINFO(_Lobj(_Cat, _Locname))
; 354  : 			if (_Badname(_Lobj))
; 355  : 				_Xruntime_error("bad locale name");
; 356  : 			_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
; 357  : 		_END_LOCINFO()
; 358  : 		_CATCH_ALL
; 359  : 		_DELETE_CRT(_Ptr->_Decref());
; 360  : 		_RERAISE;
; 361  : 		_CATCH_END
; 362  : 		}
; 363  : 
; 364  : 	locale(const locale& _Loc, const char *_Locname,
; 365  : 		category _Cat)
; 366  : 		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 367  : 		{	// construct a locale by copying, replacing named facets
; 368  : 		_TRY_BEGIN
; 369  : 		_BEGIN_LOCINFO(_Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str()))
; 370  : 			bool _Hadname = !_Badname(_Lobj);
; 371  : 			_Lobj._Addcats(_Cat, _Locname);
; 372  : 
; 373  : 			if (_Hadname && _Badname(_Lobj))
; 374  : 				_Xruntime_error("bad locale name");
; 375  : 			_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
; 376  : 		_END_LOCINFO()
; 377  : 		_CATCH_ALL
; 378  : 		_DELETE_CRT(_Ptr->_Decref());
; 379  : 		_RERAISE;
; 380  : 		_CATCH_END
; 381  : 		}
; 382  : 
; 383  :  #if _HAS_CPP0X
; 384  : 	explicit locale(const string& _Str,
; 385  : 		category _Cat = all)
; 386  : 		: _Ptr(_Locimp::_New_Locimp())
; 387  : 		{	// construct a locale with named facets
; 388  : 		_TRY_BEGIN
; 389  : 		_Init();
; 390  : 		_Locinfo _Lobj(_Cat, _Str.c_str());
; 391  : 
; 392  : 		if (_Badname(_Lobj))
; 393  : 			_Xruntime_error("bad locale name");
; 394  : 		_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
; 395  : 		_CATCH_ALL
; 396  : 		_DELETE_CRT(_Ptr->_Decref());
; 397  : 		_RERAISE;
; 398  : 		_CATCH_END
; 399  : 		}
; 400  : 
; 401  : 	locale(const locale& _Loc, const string& _Str,
; 402  : 		category _Cat)
; 403  : 		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 404  : 		{	// construct a locale by copying, replacing named facets
; 405  : 		_TRY_BEGIN
; 406  : 		_Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
; 407  : 		bool _Hadname = !_Badname(_Lobj);
; 408  : 		_Lobj._Addcats(_Cat, _Str.c_str());
; 409  : 
; 410  : 		if (_Hadname && _Badname(_Lobj))
; 411  : 			_Xruntime_error("bad locale name");
; 412  : 		_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
; 413  : 		_CATCH_ALL
; 414  : 		_DELETE_CRT(_Ptr->_Decref());
; 415  : 		_RERAISE;
; 416  : 		_CATCH_END
; 417  : 		}
; 418  :  #endif /* _HAS_CPP0X */
; 419  : 
; 420  : 	~locale() _NOEXCEPT
; 421  : 		{	// destroy the object
; 422  : 		if (_Ptr != 0)
; 423  : 			_DELETE_CRT(_Ptr->_Decref());
; 424  : 		}
; 425  : 
; 426  : 	locale& operator=(const locale& _Right) _THROW0()
; 427  : 		{	// assign a locale
; 428  : 		if (_Ptr != _Right._Ptr)
; 429  : 			{	// different implementation, point at new one
; 430  : 			_DELETE_CRT(_Ptr->_Decref());
; 431  : 			_Ptr = _Right._Ptr;
; 432  : 			_Ptr->_Incref();
; 433  : 			}
; 434  : 		return (*this);
; 435  : 		}
; 436  :  #endif /* _NO_LOCALES */
; 437  : 
; 438  : 	string name() const
; 439  : 		{	// return locale name
; 440  : 		return (_Ptr == 0 ? string() : _Ptr->_Name.c_str());
; 441  : 		}
; 442  : 
; 443  : 	const char *c_str() const
; 444  : 		{	// return locale name as NTBS
; 445  : 		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());
; 446  : 		}
; 447  : 
; 448  : 	const facet *_Getfacet(size_t _Id) const
; 449  : 		{	// look up a facet in locale object
; 450  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 451  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  0007b	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  0007e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00080	3b 79 0c	 cmp	 edi, DWORD PTR [ecx+12]
  00083	73 0c		 jae	 SHORT $LN20@use_facet
  00085	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00088	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]

; 452  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  0008b	85 f6		 test	 esi, esi
  0008d	75 6e		 jne	 SHORT $LN1@use_facet
  0008f	eb 02		 jmp	 SHORT $LN24@use_facet
$LN20@use_facet:

; 85   : 				}
; 86   : 			return (_Id);
; 87   : 			}
; 88   : 
; 89   : 	private:
; 90   : 		size_t _Id;	// the identifier stamp
; 91   : 
; 92   : 		__PURE_APPDOMAIN_GLOBAL static int _Id_cnt;
; 93   : 
; 94   : 		__CLR_OR_THIS_CALL id(const id&);	// not defined
; 95   : 		id& __CLR_OR_THIS_CALL operator=(const id&);	// not defined
; 96   : 		};
; 97   : 
; 98   : 	class _Locimp;
; 99   : 
; 100  : 			// CLASS facet
; 101  : 	class _CRTIMP2_PURE facet
; 102  : 		: public _Facet_base
; 103  : 		{	// base class for all locale facets, performs reference counting
; 104  : 		friend class locale;
; 105  : 		friend class _Locimp;
; 106  : 
; 107  : 		template<class _Ty>
; 108  : 			friend void __CLRCALL_OR_CDECL _DebugHeapDelete(_Ty *_Ptr);
; 109  : 
; 110  : 	public:
; 111  : 		static size_t __CLRCALL_OR_CDECL _Getcat(const facet ** = 0,
; 112  : 			const locale * = 0)
; 113  : 			{	// get category value, or -1 if no corresponding C category
; 114  : 			return ((size_t)(-1));
; 115  : 			}
; 116  : 
; 117  :   #if defined(_DEBUG) && !defined(_M_X64)
; 118  : 		void *__CLRCALL_OR_CDECL operator new(size_t _Size)
; 119  : 			{	// replace operator new
; 120  : 			return (operator new(_Size, _DebugHeapTag_func(),
; 121  : 				__FILE__, __LINE__));
; 122  : 			}
; 123  : 
; 124  : 		void *__CLRCALL_OR_CDECL operator new(size_t _Size,
; 125  : 			const _DebugHeapTag_t& _Tag, char *_File, int _Line)
; 126  : 			{	// replace debugging operator new
; 127  : 			return (::operator new(_Size, _Tag, _File, _Line));
; 128  : 			}
; 129  : 
; 130  : 		void __CLRCALL_OR_CDECL operator delete(void *_Ptr,
; 131  : 			const _DebugHeapTag_t&, char *, int)
; 132  : 			{	// replace debugging operator delete
; 133  : 			operator delete(_Ptr);
; 134  : 			}
; 135  : 
; 136  : 		void __CLRCALL_OR_CDECL operator delete(void *_Ptr)
; 137  : 			{	// replace operator delete
; 138  : 			_DebugHeapDelete((facet *)_Ptr);
; 139  : 			}
; 140  :   #endif /* defined(_DEBUG) etc. */
; 141  : 
; 142  : 		virtual void __CLR_OR_THIS_CALL _Incref()
; 143  : 			{   // increment use count
; 144  : 			_MT_INCR(_Mtx, _Refs);
; 145  : 			}
; 146  : 
; 147  : 		virtual _Facet_base *__CLR_OR_THIS_CALL _Decref()
; 148  : 			{   // decrement use count
; 149  : 			if (_MT_DECR(_Mtx, _Refs) == 0)
; 150  : 				return (this);
; 151  : 			else
; 152  : 				return (0);
; 153  : 			}
; 154  : 
; 155  : private:
; 156  : 	_Atomic_counter_t _Refs;	// the reference count
; 157  : 
; 158  : 	protected:
; 159  : 		explicit __CLR_OR_THIS_CALL facet(size_t _Initrefs = 0)
; 160  : 			{	// construct with initial reference count
; 161  : 			_Init_atomic_counter(_Refs, (_Atomic_integral_t)_Initrefs);
; 162  : 			}
; 163  : 
; 164  : 		virtual __CLR_OR_THIS_CALL ~facet() _NOEXCEPT
; 165  : 			{	// ensure that derived classes can be destroyed properly
; 166  : 			}
; 167  : 
; 168  : 		private:
; 169  : 			__CLR_OR_THIS_CALL facet(const facet&);	// not defined
; 170  : 
; 171  : 		facet& __CLR_OR_THIS_CALL operator=(const facet&);	// not defined
; 172  : 		};
; 173  : 
; 174  : 			// CLASS _Locimp
; 175  :  #pragma warning(push)
; 176  :  #pragma warning(disable: 4275)
; 177  : 
; 178  : 	class _CRTIMP2_PURE _Locimp
; 179  : 		: public facet
; 180  : 		{	// reference-counted actual implementation of a locale
; 181  : 	protected:
; 182  : 		__CLR_OR_THIS_CALL ~_Locimp() _NOEXCEPT
; 183  : 		{	// destroy the object
; 184  : 		_Locimp_dtor(this);
; 185  : 		}
; 186  : 
; 187  : 	private:
; 188  : 		static _MRTIMP2_PURE_NPURE _Locimp *__CLRCALL_PURE_OR_CDECL
; 189  : 			_New_Locimp(bool _Transparent = false);
; 190  : 		static _MRTIMP2_PURE_NPURE _Locimp *__CLRCALL_PURE_OR_CDECL
; 191  : 			_New_Locimp(const _Locimp& _Right);
; 192  : 
; 193  : 		static _MRTIMP2_PURE_NPURE void __CLRCALL_PURE_OR_CDECL
; 194  : 			_Locimp_dtor(_Locimp *);
; 195  : 		static _MRTIMP2_PURE_NPURE void __CLRCALL_PURE_OR_CDECL
; 196  : 			_Locimp_Addfac(_Locimp *, facet *, size_t);	// add a facet
; 197  : 		static void __CLRCALL_PURE_OR_CDECL
; 198  : 			_Locimp_ctor(_Locimp *, const _Locimp&);
; 199  : 
; 200  : 		friend class locale;
; 201  : 
; 202  : 		__CLR_OR_THIS_CALL _Locimp(bool _Transparent)
; 203  : 			: locale::facet(1), _Facetvec(0), _Facetcount(0),
; 204  : 				_Catmask(none), _Xparent(_Transparent),
; 205  : 					_Name("*")
; 206  : 			{	// construct an empty _Locimp
; 207  : 			}
; 208  : 
; 209  : 		__CLR_OR_THIS_CALL _Locimp(const _Locimp& _Right)
; 210  : 			: locale::facet(1), _Facetvec(0), _Facetcount(_Right._Facetcount),
; 211  : 				_Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
; 212  : 					_Name(_Right._Name.c_str())
; 213  : 			{	// construct by copying
; 214  : 			_Locimp_ctor(this, _Right);
; 215  : 			}
; 216  : 
; 217  : 		void __CLR_OR_THIS_CALL _Addfac(facet *_Pfacet, size_t _Id)
; 218  : 			{	// add a facet
; 219  : 			_Locimp_Addfac(this, _Pfacet, _Id);
; 220  : 			}
; 221  : 
; 222  : 		static _Locimp *__CLRCALL_OR_CDECL _Makeloc(const _Locinfo&,
; 223  : 			category, _Locimp *, const locale *);	// make essential facets
; 224  : 
; 225  : 		static void __CLRCALL_OR_CDECL _Makewloc(const _Locinfo&,
; 226  : 			category, _Locimp *, const locale *);	// make wchar_t facets
; 227  : 
; 228  :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 229  : 		static void __CLRCALL_OR_CDECL _Makeushloc(const _Locinfo&,
; 230  : 			category, _Locimp *, const locale *);	// make ushort facets
; 231  :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 232  : 
; 233  : 		static void __CLRCALL_OR_CDECL _Makexloc(const _Locinfo&,
; 234  : 			category, _Locimp *, const locale *);	// make remaining facets
; 235  : 
; 236  : 		facet **_Facetvec;	// pointer to vector of facets
; 237  : 		size_t _Facetcount;	// size of vector of facets
; 238  : 		category _Catmask;	// mask describing implemented categories
; 239  : 		bool _Xparent;	// true if locale is transparent
; 240  : 		_Yarn<char> _Name;	// locale name, or "*" if not known
; 241  : 
; 242  : 		__PURE_APPDOMAIN_GLOBAL static _Locimp *_Clocptr;
; 243  : 
; 244  : private:
; 245  : 		_Locimp& __CLR_OR_THIS_CALL operator=(const _Locimp&);	// not defined
; 246  : 		};
; 247  : 
; 248  :  #pragma warning(pop)
; 249  : 
; 250  : 	template<class _Elem,
; 251  : 		class _Traits,
; 252  : 		class _Alloc>
; 253  : 		bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 254  : 			const basic_string<_Elem, _Traits, _Alloc>& _Right) const
; 255  : 		{	// compare _Left and _Right strings using collate facet in locale
; 256  : 		const _STD collate<_Elem>& _Coll_fac =
; 257  : 			use_facet<_STD collate<_Elem> >(*this);
; 258  : 
; 259  : 		return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
; 260  : 			_Right.c_str(), _Right.c_str() + _Right.size()) < 0);
; 261  : 		}
; 262  : 
; 263  : 	template<class _Facet>
; 264  : 		locale combine(const locale& _Loc) const
; 265  : 		{	// combine two locales
; 266  : 		_Facet *_Facptr;
; 267  : 
; 268  : 		_TRY_BEGIN
; 269  : 			_Facptr = (_Facet *)&use_facet<_Facet>(_Loc);
; 270  : 		_CATCH_ALL
; 271  : 			_Xruntime_error("locale::combine facet missing");
; 272  : 		_CATCH_END
; 273  : 
; 274  : 		_Locimp *_Newimp = _Locimp::_New_Locimp(*_Ptr);
; 275  : 		_Newimp->_Addfac(_Facptr, _Facet::id);
; 276  : 		_Newimp->_Catmask = 0;
; 277  : 		_Newimp->_Name = "*";
; 278  : 		return (locale(_Newimp));
; 279  : 		}
; 280  : 
; 281  : 	template<class _Facet>
; 282  : 		locale(const locale& _Loc, const _Facet *_Facptr)
; 283  : 			: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 284  : 		{	// construct from _Loc, replacing facet with *_Facptr
; 285  : 		if (_Facptr != 0)
; 286  : 			{	// replace facet
; 287  : 			_Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
; 288  : 			if (_Facet::_Getcat() != (size_t)(-1))
; 289  : 				{	// no C category
; 290  : 				_Ptr->_Catmask = 0;
; 291  : 				_Ptr->_Name = "*";
; 292  : 				}
; 293  : 			}
; 294  : 		}
; 295  : 
; 296  : 	locale(_Uninitialized)
; 297  : 		{	// defer construction
; 298  : 		}
; 299  : 
; 300  :  #if _NO_LOCALES
; 301  : 	locale(const locale& _Right) _THROW0()
; 302  : 		: _Ptr(0)
; 303  : 		{	// construct by copying
; 304  : 		}
; 305  : 
; 306  : 	locale() _THROW0()
; 307  : 		: _Ptr(0)
; 308  : 		{	// construct from current locale
; 309  : 		}
; 310  : 
; 311  : 	~locale() _NOEXCEPT
; 312  : 		{	// destroy the object
; 313  : 		}
; 314  : 
; 315  : 	locale& operator=(const locale& _Right) _THROW0()
; 316  : 		{	// assign a locale
; 317  : 		return (*this);
; 318  : 		}
; 319  : 
; 320  :  #else /* _NO_LOCALES */
; 321  : 	locale(const locale& _Right) _THROW0()
; 322  : 		: _Ptr(_Right._Ptr)
; 323  : 		{	// construct by copying
; 324  : 		_Ptr->_Incref();
; 325  : 		}
; 326  : 
; 327  : 	locale() _THROW0()
; 328  : 		: _Ptr(_Init(true))
; 329  : 		{	// construct from current locale
; 330  : 		}
; 331  : 
; 332  : 	locale(const locale& _Loc, const locale& _Other,
; 333  : 		category _Cat)
; 334  : 		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 335  : 		{	// construct a locale by copying named facets
; 336  : 		_TRY_BEGIN
; 337  : 		_BEGIN_LOCINFO(_Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str()))
; 338  : 			_Locimp::_Makeloc(_Lobj._Addcats(_Cat & _Other._Ptr->_Catmask,
; 339  : 				_Other._Ptr->_Name.c_str()), _Cat, _Ptr, &_Other);
; 340  : 		_END_LOCINFO()
; 341  : 		_CATCH_ALL
; 342  : 		_DELETE_CRT(_Ptr->_Decref());
; 343  : 		_RERAISE;
; 344  : 		_CATCH_END
; 345  : 		}
; 346  : 
; 347  : 	explicit locale(const char *_Locname,
; 348  : 		category _Cat = all) 	// construct from named locale for category
; 349  : 		: _Ptr(_Locimp::_New_Locimp())
; 350  : 		{	// construct a locale with named facets
; 351  : 		_TRY_BEGIN
; 352  : 		_Init();
; 353  : 		_BEGIN_LOCINFO(_Lobj(_Cat, _Locname))
; 354  : 			if (_Badname(_Lobj))
; 355  : 				_Xruntime_error("bad locale name");
; 356  : 			_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
; 357  : 		_END_LOCINFO()
; 358  : 		_CATCH_ALL
; 359  : 		_DELETE_CRT(_Ptr->_Decref());
; 360  : 		_RERAISE;
; 361  : 		_CATCH_END
; 362  : 		}
; 363  : 
; 364  : 	locale(const locale& _Loc, const char *_Locname,
; 365  : 		category _Cat)
; 366  : 		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 367  : 		{	// construct a locale by copying, replacing named facets
; 368  : 		_TRY_BEGIN
; 369  : 		_BEGIN_LOCINFO(_Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str()))
; 370  : 			bool _Hadname = !_Badname(_Lobj);
; 371  : 			_Lobj._Addcats(_Cat, _Locname);
; 372  : 
; 373  : 			if (_Hadname && _Badname(_Lobj))
; 374  : 				_Xruntime_error("bad locale name");
; 375  : 			_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
; 376  : 		_END_LOCINFO()
; 377  : 		_CATCH_ALL
; 378  : 		_DELETE_CRT(_Ptr->_Decref());
; 379  : 		_RERAISE;
; 380  : 		_CATCH_END
; 381  : 		}
; 382  : 
; 383  :  #if _HAS_CPP0X
; 384  : 	explicit locale(const string& _Str,
; 385  : 		category _Cat = all)
; 386  : 		: _Ptr(_Locimp::_New_Locimp())
; 387  : 		{	// construct a locale with named facets
; 388  : 		_TRY_BEGIN
; 389  : 		_Init();
; 390  : 		_Locinfo _Lobj(_Cat, _Str.c_str());
; 391  : 
; 392  : 		if (_Badname(_Lobj))
; 393  : 			_Xruntime_error("bad locale name");
; 394  : 		_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
; 395  : 		_CATCH_ALL
; 396  : 		_DELETE_CRT(_Ptr->_Decref());
; 397  : 		_RERAISE;
; 398  : 		_CATCH_END
; 399  : 		}
; 400  : 
; 401  : 	locale(const locale& _Loc, const string& _Str,
; 402  : 		category _Cat)
; 403  : 		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 404  : 		{	// construct a locale by copying, replacing named facets
; 405  : 		_TRY_BEGIN
; 406  : 		_Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
; 407  : 		bool _Hadname = !_Badname(_Lobj);
; 408  : 		_Lobj._Addcats(_Cat, _Str.c_str());
; 409  : 
; 410  : 		if (_Hadname && _Badname(_Lobj))
; 411  : 			_Xruntime_error("bad locale name");
; 412  : 		_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
; 413  : 		_CATCH_ALL
; 414  : 		_DELETE_CRT(_Ptr->_Decref());
; 415  : 		_RERAISE;
; 416  : 		_CATCH_END
; 417  : 		}
; 418  :  #endif /* _HAS_CPP0X */
; 419  : 
; 420  : 	~locale() _NOEXCEPT
; 421  : 		{	// destroy the object
; 422  : 		if (_Ptr != 0)
; 423  : 			_DELETE_CRT(_Ptr->_Decref());
; 424  : 		}
; 425  : 
; 426  : 	locale& operator=(const locale& _Right) _THROW0()
; 427  : 		{	// assign a locale
; 428  : 		if (_Ptr != _Right._Ptr)
; 429  : 			{	// different implementation, point at new one
; 430  : 			_DELETE_CRT(_Ptr->_Decref());
; 431  : 			_Ptr = _Right._Ptr;
; 432  : 			_Ptr->_Incref();
; 433  : 			}
; 434  : 		return (*this);
; 435  : 		}
; 436  :  #endif /* _NO_LOCALES */
; 437  : 
; 438  : 	string name() const
; 439  : 		{	// return locale name
; 440  : 		return (_Ptr == 0 ? string() : _Ptr->_Name.c_str());
; 441  : 		}
; 442  : 
; 443  : 	const char *c_str() const
; 444  : 		{	// return locale name as NTBS
; 445  : 		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());
; 446  : 		}
; 447  : 
; 448  : 	const facet *_Getfacet(size_t _Id) const
; 449  : 		{	// look up a facet in locale object
; 450  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 451  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00091	33 f6		 xor	 esi, esi
$LN24@use_facet:

; 452  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00093	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  00097	74 10		 je	 SHORT $LN15@use_facet

; 453  : 			return (_Facptr);	// found facet or not transparent
; 454  : 		else
; 455  : 			{	// look in current locale
; 456  : 			locale::_Locimp *_Ptr = _Getgloballocale();

  00099	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 457  : 			return (_Id < _Ptr->_Facetcount
; 458  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 459  : 				: 0);	// no entry in current locale

  0009e	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000a1	73 0a		 jae	 SHORT $LN25@use_facet
  000a3	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000a6	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
$LN15@use_facet:

; 552  : 
; 553  : 		size_t _Id = _Facet::id;
; 554  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);
; 555  : 
; 556  : 		if (_Pf != 0)

  000a9	85 f6		 test	 esi, esi
  000ab	75 50		 jne	 SHORT $LN1@use_facet
$LN25@use_facet:

; 557  : 			;	// got facet from locale
; 558  : 		else if (_Psave != 0)

  000ad	85 db		 test	 ebx, ebx
  000af	74 04		 je	 SHORT $LN4@use_facet

; 559  : 			_Pf = _Psave;	// lazy facet already allocated

  000b1	8b f3		 mov	 esi, ebx
  000b3	eb 48		 jmp	 SHORT $LN1@use_facet
$LN4@use_facet:

; 560  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000b5	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  000b8	8d 45 f0	 lea	 eax, DWORD PTR __Psave$5[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
  000c1	83 c4 08	 add	 esp, 8
  000c4	83 f8 ff	 cmp	 eax, -1
  000c7	75 1b		 jne	 SHORT $LN2@use_facet

; 561  : 
; 562  :  #if _HAS_EXCEPTIONS
; 563  : 
; 564  : 			_THROW_NCEE(_XSTD bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000c9	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000ce	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  000d1	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000d6	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000db	8d 45 dc	 lea	 eax, DWORD PTR $T2[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN29@use_facet:
$LN2@use_facet:

; 565  : 
; 566  :  #else /* _HAS_EXCEPTIONS */
; 567  : 			abort();	// lazy disallowed
; 568  :  #endif /* _HAS_EXCEPTIONS */
; 569  : 
; 570  : 		else
; 571  : 			{	// queue up lazy facet for destruction
; 572  : 			_Pf = _Psave;

  000e4	8b 75 f0	 mov	 esi, DWORD PTR __Psave$5[ebp]

; 573  : 			_Facetptr<_Facet>::_Psave = _Psave;

  000e7	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<char> >::_Psave

; 574  : 
; 575  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 576  : 			_Pfmod->_Incref();

  000ed	8b 16		 mov	 edx, DWORD PTR [esi]
  000ef	8b ce		 mov	 ecx, esi
  000f1	ff 52 04	 call	 DWORD PTR [edx+4]

; 577  : 
; 578  :  #if defined(_M_CEE)
; 579  : 			_Facet_Register_m(_Pfmod);
; 580  : 
; 581  :  #else /* defined(_M_CEE) */
; 582  : 			_Facet_Register(_Pfmod);

  000f4	56		 push	 esi
  000f5	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  000fa	83 c4 04	 add	 esp, 4
$LN1@use_facet:

; 583  :  #endif /* defined(_M_CEE) */
; 584  : 			}
; 585  : 
; 586  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  000fd	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00100	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00105	8b c6		 mov	 eax, esi

; 587  : 	_END_LOCK()
; 588  :  #endif /* _NO_LOCALES */
; 589  : 	}	// end of use_facet body

  00107	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00111	59		 pop	 ecx
  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c3		 ret	 0
$LN27@use_facet:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h
;	COMDAT ??$put@VTaskVBOVAOSet@Tasks@@@?$VirtualList@VTask@Tasks@@$0BAA@$0BAAC@@@QAEPAVTask@Tasks@@VTaskVBOVAOSet@2@@Z
_TEXT	SEGMENT
_object$ = 8						; size = 12
??$put@VTaskVBOVAOSet@Tasks@@@?$VirtualList@VTask@Tasks@@$0BAA@$0BAAC@@@QAEPAVTask@Tasks@@VTaskVBOVAOSet@2@@Z PROC ; VirtualList<Tasks::Task,256,4098>::put<Tasks::TaskVBOVAOSet>, COMDAT
; _this$ = ecx

; 57   : 	A* put(B object)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h

; 18   : 			if(pos + sizeof(A) <= size)

  00003	8b 91 0c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1036]
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h

; 57   : 	A* put(B object)

  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _object$[ebp+4]
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h

; 18   : 			if(pos + sizeof(A) <= size)

  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h

; 57   : 	A* put(B object)

  00010	57		 push	 edi
  00011	8b 7d 10	 mov	 edi, DWORD PTR _object$[ebp+8]
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h

; 18   : 			if(pos + sizeof(A) <= size)

  00014	3b 81 08 04 00
	00		 cmp	 eax, DWORD PTR [ecx+1032]
  0001a	77 1f		 ja	 SHORT $LN8@put

; 19   : 			{
; 20   : 				A* mempos = (A*)(heap + pos);

  0001c	8b 81 04 04 00
	00		 mov	 eax, DWORD PTR [ecx+1028]
  00022	03 c2		 add	 eax, edx

; 21   : 				new(mempos) A(object);

  00024	74 0c		 je	 SHORT $LN11@put
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7TaskVBOVAOSet@Tasks@@6B@
  0002c	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0002f	89 78 08	 mov	 DWORD PTR [eax+8], edi
$LN11@put:

; 22   : 				pos += sizeof(A);

  00032	83 81 0c 04 00
	00 0c		 add	 DWORD PTR [ecx+1036], 12 ; 0000000cH

; 23   : 
; 24   : 				return mempos;

  00039	eb 02		 jmp	 SHORT $LN7@put
$LN8@put:

; 25   : 			}
; 26   : 			else
; 27   : 			{
; 28   : 				return nullptr;

  0003b	33 c0		 xor	 eax, eax
$LN7@put:
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h

; 24   : 		if(count < size - 1)

  0003d	8b 91 00 04 00
	00		 mov	 edx, DWORD PTR [ecx+1024]
  00043	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  00049	7d 09		 jge	 SHORT $LN19@put

; 25   : 		{
; 26   : 			content[count++] = object;

  0004b	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
  0004e	ff 81 00 04 00
	00		 inc	 DWORD PTR [ecx+1024]
$LN19@put:

; 58   : 	{
; 59   : 		A* pObject = MemUtil::MiniHeap::put(object);
; 60   : 		List::put(pObject);
; 61   : 		return pObject;
; 62   : 	}

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5d		 pop	 ebp
  00057	c2 0c 00	 ret	 12			; 0000000cH
??$put@VTaskVBOVAOSet@Tasks@@@?$VirtualList@VTask@Tasks@@$0BAA@$0BAAC@@@QAEPAVTask@Tasks@@VTaskVBOVAOSet@2@@Z ENDP ; VirtualList<Tasks::Task,256,4098>::put<Tasks::TaskVBOVAOSet>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??$?0V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@V?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0PAPAX@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
__Cat$1 = 24						; size = 1
??$?0V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@V?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0PAPAX@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><std::istreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 822  : 		{	// construct from [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2219 : 		}
; 2220 : 
; 2221 : 	bool _Grow(size_type _Newsize,
; 2222 : 		bool _Trim = false)
; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2224 : 		if (max_size() < _Newsize)
; 2225 : 			_Xlen();	// result too long
; 2226 : 		if (this->_Myres < _Newsize)
; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow
; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
; 2231 : 		else if (_Newsize == 0)
; 2232 : 			_Eos(0);	// new size is zero, just null terminate
; 2233 : 		return (0 < _Newsize);	// return true only if more work to do
; 2234 : 		}
; 2235 : 
; 2236 : 	bool _Inside(const _Elem *_Ptr)
; 2237 : 		{	// test if _Ptr points inside string
; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)
; 2240 : 			return (false);	// don't ask
; 2241 : 		else
; 2242 : 			return (true);
; 2243 : 		}
; 2244 : 
; 2245 : 	static size_type _Pdif(const_iterator _P2,
; 2246 : 		const_iterator _P1)
; 2247 : 		{	// compute safe iterator difference
; 2248 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);
; 2249 : 		}
; 2250 : 
; 2251 : 	void _Tidy(bool _Built = false,
; 2252 : 		size_type _Newsize = 0)
; 2253 : 		{	// initialize buffer, deallocating any storage
; 2254 : 		if (!_Built)
; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)
; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;
; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2260 : 			if (0 < _Newsize)
; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);
; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00006	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  0000d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00014	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));

  00017	ff 75 18	 push	 DWORD PTR __Cat$1[ebp]
  0001a	ff 75 18	 push	 DWORD PTR __Last$[ebp+4]
  0001d	ff 75 14	 push	 DWORD PTR __Last$[ebp]
  00020	ff 75 10	 push	 DWORD PTR __First$[ebp+4]
  00023	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  00026	e8 00 00 00 00	 call	 ??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<std::istreambuf_iterator<char,std::char_traits<char> > >

; 825  : 		}

  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi
  0002e	5d		 pop	 ebp
  0002f	c2 14 00	 ret	 20			; 00000014H
??$?0V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@V?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0PAPAX@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><std::istreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\string
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\string
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\string
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\string
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = -20					; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; ___$ReturnUdt$ = ecx
; __Left$dead$ = edx

; 38   : 	{	// return NTCS + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 ec	 mov	 DWORD PTR ___$ReturnUdt$[ebp], esi
  0002d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00034	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00036	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7

; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  0003d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00044	66 89 06	 mov	 WORD PTR [esi], ax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\string

; 43   : 	return (_Ans);

  00047	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  0004a	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  0004d	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)

  00050	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\string

; 40   : 	_Ans.reserve(_Traits::length(_Left) + _Right.size());

  00053	83 c0 10	 add	 eax, 16			; 00000010H
  00056	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)

  0005d	3b f8		 cmp	 edi, eax
  0005f	77 26		 ja	 SHORT $LN71@operator
  00061	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  00064	74 21		 je	 SHORT $LN71@operator

; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))

  00066	6a 01		 push	 1
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
  0006e	84 c0		 test	 al, al
  00070	74 15		 je	 SHORT $LN71@operator

; 517  : 			: this->_Bx._Buf);

  00072	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8

; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00076	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 517  : 			: this->_Bx._Buf);

  00079	72 04		 jb	 SHORT $LN59@operator
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  0007b	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  0007d	eb 02		 jmp	 SHORT $LN60@operator
$LN59@operator:
  0007f	8b c6		 mov	 eax, esi
$LN60@operator:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00081	33 c9		 xor	 ecx, ecx
  00083	66 89 0c 78	 mov	 WORD PTR [eax+edi*2], cx
$LN71@operator:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));

  00087	6a 10		 push	 16			; 00000010H
  00089	68 00 00 00 00	 push	 OFFSET $SG4294949857
  0008e	8b ce		 mov	 ecx, esi
  00090	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 518  : 		}
; 519  : 
; 520  : 	const value_type *_Myptr() const
; 521  : 		{	// determine current pointer to buffer for nonmutable string
; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);
; 525  : 		}
; 526  : 
; 527  : 	union _Bxty
; 528  : 		{	// storage for small buffer or pointer to larger one
; 529  : 		value_type _Buf[_BUF_SIZE];
; 530  : 		pointer _Ptr;
; 531  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 532  : 		} _Bx;
; 533  : 
; 534  : 	size_type _Mysize;	// current length of string
; 535  : 	size_type _Myres;	// current storage reserved for string
; 536  : 	};
; 537  : 
; 538  : 		// TEMPLATE CLASS _String_alloc
; 539  : template<bool _Al_has_storage,
; 540  : 	class _Alloc_types>
; 541  : 	class _String_alloc
; 542  : 		: public _String_val<typename _Alloc_types::_Val_types>
; 543  : 	{	// base class for basic_string to hold allocator with storage
; 544  : public:
; 545  : 	typedef _String_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 546  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 547  : 
; 548  : 	typedef typename _Alloc_types::_Alty _Alty;
; 549  : 
; 550  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 551  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 552  : 		: _Alval(_Al)
; 553  : 		{	// construct allocator from _Al
; 554  : 		}
; 555  : 
; 556  : 	void _Change_alloc(const _Alty& _Al)
; 557  : 		{	// replace old allocator
; 558  : 		_Alval = _Al;
; 559  : 		}
; 560  : 
; 561  : 	void _Swap_alloc(_Myt& _Right)
; 562  : 		{	// swap allocators
; 563  : 		_Swap_adl(this->_Alval, _Right._Alval);
; 564  : 		}
; 565  : 
; 566  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 567  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 568  : 		: _Alval(_Al)
; 569  : 		{	// construct allocator from _Al
; 570  : 		_Alloc_proxy();
; 571  : 		}
; 572  : 
; 573  : 	~_String_alloc() _NOEXCEPT
; 574  : 		{	// destroy the object
; 575  : 		_Free_proxy();
; 576  : 		}
; 577  : 
; 578  : 	void _Change_alloc(const _Alty& _Al)
; 579  : 		{	// replace old allocator
; 580  : 		_Free_proxy();
; 581  : 		_Alval = _Al;
; 582  : 		_Alloc_proxy();
; 583  : 		}
; 584  : 
; 585  : 	void _Swap_alloc(_Myt& _Right)
; 586  : 		{	// swap allocators
; 587  : 		_Swap_adl(_Alval, _Right._Alval);
; 588  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 589  : 		}
; 590  : 
; 591  : 	void _Alloc_proxy()
; 592  : 		{	// construct proxy from _Alval
; 593  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 594  : 			_Alproxy(_Alval);
; 595  : 		this->_Myproxy = _Alproxy.allocate(1);
; 596  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 597  : 		this->_Myproxy->_Mycont = this;
; 598  : 		}
; 599  : 
; 600  : 	void _Free_proxy()
; 601  : 		{	// destroy proxy
; 602  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 603  : 			_Alproxy(_Alval);
; 604  : 		this->_Orphan_all();
; 605  : 		_Alproxy.destroy(this->_Myproxy);
; 606  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 607  : 		this->_Myproxy = 0;
; 608  : 		}
; 609  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 610  : 
; 611  : 	_Alty& _Getal()
; 612  : 		{	// get reference to allocator
; 613  : 		return (_Alval);
; 614  : 		}
; 615  : 
; 616  : 	const _Alty& _Getal() const
; 617  : 		{	// get reference to allocator
; 618  : 		return (_Alval);
; 619  : 		}
; 620  : 
; 621  : 	_Alty _Alval;	// allocator object for strings
; 622  : 	};
; 623  : 
; 624  : template<class _Alloc_types>
; 625  : 	class _String_alloc<false, _Alloc_types>
; 626  : 		: public _String_val<typename _Alloc_types::_Val_types>
; 627  : 	{	// base class for basic_string to hold allocator with no storage
; 628  : public:
; 629  : 	typedef _String_alloc<false, _Alloc_types> _Myt;
; 630  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 631  : 
; 632  : 	typedef typename _Alloc_types::_Alty _Alty;
; 633  : 
; 634  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 635  : 	_String_alloc(const _Alloc& = _Alloc())
; 636  : 		{	// construct allocator from _Al
; 637  : 		}
; 638  : 
; 639  : 	void _Change_alloc(const _Alty&)
; 640  : 		{	// replace old allocator
; 641  : 		}
; 642  : 
; 643  : 	void _Swap_alloc(_Myt&)
; 644  : 		{	// swap allocators
; 645  : 		}
; 646  : 
; 647  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 648  : 	_String_alloc(const _Alloc& = _Alloc())
; 649  : 		{	// construct allocator from _Al
; 650  : 		_Alloc_proxy();
; 651  : 		}
; 652  : 
; 653  : 	~_String_alloc() _NOEXCEPT
; 654  : 		{	// destroy the object
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Change_alloc(const _Alty&)
; 659  : 		{	// replace old allocator
; 660  : 		}
; 661  : 
; 662  : 	void _Swap_alloc(_Myt& _Right)
; 663  : 		{	// swap allocators
; 664  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 665  : 		}
; 666  : 
; 667  : 	void _Alloc_proxy()
; 668  : 		{	// construct proxy from _Alval
; 669  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 670  : 			_Alproxy;
; 671  : 		this->_Myproxy = _Alproxy.allocate(1);
; 672  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 673  : 		this->_Myproxy->_Mycont = this;
; 674  : 		}
; 675  : 
; 676  : 	void _Free_proxy()
; 677  : 		{	// destroy proxy
; 678  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 679  : 			_Alproxy;
; 680  : 		this->_Orphan_all();
; 681  : 		_Alproxy.destroy(this->_Myproxy);
; 682  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 683  : 		this->_Myproxy = 0;
; 684  : 		}
; 685  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 686  : 
; 687  : 	_Alty _Getal() const
; 688  : 		{	// get reference to allocator
; 689  : 		return (_Alty());
; 690  : 		}
; 691  : 	};
; 692  : 
; 693  : 		// TEMPLATE CLASS basic_string
; 694  : template<class _Elem,
; 695  : 	class _Traits,
; 696  : 	class _Alloc>
; 697  : 	class basic_string
; 698  : 		: public _String_alloc<!is_empty<_Alloc>::value,
; 699  : 			_String_base_types<_Elem, _Alloc> >
; 700  : 	{	// null-terminated transparent array of elements
; 701  : public:
; 702  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 703  : 	typedef _String_alloc<!is_empty<_Alloc>::value,
; 704  : 		_String_base_types<_Elem, _Alloc> > _Mybase;
; 705  : 	typedef _Traits traits_type;
; 706  : 	typedef _Alloc allocator_type;
; 707  : 
; 708  : 	typedef typename _Mybase::_Alty _Alty;
; 709  : 
; 710  : 	typedef typename _Mybase::value_type value_type;
; 711  : 	typedef typename _Mybase::size_type size_type;
; 712  : 	typedef typename _Mybase::difference_type difference_type;
; 713  : 	typedef typename _Mybase::pointer pointer;
; 714  : 	typedef typename _Mybase::const_pointer const_pointer;
; 715  : 	typedef typename _Mybase::reference reference;
; 716  : 	typedef typename _Mybase::const_reference const_reference;
; 717  : 
; 718  : 	typedef typename _Mybase::iterator iterator;
; 719  : 	typedef typename _Mybase::const_iterator const_iterator;
; 720  : 
; 721  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 722  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 723  : 
; 724  : 	basic_string(const _Myt& _Right)
; 725  : 
; 726  :  #if _HAS_CPP0X
; 727  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 728  : 
; 729  :  #else /* _HAS_CPP0X */
; 730  : 		: _Mybase(_Right._Getal())
; 731  :  #endif /* _HAS_CPP0X */
; 732  : 
; 733  : 		{	// construct by copying _Right
; 734  : 		_Tidy();
; 735  : 		assign(_Right, 0, npos);
; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));

  00095	6a ff		 push	 -1
  00097	6a 00		 push	 0
  00099	53		 push	 ebx
  0009a	8b ce		 mov	 ecx, esi
  0009c	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\string

; 43   : 	return (_Ans);

  000a1	8b c6		 mov	 eax, esi

; 44   : 	}

  000a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ad	59		 pop	 ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@operator
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN4@operator:
  00018	c3		 ret	 0
__ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WABV10@@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBVVertexUVRGBA@gfxu@@@std@@YAPBVVertexUVRGBA@gfxu@@ABV12@@Z
_TEXT	SEGMENT
??$addressof@$$CBVVertexUVRGBA@gfxu@@@std@@YAPBVVertexUVRGBA@gfxu@@ABV12@@Z PROC ; std::addressof<gfxu::VertexUVRGBA const >, COMDAT
; __Val$ = ecx

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00000	8b c1		 mov	 eax, ecx

; 89   : 	}

  00002	c3		 ret	 0
??$addressof@$$CBVVertexUVRGBA@gfxu@@@std@@YAPBVVertexUVRGBA@gfxu@@ABV12@@Z ENDP ; std::addressof<gfxu::VertexUVRGBA const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VVertexUVRGBA@gfxu@@AAV12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@AAV23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@VVertexUVRGBA@gfxu@@AAV12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@AAV23@@Z PROC ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA &>, COMDAT
; _this$dead$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 3b		 je	 SHORT $LN11@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __V0$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00017	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001a	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001d	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00020	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00023	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00026	89 42 10	 mov	 DWORD PTR [edx+16], eax
  00029	0f b6 41 14	 movzx	 eax, BYTE PTR [ecx+20]
  0002d	88 42 14	 mov	 BYTE PTR [edx+20], al
  00030	0f b6 41 15	 movzx	 eax, BYTE PTR [ecx+21]
  00034	88 42 15	 mov	 BYTE PTR [edx+21], al
  00037	0f b6 41 16	 movzx	 eax, BYTE PTR [ecx+22]
  0003b	88 42 16	 mov	 BYTE PTR [edx+22], al
  0003e	0f b6 41 17	 movzx	 eax, BYTE PTR [ecx+23]
  00042	88 42 17	 mov	 BYTE PTR [edx+23], al
$LN11@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
??$construct@VVertexUVRGBA@gfxu@@AAV12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@AAV23@@Z ENDP ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VVertexUVRGBA@gfxu@@ABV12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@ABV23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@VVertexUVRGBA@gfxu@@ABV12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@ABV23@@Z PROC ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA const &>, COMDAT
; _this$dead$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 3b		 je	 SHORT $LN11@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __V0$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00017	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001a	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001d	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00020	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00023	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00026	89 42 10	 mov	 DWORD PTR [edx+16], eax
  00029	0f b6 41 14	 movzx	 eax, BYTE PTR [ecx+20]
  0002d	88 42 14	 mov	 BYTE PTR [edx+20], al
  00030	0f b6 41 15	 movzx	 eax, BYTE PTR [ecx+21]
  00034	88 42 15	 mov	 BYTE PTR [edx+21], al
  00037	0f b6 41 16	 movzx	 eax, BYTE PTR [ecx+22]
  0003b	88 42 16	 mov	 BYTE PTR [edx+22], al
  0003e	0f b6 41 17	 movzx	 eax, BYTE PTR [ecx+23]
  00042	88 42 17	 mov	 BYTE PTR [edx+23], al
$LN11@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
??$construct@VVertexUVRGBA@gfxu@@ABV12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@ABV23@@Z ENDP ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT

; 1775 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAVMatrix@geom@@@std@@YA$$QAVMatrix@geom@@AAV12@@Z
_TEXT	SEGMENT
??$move@AAVMatrix@geom@@@std@@YA$$QAVMatrix@geom@@AAV12@@Z PROC ; std::move<geom::Matrix &>, COMDAT
; __Arg$ = ecx

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1792 : 	}

  00002	c3		 ret	 0
??$move@AAVMatrix@geom@@@std@@YA$$QAVMatrix@geom@@AAV12@@Z ENDP ; std::move<geom::Matrix &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 12
__Lock$3 = -24						; size = 4
__Lock$4 = -20						; size = 4
__Psave$5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z PROC ; std::use_facet<std::codecvt<char,char,int> >, COMDAT

; 543  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 544  :  #if _NO_LOCALES
; 545  : 	static _Wrap_facet<_Facet> _Wfac;
; 546  : 	return (*(_Facet *)&_Wfac);
; 547  : 
; 548  :  #else /* _NO_LOCALES */
; 549  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00028	6a 00		 push	 0
  0002a	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 79   : 			if (_Id == 0)

  00039	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$codecvt@DDH@std@@2V0locale@2@A ; std::codecvt<char,char,int>::id

; 550  : 		const locale::facet *_Psave =
; 551  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  0003f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave
  00045	89 5d f0	 mov	 DWORD PTR __Psave$5[ebp], ebx

; 79   : 			if (_Id == 0)

  00048	85 ff		 test	 edi, edi
  0004a	75 2f		 jne	 SHORT $LN11@use_facet

; 80   : 				{	// still zero, allocate stamp
; 81   : 				_BEGIN_LOCK(_LOCK_LOCALE)

  0004c	57		 push	 edi
  0004d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 82   : 					if (_Id == 0)

  00055	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$codecvt@DDH@std@@2V0locale@2@A, edi ; std::codecvt<char,char,int>::id
  0005b	75 10		 jne	 SHORT $LN10@use_facet

; 83   : 						_Id = ++_Id_cnt;

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00062	40		 inc	 eax
  00063	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$codecvt@DDH@std@@2V0locale@2@A, eax ; std::codecvt<char,char,int>::id
$LN10@use_facet:

; 84   : 				_END_LOCK()

  0006d	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00070	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00075	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$codecvt@DDH@std@@2V0locale@2@A ; std::codecvt<char,char,int>::id
$LN11@use_facet:

; 85   : 				}
; 86   : 			return (_Id);
; 87   : 			}
; 88   : 
; 89   : 	private:
; 90   : 		size_t _Id;	// the identifier stamp
; 91   : 
; 92   : 		__PURE_APPDOMAIN_GLOBAL static int _Id_cnt;
; 93   : 
; 94   : 		__CLR_OR_THIS_CALL id(const id&);	// not defined
; 95   : 		id& __CLR_OR_THIS_CALL operator=(const id&);	// not defined
; 96   : 		};
; 97   : 
; 98   : 	class _Locimp;
; 99   : 
; 100  : 			// CLASS facet
; 101  : 	class _CRTIMP2_PURE facet
; 102  : 		: public _Facet_base
; 103  : 		{	// base class for all locale facets, performs reference counting
; 104  : 		friend class locale;
; 105  : 		friend class _Locimp;
; 106  : 
; 107  : 		template<class _Ty>
; 108  : 			friend void __CLRCALL_OR_CDECL _DebugHeapDelete(_Ty *_Ptr);
; 109  : 
; 110  : 	public:
; 111  : 		static size_t __CLRCALL_OR_CDECL _Getcat(const facet ** = 0,
; 112  : 			const locale * = 0)
; 113  : 			{	// get category value, or -1 if no corresponding C category
; 114  : 			return ((size_t)(-1));
; 115  : 			}
; 116  : 
; 117  :   #if defined(_DEBUG) && !defined(_M_X64)
; 118  : 		void *__CLRCALL_OR_CDECL operator new(size_t _Size)
; 119  : 			{	// replace operator new
; 120  : 			return (operator new(_Size, _DebugHeapTag_func(),
; 121  : 				__FILE__, __LINE__));
; 122  : 			}
; 123  : 
; 124  : 		void *__CLRCALL_OR_CDECL operator new(size_t _Size,
; 125  : 			const _DebugHeapTag_t& _Tag, char *_File, int _Line)
; 126  : 			{	// replace debugging operator new
; 127  : 			return (::operator new(_Size, _Tag, _File, _Line));
; 128  : 			}
; 129  : 
; 130  : 		void __CLRCALL_OR_CDECL operator delete(void *_Ptr,
; 131  : 			const _DebugHeapTag_t&, char *, int)
; 132  : 			{	// replace debugging operator delete
; 133  : 			operator delete(_Ptr);
; 134  : 			}
; 135  : 
; 136  : 		void __CLRCALL_OR_CDECL operator delete(void *_Ptr)
; 137  : 			{	// replace operator delete
; 138  : 			_DebugHeapDelete((facet *)_Ptr);
; 139  : 			}
; 140  :   #endif /* defined(_DEBUG) etc. */
; 141  : 
; 142  : 		virtual void __CLR_OR_THIS_CALL _Incref()
; 143  : 			{   // increment use count
; 144  : 			_MT_INCR(_Mtx, _Refs);
; 145  : 			}
; 146  : 
; 147  : 		virtual _Facet_base *__CLR_OR_THIS_CALL _Decref()
; 148  : 			{   // decrement use count
; 149  : 			if (_MT_DECR(_Mtx, _Refs) == 0)
; 150  : 				return (this);
; 151  : 			else
; 152  : 				return (0);
; 153  : 			}
; 154  : 
; 155  : private:
; 156  : 	_Atomic_counter_t _Refs;	// the reference count
; 157  : 
; 158  : 	protected:
; 159  : 		explicit __CLR_OR_THIS_CALL facet(size_t _Initrefs = 0)
; 160  : 			{	// construct with initial reference count
; 161  : 			_Init_atomic_counter(_Refs, (_Atomic_integral_t)_Initrefs);
; 162  : 			}
; 163  : 
; 164  : 		virtual __CLR_OR_THIS_CALL ~facet() _NOEXCEPT
; 165  : 			{	// ensure that derived classes can be destroyed properly
; 166  : 			}
; 167  : 
; 168  : 		private:
; 169  : 			__CLR_OR_THIS_CALL facet(const facet&);	// not defined
; 170  : 
; 171  : 		facet& __CLR_OR_THIS_CALL operator=(const facet&);	// not defined
; 172  : 		};
; 173  : 
; 174  : 			// CLASS _Locimp
; 175  :  #pragma warning(push)
; 176  :  #pragma warning(disable: 4275)
; 177  : 
; 178  : 	class _CRTIMP2_PURE _Locimp
; 179  : 		: public facet
; 180  : 		{	// reference-counted actual implementation of a locale
; 181  : 	protected:
; 182  : 		__CLR_OR_THIS_CALL ~_Locimp() _NOEXCEPT
; 183  : 		{	// destroy the object
; 184  : 		_Locimp_dtor(this);
; 185  : 		}
; 186  : 
; 187  : 	private:
; 188  : 		static _MRTIMP2_PURE_NPURE _Locimp *__CLRCALL_PURE_OR_CDECL
; 189  : 			_New_Locimp(bool _Transparent = false);
; 190  : 		static _MRTIMP2_PURE_NPURE _Locimp *__CLRCALL_PURE_OR_CDECL
; 191  : 			_New_Locimp(const _Locimp& _Right);
; 192  : 
; 193  : 		static _MRTIMP2_PURE_NPURE void __CLRCALL_PURE_OR_CDECL
; 194  : 			_Locimp_dtor(_Locimp *);
; 195  : 		static _MRTIMP2_PURE_NPURE void __CLRCALL_PURE_OR_CDECL
; 196  : 			_Locimp_Addfac(_Locimp *, facet *, size_t);	// add a facet
; 197  : 		static void __CLRCALL_PURE_OR_CDECL
; 198  : 			_Locimp_ctor(_Locimp *, const _Locimp&);
; 199  : 
; 200  : 		friend class locale;
; 201  : 
; 202  : 		__CLR_OR_THIS_CALL _Locimp(bool _Transparent)
; 203  : 			: locale::facet(1), _Facetvec(0), _Facetcount(0),
; 204  : 				_Catmask(none), _Xparent(_Transparent),
; 205  : 					_Name("*")
; 206  : 			{	// construct an empty _Locimp
; 207  : 			}
; 208  : 
; 209  : 		__CLR_OR_THIS_CALL _Locimp(const _Locimp& _Right)
; 210  : 			: locale::facet(1), _Facetvec(0), _Facetcount(_Right._Facetcount),
; 211  : 				_Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
; 212  : 					_Name(_Right._Name.c_str())
; 213  : 			{	// construct by copying
; 214  : 			_Locimp_ctor(this, _Right);
; 215  : 			}
; 216  : 
; 217  : 		void __CLR_OR_THIS_CALL _Addfac(facet *_Pfacet, size_t _Id)
; 218  : 			{	// add a facet
; 219  : 			_Locimp_Addfac(this, _Pfacet, _Id);
; 220  : 			}
; 221  : 
; 222  : 		static _Locimp *__CLRCALL_OR_CDECL _Makeloc(const _Locinfo&,
; 223  : 			category, _Locimp *, const locale *);	// make essential facets
; 224  : 
; 225  : 		static void __CLRCALL_OR_CDECL _Makewloc(const _Locinfo&,
; 226  : 			category, _Locimp *, const locale *);	// make wchar_t facets
; 227  : 
; 228  :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 229  : 		static void __CLRCALL_OR_CDECL _Makeushloc(const _Locinfo&,
; 230  : 			category, _Locimp *, const locale *);	// make ushort facets
; 231  :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 232  : 
; 233  : 		static void __CLRCALL_OR_CDECL _Makexloc(const _Locinfo&,
; 234  : 			category, _Locimp *, const locale *);	// make remaining facets
; 235  : 
; 236  : 		facet **_Facetvec;	// pointer to vector of facets
; 237  : 		size_t _Facetcount;	// size of vector of facets
; 238  : 		category _Catmask;	// mask describing implemented categories
; 239  : 		bool _Xparent;	// true if locale is transparent
; 240  : 		_Yarn<char> _Name;	// locale name, or "*" if not known
; 241  : 
; 242  : 		__PURE_APPDOMAIN_GLOBAL static _Locimp *_Clocptr;
; 243  : 
; 244  : private:
; 245  : 		_Locimp& __CLR_OR_THIS_CALL operator=(const _Locimp&);	// not defined
; 246  : 		};
; 247  : 
; 248  :  #pragma warning(pop)
; 249  : 
; 250  : 	template<class _Elem,
; 251  : 		class _Traits,
; 252  : 		class _Alloc>
; 253  : 		bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 254  : 			const basic_string<_Elem, _Traits, _Alloc>& _Right) const
; 255  : 		{	// compare _Left and _Right strings using collate facet in locale
; 256  : 		const _STD collate<_Elem>& _Coll_fac =
; 257  : 			use_facet<_STD collate<_Elem> >(*this);
; 258  : 
; 259  : 		return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
; 260  : 			_Right.c_str(), _Right.c_str() + _Right.size()) < 0);
; 261  : 		}
; 262  : 
; 263  : 	template<class _Facet>
; 264  : 		locale combine(const locale& _Loc) const
; 265  : 		{	// combine two locales
; 266  : 		_Facet *_Facptr;
; 267  : 
; 268  : 		_TRY_BEGIN
; 269  : 			_Facptr = (_Facet *)&use_facet<_Facet>(_Loc);
; 270  : 		_CATCH_ALL
; 271  : 			_Xruntime_error("locale::combine facet missing");
; 272  : 		_CATCH_END
; 273  : 
; 274  : 		_Locimp *_Newimp = _Locimp::_New_Locimp(*_Ptr);
; 275  : 		_Newimp->_Addfac(_Facptr, _Facet::id);
; 276  : 		_Newimp->_Catmask = 0;
; 277  : 		_Newimp->_Name = "*";
; 278  : 		return (locale(_Newimp));
; 279  : 		}
; 280  : 
; 281  : 	template<class _Facet>
; 282  : 		locale(const locale& _Loc, const _Facet *_Facptr)
; 283  : 			: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 284  : 		{	// construct from _Loc, replacing facet with *_Facptr
; 285  : 		if (_Facptr != 0)
; 286  : 			{	// replace facet
; 287  : 			_Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
; 288  : 			if (_Facet::_Getcat() != (size_t)(-1))
; 289  : 				{	// no C category
; 290  : 				_Ptr->_Catmask = 0;
; 291  : 				_Ptr->_Name = "*";
; 292  : 				}
; 293  : 			}
; 294  : 		}
; 295  : 
; 296  : 	locale(_Uninitialized)
; 297  : 		{	// defer construction
; 298  : 		}
; 299  : 
; 300  :  #if _NO_LOCALES
; 301  : 	locale(const locale& _Right) _THROW0()
; 302  : 		: _Ptr(0)
; 303  : 		{	// construct by copying
; 304  : 		}
; 305  : 
; 306  : 	locale() _THROW0()
; 307  : 		: _Ptr(0)
; 308  : 		{	// construct from current locale
; 309  : 		}
; 310  : 
; 311  : 	~locale() _NOEXCEPT
; 312  : 		{	// destroy the object
; 313  : 		}
; 314  : 
; 315  : 	locale& operator=(const locale& _Right) _THROW0()
; 316  : 		{	// assign a locale
; 317  : 		return (*this);
; 318  : 		}
; 319  : 
; 320  :  #else /* _NO_LOCALES */
; 321  : 	locale(const locale& _Right) _THROW0()
; 322  : 		: _Ptr(_Right._Ptr)
; 323  : 		{	// construct by copying
; 324  : 		_Ptr->_Incref();
; 325  : 		}
; 326  : 
; 327  : 	locale() _THROW0()
; 328  : 		: _Ptr(_Init(true))
; 329  : 		{	// construct from current locale
; 330  : 		}
; 331  : 
; 332  : 	locale(const locale& _Loc, const locale& _Other,
; 333  : 		category _Cat)
; 334  : 		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 335  : 		{	// construct a locale by copying named facets
; 336  : 		_TRY_BEGIN
; 337  : 		_BEGIN_LOCINFO(_Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str()))
; 338  : 			_Locimp::_Makeloc(_Lobj._Addcats(_Cat & _Other._Ptr->_Catmask,
; 339  : 				_Other._Ptr->_Name.c_str()), _Cat, _Ptr, &_Other);
; 340  : 		_END_LOCINFO()
; 341  : 		_CATCH_ALL
; 342  : 		_DELETE_CRT(_Ptr->_Decref());
; 343  : 		_RERAISE;
; 344  : 		_CATCH_END
; 345  : 		}
; 346  : 
; 347  : 	explicit locale(const char *_Locname,
; 348  : 		category _Cat = all) 	// construct from named locale for category
; 349  : 		: _Ptr(_Locimp::_New_Locimp())
; 350  : 		{	// construct a locale with named facets
; 351  : 		_TRY_BEGIN
; 352  : 		_Init();
; 353  : 		_BEGIN_LOCINFO(_Lobj(_Cat, _Locname))
; 354  : 			if (_Badname(_Lobj))
; 355  : 				_Xruntime_error("bad locale name");
; 356  : 			_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
; 357  : 		_END_LOCINFO()
; 358  : 		_CATCH_ALL
; 359  : 		_DELETE_CRT(_Ptr->_Decref());
; 360  : 		_RERAISE;
; 361  : 		_CATCH_END
; 362  : 		}
; 363  : 
; 364  : 	locale(const locale& _Loc, const char *_Locname,
; 365  : 		category _Cat)
; 366  : 		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 367  : 		{	// construct a locale by copying, replacing named facets
; 368  : 		_TRY_BEGIN
; 369  : 		_BEGIN_LOCINFO(_Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str()))
; 370  : 			bool _Hadname = !_Badname(_Lobj);
; 371  : 			_Lobj._Addcats(_Cat, _Locname);
; 372  : 
; 373  : 			if (_Hadname && _Badname(_Lobj))
; 374  : 				_Xruntime_error("bad locale name");
; 375  : 			_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
; 376  : 		_END_LOCINFO()
; 377  : 		_CATCH_ALL
; 378  : 		_DELETE_CRT(_Ptr->_Decref());
; 379  : 		_RERAISE;
; 380  : 		_CATCH_END
; 381  : 		}
; 382  : 
; 383  :  #if _HAS_CPP0X
; 384  : 	explicit locale(const string& _Str,
; 385  : 		category _Cat = all)
; 386  : 		: _Ptr(_Locimp::_New_Locimp())
; 387  : 		{	// construct a locale with named facets
; 388  : 		_TRY_BEGIN
; 389  : 		_Init();
; 390  : 		_Locinfo _Lobj(_Cat, _Str.c_str());
; 391  : 
; 392  : 		if (_Badname(_Lobj))
; 393  : 			_Xruntime_error("bad locale name");
; 394  : 		_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
; 395  : 		_CATCH_ALL
; 396  : 		_DELETE_CRT(_Ptr->_Decref());
; 397  : 		_RERAISE;
; 398  : 		_CATCH_END
; 399  : 		}
; 400  : 
; 401  : 	locale(const locale& _Loc, const string& _Str,
; 402  : 		category _Cat)
; 403  : 		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 404  : 		{	// construct a locale by copying, replacing named facets
; 405  : 		_TRY_BEGIN
; 406  : 		_Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
; 407  : 		bool _Hadname = !_Badname(_Lobj);
; 408  : 		_Lobj._Addcats(_Cat, _Str.c_str());
; 409  : 
; 410  : 		if (_Hadname && _Badname(_Lobj))
; 411  : 			_Xruntime_error("bad locale name");
; 412  : 		_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
; 413  : 		_CATCH_ALL
; 414  : 		_DELETE_CRT(_Ptr->_Decref());
; 415  : 		_RERAISE;
; 416  : 		_CATCH_END
; 417  : 		}
; 418  :  #endif /* _HAS_CPP0X */
; 419  : 
; 420  : 	~locale() _NOEXCEPT
; 421  : 		{	// destroy the object
; 422  : 		if (_Ptr != 0)
; 423  : 			_DELETE_CRT(_Ptr->_Decref());
; 424  : 		}
; 425  : 
; 426  : 	locale& operator=(const locale& _Right) _THROW0()
; 427  : 		{	// assign a locale
; 428  : 		if (_Ptr != _Right._Ptr)
; 429  : 			{	// different implementation, point at new one
; 430  : 			_DELETE_CRT(_Ptr->_Decref());
; 431  : 			_Ptr = _Right._Ptr;
; 432  : 			_Ptr->_Incref();
; 433  : 			}
; 434  : 		return (*this);
; 435  : 		}
; 436  :  #endif /* _NO_LOCALES */
; 437  : 
; 438  : 	string name() const
; 439  : 		{	// return locale name
; 440  : 		return (_Ptr == 0 ? string() : _Ptr->_Name.c_str());
; 441  : 		}
; 442  : 
; 443  : 	const char *c_str() const
; 444  : 		{	// return locale name as NTBS
; 445  : 		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());
; 446  : 		}
; 447  : 
; 448  : 	const facet *_Getfacet(size_t _Id) const
; 449  : 		{	// look up a facet in locale object
; 450  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 451  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  0007b	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  0007e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00080	3b 79 0c	 cmp	 edi, DWORD PTR [ecx+12]
  00083	73 0c		 jae	 SHORT $LN20@use_facet
  00085	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00088	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]

; 452  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  0008b	85 f6		 test	 esi, esi
  0008d	75 6e		 jne	 SHORT $LN1@use_facet
  0008f	eb 02		 jmp	 SHORT $LN24@use_facet
$LN20@use_facet:

; 85   : 				}
; 86   : 			return (_Id);
; 87   : 			}
; 88   : 
; 89   : 	private:
; 90   : 		size_t _Id;	// the identifier stamp
; 91   : 
; 92   : 		__PURE_APPDOMAIN_GLOBAL static int _Id_cnt;
; 93   : 
; 94   : 		__CLR_OR_THIS_CALL id(const id&);	// not defined
; 95   : 		id& __CLR_OR_THIS_CALL operator=(const id&);	// not defined
; 96   : 		};
; 97   : 
; 98   : 	class _Locimp;
; 99   : 
; 100  : 			// CLASS facet
; 101  : 	class _CRTIMP2_PURE facet
; 102  : 		: public _Facet_base
; 103  : 		{	// base class for all locale facets, performs reference counting
; 104  : 		friend class locale;
; 105  : 		friend class _Locimp;
; 106  : 
; 107  : 		template<class _Ty>
; 108  : 			friend void __CLRCALL_OR_CDECL _DebugHeapDelete(_Ty *_Ptr);
; 109  : 
; 110  : 	public:
; 111  : 		static size_t __CLRCALL_OR_CDECL _Getcat(const facet ** = 0,
; 112  : 			const locale * = 0)
; 113  : 			{	// get category value, or -1 if no corresponding C category
; 114  : 			return ((size_t)(-1));
; 115  : 			}
; 116  : 
; 117  :   #if defined(_DEBUG) && !defined(_M_X64)
; 118  : 		void *__CLRCALL_OR_CDECL operator new(size_t _Size)
; 119  : 			{	// replace operator new
; 120  : 			return (operator new(_Size, _DebugHeapTag_func(),
; 121  : 				__FILE__, __LINE__));
; 122  : 			}
; 123  : 
; 124  : 		void *__CLRCALL_OR_CDECL operator new(size_t _Size,
; 125  : 			const _DebugHeapTag_t& _Tag, char *_File, int _Line)
; 126  : 			{	// replace debugging operator new
; 127  : 			return (::operator new(_Size, _Tag, _File, _Line));
; 128  : 			}
; 129  : 
; 130  : 		void __CLRCALL_OR_CDECL operator delete(void *_Ptr,
; 131  : 			const _DebugHeapTag_t&, char *, int)
; 132  : 			{	// replace debugging operator delete
; 133  : 			operator delete(_Ptr);
; 134  : 			}
; 135  : 
; 136  : 		void __CLRCALL_OR_CDECL operator delete(void *_Ptr)
; 137  : 			{	// replace operator delete
; 138  : 			_DebugHeapDelete((facet *)_Ptr);
; 139  : 			}
; 140  :   #endif /* defined(_DEBUG) etc. */
; 141  : 
; 142  : 		virtual void __CLR_OR_THIS_CALL _Incref()
; 143  : 			{   // increment use count
; 144  : 			_MT_INCR(_Mtx, _Refs);
; 145  : 			}
; 146  : 
; 147  : 		virtual _Facet_base *__CLR_OR_THIS_CALL _Decref()
; 148  : 			{   // decrement use count
; 149  : 			if (_MT_DECR(_Mtx, _Refs) == 0)
; 150  : 				return (this);
; 151  : 			else
; 152  : 				return (0);
; 153  : 			}
; 154  : 
; 155  : private:
; 156  : 	_Atomic_counter_t _Refs;	// the reference count
; 157  : 
; 158  : 	protected:
; 159  : 		explicit __CLR_OR_THIS_CALL facet(size_t _Initrefs = 0)
; 160  : 			{	// construct with initial reference count
; 161  : 			_Init_atomic_counter(_Refs, (_Atomic_integral_t)_Initrefs);
; 162  : 			}
; 163  : 
; 164  : 		virtual __CLR_OR_THIS_CALL ~facet() _NOEXCEPT
; 165  : 			{	// ensure that derived classes can be destroyed properly
; 166  : 			}
; 167  : 
; 168  : 		private:
; 169  : 			__CLR_OR_THIS_CALL facet(const facet&);	// not defined
; 170  : 
; 171  : 		facet& __CLR_OR_THIS_CALL operator=(const facet&);	// not defined
; 172  : 		};
; 173  : 
; 174  : 			// CLASS _Locimp
; 175  :  #pragma warning(push)
; 176  :  #pragma warning(disable: 4275)
; 177  : 
; 178  : 	class _CRTIMP2_PURE _Locimp
; 179  : 		: public facet
; 180  : 		{	// reference-counted actual implementation of a locale
; 181  : 	protected:
; 182  : 		__CLR_OR_THIS_CALL ~_Locimp() _NOEXCEPT
; 183  : 		{	// destroy the object
; 184  : 		_Locimp_dtor(this);
; 185  : 		}
; 186  : 
; 187  : 	private:
; 188  : 		static _MRTIMP2_PURE_NPURE _Locimp *__CLRCALL_PURE_OR_CDECL
; 189  : 			_New_Locimp(bool _Transparent = false);
; 190  : 		static _MRTIMP2_PURE_NPURE _Locimp *__CLRCALL_PURE_OR_CDECL
; 191  : 			_New_Locimp(const _Locimp& _Right);
; 192  : 
; 193  : 		static _MRTIMP2_PURE_NPURE void __CLRCALL_PURE_OR_CDECL
; 194  : 			_Locimp_dtor(_Locimp *);
; 195  : 		static _MRTIMP2_PURE_NPURE void __CLRCALL_PURE_OR_CDECL
; 196  : 			_Locimp_Addfac(_Locimp *, facet *, size_t);	// add a facet
; 197  : 		static void __CLRCALL_PURE_OR_CDECL
; 198  : 			_Locimp_ctor(_Locimp *, const _Locimp&);
; 199  : 
; 200  : 		friend class locale;
; 201  : 
; 202  : 		__CLR_OR_THIS_CALL _Locimp(bool _Transparent)
; 203  : 			: locale::facet(1), _Facetvec(0), _Facetcount(0),
; 204  : 				_Catmask(none), _Xparent(_Transparent),
; 205  : 					_Name("*")
; 206  : 			{	// construct an empty _Locimp
; 207  : 			}
; 208  : 
; 209  : 		__CLR_OR_THIS_CALL _Locimp(const _Locimp& _Right)
; 210  : 			: locale::facet(1), _Facetvec(0), _Facetcount(_Right._Facetcount),
; 211  : 				_Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
; 212  : 					_Name(_Right._Name.c_str())
; 213  : 			{	// construct by copying
; 214  : 			_Locimp_ctor(this, _Right);
; 215  : 			}
; 216  : 
; 217  : 		void __CLR_OR_THIS_CALL _Addfac(facet *_Pfacet, size_t _Id)
; 218  : 			{	// add a facet
; 219  : 			_Locimp_Addfac(this, _Pfacet, _Id);
; 220  : 			}
; 221  : 
; 222  : 		static _Locimp *__CLRCALL_OR_CDECL _Makeloc(const _Locinfo&,
; 223  : 			category, _Locimp *, const locale *);	// make essential facets
; 224  : 
; 225  : 		static void __CLRCALL_OR_CDECL _Makewloc(const _Locinfo&,
; 226  : 			category, _Locimp *, const locale *);	// make wchar_t facets
; 227  : 
; 228  :  #ifdef _NATIVE_WCHAR_T_DEFINED
; 229  : 		static void __CLRCALL_OR_CDECL _Makeushloc(const _Locinfo&,
; 230  : 			category, _Locimp *, const locale *);	// make ushort facets
; 231  :  #endif /* _NATIVE_WCHAR_T_DEFINED */
; 232  : 
; 233  : 		static void __CLRCALL_OR_CDECL _Makexloc(const _Locinfo&,
; 234  : 			category, _Locimp *, const locale *);	// make remaining facets
; 235  : 
; 236  : 		facet **_Facetvec;	// pointer to vector of facets
; 237  : 		size_t _Facetcount;	// size of vector of facets
; 238  : 		category _Catmask;	// mask describing implemented categories
; 239  : 		bool _Xparent;	// true if locale is transparent
; 240  : 		_Yarn<char> _Name;	// locale name, or "*" if not known
; 241  : 
; 242  : 		__PURE_APPDOMAIN_GLOBAL static _Locimp *_Clocptr;
; 243  : 
; 244  : private:
; 245  : 		_Locimp& __CLR_OR_THIS_CALL operator=(const _Locimp&);	// not defined
; 246  : 		};
; 247  : 
; 248  :  #pragma warning(pop)
; 249  : 
; 250  : 	template<class _Elem,
; 251  : 		class _Traits,
; 252  : 		class _Alloc>
; 253  : 		bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 254  : 			const basic_string<_Elem, _Traits, _Alloc>& _Right) const
; 255  : 		{	// compare _Left and _Right strings using collate facet in locale
; 256  : 		const _STD collate<_Elem>& _Coll_fac =
; 257  : 			use_facet<_STD collate<_Elem> >(*this);
; 258  : 
; 259  : 		return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
; 260  : 			_Right.c_str(), _Right.c_str() + _Right.size()) < 0);
; 261  : 		}
; 262  : 
; 263  : 	template<class _Facet>
; 264  : 		locale combine(const locale& _Loc) const
; 265  : 		{	// combine two locales
; 266  : 		_Facet *_Facptr;
; 267  : 
; 268  : 		_TRY_BEGIN
; 269  : 			_Facptr = (_Facet *)&use_facet<_Facet>(_Loc);
; 270  : 		_CATCH_ALL
; 271  : 			_Xruntime_error("locale::combine facet missing");
; 272  : 		_CATCH_END
; 273  : 
; 274  : 		_Locimp *_Newimp = _Locimp::_New_Locimp(*_Ptr);
; 275  : 		_Newimp->_Addfac(_Facptr, _Facet::id);
; 276  : 		_Newimp->_Catmask = 0;
; 277  : 		_Newimp->_Name = "*";
; 278  : 		return (locale(_Newimp));
; 279  : 		}
; 280  : 
; 281  : 	template<class _Facet>
; 282  : 		locale(const locale& _Loc, const _Facet *_Facptr)
; 283  : 			: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 284  : 		{	// construct from _Loc, replacing facet with *_Facptr
; 285  : 		if (_Facptr != 0)
; 286  : 			{	// replace facet
; 287  : 			_Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
; 288  : 			if (_Facet::_Getcat() != (size_t)(-1))
; 289  : 				{	// no C category
; 290  : 				_Ptr->_Catmask = 0;
; 291  : 				_Ptr->_Name = "*";
; 292  : 				}
; 293  : 			}
; 294  : 		}
; 295  : 
; 296  : 	locale(_Uninitialized)
; 297  : 		{	// defer construction
; 298  : 		}
; 299  : 
; 300  :  #if _NO_LOCALES
; 301  : 	locale(const locale& _Right) _THROW0()
; 302  : 		: _Ptr(0)
; 303  : 		{	// construct by copying
; 304  : 		}
; 305  : 
; 306  : 	locale() _THROW0()
; 307  : 		: _Ptr(0)
; 308  : 		{	// construct from current locale
; 309  : 		}
; 310  : 
; 311  : 	~locale() _NOEXCEPT
; 312  : 		{	// destroy the object
; 313  : 		}
; 314  : 
; 315  : 	locale& operator=(const locale& _Right) _THROW0()
; 316  : 		{	// assign a locale
; 317  : 		return (*this);
; 318  : 		}
; 319  : 
; 320  :  #else /* _NO_LOCALES */
; 321  : 	locale(const locale& _Right) _THROW0()
; 322  : 		: _Ptr(_Right._Ptr)
; 323  : 		{	// construct by copying
; 324  : 		_Ptr->_Incref();
; 325  : 		}
; 326  : 
; 327  : 	locale() _THROW0()
; 328  : 		: _Ptr(_Init(true))
; 329  : 		{	// construct from current locale
; 330  : 		}
; 331  : 
; 332  : 	locale(const locale& _Loc, const locale& _Other,
; 333  : 		category _Cat)
; 334  : 		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 335  : 		{	// construct a locale by copying named facets
; 336  : 		_TRY_BEGIN
; 337  : 		_BEGIN_LOCINFO(_Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str()))
; 338  : 			_Locimp::_Makeloc(_Lobj._Addcats(_Cat & _Other._Ptr->_Catmask,
; 339  : 				_Other._Ptr->_Name.c_str()), _Cat, _Ptr, &_Other);
; 340  : 		_END_LOCINFO()
; 341  : 		_CATCH_ALL
; 342  : 		_DELETE_CRT(_Ptr->_Decref());
; 343  : 		_RERAISE;
; 344  : 		_CATCH_END
; 345  : 		}
; 346  : 
; 347  : 	explicit locale(const char *_Locname,
; 348  : 		category _Cat = all) 	// construct from named locale for category
; 349  : 		: _Ptr(_Locimp::_New_Locimp())
; 350  : 		{	// construct a locale with named facets
; 351  : 		_TRY_BEGIN
; 352  : 		_Init();
; 353  : 		_BEGIN_LOCINFO(_Lobj(_Cat, _Locname))
; 354  : 			if (_Badname(_Lobj))
; 355  : 				_Xruntime_error("bad locale name");
; 356  : 			_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
; 357  : 		_END_LOCINFO()
; 358  : 		_CATCH_ALL
; 359  : 		_DELETE_CRT(_Ptr->_Decref());
; 360  : 		_RERAISE;
; 361  : 		_CATCH_END
; 362  : 		}
; 363  : 
; 364  : 	locale(const locale& _Loc, const char *_Locname,
; 365  : 		category _Cat)
; 366  : 		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 367  : 		{	// construct a locale by copying, replacing named facets
; 368  : 		_TRY_BEGIN
; 369  : 		_BEGIN_LOCINFO(_Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str()))
; 370  : 			bool _Hadname = !_Badname(_Lobj);
; 371  : 			_Lobj._Addcats(_Cat, _Locname);
; 372  : 
; 373  : 			if (_Hadname && _Badname(_Lobj))
; 374  : 				_Xruntime_error("bad locale name");
; 375  : 			_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
; 376  : 		_END_LOCINFO()
; 377  : 		_CATCH_ALL
; 378  : 		_DELETE_CRT(_Ptr->_Decref());
; 379  : 		_RERAISE;
; 380  : 		_CATCH_END
; 381  : 		}
; 382  : 
; 383  :  #if _HAS_CPP0X
; 384  : 	explicit locale(const string& _Str,
; 385  : 		category _Cat = all)
; 386  : 		: _Ptr(_Locimp::_New_Locimp())
; 387  : 		{	// construct a locale with named facets
; 388  : 		_TRY_BEGIN
; 389  : 		_Init();
; 390  : 		_Locinfo _Lobj(_Cat, _Str.c_str());
; 391  : 
; 392  : 		if (_Badname(_Lobj))
; 393  : 			_Xruntime_error("bad locale name");
; 394  : 		_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
; 395  : 		_CATCH_ALL
; 396  : 		_DELETE_CRT(_Ptr->_Decref());
; 397  : 		_RERAISE;
; 398  : 		_CATCH_END
; 399  : 		}
; 400  : 
; 401  : 	locale(const locale& _Loc, const string& _Str,
; 402  : 		category _Cat)
; 403  : 		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
; 404  : 		{	// construct a locale by copying, replacing named facets
; 405  : 		_TRY_BEGIN
; 406  : 		_Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
; 407  : 		bool _Hadname = !_Badname(_Lobj);
; 408  : 		_Lobj._Addcats(_Cat, _Str.c_str());
; 409  : 
; 410  : 		if (_Hadname && _Badname(_Lobj))
; 411  : 			_Xruntime_error("bad locale name");
; 412  : 		_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
; 413  : 		_CATCH_ALL
; 414  : 		_DELETE_CRT(_Ptr->_Decref());
; 415  : 		_RERAISE;
; 416  : 		_CATCH_END
; 417  : 		}
; 418  :  #endif /* _HAS_CPP0X */
; 419  : 
; 420  : 	~locale() _NOEXCEPT
; 421  : 		{	// destroy the object
; 422  : 		if (_Ptr != 0)
; 423  : 			_DELETE_CRT(_Ptr->_Decref());
; 424  : 		}
; 425  : 
; 426  : 	locale& operator=(const locale& _Right) _THROW0()
; 427  : 		{	// assign a locale
; 428  : 		if (_Ptr != _Right._Ptr)
; 429  : 			{	// different implementation, point at new one
; 430  : 			_DELETE_CRT(_Ptr->_Decref());
; 431  : 			_Ptr = _Right._Ptr;
; 432  : 			_Ptr->_Incref();
; 433  : 			}
; 434  : 		return (*this);
; 435  : 		}
; 436  :  #endif /* _NO_LOCALES */
; 437  : 
; 438  : 	string name() const
; 439  : 		{	// return locale name
; 440  : 		return (_Ptr == 0 ? string() : _Ptr->_Name.c_str());
; 441  : 		}
; 442  : 
; 443  : 	const char *c_str() const
; 444  : 		{	// return locale name as NTBS
; 445  : 		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());
; 446  : 		}
; 447  : 
; 448  : 	const facet *_Getfacet(size_t _Id) const
; 449  : 		{	// look up a facet in locale object
; 450  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 451  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00091	33 f6		 xor	 esi, esi
$LN24@use_facet:

; 452  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00093	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  00097	74 10		 je	 SHORT $LN15@use_facet

; 453  : 			return (_Facptr);	// found facet or not transparent
; 454  : 		else
; 455  : 			{	// look in current locale
; 456  : 			locale::_Locimp *_Ptr = _Getgloballocale();

  00099	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 457  : 			return (_Id < _Ptr->_Facetcount
; 458  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 459  : 				: 0);	// no entry in current locale

  0009e	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000a1	73 0a		 jae	 SHORT $LN25@use_facet
  000a3	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000a6	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
$LN15@use_facet:

; 552  : 
; 553  : 		size_t _Id = _Facet::id;
; 554  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);
; 555  : 
; 556  : 		if (_Pf != 0)

  000a9	85 f6		 test	 esi, esi
  000ab	75 50		 jne	 SHORT $LN1@use_facet
$LN25@use_facet:

; 557  : 			;	// got facet from locale
; 558  : 		else if (_Psave != 0)

  000ad	85 db		 test	 ebx, ebx
  000af	74 04		 je	 SHORT $LN4@use_facet

; 559  : 			_Pf = _Psave;	// lazy facet already allocated

  000b1	8b f3		 mov	 esi, ebx
  000b3	eb 48		 jmp	 SHORT $LN1@use_facet
$LN4@use_facet:

; 560  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000b5	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  000b8	8d 45 f0	 lea	 eax, DWORD PTR __Psave$5[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::codecvt<char,char,int>::_Getcat
  000c1	83 c4 08	 add	 esp, 8
  000c4	83 f8 ff	 cmp	 eax, -1
  000c7	75 1b		 jne	 SHORT $LN2@use_facet

; 561  : 
; 562  :  #if _HAS_EXCEPTIONS
; 563  : 
; 564  : 			_THROW_NCEE(_XSTD bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000c9	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  000ce	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  000d1	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@PBD@Z ; std::bad_cast::bad_cast
  000d6	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000db	8d 45 dc	 lea	 eax, DWORD PTR $T2[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN29@use_facet:
$LN2@use_facet:

; 565  : 
; 566  :  #else /* _HAS_EXCEPTIONS */
; 567  : 			abort();	// lazy disallowed
; 568  :  #endif /* _HAS_EXCEPTIONS */
; 569  : 
; 570  : 		else
; 571  : 			{	// queue up lazy facet for destruction
; 572  : 			_Pf = _Psave;

  000e4	8b 75 f0	 mov	 esi, DWORD PTR __Psave$5[ebp]

; 573  : 			_Facetptr<_Facet>::_Psave = _Psave;

  000e7	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave

; 574  : 
; 575  : 			locale::facet *_Pfmod = (_Facet *)_Psave;
; 576  : 			_Pfmod->_Incref();

  000ed	8b 16		 mov	 edx, DWORD PTR [esi]
  000ef	8b ce		 mov	 ecx, esi
  000f1	ff 52 04	 call	 DWORD PTR [edx+4]

; 577  : 
; 578  :  #if defined(_M_CEE)
; 579  : 			_Facet_Register_m(_Pfmod);
; 580  : 
; 581  :  #else /* defined(_M_CEE) */
; 582  : 			_Facet_Register(_Pfmod);

  000f4	56		 push	 esi
  000f5	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  000fa	83 c4 04	 add	 esp, 4
$LN1@use_facet:

; 583  :  #endif /* defined(_M_CEE) */
; 584  : 			}
; 585  : 
; 586  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  000fd	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00100	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00105	8b c6		 mov	 eax, esi

; 587  : 	_END_LOCK()
; 588  :  #endif /* _NO_LOCALES */
; 589  : 	}	// end of use_facet body

  00107	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00111	59		 pop	 ecx
  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c3		 ret	 0
$LN27@use_facet:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::codecvt<char,char,int> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAXPAVVertexUVRGBA@gfxu@@0AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAXPAVVertexUVRGBA@gfxu@@0AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 81   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAXPAVVertexUVRGBA@gfxu@@0AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Umove@PAVVertexUVRGBA@gfxu@@@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEPAVVertexUVRGBA@gfxu@@PAV23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAVVertexUVRGBA@gfxu@@@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEPAVVertexUVRGBA@gfxu@@PAV23@00@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Umove<gfxu::VertexUVRGBA *>, COMDAT
; _this$dead$ = ecx

; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0000c	83 ec 08	 sub	 esp, 8
  0000f	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAVVertexUVRGBA@gfxu@@PAV12@V?$allocator@VVertexUVRGBA@gfxu@@@std@@V12@@std@@YAPAVVertexUVRGBA@gfxu@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<gfxu::VertexUVRGBA *,gfxu::VertexUVRGBA *,std::allocator<gfxu::VertexUVRGBA>,gfxu::VertexUVRGBA>
  00017	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1562 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAVVertexUVRGBA@gfxu@@@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IAEPAVVertexUVRGBA@gfxu@@PAV23@00@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Umove<gfxu::VertexUVRGBA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z
_TEXT	SEGMENT
$T2 = -84						; size = 12
$T3 = -72						; size = 12
$T4 = -72						; size = 12
$T5 = -60						; size = 12
$T6 = -60						; size = 12
$T7 = -48						; size = 12
$T8 = -48						; size = 12
$T9 = -36						; size = 12
$T10 = -36						; size = 12
$T11 = -36						; size = 12
_this$ = -24						; size = 4
__Oldsize$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
__First$ = 24						; size = 12
__Last$ = 36						; size = 12
??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT
; _this$ = ecx

; 1568 : 		typename enable_if<_Is_iterator<_Iter>::value,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d e8	 mov	 DWORD PTR _this$[ebp], edi

; 1569 : 			iterator>::type
; 1570 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1571 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1572 : 		size_type _Off = _Where - begin();

  00030	8d 45 dc	 lea	 eax, DWORD PTR $T11[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin

; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 385  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 386  : 		if (_Mycont == 0
; 387  : 			|| this->_Myoff <= _Mycont->_Myoff)
; 388  : 		{	// report error
; 389  : 		_DEBUG_ERROR("deque iterator not decrementable");
; 390  : 		_SCL_SECURE_OUT_OF_RANGE;
; 391  : 		}
; 392  : 
; 393  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 394  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 395  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 396  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff < this->_Myoff);
; 397  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 398  : 
; 399  : 		--_Myoff;
; 400  : 		return (*this);
; 401  : 		}
; 402  : 
; 403  : 	_Myiter operator--(int)
; 404  : 		{	// postdecrement
; 405  : 		_Myiter _Tmp = *this;
; 406  : 		--*this;
; 407  : 		return (_Tmp);
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator+=(difference_type _Off)
; 411  : 		{	// increment by integer
; 412  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 413  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 414  : 		if (_Mycont == 0
; 415  : 			|| this->_Myoff + _Off < _Mycont->_Myoff
; 416  : 			|| _Mycont->_Myoff + _Mycont->_Mysize < this->_Myoff + _Off)
; 417  : 			{	// report error
; 418  : 			_DEBUG_ERROR("deque iterator + offset out of range");
; 419  : 			_SCL_SECURE_OUT_OF_RANGE;
; 420  : 			}
; 421  : 
; 422  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 423  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 424  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 425  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff + _Off
; 426  : 			&& this->_Myoff + _Off <= _Mycont->_Myoff + _Mycont->_Mysize);
; 427  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 428  : 
; 429  : 		_Myoff += _Off;
; 430  : 		return (*this);
; 431  : 		}
; 432  : 
; 433  : 	_Myiter operator+(difference_type _Off) const
; 434  : 		{	// return this + integer
; 435  : 		_Myiter _Tmp = *this;
; 436  : 		return (_Tmp += _Off);
; 437  : 		}
; 438  : 
; 439  : 	_Myiter& operator-=(difference_type _Off)
; 440  : 		{	// decrement by integer
; 441  : 		return (*this += -_Off);
; 442  : 		}
; 443  : 
; 444  : 	_Myiter operator-(difference_type _Off) const
; 445  : 		{	// return this - integer
; 446  : 		_Myiter _Tmp = *this;
; 447  : 		return (_Tmp -= _Off);
; 448  : 		}
; 449  : 
; 450  : 	difference_type operator-(const _Myiter& _Right) const
; 451  : 		{	// return difference of iterators
; 452  : 		_Compat(_Right);
; 453  : 		return (_Right._Myoff <= this->_Myoff
; 454  : 			? this->_Myoff - _Right._Myoff
; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));

  00039	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0003c	8b 5d 14	 mov	 ebx, DWORD PTR __Where$[ebp+8]

; 456  : 		}
; 457  : 
; 458  : 	reference operator[](difference_type _Off) const
; 459  : 		{	// subscript
; 460  : 		return (*(*this + _Off));
; 461  : 		}
; 462  : 
; 463  : 	bool operator==(const _Myiter& _Right) const
; 464  : 		{	// test for iterator equality
; 465  : 		_Compat(_Right);
; 466  : 		return (this->_Myoff == _Right._Myoff);

  0003f	8b 55 20	 mov	 edx, DWORD PTR __First$[ebp+8]
  00042	8b 4d 2c	 mov	 ecx, DWORD PTR __Last$[ebp+8]

; 1573 : 
; 1574 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1575 : 		if (this->_Mysize < _Off)
; 1576 : 			_DEBUG_ERROR("deque insert iterator outside range");
; 1577 : 		_DEBUG_RANGE(_First, _Last);
; 1578 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1579 : 
; 1580 : 		size_type _Oldsize = this->_Mysize;

  00045	8b 77 10	 mov	 esi, DWORD PTR [edi+16]

; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 385  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 386  : 		if (_Mycont == 0
; 387  : 			|| this->_Myoff <= _Mycont->_Myoff)
; 388  : 		{	// report error
; 389  : 		_DEBUG_ERROR("deque iterator not decrementable");
; 390  : 		_SCL_SECURE_OUT_OF_RANGE;
; 391  : 		}
; 392  : 
; 393  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 394  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 395  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 396  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff < this->_Myoff);
; 397  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 398  : 
; 399  : 		--_Myoff;
; 400  : 		return (*this);
; 401  : 		}
; 402  : 
; 403  : 	_Myiter operator--(int)
; 404  : 		{	// postdecrement
; 405  : 		_Myiter _Tmp = *this;
; 406  : 		--*this;
; 407  : 		return (_Tmp);
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator+=(difference_type _Off)
; 411  : 		{	// increment by integer
; 412  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 413  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 414  : 		if (_Mycont == 0
; 415  : 			|| this->_Myoff + _Off < _Mycont->_Myoff
; 416  : 			|| _Mycont->_Myoff + _Mycont->_Mysize < this->_Myoff + _Off)
; 417  : 			{	// report error
; 418  : 			_DEBUG_ERROR("deque iterator + offset out of range");
; 419  : 			_SCL_SECURE_OUT_OF_RANGE;
; 420  : 			}
; 421  : 
; 422  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 423  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 424  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 425  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff + _Off
; 426  : 			&& this->_Myoff + _Off <= _Mycont->_Myoff + _Mycont->_Mysize);
; 427  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 428  : 
; 429  : 		_Myoff += _Off;
; 430  : 		return (*this);
; 431  : 		}
; 432  : 
; 433  : 	_Myiter operator+(difference_type _Off) const
; 434  : 		{	// return this + integer
; 435  : 		_Myiter _Tmp = *this;
; 436  : 		return (_Tmp += _Off);
; 437  : 		}
; 438  : 
; 439  : 	_Myiter& operator-=(difference_type _Off)
; 440  : 		{	// decrement by integer
; 441  : 		return (*this += -_Off);
; 442  : 		}
; 443  : 
; 444  : 	_Myiter operator-(difference_type _Off) const
; 445  : 		{	// return this - integer
; 446  : 		_Myiter _Tmp = *this;
; 447  : 		return (_Tmp -= _Off);
; 448  : 		}
; 449  : 
; 450  : 	difference_type operator-(const _Myiter& _Right) const
; 451  : 		{	// return difference of iterators
; 452  : 		_Compat(_Right);
; 453  : 		return (_Right._Myoff <= this->_Myoff
; 454  : 			? this->_Myoff - _Right._Myoff
; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));

  00048	2b d8		 sub	 ebx, eax

; 1573 : 
; 1574 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1575 : 		if (this->_Mysize < _Off)
; 1576 : 			_DEBUG_ERROR("deque insert iterator outside range");
; 1577 : 		_DEBUG_RANGE(_First, _Last);
; 1578 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1579 : 
; 1580 : 		size_type _Oldsize = this->_Mysize;

  0004a	89 75 ec	 mov	 DWORD PTR __Oldsize$[ebp], esi

; 456  : 		}
; 457  : 
; 458  : 	reference operator[](difference_type _Off) const
; 459  : 		{	// subscript
; 460  : 		return (*(*this + _Off));
; 461  : 		}
; 462  : 
; 463  : 	bool operator==(const _Myiter& _Right) const
; 464  : 		{	// test for iterator equality
; 465  : 		_Compat(_Right);
; 466  : 		return (this->_Myoff == _Right._Myoff);

  0004d	3b d1		 cmp	 edx, ecx

; 1581 : 
; 1582 : 		if (_First == _Last)

  0004f	0f 84 aa 01 00
	00		 je	 $LN7@insert

; 1583 : 			;
; 1584 : 		else if (_Off <= this->_Mysize / 2)

  00055	8b c6		 mov	 eax, esi
  00057	d1 e8		 shr	 eax, 1
  00059	3b d8		 cmp	 ebx, eax
  0005b	0f 87 ed 00 00
	00		 ja	 $LN14@insert

; 1585 : 			{	// closer to front, push to front then rotate
; 1586 : 			_TRY_BEGIN

  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LL45@insert:

; 456  : 		}
; 457  : 
; 458  : 	reference operator[](difference_type _Off) const
; 459  : 		{	// subscript
; 460  : 		return (*(*this + _Off));
; 461  : 		}
; 462  : 
; 463  : 	bool operator==(const _Myiter& _Right) const
; 464  : 		{	// test for iterator equality
; 465  : 		_Compat(_Right);
; 466  : 		return (this->_Myoff == _Right._Myoff);

  00068	3b d1		 cmp	 edx, ecx

; 1587 : 			for (; _First != _Last; ++_First)

  0006a	74 54		 je	 SHORT $LN10@insert
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0006c	8b 45 18	 mov	 eax, DWORD PTR __First$[ebp]
  0006f	85 c0		 test	 eax, eax
  00071	74 02		 je	 SHORT $LN58@insert
$LN57@insert:
  00073	8b 00		 mov	 eax, DWORD PTR [eax]
$LN58@insert:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00075	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 1588 : 				push_front(*_First);	// prepend flipped

  00078	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0007b	49		 dec	 ecx
  0007c	23 ca		 and	 ecx, edx

; 1588 : 				push_front(*_First);	// prepend flipped

  0007e	ff 34 88	 push	 DWORD PTR [eax+ecx*4]
  00081	8b cf		 mov	 ecx, edi
  00083	e8 00 00 00 00	 call	 ?push_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXABVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_front

; 371  : 		++_Myoff;

  00088	8b 55 20	 mov	 edx, DWORD PTR __First$[ebp+8]
  0008b	8b 4d 2c	 mov	 ecx, DWORD PTR __Last$[ebp+8]
  0008e	42		 inc	 edx
  0008f	89 55 20	 mov	 DWORD PTR __First$[ebp+8], edx
  00092	eb d4		 jmp	 SHORT $LL45@insert
__catch$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z$0:

; 1589 : 
; 1590 : 			_CATCH_ALL
; 1591 : 			for (; _Oldsize < this->_Mysize; )

  00094	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	8b 55 ec	 mov	 edx, DWORD PTR __Oldsize$[ebp]
  0009a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0009d	3b d0		 cmp	 edx, eax
  0009f	73 16		 jae	 SHORT $LN8@insert
$LL9@insert:

; 788  : 		}
; 789  : 
; 790  : 	_Mapptr _Map;		// pointer to array of pointers to blocks
; 791  : 	size_type _Mapsize;	// size of map array, zero or 2^N
; 792  : 	size_type _Myoff;	// offset of initial element
; 793  : 	size_type _Mysize;	// current length of sequence
; 794  : 	};
; 795  : 
; 796  : 		// TEMPLATE CLASS _Deque_alloc
; 797  : template<bool _Al_has_storage,
; 798  : 	class _Alloc_types>
; 799  : 	class _Deque_alloc
; 800  : 		: public _Deque_val<typename _Alloc_types::_Val_types>
; 801  : 	{	// base class for deque to hold allocator with storage
; 802  : public:
; 803  : 	typedef _Deque_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 804  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 805  : 	typedef typename _Alloc_types::_Alty _Alty;
; 806  : 
; 807  : 	typedef typename _Alloc_types::_Alpty _Alpty;
; 808  : 
; 809  : 	_Deque_alloc(const _Alloc& _Al = _Alloc())
; 810  : 		: _Alval(_Al)
; 811  : 		{	// construct allocators from _Al
; 812  : 		_Alloc_proxy();
; 813  : 		}
; 814  : 
; 815  : 	~_Deque_alloc() _NOEXCEPT
; 816  : 		{	// destroy proxy
; 817  : 		_Free_proxy();
; 818  : 		}
; 819  : 
; 820  : 	void _Change_alloc(const _Alty& _Al)
; 821  : 		{	// replace old allocator
; 822  : 		_Free_proxy();
; 823  : 		_Alval = _Al;
; 824  : 		_Alloc_proxy();
; 825  : 		}
; 826  : 
; 827  : 	void _Swap_alloc(_Myt& _Right)
; 828  : 		{	// swap allocators
; 829  : 		_Swap_adl(_Alval, _Right._Alval);
; 830  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 831  : 		}
; 832  : 
; 833  : 	void _Alloc_proxy()
; 834  : 		{	// construct proxy from _Alval
; 835  : 		typename _Alty::template rebind<_Container_proxy>::other
; 836  : 			_Alproxy(_Alval);
; 837  : 		this->_Myproxy = _Alproxy.allocate(1);
; 838  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 839  : 		this->_Myproxy->_Mycont = this;
; 840  : 		}
; 841  : 
; 842  : 	void _Free_proxy()
; 843  : 		{	// destroy proxy
; 844  : 		typename _Alty::template rebind<_Container_proxy>::other
; 845  : 			_Alproxy(_Alval);
; 846  : 		this->_Orphan_all();
; 847  : 		_Alproxy.destroy(this->_Myproxy);
; 848  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 849  : 		this->_Myproxy = 0;
; 850  : 		}
; 851  : 
; 852  : 	_Alty& _Getal()
; 853  : 		{	// get reference to allocator
; 854  : 		return (_Alval);
; 855  : 		}
; 856  : 
; 857  : 	const _Alty& _Getal() const
; 858  : 		{	// get reference to allocator
; 859  : 		return (_Alval);
; 860  : 		}
; 861  : 
; 862  : 	_Alty _Alval;	// allocator object for stored elements
; 863  : 	};
; 864  : 
; 865  : template<class _Alloc_types>
; 866  : 	class _Deque_alloc<false, _Alloc_types>
; 867  : 		: public _Deque_val<typename _Alloc_types::_Val_types>
; 868  : 	{	// base class for deque to hold allocator with no storage
; 869  : public:
; 870  : 	typedef _Deque_alloc<false, _Alloc_types> _Myt;
; 871  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 872  : 
; 873  : 	typedef typename _Alloc_types::_Alty _Alty;
; 874  : 
; 875  : 	typedef typename _Alloc_types::_Alpty _Alpty;
; 876  : 
; 877  : 	_Deque_alloc(const _Alloc& = _Alloc())
; 878  : 		{	// construct allocators from _Al
; 879  : 		_Alloc_proxy();
; 880  : 		}
; 881  : 
; 882  : 	~_Deque_alloc() _NOEXCEPT
; 883  : 		{	// destroy proxy
; 884  : 		_Free_proxy();
; 885  : 		}
; 886  : 
; 887  : 	void _Change_alloc(const _Alty&)
; 888  : 		{	// replace old allocator
; 889  : 		}
; 890  : 
; 891  : 	void _Swap_alloc(_Myt& _Right)
; 892  : 		{	// swap allocators
; 893  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 894  : 		}
; 895  : 
; 896  : 	void _Alloc_proxy()
; 897  : 		{	// construct proxy from _Alval
; 898  : 		typename _Alty::template rebind<_Container_proxy>::other
; 899  : 			_Alproxy;
; 900  : 		this->_Myproxy = _Alproxy.allocate(1);
; 901  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 902  : 		this->_Myproxy->_Mycont = this;
; 903  : 		}
; 904  : 
; 905  : 	void _Free_proxy()
; 906  : 		{	// destroy proxy
; 907  : 		typename _Alty::template rebind<_Container_proxy>::other
; 908  : 			_Alproxy;
; 909  : 		this->_Orphan_all();
; 910  : 		_Alproxy.destroy(this->_Myproxy);
; 911  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 912  : 		this->_Myproxy = 0;
; 913  : 		}
; 914  : 
; 915  : 	_Alty _Getal() const
; 916  : 		{	// get reference to allocator
; 917  : 		return (_Alty());
; 918  : 		}
; 919  : 	};
; 920  : 
; 921  : 		// TEMPLATE CLASS deque
; 922  : template<class _Ty,
; 923  : 	class _Alloc = allocator<_Ty> >
; 924  : 	class deque
; 925  : 		: public _Deque_alloc<!is_empty<_Alloc>::value,
; 926  : 			_Deque_base_types<_Ty, _Alloc> >
; 927  : 	{	// circular queue of pointers to blocks
; 928  : public:
; 929  : 	typedef deque<_Ty, _Alloc> _Myt;
; 930  : 	typedef _Deque_alloc<!is_empty<_Alloc>::value,
; 931  : 		_Deque_base_types<_Ty, _Alloc> > _Mybase;
; 932  : 	typedef _Alloc allocator_type;
; 933  : 
; 934  : 	typedef typename _Mybase::_Alty _Alty;
; 935  : 	typedef typename _Mybase::_Alpty _Alpty;
; 936  : 	typedef typename _Mybase::_Mapptr _Mapptr;
; 937  : 
; 938  : 	typedef typename _Mybase::value_type value_type;
; 939  : 	typedef typename _Mybase::size_type size_type;
; 940  : 	typedef typename _Mybase::difference_type difference_type;
; 941  : 	typedef typename _Mybase::pointer pointer;
; 942  : 	typedef typename _Mybase::const_pointer const_pointer;
; 943  : 	typedef typename _Mybase::reference reference;
; 944  : 	typedef typename _Mybase::const_reference const_reference;
; 945  : 
; 946  : 	typedef typename _Mybase::iterator iterator;
; 947  : 	typedef typename _Mybase::const_iterator const_iterator;
; 948  : 
; 949  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 950  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 951  : 
; 952  : 	static const int _EEM_DS = _DEQUESIZ;
; 953  : 	enum {_EEN_DS = _DEQUESIZ};	// helper for expression evaluator
; 954  : 	deque()
; 955  : 		: _Mybase()
; 956  : 		{	// construct empty deque
; 957  : 		}
; 958  : 
; 959  : 	explicit deque(const _Alloc& _Al)
; 960  : 		: _Mybase(_Al)
; 961  : 		{	// construct empty deque with allocator
; 962  : 		}
; 963  : 
; 964  : 	explicit deque(size_type _Count)
; 965  : 		: _Mybase()
; 966  : 		{	// construct from _Count * value_type()
; 967  : 		resize(_Count);
; 968  : 		}
; 969  : 
; 970  : 	deque(size_type _Count, const value_type& _Val)
; 971  : 		: _Mybase()
; 972  : 		{	// construct from _Count * _Val
; 973  : 		_Construct_n(_Count, _Val);
; 974  : 		}
; 975  : 
; 976  : 	deque(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 977  : 		: _Mybase(_Al)
; 978  : 		{	// construct from _Count * _Val with allocator
; 979  : 		_Construct_n(_Count, _Val);
; 980  : 		}
; 981  : 
; 982  : 	deque(const _Myt& _Right)
; 983  : 
; 984  :  #if _HAS_CPP0X
; 985  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 986  : 
; 987  :  #else /* _HAS_CPP0X */
; 988  : 		: _Mybase(_Right._Getal())
; 989  :  #endif /* _HAS_CPP0X */
; 990  : 
; 991  : 		{	// construct by copying _Right
; 992  : 		_TRY_BEGIN
; 993  : 		insert(begin(), _Right.begin(), _Right.end());
; 994  : 		_CATCH_ALL
; 995  : 		_Tidy();
; 996  : 		_RERAISE;
; 997  : 		_CATCH_END
; 998  : 		}
; 999  : 
; 1000 : 	deque(const _Myt& _Right, const _Alloc& _Al)
; 1001 : 		: _Mybase(_Al)
; 1002 : 		{	// construct by copying _Right
; 1003 : 		_TRY_BEGIN
; 1004 : 		insert(begin(), _Right.begin(), _Right.end());
; 1005 : 		_CATCH_ALL
; 1006 : 		_Tidy();
; 1007 : 		_RERAISE;
; 1008 : 		_CATCH_END
; 1009 : 		}
; 1010 : 
; 1011 : 	template<class _Iter>
; 1012 : 		deque(_Iter _First, _Iter _Last,
; 1013 : 			typename enable_if<_Is_iterator<_Iter>::value,
; 1014 : 				void>::type ** = 0)
; 1015 : 		: _Mybase()
; 1016 : 		{	// construct from [_First, _Last)
; 1017 : 		_Construct(_First, _Last);
; 1018 : 		}
; 1019 : 
; 1020 : 	template<class _Iter>
; 1021 : 		deque(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 1022 : 			typename enable_if<_Is_iterator<_Iter>::value,
; 1023 : 				void>::type ** = 0)
; 1024 : 		: _Mybase(_Al)
; 1025 : 		{	// construct from [_First, _Last) with allocator
; 1026 : 		_Construct(_First, _Last);
; 1027 : 		}
; 1028 : 
; 1029 : 	template<class _Iter>
; 1030 : 		void _Construct(_Iter _First, _Iter _Last)
; 1031 : 		{	// initialize from [_First, _Last), input iterators
; 1032 : 		_TRY_BEGIN
; 1033 : 		insert(begin(), _First, _Last);
; 1034 : 		_CATCH_ALL
; 1035 : 		_Tidy();
; 1036 : 		_RERAISE;
; 1037 : 		_CATCH_END
; 1038 : 		}
; 1039 : 
; 1040 : 	void _Construct_n(size_type _Count, const value_type& _Val)
; 1041 : 		{	// construct from _Count * _Val
; 1042 : 		_TRY_BEGIN
; 1043 : 		_Insert_n(begin(), _Count, _Val);
; 1044 : 		_CATCH_ALL
; 1045 : 		_Tidy();
; 1046 : 		_RERAISE;
; 1047 : 		_CATCH_END
; 1048 : 		}
; 1049 : 
; 1050 : #define _PUSH_FRONT_BEGIN \
; 1051 : 	if (this->_Myoff % _DEQUESIZ == 0 \
; 1052 : 		&& this->_Mapsize <= (this->_Mysize + _DEQUESIZ) / _DEQUESIZ) \
; 1053 : 		_Growmap(1); \
; 1054 : 	this->_Myoff &= this->_Mapsize * _DEQUESIZ - 1; \
; 1055 : 	size_type _Newoff = this->_Myoff != 0 ? this->_Myoff \
; 1056 : 		: this->_Mapsize * _DEQUESIZ; \
; 1057 : 	size_type _Block = this->_Getblock(--_Newoff); \
; 1058 : 	if (this->_Map[_Block] == pointer()) \
; 1059 : 		this->_Map[_Block] = this->_Getal().allocate(_DEQUESIZ)
; 1060 : 
; 1061 : #define _PUSH_FRONT_END \
; 1062 : 	this->_Myoff = _Newoff; \
; 1063 : 	++this->_Mysize
; 1064 : 
; 1065 : #define _PUSH_BACK_BEGIN \
; 1066 : 	if ((this->_Myoff + this->_Mysize) % _DEQUESIZ == 0 \
; 1067 : 		&& this->_Mapsize <= (this->_Mysize + _DEQUESIZ) / _DEQUESIZ) \
; 1068 : 		_Growmap(1); \
; 1069 : 	this->_Myoff &= this->_Mapsize * _DEQUESIZ - 1; \
; 1070 : 	size_type _Newoff = this->_Myoff + this->_Mysize; \
; 1071 : 	size_type _Block = this->_Getblock(_Newoff); \
; 1072 : 	if (this->_Map[_Block] == pointer()) \
; 1073 : 		this->_Map[_Block] = this->_Getal().allocate(_DEQUESIZ)
; 1074 : 
; 1075 : #define _PUSH_BACK_END \
; 1076 : 	++this->_Mysize
; 1077 : 
; 1078 : 	deque(_Myt&& _Right)
; 1079 : 		: _Mybase(_Right._Getal())
; 1080 : 		{	// construct by moving _Right
; 1081 : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 1082 : 		}
; 1083 : 
; 1084 : 	deque(_Myt&& _Right, const _Alloc& _Al)
; 1085 : 		: _Mybase(_Al)
; 1086 : 		{	// construct by moving _Right
; 1087 : 		if (this->_Getal() != _Right._Getal())
; 1088 : 			assign(_STD make_move_iterator(_Right.begin()),
; 1089 : 				_STD make_move_iterator(_Right.end()));
; 1090 : 		else
; 1091 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1092 : 		}
; 1093 : 
; 1094 : 	_Myt& operator=(_Myt&& _Right)
; 1095 : 		{	// assign by moving _Right
; 1096 : 		if (this != &_Right)
; 1097 : 			{	// different, assign it
; 1098 : 			_Tidy();
; 1099 : 
; 1100 :  #if _HAS_CPP0X
; 1101 : 			if (this->_Getal() != _Right._Getal()
; 1102 : 				&& _Alty::propagate_on_container_move_assignment::value)
; 1103 : 				this->_Change_alloc(_Right._Getal());
; 1104 :  #endif /* _HAS_CPP0X */
; 1105 : 
; 1106 : 			if (this->_Getal() != _Right._Getal())
; 1107 : 				assign(_STD make_move_iterator(_Right.begin()),
; 1108 : 					_STD make_move_iterator(_Right.end()));
; 1109 : 			else
; 1110 : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	void _Assign_rv(_Myt&& _Right)
; 1116 : 		{	// assign by moving _Right
; 1117 : 		if (this == &_Right)
; 1118 : 			;
; 1119 : 		else if (get_allocator() != _Right.get_allocator())
; 1120 : 			{	// move construct a copy
; 1121 : 			clear();
; 1122 : 			for (iterator _Next = _Right.begin(); _Next != _Right.end();
; 1123 : 				++_Next)
; 1124 : 				push_back(_STD forward<value_type>(*_Next));
; 1125 : 			}
; 1126 : 		else
; 1127 : 			{	// clear this and steal from _Right
; 1128 : 			this->_Swap_all((_Myt&)_Right);
; 1129 : 			this->_Map = _Right._Map;
; 1130 : 			this->_Mapsize = _Right._Mapsize;
; 1131 : 			this->_Myoff = _Right._Myoff;
; 1132 : 			this->_Mysize = _Right._Mysize;
; 1133 : 
; 1134 : 			_Right._Map = _Mapptr();
; 1135 : 			_Right._Mapsize = 0;
; 1136 : 			_Right._Myoff = 0;
; 1137 : 			_Right._Mysize = 0;
; 1138 : 			}
; 1139 : 		}
; 1140 : 
; 1141 : 	void push_front(value_type&& _Val)
; 1142 : 		{	// insert element at beginning
; 1143 : 		this->_Orphan_all();
; 1144 : 		_PUSH_FRONT_BEGIN;
; 1145 : 		this->_Getal().construct(
; 1146 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ,
; 1147 : 			_STD forward<value_type>(_Val));
; 1148 : 		_PUSH_FRONT_END;
; 1149 : 		}
; 1150 : 
; 1151 : 	void push_back(value_type&& _Val)
; 1152 : 		{	// insert element at end
; 1153 : 		this->_Orphan_all();
; 1154 : 		_PUSH_BACK_BEGIN;
; 1155 : 		this->_Getal().construct(
; 1156 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ,
; 1157 : 			_STD forward<value_type>(_Val));
; 1158 : 		_PUSH_BACK_END;
; 1159 : 		}
; 1160 : 
; 1161 : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 1162 : 		{	// insert _Val at _Where
; 1163 : 		return (emplace(_Where, _STD move(_Val)));
; 1164 : 		}
; 1165 : 
; 1166 : #define _DEQUE_EMPLACE( \
; 1167 : 	TEMPLATE_LIST, PADDING_LIST, LIST, COMMA, X1, X2, X3, X4) \
; 1168 : 	TEMPLATE_LIST(_CLASS_TYPE) \
; 1169 : 		void emplace_front(LIST(_TYPE_REFREF_ARG)) \
; 1170 : 		{	/* insert element at beginning */ \
; 1171 : 		this->_Orphan_all(); \
; 1172 : 		_PUSH_FRONT_BEGIN; \
; 1173 : 		this->_Getal().construct( \
; 1174 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ \
; 1175 : 				COMMA LIST(_FORWARD_ARG)); \
; 1176 : 		_PUSH_FRONT_END; \
; 1177 : 	} \
; 1178 : 	TEMPLATE_LIST(_CLASS_TYPE) \
; 1179 : 		void emplace_back(LIST(_TYPE_REFREF_ARG)) \
; 1180 : 		{	/* insert element at end */ \
; 1181 : 		this->_Orphan_all(); \
; 1182 : 		_PUSH_BACK_BEGIN; \
; 1183 : 		this->_Getal().construct( \
; 1184 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ \
; 1185 : 				COMMA LIST(_FORWARD_ARG)); \
; 1186 : 		_PUSH_BACK_END; \
; 1187 : 		} \
; 1188 : 	TEMPLATE_LIST(_CLASS_TYPE) \
; 1189 : 		iterator emplace(const_iterator _Where \
; 1190 : 			COMMA LIST(_TYPE_REFREF_ARG)) \
; 1191 : 		{	/* insert element at _Where */ \
; 1192 : 		size_type _Off = _Where - begin(); \
; 1193 : 		_DEQUE_EMPLACE_CHECK \
; 1194 : 		if (_Off <= this->_Mysize / 2) \
; 1195 : 			{	/* closer to front, push to front then rotate */ \
; 1196 : 			emplace_front(LIST(_FORWARD_ARG)); \
; 1197 : 			_STD rotate(begin(), begin() + 1, begin() + 1 + _Off); \
; 1198 : 			} \
; 1199 : 		else \
; 1200 : 			{	/* closer to back, push to back then rotate */ \
; 1201 : 			emplace_back(LIST(_FORWARD_ARG)); \
; 1202 : 			_STD rotate(begin() + _Off, end() - 1, end()); \
; 1203 : 			} \
; 1204 : 		return (begin() + _Off); \
; 1205 : 			}
; 1206 : 
; 1207 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1208 : #define _DEQUE_EMPLACE_CHECK \
; 1209 : 		if (this->_Mysize < _Off) \
; 1210 : 			_DEBUG_ERROR("deque emplace iterator outside range");
; 1211 : 
; 1212 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1213 : #define _DEQUE_EMPLACE_CHECK
; 1214 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1215 : 
; 1216 : _VARIADIC_EXPAND_0X(_DEQUE_EMPLACE, , , , )
; 1217 : #undef _DEQUE_EMPLACE_CHECK
; 1218 : #undef _DEQUE_EMPLACE
; 1219 : 
; 1220 : 	~deque() _NOEXCEPT
; 1221 : 		{	// destroy the deque
; 1222 : 		_Tidy();
; 1223 : 		}
; 1224 : 
; 1225 : 	_Myt& operator=(const _Myt& _Right)
; 1226 : 		{	// assign _Right
; 1227 : 		if (this != &_Right)
; 1228 : 			{	// different, assign it
; 1229 :  #if _HAS_CPP0X
; 1230 : 			if (this->_Getal() != _Right._Getal()
; 1231 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1232 : 				{	// change allocator before copying
; 1233 : 				_Tidy();
; 1234 : 				this->_Change_alloc(_Right._Getal());
; 1235 : 				}
; 1236 :  #endif /* _HAS_CPP0X */
; 1237 : 
; 1238 : 			this->_Orphan_all();
; 1239 : 
; 1240 : 			if (_Right._Mysize == 0)
; 1241 : 				clear();
; 1242 : 			else if (_Right._Mysize <= this->_Mysize)
; 1243 : 				{	// enough elements, copy new and destroy old
; 1244 : 				iterator _Mid = _STD copy(_Right.begin(), _Right.end(),
; 1245 : 					begin());
; 1246 : 				erase(_Mid, end());
; 1247 : 				}
; 1248 : 			else
; 1249 : 				{	// new sequence longer, copy and construct new
; 1250 : 				const_iterator _Mid = _Right.begin() + this->_Mysize;
; 1251 : 				_STD copy(_Right.begin(), _Mid, begin());
; 1252 : 				insert(end(), _Mid, _Right.end());
; 1253 : 				}
; 1254 : 			}
; 1255 : 		return (*this);
; 1256 : 		}
; 1257 : 
; 1258 : 	iterator begin() _NOEXCEPT
; 1259 : 		{	// return iterator for beginning of mutable sequence
; 1260 : 		return (iterator(this->_Myoff, this));
; 1261 : 		}
; 1262 : 
; 1263 : 	const_iterator begin() const _NOEXCEPT
; 1264 : 		{	// return iterator for beginning of nonmutable sequence
; 1265 : 		return (const_iterator(this->_Myoff, this));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator end() _NOEXCEPT
; 1269 : 		{	// return iterator for end of mutable sequence
; 1270 : 		return (iterator(this->_Myoff + this->_Mysize, this));
; 1271 : 		}
; 1272 : 
; 1273 : 	const_iterator end() const _NOEXCEPT
; 1274 : 		{	// return iterator for end of nonmutable sequence
; 1275 : 		return (const_iterator(this->_Myoff + this->_Mysize, this));
; 1276 : 		}
; 1277 : 
; 1278 : 	iterator _Make_iter(const_iterator _Where) const
; 1279 : 		{	// make iterator from const_iterator
; 1280 : 		return (iterator(_Where._Myoff, this));
; 1281 : 		}
; 1282 : 
; 1283 : 	reverse_iterator rbegin() _NOEXCEPT
; 1284 : 		{	// return iterator for beginning of reversed mutable sequence
; 1285 : 		return (reverse_iterator(end()));
; 1286 : 		}
; 1287 : 
; 1288 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1289 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1290 : 		return (const_reverse_iterator(end()));
; 1291 : 		}
; 1292 : 
; 1293 : 	reverse_iterator rend() _NOEXCEPT
; 1294 : 		{	// return iterator for end of reversed mutable sequence
; 1295 : 		return (reverse_iterator(begin()));
; 1296 : 		}
; 1297 : 
; 1298 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1299 : 		{	// return iterator for end of reversed nonmutable sequence
; 1300 : 		return (const_reverse_iterator(begin()));
; 1301 : 		}
; 1302 : 
; 1303 :  #if _HAS_CPP0X
; 1304 : 	const_iterator cbegin() const _NOEXCEPT
; 1305 : 		{	// return iterator for beginning of nonmutable sequence
; 1306 : 		return (((const _Myt *)this)->begin());
; 1307 : 		}
; 1308 : 
; 1309 : 	const_iterator cend() const _NOEXCEPT
; 1310 : 		{	// return iterator for end of nonmutable sequence
; 1311 : 		return (((const _Myt *)this)->end());
; 1312 : 		}
; 1313 : 
; 1314 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1315 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1316 : 		return (((const _Myt *)this)->rbegin());
; 1317 : 		}
; 1318 : 
; 1319 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1320 : 		{	// return iterator for end of reversed nonmutable sequence
; 1321 : 		return (((const _Myt *)this)->rend());
; 1322 : 		}
; 1323 : 
; 1324 : 	void shrink_to_fit()
; 1325 : 		{	// reduce capacity
; 1326 : 		size_type _Oldcapacity = _DEQUESIZ * this->_Mapsize;
; 1327 : 		size_type _Newcapacity = _Oldcapacity / 2;
; 1328 : 
; 1329 : 		if (_Newcapacity < _DEQUESIZ * _DEQUEMAPSIZ)
; 1330 : 			_Newcapacity = _DEQUESIZ * _DEQUEMAPSIZ;
; 1331 : 
; 1332 : 		if ((empty() && 0 < this->_Mapsize)
; 1333 : 			|| (!empty()
; 1334 : 				&& size() <= _Newcapacity
; 1335 : 				&& _Newcapacity < _Oldcapacity))
; 1336 : 			{	// worth shrinking, do it
; 1337 : 			_Myt _Tmp(_STD make_move_iterator(begin()),
; 1338 : 				_STD make_move_iterator(end()));
; 1339 : 			swap(_Tmp);
; 1340 : 			}
; 1341 : 		}
; 1342 :  #endif /* _HAS_CPP0X */
; 1343 : 
; 1344 : 	void resize(size_type _Newsize)
; 1345 : 		{	// determine new length, padding as needed
; 1346 : 		if (_Newsize < this->_Mysize)
; 1347 : 			erase(begin() + _Newsize, end());
; 1348 : 		else if (this->_Mysize < _Newsize)
; 1349 : 			{	// append default-constructed elements
; 1350 : 			_Alty _Alval(this->_Getal());
; 1351 : 			this->_Orphan_all();
; 1352 : 			while (this->_Mysize < _Newsize)
; 1353 : 				{	// push_back default-constructed element
; 1354 : 				_PUSH_BACK_BEGIN;
; 1355 : 				_Uninitialized_default_fill_n(
; 1356 : 					this->_Map[_Block] + _Newoff % _DEQUESIZ, 1, _Alval);
; 1357 : 				_PUSH_BACK_END;
; 1358 : 				}
; 1359 : 			}
; 1360 : 		}
; 1361 : 
; 1362 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1363 : 		{	// determine new length, padding with _Val elements as needed
; 1364 : 		if (this->_Mysize < _Newsize)
; 1365 : 			_Insert_n(end(), _Newsize - this->_Mysize, _Val);
; 1366 : 		else if (_Newsize < this->_Mysize)
; 1367 : 			erase(begin() + _Newsize, end());
; 1368 : 		}
; 1369 : 
; 1370 : 	size_type size() const _NOEXCEPT
; 1371 : 		{	// return length of sequence
; 1372 : 		return (this->_Mysize);
; 1373 : 		}
; 1374 : 
; 1375 : 	size_type max_size() const _NOEXCEPT
; 1376 : 		{	// return maximum possible length of sequence
; 1377 : 		return (this->_Getal().max_size());
; 1378 : 		}
; 1379 : 
; 1380 : 	bool empty() const _NOEXCEPT
; 1381 : 		{	// test if sequence is empty
; 1382 : 		return (this->_Mysize == 0);

  000a1	85 c0		 test	 eax, eax

; 1383 : 		}
; 1384 : 
; 1385 : 	allocator_type get_allocator() const _NOEXCEPT
; 1386 : 		{	// return allocator object for values
; 1387 : 		return (this->_Getal());
; 1388 : 		}
; 1389 : 
; 1390 : 	const_reference at(size_type _Pos) const
; 1391 : 		{	// subscript nonmutable sequence with checking
; 1392 : 		if (this->_Mysize <= _Pos)
; 1393 : 			_Xran();
; 1394 : 		return (*(begin() + _Pos));
; 1395 : 		}
; 1396 : 
; 1397 : 	reference at(size_type _Pos)
; 1398 : 		{	// subscript mutable sequence with checking
; 1399 : 		if (this->_Mysize <= _Pos)
; 1400 : 			_Xran();
; 1401 : 		return (*(begin() + _Pos));
; 1402 : 		}
; 1403 : 
; 1404 : 	const_reference operator[](size_type _Pos) const
; 1405 : 		{	// subscript nonmutable sequence
; 1406 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1407 : 		if (this->_Mysize <= _Pos)
; 1408 : 			_DEBUG_ERROR("deque subscript out of range");
; 1409 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1410 : 
; 1411 : 		return (*(begin() + _Pos));
; 1412 : 		}
; 1413 : 
; 1414 : 	reference operator[](size_type _Pos)
; 1415 : 		{	// subscript mutable sequence
; 1416 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1417 : 		if (this->_Mysize <= _Pos)
; 1418 : 			_DEBUG_ERROR("deque subscript out of range");
; 1419 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1420 : 
; 1421 : 		return (*(begin() + _Pos));
; 1422 : 		}
; 1423 : 
; 1424 : 	reference front()
; 1425 : 		{	// return first element of mutable sequence
; 1426 : 		return (*begin());
; 1427 : 		}
; 1428 : 
; 1429 : 	const_reference front() const
; 1430 : 		{	// return first element of nonmutable sequence
; 1431 : 		return (*begin());
; 1432 : 		}
; 1433 : 
; 1434 : 	reference back()
; 1435 : 		{	// return last element of mutable sequence
; 1436 : 		return (*(end() - 1));
; 1437 : 		}
; 1438 : 
; 1439 : 	const_reference back() const
; 1440 : 		{	// return last element of nonmutable sequence
; 1441 : 		return (*(end() - 1));
; 1442 : 		}
; 1443 : 
; 1444 : 	void push_front(const value_type& _Val)
; 1445 : 		{	// insert element at beginning
; 1446 : 		this->_Orphan_all();
; 1447 : 		_PUSH_FRONT_BEGIN;
; 1448 : 		this->_Getal().construct(
; 1449 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1450 : 		_PUSH_FRONT_END;
; 1451 : 		}
; 1452 : 
; 1453 : 	void pop_front()
; 1454 : 		{	// erase element at beginning
; 1455 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1456 : 		if (empty())
; 1457 : 			_DEBUG_ERROR("deque empty before pop");
; 1458 : 		else
; 1459 : 			{	// something to erase, do it
; 1460 : 			_Orphan_off(this->_Myoff);
; 1461 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1462 : 			this->_Getal().destroy(
; 1463 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1464 : 			if (--this->_Mysize == 0)
; 1465 : 				this->_Myoff = 0;
; 1466 : 			else
; 1467 : 				++this->_Myoff;
; 1468 : 			}
; 1469 : 
; 1470 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 		if (!empty())

  000a3	74 0b		 je	 SHORT $LN61@insert

; 1472 : 			{	// something to erase, do it
; 1473 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1474 : 			this->_Getal().destroy(
; 1475 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1476 : 			if (--this->_Mysize == 0)

  000a5	48		 dec	 eax
  000a6	75 05		 jne	 SHORT $LN62@insert

; 1477 : 				this->_Myoff = 0;

  000a8	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 1478 : 			else

  000ab	eb 03		 jmp	 SHORT $LN61@insert
$LN62@insert:

; 1479 : 				++this->_Myoff;

  000ad	ff 41 0c	 inc	 DWORD PTR [ecx+12]
$LN61@insert:

; 1589 : 
; 1590 : 			_CATCH_ALL
; 1591 : 			for (; _Oldsize < this->_Mysize; )

  000b0	3b d0		 cmp	 edx, eax
  000b2	72 ed		 jb	 SHORT $LL9@insert
  000b4	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN8@insert:

; 1592 : 				pop_front();	// restore old size, at least
; 1593 : 			_RERAISE;

  000b7	6a 00		 push	 0
  000b9	6a 00		 push	 0
  000bb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN100@insert:
$LN10@insert:
  000c0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1

; 1594 : 			_CATCH_END
; 1595 : 
; 1596 : 			size_type _Num = this->_Mysize - _Oldsize;

  000c7	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  000ca	2b 75 ec	 sub	 esi, DWORD PTR __Oldsize$[ebp]

; 1597 : 			_STD reverse(begin(), begin() + _Num);	// flip new stuff in place

  000cd	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000d0	8b c4		 mov	 eax, esp
  000d2	56		 push	 esi
  000d3	50		 push	 eax
  000d4	8d 45 dc	 lea	 eax, DWORD PTR $T10[ebp]
  000d7	50		 push	 eax
  000d8	8b cf		 mov	 ecx, edi
  000da	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  000df	8b c8		 mov	 ecx, eax
  000e1	e8 00 00 00 00	 call	 ??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
  000e6	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000e9	8b cf		 mov	 ecx, edi
  000eb	54		 push	 esp
  000ec	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  000f1	e8 00 00 00 00	 call	 ??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z ; std::reverse<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >

; 1598 : 			_STD rotate(begin(), begin() + _Num, begin() + _Num + _Off);

  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f9	8b c4		 mov	 eax, esp
  000fb	53		 push	 ebx
  000fc	50		 push	 eax
  000fd	56		 push	 esi
  000fe	8d 45 dc	 lea	 eax, DWORD PTR $T9[ebp]
  00101	50		 push	 eax
  00102	8d 45 d0	 lea	 eax, DWORD PTR $T8[ebp]
  00105	50		 push	 eax
  00106	8b cf		 mov	 ecx, edi
  00108	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  0010d	8b c8		 mov	 ecx, eax
  0010f	e8 00 00 00 00	 call	 ??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
  00114	8b c8		 mov	 ecx, eax
  00116	e8 00 00 00 00	 call	 ??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
  0011b	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0011e	8b c4		 mov	 eax, esp
  00120	56		 push	 esi
  00121	50		 push	 eax
  00122	8d 45 c4	 lea	 eax, DWORD PTR $T6[ebp]
  00125	50		 push	 eax
  00126	8b cf		 mov	 ecx, edi
  00128	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  0012f	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  00134	8b c8		 mov	 ecx, eax
  00136	e8 00 00 00 00	 call	 ??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
  0013b	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0013e	8b cf		 mov	 ecx, edi
  00140	54		 push	 esp
  00141	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  00146	8d 4d b8	 lea	 ecx, DWORD PTR $T4[ebp]

; 1599 : 			}
; 1600 : 		else

  00149	e9 a2 00 00 00	 jmp	 $LN99@insert
$LN14@insert:

; 1601 : 			{	// closer to back
; 1602 : 			_TRY_BEGIN

  0014e	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
$LL72@insert:

; 456  : 		}
; 457  : 
; 458  : 	reference operator[](difference_type _Off) const
; 459  : 		{	// subscript
; 460  : 		return (*(*this + _Off));
; 461  : 		}
; 462  : 
; 463  : 	bool operator==(const _Myiter& _Right) const
; 464  : 		{	// test for iterator equality
; 465  : 		_Compat(_Right);
; 466  : 		return (this->_Myoff == _Right._Myoff);

  00155	3b d1		 cmp	 edx, ecx

; 1603 : 			for (; _First != _Last; ++_First)

  00157	74 4c		 je	 SHORT $LN3@insert
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00159	8b 45 18	 mov	 eax, DWORD PTR __First$[ebp]
  0015c	85 c0		 test	 eax, eax
  0015e	74 02		 je	 SHORT $LN85@insert
$LN84@insert:
  00160	8b 00		 mov	 eax, DWORD PTR [eax]
$LN85@insert:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00162	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 1604 : 				push_back(*_First);	// append

  00165	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00168	49		 dec	 ecx
  00169	23 ca		 and	 ecx, edx

; 1604 : 				push_back(*_First);	// append

  0016b	ff 34 88	 push	 DWORD PTR [eax+ecx*4]
  0016e	8b cf		 mov	 ecx, edi
  00170	e8 00 00 00 00	 call	 ?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXABVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back

; 371  : 		++_Myoff;

  00175	8b 55 20	 mov	 edx, DWORD PTR __First$[ebp+8]
  00178	8b 4d 2c	 mov	 ecx, DWORD PTR __Last$[ebp+8]
  0017b	42		 inc	 edx
  0017c	89 55 20	 mov	 DWORD PTR __First$[ebp+8], edx
  0017f	eb d4		 jmp	 SHORT $LL72@insert
__catch$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z$2:

; 1605 : 
; 1606 : 			_CATCH_ALL
; 1607 : 			for (; _Oldsize < this->_Mysize; )

  00181	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00184	8b 7d ec	 mov	 edi, DWORD PTR __Oldsize$[ebp]
  00187	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0018a	73 10		 jae	 SHORT $LN1@insert
  0018c	8d 64 24 00	 npad	 4
$LL2@insert:

; 1608 : 				pop_back();	// restore old size, at least

  00190	8b ce		 mov	 ecx, esi
  00192	e8 00 00 00 00	 call	 ?pop_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::pop_back
  00197	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  0019a	72 f4		 jb	 SHORT $LL2@insert
$LN1@insert:

; 1609 : 			_RERAISE;

  0019c	6a 00		 push	 0
  0019e	6a 00		 push	 0
  001a0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN101@insert:
$LN3@insert:

; 1610 : 			_CATCH_END
; 1611 : 
; 1612 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());

  001a5	83 ec 0c	 sub	 esp, 12			; 0000000cH
  001a8	8b cf		 mov	 ecx, edi
  001aa	54		 push	 esp
  001ab	e8 00 00 00 00	 call	 ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
  001b0	83 ec 0c	 sub	 esp, 12			; 0000000cH
  001b3	8b c4		 mov	 eax, esp
  001b5	56		 push	 esi
  001b6	50		 push	 eax
  001b7	8d 45 b8	 lea	 eax, DWORD PTR $T3[ebp]
  001ba	50		 push	 eax
  001bb	8b cf		 mov	 ecx, edi
  001bd	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 5
  001c4	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  001c9	8b c8		 mov	 ecx, eax
  001cb	e8 00 00 00 00	 call	 ??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
  001d0	83 ec 0c	 sub	 esp, 12			; 0000000cH
  001d3	8b c4		 mov	 eax, esp
  001d5	53		 push	 ebx
  001d6	50		 push	 eax
  001d7	8d 45 c4	 lea	 eax, DWORD PTR $T5[ebp]
  001da	50		 push	 eax
  001db	8b cf		 mov	 ecx, edi
  001dd	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+12], 6
  001e1	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  001e6	8b c8		 mov	 ecx, eax
  001e8	e8 00 00 00 00	 call	 ??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
  001ed	8d 4d d0	 lea	 ecx, DWORD PTR $T7[ebp]
$LN99@insert:
  001f0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001f7	e8 00 00 00 00	 call	 ??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z ; std::rotate<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
  001fc	83 c4 24	 add	 esp, 36			; 00000024H
$LN7@insert:

; 1613 : 			}
; 1614 : 		return (begin() + _Off);

  001ff	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00202	53		 push	 ebx
  00203	56		 push	 esi
  00204	8d 45 ac	 lea	 eax, DWORD PTR $T2[ebp]
  00207	50		 push	 eax
  00208	8b cf		 mov	 ecx, edi
  0020a	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  0020f	8b c8		 mov	 ecx, eax
  00211	e8 00 00 00 00	 call	 ??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
  00216	8b c6		 mov	 eax, esi

; 1615 : 		}

  00218	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0021b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00222	59		 pop	 ecx
  00223	5f		 pop	 edi
  00224	5e		 pop	 esi
  00225	5b		 pop	 ebx
  00226	8b e5		 mov	 esp, ebp
  00228	5d		 pop	 ebp
  00229	c2 28 00	 ret	 40			; 00000028H
$LN98@insert:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z$6:
  00000	e9 00 00 00 00	 jmp	 ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z$9:
  00005	e9 00 00 00 00	 jmp	 ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z$10:
  0000a	e9 00 00 00 00	 jmp	 ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z:
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@VMatrix@geom@@@std@@YA$$QAVMatrix@geom@@AAV12@@Z
_TEXT	SEGMENT
??$forward@VMatrix@geom@@@std@@YA$$QAVMatrix@geom@@AAV12@@Z PROC ; std::forward<geom::Matrix>, COMDAT
; __Arg$ = ecx

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1777 : 	}

  00002	c3		 ret	 0
??$forward@VMatrix@geom@@@std@@YA$$QAVMatrix@geom@@AAV12@@Z ENDP ; std::forward<geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VMatrix@geom@@V12@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAVMatrix@geom@@$$QAV23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@VMatrix@geom@@V12@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAVMatrix@geom@@$$QAV23@@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix>, COMDAT
; _this$dead$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN11@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __V0$[ebp]
  0000f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN11@construct:
  00017	5f		 pop	 edi

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??$construct@VMatrix@geom@@V12@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAVMatrix@geom@@$$QAV23@@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VMatrix@geom@@ABV12@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAVMatrix@geom@@ABV23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@VMatrix@geom@@ABV12@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAVMatrix@geom@@ABV23@@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix const &>, COMDAT
; _this$dead$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN11@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __V0$[ebp]
  0000f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN11@construct:
  00017	5f		 pop	 edi

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??$construct@VMatrix@geom@@ABV12@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAVMatrix@geom@@ABV23@@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VMatrix@geom@@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAVMatrix@geom@@@Z
_TEXT	SEGMENT
__Ptr$dead$ = 8						; size = 4
??$destroy@VMatrix@geom@@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAVMatrix@geom@@@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::destroy<geom::Matrix>, COMDAT
; _this$dead$ = ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);
; 910  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@VMatrix@geom@@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAVMatrix@geom@@@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::destroy<geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$dead$ = 8					; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix *> >::_Wrap_alloc<std::allocator<geom::Matrix *> ><std::_Wrap_alloc<std::allocator<geom::Matrix> > >, COMDAT
; _this$ = ecx

; 847  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0U?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix *> >::_Wrap_alloc<std::allocator<geom::Matrix *> ><std::_Wrap_alloc<std::allocator<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAVMatrix@geom@@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAPAVMatrix@geom@@@Z
_TEXT	SEGMENT
__Ptr$dead$ = 8						; size = 4
??$destroy@PAVMatrix@geom@@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAPAVMatrix@geom@@@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::destroy<geom::Matrix *>, COMDAT
; _this$dead$ = ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);
; 910  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAVMatrix@geom@@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXPAPAVMatrix@geom@@@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::destroy<geom::Matrix *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAPAVMatrix@geom@@PAPAV12@U?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@@std@@YAPAPAVMatrix@geom@@PAPAV12@00AAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_copy@PAPAVMatrix@geom@@PAPAV12@U?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@@std@@YAPAPAVMatrix@geom@@PAPAV12@00AAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<geom::Matrix * *,geom::Matrix * *,std::_Wrap_alloc<std::allocator<geom::Matrix *> > >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 414  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	2b d1		 sub	 edx, ecx
  00005	56		 push	 esi
  00006	c1 fa 02	 sar	 edx, 2

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00009	8d 34 95 00 00
	00 00		 lea	 esi, DWORD PTR [edx*4]
  00010	56		 push	 esi
  00011	51		 push	 ecx
  00012	ff 75 08	 push	 DWORD PTR __Dest$[ebp]
  00015	e8 00 00 00 00	 call	 _memmove
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001d	03 c6		 add	 eax, esi
  0001f	5e		 pop	 esi

; 415  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 416  : 		_Ptr_cat(_First, _Dest)));
; 417  : 	}

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Uninitialized_copy@PAPAVMatrix@geom@@PAPAV12@U?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@@std@@YAPAPAVMatrix@geom@@PAPAV12@00AAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<geom::Matrix * *,geom::Matrix * *,std::_Wrap_alloc<std::allocator<geom::Matrix *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_default_fill_n@PAPAVMatrix@geom@@IU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@@std@@YAXPAPAVMatrix@geom@@IAAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Uninitialized_default_fill_n@PAPAVMatrix@geom@@IU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@@std@@YAXPAPAVMatrix@geom@@IAAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@@Z PROC ; std::_Uninitialized_default_fill_n<geom::Matrix * *,unsigned int,std::_Wrap_alloc<std::allocator<geom::Matrix *> > >, COMDAT
; __First$ = ecx
; __Count$ = edx

; 668  : 	{	// copy _Count * _Val_type(_First)() to raw _First, using _Al

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2678 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00003	85 d2		 test	 edx, edx
  00005	74 06		 je	 SHORT $LN11@Uninitiali
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 660  : 	_Fill_n(_First, _Count, (_Valty)0);

  00007	8b ca		 mov	 ecx, edx
  00009	33 c0		 xor	 eax, eax
  0000b	f3 ab		 rep stosd
$LN11@Uninitiali:
  0000d	5f		 pop	 edi

; 669  : 	_Uninit_def_fill_n(_First, _Count, _Al,
; 670  : 		_Val_type(_First), _Ptr_cat(_First, _First));
; 671  : 	}

  0000e	c3		 ret	 0
??$_Uninitialized_default_fill_n@PAPAVMatrix@geom@@IU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@@std@@YAXPAPAVMatrix@geom@@IAAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@@Z ENDP ; std::_Uninitialized_default_fill_n<geom::Matrix * *,unsigned int,std::_Wrap_alloc<std::allocator<geom::Matrix *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@@std@@YAXPAPAVMatrix@geom@@0AAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@@std@@YAXPAPAVMatrix@geom@@0AAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<geom::Matrix *> > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 81   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@@std@@YAXPAPAVMatrix@geom@@0AAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<geom::Matrix *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char> > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 81   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@VVertexUVRGBA@gfxu@@@std@@YAPAVVertexUVRGBA@gfxu@@IPAV12@@Z
_TEXT	SEGMENT
??$_Allocate@VVertexUVRGBA@gfxu@@@std@@YAPAVVertexUVRGBA@gfxu@@IPAV12@@Z PROC ; std::_Allocate<gfxu::VertexUVRGBA>, COMDAT
; __Count$ = ecx

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)
; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00000	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00006	77 13		 ja	 SHORT $LN1@Allocate
  00008	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0000b	c1 e0 03	 shl	 eax, 3
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00014	83 c4 04	 add	 esp, 4
  00017	85 c0		 test	 eax, eax
  00019	75 05		 jne	 SHORT $LN7@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0001b	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN7@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}

  00020	c3		 ret	 0
??$_Allocate@VVertexUVRGBA@gfxu@@@std@@YAPAVVertexUVRGBA@gfxu@@IPAV12@@Z ENDP ; std::_Allocate<gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@VMatrix@geom@@@std@@YAPAVMatrix@geom@@IPAV12@@Z
_TEXT	SEGMENT
??$_Allocate@VMatrix@geom@@@std@@YAPAVMatrix@geom@@IPAV12@@Z PROC ; std::_Allocate<geom::Matrix>, COMDAT
; __Count$ = ecx

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)
; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00000	81 f9 ff ff ff
	03		 cmp	 ecx, 67108863		; 03ffffffH
  00006	77 10		 ja	 SHORT $LN1@Allocate
  00008	c1 e1 06	 shl	 ecx, 6
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4
  00014	85 c0		 test	 eax, eax
  00016	75 05		 jne	 SHORT $LN7@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00018	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN7@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}

  0001d	c3		 ret	 0
??$_Allocate@VMatrix@geom@@@std@@YAPAVMatrix@geom@@IPAV12@@Z ENDP ; std::_Allocate<geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAVMatrix@geom@@@std@@YAPAPAVMatrix@geom@@IPAPAV12@@Z
_TEXT	SEGMENT
??$_Allocate@PAVMatrix@geom@@@std@@YAPAPAVMatrix@geom@@IPAPAV12@@Z PROC ; std::_Allocate<geom::Matrix *>, COMDAT
; __Count$ = ecx

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)
; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00000	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00006	77 14		 ja	 SHORT $LN1@Allocate
  00008	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00015	83 c4 04	 add	 esp, 4
  00018	85 c0		 test	 eax, eax
  0001a	75 05		 jne	 SHORT $LN7@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0001c	e9 00 00 00 00	 jmp	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN7@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}

  00021	c3		 ret	 0
??$_Allocate@PAVMatrix@geom@@@std@@YAPAPAVMatrix@geom@@IPAPAV12@@Z ENDP ; std::_Allocate<geom::Matrix *>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0TaskVBOVAOSet@Tasks@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0TaskVBOVAOSet@Tasks@@QAE@ABV01@@Z PROC		; Tasks::TaskVBOVAOSet::TaskVBOVAOSet, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7TaskVBOVAOSet@Tasks@@6B@
  0000c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00012	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00015	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00018	8b c1		 mov	 eax, ecx
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??0TaskVBOVAOSet@Tasks@@QAE@ABV01@@Z ENDP		; Tasks::TaskVBOVAOSet::TaskVBOVAOSet
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0Task@Tasks@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$dead$ = 8					; size = 4
??0Task@Tasks@@QAE@ABV01@@Z PROC			; Tasks::Task::Task, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Task@Tasks@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c2 04 00	 ret	 4
??0Task@Tasks@@QAE@ABV01@@Z ENDP			; Tasks::Task::Task
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 998  : 		{	// append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 999  : 		return (append(_Right));
; 1000 : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newcap$ = 8						; size = 4
?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::reserve, COMDAT
; _this$ = ecx

; 1761 : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Newcap$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi
  0000a	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0000d	3b f8		 cmp	 edi, eax
  0000f	77 22		 ja	 SHORT $LN13@reserve
  00011	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  00014	74 1d		 je	 SHORT $LN13@reserve

; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))

  00016	6a 01		 push	 1
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
  0001e	84 c0		 test	 al, al
  00020	74 11		 je	 SHORT $LN13@reserve

; 517  : 			: this->_Bx._Buf);

  00022	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8

; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00026	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 517  : 			: this->_Bx._Buf);

  00029	72 02		 jb	 SHORT $LN9@reserve
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  0002b	8b 36		 mov	 esi, DWORD PTR [esi]
$LN9@reserve:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  0002d	33 c0		 xor	 eax, eax
  0002f	66 89 04 7e	 mov	 WORD PTR [esi+edi*2], ax
$LN13@reserve:
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1768 : 		}

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?push_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXABVMatrix@geom@@@Z
_TEXT	SEGMENT
__Newoff$1$ = -4					; size = 4
__Val$ = 8						; size = 4
?push_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXABVMatrix@geom@@@Z PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_front, COMDAT
; _this$ = ecx

; 1445 : 		{	// insert element at beginning

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	57		 push	 edi

; 1447 : 		_PUSH_FRONT_BEGIN;

  00008	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0000b	40		 inc	 eax
  0000c	39 43 08	 cmp	 DWORD PTR [ebx+8], eax
  0000f	77 06		 ja	 SHORT $LN2@push_front
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IAEXI@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Growmap
$LN2@push_front:
  00017	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  0001a	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0001d	21 43 0c	 and	 DWORD PTR [ebx+12], eax
  00020	0f 45 53 0c	 cmovne	 edx, DWORD PTR [ebx+12]
  00024	4a		 dec	 edx

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00025	23 c2		 and	 eax, edx

; 1447 : 		_PUSH_FRONT_BEGIN;

  00027	89 55 fc	 mov	 DWORD PTR __Newoff$1$[ebp], edx
  0002a	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  00031	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00034	83 3c 07 00	 cmp	 DWORD PTR [edi+eax], 0
  00038	75 19		 jne	 SHORT $LN1@push_front
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0003a	6a 40		 push	 64			; 00000040H
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4
  00046	85 c9		 test	 ecx, ecx
  00048	74 2d		 je	 SHORT $LN43@push_front
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1447 : 		_PUSH_FRONT_BEGIN;

  0004a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0004d	8b 55 fc	 mov	 edx, DWORD PTR __Newoff$1$[ebp]
  00050	89 0c 07	 mov	 DWORD PTR [edi+eax], ecx
$LN1@push_front:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  00053	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00056	8b 3c 07	 mov	 edi, DWORD PTR [edi+eax]
  00059	85 ff		 test	 edi, edi
  0005b	74 0c		 je	 SHORT $LN38@push_front
  0005d	56		 push	 esi
  0005e	8b 75 08	 mov	 esi, DWORD PTR __Val$[ebp]
  00061	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00066	f3 a5		 rep movsd
  00068	5e		 pop	 esi
$LN38@push_front:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1450 : 		_PUSH_FRONT_END;

  00069	ff 43 10	 inc	 DWORD PTR [ebx+16]
  0006c	5f		 pop	 edi
  0006d	89 53 0c	 mov	 DWORD PTR [ebx+12], edx
  00070	5b		 pop	 ebx

; 1451 : 		}

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
$LN43@push_front:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00077	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN45@push_front:
$LN42@push_front:
  0007c	cc		 int	 3
?push_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXABVMatrix@geom@@@Z ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_front
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?pop_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXXZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::pop_front, COMDAT
; _this$ = ecx

; 1382 : 		return (this->_Mysize == 0);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	85 c0		 test	 eax, eax

; 1455 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1456 : 		if (empty())
; 1457 : 			_DEBUG_ERROR("deque empty before pop");
; 1458 : 		else
; 1459 : 			{	// something to erase, do it
; 1460 : 			_Orphan_off(this->_Myoff);
; 1461 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1462 : 			this->_Getal().destroy(
; 1463 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1464 : 			if (--this->_Mysize == 0)
; 1465 : 				this->_Myoff = 0;
; 1466 : 			else
; 1467 : 				++this->_Myoff;
; 1468 : 			}
; 1469 : 
; 1470 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 		if (!empty())

  00005	74 11		 je	 SHORT $LN1@pop_front

; 1472 : 			{	// something to erase, do it
; 1473 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1474 : 			this->_Getal().destroy(
; 1475 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1476 : 			if (--this->_Mysize == 0)

  00007	48		 dec	 eax
  00008	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000b	75 08		 jne	 SHORT $LN2@pop_front

; 1477 : 				this->_Myoff = 0;

  0000d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 1480 : 			}
; 1481 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1482 : 		}

  00014	c3		 ret	 0
$LN2@pop_front:

; 1478 : 			else
; 1479 : 				++this->_Myoff;

  00015	ff 41 0c	 inc	 DWORD PTR [ecx+12]
$LN1@pop_front:

; 1480 : 			}
; 1481 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1482 : 		}

  00018	c3		 ret	 0
?pop_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QAEXXZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::pop_front
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h
;	COMDAT ?put@?$List@PAVTask@Tasks@@$0BAA@@@QAEXPAVTask@Tasks@@@Z
_TEXT	SEGMENT
_object$ = 8						; size = 4
?put@?$List@PAVTask@Tasks@@$0BAA@@@QAEXPAVTask@Tasks@@@Z PROC ; List<Tasks::Task *,256>::put, COMDAT
; _this$ = ecx

; 23   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 24   : 		if(count < size - 1)

  00003	8b 91 00 04 00
	00		 mov	 edx, DWORD PTR [ecx+1024]
  00009	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  0000f	7d 0c		 jge	 SHORT $LN1@put

; 25   : 		{
; 26   : 			content[count++] = object;

  00011	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00014	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
  00017	ff 81 00 04 00
	00		 inc	 DWORD PTR [ecx+1024]
$LN1@put:

; 27   : 		}
; 28   : 	}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?put@?$List@PAVTask@Tasks@@$0BAA@@@QAEXPAVTask@Tasks@@@Z ENDP ; List<Tasks::Task *,256>::put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic0.h
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -68						; size = 52
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T4 = 8							; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::codecvt<char,char,int>::_Getcat, COMDAT

; 900  : 		{	// return locale category mask and construct standard facet

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 901  : 		if (_Ppf != 0 && *_Ppf == 0)

  00028	8b 7d 08	 mov	 edi, DWORD PTR __Ppf$[ebp]
  0002b	33 db		 xor	 ebx, ebx
  0002d	89 5d f0	 mov	 DWORD PTR $T3[ebp], ebx
  00030	85 ff		 test	 edi, edi
  00032	74 62		 je	 SHORT $LN31@Getcat
  00034	39 1f		 cmp	 DWORD PTR [edi], ebx
  00036	75 5e		 jne	 SHORT $LN31@Getcat

; 903  : 				_Locinfo(_Ploc->c_str()));

  00038	6a 08		 push	 8
  0003a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003f	8b f0		 mov	 esi, eax
  00041	83 c4 04	 add	 esp, 4
  00044	89 75 08	 mov	 DWORD PTR $T4[ebp], esi
  00047	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0004a	85 f6		 test	 esi, esi
  0004c	74 37		 je	 SHORT $LN4@Getcat

; 445  : 		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());

  0004e	8b 4d 0c	 mov	 ecx, DWORD PTR __Ploc$[ebp]
  00051	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00053	85 c9		 test	 ecx, ecx
  00055	75 07		 jne	 SHORT $LN12@Getcat
  00057	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0005c	eb 0a		 jmp	 SHORT $LN17@Getcat
$LN12@Getcat:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3591 : 		return (_Myptr != 0 ? _Myptr : &_Nul);

  0005e	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00061	85 c0		 test	 eax, eax
  00063	75 03		 jne	 SHORT $LN17@Getcat
  00065	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
$LN17@Getcat:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 903  : 				_Locinfo(_Ploc->c_str()));

  00068	50		 push	 eax
  00069	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  0006c	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00071	bb 01 00 00 00	 mov	 ebx, 1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic0.h

; 219  : 	_Counter = _Value;

  00076	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 894  : 		{	// construct from specified locale

  0007d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$codecvt@DDH@std@@6B@

; 903  : 				_Locinfo(_Ploc->c_str()));

  00083	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  00085	33 f6		 xor	 esi, esi
$LN5@Getcat:
  00087	89 37		 mov	 DWORD PTR [edi], esi
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 08		 je	 SHORT $LN31@Getcat
  0008e	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  00091	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN31@Getcat:

; 904  : 		return (_X_CTYPE);

  00096	b8 02 00 00 00	 mov	 eax, 2

; 905  : 		}

  0009b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a5	59		 pop	 ecx
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR $T4[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::codecvt<char,char,int>::_Getcat
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
__Lock$1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Lock$2 = 12						; size = 4
__Off$ = 12						; size = 4
??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+, COMDAT
; _this$ = ecx

; 645  : 		{	// return this + integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 118  : 		{	// copy an iterator

  00009	33 db		 xor	 ebx, ebx

; 119  : 		*this = _Right;
; 120  : 		}
; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)

  0000b	8b 07		 mov	 eax, DWORD PTR [edi]
  0000d	85 c0		 test	 eax, eax
  0000f	74 1c		 je	 SHORT $LN16@operator

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00013	85 c0		 test	 eax, eax
  00015	75 14		 jne	 SHORT $LN17@operator

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00017	6a 03		 push	 3
  00019	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  0001c	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00021	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00024	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  00029	eb 02		 jmp	 SHORT $LN16@operator
$LN17@operator:

; 166  : 			_Myproxy = _Parent_proxy;

  0002b	8b 18		 mov	 ebx, DWORD PTR [eax]
$LN16@operator:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 640  : 		this->_Myoff += _Off;

  0002d	8b 7f 08	 mov	 edi, DWORD PTR [edi+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 118  : 		{	// copy an iterator

  00030	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 640  : 		this->_Myoff += _Off;

  00033	03 7d 0c	 add	 edi, DWORD PTR __Off$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 118  : 		{	// copy an iterator

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0003c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 119  : 		*this = _Right;
; 120  : 		}
; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)

  00043	85 db		 test	 ebx, ebx
  00045	74 2a		 je	 SHORT $LN51@operator

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00047	8b 03		 mov	 eax, DWORD PTR [ebx]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00049	85 c0		 test	 eax, eax
  0004b	75 20		 jne	 SHORT $LN41@operator

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  0004d	6a 03		 push	 3
  0004f	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00052	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00057	8d 4d 0c	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0005a	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0005f	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00062	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 647  : 		return (_Tmp += _Off);

  00063	8b c6		 mov	 eax, esi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx

; 648  : 		}

  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
$LN41@operator:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  0006d	8b 00		 mov	 eax, DWORD PTR [eax]
  0006f	89 06		 mov	 DWORD PTR [esi], eax
$LN51@operator:
  00071	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00074	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 647  : 		return (_Tmp += _Off);

  00075	8b c6		 mov	 eax, esi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx

; 648  : 		}

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 08 00	 ret	 8
??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??E?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++, COMDAT
; _this$ = ecx

; 355  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 356  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 357  : 		if (_Mycont == 0
; 358  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 359  : 		{	// report error
; 360  : 		_DEBUG_ERROR("deque iterator not incrementable");
; 361  : 		_SCL_SECURE_OUT_OF_RANGE;
; 362  : 		}
; 363  : 
; 364  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 365  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 366  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 367  : 		_SCL_SECURE_VALIDATE_RANGE(
; 368  : 			this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 369  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 370  : 
; 371  : 		++_Myoff;

  00000	ff 41 08	 inc	 DWORD PTR [ecx+8]

; 372  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 373  : 		}

  00005	c3		 ret	 0
??E?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??G?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-, COMDAT
; _this$ = ecx

; 451  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 452  : 		_Compat(_Right);
; 453  : 		return (_Right._Myoff <= this->_Myoff
; 454  : 			? this->_Myoff - _Right._Myoff
; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00009	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000c	2b c2		 sub	 eax, edx

; 456  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??G?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??8?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator==, COMDAT
; _this$ = ecx

; 464  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 465  : 		_Compat(_Right);
; 466  : 		return (this->_Myoff == _Right._Myoff);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	33 c0		 xor	 eax, eax
  0000b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0000e	0f 94 c0	 sete	 al

; 467  : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??8?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??9?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator!=, COMDAT
; _this$ = ecx

; 470  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 466  : 		return (this->_Myoff == _Right._Myoff);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]

; 471  : 		return (!(*this == _Right));

  00009	33 c0		 xor	 eax, eax

; 466  : 		return (this->_Myoff == _Right._Myoff);

  0000b	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]

; 471  : 		return (!(*this == _Right));

  0000e	0f 95 c0	 setne	 al

; 472  : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??9?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 1013 : 		{	// append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1014 : 		return (append(_Right, 0, npos));

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0000a	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 1015 : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic0.h
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z PROC	; std::codecvt<char,char,int>::codecvt<char,char,int>, COMDAT
; _this$ = ecx

; 894  : 		{	// construct from specified locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic0.h

; 219  : 	_Counter = _Value;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale

; 894  : 		{	// construct from specified locale

  00009	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$codecvt@DDH@std@@6B@

; 895  : 		_Init(_Lobj);
; 896  : 		}

  0000f	8b c1		 mov	 eax, ecx
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z ENDP	; std::codecvt<char,char,int>::codecvt<char,char,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Compat@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
?_Compat@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Compat, COMDAT
; _this$dead$ = ecx

; 528  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?_Init@?$codecvt@DDH@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Init@?$codecvt@DDH@std@@IAEXABV_Locinfo@2@@Z PROC	; std::codecvt<char,char,int>::_Init, COMDAT
; _this$ = ecx

; 914  : 		}

  00000	c2 04 00	 ret	 4
?_Init@?$codecvt@DDH@std@@IAEXABV_Locinfo@2@@Z ENDP	; std::codecvt<char,char,int>::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h
;	COMDAT ??$put@VTaskVBOVAOSet@Tasks@@@MiniHeap@MemUtil@@QAEPAVTaskVBOVAOSet@Tasks@@V23@@Z
_TEXT	SEGMENT
_object$ = 8						; size = 12
??$put@VTaskVBOVAOSet@Tasks@@@MiniHeap@MemUtil@@QAEPAVTaskVBOVAOSet@Tasks@@V23@@Z PROC ; MemUtil::MiniHeap::put<Tasks::TaskVBOVAOSet>, COMDAT
; _this$ = ecx

; 17   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b d1		 mov	 edx, ecx

; 18   : 			if(pos + sizeof(A) <= size)

  00005	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00008	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  0000b	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  0000e	77 20		 ja	 SHORT $LN2@put

; 19   : 			{
; 20   : 				A* mempos = (A*)(heap + pos);

  00010	8b 02		 mov	 eax, DWORD PTR [edx]
  00012	03 c1		 add	 eax, ecx

; 21   : 				new(mempos) A(object);

  00014	74 12		 je	 SHORT $LN5@put
  00016	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7TaskVBOVAOSet@Tasks@@6B@
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _object$[ebp+4]
  0001f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00022	8b 4d 10	 mov	 ecx, DWORD PTR _object$[ebp+8]
  00025	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN5@put:

; 22   : 				pos += sizeof(A);

  00028	83 42 08 0c	 add	 DWORD PTR [edx+8], 12	; 0000000cH

; 29   : 			}
; 30   : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
$LN2@put:

; 23   : 
; 24   : 				return mempos;
; 25   : 			}
; 26   : 			else
; 27   : 			{
; 28   : 				return nullptr;

  00030	33 c0		 xor	 eax, eax

; 29   : 			}
; 30   : 		}

  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
??$put@VTaskVBOVAOSet@Tasks@@@MiniHeap@MemUtil@@QAEPAVTaskVBOVAOSet@Tasks@@V23@@Z ENDP ; MemUtil::MiniHeap::put<Tasks::TaskVBOVAOSet>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Iter_cat@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@YA?AUinput_iterator_tag@0@ABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
??$_Iter_cat@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@YA?AUinput_iterator_tag@0@ABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@@Z PROC ; std::_Iter_cat<std::istreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; ___formal$dead$ = ecx

; 398  : 	{	// return category from iterator argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 399  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 400  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 401  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Iter_cat@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@YA?AUinput_iterator_tag@0@ABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@@Z ENDP ; std::_Iter_cat<std::istreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
___formal$ = 24						; size = 1
??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<std::istreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 838  : 		void _Construct(_Iter _First,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN

  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LL13@Construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 589  : 	return (_Left.equal(_Right));

  00037	8d 45 10	 lea	 eax, DWORD PTR __Last$[ebp]
  0003a	50		 push	 eax
  0003b	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  0003e	e8 00 00 00 00	 call	 ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z ; std::istreambuf_iterator<char,std::char_traits<char> >::equal

; 590  : 	}
; 591  : 
; 592  : template<class _Elem,
; 593  : 	class _Traits> inline
; 594  : 	bool __CLR_OR_THIS_CALL operator!=(
; 595  : 		const istreambuf_iterator<_Elem, _Traits>& _Left,
; 596  : 		const istreambuf_iterator<_Elem, _Traits>& _Right)
; 597  : 	{	// test for istreambuf_iterator inequality
; 598  : 	return (!(_Left == _Right));

  00043	84 c0		 test	 al, al
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 842  : 		for (; _First != _Last; ++_First)

  00045	0f 85 3b 01 00
	00		 jne	 $LN9@Construct
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 562  : 				_Meta = _Strbuf->sgetc()))

  0004b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]

; 278  : 		}
; 279  : 
; 280  : 	void __CLR_OR_THIS_CALL pbump(int _Off)
; 281  : 		{	// alter current position in write buffer by _Off
; 282  : 		*_IPcount -= _Off;
; 283  : 		*_IPnext += _Off;
; 284  : 		}
; 285  : 
; 286  : 	void __CLR_OR_THIS_CALL setp(_Elem *_First, _Elem *_Last)
; 287  : 		{	// set pointers for write buffer
; 288  : 		*_IPfirst = _First;
; 289  : 		*_IPnext = _First;
; 290  : 		*_IPcount = (int)(_Last - _First);
; 291  : 		}
; 292  : 
; 293  : 	void __CLR_OR_THIS_CALL setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
; 294  : 		{	// set pointers for write buffer, extended version
; 295  : 		*_IPfirst = _First;
; 296  : 		*_IPnext = _Next;
; 297  : 		*_IPcount = (int)(_Last - _Next);
; 298  : 		}
; 299  : 
; 300  : 	_Elem *__CLR_OR_THIS_CALL _Pninc()
; 301  : 		{	// increment current position in write buffer
; 302  : 		--*_IPcount;
; 303  : 		return ((*_IPnext)++);
; 304  : 		}
; 305  : 
; 306  : 	streamsize __CLR_OR_THIS_CALL _Pnavail() const
; 307  : 		{	// count number of available positions in write buffer
; 308  : 		return (*_IPnext != 0 ? *_IPcount : 0);
; 309  : 		}
; 310  : 
; 311  : 	void __CLR_OR_THIS_CALL _Init()
; 312  : 		{	// initialize buffer parameters for no buffers
; 313  : 		_IGfirst = &_Gfirst;
; 314  : 		_IPfirst = &_Pfirst;
; 315  : 		_IGnext = &_Gnext;
; 316  : 		_IPnext = &_Pnext;
; 317  : 		_IGcount = &_Gcount;
; 318  : 		_IPcount = &_Pcount;
; 319  : 		setp(0, 0);
; 320  : 		setg(0, 0, 0);
; 321  : 		}
; 322  : 
; 323  : 	void __CLR_OR_THIS_CALL _Init(_Elem **_Gf, _Elem **_Gn, int *_Gc,
; 324  : 		_Elem **_Pf, _Elem **_Pn, int *_Pc)
; 325  : 		{	// initialize buffer parameters as specified
; 326  : 		_IGfirst = _Gf;
; 327  : 		_IPfirst = _Pf;
; 328  : 		_IGnext = _Gn;
; 329  : 		_IPnext = _Pn;
; 330  : 		_IGcount = _Gc;
; 331  : 		_IPcount = _Pc;
; 332  : 		}
; 333  : 
; 334  : 	virtual int_type __CLR_OR_THIS_CALL overflow(int_type = _Traits::eof())
; 335  : 		{	// put a character to stream (always fail)
; 336  : 		return (_Traits::eof());
; 337  : 		}
; 338  : 
; 339  : 	virtual int_type __CLR_OR_THIS_CALL pbackfail(int_type = _Traits::eof())
; 340  : 		{	// put a character back to stream (always fail)
; 341  : 		return (_Traits::eof());
; 342  : 		}
; 343  : 
; 344  : 	virtual streamsize __CLR_OR_THIS_CALL showmanyc()
; 345  : 		{	// return count of input characters
; 346  : 		return (0);
; 347  : 		}
; 348  : 
; 349  : 	virtual int_type __CLR_OR_THIS_CALL underflow()
; 350  : 		{	// get a character from stream, but don't point past it
; 351  : 		return (_Traits::eof());
; 352  : 		}
; 353  : 
; 354  : 	virtual int_type __CLR_OR_THIS_CALL uflow()
; 355  : 		{	// get a character from stream, point past it
; 356  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 357  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
; 358  : 		}
; 359  : 
; 360  : 	virtual streamsize __CLR_OR_THIS_CALL xsgetn(_Elem * _Ptr,
; 361  : 		streamsize _Count)
; 362  : 		{	// get _Count characters from stream
; 363  : 		int_type _Meta;
; 364  : 		streamsize _Size, _Copied;
; 365  : 
; 366  : 		for (_Copied = 0; 0 < _Count; )
; 367  : 			if (0 < (_Size = _Gnavail()))
; 368  : 				{	// copy from read buffer
; 369  : 				if (_Count < _Size)
; 370  : 					_Size = _Count;
; 371  : 				_Traits::copy(_Ptr, gptr(), (size_t)_Size);
; 372  : 				_Ptr += _Size;
; 373  : 				_Copied += _Size;
; 374  : 				_Count -= _Size;
; 375  : 				gbump((int)_Size);
; 376  : 				}
; 377  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
; 378  : 				break;	// end of file, quit
; 379  : 			else
; 380  : 				{	// get a single character
; 381  : 				*_Ptr++ = _Traits::to_char_type(_Meta);
; 382  : 				++_Copied;
; 383  : 				--_Count;
; 384  : 				}
; 385  : 
; 386  : 		return (_Copied);
; 387  : 		}
; 388  : 
; 389  : 	virtual streamsize __CLR_OR_THIS_CALL xsputn(const _Elem *_Ptr,
; 390  : 		streamsize _Count)
; 391  : 		{	// put _Count characters to stream
; 392  : 		streamsize _Size, _Copied;
; 393  : 
; 394  : 		for (_Copied = 0; 0 < _Count; )
; 395  : 			if (0 < (_Size = _Pnavail()))
; 396  : 				{	// copy to write buffer
; 397  : 				if (_Count < _Size)
; 398  : 					_Size = _Count;
; 399  : 				_Traits::copy(pptr(), _Ptr, (size_t)_Size);
; 400  : 				_Ptr += _Size;
; 401  : 				_Copied += _Size;
; 402  : 				_Count -= _Size;
; 403  : 				pbump((int)_Size);
; 404  : 				}
; 405  : 			else if (_Traits::eq_int_type(_Traits::eof(),
; 406  : 				overflow(_Traits::to_int_type(*_Ptr))))
; 407  : 				break;	// single character put failed, quit
; 408  : 			else
; 409  : 				{	// count character successfully put
; 410  : 				++_Ptr;
; 411  : 				++_Copied;
; 412  : 				--_Count;
; 413  : 				}
; 414  : 
; 415  : 		return (_Copied);
; 416  : 		}
; 417  : 
; 418  : 	virtual pos_type __CLR_OR_THIS_CALL seekoff(off_type,
; 419  : 		ios_base::seekdir,
; 420  : 		ios_base::openmode = ios_base::in | ios_base::out)
; 421  : 		{	// change position by offset, according to way and mode
; 422  : 		return (streampos(_BADOFF));
; 423  : 		}
; 424  : 
; 425  : 	virtual pos_type __CLR_OR_THIS_CALL seekpos(pos_type,
; 426  : 		ios_base::openmode = ios_base::in | ios_base::out)
; 427  : 		{	// change to specified position, according to mode
; 428  : 		return (streampos(_BADOFF));
; 429  : 		}
; 430  : 
; 431  : 	virtual _Myt *__CLR_OR_THIS_CALL setbuf(_Elem *, streamsize)
; 432  : 		{	// offer buffer to external agent (do nothing)
; 433  : 		return (this);
; 434  : 		}
; 435  : 
; 436  : 	virtual int __CLR_OR_THIS_CALL sync()
; 437  : 		{	// synchronize with external agent (do nothing)
; 438  : 		return (0);
; 439  : 		}
; 440  : 
; 441  : 	virtual void __CLR_OR_THIS_CALL imbue(const locale&)
; 442  : 		{	// set locale to argument (do nothing)
; 443  : 		}
; 444  : 
; 445  : private:
; 446  : 	_Elem *_Gfirst;	// beginning of read buffer
; 447  : 	_Elem *_Pfirst;	// beginning of write buffer
; 448  : 	_Elem **_IGfirst;	// pointer to beginning of read buffer
; 449  : 	_Elem **_IPfirst;	// pointer to beginning of write buffer
; 450  : 	_Elem *_Gnext;	// current position in read buffer
; 451  : 	_Elem *_Pnext;	// current position in write buffer
; 452  : 	_Elem **_IGnext;	// pointer to current position in read buffer
; 453  : 	_Elem **_IPnext;	// pointer to current position in write buffer
; 454  : 
; 455  : 	int _Gcount;	// length of read buffer
; 456  : 	int _Pcount;	// length of write buffer
; 457  : 	int *_IGcount;	// pointer to length of read buffer
; 458  : 	int *_IPcount;	// pointer to length of write buffer
; 459  : 
; 460  : protected:
; 461  : 	locale *_Plocale;	// pointer to imbued locale object
; 462  : 	};
; 463  : 
; 464  :  #if defined(_DLL_CPPLIB) && !defined(_M_CEE_PURE)
; 465  : 
; 466  : template class _CRTIMP2_PURE basic_streambuf<char, char_traits<char> >;
; 467  : template class _CRTIMP2_PURE basic_streambuf<wchar_t, char_traits<wchar_t> >;
; 468  : 
; 469  :  #endif /* defined(_DLL_CPPLIB) etc. */
; 470  : 
; 471  : 		// TEMPLATE CLASS istreambuf_iterator
; 472  : template<class _Elem,
; 473  : 	class _Traits>
; 474  : 	class istreambuf_iterator
; 475  : 		: public iterator<input_iterator_tag,
; 476  : 			_Elem, typename _Traits::off_type, const _Elem *, _Elem>
; 477  : 	{	// wrap stream buffer as input iterator
; 478  : 	typedef istreambuf_iterator<_Elem, _Traits> _Myt;
; 479  : public:
; 480  : 	typedef _Elem char_type;
; 481  : 	typedef _Traits traits_type;
; 482  : 	typedef basic_streambuf<_Elem, _Traits> streambuf_type;
; 483  : 	typedef basic_istream<_Elem, _Traits> istream_type;
; 484  : 
; 485  : 	typedef typename traits_type::int_type int_type;
; 486  : 	typedef const _Elem *pointer;
; 487  : 
; 488  : 	istreambuf_iterator(streambuf_type *_Sb = 0) _THROW0()
; 489  : 		: _Strbuf(_Sb), _Got(_Sb == 0)
; 490  : 		{	// construct from stream buffer _Sb
; 491  : 		}
; 492  : 
; 493  : 	istreambuf_iterator(istream_type& _Istr) _THROW0()
; 494  : 		: _Strbuf(_Istr.rdbuf()), _Got(_Istr.rdbuf() == 0)
; 495  : 		{	// construct from stream buffer in istream _Istr
; 496  : 		}
; 497  : 
; 498  : 	const _Elem& operator*() const
; 499  : 		{	// return designated value
; 500  : 		if (!_Got)

  0004e	38 45 0c	 cmp	 BYTE PTR __First$[ebp+4], al
  00051	75 35		 jne	 SHORT $LN44@Construct

; 562  : 				_Meta = _Strbuf->sgetc()))

  00053	85 c9		 test	 ecx, ecx
  00055	74 28		 je	 SHORT $LN42@Construct

; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00057	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0005a	8b 10		 mov	 edx, DWORD PTR [eax]
  0005c	85 d2		 test	 edx, edx
  0005e	74 0d		 je	 SHORT $LN48@Construct
  00060	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 153  : 			? _Traits::to_int_type(*gptr()) : underflow());

  00063	83 38 00	 cmp	 DWORD PTR [eax], 0
  00066	7e 05		 jle	 SHORT $LN48@Construct
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  00068	0f b6 02	 movzx	 eax, BYTE PTR [edx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 153  : 			? _Traits::to_int_type(*gptr()) : underflow());

  0006b	eb 08		 jmp	 SHORT $LN49@Construct
$LN48@Construct:
  0006d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006f	ff 50 18	 call	 DWORD PTR [eax+24]
  00072	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
$LN49@Construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  00075	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 562  : 				_Meta = _Strbuf->sgetc()))

  00078	74 05		 je	 SHORT $LN42@Construct

; 564  : 		else
; 565  : 			_Val = traits_type::to_char_type(_Meta);

  0007a	88 45 0d	 mov	 BYTE PTR __First$[ebp+5], al
  0007d	eb 05		 jmp	 SHORT $LN41@Construct
$LN42@Construct:

; 563  : 			_Strbuf = 0;

  0007f	33 c9		 xor	 ecx, ecx
  00081	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN41@Construct:

; 566  : 		_Got = true;

  00084	c6 45 0c 01	 mov	 BYTE PTR __First$[ebp+4], 1
$LN44@Construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 1067 : 		if (npos - this->_Mysize <= _Count)

  00088	8b 56 10	 mov	 edx, DWORD PTR [esi+16]

; 843  : 			append((size_type)1, (_Elem)*_First);

  0008b	8a 5d 0d	 mov	 bl, BYTE PTR __First$[ebp+5]

; 1067 : 		if (npos - this->_Mysize <= _Count)

  0008e	83 c8 ff	 or	 eax, -1
  00091	2b c2		 sub	 eax, edx
  00093	83 f8 01	 cmp	 eax, 1
  00096	77 0a		 ja	 SHORT $LN65@Construct

; 2266 : 		_Eos(_Newsize);
; 2267 : 		}
; 2268 : 
; 2269 : 	__declspec(noreturn) void _Xlen() const
; 2270 : 		{	// report a length_error
; 2271 : 		_Xlength_error("string too long");

  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0009d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN204@Construct:
$LN65@Construct:

; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  000a2	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]

; 2219 : 		}
; 2220 : 
; 2221 : 	bool _Grow(size_type _Newsize,
; 2222 : 		bool _Trim = false)
; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2224 : 		if (max_size() < _Newsize)

  000a5	83 ff fe	 cmp	 edi, -2			; fffffffeH
  000a8	76 0a		 jbe	 SHORT $LN76@Construct

; 2266 : 		_Eos(_Newsize);
; 2267 : 		}
; 2268 : 
; 2269 : 	__declspec(noreturn) void _Xlen() const
; 2270 : 		{	// report a length_error
; 2271 : 		_Xlength_error("string too long");

  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000af	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN205@Construct:
$LN76@Construct:

; 2225 : 			_Xlen();	// result too long
; 2226 : 		if (this->_Myres < _Newsize)

  000b4	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000b7	3b c7		 cmp	 eax, edi
  000b9	73 0b		 jae	 SHORT $LN75@Construct

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

  000bb	52		 push	 edx
  000bc	57		 push	 edi
  000bd	8b ce		 mov	 ecx, esi
  000bf	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  000c4	eb 15		 jmp	 SHORT $LN202@Construct
$LN75@Construct:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
; 2231 : 		else if (_Newsize == 0)

  000c6	85 ff		 test	 edi, edi
  000c8	75 16		 jne	 SHORT $LN203@Construct

; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  000ca	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 517  : 			: this->_Bx._Buf);

  000cd	83 f8 10	 cmp	 eax, 16			; 00000010H
  000d0	72 04		 jb	 SHORT $LN130@Construct
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  000d2	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  000d4	eb 02		 jmp	 SHORT $LN131@Construct
$LN130@Construct:
  000d6	8b c6		 mov	 eax, esi
$LN131@Construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  000d8	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN202@Construct:
  000db	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

  000de	85 ff		 test	 edi, edi
$LN203@Construct:
  000e0	0f 95 c0	 setne	 al

; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  000e3	84 c0		 test	 al, al
  000e5	74 28		 je	 SHORT $LN2@Construct

; 517  : 			: this->_Bx._Buf);

  000e7	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);

  000eb	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]

; 517  : 			: this->_Bx._Buf);

  000ee	72 04		 jb	 SHORT $LN142@Construct
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  000f0	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  000f2	eb 02		 jmp	 SHORT $LN143@Construct
$LN142@Construct:
  000f4	8b c6		 mov	 eax, esi
$LN143@Construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  000f6	88 1c 08	 mov	 BYTE PTR [eax+ecx], bl
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  000f9	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  000fd	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 517  : 			: this->_Bx._Buf);

  00100	72 04		 jb	 SHORT $LN160@Construct
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef

; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00102	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 517  : 			: this->_Bx._Buf);

  00104	eb 02		 jmp	 SHORT $LN161@Construct
$LN160@Construct:
  00106	8b c6		 mov	 eax, esi
$LN161@Construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00108	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  0010c	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
$LN2@Construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 551  : 				_Strbuf->sbumpc()))

  0010f	85 c9		 test	 ecx, ecx
  00111	74 36		 je	 SHORT $LN14@Construct

; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00113	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00116	83 38 00	 cmp	 DWORD PTR [eax], 0
  00119	74 1b		 je	 SHORT $LN20@Construct
  0011b	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0011e	8b 02		 mov	 eax, DWORD PTR [edx]

; 147  : 			? _Traits::to_int_type(*_Gninc()) : uflow());

  00120	85 c0		 test	 eax, eax
  00122	7e 12		 jle	 SHORT $LN20@Construct

; 154  : 		}
; 155  : 
; 156  : 	streamsize __CLR_OR_THIS_CALL sgetn(_Elem *_Ptr,
; 157  : 		streamsize _Count)
; 158  : 		{	// get up to _Count characters into array beginning at _Ptr
; 159  : 		return (xsgetn(_Ptr, _Count));
; 160  : 		}
; 161  : 
; 162  : 	int_type __CLR_OR_THIS_CALL snextc()
; 163  : 		{	// point to next character and return it
; 164  : 		return (1 < _Gnavail()
; 165  : 			? _Traits::to_int_type(*_Gnpreinc())
; 166  : 			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
; 167  : 				? _Traits::eof() : sgetc());
; 168  : 		}
; 169  : 
; 170  : 	int_type __CLR_OR_THIS_CALL sputbackc(_Elem _Ch)
; 171  : 		{	// put back _Ch
; 172  : 		return (gptr() != 0 && eback() < gptr()
; 173  : 			&& _Traits::eq(_Ch, gptr()[-1])
; 174  : 			? _Traits::to_int_type(*_Gndec())
; 175  : 			: pbackfail(_Traits::to_int_type(_Ch)));
; 176  : 		}
; 177  : 
; 178  : 	void __CLR_OR_THIS_CALL stossc()
; 179  : 		{	// point past a character
; 180  : 		if (0 < _Gnavail())
; 181  : 			_Gninc();
; 182  : 		else
; 183  : 			uflow();
; 184  : 		}
; 185  : 
; 186  : 	int_type __CLR_OR_THIS_CALL sungetc()
; 187  : 		{	// back up one position
; 188  : 		return (gptr() != 0 && eback() < gptr()
; 189  : 			? _Traits::to_int_type(*_Gndec()) : pbackfail());
; 190  : 		}
; 191  : 
; 192  : 	int_type __CLR_OR_THIS_CALL sputc(_Elem _Ch)
; 193  : 		{	// put a character
; 194  : 		return (0 < _Pnavail()
; 195  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 196  : 			: overflow(_Traits::to_int_type(_Ch)));
; 197  : 		}
; 198  : 
; 199  : 	streamsize __CLR_OR_THIS_CALL sputn(const _Elem *_Ptr,
; 200  : 		streamsize _Count)
; 201  : 		{	// put _Count characters from array beginning at _Ptr
; 202  : 		return (xsputn(_Ptr, _Count));
; 203  : 		}
; 204  : 
; 205  : 	virtual void __CLR_OR_THIS_CALL _Lock()
; 206  : 		{	// set the thread lock (overridden by basic_filebuf)
; 207  : 		}
; 208  : 
; 209  : 	virtual void __CLR_OR_THIS_CALL _Unlock()
; 210  : 		{	// clear the thread lock (overridden by basic_filebuf)
; 211  : 		}
; 212  : 
; 213  : protected:
; 214  : 	_Elem *__CLR_OR_THIS_CALL eback() const
; 215  : 		{	// return beginning of read buffer
; 216  : 		return (*_IGfirst);
; 217  : 		}
; 218  : 
; 219  : 	_Elem *__CLR_OR_THIS_CALL gptr() const
; 220  : 		{	// return current position in read buffer
; 221  : 		return (*_IGnext);
; 222  : 		}
; 223  : 
; 224  : 	_Elem *__CLR_OR_THIS_CALL pbase() const
; 225  : 		{	// return beginning of write buffer
; 226  : 		return (*_IPfirst);
; 227  : 		}
; 228  : 
; 229  : 	_Elem *__CLR_OR_THIS_CALL pptr() const
; 230  : 		{	// return current position in write buffer
; 231  : 		return (*_IPnext);
; 232  : 		}
; 233  : 
; 234  : 	_Elem *__CLR_OR_THIS_CALL egptr() const
; 235  : 		{	// return end of read buffer
; 236  : 		return (*_IGnext + *_IGcount);
; 237  : 		}
; 238  : 
; 239  : 	void __CLR_OR_THIS_CALL gbump(int _Off)
; 240  : 		{	// alter current position in read buffer by _Off
; 241  : 		*_IGcount -= _Off;
; 242  : 		*_IGnext += _Off;
; 243  : 		}
; 244  : 
; 245  : 	void __CLR_OR_THIS_CALL setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
; 246  : 		{	// set pointers for read buffer
; 247  : 		*_IGfirst = _First;
; 248  : 		*_IGnext = _Next;
; 249  : 		*_IGcount = (int)(_Last - _Next);
; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;

  00124	48		 dec	 eax
  00125	89 02		 mov	 DWORD PTR [edx], eax

; 266  : 		return ((*_IGnext)++);

  00127	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  0012a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0012c	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0012f	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  00131	0f b6 02	 movzx	 eax, BYTE PTR [edx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 147  : 			? _Traits::to_int_type(*_Gninc()) : uflow());

  00134	eb 05		 jmp	 SHORT $LN21@Construct
$LN20@Construct:
  00136	8b 01		 mov	 eax, DWORD PTR [ecx]
  00138	ff 50 1c	 call	 DWORD PTR [eax+28]
$LN21@Construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  0013b	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 551  : 				_Strbuf->sbumpc()))

  0013e	74 09		 je	 SHORT $LN14@Construct

; 554  : 			_Got = false;

  00140	c6 45 0c 00	 mov	 BYTE PTR __First$[ebp+4], 0
  00144	e9 ee fe ff ff	 jmp	 $LL13@Construct
$LN14@Construct:

; 552  : 			_Strbuf = 0, _Got = true;

  00149	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __First$[ebp], 0
  00150	c6 45 0c 01	 mov	 BYTE PTR __First$[ebp+4], 1

; 553  : 		else

  00154	e9 de fe ff ff	 jmp	 $LL13@Construct
__catch$??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z$0:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00159	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0015c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00160	72 0a		 jb	 SHORT $LN185@Construct
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00162	ff 36		 push	 DWORD PTR [esi]
  00164	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00169	83 c4 04	 add	 esp, 4
$LN185@Construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 846  : 		_RERAISE;

  0016c	6a 00		 push	 0

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;
; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2260 : 			if (0 < _Newsize)
; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);
; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  0016e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00175	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 846  : 		_RERAISE;

  0017c	6a 00		 push	 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  0017e	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 846  : 		_RERAISE;

  00181	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN206@Construct:
$LN9@Construct:

; 847  : 		_CATCH_END
; 848  : 		}

  00186	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00189	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00190	59		 pop	 ecx
  00191	5f		 pop	 edi
  00192	5e		 pop	 esi
  00193	5b		 pop	 ebx
  00194	8b e5		 mov	 esp, ebp
  00196	5d		 pop	 ebp
  00197	c2 14 00	 ret	 20			; 00000014H
$LN201@Construct:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<std::istreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAVVertexUVRGBA@gfxu@@@std@@YAAAVVertexUVRGBA@gfxu@@AAV12@@Z
_TEXT	SEGMENT
??$forward@AAVVertexUVRGBA@gfxu@@@std@@YAAAVVertexUVRGBA@gfxu@@AAV12@@Z PROC ; std::forward<gfxu::VertexUVRGBA &>, COMDAT
; __Arg$ = ecx

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1777 : 	}

  00002	c3		 ret	 0
??$forward@AAVVertexUVRGBA@gfxu@@@std@@YAAAVVertexUVRGBA@gfxu@@AAV12@@Z ENDP ; std::forward<gfxu::VertexUVRGBA &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VVertexUVRGBA@gfxu@@AAV12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAAV?$allocator@VVertexUVRGBA@gfxu@@@1@PAVVertexUVRGBA@gfxu@@AAV34@@Z
_TEXT	SEGMENT
__V0$ = 8						; size = 4
??$construct@VVertexUVRGBA@gfxu@@AAV12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAAV?$allocator@VVertexUVRGBA@gfxu@@@1@PAVVertexUVRGBA@gfxu@@AAV34@@Z PROC ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA &>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00003	85 d2		 test	 edx, edx
  00005	74 3b		 je	 SHORT $LN7@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __V0$[ebp]
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	89 02		 mov	 DWORD PTR [edx], eax
  0000e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00011	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00014	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00017	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0001d	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00020	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00023	89 42 10	 mov	 DWORD PTR [edx+16], eax
  00026	0f b6 41 14	 movzx	 eax, BYTE PTR [ecx+20]
  0002a	88 42 14	 mov	 BYTE PTR [edx+20], al
  0002d	0f b6 41 15	 movzx	 eax, BYTE PTR [ecx+21]
  00031	88 42 15	 mov	 BYTE PTR [edx+21], al
  00034	0f b6 41 16	 movzx	 eax, BYTE PTR [ecx+22]
  00038	88 42 16	 mov	 BYTE PTR [edx+22], al
  0003b	0f b6 41 17	 movzx	 eax, BYTE PTR [ecx+23]
  0003f	88 42 17	 mov	 BYTE PTR [edx+23], al
$LN7@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??$construct@VVertexUVRGBA@gfxu@@AAV12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAAV?$allocator@VVertexUVRGBA@gfxu@@@1@PAVVertexUVRGBA@gfxu@@AAV34@@Z ENDP ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABVVertexUVRGBA@gfxu@@@std@@YAABVVertexUVRGBA@gfxu@@ABV12@@Z
_TEXT	SEGMENT
??$forward@ABVVertexUVRGBA@gfxu@@@std@@YAABVVertexUVRGBA@gfxu@@ABV12@@Z PROC ; std::forward<gfxu::VertexUVRGBA const &>, COMDAT
; __Arg$ = ecx

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1777 : 	}

  00002	c3		 ret	 0
??$forward@ABVVertexUVRGBA@gfxu@@@std@@YAABVVertexUVRGBA@gfxu@@ABV12@@Z ENDP ; std::forward<gfxu::VertexUVRGBA const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VVertexUVRGBA@gfxu@@ABV12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAAV?$allocator@VVertexUVRGBA@gfxu@@@1@PAVVertexUVRGBA@gfxu@@ABV34@@Z
_TEXT	SEGMENT
__V0$ = 8						; size = 4
??$construct@VVertexUVRGBA@gfxu@@ABV12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAAV?$allocator@VVertexUVRGBA@gfxu@@@1@PAVVertexUVRGBA@gfxu@@ABV34@@Z PROC ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA const &>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	85 d2		 test	 edx, edx
  00005	74 3b		 je	 SHORT $LN7@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __V0$[ebp]
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	89 02		 mov	 DWORD PTR [edx], eax
  0000e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00011	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00014	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00017	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0001d	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00020	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00023	89 42 10	 mov	 DWORD PTR [edx+16], eax
  00026	0f b6 41 14	 movzx	 eax, BYTE PTR [ecx+20]
  0002a	88 42 14	 mov	 BYTE PTR [edx+20], al
  0002d	0f b6 41 15	 movzx	 eax, BYTE PTR [ecx+21]
  00031	88 42 15	 mov	 BYTE PTR [edx+21], al
  00034	0f b6 41 16	 movzx	 eax, BYTE PTR [ecx+22]
  00038	88 42 16	 mov	 BYTE PTR [edx+22], al
  0003b	0f b6 41 17	 movzx	 eax, BYTE PTR [ecx+23]
  0003f	88 42 17	 mov	 BYTE PTR [edx+23], al
$LN7@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??$construct@VVertexUVRGBA@gfxu@@ABV12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAAV?$allocator@VVertexUVRGBA@gfxu@@@1@PAVVertexUVRGBA@gfxu@@ABV34@@Z ENDP ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@VVertexUVRGBA@gfxu@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVVertexUVRGBA@gfxu@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
??$_Ptr_cat@VVertexUVRGBA@gfxu@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVVertexUVRGBA@gfxu@@0@Z PROC ; std::_Ptr_cat<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>, COMDAT
; ___formal$dead$ = ecx
; ___formal$dead$ = edx

; 437  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 440  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@VVertexUVRGBA@gfxu@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVVertexUVRGBA@gfxu@@0@Z ENDP ; std::_Ptr_cat<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAXPAVVertexUVRGBA@gfxu@@0AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAXPAVVertexUVRGBA@gfxu@@0AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 88   : 	for (; _First != _Last; ++_First)
; 89   : 		_Al.destroy(_First);
; 90   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAXPAVVertexUVRGBA@gfxu@@0AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAVVertexUVRGBA@gfxu@@PAV12@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAPAVVertexUVRGBA@gfxu@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAVVertexUVRGBA@gfxu@@PAV12@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAPAVVertexUVRGBA@gfxu@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z PROC ; std::_Uninitialized_move<gfxu::VertexUVRGBA *,gfxu::VertexUVRGBA *,std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 471  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 472  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	83 ec 08	 sub	 esp, 8
  0000a	ff 75 08	 push	 DWORD PTR __Dest$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Uninit_move@PAVVertexUVRGBA@gfxu@@PAV12@V?$allocator@VVertexUVRGBA@gfxu@@@std@@V12@@std@@YAPAVVertexUVRGBA@gfxu@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<gfxu::VertexUVRGBA *,gfxu::VertexUVRGBA *,std::allocator<gfxu::VertexUVRGBA>,gfxu::VertexUVRGBA>
  00012	83 c4 10	 add	 esp, 16			; 00000010H

; 474  : 	}

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Uninitialized_move@PAVVertexUVRGBA@gfxu@@PAV12@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAPAVVertexUVRGBA@gfxu@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<gfxu::VertexUVRGBA *,gfxu::VertexUVRGBA *,std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
__Lock$1 = -4						; size = 4
__Lock$2 = -4						; size = 4
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
$T3 = 28						; size = 1
??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z PROC ; std::reverse<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT

; 3359 : 	{	// reverse elements in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00003	8b 45 14	 mov	 eax, DWORD PTR __Last$[ebp]

; 3359 : 	{	// reverse elements in [_First, _Last)

  00006	83 ec 08	 sub	 esp, 8

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00009	85 c0		 test	 eax, eax
  0000b	74 18		 je	 SHORT $LN77@reverse

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  0000d	8b 00		 mov	 eax, DWORD PTR [eax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  0000f	85 c0		 test	 eax, eax
  00011	75 4c		 jne	 SHORT $LN21@reverse

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00013	6a 03		 push	 3
  00015	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00018	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  0001d	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00020	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN77@reverse:

; 167  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 168  : 			}
; 169  : 		}
; 170  : 
; 171  : 	void _Clrcont()
; 172  : 		{	// disown owning container
; 173  : 		_Myproxy = 0;
; 174  : 		}
; 175  : 
; 176  : 	const _Container_base12 *_Getcont() const
; 177  : 		{	// get owning container
; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00025	33 c0		 xor	 eax, eax
$LN36@reverse:

; 3360 : 	_DEBUG_RANGE(_First, _Last);
; 3361 : 	_Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));

  00027	ff 75 1c	 push	 DWORD PTR __Last$[ebp+8]
  0002a	50		 push	 eax

; 124  : 		if (_Myproxy == _Right._Myproxy)

  0002b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0002e	85 c0		 test	 eax, eax
  00030	74 18		 je	 SHORT $LN78@reverse

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00032	8b 00		 mov	 eax, DWORD PTR [eax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00034	85 c0		 test	 eax, eax
  00036	75 31		 jne	 SHORT $LN55@reverse

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00038	6a 03		 push	 3
  0003a	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  0003d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00042	8d 4d fc	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00045	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN78@reverse:

; 3360 : 	_DEBUG_RANGE(_First, _Last);
; 3361 : 	_Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));

  0004a	ff 75 10	 push	 DWORD PTR __First$[ebp+8]

; 167  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 168  : 			}
; 169  : 		}
; 170  : 
; 171  : 	void _Clrcont()
; 172  : 		{	// disown owning container
; 173  : 		_Myproxy = 0;
; 174  : 		}
; 175  : 
; 176  : 	const _Container_base12 *_Getcont() const
; 177  : 		{	// get owning container
; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0004d	33 c0		 xor	 eax, eax

; 3360 : 	_DEBUG_RANGE(_First, _Last);
; 3361 : 	_Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));

  0004f	50		 push	 eax
  00050	ff 75 1c	 push	 DWORD PTR $T3[ebp]
  00053	e8 00 00 00 00	 call	 ??$_Reverse@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0Ubidirectional_iterator_tag@0@@Z ; std::_Reverse<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
  00058	83 c4 14	 add	 esp, 20			; 00000014H

; 3362 : 	}

  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
$LN21@reverse:

; 151  : 		else
; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  0005f	8b 00		 mov	 eax, DWORD PTR [eax]

; 167  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 168  : 			}
; 169  : 		}
; 170  : 
; 171  : 	void _Clrcont()
; 172  : 		{	// disown owning container
; 173  : 		_Myproxy = 0;
; 174  : 		}
; 175  : 
; 176  : 	const _Container_base12 *_Getcont() const
; 177  : 		{	// get owning container
; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00061	85 c0		 test	 eax, eax
  00063	74 c0		 je	 SHORT $LN77@reverse
  00065	8b 00		 mov	 eax, DWORD PTR [eax]
  00067	eb be		 jmp	 SHORT $LN36@reverse
$LN55@reverse:

; 151  : 		else
; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  00069	8b 00		 mov	 eax, DWORD PTR [eax]

; 167  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 168  : 			}
; 169  : 		}
; 170  : 
; 171  : 	void _Clrcont()
; 172  : 		{	// disown owning container
; 173  : 		_Myproxy = 0;
; 174  : 		}
; 175  : 
; 176  : 	const _Container_base12 *_Getcont() const
; 177  : 		{	// get owning container
; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0006b	85 c0		 test	 eax, eax
  0006d	74 db		 je	 SHORT $LN78@reverse

; 3360 : 	_DEBUG_RANGE(_First, _Last);
; 3361 : 	_Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));

  0006f	ff 75 10	 push	 DWORD PTR __First$[ebp+8]

; 167  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 168  : 			}
; 169  : 		}
; 170  : 
; 171  : 	void _Clrcont()
; 172  : 		{	// disown owning container
; 173  : 		_Myproxy = 0;
; 174  : 		}
; 175  : 
; 176  : 	const _Container_base12 *_Getcont() const
; 177  : 		{	// get owning container
; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00072	8b 00		 mov	 eax, DWORD PTR [eax]

; 3360 : 	_DEBUG_RANGE(_First, _Last);
; 3361 : 	_Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));

  00074	50		 push	 eax
  00075	ff 75 1c	 push	 DWORD PTR $T3[ebp]
  00078	e8 00 00 00 00	 call	 ??$_Reverse@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0Ubidirectional_iterator_tag@0@@Z ; std::_Reverse<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
  0007d	83 c4 14	 add	 esp, 20			; 00000014H

; 3362 : 	}

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z ENDP ; std::reverse<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z
_TEXT	SEGMENT
$T2 = -80						; size = 12
$T3 = -64						; size = 12
$T4 = -48						; size = 12
$T5 = -28						; size = 4
__Lock$6 = -28						; size = 4
__Lock$7 = -24						; size = 4
__Lock$8 = -24						; size = 4
$T9 = -20						; size = 4
__Lock$10 = -20						; size = 4
__Lock$11 = -20						; size = 4
$T12 = -16						; size = 4
$T13 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Mid$ = 20						; size = 12
__Last$ = 32						; size = 12
??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z PROC ; std::rotate<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT
; ___$ReturnUdt$ = ecx

; 3433 : 	{	// rotate [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 466  : 		return (this->_Myoff == _Right._Myoff);

  0002a	8b 45 1c	 mov	 eax, DWORD PTR __Mid$[ebp+8]
  0002d	39 45 10	 cmp	 DWORD PTR __First$[ebp+8], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3436 : 	if (_First != _Mid && _Mid != _Last)

  00030	74 6c		 je	 SHORT $LN205@rotate
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 466  : 		return (this->_Myoff == _Right._Myoff);

  00032	3b 45 28	 cmp	 eax, DWORD PTR __Last$[ebp+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3436 : 	if (_First != _Mid && _Mid != _Last)

  00035	74 67		 je	 SHORT $LN205@rotate

; 3438 : 			_Iter_cat(_First));

  00037	8d 45 20	 lea	 eax, DWORD PTR __Last$[ebp]
  0003a	50		 push	 eax
  0003b	8d 4d d0	 lea	 ecx, DWORD PTR $T4[ebp]
  0003e	e8 00 00 00 00	 call	 ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV01@@Z

; 167  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 168  : 			}
; 169  : 		}
; 170  : 
; 171  : 	void _Clrcont()
; 172  : 		{	// disown owning container
; 173  : 		_Myproxy = 0;
; 174  : 		}
; 175  : 
; 176  : 	const _Container_base12 *_Getcont() const
; 177  : 		{	// get owning container
; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00043	8b 45 d0	 mov	 eax, DWORD PTR $T4[ebp]
  00046	85 c0		 test	 eax, eax
  00048	75 04		 jne	 SHORT $LN27@rotate
  0004a	33 ff		 xor	 edi, edi
  0004c	eb 02		 jmp	 SHORT $LN28@rotate
$LN27@rotate:
  0004e	8b 38		 mov	 edi, DWORD PTR [eax]
$LN28@rotate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 50   : 		_Myoff = _Off;

  00050	8b 45 d8	 mov	 eax, DWORD PTR $T4[ebp+8]
  00053	89 45 f0	 mov	 DWORD PTR $T13[ebp], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3438 : 			_Iter_cat(_First));

  00056	8d 45 14	 lea	 eax, DWORD PTR __Mid$[ebp]
  00059	50		 push	 eax
  0005a	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  0005d	e8 00 00 00 00	 call	 ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV01@@Z

; 167  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 168  : 			}
; 169  : 		}
; 170  : 
; 171  : 	void _Clrcont()
; 172  : 		{	// disown owning container
; 173  : 		_Myproxy = 0;
; 174  : 		}
; 175  : 
; 176  : 	const _Container_base12 *_Getcont() const
; 177  : 		{	// get owning container
; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00062	8b 45 c0	 mov	 eax, DWORD PTR $T3[ebp]
  00065	85 c0		 test	 eax, eax
  00067	75 04		 jne	 SHORT $LN39@rotate
  00069	33 db		 xor	 ebx, ebx
  0006b	eb 02		 jmp	 SHORT $LN40@rotate
$LN39@rotate:
  0006d	8b 18		 mov	 ebx, DWORD PTR [eax]
$LN40@rotate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 50   : 		_Myoff = _Off;

  0006f	8b 45 c8	 mov	 eax, DWORD PTR $T3[ebp+8]
  00072	89 45 ec	 mov	 DWORD PTR $T9[ebp], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3438 : 			_Iter_cat(_First));

  00075	8d 45 08	 lea	 eax, DWORD PTR __First$[ebp]
  00078	50		 push	 eax
  00079	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  0007c	e8 00 00 00 00	 call	 ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@ABV01@@Z

; 167  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 168  : 			}
; 169  : 		}
; 170  : 
; 171  : 	void _Clrcont()
; 172  : 		{	// disown owning container
; 173  : 		_Myproxy = 0;
; 174  : 		}
; 175  : 
; 176  : 	const _Container_base12 *_Getcont() const
; 177  : 		{	// get owning container
; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00081	8b 45 b0	 mov	 eax, DWORD PTR $T2[ebp]
  00084	85 c0		 test	 eax, eax
  00086	74 02		 je	 SHORT $LN52@rotate
$LN51@rotate:
  00088	8b 00		 mov	 eax, DWORD PTR [eax]
$LN52@rotate:

; 824  : 	return (_Off);
; 825  : 	}
; 826  : 
; 827  : template<class _InIt,
; 828  : 	class _Diff> inline
; 829  : 		void _Distance(_InIt _First, _InIt _Last, _Diff& _Off)
; 830  : 	{	// add to _Off distance between iterators
; 831  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));
; 832  : 	}
; 833  : 
; 834  :  #if _HAS_CPP0X
; 835  : 		// TEMPLATE FUNCTION next
; 836  : template<class _FwdIt> inline
; 837  : 	_FwdIt next(_FwdIt _First,
; 838  : 		typename iterator_traits<_FwdIt>::difference_type _Off = 1)
; 839  : 	{	// increment iterator
; 840  : 	static_assert((is_base_of<forward_iterator_tag,
; 841  : 		typename iterator_traits<_FwdIt>::iterator_category>::value),
; 842  : 		"next requires forward iterator");
; 843  : 
; 844  : 	_STD advance(_First, _Off);
; 845  : 	return (_First);
; 846  : 	}
; 847  : 
; 848  : 		// TEMPLATE FUNCTION prev
; 849  : template<class _BidIt> inline
; 850  : 	_BidIt prev(_BidIt _First,
; 851  : 		typename iterator_traits<_BidIt>::difference_type _Off = 1)
; 852  : 	{	// decrement iterator
; 853  : 	static_assert((is_base_of<bidirectional_iterator_tag,
; 854  : 		typename iterator_traits<_BidIt>::iterator_category>::value),
; 855  : 		"prev requires bidirectional iterator");
; 856  : 
; 857  : 	_STD advance(_First, -_Off);
; 858  : 	return (_First);
; 859  : 	}
; 860  : 
; 861  : template<class _Container>
; 862  : 	auto inline begin(_Container& _Cont) -> decltype(_Cont.begin())
; 863  : 	{	// get beginning of sequence
; 864  : 	return (_Cont.begin());
; 865  : 	}
; 866  : 
; 867  : template<class _Container>
; 868  : 	auto inline begin(const _Container& _Cont) -> decltype(_Cont.begin())
; 869  : 	{	// get beginning of sequence
; 870  : 	return (_Cont.begin());
; 871  : 	}
; 872  : 
; 873  : template<class _Container>
; 874  : 	auto inline end(_Container& _Cont) -> decltype(_Cont.end())
; 875  : 	{	// get end of sequence
; 876  : 	return (_Cont.end());
; 877  : 	}
; 878  : 
; 879  : template<class _Container>
; 880  : 	auto inline end(const _Container& _Cont) -> decltype(_Cont.end())
; 881  : 	{	// get end of sequence
; 882  : 	return (_Cont.end());
; 883  : 	}
; 884  : 
; 885  : template<class _Ty,
; 886  : 	size_t _Size> inline
; 887  : 	_Ty *begin(_Ty (&_Array)[_Size])
; 888  : 	{	// get beginning of array
; 889  : 	return (_Array);
; 890  : 	}
; 891  : 
; 892  : template<class _Ty,
; 893  : 	size_t _Size> inline
; 894  : 	_Ty *end(_Ty (&_Array)[_Size])
; 895  : 	{	// get end of array
; 896  : 	return (_Array + _Size);
; 897  : 	}
; 898  :  #endif /* _HAS_CPP0X */
; 899  : 
; 900  : 		// TEMPLATE CLASS _Revranit
; 901  : template<class _Ty>
; 902  : 	struct pointer_traits;
; 903  : 
; 904  : template<class _RanIt,
; 905  : 	class _Base>
; 906  : 	class _Revranit
; 907  : 		: public _Base
; 908  : 	{	// wrap iterator to run it backwards
; 909  : public:
; 910  : 	typedef _Revranit<_RanIt, _Base> _Myt;
; 911  :  	typedef typename _Base::difference_type difference_type;
; 912  : 	typedef typename _Base::pointer pointer;
; 913  : 	typedef typename _Base::reference reference;
; 914  : 	typedef _RanIt iterator_type;
; 915  : 
; 916  : 	_Revranit()
; 917  : 		{	// construct with default wrapped iterator
; 918  : 		}
; 919  : 
; 920  : 	explicit _Revranit(_RanIt _Right)
; 921  : 		: current(_Right)
; 922  : 		{	// construct wrapped iterator from _Right
; 923  : 		}
; 924  : 
; 925  : 	template<class _RanIt2,
; 926  : 		class _Base2>
; 927  : 		_Revranit(const _Revranit<_RanIt2, _Base2>& _Right)
; 928  : 		: current(_Right.base())
; 929  : 		{	// initialize with compatible base
; 930  : 		}
; 931  : 
; 932  : 	_RanIt base() const
; 933  : 		{	// return wrapped iterator
; 934  : 		return (current);
; 935  : 		}
; 936  : 
; 937  : 	reference operator*() const
; 938  : 		{	// return designated value
; 939  : 		_RanIt _Tmp = current;
; 940  : 		return (*--_Tmp);
; 941  : 		}
; 942  : 
; 943  : 	pointer operator->() const
; 944  : 		{	// return pointer to class object
; 945  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 946  : 		}
; 947  : 
; 948  : 	_Myt& operator++()
; 949  : 		{	// preincrement
; 950  : 		--current;
; 951  : 		return (*this);
; 952  : 		}
; 953  : 
; 954  : 	_Myt operator++(int)
; 955  : 		{	// postincrement
; 956  : 		_Myt _Tmp = *this;
; 957  : 		--current;
; 958  : 		return (_Tmp);
; 959  : 		}
; 960  : 
; 961  : 	_Myt& operator--()
; 962  : 		{	// predecrement
; 963  : 		++current;
; 964  : 		return (*this);
; 965  : 		}
; 966  : 
; 967  : 	_Myt operator--(int)
; 968  : 		{	// postdecrement
; 969  : 		_Myt _Tmp = *this;
; 970  : 		++current;
; 971  : 		return (_Tmp);
; 972  : 		}
; 973  : 
; 974  : 	template<class _RanIt2,
; 975  : 		class _Base2>
; 976  : 		bool _Equal(const _Revranit<_RanIt2, _Base2>& _Right) const
; 977  : 		{	// test for iterator equality
; 978  : 		return (current == _Right.base());
; 979  : 		}
; 980  : 
; 981  : // N.B. functions valid for random-access iterators only beyond this point
; 982  : 
; 983  : 	_Myt& operator+=(difference_type _Off)
; 984  : 		{	// increment by integer
; 985  : 		current -= _Off;
; 986  : 		return (*this);
; 987  : 		}
; 988  : 
; 989  : 	_Myt operator+(difference_type _Off) const
; 990  : 		{	// return this + integer
; 991  : 		return (_Myt(current - _Off));
; 992  : 		}
; 993  : 
; 994  : 	_Myt& operator-=(difference_type _Off)
; 995  : 		{	// decrement by integer
; 996  : 		current += _Off;
; 997  : 		return (*this);
; 998  : 		}
; 999  : 
; 1000 : 	_Myt operator-(difference_type _Off) const
; 1001 : 		{	// return this - integer
; 1002 : 		return (_Myt(current + _Off));
; 1003 : 		}
; 1004 : 
; 1005 : 	reference operator[](difference_type _Off) const
; 1006 : 		{	// subscript
; 1007 : 		return (*(*this + _Off));
; 1008 : 		}
; 1009 : 
; 1010 : 	template<class _RanIt2,
; 1011 : 		class _Base2>
; 1012 : 		bool _Less(const _Revranit<_RanIt2, _Base2>& _Right) const
; 1013 : 		{	// test if this < _Right
; 1014 : 		return (_Right.base() < current);
; 1015 : 		}
; 1016 : 
; 1017 : 	difference_type operator-(const _Myt& _Right) const
; 1018 : 		{	// return difference of iterators
; 1019 : 		return (_Right.base() - current);
; 1020 : 		}
; 1021 : 
; 1022 : protected:
; 1023 : 	_RanIt current;	// the wrapped iterator
; 1024 : 	};
; 1025 : 
; 1026 : 		// _Revranit TEMPLATE OPERATORS
; 1027 : template<class _RanIt,
; 1028 : 	class _Base,
; 1029 : 	class _Diff> inline
; 1030 : 	_Revranit<_RanIt, _Base>
; 1031 : 		operator+(_Diff _Off,
; 1032 : 		const _Revranit<_RanIt, _Base>& _Right)
; 1033 : 	{	// return reverse_iterator + integer
; 1034 : 	return (_Right + _Off);
; 1035 : 	}
; 1036 : 
; 1037 : template<class _RanIt1,
; 1038 : 	class _Base1,
; 1039 : 	class _RanIt2,
; 1040 : 	class _Base2>
; 1041 : 	auto inline operator-(
; 1042 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1043 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1044 : 			-> decltype(_Right.base() - _Left.base())
; 1045 : 	{	// return difference of reverse_iterators
; 1046 : 	return (_Right.base() - _Left.base());
; 1047 : 	}
; 1048 : 
; 1049 : template<class _RanIt1,
; 1050 : 	class _Base1,
; 1051 : 	class _RanIt2,
; 1052 : 	class _Base2> inline
; 1053 : 	bool operator==(
; 1054 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1055 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1056 : 	{	// test for reverse_iterator equality
; 1057 : 	return (_Left._Equal(_Right));
; 1058 : 	}
; 1059 : 
; 1060 : template<class _RanIt1,
; 1061 : 	class _Base1,
; 1062 : 	class _RanIt2,
; 1063 : 	class _Base2> inline
; 1064 : 	bool operator!=(
; 1065 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1066 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1067 : 	{	// test for reverse_iterator inequality
; 1068 : 	return (!(_Left == _Right));
; 1069 : 	}
; 1070 : 
; 1071 : template<class _RanIt1,
; 1072 : 	class _Base1,
; 1073 : 	class _RanIt2,
; 1074 : 	class _Base2> inline
; 1075 : 	bool operator<(
; 1076 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1077 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1078 : 	{	// test for reverse_iterator < reverse_iterator
; 1079 : 	return (_Left._Less(_Right));
; 1080 : 	}
; 1081 : 
; 1082 : template<class _RanIt1,
; 1083 : 	class _Base1,
; 1084 : 	class _RanIt2,
; 1085 : 	class _Base2> inline
; 1086 : 	bool operator>(
; 1087 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1088 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1089 : 	{	// test for reverse_iterator > reverse_iterator
; 1090 : 	return (_Right < _Left);
; 1091 : 	}
; 1092 : 
; 1093 : template<class _RanIt1,
; 1094 : 	class _Base1,
; 1095 : 	class _RanIt2,
; 1096 : 	class _Base2> inline
; 1097 : 	bool operator<=(
; 1098 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1099 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1100 : 	{	// test for reverse_iterator <= reverse_iterator
; 1101 : 	return (!(_Right < _Left));
; 1102 : 	}
; 1103 : 
; 1104 : template<class _RanIt1,
; 1105 : 	class _Base1,
; 1106 : 	class _RanIt2,
; 1107 : 	class _Base2> inline
; 1108 : 	bool operator>=(
; 1109 : 		const _Revranit<_RanIt1, _Base1>& _Left,
; 1110 : 		const _Revranit<_RanIt2, _Base2>& _Right)
; 1111 : 	{	// test for reverse_iterator >= reverse_iterator
; 1112 : 	return (!(_Left < _Right));
; 1113 : 	}
; 1114 : 
; 1115 : 		// TEMPLATE CLASS reverse_iterator
; 1116 : template<class _RanIt>
; 1117 : 	class reverse_iterator
; 1118 : 		: public _Revranit<_RanIt, iterator<
; 1119 : 			typename iterator_traits<_RanIt>::iterator_category,
; 1120 : 			typename iterator_traits<_RanIt>::value_type,
; 1121 : 			typename iterator_traits<_RanIt>::difference_type,
; 1122 : 			typename iterator_traits<_RanIt>::pointer,
; 1123 : 			typename iterator_traits<_RanIt>::reference> >
; 1124 : 	{	// wrap iterator to run it backwards
; 1125 : 	typedef reverse_iterator<_RanIt> _Myt;
; 1126 : 	typedef _Revranit<_RanIt, iterator<
; 1127 : 		typename iterator_traits<_RanIt>::iterator_category,
; 1128 : 		typename iterator_traits<_RanIt>::value_type,
; 1129 : 		typename iterator_traits<_RanIt>::difference_type,
; 1130 : 		typename iterator_traits<_RanIt>::pointer,
; 1131 : 		typename iterator_traits<_RanIt>::reference> > _Mybase;
; 1132 : 
; 1133 : public:
; 1134 :  	typedef typename iterator_traits<_RanIt>::difference_type difference_type;
; 1135 : 	typedef typename iterator_traits<_RanIt>::pointer pointer;
; 1136 : 	typedef typename iterator_traits<_RanIt>::reference reference;
; 1137 : 	typedef _RanIt iterator_type;
; 1138 : 
; 1139 : 	reverse_iterator()
; 1140 : 		{	// construct with default wrapped iterator
; 1141 : 		}
; 1142 : 
; 1143 : 	explicit reverse_iterator(_RanIt _Right)
; 1144 : 		: _Mybase(_Right)
; 1145 : 		{	// construct wrapped iterator from _Right
; 1146 : 		}
; 1147 : 
; 1148 : 	template<class _Other>
; 1149 : 		reverse_iterator(const reverse_iterator<_Other>& _Right)
; 1150 : 		: _Mybase(_Right.base())
; 1151 : 		{	// initialize with compatible base
; 1152 : 		}
; 1153 : 
; 1154 : 	template<class _Other>
; 1155 : 		_Myt& operator=(const reverse_iterator<_Other>& _Right)
; 1156 : 		{	// assign with compatible base
; 1157 : 		this->current = _Right.base();
; 1158 : 		return (*this);
; 1159 : 		}
; 1160 : 
; 1161 : 	reverse_iterator(_Mybase _Right)
; 1162 : 		: _Mybase(_Right)
; 1163 : 		{	// construct wrapped iterator from base object
; 1164 : 		}
; 1165 : 
; 1166 : 	_Myt& operator++()
; 1167 : 		{	// preincrement
; 1168 : 		++*((_Mybase *)this);
; 1169 : 		return (*this);
; 1170 : 		}
; 1171 : 
; 1172 : 	_Myt operator++(int)
; 1173 : 		{	// postincrement
; 1174 : 		_Myt _Tmp = *this;
; 1175 : 		++*this;
; 1176 : 		return (_Tmp);
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& operator--()
; 1180 : 		{	// predecrement
; 1181 : 		--*((_Mybase *)this);
; 1182 : 		return (*this);
; 1183 : 		}
; 1184 : 
; 1185 : 	_Myt operator--(int)
; 1186 : 		{	// postdecrement
; 1187 : 		_Myt _Tmp = *this;
; 1188 : 		--*this;
; 1189 : 		return (_Tmp);
; 1190 : 		}
; 1191 : 
; 1192 : 	_Myt& operator+=(difference_type _Off)
; 1193 : 		{	// increment by integer
; 1194 : 		*((_Mybase *)this) += _Off;
; 1195 : 		return (*this);
; 1196 : 		}
; 1197 : 
; 1198 : 	_Myt operator+(difference_type _Off) const
; 1199 : 		{	// return this + integer
; 1200 : 		_Myt _Tmp = *this;
; 1201 : 		return (_Tmp += _Off);
; 1202 : 		}
; 1203 : 
; 1204 : 	_Myt& operator-=(difference_type _Off)
; 1205 : 		{	// decrement by integer
; 1206 : 		*((_Mybase *)this) -= _Off;
; 1207 : 		return (*this);
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt operator-(difference_type _Off) const
; 1211 : 		{	// return this - integer
; 1212 : 		_Myt _Tmp = *this;
; 1213 : 		return (_Tmp -= _Off);
; 1214 : 		}
; 1215 : 	};
; 1216 : 
; 1217 : template<class _RanIt>
; 1218 : 	struct _Is_checked_helper<reverse_iterator<_RanIt> >
; 1219 : 		: public _Is_checked_helper<_RanIt>
; 1220 : 	{	// mark reverse_iterator as checked if its wrapped iterator is checked
; 1221 : 	};
; 1222 : 
; 1223 : 		// reverse_iterator TEMPLATE OPERATORS
; 1224 : template<class _RanIt,
; 1225 : 	class _Diff> inline
; 1226 : 	reverse_iterator<_RanIt> operator+(_Diff _Off,
; 1227 : 		const reverse_iterator<_RanIt>& _Right)
; 1228 : 	{	// return reverse_iterator + integer
; 1229 : 	return (_Right + _Off);
; 1230 : 	}
; 1231 : 
; 1232 : template<class _RanIt1,
; 1233 : 	class _RanIt2>
; 1234 : 	auto inline operator-(const reverse_iterator<_RanIt1>& _Left,
; 1235 : 		const reverse_iterator<_RanIt2>& _Right)
; 1236 : 			-> decltype(_Right.base() - _Left.base())
; 1237 : 	{	// return difference of reverse_iterators
; 1238 : 	return (_Right.base() - _Left.base());
; 1239 : 	}
; 1240 : 
; 1241 : template<class _RanIt1,
; 1242 : 	class _RanIt2> inline
; 1243 : 	bool operator==(const reverse_iterator<_RanIt1>& _Left,
; 1244 : 		const reverse_iterator<_RanIt2>& _Right)
; 1245 : 	{	// test for reverse_iterator equality
; 1246 : 	return (_Left._Equal(_Right));
; 1247 : 	}
; 1248 : 
; 1249 : template<class _RanIt1,
; 1250 : 	class _RanIt2> inline
; 1251 : 	bool operator!=(const reverse_iterator<_RanIt1>& _Left,
; 1252 : 		const reverse_iterator<_RanIt2>& _Right)
; 1253 : 	{	// test for reverse_iterator inequality
; 1254 : 	return (!(_Left == _Right));
; 1255 : 	}
; 1256 : 
; 1257 : template<class _RanIt1,
; 1258 : 	class _RanIt2> inline
; 1259 : 	bool operator<(const reverse_iterator<_RanIt1>& _Left,
; 1260 : 		const reverse_iterator<_RanIt2>& _Right)
; 1261 : 	{	// test for reverse_iterator < reverse_iterator
; 1262 : 	return (_Left._Less(_Right));
; 1263 : 	}
; 1264 : 
; 1265 : template<class _RanIt1,
; 1266 : 	class _RanIt2> inline
; 1267 : 	bool operator>(const reverse_iterator<_RanIt1>& _Left,
; 1268 : 		const reverse_iterator<_RanIt2>& _Right)
; 1269 : 	{	// test for reverse_iterator > reverse_iterator
; 1270 : 	return (_Right < _Left);
; 1271 : 	}
; 1272 : 
; 1273 : template<class _RanIt1,
; 1274 : 	class _RanIt2> inline
; 1275 : 	bool operator<=(const reverse_iterator<_RanIt1>& _Left,
; 1276 : 		const reverse_iterator<_RanIt2>& _Right)
; 1277 : 	{	// test for reverse_iterator <= reverse_iterator
; 1278 : 	return (!(_Right < _Left));
; 1279 : 	}
; 1280 : 
; 1281 : template<class _RanIt1,
; 1282 : 	class _RanIt2> inline
; 1283 : 	bool operator>=(const reverse_iterator<_RanIt1>& _Left,
; 1284 : 		const reverse_iterator<_RanIt2>& _Right)
; 1285 : 	{	// test for reverse_iterator >= reverse_iterator
; 1286 : 	return (!(_Left < _Right));
; 1287 : 	}
; 1288 : 
; 1289 : 		// TEMPLATE CLASS _Array_const_iterator
; 1290 : template<class _Ty,
; 1291 : 	size_t _Size>
; 1292 : 	class _Array_const_iterator
; 1293 : 		: public _Iterator012<random_access_iterator_tag,
; 1294 : 			_Ty,
; 1295 : 			ptrdiff_t,
; 1296 : 			const _Ty *,
; 1297 : 			const _Ty&,
; 1298 : 			_Iterator_base>
; 1299 : 	{	// iterator for nonmutable array
; 1300 : public:
; 1301 : 	typedef _Array_const_iterator<_Ty, _Size> _Myiter;
; 1302 : 	typedef random_access_iterator_tag iterator_category;
; 1303 : 
; 1304 : 	typedef _Ty value_type;
; 1305 : 	typedef size_t size_type;
; 1306 : 	typedef ptrdiff_t difference_type;
; 1307 : 	typedef const _Ty *pointer;
; 1308 : 	typedef const _Ty& reference;
; 1309 : 	enum {_EEN_SIZE = _Size};	// helper for expression evaluator
; 1310 : 	enum {_EEN_IDL =
; 1311 : 		_ITERATOR_DEBUG_LEVEL};	// helper for expression evaluator
; 1312 : 
; 1313 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 1314 : 	_Array_const_iterator()
; 1315 : 		{	// construct with null pointer
; 1316 : 		_Ptr = 0;
; 1317 : 		}
; 1318 : 
; 1319 : 	explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
; 1320 : 		{	// construct with pointer and offset
; 1321 : 		_Ptr = _Parg + _Off;
; 1322 : 		}
; 1323 : 
; 1324 : 	typedef pointer _Unchecked_type;
; 1325 : 
; 1326 : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 1327 : 		{	// reset from unchecked iterator
; 1328 : 		_Ptr = _Right;
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	_Unchecked_type _Unchecked() const
; 1333 : 		{	// make an unchecked iterator
; 1334 : 		return (_Ptr);
; 1335 : 		}
; 1336 : 
; 1337 : 	reference operator*() const
; 1338 : 		{	// return designated object
; 1339 : 		return (*_Ptr);
; 1340 : 		}
; 1341 : 
; 1342 : 	pointer operator->() const
; 1343 : 		{	// return pointer to class object
; 1344 : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 1345 : 		}
; 1346 : 
; 1347 : 	_Myiter& operator++()
; 1348 : 		{	// preincrement
; 1349 : 		++_Ptr;
; 1350 : 		return (*this);
; 1351 : 		}
; 1352 : 
; 1353 : 	_Myiter operator++(int)
; 1354 : 		{	// postincrement
; 1355 : 		_Myiter _Tmp = *this;
; 1356 : 		++*this;
; 1357 : 		return (_Tmp);
; 1358 : 		}
; 1359 : 
; 1360 : 	_Myiter& operator--()
; 1361 : 		{	// predecrement
; 1362 : 		--_Ptr;
; 1363 : 		return (*this);
; 1364 : 		}
; 1365 : 
; 1366 : 	_Myiter operator--(int)
; 1367 : 		{	// postdecrement
; 1368 : 		_Myiter _Tmp = *this;
; 1369 : 		--*this;
; 1370 : 		return (_Tmp);
; 1371 : 		}
; 1372 : 
; 1373 : 	_Myiter& operator+=(difference_type _Off)
; 1374 : 		{	// increment by integer
; 1375 : 		_Ptr += _Off;
; 1376 : 		return (*this);
; 1377 : 		}
; 1378 : 
; 1379 : 	_Myiter operator+(difference_type _Off) const
; 1380 : 		{	// return this + integer
; 1381 : 		_Myiter _Tmp = *this;
; 1382 : 		return (_Tmp += _Off);
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myiter& operator-=(difference_type _Off)
; 1386 : 		{	// decrement by integer
; 1387 : 		return (*this += -_Off);
; 1388 : 		}
; 1389 : 
; 1390 : 	_Myiter operator-(difference_type _Off) const
; 1391 : 		{	// return this - integer
; 1392 : 		_Myiter _Tmp = *this;
; 1393 : 		return (_Tmp -= _Off);
; 1394 : 		}
; 1395 : 
; 1396 : 	difference_type operator-(const _Myiter& _Right) const
; 1397 : 		{	// return difference of iterators
; 1398 : 		return (_Ptr - _Right._Ptr);
; 1399 : 		}
; 1400 : 
; 1401 : 	reference operator[](difference_type _Off) const
; 1402 : 		{	// subscript
; 1403 : 		return (*(*this + _Off));
; 1404 : 		}
; 1405 : 
; 1406 : 	bool operator==(const _Myiter& _Right) const
; 1407 : 		{	// test for iterator equality
; 1408 : 		return (_Ptr == _Right._Ptr);
; 1409 : 		}
; 1410 : 
; 1411 : 	bool operator!=(const _Myiter& _Right) const
; 1412 : 		{	// test for iterator inequality
; 1413 : 		return (!(*this == _Right));
; 1414 : 		}
; 1415 : 
; 1416 : 	bool operator<(const _Myiter& _Right) const
; 1417 : 		{	// test if this < _Right
; 1418 : 		return (_Ptr < _Right._Ptr);
; 1419 : 		}
; 1420 : 
; 1421 : 	bool operator>(const _Myiter& _Right) const
; 1422 : 		{	// test if this > _Right
; 1423 : 		return (_Right < *this);
; 1424 : 		}
; 1425 : 
; 1426 : 	bool operator<=(const _Myiter& _Right) const
; 1427 : 		{	// test if this <= _Right
; 1428 : 		return (!(_Right < *this));
; 1429 : 		}
; 1430 : 
; 1431 : 	bool operator>=(const _Myiter& _Right) const
; 1432 : 		{	// test if this >= _Right
; 1433 : 		return (!(*this < _Right));
; 1434 : 		}
; 1435 : 
; 1436 : 	pointer _Ptr;	// beginning of array
; 1437 : 
; 1438 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 1439 : 	_Array_const_iterator()
; 1440 : 		{	// construct with null pointer
; 1441 : 		_Ptr = 0;
; 1442 : 		_Idx = 0;
; 1443 : 		}
; 1444 : 
; 1445 : 	explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
; 1446 : 		{	// construct with pointer and offset
; 1447 : 		_Ptr = _Parg;
; 1448 : 		_Idx = _Off;
; 1449 : 		}
; 1450 : 
; 1451 : 	typedef pointer _Unchecked_type;
; 1452 : 
; 1453 : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 1454 : 		{	// reset from unchecked iterator
; 1455 : 		_Idx = _Right - _Ptr;
; 1456 : 		return (*this);
; 1457 : 		}
; 1458 : 
; 1459 : 	_Unchecked_type _Unchecked() const
; 1460 : 		{	// make an unchecked iterator
; 1461 : 		return (_Ptr + _Idx);
; 1462 : 		}
; 1463 : 
; 1464 : 	reference operator*() const
; 1465 : 		{	// return designated object
; 1466 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1467 : 		if (_Ptr == 0
; 1468 : 			|| _Size <= _Idx)
; 1469 : 			{	// report error
; 1470 : 			_DEBUG_ERROR("array iterator not dereferencable");
; 1471 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1472 : 			}
; 1473 : 
; 1474 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1475 : 		_SCL_SECURE_VALIDATE(_Ptr != 0);
; 1476 : 		_SCL_SECURE_VALIDATE_RANGE(_Idx < _Size);
; 1477 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1478 : 
; 1479 : 		_Analysis_assume_(_Ptr != 0);
; 1480 : 
; 1481 : 		return (_Ptr[_Idx]);
; 1482 : 		}
; 1483 : 
; 1484 : 	pointer operator->() const
; 1485 : 		{	// return pointer to class object
; 1486 : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 1487 : 		}
; 1488 : 
; 1489 : 	_Myiter& operator++()
; 1490 : 		{	// preincrement
; 1491 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1492 : 		if (_Ptr == 0
; 1493 : 			|| _Size <= _Idx)
; 1494 : 			{	// report error
; 1495 : 			_DEBUG_ERROR("array iterator not incrementable");
; 1496 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1497 : 			}
; 1498 : 
; 1499 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1500 : 		_SCL_SECURE_VALIDATE(_Ptr != 0);
; 1501 : 		_SCL_SECURE_VALIDATE_RANGE(_Idx < _Size);
; 1502 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1503 : 
; 1504 : 		++_Idx;
; 1505 : 		return (*this);
; 1506 : 		}
; 1507 : 
; 1508 : 	_Myiter operator++(int)
; 1509 : 		{	// postincrement
; 1510 : 		_Myiter _Tmp = *this;
; 1511 : 		++*this;
; 1512 : 		return (_Tmp);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myiter& operator--()
; 1516 : 		{	// predecrement
; 1517 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1518 : 		if (_Ptr == 0
; 1519 : 			|| _Idx <= 0)
; 1520 : 			{	// report error
; 1521 : 			_DEBUG_ERROR("array iterator not decrementable");
; 1522 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1523 : 			}
; 1524 : 
; 1525 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1526 : 		_SCL_SECURE_VALIDATE(_Ptr != 0);
; 1527 : 		_SCL_SECURE_VALIDATE_RANGE(0 < _Idx);
; 1528 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1529 : 
; 1530 : 		--_Idx;
; 1531 : 		return (*this);
; 1532 : 		}
; 1533 : 
; 1534 : 	_Myiter operator--(int)
; 1535 : 		{	// postdecrement
; 1536 : 		_Myiter _Tmp = *this;
; 1537 : 		--*this;
; 1538 : 		return (_Tmp);
; 1539 : 		}
; 1540 : 
; 1541 : 	_Myiter& operator+=(difference_type _Off)
; 1542 : 		{	// increment by integer
; 1543 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1544 : 		if (_Size < _Idx + _Off)
; 1545 : 			{	// report error
; 1546 : 			_DEBUG_ERROR("array iterator + offset out of range");
; 1547 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1548 : 			}
; 1549 : 
; 1550 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1551 : 		_SCL_SECURE_VALIDATE_RANGE(_Idx + _Off <= _Size);
; 1552 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1553 : 
; 1554 : 		_Idx += _Off;
; 1555 : 		return (*this);
; 1556 : 		}
; 1557 : 
; 1558 : 	_Myiter operator+(difference_type _Off) const
; 1559 : 		{	// return this + integer
; 1560 : 		_Myiter _Tmp = *this;
; 1561 : 		return (_Tmp += _Off);
; 1562 : 		}
; 1563 : 
; 1564 : 	_Myiter& operator-=(difference_type _Off)
; 1565 : 		{	// decrement by integer
; 1566 : 		return (*this += -_Off);
; 1567 : 		}
; 1568 : 
; 1569 : 	_Myiter operator-(difference_type _Off) const
; 1570 : 		{	// return this - integer
; 1571 : 		_Myiter _Tmp = *this;
; 1572 : 		return (_Tmp -= _Off);
; 1573 : 		}
; 1574 : 
; 1575 : 	difference_type operator-(const _Myiter& _Right) const
; 1576 : 		{	// return difference of iterators
; 1577 : 		_Compat(_Right);
; 1578 : 		return (_Idx < _Right._Idx
; 1579 : 			? -(difference_type)(_Right._Idx - _Idx)
; 1580 : 			: (difference_type)_Idx - _Right._Idx);
; 1581 : 		}
; 1582 : 
; 1583 : 	reference operator[](difference_type _Off) const
; 1584 : 		{	// subscript
; 1585 : 		return (*(*this + _Off));
; 1586 : 		}
; 1587 : 
; 1588 : 	bool operator==(const _Myiter& _Right) const
; 1589 : 		{	// test for iterator equality
; 1590 : 		_Compat(_Right);
; 1591 : 		return (_Idx == _Right._Idx);
; 1592 : 		}
; 1593 : 
; 1594 : 	bool operator!=(const _Myiter& _Right) const
; 1595 : 		{	// test for iterator inequality
; 1596 : 		return (!(*this == _Right));
; 1597 : 		}
; 1598 : 
; 1599 : 	bool operator<(const _Myiter& _Right) const
; 1600 : 		{	// test if this < _Right
; 1601 : 		_Compat(_Right);
; 1602 : 		return (_Idx < _Right._Idx);
; 1603 : 		}
; 1604 : 
; 1605 : 	bool operator>(const _Myiter& _Right) const
; 1606 : 		{	// test if this > _Right
; 1607 : 		return (_Right < *this);
; 1608 : 		}
; 1609 : 
; 1610 : 	bool operator<=(const _Myiter& _Right) const
; 1611 : 		{	// test if this <= _Right
; 1612 : 		return (!(_Right < *this));
; 1613 : 		}
; 1614 : 
; 1615 : 	bool operator>=(const _Myiter& _Right) const
; 1616 : 		{	// test if this >= _Right
; 1617 : 		return (!(*this < _Right));
; 1618 : 		}
; 1619 : 
; 1620 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1621 : 	void _Compat(const _Myiter& _Right) const
; 1622 : 		{	// test for compatible iterator pair
; 1623 : 		if (_Ptr != _Right._Ptr)
; 1624 : 			{	// report error
; 1625 : 			_DEBUG_ERROR("array iterators incompatible");
; 1626 : 			_SCL_SECURE_INVALID_ARGUMENT;
; 1627 : 			}
; 1628 : 		}
; 1629 : 
; 1630 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1631 : 	void _Compat(const _Myiter& _Right) const
; 1632 : 		{	// test for compatible iterator pair
; 1633 : 		_SCL_SECURE_VALIDATE_RANGE(_Ptr == _Right._Ptr);
; 1634 : 		}
; 1635 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1636 : 
; 1637 : 	pointer _Ptr;	// beginning of array
; 1638 : 	size_t _Idx;	// offset into array
; 1639 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 1640 : 	};
; 1641 : 
; 1642 : template<class _Ty,
; 1643 : 	size_t _Size> inline
; 1644 : 	typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type
; 1645 : 		_Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)
; 1646 : 	{	// convert to unchecked
; 1647 : 	return (_Iter._Unchecked());
; 1648 : 	}
; 1649 : 
; 1650 : template<class _Ty,
; 1651 : 	size_t _Size> inline
; 1652 : 	_Array_const_iterator<_Ty, _Size>&
; 1653 : 		_Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
; 1654 : 			typename _Array_const_iterator<_Ty, _Size>
; 1655 : 				::_Unchecked_type _Right)
; 1656 : 	{	// convert to checked
; 1657 : 	return (_Iter._Rechecked(_Right));
; 1658 : 	}
; 1659 : 
; 1660 : template<class _Ty,
; 1661 : 	size_t _Size> inline
; 1662 : 	_Array_const_iterator<_Ty, _Size> operator+(
; 1663 : 		typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,
; 1664 : 		_Array_const_iterator<_Ty, _Size> _Next)
; 1665 : 	{	// add offset to iterator
; 1666 : 	return (_Next += _Off);
; 1667 : 	}
; 1668 : 
; 1669 : 		// TEMPLATE CLASS _Array_iterator
; 1670 : template<class _Ty,
; 1671 : 	size_t _Size>
; 1672 : 	class _Array_iterator
; 1673 : 		: public _Array_const_iterator<_Ty, _Size>
; 1674 : 	{	// iterator for mutable array
; 1675 : public:
; 1676 : 	typedef _Array_iterator<_Ty, _Size> _Myiter;
; 1677 : 	typedef _Array_const_iterator<_Ty, _Size> _Mybase;
; 1678 : 	typedef random_access_iterator_tag iterator_category;
; 1679 : 
; 1680 : 	typedef _Ty value_type;
; 1681 : 	typedef size_t size_type;
; 1682 : 	typedef ptrdiff_t difference_type;
; 1683 : 	typedef _Ty *pointer;
; 1684 : 	typedef _Ty& reference;
; 1685 : 
; 1686 : 	_Array_iterator()
; 1687 : 		{	// construct with null pointer
; 1688 : 		}
; 1689 : 
; 1690 : 	explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
; 1691 : 		: _Mybase(_Parg, _Off)
; 1692 : 		{	// construct with pointer and offset
; 1693 : 		}
; 1694 : 	enum {_EEN_SIZE = _Size};	// helper for expression evaluator
; 1695 : 	enum {_EEN_IDL =
; 1696 : 		_ITERATOR_DEBUG_LEVEL};	// helper for expression evaluator
; 1697 : 
; 1698 : 	typedef pointer _Unchecked_type;
; 1699 : 
; 1700 : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 1701 : 		{	// reset from unchecked iterator
; 1702 : 		((_Mybase *)this)->_Rechecked(_Right);
; 1703 : 		return (*this);
; 1704 : 		}
; 1705 : 
; 1706 : 	_Unchecked_type _Unchecked() const
; 1707 : 		{	// make an unchecked iterator
; 1708 : 		return ((pointer)((_Mybase *)this)->_Unchecked());
; 1709 : 		}
; 1710 : 
; 1711 : 	reference operator*() const
; 1712 : 		{	// return designated object
; 1713 : 		return ((reference)**(_Mybase *)this);
; 1714 : 		}
; 1715 : 
; 1716 : 	pointer operator->() const
; 1717 : 		{	// return pointer to class object
; 1718 : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 1719 : 		}
; 1720 : 
; 1721 : 	_Myiter& operator++()
; 1722 : 		{	// preincrement
; 1723 : 		++*(_Mybase *)this;
; 1724 : 		return (*this);
; 1725 : 		}
; 1726 : 
; 1727 : 	_Myiter operator++(int)
; 1728 : 		{	// postincrement
; 1729 : 		_Myiter _Tmp = *this;
; 1730 : 		++*this;
; 1731 : 		return (_Tmp);
; 1732 : 		}
; 1733 : 
; 1734 : 	_Myiter& operator--()
; 1735 : 		{	// predecrement
; 1736 : 		--*(_Mybase *)this;
; 1737 : 		return (*this);
; 1738 : 		}
; 1739 : 
; 1740 : 	_Myiter operator--(int)
; 1741 : 		{	// postdecrement
; 1742 : 		_Myiter _Tmp = *this;
; 1743 : 		--*this;
; 1744 : 		return (_Tmp);
; 1745 : 		}
; 1746 : 
; 1747 : 	_Myiter& operator+=(difference_type _Off)
; 1748 : 		{	// increment by integer
; 1749 : 		*(_Mybase *)this += _Off;
; 1750 : 		return (*this);
; 1751 : 		}
; 1752 : 
; 1753 : 	_Myiter operator+(difference_type _Off) const
; 1754 : 		{	// return this + integer
; 1755 : 		_Myiter _Tmp = *this;
; 1756 : 		return (_Tmp += _Off);
; 1757 : 		}
; 1758 : 
; 1759 : 	_Myiter& operator-=(difference_type _Off)
; 1760 : 		{	// decrement by integer
; 1761 : 		return (*this += -_Off);
; 1762 : 		}
; 1763 : 
; 1764 : 	_Myiter operator-(difference_type _Off) const
; 1765 : 		{	// return this - integer
; 1766 : 		_Myiter _Tmp = *this;
; 1767 : 		return (_Tmp -= _Off);
; 1768 : 		}
; 1769 : 
; 1770 : 	difference_type operator-(const _Mybase& _Right) const
; 1771 : 		{	// return difference of iterators
; 1772 : 		return (*(_Mybase *)this - _Right);
; 1773 : 		}
; 1774 : 
; 1775 : 	reference operator[](difference_type _Off) const
; 1776 : 		{	// subscript
; 1777 : 		return (*(*this + _Off));
; 1778 : 		}
; 1779 : 	};
; 1780 : 
; 1781 : template<class _Ty,
; 1782 : 	size_t _Size> inline
; 1783 : 	typename _Array_iterator<_Ty, _Size>::_Unchecked_type
; 1784 : 		_Unchecked(_Array_iterator<_Ty, _Size> _Iter)
; 1785 : 	{	// convert to unchecked
; 1786 : 	return (_Iter._Unchecked());
; 1787 : 	}
; 1788 : 
; 1789 : template<class _Ty,
; 1790 : 	size_t _Size> inline
; 1791 : 	_Array_iterator<_Ty, _Size>&
; 1792 : 		_Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
; 1793 : 			typename _Array_iterator<_Ty, _Size>
; 1794 : 				::_Unchecked_type _Right)
; 1795 : 	{	// convert to checked
; 1796 : 	return (_Iter._Rechecked(_Right));
; 1797 : 	}
; 1798 : 
; 1799 : template<class _Ty,
; 1800 : 	size_t _Size> inline
; 1801 : 	_Array_iterator<_Ty, _Size> operator+(
; 1802 : 		typename _Array_iterator<_Ty, _Size>::difference_type _Off,
; 1803 : 		_Array_iterator<_Ty, _Size> _Next)
; 1804 : 	{	// add offset to iterator
; 1805 : 	return (_Next += _Off);
; 1806 : 	}
; 1807 : 
; 1808 : 		// TEMPLATE CLASS move_iterator
; 1809 : template<class _RanIt>
; 1810 : 	class move_iterator
; 1811 : 	{	// wrap iterator to move rvalues
; 1812 : public:
; 1813 : 	typedef move_iterator<_RanIt> _Myt;
; 1814 :  	typedef typename iterator_traits<_RanIt>::iterator_category
; 1815 : 		iterator_category;
; 1816 :  	typedef typename iterator_traits<_RanIt>::value_type
; 1817 : 		value_type;
; 1818 :  	typedef typename iterator_traits<_RanIt>::difference_type
; 1819 : 		difference_type;
; 1820 : 	typedef _RanIt pointer;
; 1821 : 	typedef value_type&& reference;
; 1822 : 	typedef _RanIt iterator_type;
; 1823 : 
; 1824 : 	move_iterator()
; 1825 : 		{	// construct with default wrapped iterator
; 1826 : 		}
; 1827 : 
; 1828 : 	explicit move_iterator(iterator_type _Right)
; 1829 : 		: current(_Right)
; 1830 : 		{	// construct wrapped iterator from _Right
; 1831 : 		}
; 1832 : 
; 1833 : 	template<class _RanIt2>
; 1834 : 		move_iterator(const move_iterator<_RanIt2>& _Right)
; 1835 : 		: current(_Right.base())
; 1836 : 		{	// initialize with compatible base
; 1837 : 		}
; 1838 : 
; 1839 : 	template<class _RanIt2>
; 1840 : 		_Myt& operator=(const move_iterator<_RanIt2>& _Right)
; 1841 : 		{	// assign with compatible base
; 1842 : 		current = _Right.base();
; 1843 : 		return (*this);
; 1844 : 		}
; 1845 : 
; 1846 : 	_RanIt base() const
; 1847 : 		{	// return wrapped iterator
; 1848 : 		return (current);
; 1849 : 		}
; 1850 : 
; 1851 : 	reference operator*() const
; 1852 : 		{	// return designated value
; 1853 : 		return (_STD move(*current));
; 1854 : 		}
; 1855 : 
; 1856 : 	pointer operator->() const
; 1857 : 		{	// return pointer to class object
; 1858 : 		return (current);
; 1859 : 		}
; 1860 : 
; 1861 : 	_Myt& operator++()
; 1862 : 		{	// preincrement
; 1863 : 		++current;
; 1864 : 		return (*this);
; 1865 : 		}
; 1866 : 
; 1867 : 	_Myt operator++(int)
; 1868 : 		{	// postincrement
; 1869 : 		_Myt _Tmp = *this;
; 1870 : 		++current;
; 1871 : 		return (_Tmp);
; 1872 : 		}
; 1873 : 
; 1874 : 	_Myt& operator--()
; 1875 : 		{	// predecrement
; 1876 : 		--current;
; 1877 : 		return (*this);
; 1878 : 		}
; 1879 : 
; 1880 : 	_Myt operator--(int)
; 1881 : 		{	// postdecrement
; 1882 : 		_Myt _Tmp = *this;
; 1883 : 		--current;
; 1884 : 		return (_Tmp);
; 1885 : 		}
; 1886 : 
; 1887 : 	template<class _RanIt2>
; 1888 : 		bool _Equal(const move_iterator<_RanIt2>& _Right) const
; 1889 : 		{	// test for iterator equality
; 1890 : 		return (current == _Right.base());
; 1891 : 		}
; 1892 : 
; 1893 : // N.B. functions valid for random-access iterators only beyond this point
; 1894 : 
; 1895 : 	_Myt& operator+=(difference_type _Off)
; 1896 : 		{	// increment by integer
; 1897 : 		current += _Off;
; 1898 : 		return (*this);
; 1899 : 		}
; 1900 : 
; 1901 : 	_Myt operator+(difference_type _Off) const
; 1902 : 		{	// return this + integer
; 1903 : 		return (_Myt(current + _Off));
; 1904 : 		}
; 1905 : 
; 1906 : 	_Myt& operator-=(difference_type _Off)
; 1907 : 		{	// decrement by integer
; 1908 : 		current -= _Off;
; 1909 : 		return (*this);
; 1910 : 		}
; 1911 : 
; 1912 : 	_Myt operator-(difference_type _Off) const
; 1913 : 		{	// return this - integer
; 1914 : 		return (_Myt(current - _Off));
; 1915 : 		}
; 1916 : 
; 1917 : 	reference operator[](difference_type _Off) const
; 1918 : 		{	// subscript
; 1919 : 		return (_STD move(current[_Off]));
; 1920 : 		}
; 1921 : 
; 1922 : 	template<class _RanIt2>
; 1923 : 		bool _Less(const move_iterator<_RanIt2>& _Right) const
; 1924 : 		{	// test if this < _Right
; 1925 : 		return (current < _Right.base());
; 1926 : 		}
; 1927 : 
; 1928 : 	difference_type operator-(const _Myt& _Right) const
; 1929 : 		{	// return difference of iterators
; 1930 : 		return (current - _Right.base());
; 1931 : 		}
; 1932 : 
; 1933 : protected:
; 1934 : 	iterator_type current;	// the wrapped iterator
; 1935 : 	};
; 1936 : 
; 1937 : template<class _RanIt>
; 1938 : 	struct _Is_checked_helper<move_iterator<_RanIt> >
; 1939 : 		: public _Is_checked_helper<_RanIt>
; 1940 : 	{	// mark move_iterator as checked if its wrapped iterator is checked
; 1941 : 	};
; 1942 : 
; 1943 : 		// move_iterator TEMPLATE OPERATORS
; 1944 : template<class _RanIt,
; 1945 : 	class _Diff> inline
; 1946 : 	move_iterator<_RanIt>
; 1947 : 		operator+(_Diff _Off,
; 1948 : 		const move_iterator<_RanIt>& _Right)
; 1949 : 	{	// return move_iterator + integer
; 1950 : 	return (_Right + _Off);
; 1951 : 	}
; 1952 : 
; 1953 : template<class _RanIt1,
; 1954 : 	class _RanIt2>
; 1955 : 	auto inline operator-(
; 1956 : 		move_iterator<_RanIt1>& _Left,
; 1957 : 		const move_iterator<_RanIt2>& _Right)
; 1958 : 			-> decltype(_Left.base() - _Right.base())
; 1959 : 	{	// test for move_iterator equality
; 1960 : 	return (_Left.base() - _Right.base());
; 1961 : 	}
; 1962 : 
; 1963 : template<class _RanIt1,
; 1964 : 	class _RanIt2> inline
; 1965 : 	bool operator==(
; 1966 : 		const move_iterator<_RanIt1>& _Left,
; 1967 : 		const move_iterator<_RanIt2>& _Right)
; 1968 : 	{	// test for move_iterator equality
; 1969 : 	return (_Left._Equal(_Right));
; 1970 : 	}
; 1971 : 
; 1972 : template<class _RanIt1,
; 1973 : 	class _RanIt2> inline
; 1974 : 	bool operator!=(
; 1975 : 		const move_iterator<_RanIt1>& _Left,
; 1976 : 		const move_iterator<_RanIt2>& _Right)
; 1977 : 	{	// test for move_iterator inequality
; 1978 : 	return (!(_Left == _Right));
; 1979 : 	}
; 1980 : 
; 1981 : template<class _RanIt1,
; 1982 : 	class _RanIt2> inline
; 1983 : 	bool operator<(
; 1984 : 		const move_iterator<_RanIt1>& _Left,
; 1985 : 		const move_iterator<_RanIt2>& _Right)
; 1986 : 	{	// test for move_iterator < move_iterator
; 1987 : 	return (_Left._Less(_Right));
; 1988 : 	}
; 1989 : 
; 1990 : template<class _RanIt1,
; 1991 : 	class _RanIt2> inline
; 1992 : 	bool operator>(
; 1993 : 		const move_iterator<_RanIt1>& _Left,
; 1994 : 		const move_iterator<_RanIt2>& _Right)
; 1995 : 	{	// test for move_iterator > move_iterator
; 1996 : 	return (_Right < _Left);
; 1997 : 	}
; 1998 : 
; 1999 : template<class _RanIt1,
; 2000 : 	class _RanIt2> inline
; 2001 : 	bool operator<=(
; 2002 : 		const move_iterator<_RanIt1>& _Left,
; 2003 : 		const move_iterator<_RanIt2>& _Right)
; 2004 : 	{	// test for move_iterator <= move_iterator
; 2005 : 	return (!(_Right < _Left));
; 2006 : 	}
; 2007 : 
; 2008 : template<class _RanIt1,
; 2009 : 	class _RanIt2> inline
; 2010 : 	bool operator>=(
; 2011 : 		const move_iterator<_RanIt1>& _Left,
; 2012 : 		const move_iterator<_RanIt2>& _Right)
; 2013 : 	{	// test for move_iterator >= move_iterator
; 2014 : 	return (!(_Left < _Right));
; 2015 : 	}
; 2016 : 
; 2017 : 		// TEMPLATE FUNCTION make_move_iterator
; 2018 : template<class _RanIt> inline
; 2019 : 	move_iterator<_RanIt> make_move_iterator(_RanIt _Iter)
; 2020 : 	{	// make move_iterator from iterator
; 2021 : 	return (move_iterator<_RanIt>(_Iter));
; 2022 : 	}
; 2023 : 
; 2024 : 		//	ALGORITHM STUFF (from <algorithm>)
; 2025 : 		// TEMPLATE FUNCTION max
; 2026 : template<class _Ty> inline
; 2027 : 
; 2028 : 	_Post_equal_to_(_Left < _Right ? _Right : _Left)
; 2029 : 
; 2030 : 	const _Ty& (max)(const _Ty& _Left, const _Ty& _Right)
; 2031 : 	{	// return larger of _Left and _Right
; 2032 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);
; 2033 : 	}
; 2034 : 
; 2035 : 		// TEMPLATE FUNCTION max WITH PRED
; 2036 : template<class _Ty,
; 2037 : 	class _Pr> inline
; 2038 : 	const _Ty& (max)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
; 2039 : 	{	// return larger of _Left and _Right using _Pred
; 2040 : 	return (_DEBUG_LT_PRED(_Pred, _Left, _Right) ? _Right : _Left);
; 2041 : 	}
; 2042 : 
; 2043 : 		// TEMPLATE FUNCTION min
; 2044 : template<class _Ty> inline
; 2045 : 
; 2046 : 	_Post_equal_to_(_Right < _Left ? _Right : _Left)
; 2047 : 
; 2048 : 	const _Ty& (min)(const _Ty& _Left, const _Ty& _Right)
; 2049 : 	{	// return smaller of _Left and _Right
; 2050 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);
; 2051 : 	}
; 2052 : 
; 2053 : 		// TEMPLATE FUNCTION min WITH PRED
; 2054 : template<class _Ty,
; 2055 : 	class _Pr> inline
; 2056 : 	const _Ty& (min)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
; 2057 : 	{	// return smaller of _Left and _Right using _Pred
; 2058 : 	return (_DEBUG_LT_PRED(_Pred, _Right, _Left) ? _Right : _Left);
; 2059 : 	}
; 2060 : 
; 2061 : 		// TEMPLATE FUNCTION minmax
; 2062 : template<class _Ty> inline
; 2063 : 	pair<const _Ty&, const _Ty&>
; 2064 : 		minmax(const _Ty& _Left, const _Ty& _Right)
; 2065 : 	{	// return pair(leftmost/smaller, rightmost/larger) of _Left and _Right
; 2066 : 	return (_Right < _Left
; 2067 : 		? pair<const _Ty&, const _Ty&>(_Right, _Left)
; 2068 : 		: pair<const _Ty&, const _Ty&>(_Left, _Right));
; 2069 : 	}
; 2070 : 
; 2071 : 		// TEMPLATE FUNCTION minmax WITH PRED
; 2072 : template<class _Ty,
; 2073 : 	class _Pr> inline
; 2074 : 	pair<const _Ty&, const _Ty&>
; 2075 : 		minmax(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
; 2076 : 	{	// return pair(leftmost/smaller, rightmost/larger) of _Left and _Right
; 2077 : 	return (_Pred(_Right, _Left)
; 2078 : 		? pair<const _Ty&, const _Ty&>(_Right, _Left)
; 2079 : 		: pair<const _Ty&, const _Ty&>(_Left, _Right));
; 2080 : 	}
; 2081 : 
; 2082 : 		// TEMPLATE FUNCTION copy
; 2083 : template<class _InIt,
; 2084 : 	class _OutIt> inline
; 2085 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2086 : 		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
; 2087 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators
; 2088 : 	for (; _First != _Last; ++_Dest, ++_First)
; 2089 : 		*_Dest = *_First;
; 2090 : 	return (_Dest);
; 2091 : 	}
; 2092 : 
; 2093 : template<class _InIt,
; 2094 : 	class _OutIt> inline
; 2095 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2096 : 		_OutIt _Dest, _Scalar_ptr_iterator_tag)
; 2097 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars
; 2098 : 	ptrdiff_t _Count = _Last - _First;
; 2099 : 	_CSTD memmove(&*_Dest, &*_First,
; 2100 : 		_Count * sizeof (*_First));
; 2101 : 	return (_Dest + _Count);
; 2102 : 	}
; 2103 : 
; 2104 : template<class _InIt,
; 2105 : 	class _OutIt> inline
; 2106 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2107 : 		_OutIt _Dest)
; 2108 : 	{	// copy [_First, _Last) to [_Dest, ...)
; 2109 : 	return (_Copy_impl(_First, _Last,
; 2110 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2111 : 	}
; 2112 : 
; 2113 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2114 : template<class _InIt,
; 2115 : 	class _OutIt> inline
; 2116 : 	_OutIt copy(_InIt _First, _InIt _Last,
; 2117 : 		_OutIt _Dest)
; 2118 : 	{	// copy [_First, _Last) to [_Dest, ...)
; 2119 : 	return (_Rechecked(_Dest,
; 2120 : 		_Copy_impl(_Unchecked(_First), _Unchecked(_Last),
; 2121 : 			_Unchecked(_Dest))));
; 2122 : 	}
; 2123 : 
; 2124 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2125 : template<class _InIt,
; 2126 : 	class _OutIt> inline
; 2127 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2128 : 		_OutIt _Dest, input_iterator_tag, output_iterator_tag)
; 2129 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators
; 2130 : 	return (_Copy_impl(_First, _Last,
; 2131 : 		_Dest));
; 2132 : 	}
; 2133 : 
; 2134 : template<class _InIt,
; 2135 : 	class _OutIt> inline
; 2136 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2137 : 		_OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
; 2138 : 	{	// copy [_First, _Last) to [_Dest, ...), random-access iterators
; 2139 : 	_OutIt _Ans = _Dest + (_Last - _First);	// also checks range
; 2140 : 	_Copy_impl(_First, _Last,
; 2141 : 		_Unchecked(_Dest));
; 2142 : 	return (_Ans);
; 2143 : 	}
; 2144 : 
; 2145 : template<class _InIt,
; 2146 : 	class _OutIt> inline
; 2147 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2148 : 		_OutIt _Dest, true_type)
; 2149 : 	{	// copy [_First, _Last) to [_Dest, ...), checked dest
; 2150 : 	return (_Copy_impl(_First, _Last,
; 2151 : 		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
; 2152 : 	}
; 2153 : 
; 2154 : template<class _InIt,
; 2155 : 	class _OutIt> inline
; 2156 : _SCL_INSECURE_DEPRECATE
; 2157 : 	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
; 2158 : 		_OutIt _Dest, false_type)
; 2159 : 	{	// copy [_First, _Last) to [_Dest, ...), unchecked dest
; 2160 : 	return (_Copy_impl(_First, _Last,
; 2161 : 		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
; 2162 : 	}
; 2163 : 
; 2164 : template<class _InIt,
; 2165 : 	class _OutIt> inline
; 2166 : 	_OutIt copy(_InIt _First, _InIt _Last,
; 2167 : 		_OutIt _Dest)
; 2168 : 	{	// copy [_First, _Last) to [_Dest, ...)
; 2169 : 	if (_First == _Last)
; 2170 : 		return (_Dest);
; 2171 : 	else
; 2172 : 		{	// worth copying, check then copy
; 2173 : 		_DEBUG_RANGE(_First, _Last);
; 2174 : 		_DEBUG_POINTER(_Dest);
; 2175 : 		return (_Copy_impl(_Unchecked(_First), _Unchecked(_Last),
; 2176 : 			_Dest, _Is_checked(_Dest)));
; 2177 : 		}
; 2178 : 	}
; 2179 : 
; 2180 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2181 : template<class _InIt,
; 2182 : 	class _OutTy,
; 2183 : 	size_t _OutSize> inline
; 2184 : 	_OutTy *copy(_InIt _First, _InIt _Last,
; 2185 : 		_OutTy (&_Dest)[_OutSize])
; 2186 : 	{	// copy [_First, _Last) to [_Dest, ...)
; 2187 : 	return (_Unchecked(
; 2188 : 		_STD copy(_First, _Last,
; 2189 : 			_Array_iterator<_OutTy, _OutSize>(_Dest))));
; 2190 : 	}
; 2191 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2193 : 
; 2194 :  #if _HAS_CPP0X
; 2195 : 		// TEMPLATE FUNCTION copy_n
; 2196 : template<class _InIt,
; 2197 : 	class _Diff,
; 2198 : 	class _OutIt> inline
; 2199 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2200 : 		_OutIt _Dest, input_iterator_tag)
; 2201 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), input iterators
; 2202 : 	*_Dest = *_First;	// 0 < _Count has been guaranteed
; 2203 : 	while (0 < --_Count)
; 2204 : 		*++_Dest = *++_First;
; 2205 : 	return (++_Dest);
; 2206 : 	}
; 2207 : 
; 2208 : template<class _InIt,
; 2209 : 	class _Diff,
; 2210 : 	class _OutIt> inline
; 2211 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2212 : 		_OutIt _Dest, forward_iterator_tag)
; 2213 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), forward iterators
; 2214 : 	for (; 0 < _Count; --_Count, ++_Dest, ++_First)
; 2215 : 		*_Dest = *_First;
; 2216 : 	return (_Dest);
; 2217 : 	}
; 2218 : 
; 2219 : template<class _InIt,
; 2220 : 	class _Diff,
; 2221 : 	class _OutIt> inline
; 2222 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2223 : 		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
; 2224 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), arbitrary iterators
; 2225 : 	return (_Copy_n(_First, _Count,
; 2226 : 		_Dest, _Iter_cat(_First)));
; 2227 : 	}
; 2228 : template<class _InIt,
; 2229 : 	class _Diff,
; 2230 : 	class _OutIt> inline
; 2231 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2232 : 		_OutIt _Dest, _Scalar_ptr_iterator_tag)
; 2233 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), pointers to scalars
; 2234 : 	_CSTD memmove(&*_Dest, &*_First,
; 2235 : 		_Count * sizeof (*_First));
; 2236 : 	return (_Dest + _Count);
; 2237 : 	}
; 2238 : 
; 2239 : template<class _InIt,
; 2240 : 	class _Diff,
; 2241 : 	class _OutIt> inline
; 2242 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2243 : 		_OutIt _Dest)
; 2244 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), unchecked
; 2245 : 	return (_Copy_n(_First, _Count,
; 2246 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2247 : 	}
; 2248 : 
; 2249 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2250 : template<class _InIt,
; 2251 : 	class _Diff,
; 2252 : 	class _OutIt> inline
; 2253 : 	_OutIt copy_n(_InIt _First, _Diff _Count,
; 2254 : 		_OutIt _Dest)
; 2255 : 	{	// copy [_First, _First + _Count) to [_Dest, ...)
; 2256 : 	if (_Count <= 0)
; 2257 : 		return (_Dest);
; 2258 : 	else
; 2259 : 		return (_Rechecked(_Dest,
; 2260 : 			_Copy_n(_Unchecked(_First), _Count,
; 2261 : 				_Unchecked(_Dest))));
; 2262 : 	}
; 2263 : 
; 2264 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2265 : template<class _InIt,
; 2266 : 	class _Diff,
; 2267 : 	class _OutIt> inline
; 2268 : 	_OutIt _Copy_n2(_InIt _First, _Diff _Count,
; 2269 : 		_OutIt _Dest, output_iterator_tag)
; 2270 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), arbitrary dest
; 2271 : 	return (_Copy_n(_First, _Count,
; 2272 : 		_Dest));
; 2273 : 	}
; 2274 : 
; 2275 : template<class _InIt,
; 2276 : 	class _Diff,
; 2277 : 	class _OutIt> inline
; 2278 : 	_OutIt _Copy_n2(_InIt _First, _Diff _Count,
; 2279 : 		_OutIt _Dest, random_access_iterator_tag)
; 2280 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), random-access dest
; 2281 : 	_OutIt _Ans = _Dest + _Count;	// also checks range
; 2282 : 	_Copy_n(_First, _Count,
; 2283 : 		_Unchecked(_Dest));
; 2284 : 	return (_Ans);
; 2285 : 	}
; 2286 : 
; 2287 : template<class _InIt,
; 2288 : 	class _Diff,
; 2289 : 	class _OutIt> inline
; 2290 : 	_OutIt _Copy_n1(_InIt _First, _Diff _Count,
; 2291 : 		_OutIt _Dest, input_iterator_tag)
; 2292 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), arbitrary input
; 2293 : 	return (_Copy_n2(_First, _Count,
; 2294 : 		_Dest, _Iter_cat(_Dest)));
; 2295 : 	}
; 2296 : 
; 2297 : template<class _InIt,
; 2298 : 	class _Diff,
; 2299 : 	class _OutIt> inline
; 2300 : 	_OutIt _Copy_n1(_InIt _First, _Diff _Count,
; 2301 : 		_OutIt _Dest, random_access_iterator_tag)
; 2302 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), random-access input
; 2303 : 	_InIt _Last = _First + _Count;	// also checks range
; 2304 : 	_Last = _Last;	// to quiet diagnostics
; 2305 : 	return (_Copy_n2(_Unchecked(_First), _Count,
; 2306 : 		_Dest, _Iter_cat(_Dest)));
; 2307 : 	}
; 2308 : 
; 2309 : template<class _InIt,
; 2310 : 	class _Diff,
; 2311 : 	class _OutIt> inline
; 2312 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2313 : 		_OutIt _Dest, true_type)
; 2314 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), checked dest
; 2315 : 	return (_Copy_n1(_First, _Count,
; 2316 : 		_Dest, _Iter_cat(_First)));
; 2317 : 	}
; 2318 : 
; 2319 : template<class _InIt,
; 2320 : 	class _Diff,
; 2321 : 	class _OutIt> inline
; 2322 : _SCL_INSECURE_DEPRECATE
; 2323 : 	_OutIt _Copy_n(_InIt _First, _Diff _Count,
; 2324 : 		_OutIt _Dest, false_type)
; 2325 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), unchecked dest
; 2326 : 	return (_Copy_n1(_First, _Count,
; 2327 : 		_Dest, _Iter_cat(_First)));
; 2328 : 	}
; 2329 : 
; 2330 : template<class _InIt,
; 2331 : 	class _Diff,
; 2332 : 	class _OutIt> inline
; 2333 : 	_OutIt copy_n(_InIt _First, _Diff _Count,
; 2334 : 		_OutIt _Dest)
; 2335 : 	{	// copy [_First, _First + _Count) to [_Dest, ...)
; 2336 : 	_DEBUG_POINTER(_First);
; 2337 : 	_DEBUG_POINTER(_Dest);
; 2338 : 	if (_Count <= 0)
; 2339 : 		return (_Dest);
; 2340 : 	else
; 2341 : 		return (_Copy_n(_First, _Count,
; 2342 : 			_Dest, _Is_checked(_Dest)));
; 2343 : 	}
; 2344 : 
; 2345 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2346 : template<class _InTy,
; 2347 : 	size_t _InSize,
; 2348 : 	class _Diff,
; 2349 : 	class _OutIt> inline
; 2350 : 	_OutIt copy_n(_InTy (&_First)[_InSize], _Diff _Count,
; 2351 : 		_OutIt _Dest)
; 2352 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), array input
; 2353 : 	return (_STD copy_n(_Array_iterator<_InTy, _InSize>(_First), _Count,
; 2354 : 		_Dest));
; 2355 : 	}
; 2356 : 
; 2357 : template<class _InIt,
; 2358 : 	class _Diff,
; 2359 : 	class _OutTy,
; 2360 : 	size_t _OutSize> inline
; 2361 : 	_OutTy *copy_n(_InIt _First, _Diff _Count,
; 2362 : 		_OutTy (&_Dest)[_OutSize])
; 2363 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), array dest
; 2364 : 	return (_Unchecked(
; 2365 : 		_STD copy_n(_First, _Count,
; 2366 : 			_Array_iterator<_OutTy, _OutSize>(_Dest))));
; 2367 : 	}
; 2368 : 
; 2369 : template<class _InTy,
; 2370 : 	size_t _InSize,
; 2371 : 	class _Diff,
; 2372 : 	class _OutTy,
; 2373 : 	size_t _OutSize> inline
; 2374 : 	_OutTy *copy_n(_InTy (&_First)[_InSize], _Diff _Count,
; 2375 : 		_OutTy (&_Dest)[_OutSize])
; 2376 : 	{	// copy [_First, _First + _Count) to [_Dest, ...), array input/dest
; 2377 : 	return (_Unchecked(
; 2378 : 		_STD copy_n(_Array_iterator<_InTy, _InSize>(_First), _Count,
; 2379 : 			_Array_iterator<_OutTy, _OutSize>(_Dest))));
; 2380 : 	}
; 2381 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2382 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2383 :  #endif /* _HAS_CPP0X */
; 2384 : 
; 2385 : 		// TEMPLATE FUNCTION copy_backward
; 2386 : template<class _BidIt1,
; 2387 : 	class _BidIt2> inline
; 2388 : 	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2389 : 		_BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
; 2390 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators
; 2391 : 	while (_First != _Last)
; 2392 : 		*--_Dest = *--_Last;
; 2393 : 	return (_Dest);
; 2394 : 	}
; 2395 : 
; 2396 : template<class _InIt,
; 2397 : 	class _OutIt> inline
; 2398 : 	_OutIt _Copy_backward(_InIt _First, _InIt _Last,
; 2399 : 		_OutIt _Dest, _Scalar_ptr_iterator_tag)
; 2400 : 	{	// copy [_First, _Last) backwards to [..., _Dest), pointers to scalars
; 2401 : 	ptrdiff_t _Count = _Last - _First;
; 2402 : 	_CSTD memmove(&*_Dest - _Count, &*_First,
; 2403 : 		_Count * sizeof (*_First));
; 2404 : 	return (_Dest - _Count);
; 2405 : 	}
; 2406 : 
; 2407 : template<class _BidIt1,
; 2408 : 	class _BidIt2> inline
; 2409 : 	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2410 : 		_BidIt2 _Dest)
; 2411 : 	{	// copy [_First, _Last) backwards to [..., _Dest), unchecked
; 2412 : 	return (_Copy_backward(_First, _Last,
; 2413 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2414 : 	}
; 2415 : 
; 2416 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2417 : template<class _BidIt1,
; 2418 : 	class _BidIt2> inline
; 2419 : 	_BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2420 : 		_BidIt2 _Dest)
; 2421 : 	{	// copy [_First, _Last) backwards to [..., _Dest)
; 2422 : 	return (_Rechecked(_Dest,
; 2423 : 		_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
; 2424 : 			_Unchecked(_Dest))));
; 2425 : 	}
; 2426 : 
; 2427 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2428 : template<class _BidIt1,
; 2429 : 	class _BidIt2> inline
; 2430 : 	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2431 : 		_BidIt2 _Dest, true_type)
; 2432 : 	{	// copy [_First, _Last) backwards to [..., _Dest), checked dest
; 2433 : 	return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
; 2434 : 		_Dest));
; 2435 : 	}
; 2436 : 
; 2437 : template<class _BidIt1,
; 2438 : 	class _BidIt2> inline
; 2439 : _SCL_INSECURE_DEPRECATE
; 2440 : 	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2441 : 		_BidIt2 _Dest, false_type)
; 2442 : 	{	// copy [_First, _Last) backwards to [..., _Dest), unchecked dest
; 2443 : 	return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
; 2444 : 		_Dest));
; 2445 : 	}
; 2446 : 
; 2447 : template<class _BidIt1,
; 2448 : 	class _BidIt2> inline
; 2449 : 	_BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
; 2450 : 		_BidIt2 _Dest)
; 2451 : 	{	// copy [_First, _Last) backwards to [..., _Dest)
; 2452 : 	_DEBUG_RANGE(_First, _Last);
; 2453 : 	_DEBUG_POINTER(_Dest);
; 2454 : 	return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
; 2455 : 		_Dest, _Is_checked(_Dest)));
; 2456 : 	}
; 2457 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2458 : 
; 2459 : 		// TEMPLATE FUNCTION move
; 2460 : template<class _InIt,
; 2461 : 	class _OutIt> inline
; 2462 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2463 : 		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
; 2464 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators
; 2465 : 	for (; _First != _Last; ++_Dest, ++_First)
; 2466 : 		*_Dest = _STD move(*_First);
; 2467 : 	return (_Dest);
; 2468 : 	}
; 2469 : 
; 2470 : template<class _InIt,
; 2471 : 	class _OutIt> inline
; 2472 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2473 : 		_OutIt _Dest, _Scalar_ptr_iterator_tag)
; 2474 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars
; 2475 : 	ptrdiff_t _Count = _Last - _First;
; 2476 : 	_CSTD memmove(&*_Dest, &*_First,
; 2477 : 		_Count * sizeof (*_First));
; 2478 : 	return (_Dest + _Count);
; 2479 : 	}
; 2480 : 
; 2481 : template<class _InIt,
; 2482 : 	class _OutIt> inline
; 2483 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2484 : 		_OutIt _Dest)
; 2485 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked
; 2486 : 	return (_Move(_First, _Last,
; 2487 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2488 : 	}
; 2489 : 
; 2490 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2491 : template<class _InIt,
; 2492 : 	class _OutIt> inline
; 2493 : 	_OutIt move(_InIt _First, _InIt _Last,
; 2494 : 		_OutIt _Dest)
; 2495 : 	{	// move [_First, _Last) to [_Dest, ...)
; 2496 : 	return (_Rechecked(_Dest,
; 2497 : 		_Move(_Unchecked(_First), _Unchecked(_Last),
; 2498 : 			_Unchecked(_Dest))));
; 2499 : 	}
; 2500 : 
; 2501 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2502 : template<class _InIt,
; 2503 : 	class _OutIt> inline
; 2504 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2505 : 		_OutIt _Dest, input_iterator_tag, output_iterator_tag)
; 2506 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators
; 2507 : 	return (_Move(_First, _Last,
; 2508 : 		_Dest));
; 2509 : 	}
; 2510 : 
; 2511 : template<class _InIt,
; 2512 : 	class _OutIt> inline
; 2513 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2514 : 		_OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
; 2515 : 	{	// move [_First, _Last) to [_Dest, ...), random-access iterators
; 2516 : 	_OutIt _Ans = _Dest + (_Last - _First);	// also checks range
; 2517 : 	_Move(_First, _Last,
; 2518 : 		_Unchecked(_Dest));
; 2519 : 	return (_Ans);
; 2520 : 	}
; 2521 : 
; 2522 : template<class _InIt,
; 2523 : 	class _OutIt> inline
; 2524 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2525 : 		_OutIt _Dest, true_type)
; 2526 : 	{	// move [_First, _Last) to [_Dest, ...), checked dest
; 2527 : 	return (_Move(_First, _Last,
; 2528 : 		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
; 2529 : 	}
; 2530 : 
; 2531 : template<class _InIt,
; 2532 : 	class _OutIt> inline
; 2533 : _SCL_INSECURE_DEPRECATE
; 2534 : 	_OutIt _Move(_InIt _First, _InIt _Last,
; 2535 : 		_OutIt _Dest, false_type)
; 2536 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked dest
; 2537 : 	return (_Move(_First, _Last,
; 2538 : 		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
; 2539 : 	}
; 2540 : 
; 2541 : template<class _InIt,
; 2542 : 	class _OutIt> inline
; 2543 : 	_OutIt move(_InIt _First, _InIt _Last,
; 2544 : 		_OutIt _Dest)
; 2545 : 	{	// move [_First, _Last) to [_Dest, ...)
; 2546 : 	_DEBUG_RANGE(_First, _Last);
; 2547 : 	_DEBUG_POINTER(_Dest);
; 2548 : 	return (_Move(_Unchecked(_First), _Unchecked(_Last),
; 2549 : 		_Dest, _Is_checked(_Dest)));
; 2550 : 	}
; 2551 : 
; 2552 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2553 : template<class _InIt,
; 2554 : 	class _OutTy,
; 2555 : 	size_t _OutSize> inline
; 2556 : 	_OutTy *move(_InIt _First, _InIt _Last,
; 2557 : 		_OutTy (&_Dest)[_OutSize])
; 2558 : 	{	// move [_First, _Last) to [_Dest, ...)
; 2559 : 	return (_Unchecked(
; 2560 : 		_STD move(_First, _Last,
; 2561 : 			_Array_iterator<_OutTy, _OutSize>(_Dest))));
; 2562 : 	}
; 2563 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2564 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2565 : 
; 2566 : 		// TEMPLATE FUNCTION move_backward
; 2567 : template<class _BidIt1,
; 2568 : 	class _BidIt2> inline
; 2569 : 	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2570 : 		_BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
; 2571 : 	{	// move [_First, _Last) backwards to [..., _Dest), arbitrary iterators
; 2572 : 	while (_First != _Last)
; 2573 : 		*--_Dest = _STD move(*--_Last);
; 2574 : 	return (_Dest);
; 2575 : 	}
; 2576 : 
; 2577 : template<class _InIt,
; 2578 : 	class _OutIt> inline
; 2579 : 	_OutIt _Move_backward(_InIt _First, _InIt _Last,
; 2580 : 		_OutIt _Dest, _Scalar_ptr_iterator_tag)
; 2581 : 	{	// move [_First, _Last) backwards to [..., _Dest), pointers to scalars
; 2582 : 	ptrdiff_t _Count = _Last - _First;
; 2583 : 	_CSTD memmove(&*_Dest - _Count, &*_First,
; 2584 : 		_Count * sizeof (*_First));
; 2585 : 	return (_Dest - _Count);
; 2586 : 	}
; 2587 : 
; 2588 : template<class _BidIt1,
; 2589 : 	class _BidIt2> inline
; 2590 : 	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2591 : 		_BidIt2 _Dest)
; 2592 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked
; 2593 : 	return (_Move_backward(_First, _Last,
; 2594 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2595 : 	}
; 2596 : 
; 2597 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2598 : template<class _BidIt1,
; 2599 : 	class _BidIt2> inline
; 2600 : 	_BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2601 : 		_BidIt2 _Dest)
; 2602 : 	{	// move [_First, _Last) backwards to [..., _Dest)
; 2603 : 	return (_Rechecked(_Dest,
; 2604 : 		_Move_backward(_Unchecked(_First), _Unchecked(_Last),
; 2605 : 			_Unchecked(_Dest))));
; 2606 : 	}
; 2607 : 
; 2608 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2609 : template<class _BidIt1,
; 2610 : 	class _BidIt2> inline
; 2611 : 	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2612 : 		_BidIt2 _Dest, true_type)
; 2613 : 	{	// move [_First, _Last) backwards to [..., _Dest), checked dest
; 2614 : 	return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
; 2615 : 		_Dest));
; 2616 : 	}
; 2617 : 
; 2618 : template<class _BidIt1,
; 2619 : 	class _BidIt2> inline
; 2620 : _SCL_INSECURE_DEPRECATE
; 2621 : 	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2622 : 		_BidIt2 _Dest, false_type)
; 2623 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked dest
; 2624 : 	return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
; 2625 : 		_Dest));
; 2626 : 	}
; 2627 : 
; 2628 : template<class _BidIt1,
; 2629 : 	class _BidIt2> inline
; 2630 : 	_BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
; 2631 : 		_BidIt2 _Dest)
; 2632 : 	{	// move [_First, _Last) backwards to [..., _Dest)
; 2633 : 	_DEBUG_RANGE(_First, _Last);
; 2634 : 	_DEBUG_POINTER(_Dest);
; 2635 : 	return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
; 2636 : 		_Dest, _Is_checked(_Dest)));
; 2637 : 	}
; 2638 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2639 : 
; 2640 : 		// TEMPLATE FUNCTION fill
; 2641 : template<class _FwdIt,
; 2642 : 	class _Ty> inline
; 2643 : 	void _Fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
; 2644 : 	{	// copy _Val through [_First, _Last)
; 2645 : 	for (; _First != _Last; ++_First)
; 2646 : 		*_First = _Val;
; 2647 : 	}
; 2648 : 
; 2649 : inline void _Fill(char *_First, char *_Last, char _Val)
; 2650 : 	{	// copy char _Val through [_First, _Last)
; 2651 : 	_CSTD memset(_First, _Val, _Last - _First);
; 2652 : 	}
; 2653 : 
; 2654 : inline void _Fill(signed char *_First, signed char *_Last, signed char _Val)
; 2655 : 	{	// copy signed char _Val through [_First, _Last)
; 2656 : 	_CSTD memset(_First, _Val, _Last - _First);
; 2657 : 	}
; 2658 : 
; 2659 : inline void _Fill(unsigned char *_First, unsigned char *_Last, unsigned char _Val)
; 2660 : 	{	// copy unsigned char _Val through [_First, _Last)
; 2661 : 	_CSTD memset(_First, _Val, _Last - _First);
; 2662 : 	}
; 2663 : 
; 2664 : template<class _FwdIt,
; 2665 : 	class _Ty> inline
; 2666 : 	void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
; 2667 : 	{	// copy _Val through [_First, _Last)
; 2668 : 	_DEBUG_RANGE(_First, _Last);
; 2669 : 	_Fill(_Unchecked(_First), _Unchecked(_Last), _Val);
; 2670 : 	}
; 2671 : 
; 2672 : 		// TEMPLATE FUNCTION fill_n
; 2673 : template<class _OutIt,
; 2674 : 	class _Diff,
; 2675 : 	class _Ty> inline
; 2676 : 	_OutIt _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
; 2677 : 	{	// copy _Val _Count times through [_Dest, ...)
; 2678 : 	for (; 0 < _Count; --_Count, ++_Dest)
; 2679 : 		*_Dest = _Val;
; 2680 : 	return (_Dest);
; 2681 : 	}
; 2682 : 
; 2683 : inline char *_Fill_n(char *_Dest, size_t _Count, char _Val)
; 2684 : 	{	// copy char _Val _Count times through [_Dest, ...)
; 2685 : 	_CSTD memset(_Dest, _Val, _Count);
; 2686 : 	return (_Dest + _Count);
; 2687 : 	}
; 2688 : 
; 2689 : inline signed char *_Fill_n(signed char *_Dest, size_t _Count,
; 2690 : 	signed char _Val)
; 2691 : 	{	// copy signed char _Val _Count times through [_Dest, ...)
; 2692 : 	_CSTD memset(_Dest, _Val, _Count);
; 2693 : 	return (_Dest + _Count);
; 2694 : 	}
; 2695 : 
; 2696 : inline unsigned char *_Fill_n(unsigned char *_Dest, size_t _Count,
; 2697 : 	unsigned char _Val)
; 2698 : 	{	// copy unsigned char _Val _Count times through [_Dest, ...)
; 2699 : 	_CSTD memset(_Dest, _Val, _Count);
; 2700 : 	return (_Dest + _Count);
; 2701 : 	}
; 2702 : 
; 2703 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2704 : template<class _OutIt,
; 2705 : 	class _Diff,
; 2706 : 	class _Ty> inline
; 2707 : 	_OutIt fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
; 2708 : 	{	// copy _Val _Count times through [_Dest, ...)
; 2709 : 	return (_Rechecked(_Dest, _Fill_n(_Unchecked(_Dest), _Count, _Val)));
; 2710 : 	}
; 2711 : 
; 2712 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2713 : template<class _OutIt,
; 2714 : 	class _Diff,
; 2715 : 	class _Ty> inline
; 2716 : 	_OutIt _Fill_n1(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
; 2717 : 		output_iterator_tag)
; 2718 : 	{	// copy _Val _Count times through [_Dest, ...), arbitrary iterator
; 2719 : 	return (_Fill_n(_Dest, _Count, _Val));
; 2720 : 	}
; 2721 : 
; 2722 : template<class _OutIt,
; 2723 : 	class _Diff,
; 2724 : 	class _Ty> inline
; 2725 : 	_OutIt _Fill_n1(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
; 2726 : 		random_access_iterator_tag)
; 2727 : 	{	// copy _Val _Count times through [_Dest, ...), random-access iterator
; 2728 : 	_OutIt _Ans = _Dest + _Count;	// also checks range
; 2729 : 	_Fill_n(_Unchecked(_Dest), _Count, _Val);
; 2730 : 	return (_Ans);
; 2731 : 	}
; 2732 : 
; 2733 : template<class _OutIt,
; 2734 : 	class _Diff,
; 2735 : 	class _Ty> inline
; 2736 : 	_OutIt _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
; 2737 : 		true_type)
; 2738 : 	{	// copy _Val _Count times through [_Dest, ...), checked dest
; 2739 : 	return (_Fill_n1(_Dest, _Count, _Val,
; 2740 : 		_Iter_cat(_Dest)));
; 2741 : 	}
; 2742 : 
; 2743 : template<class _OutIt,
; 2744 : 	class _Diff,
; 2745 : 	class _Ty> inline
; 2746 : _SCL_INSECURE_DEPRECATE
; 2747 : 	_OutIt _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
; 2748 : 		false_type)
; 2749 : 	{	// copy _Val _Count times through [_Dest, ...), unchecked dest
; 2750 : 	return (_Fill_n1(_Dest, _Count, _Val,
; 2751 : 		_Iter_cat(_Dest)));
; 2752 : 	}
; 2753 : 
; 2754 : template<class _OutIt,
; 2755 : 	class _Diff,
; 2756 : 	class _Ty> inline
; 2757 : 	_OutIt fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
; 2758 : 	{	// copy _Val _Count times through [_Dest, ...)
; 2759 : 	_DEBUG_POINTER(_Dest);
; 2760 : 	return (_Fill_n(_Dest, _Count, _Val,
; 2761 : 		_Is_checked(_Dest)));
; 2762 : 	}
; 2763 : 
; 2764 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2765 : template<class _OutTy,
; 2766 : 	size_t _OutSize,
; 2767 : 	class _Diff,
; 2768 : 	class _Ty> inline
; 2769 : 	_OutTy *fill_n(_OutTy (&_Dest)[_OutSize], _Diff _Count, const _Ty& _Val)
; 2770 : 	{	// copy _Val _Count times through [_Dest, ...)
; 2771 : 	return (_Unchecked(_STD fill_n(_Array_iterator<_OutTy, _OutSize>(_Dest),
; 2772 : 		_Count, _Val)));
; 2773 : 	}
; 2774 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2775 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2776 : 
; 2777 : 		// TEMPLATE FUNCTION mismatch
; 2778 : template<class _InIt1,
; 2779 : 	class _InIt2> inline
; 2780 : 	pair<_InIt1, _InIt2>
; 2781 : 		_Mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2782 : 			_InIt2 _First2)
; 2783 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch
; 2784 : 	for (; _First1 != _Last1 && *_First1 == *_First2; )
; 2785 : 		++_First1, ++_First2;
; 2786 : 	return (pair<_InIt1, _InIt2>(_First1, _First2));
; 2787 : 	}
; 2788 : 
; 2789 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2790 : template<class _InIt1,
; 2791 : 	class _InIt2> inline
; 2792 : 	pair<_InIt1, _InIt2>
; 2793 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2794 : 			_InIt2 _First2)
; 2795 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch
; 2796 : 	pair<_UNCHECKED_TYPE(_InIt1), _InIt2> _Ans(
; 2797 : 		_Mismatch(_Unchecked(_First1), _Unchecked(_Last1),
; 2798 : 			_First2));
; 2799 : 	return (pair<_InIt1, _InIt2>(
; 2800 : 		_Rechecked(_First1, _Ans.first),
; 2801 : 		_Ans.second));
; 2802 : 	}
; 2803 : 
; 2804 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2805 : template<class _InIt1,
; 2806 : 	class _InIt2> inline
; 2807 : 	pair<_InIt1, _InIt2>
; 2808 : 		_Mismatch1(_InIt1 _First1, _InIt1 _Last1,
; 2809 : 			_InIt2 _First2, true_type)
; 2810 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch, checked input
; 2811 : 	return (_Mismatch(_First1, _Last1,
; 2812 : 		_First2));
; 2813 : 	}
; 2814 : 
; 2815 : template<class _InIt1,
; 2816 : 	class _InIt2> inline
; 2817 : _SCL_INSECURE_DEPRECATE
; 2818 : 	pair<_InIt1, _InIt2>
; 2819 : 		_Mismatch1(_InIt1 _First1, _InIt1 _Last1,
; 2820 : 			_InIt2 _First2, false_type)
; 2821 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch, unchecked input
; 2822 : 	return (_Mismatch(_First1, _Last1,
; 2823 : 		_First2));
; 2824 : 	}
; 2825 : 
; 2826 : template<class _InIt1,
; 2827 : 	class _InIt2> inline
; 2828 : 	pair<_InIt1, _InIt2>
; 2829 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2830 : 			_InIt2 _First2)
; 2831 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch
; 2832 : 	_DEBUG_RANGE(_First1, _Last1);
; 2833 : 	_DEBUG_POINTER(_First2);
; 2834 : 	pair<_UNCHECKED_TYPE(_InIt1), _InIt2> _Ans(
; 2835 : 		_Mismatch1(_Unchecked(_First1), _Unchecked(_Last1),
; 2836 : 			_First2, _Is_checked(_First2)));
; 2837 : 	return (pair<_InIt1, _InIt2>(
; 2838 : 		_Rechecked(_First1, _Ans.first),
; 2839 : 		_Ans.second));
; 2840 : 	}
; 2841 : 
; 2842 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2843 : template<class _InIt1,
; 2844 : 	class _InTy,
; 2845 : 	size_t _InSize> inline
; 2846 : 	pair<_InIt1, _InTy *>
; 2847 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2848 : 			_InTy (&_First2)[_InSize])
; 2849 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch, array input
; 2850 : 	pair<_InIt1, _Array_iterator<_InTy, _InSize> > _Ans(
; 2851 : 		_STD mismatch(_First1, _Last1,
; 2852 : 			_Array_iterator<_InTy, _InSize>(_First2)));
; 2853 : 	return (pair<_InIt1, _InTy *>(
; 2854 : 		_Ans.first,
; 2855 : 		_Unchecked(_Ans.second)));
; 2856 : 	}
; 2857 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2858 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2859 : 
; 2860 : 		// TEMPLATE FUNCTION mismatch WITH PRED
; 2861 : template<class _InIt1,
; 2862 : 	class _InIt2,
; 2863 : 	class _Pr> inline
; 2864 : 	pair<_InIt1, _InIt2>
; 2865 : 		_Mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2866 : 			_InIt2 _First2, _Pr _Pred)
; 2867 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch using _Pred
; 2868 : 	for (; _First1 != _Last1 && _Pred(*_First1, *_First2); )
; 2869 : 		++_First1, ++_First2;
; 2870 : 	return (pair<_InIt1, _InIt2>(_First1, _First2));
; 2871 : 	}
; 2872 : 
; 2873 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2874 : template<class _InIt1,
; 2875 : 	class _InIt2,
; 2876 : 	class _Pr> inline
; 2877 : 	pair<_InIt1, _InIt2>
; 2878 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2879 : 			_InIt2 _First2, _Pr _Pred)
; 2880 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch using _Pred
; 2881 : 	pair<_UNCHECKED_TYPE(_InIt1), _InIt2> _Ans(
; 2882 : 		_Mismatch(_Unchecked(_First1), _Unchecked(_Last1),
; 2883 : 			_First2, _Pred));
; 2884 : 	return (pair<_InIt1, _InIt2>(
; 2885 : 		_Rechecked(_First1, _Ans.first),
; 2886 : 		_Ans.second));
; 2887 : 	}
; 2888 : 
; 2889 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2890 : template<class _InIt1,
; 2891 : 	class _InIt2,
; 2892 : 	class _Pr> inline
; 2893 : 	pair<_InIt1, _InIt2>
; 2894 : 		_Mismatch2(_InIt1 _First1, _InIt1 _Last1,
; 2895 : 			_InIt2 _First2, _Pr _Pred, true_type)
; 2896 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch, checked input
; 2897 : 	return (_Mismatch(_First1, _Last1,
; 2898 : 		_First2, _Pred));
; 2899 : 	}
; 2900 : 
; 2901 : template<class _InIt1,
; 2902 : 	class _InIt2,
; 2903 : 	class _Pr> inline
; 2904 : _SCL_INSECURE_DEPRECATE
; 2905 : 	pair<_InIt1, _InIt2>
; 2906 : 		_Mismatch2(_InIt1 _First1, _InIt1 _Last1,
; 2907 : 			_InIt2 _First2, _Pr _Pred, false_type)
; 2908 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch, unchecked input
; 2909 : 	return (_Mismatch(_First1, _Last1,
; 2910 : 		_First2, _Pred));
; 2911 : 	}
; 2912 : 
; 2913 : template<class _InIt1,
; 2914 : 	class _InIt2,
; 2915 : 	class _Pr> inline
; 2916 : 	pair<_InIt1, _InIt2>
; 2917 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2918 : 			_InIt2 _First2, _Pr _Pred)
; 2919 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch using _Pred
; 2920 : 	_DEBUG_RANGE(_First1, _Last1);
; 2921 : 	_DEBUG_POINTER(_First2);
; 2922 : 	_DEBUG_POINTER(_Pred);
; 2923 : 	pair<_UNCHECKED_TYPE(_InIt1), _InIt2> _Ans(
; 2924 : 		_Mismatch2(_Unchecked(_First1), _Unchecked(_Last1),
; 2925 : 			_First2, _Pred, _Is_checked(_First2)));
; 2926 : 	return (pair<_InIt1, _InIt2>(
; 2927 : 		_Rechecked(_First1, _Ans.first),
; 2928 : 		_Ans.second));
; 2929 : 	}
; 2930 : 
; 2931 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2932 : template<class _InIt1,
; 2933 : 	class _InTy,
; 2934 : 	size_t _InSize,
; 2935 : 	class _Pr> inline
; 2936 : 	pair<_InIt1, _InTy *>
; 2937 : 		mismatch(_InIt1 _First1, _InIt1 _Last1,
; 2938 : 			_InTy (&_First2)[_InSize], _Pr _Pred)
; 2939 : 	{	// return [_First1, _Last1)/[_First2, ...) mismatch using _Pred
; 2940 : 	pair<_InIt1, _Array_iterator<_InTy, _InSize> > _Ans(
; 2941 : 		_STD mismatch(_First1, _Last1,
; 2942 : 			_Array_iterator<_InTy, _InSize>(_First2), _Pred));
; 2943 : 	return (pair<_InIt1, _InTy *>(
; 2944 : 		_Ans.first,
; 2945 : 		_Unchecked(_Ans.second)));
; 2946 : 	}
; 2947 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2948 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2949 : 
; 2950 : 		// TEMPLATE FUNCTION equal
; 2951 : template<class _InIt1,
; 2952 : 	class _InIt2> inline
; 2953 : 	bool _Equal(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2)
; 2954 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 2955 : 	for (; _First1 != _Last1; ++_First1, ++_First2)
; 2956 : 		if (!(*_First1 == *_First2))
; 2957 : 			return (false);
; 2958 : 	return (true);
; 2959 : 	}
; 2960 : 
; 2961 : inline bool _Equal(const char *_First1, const char *_Last1,
; 2962 : 	const char *_First2)
; 2963 : 	{	// compare [_First1, _Last1) to [First2, ...), for chars
; 2964 : 	return (_CSTD memcmp(_First1, _First2, _Last1 - _First1) == 0);
; 2965 : 	}
; 2966 : 
; 2967 : inline bool _Equal(const signed char *_First1, const signed char *_Last1,
; 2968 : 	const signed char *_First2)
; 2969 : 	{	// compare [_First1, _Last1) to [First2, ...), for signed chars
; 2970 : 	return (_CSTD memcmp(_First1, _First2, _Last1 - _First1) == 0);
; 2971 : 	}
; 2972 : 
; 2973 : inline bool _Equal(const unsigned char *_First1, const unsigned char *_Last1,
; 2974 : 	const unsigned char *_First2)
; 2975 : 	{	// compare [_First1, _Last1) to [First2, ...), for unsigned chars
; 2976 : 	return (_CSTD memcmp(_First1, _First2, _Last1 - _First1) == 0);
; 2977 : 	}
; 2978 : 
; 2979 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2980 : template<class _InIt1,
; 2981 : 	class _InIt2> inline
; 2982 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 2983 : 		_InIt2 _First2)
; 2984 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 2985 : 	return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
; 2986 : 		_Unchecked(_First2)));
; 2987 : 	}
; 2988 : 
; 2989 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2990 : template<class _InIt1,
; 2991 : 	class _InIt2> inline
; 2992 : 	bool _Equal1(_InIt1 _First1, _InIt1 _Last1,
; 2993 : 		_InIt2 _First2, true_type)
; 2994 : 	{	// compare [_First1, _Last1) to [First2, ...), checked dest
; 2995 : 	return (_Equal(_First1, _Last1,
; 2996 : 		_First2));
; 2997 : 	}
; 2998 : 
; 2999 : template<class _InIt1,
; 3000 : 	class _InIt2> inline
; 3001 : _SCL_INSECURE_DEPRECATE
; 3002 : 	bool _Equal1(_InIt1 _First1, _InIt1 _Last1,
; 3003 : 		_InIt2 _First2, false_type)
; 3004 : 	{	// compare [_First1, _Last1) to [First2, ...), unchecked dest
; 3005 : 	return (_Equal(_First1, _Last1,
; 3006 : 		_First2));
; 3007 : 	}
; 3008 : 
; 3009 : template<class _InIt1,
; 3010 : 	class _InIt2> inline
; 3011 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 3012 : 		_InIt2 _First2)
; 3013 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 3014 : 	_DEBUG_RANGE(_First1, _Last1);
; 3015 : 	_DEBUG_POINTER(_First2);
; 3016 : 	return (_Equal1(_Unchecked(_First1), _Unchecked(_Last1),
; 3017 : 		_First2, _Is_checked(_First2)));
; 3018 : 	}
; 3019 : 
; 3020 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 3021 : template<class _InIt1,
; 3022 : 	class _InTy,
; 3023 : 	size_t _InSize> inline
; 3024 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 3025 : 		_InTy (&_First2)[_InSize])
; 3026 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 3027 : 	return (_STD equal(_First1, _Last1,
; 3028 : 		_Array_iterator<_InTy, _InSize>(_First2)));
; 3029 : 	}
; 3030 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 3031 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 3032 : 
; 3033 : 		// TEMPLATE FUNCTION equal WITH PRED
; 3034 : template<class _InIt1,
; 3035 : 	class _InIt2,
; 3036 : 	class _Pr> inline
; 3037 : 	bool _Equal(_InIt1 _First1, _InIt1 _Last1,
; 3038 : 		_InIt2 _First2, _Pr _Pred)
; 3039 : 	{	// compare [_First1, _Last1) to [First2, ...) using _Pred
; 3040 : 	for (; _First1 != _Last1; ++_First1, ++_First2)
; 3041 : 		if (!_Pred(*_First1, *_First2))
; 3042 : 			return (false);
; 3043 : 	return (true);
; 3044 : 	}
; 3045 : 
; 3046 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 3047 : template<class _InIt1,
; 3048 : 	class _InIt2,
; 3049 : 	class _Pr> inline
; 3050 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 3051 : 		_InIt2 _First2, _Pr _Pred)
; 3052 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 3053 : 	return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
; 3054 : 		_Unchecked(_First2), _Pred));
; 3055 : 	}
; 3056 : 
; 3057 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 3058 : template<class _InIt1,
; 3059 : 	class _InIt2,
; 3060 : 	class _Pr> inline
; 3061 : 	bool _Equal2(_InIt1 _First1, _InIt1 _Last1,
; 3062 : 		_InIt2 _First2, _Pr _Pred, true_type)
; 3063 : 	{	// compare [_First1, _Last1) to [First2, ...), checked input
; 3064 : 	return (_Equal(_First1, _Last1,
; 3065 : 		_First2, _Pred));
; 3066 : 	}
; 3067 : 
; 3068 : template<class _InIt1,
; 3069 : 	class _InIt2,
; 3070 : 	class _Pr> inline
; 3071 : _SCL_INSECURE_DEPRECATE
; 3072 : 	bool _Equal2(_InIt1 _First1, _InIt1 _Last1,
; 3073 : 		_InIt2 _First2, _Pr _Pred, false_type)
; 3074 : 	{	// compare [_First1, _Last1) to [First2, ...), unchecked input
; 3075 : 	return (_Equal(_First1, _Last1,
; 3076 : 		_First2, _Pred));
; 3077 : 	}
; 3078 : 
; 3079 : template<class _InIt1,
; 3080 : 	class _InIt2,
; 3081 : 	class _Pr> inline
; 3082 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 3083 : 		_InIt2 _First2, _Pr _Pred)
; 3084 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 3085 : 	_DEBUG_RANGE(_First1, _Last1);
; 3086 : 	_DEBUG_POINTER(_First2);
; 3087 : 	return (_Equal2(_Unchecked(_First1), _Unchecked(_Last1),
; 3088 : 		_First2, _Pred, _Is_checked(_First2)));
; 3089 : 	}
; 3090 : 
; 3091 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 3092 : template<class _InIt1,
; 3093 : 	class _InTy,
; 3094 : 	size_t _InSize,
; 3095 : 	class _Pr> inline
; 3096 : 	bool equal(_InIt1 _First1, _InIt1 _Last1,
; 3097 : 		_InTy (&_First2)[_InSize], _Pr _Pred)
; 3098 : 	{	// compare [_First1, _Last1) to [First2, ...)
; 3099 : 	return (_STD equal(_First1, _Last1,
; 3100 : 		_Array_iterator<_InTy, _InSize>(_First2), _Pred));
; 3101 : 	}
; 3102 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 3103 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 3104 : 
; 3105 : 		// TEMPLATE FUNCTION lexicographical_compare
; 3106 : template<class _InIt1,
; 3107 : 	class _InIt2> inline
; 3108 : 	bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
; 3109 : 		_InIt2 _First2, _InIt2 _Last2)
; 3110 : 	{	// order [_First1, _Last1) vs. [First2, Last2)
; 3111 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
; 3112 : 		if (_DEBUG_LT(*_First1, *_First2))
; 3113 : 			return (true);
; 3114 : 		else if (*_First2 < *_First1)
; 3115 : 			return (false);
; 3116 : 	return (_First1 == _Last1 && _First2 != _Last2);
; 3117 : 	}
; 3118 : 
; 3119 : inline bool _Lexicographical_compare(
; 3120 : 	const unsigned char *_First1, const unsigned char *_Last1,
; 3121 : 	const unsigned char *_First2, const unsigned char *_Last2)
; 3122 : 	{	// order [_First1, _Last1) vs. [First2, Last2), for unsigned char
; 3123 : 	ptrdiff_t _Num1 = _Last1 - _First1;
; 3124 : 	ptrdiff_t _Num2 = _Last2 - _First2;
; 3125 : 	int _Ans = _CSTD memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
; 3126 : 	return (_Ans < 0 || _Ans == 0 && _Num1 < _Num2);
; 3127 : 	}
; 3128 : 
; 3129 :  #if CHAR_MAX == UCHAR_MAX
; 3130 : inline bool _Lexicographical_compare(
; 3131 : 	const char *_First1, const char *_Last1,
; 3132 : 	const char *_First2, const char *_Last2)
; 3133 : 	{	// order [_First1, _Last1) vs. [First2, Last2), for nonnegative char
; 3134 : 	ptrdiff_t _Num1 = _Last1 - _First1;
; 3135 : 	ptrdiff_t _Num2 = _Last2 - _First2;
; 3136 : 	int _Ans = _CSTD memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
; 3137 : 	return (_Ans < 0 || _Ans == 0 && _Num1 < _Num2);
; 3138 : 	}
; 3139 :  #endif /* CHAR_MAX == UCHAR_MAX */
; 3140 : 
; 3141 : template<class _InIt1,
; 3142 : 	class _InIt2> inline
; 3143 : 	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
; 3144 : 		_InIt2 _First2, _InIt2 _Last2)
; 3145 : 	{	// order [_First1, _Last1) vs. [First2, Last2)
; 3146 : 	_DEBUG_RANGE(_First1, _Last1);
; 3147 : 	_DEBUG_RANGE(_First2, _Last2);
; 3148 : 	return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
; 3149 : 		_Unchecked(_First2), _Unchecked(_Last2)));
; 3150 : 	}
; 3151 : 
; 3152 : 		// TEMPLATE FUNCTION lexicographical_compare WITH PRED
; 3153 : template<class _InIt1,
; 3154 : 	class _InIt2,
; 3155 : 	class _Pr> inline
; 3156 : 	bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
; 3157 : 		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
; 3158 : 	{	// order [_First1, _Last1) vs. [First2, Last2) using _Pred
; 3159 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
; 3160 : 		if (_DEBUG_LT_PRED(_Pred, *_First1, *_First2))
; 3161 : 			return (true);
; 3162 : 		else if (_Pred(*_First2, *_First1))
; 3163 : 			return (false);
; 3164 : 	return (_First1 == _Last1 && _First2 != _Last2);
; 3165 : 	}
; 3166 : 
; 3167 : template<class _InIt1,
; 3168 : 	class _InIt2,
; 3169 : 	class _Pr> inline
; 3170 : 	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
; 3171 : 		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
; 3172 : 	{	// order [_First1, _Last1) vs. [First2, Last2) using _Pred
; 3173 : 	_DEBUG_RANGE(_First1, _Last1);
; 3174 : 	_DEBUG_RANGE(_First2, _Last2);
; 3175 : 	_DEBUG_POINTER(_Pred);
; 3176 : 	return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
; 3177 : 		_Unchecked(_First2), _Unchecked(_Last2), _Pred));
; 3178 : 	}
; 3179 : 
; 3180 : 		// TEMPLATE FUNCTION find
; 3181 : template<class _InIt,
; 3182 : 	class _Ty> inline
; 3183 : 	_InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val)
; 3184 : 	{	// find first matching _Val
; 3185 : 	for (; _First != _Last; ++_First)
; 3186 : 		if (*_First == _Val)
; 3187 : 			break;
; 3188 : 	return (_First);
; 3189 : 	}
; 3190 : 
; 3191 : inline const char *_Find(const char *_First, const char *_Last, int _Val)
; 3192 : 	{	// find first char that matches _Val
; 3193 : 	_First = (const char *)_CSTD memchr(_First, _Val, _Last - _First);
; 3194 : 	return (_First == 0 ? _Last : _First);
; 3195 : 	}
; 3196 : 
; 3197 : inline const signed char *_Find(const signed char *_First,
; 3198 : 	const signed char *_Last, int _Val)
; 3199 : 	{	// find first signed char that matches _Val
; 3200 : 	_First = (const signed char *)_CSTD memchr(_First, _Val,
; 3201 : 		_Last - _First);
; 3202 : 	return (_First == 0 ? _Last : _First);
; 3203 : 	}
; 3204 : 
; 3205 : inline const unsigned char *_Find(const unsigned char *_First,
; 3206 : 	const unsigned char *_Last, int _Val)
; 3207 : 	{	// find first unsigned char that matches _Val
; 3208 : 	_First = (const unsigned char *)_CSTD memchr(_First, _Val,
; 3209 : 		_Last - _First);
; 3210 : 	return (_First == 0 ? _Last : _First);
; 3211 : 	}
; 3212 : 
; 3213 : template<class _InIt,
; 3214 : 	class _Ty> inline
; 3215 : 	_InIt find(_InIt _First, _InIt _Last, const _Ty& _Val)
; 3216 : 	{	// find first matching _Val
; 3217 : 	_DEBUG_RANGE(_First, _Last);
; 3218 : 	return (_Rechecked(_First,
; 3219 : 		_Find(_Unchecked(_First), _Unchecked(_Last), _Val)));
; 3220 : 	}
; 3221 : 
; 3222 : 		// TEMPLATE FUNCTION _Find_pr WITH PREDICATE
; 3223 : template<class _InIt,
; 3224 : 	class _Ty,
; 3225 : 	class _Pr> inline
; 3226 : 	_InIt _Find_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
; 3227 : 	{	// find first matching _Val, using _Pred
; 3228 : 	for (; _First != _Last; ++_First)
; 3229 : 		if (_Pred(*_First, _Val))
; 3230 : 			break;
; 3231 : 	return (_First);
; 3232 : 	}
; 3233 : 
; 3234 : 		// TEMPLATE FUNCTION count
; 3235 : template<class _InIt,
; 3236 : 	class _Ty> inline
; 3237 : 	typename iterator_traits<_InIt>::difference_type
; 3238 : 		_Count_np(_InIt _First, _InIt _Last, const _Ty& _Val)
; 3239 : 	{	// count elements that match _Val
; 3240 : 	typename iterator_traits<_InIt>::difference_type _Count = 0;
; 3241 : 
; 3242 : 	for (; _First != _Last; ++_First)
; 3243 : 		if (*_First == _Val)
; 3244 : 			++_Count;
; 3245 : 	return (_Count);
; 3246 : 	}
; 3247 : 
; 3248 : template<class _InIt,
; 3249 : 	class _Ty> inline
; 3250 : 	typename iterator_traits<_InIt>::difference_type
; 3251 : 		count(_InIt _First, _InIt _Last, const _Ty& _Val)
; 3252 : 	{	// count elements that match _Val
; 3253 : 	_DEBUG_RANGE(_First, _Last);
; 3254 : 	return (_Count_np(_Unchecked(_First), _Unchecked(_Last), _Val));
; 3255 : 	}
; 3256 : 
; 3257 : 		// TEMPLATE FUNCTION _Count_pr WITH PREDICATE
; 3258 : template<class _InIt,
; 3259 : 	class _Ty,
; 3260 : 	class _Pr> inline
; 3261 : 	typename iterator_traits<_InIt>::difference_type
; 3262 : 		_Count_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
; 3263 : 	{	// count elements that match _Val, using _Pred
; 3264 : 	typename iterator_traits<_InIt>::difference_type _Count = 0;
; 3265 : 
; 3266 : 	for (; _First != _Last; ++_First)
; 3267 : 		if (_Pred(*_First, _Val))
; 3268 : 			++_Count;
; 3269 : 	return (_Count);
; 3270 : 	}
; 3271 : 
; 3272 :  #if _HAS_CPP0X
; 3273 : 		// TEMPLATE FUNCTION is_permutation
; 3274 : template<class _FwdIt1,
; 3275 : 	class _FwdIt2> inline
; 3276 : 	bool _Is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
; 3277 : 		_FwdIt2 _First2)
; 3278 : 	{	// test if [_First1, _Last1) == permuted [_First2, ...)
; 3279 : 	for (; _First1 != _Last1; ++_First1, ++_First2)
; 3280 : 		if (!(*_First1 == *_First2))
; 3281 : 			break;	// find first inequality
; 3282 : 	if (_First1 != _Last1)
; 3283 : 		{	// check match counts in suffix
; 3284 : 		_FwdIt2 _Last2 = _First2;
; 3285 : 		advance(_Last2, distance(_First1, _Last1));
; 3286 : 		for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
; 3287 : 			if (_Next1 == _Find(_First1, _Next1, *_Next1))
; 3288 : 				{	// new value, compare match counts
; 3289 : 				typename iterator_traits<_FwdIt2>::difference_type _Count =
; 3290 : 					_Count_np(_First2, _Last2, *_Next1);
; 3291 : 				if (_Count == 0
; 3292 : 					|| _Count != _Count_np(_Next1, _Last1, *_Next1))
; 3293 : 					return (false);	// match counts differ, fail
; 3294 : 				}
; 3295 : 		}
; 3296 : 	return (true);
; 3297 : 	}
; 3298 : 
; 3299 : template<class _FwdIt1,
; 3300 : 	class _FwdIt2> inline
; 3301 : 	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
; 3302 : 		_FwdIt2 _First2)
; 3303 : 	{	// test if [_First1, _Last1) == permuted [_First2, ...)
; 3304 : 	_DEBUG_RANGE(_First1, _Last1);
; 3305 : 	return _Is_permutation(_Unchecked(_First1), _Unchecked(_Last1),
; 3306 : 		_Unchecked(_First2));
; 3307 : 	}
; 3308 : 
; 3309 : 		// TEMPLATE FUNCTION is_permutation WITH PREDICATE
; 3310 : template<class _FwdIt1,
; 3311 : 	class _FwdIt2,
; 3312 : 	class _Pr> inline
; 3313 : 	bool _Is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
; 3314 : 		_FwdIt2 _First2, _Pr _Pred)
; 3315 : 	{	// test if [_First1, _First2) == permuted [_First2, ...), using _Pred
; 3316 : 	for (; _First1 != _Last1; ++_First1, ++_First2)
; 3317 : 		if (!_Pred(*_First1, *_First2))
; 3318 : 			break;	// find first inequality
; 3319 : 	if (_First1 != _Last1)
; 3320 : 		{	// check match counts in suffix
; 3321 : 		_FwdIt2 _Last2 = _First2;
; 3322 : 		advance(_Last2, distance(_First1, _Last1));
; 3323 : 		for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
; 3324 : 			if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred))
; 3325 : 				{	// new value, compare match counts
; 3326 : 				typename iterator_traits<_FwdIt2>::difference_type _Count =
; 3327 : 					_Count_pr(_First2, _Last2, *_Next1, _Pred);
; 3328 : 				if (_Count == 0
; 3329 : 					|| _Count != _Count_pr(_Next1, _Last1, *_Next1, _Pred))
; 3330 : 					return (false);	// match counts differ, fail
; 3331 : 				}
; 3332 : 		}
; 3333 : 	return (true);
; 3334 : 	}
; 3335 : 
; 3336 : template<class _FwdIt1,
; 3337 : 	class _FwdIt2,
; 3338 : 	class _Pr> inline
; 3339 : 	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
; 3340 : 		_FwdIt2 _First2, _Pr _Pred)
; 3341 : 	{	// test if [_First1, _First2) == permuted [_First2, ...), using _Pred
; 3342 : 	_DEBUG_RANGE(_First1, _Last1);
; 3343 : 	_DEBUG_POINTER(_Pred);
; 3344 : 	return _Is_permutation(_Unchecked(_First1), _Unchecked(_Last1),
; 3345 : 		_Unchecked(_First2), _Pred);
; 3346 : 	}
; 3347 :  #endif /* _HAS_CPP0X */
; 3348 : 
; 3349 : 		// TEMPLATE FUNCTION reverse
; 3350 : template<class _BidIt> inline
; 3351 : 	void _Reverse(_BidIt _First, _BidIt _Last, bidirectional_iterator_tag)
; 3352 : 	{	// reverse elements in [_First, _Last), bidirectional iterators
; 3353 : 	for (; _First != _Last && _First != --_Last; ++_First)
; 3354 : 		_STD iter_swap(_First, _Last);
; 3355 : 	}
; 3356 : 
; 3357 : template<class _BidIt> inline
; 3358 : 	void reverse(_BidIt _First, _BidIt _Last)
; 3359 : 	{	// reverse elements in [_First, _Last)
; 3360 : 	_DEBUG_RANGE(_First, _Last);
; 3361 : 	_Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 3362 : 	}
; 3363 : 
; 3364 : 		// TEMPLATE FUNCTION rotate
; 3365 : template<class _FwdIt> inline
; 3366 : 	void _Rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
; 3367 : 		forward_iterator_tag)
; 3368 : 	{	// rotate [_First, _Last), forward iterators
; 3369 : 	for (_FwdIt _Next = _Mid; ; )
; 3370 : 		{	// swap [_First, ...) into place
; 3371 : 		_STD iter_swap(_First, _Next);
; 3372 : 		if (++_First == _Mid)
; 3373 : 			if (++_Next == _Last)
; 3374 : 				break;	// done, quit
; 3375 : 			else
; 3376 : 				_Mid = _Next;	// mark end of next interval
; 3377 : 		else if (++_Next == _Last)
; 3378 : 			_Next = _Mid;	// wrap to last end
; 3379 : 		}
; 3380 : 	}
; 3381 : 
; 3382 : template<class _BidIt> inline
; 3383 : 	void _Rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,
; 3384 : 		bidirectional_iterator_tag)
; 3385 : 	{	// rotate [_First, _Last), bidirectional iterators
; 3386 : 	_STD reverse(_First, _Mid);
; 3387 : 	_STD reverse(_Mid, _Last);
; 3388 : 	_STD reverse(_First, _Last);
; 3389 : 	}
; 3390 : 
; 3391 : template<class _RanIt,
; 3392 : 	class _Diff,
; 3393 : 	class _Ty> inline
; 3394 : 	void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Diff *, _Ty *)
; 3395 : 	{	// rotate [_First, _Last), random-access iterators
; 3396 : 	_Diff _Shift = _Mid - _First;
; 3397 : 	_Diff _Count = _Last - _First;
; 3398 : 
; 3399 : 	for (_Diff _Factor = _Shift; _Factor != 0; )
; 3400 : 		{	// find subcycle count as GCD of shift count and length
; 3401 : 		_Diff _Tmp = _Count % _Factor;
; 3402 : 		_Count = _Factor;
; 3403 : 		_Factor = _Tmp;
; 3404 : 		}
; 3405 : 
; 3406 : 	if (_Count < _Last - _First)
; 3407 : 		for (; 0 < _Count; --_Count)
; 3408 : 			{	// rotate each subcycle
; 3409 : 			_RanIt _Hole = _First + _Count;
; 3410 : 			_RanIt _Next = _Hole;
; 3411 : 			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;
; 3412 : 			for (; ; )
; 3413 : 				{	// percolate elements back around subcycle
; 3414 : 				iter_swap(_Next, _Next1);
; 3415 : 				_Next = _Next1;
; 3416 : 				_Next1 = _Shift < _Last - _Next1 ? _Next1 + _Shift
; 3417 : 					: _First + (_Shift - (_Last - _Next1));
; 3418 : 				if (_Next1 == _Hole)
; 3419 : 					break;
; 3420 : 				}
; 3421 : 			}
; 3422 : 	}
; 3423 : 
; 3424 : template<class _RanIt> inline
; 3425 : 	void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last,
; 3426 : 		random_access_iterator_tag)
; 3427 : 	{	// rotate [_First, _Last), random-access iterators
; 3428 : 	_Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));

  0008a	ff 75 f0	 push	 DWORD PTR $T13[ebp]
  0008d	57		 push	 edi
  0008e	ff 75 ec	 push	 DWORD PTR $T9[ebp]
  00091	53		 push	 ebx
  00092	ff 75 b8	 push	 DWORD PTR $T2[ebp+8]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@HVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PAHPAVMatrix@geom@@@Z ; std::_Rotate<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,int,geom::Matrix>
  0009b	83 c4 18	 add	 esp, 24			; 00000018H
$LN205@rotate:

; 124  : 		if (_Myproxy == _Right._Myproxy)

  0009e	8b 45 20	 mov	 eax, DWORD PTR __Last$[ebp]

; 118  : 		{	// copy an iterator

  000a1	33 db		 xor	 ebx, ebx

; 124  : 		if (_Myproxy == _Right._Myproxy)

  000a3	85 c0		 test	 eax, eax
  000a5	74 1c		 je	 SHORT $LN78@rotate

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  000a7	8b 00		 mov	 eax, DWORD PTR [eax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  000a9	85 c0		 test	 eax, eax
  000ab	75 14		 jne	 SHORT $LN79@rotate

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  000ad	6a 03		 push	 3
  000af	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$11[ebp]
  000b2	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  000b7	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$11[ebp]
  000ba	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  000bf	eb 02		 jmp	 SHORT $LN78@rotate
$LN79@rotate:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  000c1	8b 18		 mov	 ebx, DWORD PTR [eax]
$LN78@rotate:
  000c3	8b 7d 28	 mov	 edi, DWORD PTR __Last$[ebp+8]

; 3439 : 	_STD advance(_First, _STD distance(_Mid, _Last));

  000c6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 124  : 		if (_Myproxy == _Right._Myproxy)

  000cd	8b 45 14	 mov	 eax, DWORD PTR __Mid$[ebp]

; 118  : 		{	// copy an iterator

  000d0	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T12[ebp], 0

; 124  : 		if (_Myproxy == _Right._Myproxy)

  000d7	85 c0		 test	 eax, eax
  000d9	74 1f		 je	 SHORT $LN100@rotate

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  000db	8b 00		 mov	 eax, DWORD PTR [eax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  000dd	85 c0		 test	 eax, eax
  000df	75 14		 jne	 SHORT $LN101@rotate

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  000e1	6a 03		 push	 3
  000e3	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  000e6	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  000eb	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  000ee	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  000f3	eb 05		 jmp	 SHORT $LN100@rotate
$LN101@rotate:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  000f5	8b 00		 mov	 eax, DWORD PTR [eax]
  000f7	89 45 f0	 mov	 DWORD PTR $T12[ebp], eax
$LN100@rotate:
  000fa	8b 45 1c	 mov	 eax, DWORD PTR __Mid$[ebp+8]
  000fd	89 45 e4	 mov	 DWORD PTR $T5[ebp], eax

; 3439 : 	_STD advance(_First, _STD distance(_Mid, _Last));

  00100	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00107	85 db		 test	 ebx, ebx
  00109	74 17		 je	 SHORT $LN129@rotate

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  0010b	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  0010e	75 12		 jne	 SHORT $LN129@rotate

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00110	6a 03		 push	 3
  00112	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00115	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  0011a	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  0011d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN129@rotate:

; 179  : 		}
; 180  : 
; 181  : 	_Iterator_base12 **_Getpnext()
; 182  : 		{	// get address of remaining iterator chain
; 183  : 		return (&_Mynextiter);
; 184  : 		}
; 185  : 
; 186  : 	void _Orphan_me()
; 187  : 		{	// cut ties with parent
; 188  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 189  : 		if (_Myproxy != 0)
; 190  : 			{	// adopted, remove self from list
; 191  : 			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
; 192  : 			while (*_Pnext != 0 && *_Pnext != this)
; 193  : 				_Pnext = &(*_Pnext)->_Mynextiter;
; 194  : 
; 195  : 			if (*_Pnext == 0)
; 196  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");
; 197  : 			*_Pnext = _Mynextiter;
; 198  : 			_Myproxy = 0;
; 199  : 			}
; 200  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 201  : 		}
; 202  : 
; 203  : 	_Container_proxy *_Myproxy;
; 204  : 	_Iterator_base12 *_Mynextiter;
; 205  : 	};
; 206  : 
; 207  : 		// MEMBER FUNCTIONS FOR _Container_base12
; 208  : inline void _Container_base12::_Orphan_all()
; 209  : 	{	// orphan all iterators
; 210  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 211  : 	if (_Myproxy != 0)
; 212  : 		{	// proxy allocated, drain it
; 213  : 		_Lockit _Lock(_LOCK_DEBUG);
; 214  : 
; 215  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
; 216  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)
; 217  : 			(*_Pnext)->_Myproxy = 0;
; 218  : 		_Myproxy->_Myfirstiter = 0;
; 219  : 		}
; 220  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 221  : 	}
; 222  : 
; 223  : inline void _Container_base12::_Swap_all(_Container_base12& _Right)
; 224  : 	{	// swap all iterators
; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 	_Lockit _Lock(_LOCK_DEBUG);
; 227  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 228  : 
; 229  : 	_Container_proxy *_Temp = _Myproxy;
; 230  : 	_Myproxy = _Right._Myproxy;
; 231  : 	_Right._Myproxy = _Temp;
; 232  : 
; 233  : 	if (_Myproxy != 0)
; 234  : 		_Myproxy->_Mycont = (_Container_base12 *)this;
; 235  : 	if (_Right._Myproxy != 0)
; 236  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
; 237  : 	}
; 238  : 
; 239  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 240  : typedef _Container_base0 _Container_base;
; 241  : typedef _Iterator_base0 _Iterator_base;
; 242  : 
; 243  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 244  : typedef _Container_base12 _Container_base;
; 245  : typedef _Iterator_base12 _Iterator_base;
; 246  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 247  : 
; 248  : 		// TEMPLATE FUNCTION _Is_checked AND FRIENDS
; 249  : 
; 250  : 		// TEMPLATE STRUCT _Get_unchecked_type AND FRIENDS
; 251  :  #define _UNCHECKED_TYPE(_Iter) \
; 252  : 	typename _Get_unchecked_type<_Iter>::type
; 253  : 
; 254  : 		// TEMPLATE STRUCT _Get_unchecked_type
; 255  : template<class _Ty>
; 256  : 	struct _Get_unchecked_type
; 257  : 		_GET_TYPE_OR_DEFAULT(_Unchecked_type,
; 258  : 			_Ty);
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Is_checked_helper
; 261  : template<class _Ty>
; 262  : 	struct _Is_checked_helper
; 263  : 		_HAS_ONE_TYPE(_Unchecked_type);
; 264  : 
; 265  : 		// TEMPLATE FUNCTION _Is_checked
; 266  : template<class _Iter> inline
; 267  : 	typename _Is_checked_helper<_Iter>::type _Is_checked(_Iter)
; 268  : 	{	// return type is derived from true_type if iterator is checked
; 269  : 	return (typename _Is_checked_helper<_Iter>::type());
; 270  : 	}
; 271  : 
; 272  : 		// TEMPLATE FUNCTION _Unchecked
; 273  : template<class _Iter> inline
; 274  : 	_Iter _Unchecked(_Iter _Src)
; 275  : 	{	// construct unchecked from checked, generic
; 276  : 	return (_Src);
; 277  : 	}
; 278  : 
; 279  : 		// TEMPLATE FUNCTION _Rechecked
; 280  : template<class _Iter,
; 281  : 	class _UIter> inline
; 282  : 	_Iter& _Rechecked(_Iter& _Dest, _UIter _Src)
; 283  : 	{	// reset checked from unchecked, generic
; 284  : 	_Dest = _Src;
; 285  : 	return (_Dest);
; 286  : 	}
; 287  : 
; 288  : 		//	ITERATOR STUFF (from <iterator>)
; 289  : 		// ITERATOR TAGS (from <iterator>)
; 290  : struct input_iterator_tag
; 291  : 	{	// identifying tag for input iterators
; 292  : 	};
; 293  : 
; 294  : struct output_iterator_tag
; 295  : 	{	// identifying tag for output iterators
; 296  : 	};
; 297  : 
; 298  : struct forward_iterator_tag
; 299  : 	: public input_iterator_tag, output_iterator_tag
; 300  : 	{	// identifying tag for forward iterators
; 301  : 	};
; 302  : 
; 303  : struct bidirectional_iterator_tag
; 304  : 	: public forward_iterator_tag
; 305  : 	{	// identifying tag for bidirectional iterators
; 306  : 	};
; 307  : 
; 308  : struct random_access_iterator_tag
; 309  : 	: public bidirectional_iterator_tag
; 310  : 	{	// identifying tag for random-access iterators
; 311  : 	};
; 312  : 
; 313  : 		// POINTER ITERATOR TAGS
; 314  : struct _Nonscalar_ptr_iterator_tag
; 315  : 	{	// pointer to unknown type
; 316  : 	};
; 317  : struct _Scalar_ptr_iterator_tag
; 318  : 	{	// pointer to scalar type
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE CLASS iterator
; 322  : template<class _Category,
; 323  : 	class _Ty,
; 324  : 	class _Diff = ptrdiff_t,
; 325  : 	class _Pointer = _Ty *,
; 326  : 	class _Reference = _Ty&>
; 327  : 	struct iterator
; 328  : 	{	// base type for iterator classes
; 329  : 	typedef _Category iterator_category;
; 330  : 	typedef _Ty value_type;
; 331  : 	typedef _Diff difference_type;
; 332  : 	typedef _Diff distance_type;	// retained
; 333  : 	typedef _Pointer pointer;
; 334  : 	typedef _Reference reference;
; 335  : 	};
; 336  : 
; 337  : template<class _Category,
; 338  : 	class _Ty,
; 339  : 	class _Diff,
; 340  : 	class _Pointer,
; 341  : 	class _Reference,
; 342  : 	class _Base>
; 343  : 	struct _Iterator012
; 344  : 		: public _Base
; 345  : 	{	// base type for debugging iterator classes
; 346  : 	typedef _Category iterator_category;
; 347  : 	typedef _Ty value_type;
; 348  : 	typedef _Diff difference_type;
; 349  : 	typedef _Diff distance_type;	// retained
; 350  : 	typedef _Pointer pointer;
; 351  : 	typedef _Reference reference;
; 352  : 	};
; 353  : 
; 354  : struct _Outit
; 355  : 	: public iterator<output_iterator_tag, void, void,
; 356  : 		void, void>
; 357  : 	{	// base for output iterators
; 358  : 	};
; 359  : 
; 360  : 		// TEMPLATE CLASS iterator_traits
; 361  : template<class _Iter>
; 362  : 	struct iterator_traits
; 363  : 	{	// get traits from iterator _Iter
; 364  : 	typedef typename _Iter::iterator_category iterator_category;
; 365  : 	typedef typename _Iter::value_type value_type;
; 366  : 	typedef typename _Iter::difference_type difference_type;
; 367  : 	typedef difference_type distance_type;	// retained
; 368  : 	typedef typename _Iter::pointer pointer;
; 369  : 	typedef typename _Iter::reference reference;
; 370  : 	};
; 371  : 
; 372  : template<class _Ty>
; 373  : 	struct iterator_traits<_Ty *>
; 374  : 	{	// get traits from pointer
; 375  : 	typedef random_access_iterator_tag iterator_category;
; 376  : 	typedef _Ty value_type;
; 377  : 	typedef ptrdiff_t difference_type;
; 378  : 	typedef ptrdiff_t distance_type;	// retained
; 379  : 	typedef _Ty *pointer;
; 380  : 	typedef _Ty& reference;
; 381  : 	};
; 382  : 
; 383  : template<class _Ty>
; 384  : 	struct iterator_traits<const _Ty *>
; 385  : 	{	// get traits from const pointer
; 386  : 	typedef random_access_iterator_tag iterator_category;
; 387  : 	typedef _Ty value_type;
; 388  : 	typedef ptrdiff_t difference_type;
; 389  : 	typedef ptrdiff_t distance_type;	// retained
; 390  : 	typedef const _Ty *pointer;
; 391  : 	typedef const _Ty& reference;
; 392  : 	};
; 393  : 
; 394  : 		// TEMPLATE FUNCTION _Iter_cat
; 395  : template<class _Iter> inline
; 396  : 	typename iterator_traits<_Iter>::iterator_category
; 397  : 		_Iter_cat(const _Iter&)
; 398  : 	{	// return category from iterator argument
; 399  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 400  : 	return (_Cat);
; 401  : 	}
; 402  : 
; 403  : 		// TEMPLATE FUNCTION _Ptr_cat
; 404  : template<class _Iter1,
; 405  : 	class _Iter2> inline
; 406  : 	_Nonscalar_ptr_iterator_tag _Ptr_cat(_Iter1&, _Iter2&)
; 407  : 	{	// return pointer category from arbitrary arguments
; 408  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 409  : 	return (_Cat);
; 410  : 	}
; 411  : 
; 412  : template<class _Elem1,
; 413  : 	class _Elem2>
; 414  : 	struct _Ptr_cat_helper
; 415  : 	{	// determines pointer category, nonscalar by default
; 416  : 	typedef _Nonscalar_ptr_iterator_tag type;
; 417  : 	};
; 418  : 
; 419  : template<class _Elem>
; 420  : 	struct _Ptr_cat_helper<_Elem, _Elem>
; 421  : 	{	// determines pointer category, common type
; 422  : 	typedef typename _If<is_scalar<_Elem>::value,
; 423  : 		_Scalar_ptr_iterator_tag,
; 424  : 		_Nonscalar_ptr_iterator_tag>::type type;
; 425  : 	};
; 426  : 
; 427  : template<class _Anything>
; 428  : 	struct _Ptr_cat_helper<_Anything *, const _Anything *>
; 429  : 	{	// determines pointer category
; 430  : 	typedef _Scalar_ptr_iterator_tag type;
; 431  : 	};
; 432  : 
; 433  : template<class _Elem1,
; 434  : 	class _Elem2> inline
; 435  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type
; 436  : 		_Ptr_cat(_Elem1 *, _Elem2 *)
; 437  : 	{	// return pointer category from pointers
; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);
; 440  : 	}
; 441  : 
; 442  : template<class _Elem1,
; 443  : 	class _Elem2> inline
; 444  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type
; 445  : 		_Ptr_cat(const _Elem1 *, _Elem2 *)
; 446  : 	{	// return pointer category from pointers
; 447  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 448  : 	return (_Cat);
; 449  : 	}
; 450  : 
; 451  : 		// DEBUG TESTING MACROS
; 452  : 
; 453  :  #if _ITERATOR_DEBUG_LEVEL < 2
; 454  :   #define _DEBUG_LT(x, y)	((x) < (y))
; 455  :   #define _DEBUG_LT_PRED(pred, x, y)	pred(x, y)
; 456  :   #define _DEBUG_ORDER(first, last)
; 457  :   #define _DEBUG_ORDER_PRED(first, last, pred)
; 458  :   #define _DEBUG_POINTER(first)
; 459  :   #define _DEBUG_POINTER2(first, file, line)
; 460  :   #define _DEBUG_RANGE(first, last)
; 461  :   #define _DEBUG_RANGE2(first, last, file, line)
; 462  : 
; 463  :  #else /* _ITERATOR_DEBUG_LEVEL < 2 */
; 464  : 
; 465  :   #define _FILENAME	__FILEW__
; 466  : 
; 467  :   #ifndef _DEBUG_LT_IMPL
; 468  :    #define _DEBUG_LT_IMPL	_Debug_lt
; 469  :   #endif /* _DEBUG_LT_IMPL */
; 470  : 
; 471  :   #define _DEBUG_LT(x, y) \
; 472  : 	_DEBUG_LT_IMPL(x, y, _FILENAME, __LINE__)
; 473  : 
; 474  :   #ifndef _DEBUG_LT_PRED_IMPL
; 475  :    #define _DEBUG_LT_PRED_IMPL	_Debug_lt_pred
; 476  :   #endif /* _DEBUG_LT_PRED_IMPL */
; 477  : 
; 478  :   #define _DEBUG_LT_PRED(pred, x, y)	\
; 479  : 	_DEBUG_LT_PRED_IMPL(pred, x, y, _FILENAME, __LINE__)
; 480  : 
; 481  :   #ifndef _DEBUG_ORDER_IMPL
; 482  :    #define _DEBUG_ORDER_IMPL	_Debug_order
; 483  :   #endif /* _DEBUG_ORDER_IMPL */
; 484  : 
; 485  :   #define _DEBUG_ORDER(first, last)	\
; 486  : 	_DEBUG_ORDER_IMPL(first, last, _FILENAME, __LINE__)
; 487  :   #define _DEBUG_ORDER_PRED(first, last, pred)	\
; 488  : 	_DEBUG_ORDER_IMPL(first, last, pred, _FILENAME, __LINE__)
; 489  : 
; 490  :   #ifndef _DEBUG_POINTER_IMPL
; 491  :    #define _DEBUG_POINTER_IMPL	_Debug_pointer
; 492  :   #endif /* _DEBUG_POINTER_IMPL */
; 493  : 
; 494  :   #define _DEBUG_POINTER(first)	\
; 495  : 	_DEBUG_POINTER_IMPL(first, _FILENAME, __LINE__)
; 496  :   #define _DEBUG_POINTER2(first, file, line)	\
; 497  : 	_DEBUG_POINTER_IMPL(first, file, line)
; 498  : 
; 499  :   #ifndef _DEBUG_RANGE_IMPL
; 500  :    #define _DEBUG_RANGE_IMPL	_Debug_range
; 501  :   #endif /* _DEBUG_RANGE_IMPL */
; 502  : 
; 503  :   #define _DEBUG_RANGE(first, last)	\
; 504  : 	_DEBUG_RANGE_IMPL(first, last, _FILENAME, __LINE__)
; 505  :   #define _DEBUG_RANGE2(first, last, file, line)	\
; 506  : 	_DEBUG_RANGE_IMPL(first, last, file, line)
; 507  : 
; 508  : 		// TEMPLATE FUNCTION _Debug_lt
; 509  : template<class _Ty1, class _Ty2> inline
; 510  : 	bool _Debug_lt(const _Ty1& _Left, const _Ty2& _Right,
; 511  : 		_Dbfile_t _File, _Dbline_t _Line)
; 512  : 	{	// test if _Left < _Right and operator< is strict weak ordering
; 513  : 	if (!(_Left < _Right))
; 514  : 		return (false);
; 515  : 	else if (_Right < _Left)
; 516  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);
; 517  : 	return (true);
; 518  : 	}
; 519  : 
; 520  : template<class _Ty1, class _Ty2> inline
; 521  : 	bool _Debug_lt(const _Ty1& _Left, _Ty2& _Right,
; 522  : 		_Dbfile_t _File, _Dbline_t _Line)
; 523  : 	{	// test if _Left < _Right and operator< is strict weak ordering
; 524  : 	if (!(_Left < _Right))
; 525  : 		return (false);
; 526  : 	else if (_Right < _Left)
; 527  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);
; 528  : 	return (true);
; 529  : 	}
; 530  : 
; 531  : template<class _Ty1, class _Ty2> inline
; 532  : 	bool _Debug_lt(_Ty1& _Left, const _Ty2& _Right,
; 533  : 		_Dbfile_t _File, _Dbline_t _Line)
; 534  : 	{	// test if _Left < _Right and operator< is strict weak ordering
; 535  : 	if (!(_Left < _Right))
; 536  : 		return (false);
; 537  : 	else if (_Right < _Left)
; 538  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);
; 539  : 	return (true);
; 540  : 	}
; 541  : 
; 542  : template<class _Ty1, class _Ty2> inline
; 543  : 	bool _Debug_lt(_Ty1& _Left, _Ty2& _Right,
; 544  : 		_Dbfile_t _File, _Dbline_t _Line)
; 545  : 	{	// test if _Left < _Right and operator< is strict weak ordering
; 546  : 	if (!(_Left < _Right))
; 547  : 		return (false);
; 548  : 	else if (_Right < _Left)
; 549  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);
; 550  : 	return (true);
; 551  : 	}
; 552  : 
; 553  : 		// TEMPLATE FUNCTION _Debug_lt_pred
; 554  : template<class _Pr, class _Ty1, class _Ty2> inline
; 555  : 	bool _Debug_lt_pred(_Pr _Pred,
; 556  : 		const _Ty1& _Left, const _Ty2& _Right,
; 557  : 		_Dbfile_t _File, _Dbline_t _Line)
; 558  : 	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering
; 559  : 	if (!_Pred(_Left, _Right))
; 560  : 		return (false);
; 561  : 	else if (_Pred(_Right, _Left))
; 562  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);
; 563  : 	return (true);
; 564  : 	}
; 565  : 
; 566  : template<class _Pr, class _Ty1, class _Ty2> inline
; 567  : 	bool _Debug_lt_pred(_Pr _Pred,
; 568  : 		const _Ty1& _Left, _Ty2& _Right,
; 569  : 		_Dbfile_t _File, _Dbline_t _Line)
; 570  : 	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering
; 571  : 	if (!_Pred(_Left, _Right))
; 572  : 		return (false);
; 573  : 	else if (_Pred(_Right, _Left))
; 574  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);
; 575  : 	return (true);
; 576  : 	}
; 577  : 
; 578  : template<class _Pr, class _Ty1, class _Ty2> inline
; 579  : 	bool _Debug_lt_pred(_Pr _Pred,
; 580  : 		_Ty1& _Left, const _Ty2& _Right,
; 581  : 		_Dbfile_t _File, _Dbline_t _Line)
; 582  : 	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering
; 583  : 	if (!_Pred(_Left, _Right))
; 584  : 		return (false);
; 585  : 	else if (_Pred(_Right, _Left))
; 586  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);
; 587  : 	return (true);
; 588  : 	}
; 589  : 
; 590  : template<class _Pr, class _Ty1, class _Ty2> inline
; 591  : 	bool _Debug_lt_pred(_Pr _Pred,
; 592  : 		_Ty1& _Left, _Ty2& _Right,
; 593  : 		_Dbfile_t _File, _Dbline_t _Line)
; 594  : 	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering
; 595  : 	if (!_Pred(_Left, _Right))
; 596  : 		return (false);
; 597  : 	else if (_Pred(_Right, _Left))
; 598  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);
; 599  : 	return (true);
; 600  : 	}
; 601  : 
; 602  : 		// TEMPLATE FUNCTION _Debug_pointer
; 603  : template<class _InIt> inline
; 604  : 	void _Debug_pointer(_InIt&, _Dbfile_t, _Dbline_t)
; 605  : 	{	// test pointer for non-singularity, arbitrary type
; 606  : 	}
; 607  : 
; 608  : template<class _Ty> inline
; 609  : 	void _Debug_pointer(const _Ty *_First, _Dbfile_t _File, _Dbline_t _Line)
; 610  : 	{	// test iterator for non-singularity, const pointers
; 611  : 	if (_First == 0)
; 612  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);
; 613  : 	}
; 614  : 
; 615  : template<class _Ty> inline
; 616  : 	void _Debug_pointer(_Ty *_First, _Dbfile_t _File, _Dbline_t _Line)
; 617  : 	{	// test iterator for non-singularity, pointers
; 618  : 	if (_First == 0)
; 619  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);
; 620  : 	}
; 621  : 
; 622  : 		// TEMPLATE FUNCTION _Debug_range
; 623  : template<class _InIt> inline
; 624  : 	void _Debug_range2(_InIt _First, _InIt _Last, _Dbfile_t, _Dbline_t,
; 625  : 		input_iterator_tag)
; 626  : 	{	// test iterator pair for valid range, arbitrary iterators
; 627  : 	bool _Ans = _First == _Last;	// make sure they're comparable
; 628  : 	_Ans = _Ans;	// to quiet diagnostics
; 629  : 	}
; 630  : 
; 631  : template<class _RanIt> inline
; 632  : 	void _Debug_range2(_RanIt _First, _RanIt _Last,
; 633  : 		_Dbfile_t _File, _Dbline_t _Line,
; 634  : 		random_access_iterator_tag)
; 635  : 	{	// test iterator pair for valid range, random-access iterators
; 636  : 	if (_First != _Last)
; 637  : 		{	// check for non-null pointers, valid range
; 638  : 		_DEBUG_POINTER2(_First, _File, _Line);
; 639  : 		_DEBUG_POINTER2(_Last, _File, _Line);
; 640  : 		if (_Last < _First)
; 641  : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);
; 642  : 		}
; 643  : 	}
; 644  : 
; 645  : template<class _InIt> inline
; 646  : 	void _Debug_range(_InIt _First, _InIt _Last,
; 647  : 		_Dbfile_t _File, _Dbline_t _Line)
; 648  : 	{	// test iterator pair for valid range
; 649  : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));
; 650  : 	}
; 651  : 
; 652  : 		// TEMPLATE FUNCTION _Debug_order
; 653  : template<class _InIt> inline
; 654  : 	void _Debug_order2(_InIt, _InIt,
; 655  : 		_Dbfile_t, _Dbline_t, input_iterator_tag)
; 656  : 	{	// test if range is ordered by operator<, input iterators
; 657  : 	}
; 658  : 
; 659  : template<class _FwdIt> inline
; 660  : 	void _Debug_order2(_FwdIt _First, _FwdIt _Last,
; 661  : 		_Dbfile_t _File, _Dbline_t _Line, forward_iterator_tag)
; 662  : 	{	// test if range is ordered by operator<, forward iterators
; 663  : 	for (_FwdIt _Next = _First; _First != _Last && ++_Next != _Last; ++_First)
; 664  : 		if (_DEBUG_LT(*_Next, *_First))
; 665  : 			_DEBUG_ERROR2("sequence not ordered", _File, _Line);
; 666  : 	}
; 667  : 
; 668  : template<class _InIt> inline
; 669  : 	void _Debug_order(_InIt _First, _InIt _Last,
; 670  : 		_Dbfile_t _File, _Dbline_t _Line)
; 671  : 	{	// test is range is ordered by operator<
; 672  : 	_DEBUG_RANGE2(_First, _Last, _File, _Line);
; 673  : 	_Debug_order2(_First, _Last, _File, _Line, _Iter_cat(_First));
; 674  : 	}
; 675  : 
; 676  : 		// TEMPLATE FUNCTION _Debug_order_pred
; 677  : template<class _InIt,
; 678  : 	class _Pr> inline
; 679  : 	void _Debug_order2(_InIt, _InIt, _Pr,
; 680  : 		_Dbfile_t, _Dbline_t, input_iterator_tag)
; 681  : 	{	// test if range is ordered by predicate, input iterators
; 682  : 	}
; 683  : 
; 684  : template<class _FwdIt,
; 685  : 	class _Pr> inline
; 686  : 	void _Debug_order2(_FwdIt _First, _FwdIt _Last, _Pr _Pred,
; 687  : 		_Dbfile_t _File, _Dbline_t _Line, forward_iterator_tag)
; 688  : 	{	// test if range is ordered by predicate, forward iterators
; 689  : 	for (_FwdIt _Next = _First; _First != _Last && ++_Next != _Last; ++_First)
; 690  : 		if (_DEBUG_LT_PRED(_Pred, *_Next, *_First))
; 691  : 			_DEBUG_ERROR2("sequence not ordered", _File, _Line);
; 692  : 	}
; 693  : 
; 694  : template<class _InIt,
; 695  : 	class _Pr> inline
; 696  : 	void _Debug_order(_InIt _First, _InIt _Last, _Pr _Pred,
; 697  : 		_Dbfile_t _File, _Dbline_t _Line)
; 698  : 	{	// test if range is ordered by predicate
; 699  : 	_DEBUG_RANGE2(_First, _Last, _File, _Line);
; 700  : 	_DEBUG_POINTER2(_Pred, _File, _Line);
; 701  : 	_Debug_order2(_First, _Last, _Pred, _File, _Line, _Iter_cat(_First));
; 702  : 	}
; 703  :  #endif /* _ITERATOR_DEBUG_LEVEL < 2 */
; 704  : 
; 705  : 		// MORE ITERATOR STUFF (from <iterator>)
; 706  : 		// TEMPLATE FUNCTION _Val_type
; 707  : 
; 708  : template<class _Iter> inline
; 709  : 	typename iterator_traits<_Iter>::value_type *_Val_type(_Iter)
; 710  : 	{	// return value type from arbitrary argument
; 711  : 	return (0);
; 712  : 	}
; 713  : 
; 714  : 		// TEMPLATE FUNCTION advance
; 715  : template<class _InIt,
; 716  : 	class _Diff> inline
; 717  : 	void _Advance(_InIt& _Where, _Diff _Off, input_iterator_tag)
; 718  : 	{	// increment iterator by offset, input iterators
; 719  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 720  : 	if (_Off < 0)
; 721  : 		_DEBUG_ERROR("negative offset in advance");
; 722  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 723  : 
; 724  : 	for (; 0 < _Off; --_Off)
; 725  : 		++_Where;
; 726  : 	}
; 727  : 
; 728  : template<class _FwdIt,
; 729  : 	class _Diff> inline
; 730  : 	void _Advance(_FwdIt& _Where, _Diff _Off, forward_iterator_tag)
; 731  : 	{	// increment iterator by offset, forward iterators
; 732  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 733  : 	if (_Off < 0)
; 734  : 		_DEBUG_ERROR("negative offset in advance");
; 735  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 736  : 
; 737  : 	for (; 0 < _Off; --_Off)
; 738  : 		++_Where;
; 739  : 	}
; 740  : 
; 741  : template<class _BidIt,
; 742  : 	class _Diff> inline
; 743  : 	void _Advance(_BidIt& _Where, _Diff _Off, bidirectional_iterator_tag)
; 744  : 	{	// increment iterator by offset, bidirectional iterators
; 745  : 	for (; 0 < _Off; --_Off)
; 746  : 		++_Where;
; 747  : 	for (; _Off < 0; ++_Off)
; 748  : 		--_Where;
; 749  : 	}
; 750  : 
; 751  : template<class _RanIt,
; 752  : 	class _Diff> inline
; 753  : 	void _Advance(_RanIt& _Where, _Diff _Off, random_access_iterator_tag)
; 754  : 	{	// increment iterator by offset, random-access iterators
; 755  : 	_Where += _Off;
; 756  : 	}
; 757  : 
; 758  : template<class _InIt,
; 759  : 	class _Diff> inline
; 760  : 	void advance(_InIt& _Where, _Diff _Off)
; 761  : 	{	// increment iterator by offset, arbitrary iterators
; 762  : 	_Advance(_Where, _Off, _Iter_cat(_Where));
; 763  : 	}
; 764  : 
; 765  : 		// TEMPLATE FUNCTION _Dist_type
; 766  : 
; 767  : template<class _Iter> inline
; 768  : 	typename iterator_traits<_Iter>::difference_type
; 769  : 		*_Dist_type(_Iter)
; 770  : 	{	// return distance type from arbitrary argument
; 771  : 	return (0);
; 772  : 	}
; 773  : 
; 774  : 		// TEMPLATE FUNCTIONS distance and _Distance
; 775  : template<class _InIt,
; 776  : 	class _Diff> inline
; 777  : 		void _Distance2(_InIt _First, _InIt _Last, _Diff& _Off,
; 778  : 			input_iterator_tag)
; 779  : 	{	// add to _Off distance between input iterators
; 780  : 	for (; _First != _Last; ++_First)
; 781  : 		++_Off;
; 782  : 	}
; 783  : 
; 784  : template<class _FwdIt,
; 785  : 	class _Diff> inline
; 786  : 		void _Distance2(_FwdIt _First, _FwdIt _Last, _Diff& _Off,
; 787  : 			forward_iterator_tag)
; 788  : 	{	// add to _Off distance between forward iterators (redundant)
; 789  : 	for (; _First != _Last; ++_First)
; 790  : 		++_Off;
; 791  : 	}
; 792  : 
; 793  : template<class _BidIt,
; 794  : 	class _Diff> inline
; 795  : 		void _Distance2(_BidIt _First, _BidIt _Last, _Diff& _Off,
; 796  : 			bidirectional_iterator_tag)
; 797  : 	{	// add to _Off distance between bidirectional iterators (redundant)
; 798  : 	for (; _First != _Last; ++_First)
; 799  : 		++_Off;
; 800  : 	}
; 801  : 
; 802  : template<class _RanIt,
; 803  : 	class _Diff> inline
; 804  : 		void _Distance2(_RanIt _First, _RanIt _Last, _Diff& _Off,
; 805  : 			random_access_iterator_tag)
; 806  : 	{	// add to _Off distance between random-access iterators
; 807  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 808  : 	if (_First != _Last)
; 809  : 		{	// check for null pointers
; 810  : 		_DEBUG_POINTER(_First);
; 811  : 		_DEBUG_POINTER(_Last);
; 812  : 		}
; 813  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 814  : 
; 815  : 	_Off += _Last - _First;
; 816  : 	}
; 817  : 
; 818  : template<class _InIt> inline
; 819  : 	typename iterator_traits<_InIt>::difference_type
; 820  : 		distance(_InIt _First, _InIt _Last)
; 821  : 	{	// return distance between iterators
; 822  : 	typename iterator_traits<_InIt>::difference_type _Off = 0;
; 823  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));

  00122	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00129	8b 45 f0	 mov	 eax, DWORD PTR $T12[ebp]
  0012c	85 c0		 test	 eax, eax
  0012e	74 17		 je	 SHORT $LN151@rotate

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00130	83 38 00	 cmp	 DWORD PTR [eax], 0
  00133	75 12		 jne	 SHORT $LN151@rotate

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00135	6a 03		 push	 3
  00137	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$10[ebp]
  0013a	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  0013f	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$10[ebp]
  00142	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN151@rotate:

; 179  : 		}
; 180  : 
; 181  : 	_Iterator_base12 **_Getpnext()
; 182  : 		{	// get address of remaining iterator chain
; 183  : 		return (&_Mynextiter);
; 184  : 		}
; 185  : 
; 186  : 	void _Orphan_me()
; 187  : 		{	// cut ties with parent
; 188  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 189  : 		if (_Myproxy != 0)
; 190  : 			{	// adopted, remove self from list
; 191  : 			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
; 192  : 			while (*_Pnext != 0 && *_Pnext != this)
; 193  : 				_Pnext = &(*_Pnext)->_Mynextiter;
; 194  : 
; 195  : 			if (*_Pnext == 0)
; 196  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");
; 197  : 			*_Pnext = _Mynextiter;
; 198  : 			_Myproxy = 0;
; 199  : 			}
; 200  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 201  : 		}
; 202  : 
; 203  : 	_Container_proxy *_Myproxy;
; 204  : 	_Iterator_base12 *_Mynextiter;
; 205  : 	};
; 206  : 
; 207  : 		// MEMBER FUNCTIONS FOR _Container_base12
; 208  : inline void _Container_base12::_Orphan_all()
; 209  : 	{	// orphan all iterators
; 210  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 211  : 	if (_Myproxy != 0)
; 212  : 		{	// proxy allocated, drain it
; 213  : 		_Lockit _Lock(_LOCK_DEBUG);
; 214  : 
; 215  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
; 216  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)
; 217  : 			(*_Pnext)->_Myproxy = 0;
; 218  : 		_Myproxy->_Myfirstiter = 0;
; 219  : 		}
; 220  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 221  : 	}
; 222  : 
; 223  : inline void _Container_base12::_Swap_all(_Container_base12& _Right)
; 224  : 	{	// swap all iterators
; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 	_Lockit _Lock(_LOCK_DEBUG);
; 227  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 228  : 
; 229  : 	_Container_proxy *_Temp = _Myproxy;
; 230  : 	_Myproxy = _Right._Myproxy;
; 231  : 	_Right._Myproxy = _Temp;
; 232  : 
; 233  : 	if (_Myproxy != 0)
; 234  : 		_Myproxy->_Mycont = (_Container_base12 *)this;
; 235  : 	if (_Right._Myproxy != 0)
; 236  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
; 237  : 	}
; 238  : 
; 239  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 240  : typedef _Container_base0 _Container_base;
; 241  : typedef _Iterator_base0 _Iterator_base;
; 242  : 
; 243  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 244  : typedef _Container_base12 _Container_base;
; 245  : typedef _Iterator_base12 _Iterator_base;
; 246  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 247  : 
; 248  : 		// TEMPLATE FUNCTION _Is_checked AND FRIENDS
; 249  : 
; 250  : 		// TEMPLATE STRUCT _Get_unchecked_type AND FRIENDS
; 251  :  #define _UNCHECKED_TYPE(_Iter) \
; 252  : 	typename _Get_unchecked_type<_Iter>::type
; 253  : 
; 254  : 		// TEMPLATE STRUCT _Get_unchecked_type
; 255  : template<class _Ty>
; 256  : 	struct _Get_unchecked_type
; 257  : 		_GET_TYPE_OR_DEFAULT(_Unchecked_type,
; 258  : 			_Ty);
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Is_checked_helper
; 261  : template<class _Ty>
; 262  : 	struct _Is_checked_helper
; 263  : 		_HAS_ONE_TYPE(_Unchecked_type);
; 264  : 
; 265  : 		// TEMPLATE FUNCTION _Is_checked
; 266  : template<class _Iter> inline
; 267  : 	typename _Is_checked_helper<_Iter>::type _Is_checked(_Iter)
; 268  : 	{	// return type is derived from true_type if iterator is checked
; 269  : 	return (typename _Is_checked_helper<_Iter>::type());
; 270  : 	}
; 271  : 
; 272  : 		// TEMPLATE FUNCTION _Unchecked
; 273  : template<class _Iter> inline
; 274  : 	_Iter _Unchecked(_Iter _Src)
; 275  : 	{	// construct unchecked from checked, generic
; 276  : 	return (_Src);
; 277  : 	}
; 278  : 
; 279  : 		// TEMPLATE FUNCTION _Rechecked
; 280  : template<class _Iter,
; 281  : 	class _UIter> inline
; 282  : 	_Iter& _Rechecked(_Iter& _Dest, _UIter _Src)
; 283  : 	{	// reset checked from unchecked, generic
; 284  : 	_Dest = _Src;
; 285  : 	return (_Dest);
; 286  : 	}
; 287  : 
; 288  : 		//	ITERATOR STUFF (from <iterator>)
; 289  : 		// ITERATOR TAGS (from <iterator>)
; 290  : struct input_iterator_tag
; 291  : 	{	// identifying tag for input iterators
; 292  : 	};
; 293  : 
; 294  : struct output_iterator_tag
; 295  : 	{	// identifying tag for output iterators
; 296  : 	};
; 297  : 
; 298  : struct forward_iterator_tag
; 299  : 	: public input_iterator_tag, output_iterator_tag
; 300  : 	{	// identifying tag for forward iterators
; 301  : 	};
; 302  : 
; 303  : struct bidirectional_iterator_tag
; 304  : 	: public forward_iterator_tag
; 305  : 	{	// identifying tag for bidirectional iterators
; 306  : 	};
; 307  : 
; 308  : struct random_access_iterator_tag
; 309  : 	: public bidirectional_iterator_tag
; 310  : 	{	// identifying tag for random-access iterators
; 311  : 	};
; 312  : 
; 313  : 		// POINTER ITERATOR TAGS
; 314  : struct _Nonscalar_ptr_iterator_tag
; 315  : 	{	// pointer to unknown type
; 316  : 	};
; 317  : struct _Scalar_ptr_iterator_tag
; 318  : 	{	// pointer to scalar type
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE CLASS iterator
; 322  : template<class _Category,
; 323  : 	class _Ty,
; 324  : 	class _Diff = ptrdiff_t,
; 325  : 	class _Pointer = _Ty *,
; 326  : 	class _Reference = _Ty&>
; 327  : 	struct iterator
; 328  : 	{	// base type for iterator classes
; 329  : 	typedef _Category iterator_category;
; 330  : 	typedef _Ty value_type;
; 331  : 	typedef _Diff difference_type;
; 332  : 	typedef _Diff distance_type;	// retained
; 333  : 	typedef _Pointer pointer;
; 334  : 	typedef _Reference reference;
; 335  : 	};
; 336  : 
; 337  : template<class _Category,
; 338  : 	class _Ty,
; 339  : 	class _Diff,
; 340  : 	class _Pointer,
; 341  : 	class _Reference,
; 342  : 	class _Base>
; 343  : 	struct _Iterator012
; 344  : 		: public _Base
; 345  : 	{	// base type for debugging iterator classes
; 346  : 	typedef _Category iterator_category;
; 347  : 	typedef _Ty value_type;
; 348  : 	typedef _Diff difference_type;
; 349  : 	typedef _Diff distance_type;	// retained
; 350  : 	typedef _Pointer pointer;
; 351  : 	typedef _Reference reference;
; 352  : 	};
; 353  : 
; 354  : struct _Outit
; 355  : 	: public iterator<output_iterator_tag, void, void,
; 356  : 		void, void>
; 357  : 	{	// base for output iterators
; 358  : 	};
; 359  : 
; 360  : 		// TEMPLATE CLASS iterator_traits
; 361  : template<class _Iter>
; 362  : 	struct iterator_traits
; 363  : 	{	// get traits from iterator _Iter
; 364  : 	typedef typename _Iter::iterator_category iterator_category;
; 365  : 	typedef typename _Iter::value_type value_type;
; 366  : 	typedef typename _Iter::difference_type difference_type;
; 367  : 	typedef difference_type distance_type;	// retained
; 368  : 	typedef typename _Iter::pointer pointer;
; 369  : 	typedef typename _Iter::reference reference;
; 370  : 	};
; 371  : 
; 372  : template<class _Ty>
; 373  : 	struct iterator_traits<_Ty *>
; 374  : 	{	// get traits from pointer
; 375  : 	typedef random_access_iterator_tag iterator_category;
; 376  : 	typedef _Ty value_type;
; 377  : 	typedef ptrdiff_t difference_type;
; 378  : 	typedef ptrdiff_t distance_type;	// retained
; 379  : 	typedef _Ty *pointer;
; 380  : 	typedef _Ty& reference;
; 381  : 	};
; 382  : 
; 383  : template<class _Ty>
; 384  : 	struct iterator_traits<const _Ty *>
; 385  : 	{	// get traits from const pointer
; 386  : 	typedef random_access_iterator_tag iterator_category;
; 387  : 	typedef _Ty value_type;
; 388  : 	typedef ptrdiff_t difference_type;
; 389  : 	typedef ptrdiff_t distance_type;	// retained
; 390  : 	typedef const _Ty *pointer;
; 391  : 	typedef const _Ty& reference;
; 392  : 	};
; 393  : 
; 394  : 		// TEMPLATE FUNCTION _Iter_cat
; 395  : template<class _Iter> inline
; 396  : 	typename iterator_traits<_Iter>::iterator_category
; 397  : 		_Iter_cat(const _Iter&)
; 398  : 	{	// return category from iterator argument
; 399  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 400  : 	return (_Cat);
; 401  : 	}
; 402  : 
; 403  : 		// TEMPLATE FUNCTION _Ptr_cat
; 404  : template<class _Iter1,
; 405  : 	class _Iter2> inline
; 406  : 	_Nonscalar_ptr_iterator_tag _Ptr_cat(_Iter1&, _Iter2&)
; 407  : 	{	// return pointer category from arbitrary arguments
; 408  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 409  : 	return (_Cat);
; 410  : 	}
; 411  : 
; 412  : template<class _Elem1,
; 413  : 	class _Elem2>
; 414  : 	struct _Ptr_cat_helper
; 415  : 	{	// determines pointer category, nonscalar by default
; 416  : 	typedef _Nonscalar_ptr_iterator_tag type;
; 417  : 	};
; 418  : 
; 419  : template<class _Elem>
; 420  : 	struct _Ptr_cat_helper<_Elem, _Elem>
; 421  : 	{	// determines pointer category, common type
; 422  : 	typedef typename _If<is_scalar<_Elem>::value,
; 423  : 		_Scalar_ptr_iterator_tag,
; 424  : 		_Nonscalar_ptr_iterator_tag>::type type;
; 425  : 	};
; 426  : 
; 427  : template<class _Anything>
; 428  : 	struct _Ptr_cat_helper<_Anything *, const _Anything *>
; 429  : 	{	// determines pointer category
; 430  : 	typedef _Scalar_ptr_iterator_tag type;
; 431  : 	};
; 432  : 
; 433  : template<class _Elem1,
; 434  : 	class _Elem2> inline
; 435  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type
; 436  : 		_Ptr_cat(_Elem1 *, _Elem2 *)
; 437  : 	{	// return pointer category from pointers
; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);
; 440  : 	}
; 441  : 
; 442  : template<class _Elem1,
; 443  : 	class _Elem2> inline
; 444  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type
; 445  : 		_Ptr_cat(const _Elem1 *, _Elem2 *)
; 446  : 	{	// return pointer category from pointers
; 447  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 448  : 	return (_Cat);
; 449  : 	}
; 450  : 
; 451  : 		// DEBUG TESTING MACROS
; 452  : 
; 453  :  #if _ITERATOR_DEBUG_LEVEL < 2
; 454  :   #define _DEBUG_LT(x, y)	((x) < (y))
; 455  :   #define _DEBUG_LT_PRED(pred, x, y)	pred(x, y)
; 456  :   #define _DEBUG_ORDER(first, last)
; 457  :   #define _DEBUG_ORDER_PRED(first, last, pred)
; 458  :   #define _DEBUG_POINTER(first)
; 459  :   #define _DEBUG_POINTER2(first, file, line)
; 460  :   #define _DEBUG_RANGE(first, last)
; 461  :   #define _DEBUG_RANGE2(first, last, file, line)
; 462  : 
; 463  :  #else /* _ITERATOR_DEBUG_LEVEL < 2 */
; 464  : 
; 465  :   #define _FILENAME	__FILEW__
; 466  : 
; 467  :   #ifndef _DEBUG_LT_IMPL
; 468  :    #define _DEBUG_LT_IMPL	_Debug_lt
; 469  :   #endif /* _DEBUG_LT_IMPL */
; 470  : 
; 471  :   #define _DEBUG_LT(x, y) \
; 472  : 	_DEBUG_LT_IMPL(x, y, _FILENAME, __LINE__)
; 473  : 
; 474  :   #ifndef _DEBUG_LT_PRED_IMPL
; 475  :    #define _DEBUG_LT_PRED_IMPL	_Debug_lt_pred
; 476  :   #endif /* _DEBUG_LT_PRED_IMPL */
; 477  : 
; 478  :   #define _DEBUG_LT_PRED(pred, x, y)	\
; 479  : 	_DEBUG_LT_PRED_IMPL(pred, x, y, _FILENAME, __LINE__)
; 480  : 
; 481  :   #ifndef _DEBUG_ORDER_IMPL
; 482  :    #define _DEBUG_ORDER_IMPL	_Debug_order
; 483  :   #endif /* _DEBUG_ORDER_IMPL */
; 484  : 
; 485  :   #define _DEBUG_ORDER(first, last)	\
; 486  : 	_DEBUG_ORDER_IMPL(first, last, _FILENAME, __LINE__)
; 487  :   #define _DEBUG_ORDER_PRED(first, last, pred)	\
; 488  : 	_DEBUG_ORDER_IMPL(first, last, pred, _FILENAME, __LINE__)
; 489  : 
; 490  :   #ifndef _DEBUG_POINTER_IMPL
; 491  :    #define _DEBUG_POINTER_IMPL	_Debug_pointer
; 492  :   #endif /* _DEBUG_POINTER_IMPL */
; 493  : 
; 494  :   #define _DEBUG_POINTER(first)	\
; 495  : 	_DEBUG_POINTER_IMPL(first, _FILENAME, __LINE__)
; 496  :   #define _DEBUG_POINTER2(first, file, line)	\
; 497  : 	_DEBUG_POINTER_IMPL(first, file, line)
; 498  : 
; 499  :   #ifndef _DEBUG_RANGE_IMPL
; 500  :    #define _DEBUG_RANGE_IMPL	_Debug_range
; 501  :   #endif /* _DEBUG_RANGE_IMPL */
; 502  : 
; 503  :   #define _DEBUG_RANGE(first, last)	\
; 504  : 	_DEBUG_RANGE_IMPL(first, last, _FILENAME, __LINE__)
; 505  :   #define _DEBUG_RANGE2(first, last, file, line)	\
; 506  : 	_DEBUG_RANGE_IMPL(first, last, file, line)
; 507  : 
; 508  : 		// TEMPLATE FUNCTION _Debug_lt
; 509  : template<class _Ty1, class _Ty2> inline
; 510  : 	bool _Debug_lt(const _Ty1& _Left, const _Ty2& _Right,
; 511  : 		_Dbfile_t _File, _Dbline_t _Line)
; 512  : 	{	// test if _Left < _Right and operator< is strict weak ordering
; 513  : 	if (!(_Left < _Right))
; 514  : 		return (false);
; 515  : 	else if (_Right < _Left)
; 516  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);
; 517  : 	return (true);
; 518  : 	}
; 519  : 
; 520  : template<class _Ty1, class _Ty2> inline
; 521  : 	bool _Debug_lt(const _Ty1& _Left, _Ty2& _Right,
; 522  : 		_Dbfile_t _File, _Dbline_t _Line)
; 523  : 	{	// test if _Left < _Right and operator< is strict weak ordering
; 524  : 	if (!(_Left < _Right))
; 525  : 		return (false);
; 526  : 	else if (_Right < _Left)
; 527  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);
; 528  : 	return (true);
; 529  : 	}
; 530  : 
; 531  : template<class _Ty1, class _Ty2> inline
; 532  : 	bool _Debug_lt(_Ty1& _Left, const _Ty2& _Right,
; 533  : 		_Dbfile_t _File, _Dbline_t _Line)
; 534  : 	{	// test if _Left < _Right and operator< is strict weak ordering
; 535  : 	if (!(_Left < _Right))
; 536  : 		return (false);
; 537  : 	else if (_Right < _Left)
; 538  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);
; 539  : 	return (true);
; 540  : 	}
; 541  : 
; 542  : template<class _Ty1, class _Ty2> inline
; 543  : 	bool _Debug_lt(_Ty1& _Left, _Ty2& _Right,
; 544  : 		_Dbfile_t _File, _Dbline_t _Line)
; 545  : 	{	// test if _Left < _Right and operator< is strict weak ordering
; 546  : 	if (!(_Left < _Right))
; 547  : 		return (false);
; 548  : 	else if (_Right < _Left)
; 549  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);
; 550  : 	return (true);
; 551  : 	}
; 552  : 
; 553  : 		// TEMPLATE FUNCTION _Debug_lt_pred
; 554  : template<class _Pr, class _Ty1, class _Ty2> inline
; 555  : 	bool _Debug_lt_pred(_Pr _Pred,
; 556  : 		const _Ty1& _Left, const _Ty2& _Right,
; 557  : 		_Dbfile_t _File, _Dbline_t _Line)
; 558  : 	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering
; 559  : 	if (!_Pred(_Left, _Right))
; 560  : 		return (false);
; 561  : 	else if (_Pred(_Right, _Left))
; 562  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);
; 563  : 	return (true);
; 564  : 	}
; 565  : 
; 566  : template<class _Pr, class _Ty1, class _Ty2> inline
; 567  : 	bool _Debug_lt_pred(_Pr _Pred,
; 568  : 		const _Ty1& _Left, _Ty2& _Right,
; 569  : 		_Dbfile_t _File, _Dbline_t _Line)
; 570  : 	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering
; 571  : 	if (!_Pred(_Left, _Right))
; 572  : 		return (false);
; 573  : 	else if (_Pred(_Right, _Left))
; 574  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);
; 575  : 	return (true);
; 576  : 	}
; 577  : 
; 578  : template<class _Pr, class _Ty1, class _Ty2> inline
; 579  : 	bool _Debug_lt_pred(_Pr _Pred,
; 580  : 		_Ty1& _Left, const _Ty2& _Right,
; 581  : 		_Dbfile_t _File, _Dbline_t _Line)
; 582  : 	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering
; 583  : 	if (!_Pred(_Left, _Right))
; 584  : 		return (false);
; 585  : 	else if (_Pred(_Right, _Left))
; 586  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);
; 587  : 	return (true);
; 588  : 	}
; 589  : 
; 590  : template<class _Pr, class _Ty1, class _Ty2> inline
; 591  : 	bool _Debug_lt_pred(_Pr _Pred,
; 592  : 		_Ty1& _Left, _Ty2& _Right,
; 593  : 		_Dbfile_t _File, _Dbline_t _Line)
; 594  : 	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering
; 595  : 	if (!_Pred(_Left, _Right))
; 596  : 		return (false);
; 597  : 	else if (_Pred(_Right, _Left))
; 598  : 		_DEBUG_ERROR2("invalid operator<", _File, _Line);
; 599  : 	return (true);
; 600  : 	}
; 601  : 
; 602  : 		// TEMPLATE FUNCTION _Debug_pointer
; 603  : template<class _InIt> inline
; 604  : 	void _Debug_pointer(_InIt&, _Dbfile_t, _Dbline_t)
; 605  : 	{	// test pointer for non-singularity, arbitrary type
; 606  : 	}
; 607  : 
; 608  : template<class _Ty> inline
; 609  : 	void _Debug_pointer(const _Ty *_First, _Dbfile_t _File, _Dbline_t _Line)
; 610  : 	{	// test iterator for non-singularity, const pointers
; 611  : 	if (_First == 0)
; 612  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);
; 613  : 	}
; 614  : 
; 615  : template<class _Ty> inline
; 616  : 	void _Debug_pointer(_Ty *_First, _Dbfile_t _File, _Dbline_t _Line)
; 617  : 	{	// test iterator for non-singularity, pointers
; 618  : 	if (_First == 0)
; 619  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);
; 620  : 	}
; 621  : 
; 622  : 		// TEMPLATE FUNCTION _Debug_range
; 623  : template<class _InIt> inline
; 624  : 	void _Debug_range2(_InIt _First, _InIt _Last, _Dbfile_t, _Dbline_t,
; 625  : 		input_iterator_tag)
; 626  : 	{	// test iterator pair for valid range, arbitrary iterators
; 627  : 	bool _Ans = _First == _Last;	// make sure they're comparable
; 628  : 	_Ans = _Ans;	// to quiet diagnostics
; 629  : 	}
; 630  : 
; 631  : template<class _RanIt> inline
; 632  : 	void _Debug_range2(_RanIt _First, _RanIt _Last,
; 633  : 		_Dbfile_t _File, _Dbline_t _Line,
; 634  : 		random_access_iterator_tag)
; 635  : 	{	// test iterator pair for valid range, random-access iterators
; 636  : 	if (_First != _Last)
; 637  : 		{	// check for non-null pointers, valid range
; 638  : 		_DEBUG_POINTER2(_First, _File, _Line);
; 639  : 		_DEBUG_POINTER2(_Last, _File, _Line);
; 640  : 		if (_Last < _First)
; 641  : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);
; 642  : 		}
; 643  : 	}
; 644  : 
; 645  : template<class _InIt> inline
; 646  : 	void _Debug_range(_InIt _First, _InIt _Last,
; 647  : 		_Dbfile_t _File, _Dbline_t _Line)
; 648  : 	{	// test iterator pair for valid range
; 649  : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));
; 650  : 	}
; 651  : 
; 652  : 		// TEMPLATE FUNCTION _Debug_order
; 653  : template<class _InIt> inline
; 654  : 	void _Debug_order2(_InIt, _InIt,
; 655  : 		_Dbfile_t, _Dbline_t, input_iterator_tag)
; 656  : 	{	// test if range is ordered by operator<, input iterators
; 657  : 	}
; 658  : 
; 659  : template<class _FwdIt> inline
; 660  : 	void _Debug_order2(_FwdIt _First, _FwdIt _Last,
; 661  : 		_Dbfile_t _File, _Dbline_t _Line, forward_iterator_tag)
; 662  : 	{	// test if range is ordered by operator<, forward iterators
; 663  : 	for (_FwdIt _Next = _First; _First != _Last && ++_Next != _Last; ++_First)
; 664  : 		if (_DEBUG_LT(*_Next, *_First))
; 665  : 			_DEBUG_ERROR2("sequence not ordered", _File, _Line);
; 666  : 	}
; 667  : 
; 668  : template<class _InIt> inline
; 669  : 	void _Debug_order(_InIt _First, _InIt _Last,
; 670  : 		_Dbfile_t _File, _Dbline_t _Line)
; 671  : 	{	// test is range is ordered by operator<
; 672  : 	_DEBUG_RANGE2(_First, _Last, _File, _Line);
; 673  : 	_Debug_order2(_First, _Last, _File, _Line, _Iter_cat(_First));
; 674  : 	}
; 675  : 
; 676  : 		// TEMPLATE FUNCTION _Debug_order_pred
; 677  : template<class _InIt,
; 678  : 	class _Pr> inline
; 679  : 	void _Debug_order2(_InIt, _InIt, _Pr,
; 680  : 		_Dbfile_t, _Dbline_t, input_iterator_tag)
; 681  : 	{	// test if range is ordered by predicate, input iterators
; 682  : 	}
; 683  : 
; 684  : template<class _FwdIt,
; 685  : 	class _Pr> inline
; 686  : 	void _Debug_order2(_FwdIt _First, _FwdIt _Last, _Pr _Pred,
; 687  : 		_Dbfile_t _File, _Dbline_t _Line, forward_iterator_tag)
; 688  : 	{	// test if range is ordered by predicate, forward iterators
; 689  : 	for (_FwdIt _Next = _First; _First != _Last && ++_Next != _Last; ++_First)
; 690  : 		if (_DEBUG_LT_PRED(_Pred, *_Next, *_First))
; 691  : 			_DEBUG_ERROR2("sequence not ordered", _File, _Line);
; 692  : 	}
; 693  : 
; 694  : template<class _InIt,
; 695  : 	class _Pr> inline
; 696  : 	void _Debug_order(_InIt _First, _InIt _Last, _Pr _Pred,
; 697  : 		_Dbfile_t _File, _Dbline_t _Line)
; 698  : 	{	// test if range is ordered by predicate
; 699  : 	_DEBUG_RANGE2(_First, _Last, _File, _Line);
; 700  : 	_DEBUG_POINTER2(_Pred, _File, _Line);
; 701  : 	_Debug_order2(_First, _Last, _Pred, _File, _Line, _Iter_cat(_First));
; 702  : 	}
; 703  :  #endif /* _ITERATOR_DEBUG_LEVEL < 2 */
; 704  : 
; 705  : 		// MORE ITERATOR STUFF (from <iterator>)
; 706  : 		// TEMPLATE FUNCTION _Val_type
; 707  : 
; 708  : template<class _Iter> inline
; 709  : 	typename iterator_traits<_Iter>::value_type *_Val_type(_Iter)
; 710  : 	{	// return value type from arbitrary argument
; 711  : 	return (0);
; 712  : 	}
; 713  : 
; 714  : 		// TEMPLATE FUNCTION advance
; 715  : template<class _InIt,
; 716  : 	class _Diff> inline
; 717  : 	void _Advance(_InIt& _Where, _Diff _Off, input_iterator_tag)
; 718  : 	{	// increment iterator by offset, input iterators
; 719  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 720  : 	if (_Off < 0)
; 721  : 		_DEBUG_ERROR("negative offset in advance");
; 722  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 723  : 
; 724  : 	for (; 0 < _Off; --_Off)
; 725  : 		++_Where;
; 726  : 	}
; 727  : 
; 728  : template<class _FwdIt,
; 729  : 	class _Diff> inline
; 730  : 	void _Advance(_FwdIt& _Where, _Diff _Off, forward_iterator_tag)
; 731  : 	{	// increment iterator by offset, forward iterators
; 732  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 733  : 	if (_Off < 0)
; 734  : 		_DEBUG_ERROR("negative offset in advance");
; 735  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 736  : 
; 737  : 	for (; 0 < _Off; --_Off)
; 738  : 		++_Where;
; 739  : 	}
; 740  : 
; 741  : template<class _BidIt,
; 742  : 	class _Diff> inline
; 743  : 	void _Advance(_BidIt& _Where, _Diff _Off, bidirectional_iterator_tag)
; 744  : 	{	// increment iterator by offset, bidirectional iterators
; 745  : 	for (; 0 < _Off; --_Off)
; 746  : 		++_Where;
; 747  : 	for (; _Off < 0; ++_Off)
; 748  : 		--_Where;
; 749  : 	}
; 750  : 
; 751  : template<class _RanIt,
; 752  : 	class _Diff> inline
; 753  : 	void _Advance(_RanIt& _Where, _Diff _Off, random_access_iterator_tag)
; 754  : 	{	// increment iterator by offset, random-access iterators
; 755  : 	_Where += _Off;
; 756  : 	}
; 757  : 
; 758  : template<class _InIt,
; 759  : 	class _Diff> inline
; 760  : 	void advance(_InIt& _Where, _Diff _Off)
; 761  : 	{	// increment iterator by offset, arbitrary iterators
; 762  : 	_Advance(_Where, _Off, _Iter_cat(_Where));
; 763  : 	}
; 764  : 
; 765  : 		// TEMPLATE FUNCTION _Dist_type
; 766  : 
; 767  : template<class _Iter> inline
; 768  : 	typename iterator_traits<_Iter>::difference_type
; 769  : 		*_Dist_type(_Iter)
; 770  : 	{	// return distance type from arbitrary argument
; 771  : 	return (0);
; 772  : 	}
; 773  : 
; 774  : 		// TEMPLATE FUNCTIONS distance and _Distance
; 775  : template<class _InIt,
; 776  : 	class _Diff> inline
; 777  : 		void _Distance2(_InIt _First, _InIt _Last, _Diff& _Off,
; 778  : 			input_iterator_tag)
; 779  : 	{	// add to _Off distance between input iterators
; 780  : 	for (; _First != _Last; ++_First)
; 781  : 		++_Off;
; 782  : 	}
; 783  : 
; 784  : template<class _FwdIt,
; 785  : 	class _Diff> inline
; 786  : 		void _Distance2(_FwdIt _First, _FwdIt _Last, _Diff& _Off,
; 787  : 			forward_iterator_tag)
; 788  : 	{	// add to _Off distance between forward iterators (redundant)
; 789  : 	for (; _First != _Last; ++_First)
; 790  : 		++_Off;
; 791  : 	}
; 792  : 
; 793  : template<class _BidIt,
; 794  : 	class _Diff> inline
; 795  : 		void _Distance2(_BidIt _First, _BidIt _Last, _Diff& _Off,
; 796  : 			bidirectional_iterator_tag)
; 797  : 	{	// add to _Off distance between bidirectional iterators (redundant)
; 798  : 	for (; _First != _Last; ++_First)
; 799  : 		++_Off;
; 800  : 	}
; 801  : 
; 802  : template<class _RanIt,
; 803  : 	class _Diff> inline
; 804  : 		void _Distance2(_RanIt _First, _RanIt _Last, _Diff& _Off,
; 805  : 			random_access_iterator_tag)
; 806  : 	{	// add to _Off distance between random-access iterators
; 807  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 808  : 	if (_First != _Last)
; 809  : 		{	// check for null pointers
; 810  : 		_DEBUG_POINTER(_First);
; 811  : 		_DEBUG_POINTER(_Last);
; 812  : 		}
; 813  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 814  : 
; 815  : 	_Off += _Last - _First;
; 816  : 	}
; 817  : 
; 818  : template<class _InIt> inline
; 819  : 	typename iterator_traits<_InIt>::difference_type
; 820  : 		distance(_InIt _First, _InIt _Last)
; 821  : 	{	// return distance between iterators
; 822  : 	typename iterator_traits<_InIt>::difference_type _Off = 0;
; 823  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));

  00147	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));

  0014e	8b 45 e4	 mov	 eax, DWORD PTR $T5[ebp]
  00151	2b f8		 sub	 edi, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00153	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 640  : 		this->_Myoff += _Off;

  00156	01 7d 10	 add	 DWORD PTR __First$[ebp+8], edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 118  : 		{	// copy an iterator

  00159	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0015f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00166	85 c0		 test	 eax, eax
  00168	74 1e		 je	 SHORT $LN204@rotate

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  0016a	8b 00		 mov	 eax, DWORD PTR [eax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  0016c	85 c0		 test	 eax, eax
  0016e	75 14		 jne	 SHORT $LN191@rotate

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00170	6a 03		 push	 3
  00172	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00175	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  0017a	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  0017d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  00182	eb 04		 jmp	 SHORT $LN204@rotate
$LN191@rotate:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  00184	8b 00		 mov	 eax, DWORD PTR [eax]
  00186	89 06		 mov	 DWORD PTR [esi], eax
$LN204@rotate:
  00188	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp+8]
  0018b	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 3440 : 	return (_First);

  0018e	8b c6		 mov	 eax, esi

; 3441 : 	}

  00190	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00193	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019a	59		 pop	 ecx
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	5b		 pop	 ebx
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z$3:
  00000	e9 00 00 00 00	 jmp	 ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z$9:
  00005	e9 00 00 00 00	 jmp	 ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z:
  0000a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00011	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z ENDP ; std::rotate<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VMatrix@geom@@V12@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAAV?$allocator@VMatrix@geom@@@1@PAVMatrix@geom@@$$QAV34@@Z
_TEXT	SEGMENT
__V0$ = 8						; size = 4
??$construct@VMatrix@geom@@V12@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAAV?$allocator@VMatrix@geom@@@1@PAVMatrix@geom@@$$QAV34@@Z PROC ; std::allocator_traits<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00003	85 d2		 test	 edx, edx
  00005	74 10		 je	 SHORT $LN7@construct
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __V0$[ebp]
  0000b	57		 push	 edi
  0000c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00011	8b fa		 mov	 edi, edx
  00013	f3 a5		 rep movsd
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
$LN7@construct:

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@VMatrix@geom@@V12@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAAV?$allocator@VMatrix@geom@@@1@PAVMatrix@geom@@$$QAV34@@Z ENDP ; std::allocator_traits<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABVMatrix@geom@@@std@@YAABVMatrix@geom@@ABV12@@Z
_TEXT	SEGMENT
??$forward@ABVMatrix@geom@@@std@@YAABVMatrix@geom@@ABV12@@Z PROC ; std::forward<geom::Matrix const &>, COMDAT
; __Arg$ = ecx

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1777 : 	}

  00002	c3		 ret	 0
??$forward@ABVMatrix@geom@@@std@@YAABVMatrix@geom@@ABV12@@Z ENDP ; std::forward<geom::Matrix const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VMatrix@geom@@ABV12@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAAV?$allocator@VMatrix@geom@@@1@PAVMatrix@geom@@ABV34@@Z
_TEXT	SEGMENT
__V0$ = 8						; size = 4
??$construct@VMatrix@geom@@ABV12@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAAV?$allocator@VMatrix@geom@@@1@PAVMatrix@geom@@ABV34@@Z PROC ; std::allocator_traits<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix const &>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	85 d2		 test	 edx, edx
  00005	74 10		 je	 SHORT $LN7@construct
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __V0$[ebp]
  0000b	57		 push	 edi
  0000c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00011	8b fa		 mov	 edi, edx
  00013	f3 a5		 rep movsd
  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
$LN7@construct:

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@VMatrix@geom@@ABV12@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAAV?$allocator@VMatrix@geom@@@1@PAVMatrix@geom@@ABV34@@Z ENDP ; std::allocator_traits<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VMatrix@geom@@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAAV?$allocator@VMatrix@geom@@@1@PAVMatrix@geom@@@Z
_TEXT	SEGMENT
??$destroy@VMatrix@geom@@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAAV?$allocator@VMatrix@geom@@@1@PAVMatrix@geom@@@Z PROC ; std::allocator_traits<std::allocator<geom::Matrix> >::destroy<geom::Matrix>, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);
; 758  : 		}

  00000	c3		 ret	 0
??$destroy@VMatrix@geom@@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAAV?$allocator@VMatrix@geom@@@1@PAVMatrix@geom@@@Z ENDP ; std::allocator_traits<std::allocator<geom::Matrix> >::destroy<geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$?0VMatrix@geom@@@?$allocator@PAVMatrix@geom@@@std@@QAE@ABV?$allocator@VMatrix@geom@@@1@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
??$?0VMatrix@geom@@@?$allocator@PAVMatrix@geom@@@std@@QAE@ABV?$allocator@VMatrix@geom@@@1@@Z PROC ; std::allocator<geom::Matrix *>::allocator<geom::Matrix *><geom::Matrix>, COMDAT
; _this$ = ecx

; 575  : 		{	// construct from a related allocator (do nothing)
; 576  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0VMatrix@geom@@@?$allocator@PAVMatrix@geom@@@std@@QAE@ABV?$allocator@VMatrix@geom@@@1@@Z ENDP ; std::allocator<geom::Matrix *>::allocator<geom::Matrix *><geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAVMatrix@geom@@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAAV?$allocator@VMatrix@geom@@@1@PAPAVMatrix@geom@@@Z
_TEXT	SEGMENT
??$destroy@PAVMatrix@geom@@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAAV?$allocator@VMatrix@geom@@@1@PAPAVMatrix@geom@@@Z PROC ; std::allocator_traits<std::allocator<geom::Matrix> >::destroy<geom::Matrix *>, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);
; 758  : 		}

  00000	c3		 ret	 0
??$destroy@PAVMatrix@geom@@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAAV?$allocator@VMatrix@geom@@@1@PAPAVMatrix@geom@@@Z ENDP ; std::allocator_traits<std::allocator<geom::Matrix> >::destroy<geom::Matrix *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVMatrix@geom@@PAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVMatrix@geom@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
??$_Ptr_cat@PAVMatrix@geom@@PAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVMatrix@geom@@0@Z PROC ; std::_Ptr_cat<geom::Matrix *,geom::Matrix *>, COMDAT
; ___formal$dead$ = ecx
; ___formal$dead$ = edx

; 437  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 440  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@PAVMatrix@geom@@PAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVMatrix@geom@@0@Z ENDP ; std::_Ptr_cat<geom::Matrix *,geom::Matrix *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@PAVMatrix@geom@@PAV12@@std@@YAPAPAVMatrix@geom@@PAPAV12@00AAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
___formal$ = 16						; size = 1
??$_Uninit_copy@PAVMatrix@geom@@PAV12@@std@@YAPAPAVMatrix@geom@@PAPAV12@00AAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<geom::Matrix *,geom::Matrix *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 401  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 402  : 	_DEBUG_RANGE(_First, _Last);
; 403  : 	_DEBUG_POINTER(_Dest);
; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	2b d1		 sub	 edx, ecx
  00005	56		 push	 esi
  00006	c1 fa 02	 sar	 edx, 2

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00009	8d 34 95 00 00
	00 00		 lea	 esi, DWORD PTR [edx*4]
  00010	56		 push	 esi
  00011	51		 push	 ecx
  00012	ff 75 08	 push	 DWORD PTR __Dest$[ebp]
  00015	e8 00 00 00 00	 call	 _memmove
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001d	03 c6		 add	 eax, esi
  0001f	5e		 pop	 esi

; 407  : 	}

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Uninit_copy@PAVMatrix@geom@@PAV12@@std@@YAPAPAVMatrix@geom@@PAPAV12@00AAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<geom::Matrix *,geom::Matrix *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVMatrix@geom@@@std@@YAPAPAVMatrix@geom@@PAPAV12@@Z
_TEXT	SEGMENT
??$_Val_type@PAPAVMatrix@geom@@@std@@YAPAPAVMatrix@geom@@PAPAV12@@Z PROC ; std::_Val_type<geom::Matrix * *>, COMDAT
; ___formal$dead$ = ecx

; 711  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 712  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAVMatrix@geom@@@std@@YAPAPAVMatrix@geom@@PAPAV12@@Z ENDP ; std::_Val_type<geom::Matrix * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_def_fill_n@PAVMatrix@geom@@IPAV12@@std@@YAXPAPAVMatrix@geom@@IAAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
___formal$ = 16						; size = 1
??$_Uninit_def_fill_n@PAVMatrix@geom@@IPAV12@@std@@YAXPAPAVMatrix@geom@@IAAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_def_fill_n<geom::Matrix *,unsigned int,geom::Matrix *>, COMDAT
; __First$ = ecx
; __Count$ = edx

; 659  : 	{	// copy _Count * _Valty() to raw _First, using _Al, scalar type

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2678 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00003	85 d2		 test	 edx, edx
  00005	74 06		 je	 SHORT $LN5@Uninit_def
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 660  : 	_Fill_n(_First, _Count, (_Valty)0);

  00007	8b ca		 mov	 ecx, edx
  00009	33 c0		 xor	 eax, eax
  0000b	f3 ab		 rep stosd
$LN5@Uninit_def:
  0000d	5f		 pop	 edi

; 661  : 	}

  0000e	c3		 ret	 0
??$_Uninit_def_fill_n@PAVMatrix@geom@@IPAV12@@std@@YAXPAPAVMatrix@geom@@IAAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_def_fill_n<geom::Matrix *,unsigned int,geom::Matrix *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@@std@@YAXPAPAVMatrix@geom@@0AAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@@std@@YAXPAPAVMatrix@geom@@0AAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<geom::Matrix *> > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 97   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@std@@@std@@YAXPAPAVMatrix@geom@@0AAU?$_Wrap_alloc@V?$allocator@PAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<geom::Matrix *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z PROC ; std::_Ptr_cat<unsigned char,unsigned char>, COMDAT
; ___formal$dead$ = ecx
; ___formal$dead$ = edx

; 437  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 440  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z ENDP ; std::_Ptr_cat<unsigned char,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char> > >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 97   : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@ABV34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@ABV34@@Z PROC ; std::allocator<gfxu::VertexUVRGBA>::construct, COMDAT
; _this$dead$ = ecx

; 605  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 3b		 je	 SHORT $LN3@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00017	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001a	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001d	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00020	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00023	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00026	89 42 10	 mov	 DWORD PTR [edx+16], eax
  00029	0f b6 41 14	 movzx	 eax, BYTE PTR [ecx+20]
  0002d	88 42 14	 mov	 BYTE PTR [edx+20], al
  00030	0f b6 41 15	 movzx	 eax, BYTE PTR [ecx+21]
  00034	88 42 15	 mov	 BYTE PTR [edx+21], al
  00037	0f b6 41 16	 movzx	 eax, BYTE PTR [ecx+22]
  0003b	88 42 16	 mov	 BYTE PTR [edx+22], al
  0003e	0f b6 41 17	 movzx	 eax, BYTE PTR [ecx+23]
  00042	88 42 17	 mov	 BYTE PTR [edx+23], al
$LN3@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 607  : 		}

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
?construct@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@ABV34@@Z ENDP ; std::allocator<gfxu::VertexUVRGBA>::construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@VMatrix@geom@@@std@@QAEXPAVMatrix@geom@@ABV34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VMatrix@geom@@@std@@QAEXPAVMatrix@geom@@ABV34@@Z PROC ; std::allocator<geom::Matrix>::construct, COMDAT
; _this$dead$ = ecx

; 605  : 		{	// construct object at _Ptr with value _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __Val$[ebp]
  0000f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct:
  00017	5f		 pop	 edi

; 607  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?construct@?$allocator@VMatrix@geom@@@std@@QAEXPAVMatrix@geom@@ABV34@@Z ENDP ; std::allocator<geom::Matrix>::construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBEABDXZ
_TEXT	SEGMENT
??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBEABDXZ PROC ; std::istreambuf_iterator<char,std::char_traits<char> >::operator*, COMDAT
; _this$ = ecx

; 499  : 		{	// return designated value

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 500  : 		if (!_Got)

  00003	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00007	75 3c		 jne	 SHORT $LN27@operator

; 562  : 				_Meta = _Strbuf->sgetc()))

  00009	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 2c		 je	 SHORT $LN5@operator

; 154  : 		}
; 155  : 
; 156  : 	streamsize __CLR_OR_THIS_CALL sgetn(_Elem *_Ptr,
; 157  : 		streamsize _Count)
; 158  : 		{	// get up to _Count characters into array beginning at _Ptr
; 159  : 		return (xsgetn(_Ptr, _Count));
; 160  : 		}
; 161  : 
; 162  : 	int_type __CLR_OR_THIS_CALL snextc()
; 163  : 		{	// point to next character and return it
; 164  : 		return (1 < _Gnavail()
; 165  : 			? _Traits::to_int_type(*_Gnpreinc())
; 166  : 			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
; 167  : 				? _Traits::eof() : sgetc());
; 168  : 		}
; 169  : 
; 170  : 	int_type __CLR_OR_THIS_CALL sputbackc(_Elem _Ch)
; 171  : 		{	// put back _Ch
; 172  : 		return (gptr() != 0 && eback() < gptr()
; 173  : 			&& _Traits::eq(_Ch, gptr()[-1])
; 174  : 			? _Traits::to_int_type(*_Gndec())
; 175  : 			: pbackfail(_Traits::to_int_type(_Ch)));
; 176  : 		}
; 177  : 
; 178  : 	void __CLR_OR_THIS_CALL stossc()
; 179  : 		{	// point past a character
; 180  : 		if (0 < _Gnavail())
; 181  : 			_Gninc();
; 182  : 		else
; 183  : 			uflow();
; 184  : 		}
; 185  : 
; 186  : 	int_type __CLR_OR_THIS_CALL sungetc()
; 187  : 		{	// back up one position
; 188  : 		return (gptr() != 0 && eback() < gptr()
; 189  : 			? _Traits::to_int_type(*_Gndec()) : pbackfail());
; 190  : 		}
; 191  : 
; 192  : 	int_type __CLR_OR_THIS_CALL sputc(_Elem _Ch)
; 193  : 		{	// put a character
; 194  : 		return (0 < _Pnavail()
; 195  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 196  : 			: overflow(_Traits::to_int_type(_Ch)));
; 197  : 		}
; 198  : 
; 199  : 	streamsize __CLR_OR_THIS_CALL sputn(const _Elem *_Ptr,
; 200  : 		streamsize _Count)
; 201  : 		{	// put _Count characters from array beginning at _Ptr
; 202  : 		return (xsputn(_Ptr, _Count));
; 203  : 		}
; 204  : 
; 205  : 	virtual void __CLR_OR_THIS_CALL _Lock()
; 206  : 		{	// set the thread lock (overridden by basic_filebuf)
; 207  : 		}
; 208  : 
; 209  : 	virtual void __CLR_OR_THIS_CALL _Unlock()
; 210  : 		{	// clear the thread lock (overridden by basic_filebuf)
; 211  : 		}
; 212  : 
; 213  : protected:
; 214  : 	_Elem *__CLR_OR_THIS_CALL eback() const
; 215  : 		{	// return beginning of read buffer
; 216  : 		return (*_IGfirst);
; 217  : 		}
; 218  : 
; 219  : 	_Elem *__CLR_OR_THIS_CALL gptr() const
; 220  : 		{	// return current position in read buffer
; 221  : 		return (*_IGnext);
; 222  : 		}
; 223  : 
; 224  : 	_Elem *__CLR_OR_THIS_CALL pbase() const
; 225  : 		{	// return beginning of write buffer
; 226  : 		return (*_IPfirst);
; 227  : 		}
; 228  : 
; 229  : 	_Elem *__CLR_OR_THIS_CALL pptr() const
; 230  : 		{	// return current position in write buffer
; 231  : 		return (*_IPnext);
; 232  : 		}
; 233  : 
; 234  : 	_Elem *__CLR_OR_THIS_CALL egptr() const
; 235  : 		{	// return end of read buffer
; 236  : 		return (*_IGnext + *_IGcount);
; 237  : 		}
; 238  : 
; 239  : 	void __CLR_OR_THIS_CALL gbump(int _Off)
; 240  : 		{	// alter current position in read buffer by _Off
; 241  : 		*_IGcount -= _Off;
; 242  : 		*_IGnext += _Off;
; 243  : 		}
; 244  : 
; 245  : 	void __CLR_OR_THIS_CALL setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
; 246  : 		{	// set pointers for read buffer
; 247  : 		*_IGfirst = _First;
; 248  : 		*_IGnext = _Next;
; 249  : 		*_IGcount = (int)(_Last - _Next);
; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;
; 266  : 		return ((*_IGnext)++);
; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  0000f	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00012	8b 10		 mov	 edx, DWORD PTR [eax]
  00014	85 d2		 test	 edx, edx
  00016	74 0d		 je	 SHORT $LN11@operator
  00018	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 153  : 			? _Traits::to_int_type(*gptr()) : underflow());

  0001b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001e	7e 05		 jle	 SHORT $LN11@operator
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  00020	0f b6 02	 movzx	 eax, BYTE PTR [edx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 153  : 			? _Traits::to_int_type(*gptr()) : underflow());

  00023	eb 05		 jmp	 SHORT $LN12@operator
$LN11@operator:
  00025	8b 01		 mov	 eax, DWORD PTR [ecx]
  00027	ff 50 18	 call	 DWORD PTR [eax+24]
$LN12@operator:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  0002a	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 562  : 				_Meta = _Strbuf->sgetc()))

  0002d	74 0c		 je	 SHORT $LN5@operator

; 564  : 		else
; 565  : 			_Val = traits_type::to_char_type(_Meta);

  0002f	88 46 05	 mov	 BYTE PTR [esi+5], al

; 566  : 		_Got = true;

  00032	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1

; 501  : 			_Peek();
; 502  : 
; 503  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 504  : 		if (_Strbuf == 0)
; 505  : 			_DEBUG_ERROR("istreambuf_iterator is not dereferencable");
; 506  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 507  : 
; 508  : 		return (_Val);

  00036	8d 46 05	 lea	 eax, DWORD PTR [esi+5]
  00039	5e		 pop	 esi

; 509  : 		}

  0003a	c3		 ret	 0
$LN5@operator:

; 563  : 			_Strbuf = 0;

  0003b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 566  : 		_Got = true;

  00041	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
$LN27@operator:

; 501  : 			_Peek();
; 502  : 
; 503  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 504  : 		if (_Strbuf == 0)
; 505  : 			_DEBUG_ERROR("istreambuf_iterator is not dereferencable");
; 506  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 507  : 
; 508  : 		return (_Val);

  00045	8d 46 05	 lea	 eax, DWORD PTR [esi+5]
  00048	5e		 pop	 esi

; 509  : 		}

  00049	c3		 ret	 0
??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBEABDXZ ENDP ; std::istreambuf_iterator<char,std::char_traits<char> >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::istreambuf_iterator<char,std::char_traits<char> >::operator++, COMDAT
; _this$ = ecx

; 517  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 551  : 				_Strbuf->sbumpc()))

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 35		 je	 SHORT $LN4@operator

; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00009	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	74 1b		 je	 SHORT $LN10@operator
  00011	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00014	8b 02		 mov	 eax, DWORD PTR [edx]

; 147  : 			? _Traits::to_int_type(*_Gninc()) : uflow());

  00016	85 c0		 test	 eax, eax
  00018	7e 12		 jle	 SHORT $LN10@operator

; 148  : 		}
; 149  : 
; 150  : 	int_type __CLR_OR_THIS_CALL sgetc()
; 151  : 		{	// get a character and don't point past it
; 152  : 		return (0 < _Gnavail()
; 153  : 			? _Traits::to_int_type(*gptr()) : underflow());
; 154  : 		}
; 155  : 
; 156  : 	streamsize __CLR_OR_THIS_CALL sgetn(_Elem *_Ptr,
; 157  : 		streamsize _Count)
; 158  : 		{	// get up to _Count characters into array beginning at _Ptr
; 159  : 		return (xsgetn(_Ptr, _Count));
; 160  : 		}
; 161  : 
; 162  : 	int_type __CLR_OR_THIS_CALL snextc()
; 163  : 		{	// point to next character and return it
; 164  : 		return (1 < _Gnavail()
; 165  : 			? _Traits::to_int_type(*_Gnpreinc())
; 166  : 			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
; 167  : 				? _Traits::eof() : sgetc());
; 168  : 		}
; 169  : 
; 170  : 	int_type __CLR_OR_THIS_CALL sputbackc(_Elem _Ch)
; 171  : 		{	// put back _Ch
; 172  : 		return (gptr() != 0 && eback() < gptr()
; 173  : 			&& _Traits::eq(_Ch, gptr()[-1])
; 174  : 			? _Traits::to_int_type(*_Gndec())
; 175  : 			: pbackfail(_Traits::to_int_type(_Ch)));
; 176  : 		}
; 177  : 
; 178  : 	void __CLR_OR_THIS_CALL stossc()
; 179  : 		{	// point past a character
; 180  : 		if (0 < _Gnavail())
; 181  : 			_Gninc();
; 182  : 		else
; 183  : 			uflow();
; 184  : 		}
; 185  : 
; 186  : 	int_type __CLR_OR_THIS_CALL sungetc()
; 187  : 		{	// back up one position
; 188  : 		return (gptr() != 0 && eback() < gptr()
; 189  : 			? _Traits::to_int_type(*_Gndec()) : pbackfail());
; 190  : 		}
; 191  : 
; 192  : 	int_type __CLR_OR_THIS_CALL sputc(_Elem _Ch)
; 193  : 		{	// put a character
; 194  : 		return (0 < _Pnavail()
; 195  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 196  : 			: overflow(_Traits::to_int_type(_Ch)));
; 197  : 		}
; 198  : 
; 199  : 	streamsize __CLR_OR_THIS_CALL sputn(const _Elem *_Ptr,
; 200  : 		streamsize _Count)
; 201  : 		{	// put _Count characters from array beginning at _Ptr
; 202  : 		return (xsputn(_Ptr, _Count));
; 203  : 		}
; 204  : 
; 205  : 	virtual void __CLR_OR_THIS_CALL _Lock()
; 206  : 		{	// set the thread lock (overridden by basic_filebuf)
; 207  : 		}
; 208  : 
; 209  : 	virtual void __CLR_OR_THIS_CALL _Unlock()
; 210  : 		{	// clear the thread lock (overridden by basic_filebuf)
; 211  : 		}
; 212  : 
; 213  : protected:
; 214  : 	_Elem *__CLR_OR_THIS_CALL eback() const
; 215  : 		{	// return beginning of read buffer
; 216  : 		return (*_IGfirst);
; 217  : 		}
; 218  : 
; 219  : 	_Elem *__CLR_OR_THIS_CALL gptr() const
; 220  : 		{	// return current position in read buffer
; 221  : 		return (*_IGnext);
; 222  : 		}
; 223  : 
; 224  : 	_Elem *__CLR_OR_THIS_CALL pbase() const
; 225  : 		{	// return beginning of write buffer
; 226  : 		return (*_IPfirst);
; 227  : 		}
; 228  : 
; 229  : 	_Elem *__CLR_OR_THIS_CALL pptr() const
; 230  : 		{	// return current position in write buffer
; 231  : 		return (*_IPnext);
; 232  : 		}
; 233  : 
; 234  : 	_Elem *__CLR_OR_THIS_CALL egptr() const
; 235  : 		{	// return end of read buffer
; 236  : 		return (*_IGnext + *_IGcount);
; 237  : 		}
; 238  : 
; 239  : 	void __CLR_OR_THIS_CALL gbump(int _Off)
; 240  : 		{	// alter current position in read buffer by _Off
; 241  : 		*_IGcount -= _Off;
; 242  : 		*_IGnext += _Off;
; 243  : 		}
; 244  : 
; 245  : 	void __CLR_OR_THIS_CALL setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
; 246  : 		{	// set pointers for read buffer
; 247  : 		*_IGfirst = _First;
; 248  : 		*_IGnext = _Next;
; 249  : 		*_IGcount = (int)(_Last - _Next);
; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;

  0001a	48		 dec	 eax
  0001b	89 02		 mov	 DWORD PTR [edx], eax

; 266  : 		return ((*_IGnext)++);

  0001d	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
  00022	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00025	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  00027	0f b6 02	 movzx	 eax, BYTE PTR [edx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 147  : 			? _Traits::to_int_type(*_Gninc()) : uflow());

  0002a	eb 05		 jmp	 SHORT $LN11@operator
$LN10@operator:
  0002c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002e	ff 50 1c	 call	 DWORD PTR [eax+28]
$LN11@operator:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  00031	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 551  : 				_Strbuf->sbumpc()))

  00034	74 08		 je	 SHORT $LN4@operator

; 553  : 		else
; 554  : 			_Got = false;

  00036	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0

; 518  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 519  : 		if (_Strbuf == 0)
; 520  : 			_DEBUG_ERROR("istreambuf_iterator is not incrementable");
; 521  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 522  : 
; 523  : 		_Inc();
; 524  : 		return (*this);

  0003a	8b c6		 mov	 eax, esi
  0003c	5e		 pop	 esi

; 525  : 		}

  0003d	c3		 ret	 0
$LN4@operator:

; 552  : 			_Strbuf = 0, _Got = true;

  0003e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00044	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1

; 518  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 519  : 		if (_Strbuf == 0)
; 520  : 			_DEBUG_ERROR("istreambuf_iterator is not incrementable");
; 521  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 522  : 
; 523  : 		_Inc();
; 524  : 		return (*this);

  00048	8b c6		 mov	 eax, esi
  0004a	5e		 pop	 esi

; 525  : 		}

  0004b	c3		 ret	 0
??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::istreambuf_iterator<char,std::char_traits<char> >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::istreambuf_iterator<char,std::char_traits<char> >::_Inc, COMDAT
; _this$ = ecx

; 548  : 		{	// skip to next input element

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 551  : 				_Strbuf->sbumpc()))

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 33		 je	 SHORT $LN2@Inc

; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00009	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	74 1b		 je	 SHORT $LN8@Inc
  00011	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00014	8b 02		 mov	 eax, DWORD PTR [edx]

; 147  : 			? _Traits::to_int_type(*_Gninc()) : uflow());

  00016	85 c0		 test	 eax, eax
  00018	7e 12		 jle	 SHORT $LN8@Inc

; 148  : 		}
; 149  : 
; 150  : 	int_type __CLR_OR_THIS_CALL sgetc()
; 151  : 		{	// get a character and don't point past it
; 152  : 		return (0 < _Gnavail()
; 153  : 			? _Traits::to_int_type(*gptr()) : underflow());
; 154  : 		}
; 155  : 
; 156  : 	streamsize __CLR_OR_THIS_CALL sgetn(_Elem *_Ptr,
; 157  : 		streamsize _Count)
; 158  : 		{	// get up to _Count characters into array beginning at _Ptr
; 159  : 		return (xsgetn(_Ptr, _Count));
; 160  : 		}
; 161  : 
; 162  : 	int_type __CLR_OR_THIS_CALL snextc()
; 163  : 		{	// point to next character and return it
; 164  : 		return (1 < _Gnavail()
; 165  : 			? _Traits::to_int_type(*_Gnpreinc())
; 166  : 			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
; 167  : 				? _Traits::eof() : sgetc());
; 168  : 		}
; 169  : 
; 170  : 	int_type __CLR_OR_THIS_CALL sputbackc(_Elem _Ch)
; 171  : 		{	// put back _Ch
; 172  : 		return (gptr() != 0 && eback() < gptr()
; 173  : 			&& _Traits::eq(_Ch, gptr()[-1])
; 174  : 			? _Traits::to_int_type(*_Gndec())
; 175  : 			: pbackfail(_Traits::to_int_type(_Ch)));
; 176  : 		}
; 177  : 
; 178  : 	void __CLR_OR_THIS_CALL stossc()
; 179  : 		{	// point past a character
; 180  : 		if (0 < _Gnavail())
; 181  : 			_Gninc();
; 182  : 		else
; 183  : 			uflow();
; 184  : 		}
; 185  : 
; 186  : 	int_type __CLR_OR_THIS_CALL sungetc()
; 187  : 		{	// back up one position
; 188  : 		return (gptr() != 0 && eback() < gptr()
; 189  : 			? _Traits::to_int_type(*_Gndec()) : pbackfail());
; 190  : 		}
; 191  : 
; 192  : 	int_type __CLR_OR_THIS_CALL sputc(_Elem _Ch)
; 193  : 		{	// put a character
; 194  : 		return (0 < _Pnavail()
; 195  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 196  : 			: overflow(_Traits::to_int_type(_Ch)));
; 197  : 		}
; 198  : 
; 199  : 	streamsize __CLR_OR_THIS_CALL sputn(const _Elem *_Ptr,
; 200  : 		streamsize _Count)
; 201  : 		{	// put _Count characters from array beginning at _Ptr
; 202  : 		return (xsputn(_Ptr, _Count));
; 203  : 		}
; 204  : 
; 205  : 	virtual void __CLR_OR_THIS_CALL _Lock()
; 206  : 		{	// set the thread lock (overridden by basic_filebuf)
; 207  : 		}
; 208  : 
; 209  : 	virtual void __CLR_OR_THIS_CALL _Unlock()
; 210  : 		{	// clear the thread lock (overridden by basic_filebuf)
; 211  : 		}
; 212  : 
; 213  : protected:
; 214  : 	_Elem *__CLR_OR_THIS_CALL eback() const
; 215  : 		{	// return beginning of read buffer
; 216  : 		return (*_IGfirst);
; 217  : 		}
; 218  : 
; 219  : 	_Elem *__CLR_OR_THIS_CALL gptr() const
; 220  : 		{	// return current position in read buffer
; 221  : 		return (*_IGnext);
; 222  : 		}
; 223  : 
; 224  : 	_Elem *__CLR_OR_THIS_CALL pbase() const
; 225  : 		{	// return beginning of write buffer
; 226  : 		return (*_IPfirst);
; 227  : 		}
; 228  : 
; 229  : 	_Elem *__CLR_OR_THIS_CALL pptr() const
; 230  : 		{	// return current position in write buffer
; 231  : 		return (*_IPnext);
; 232  : 		}
; 233  : 
; 234  : 	_Elem *__CLR_OR_THIS_CALL egptr() const
; 235  : 		{	// return end of read buffer
; 236  : 		return (*_IGnext + *_IGcount);
; 237  : 		}
; 238  : 
; 239  : 	void __CLR_OR_THIS_CALL gbump(int _Off)
; 240  : 		{	// alter current position in read buffer by _Off
; 241  : 		*_IGcount -= _Off;
; 242  : 		*_IGnext += _Off;
; 243  : 		}
; 244  : 
; 245  : 	void __CLR_OR_THIS_CALL setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
; 246  : 		{	// set pointers for read buffer
; 247  : 		*_IGfirst = _First;
; 248  : 		*_IGnext = _Next;
; 249  : 		*_IGcount = (int)(_Last - _Next);
; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;

  0001a	48		 dec	 eax
  0001b	89 02		 mov	 DWORD PTR [edx], eax

; 266  : 		return ((*_IGnext)++);

  0001d	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
  00022	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00025	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  00027	0f b6 02	 movzx	 eax, BYTE PTR [edx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 147  : 			? _Traits::to_int_type(*_Gninc()) : uflow());

  0002a	eb 05		 jmp	 SHORT $LN9@Inc
$LN8@Inc:
  0002c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002e	ff 50 1c	 call	 DWORD PTR [eax+28]
$LN9@Inc:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  00031	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 551  : 				_Strbuf->sbumpc()))

  00034	74 06		 je	 SHORT $LN2@Inc

; 553  : 		else
; 554  : 			_Got = false;

  00036	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0003a	5e		 pop	 esi

; 555  : 		}

  0003b	c3		 ret	 0
$LN2@Inc:

; 552  : 			_Strbuf = 0, _Got = true;

  0003c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00042	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00046	5e		 pop	 esi

; 555  : 		}

  00047	c3		 ret	 0
?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::istreambuf_iterator<char,std::char_traits<char> >::_Inc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@ABEDXZ
_TEXT	SEGMENT
?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@ABEDXZ PROC ; std::istreambuf_iterator<char,std::char_traits<char> >::_Peek, COMDAT
; _this$ = ecx

; 558  : 		{	// peek at next input element

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 562  : 				_Meta = _Strbuf->sgetc()))

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 29		 je	 SHORT $LN2@Peek

; 154  : 		}
; 155  : 
; 156  : 	streamsize __CLR_OR_THIS_CALL sgetn(_Elem *_Ptr,
; 157  : 		streamsize _Count)
; 158  : 		{	// get up to _Count characters into array beginning at _Ptr
; 159  : 		return (xsgetn(_Ptr, _Count));
; 160  : 		}
; 161  : 
; 162  : 	int_type __CLR_OR_THIS_CALL snextc()
; 163  : 		{	// point to next character and return it
; 164  : 		return (1 < _Gnavail()
; 165  : 			? _Traits::to_int_type(*_Gnpreinc())
; 166  : 			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
; 167  : 				? _Traits::eof() : sgetc());
; 168  : 		}
; 169  : 
; 170  : 	int_type __CLR_OR_THIS_CALL sputbackc(_Elem _Ch)
; 171  : 		{	// put back _Ch
; 172  : 		return (gptr() != 0 && eback() < gptr()
; 173  : 			&& _Traits::eq(_Ch, gptr()[-1])
; 174  : 			? _Traits::to_int_type(*_Gndec())
; 175  : 			: pbackfail(_Traits::to_int_type(_Ch)));
; 176  : 		}
; 177  : 
; 178  : 	void __CLR_OR_THIS_CALL stossc()
; 179  : 		{	// point past a character
; 180  : 		if (0 < _Gnavail())
; 181  : 			_Gninc();
; 182  : 		else
; 183  : 			uflow();
; 184  : 		}
; 185  : 
; 186  : 	int_type __CLR_OR_THIS_CALL sungetc()
; 187  : 		{	// back up one position
; 188  : 		return (gptr() != 0 && eback() < gptr()
; 189  : 			? _Traits::to_int_type(*_Gndec()) : pbackfail());
; 190  : 		}
; 191  : 
; 192  : 	int_type __CLR_OR_THIS_CALL sputc(_Elem _Ch)
; 193  : 		{	// put a character
; 194  : 		return (0 < _Pnavail()
; 195  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 196  : 			: overflow(_Traits::to_int_type(_Ch)));
; 197  : 		}
; 198  : 
; 199  : 	streamsize __CLR_OR_THIS_CALL sputn(const _Elem *_Ptr,
; 200  : 		streamsize _Count)
; 201  : 		{	// put _Count characters from array beginning at _Ptr
; 202  : 		return (xsputn(_Ptr, _Count));
; 203  : 		}
; 204  : 
; 205  : 	virtual void __CLR_OR_THIS_CALL _Lock()
; 206  : 		{	// set the thread lock (overridden by basic_filebuf)
; 207  : 		}
; 208  : 
; 209  : 	virtual void __CLR_OR_THIS_CALL _Unlock()
; 210  : 		{	// clear the thread lock (overridden by basic_filebuf)
; 211  : 		}
; 212  : 
; 213  : protected:
; 214  : 	_Elem *__CLR_OR_THIS_CALL eback() const
; 215  : 		{	// return beginning of read buffer
; 216  : 		return (*_IGfirst);
; 217  : 		}
; 218  : 
; 219  : 	_Elem *__CLR_OR_THIS_CALL gptr() const
; 220  : 		{	// return current position in read buffer
; 221  : 		return (*_IGnext);
; 222  : 		}
; 223  : 
; 224  : 	_Elem *__CLR_OR_THIS_CALL pbase() const
; 225  : 		{	// return beginning of write buffer
; 226  : 		return (*_IPfirst);
; 227  : 		}
; 228  : 
; 229  : 	_Elem *__CLR_OR_THIS_CALL pptr() const
; 230  : 		{	// return current position in write buffer
; 231  : 		return (*_IPnext);
; 232  : 		}
; 233  : 
; 234  : 	_Elem *__CLR_OR_THIS_CALL egptr() const
; 235  : 		{	// return end of read buffer
; 236  : 		return (*_IGnext + *_IGcount);
; 237  : 		}
; 238  : 
; 239  : 	void __CLR_OR_THIS_CALL gbump(int _Off)
; 240  : 		{	// alter current position in read buffer by _Off
; 241  : 		*_IGcount -= _Off;
; 242  : 		*_IGnext += _Off;
; 243  : 		}
; 244  : 
; 245  : 	void __CLR_OR_THIS_CALL setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
; 246  : 		{	// set pointers for read buffer
; 247  : 		*_IGfirst = _First;
; 248  : 		*_IGnext = _Next;
; 249  : 		*_IGcount = (int)(_Last - _Next);
; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;
; 266  : 		return ((*_IGnext)++);
; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00009	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0000c	8b 10		 mov	 edx, DWORD PTR [eax]
  0000e	85 d2		 test	 edx, edx
  00010	74 0d		 je	 SHORT $LN8@Peek
  00012	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 153  : 			? _Traits::to_int_type(*gptr()) : underflow());

  00015	83 38 00	 cmp	 DWORD PTR [eax], 0
  00018	7e 05		 jle	 SHORT $LN8@Peek
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  0001a	0f b6 02	 movzx	 eax, BYTE PTR [edx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 153  : 			? _Traits::to_int_type(*gptr()) : underflow());

  0001d	eb 05		 jmp	 SHORT $LN9@Peek
$LN8@Peek:
  0001f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00021	ff 50 18	 call	 DWORD PTR [eax+24]
$LN9@Peek:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  00024	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 562  : 				_Meta = _Strbuf->sgetc()))

  00027	74 09		 je	 SHORT $LN2@Peek

; 563  : 			_Strbuf = 0;
; 564  : 		else
; 565  : 			_Val = traits_type::to_char_type(_Meta);

  00029	88 46 05	 mov	 BYTE PTR [esi+5], al

; 566  : 		_Got = true;

  0002c	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00030	5e		 pop	 esi

; 568  : 		}

  00031	c3		 ret	 0
$LN2@Peek:

; 567  : 		return (_Val);

  00032	8a 46 05	 mov	 al, BYTE PTR [esi+5]
  00035	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0003b	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  0003f	5e		 pop	 esi

; 568  : 		}

  00040	c3		 ret	 0
?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@ABEDXZ ENDP ; std::istreambuf_iterator<char,std::char_traits<char> >::_Peek
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ??$?9DU?$char_traits@D@std@@@std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DU?$char_traits@D@std@@@std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z PROC ; std::operator!=<char,std::char_traits<char> >, COMDAT

; 597  : 	{	// test for istreambuf_iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 589  : 	return (_Left.equal(_Right));

  00003	ff 75 0c	 push	 DWORD PTR __Right$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00009	e8 00 00 00 00	 call	 ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z ; std::istreambuf_iterator<char,std::char_traits<char> >::equal

; 598  : 	return (!(_Left == _Right));

  0000e	33 c9		 xor	 ecx, ecx
  00010	84 c0		 test	 al, al
  00012	0f 94 c1	 sete	 cl
  00015	8a c1		 mov	 al, cl

; 599  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$?9DU?$char_traits@D@std@@@std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z ENDP ; std::operator!=<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VVertexUVRGBA@gfxu@@AAV12@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@AAV23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@VVertexUVRGBA@gfxu@@AAV12@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@AAV23@@Z PROC ; std::allocator<gfxu::VertexUVRGBA>::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA &>, COMDAT
; _this$dead$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 3b		 je	 SHORT $LN3@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __V0$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00017	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001a	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001d	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00020	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00023	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00026	89 42 10	 mov	 DWORD PTR [edx+16], eax
  00029	0f b6 41 14	 movzx	 eax, BYTE PTR [ecx+20]
  0002d	88 42 14	 mov	 BYTE PTR [edx+20], al
  00030	0f b6 41 15	 movzx	 eax, BYTE PTR [ecx+21]
  00034	88 42 15	 mov	 BYTE PTR [edx+21], al
  00037	0f b6 41 16	 movzx	 eax, BYTE PTR [ecx+22]
  0003b	88 42 16	 mov	 BYTE PTR [edx+22], al
  0003e	0f b6 41 17	 movzx	 eax, BYTE PTR [ecx+23]
  00042	88 42 17	 mov	 BYTE PTR [edx+23], al
$LN3@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
??$construct@VVertexUVRGBA@gfxu@@AAV12@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@AAV23@@Z ENDP ; std::allocator<gfxu::VertexUVRGBA>::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VVertexUVRGBA@gfxu@@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@@Z
_TEXT	SEGMENT
__Ptr$dead$ = 8						; size = 4
??$destroy@VVertexUVRGBA@gfxu@@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@@Z PROC ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::destroy<gfxu::VertexUVRGBA>, COMDAT
; _this$dead$ = ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);
; 910  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@VVertexUVRGBA@gfxu@@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@@Z ENDP ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::destroy<gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAVVertexUVRGBA@gfxu@@@std@@YAPAVVertexUVRGBA@gfxu@@PAV12@@Z
_TEXT	SEGMENT
??$_Val_type@PAVVertexUVRGBA@gfxu@@@std@@YAPAVVertexUVRGBA@gfxu@@PAV12@@Z PROC ; std::_Val_type<gfxu::VertexUVRGBA *>, COMDAT
; ___formal$dead$ = ecx

; 711  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 712  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAVVertexUVRGBA@gfxu@@@std@@YAPAVVertexUVRGBA@gfxu@@PAV12@@Z ENDP ; std::_Val_type<gfxu::VertexUVRGBA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVVertexUVRGBA@gfxu@@PAV12@V?$allocator@VVertexUVRGBA@gfxu@@@std@@V12@@std@@YAPAVVertexUVRGBA@gfxu@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
___formal$dead$ = 16					; size = 4
___formal$ = 20						; size = 1
??$_Uninit_move@PAVVertexUVRGBA@gfxu@@PAV12@V?$allocator@VVertexUVRGBA@gfxu@@@std@@V12@@std@@YAPAVVertexUVRGBA@gfxu@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<gfxu::VertexUVRGBA *,gfxu::VertexUVRGBA *,std::allocator<gfxu::VertexUVRGBA>,gfxu::VertexUVRGBA>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 426  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 432  : 	for (; _First != _Last; ++_Dest, ++_First)

  00003	3b ca		 cmp	 ecx, edx
  00005	74 58		 je	 SHORT $LN35@Uninit_mov
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000b	57		 push	 edi
  0000c	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
  0000f	90		 npad	 1
$LL6@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00010	85 f6		 test	 esi, esi
  00012	74 38		 je	 SHORT $LN24@Uninit_mov
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  00014	8b 47 f8	 mov	 eax, DWORD PTR [edi-8]
  00017	89 06		 mov	 DWORD PTR [esi], eax
  00019	8b 47 fc	 mov	 eax, DWORD PTR [edi-4]
  0001c	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001f	8b 07		 mov	 eax, DWORD PTR [edi]
  00021	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00024	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00027	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0002a	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0002d	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00030	0f b6 47 0c	 movzx	 eax, BYTE PTR [edi+12]
  00034	88 46 14	 mov	 BYTE PTR [esi+20], al
  00037	0f b6 47 0d	 movzx	 eax, BYTE PTR [edi+13]
  0003b	88 46 15	 mov	 BYTE PTR [esi+21], al
  0003e	0f b6 47 0e	 movzx	 eax, BYTE PTR [edi+14]
  00042	88 46 16	 mov	 BYTE PTR [esi+22], al
  00045	0f b6 47 0f	 movzx	 eax, BYTE PTR [edi+15]
  00049	88 46 17	 mov	 BYTE PTR [esi+23], al
$LN24@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 432  : 	for (; _First != _Last; ++_Dest, ++_First)

  0004c	83 c7 18	 add	 edi, 24			; 00000018H
  0004f	83 c6 18	 add	 esi, 24			; 00000018H
  00052	8d 4f f8	 lea	 ecx, DWORD PTR [edi-8]
  00055	3b ca		 cmp	 ecx, edx
  00057	75 b7		 jne	 SHORT $LL6@Uninit_mov

; 433  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 434  : 	_CATCH_ALL
; 435  : 	for (; _Next != _Dest; ++_Next)
; 436  : 		_Al.destroy(_Next);
; 437  : 	_RERAISE;
; 438  : 	_CATCH_END
; 439  : 	return (_Dest);

  00059	5f		 pop	 edi
  0005a	8b c6		 mov	 eax, esi
  0005c	5e		 pop	 esi

; 440  : 	}

  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
$LN35@Uninit_mov:

; 433  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 434  : 	_CATCH_ALL
; 435  : 	for (; _Next != _Dest; ++_Next)
; 436  : 		_Al.destroy(_Next);
; 437  : 	_RERAISE;
; 438  : 	_CATCH_END
; 439  : 	return (_Dest);

  0005f	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]

; 440  : 	}

  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
??$_Uninit_move@PAVVertexUVRGBA@gfxu@@PAV12@V?$allocator@VVertexUVRGBA@gfxu@@@std@@V12@@std@@YAPAVVertexUVRGBA@gfxu@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<gfxu::VertexUVRGBA *,gfxu::VertexUVRGBA *,std::allocator<gfxu::VertexUVRGBA>,gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??$_Unchecked@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@YA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 12
??$_Unchecked@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@YA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT
; ___$ReturnUdt$ = ecx

; 675  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 0c		 jne	 SHORT $LN7@Unchecked
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  0000a	89 01		 mov	 DWORD PTR [ecx], eax

; 50   : 		_Myoff = _Off;

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Iter$[ebp+8]
  0000f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 676  : 	return (_Iter._Unchecked());

  00012	8b c1		 mov	 eax, ecx

; 677  : 	}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
$LN7@Unchecked:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  00018	89 01		 mov	 DWORD PTR [ecx], eax

; 50   : 		_Myoff = _Off;

  0001a	8b 45 10	 mov	 eax, DWORD PTR __Iter$[ebp+8]
  0001d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 676  : 	return (_Iter._Unchecked());

  00020	8b c1		 mov	 eax, ecx

; 677  : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Unchecked@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@YA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Iter_cat@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
??$_Iter_cat@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z PROC ; std::_Iter_cat<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT
; ___$ReturnUdt$ = ecx
; ___formal$dead$ = edx

; 399  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 400  : 	return (_Cat);

  00000	8b c1		 mov	 eax, ecx

; 401  : 	}

  00002	c3		 ret	 0
??$_Iter_cat@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z ENDP ; std::_Iter_cat<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Reverse@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0Ubidirectional_iterator_tag@0@@Z
_TEXT	SEGMENT
__Tmp$1 = -76						; size = 64
__$ArrayPad$ = -8					; size = 4
___formal$ = 8						; size = 1
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
??$_Reverse@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0Ubidirectional_iterator_tag@0@@Z PROC ; std::_Reverse<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT

; 3352 : 	{	// reverse elements in [_First, _Last), bidirectional iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 f8	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 128  : 		return (_Myoff == _Right._Myoff);

  00010	8b 55 18	 mov	 edx, DWORD PTR __Last$[ebp+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3352 : 	{	// reverse elements in [_First, _Last), bidirectional iterators

  00013	53		 push	 ebx
  00014	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 128  : 		return (_Myoff == _Right._Myoff);

  00015	8b 75 10	 mov	 esi, DWORD PTR __First$[ebp+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3352 : 	{	// reverse elements in [_First, _Last), bidirectional iterators

  00018	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 128  : 		return (_Myoff == _Right._Myoff);

  00019	3b f2		 cmp	 esi, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3353 : 	for (; _First != _Last && _First != --_Last; ++_First)

  0001b	74 56		 je	 SHORT $LN1@Reverse
  0001d	8d 49 00	 npad	 3
$LL8@Reverse:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 80   : 		--_Myoff;

  00020	4a		 dec	 edx
  00021	89 55 18	 mov	 DWORD PTR __Last$[ebp+4], edx

; 128  : 		return (_Myoff == _Right._Myoff);

  00024	3b f2		 cmp	 esi, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3353 : 	for (; _First != _Last && _First != --_Last; ++_First)

  00026	74 4b		 je	 SHORT $LN1@Reverse
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00028	8b 45 14	 mov	 eax, DWORD PTR __Last$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 47   : 	_Ty _Tmp = _Move(_Left);

  0002b	8d 7d b4	 lea	 edi, DWORD PTR __Tmp$1[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0002e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00034	49		 dec	 ecx
  00035	23 ca		 and	 ecx, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  00037	8b 1c 88	 mov	 ebx, DWORD PTR [eax+ecx*4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0003a	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 48   : 	_Left = _Move(_Right);

  0003d	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0003e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00044	49		 dec	 ecx
  00045	23 ce		 and	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  00047	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 47   : 	_Ty _Tmp = _Move(_Left);

  0004a	8b f0		 mov	 esi, eax
  0004c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00051	f3 a5		 rep movsd

; 48   : 	_Left = _Move(_Right);

  00053	8b c8		 mov	 ecx, eax
  00055	e8 00 00 00 00	 call	 ??4Matrix@geom@@QAEAAV01@ABV01@@Z ; geom::Matrix::operator=

; 49   : 	_Right = _Move(_Tmp);

  0005a	8d 45 b4	 lea	 eax, DWORD PTR __Tmp$1[ebp]
  0005d	50		 push	 eax
  0005e	8b cb		 mov	 ecx, ebx
  00060	e8 00 00 00 00	 call	 ??4Matrix@geom@@QAEAAV01@ABV01@@Z ; geom::Matrix::operator=
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 67   : 		++_Myoff;

  00065	8b 75 10	 mov	 esi, DWORD PTR __First$[ebp+4]

; 128  : 		return (_Myoff == _Right._Myoff);

  00068	8b 55 18	 mov	 edx, DWORD PTR __Last$[ebp+4]

; 67   : 		++_Myoff;

  0006b	46		 inc	 esi
  0006c	89 75 10	 mov	 DWORD PTR __First$[ebp+4], esi

; 128  : 		return (_Myoff == _Right._Myoff);

  0006f	3b f2		 cmp	 esi, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3353 : 	for (; _First != _Last && _First != --_Last; ++_First)

  00071	75 ad		 jne	 SHORT $LL8@Reverse
$LN1@Reverse:

; 3354 : 		_STD iter_swap(_First, _Last);
; 3355 : 	}

  00073	8b 4d f8	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	33 cd		 xor	 ecx, ebp
  0007a	5b		 pop	 ebx
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
??$_Reverse@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0Ubidirectional_iterator_tag@0@@Z ENDP ; std::_Reverse<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__First$ = 12						; size = 8
__Mid$ = 20						; size = 8
__Last$ = 28						; size = 8
??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00Urandom_access_iterator_tag@0@@Z PROC ; std::_Rotate<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT

; 3427 : 	{	// rotate [_First, _Last), random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3428 : 	_Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));

  00004	ff 75 20	 push	 DWORD PTR __Last$[ebp+4]
  00007	ff 75 1c	 push	 DWORD PTR __Last$[ebp]
  0000a	ff 75 18	 push	 DWORD PTR __Mid$[ebp+4]
  0000d	ff 75 14	 push	 DWORD PTR __Mid$[ebp]
  00010	ff 75 10	 push	 DWORD PTR __First$[ebp+4]
  00013	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  00016	e8 00 00 00 00	 call	 ??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@HVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PAHPAVMatrix@geom@@@Z ; std::_Rotate<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,int,geom::Matrix>
  0001b	83 c4 18	 add	 esp, 24			; 00000018H
  0001e	59		 pop	 ecx

; 3429 : 	}

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00Urandom_access_iterator_tag@0@@Z ENDP ; std::_Rotate<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAHV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
__Lock$2 = -20						; size = 4
__Lock$3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAHV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z PROC ; std::distance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT

; 821  : 	{	// return distance between iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAHV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00026	8b 45 14	 mov	 eax, DWORD PTR __Last$[ebp]
  00029	85 c0		 test	 eax, eax
  0002b	74 17		 je	 SHORT $LN21@distance

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);
; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  0002d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00030	75 12		 jne	 SHORT $LN21@distance

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00032	6a 03		 push	 3
  00034	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00037	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  0003c	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0003f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN21@distance:
  00044	8b 75 1c	 mov	 esi, DWORD PTR __Last$[ebp+8]

; 822  : 	typename iterator_traits<_InIt>::difference_type _Off = 0;
; 823  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));

  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 124  : 		if (_Myproxy == _Right._Myproxy)

  0004e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00051	85 c0		 test	 eax, eax
  00053	74 17		 je	 SHORT $LN43@distance

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);
; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00055	83 38 00	 cmp	 DWORD PTR [eax], 0
  00058	75 12		 jne	 SHORT $LN43@distance

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  0005a	6a 03		 push	 3
  0005c	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0005f	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00064	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00067	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN43@distance:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));

  0006c	8b 45 10	 mov	 eax, DWORD PTR __First$[ebp+8]
  0006f	2b f0		 sub	 esi, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 824  : 	return (_Off);

  00071	8b c6		 mov	 eax, esi

; 825  : 	}

  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5e		 pop	 esi
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAHV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z$0:
  00000	e9 00 00 00 00	 jmp	 ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAHV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z:
  00005	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00009	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000c	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAHV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAHV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z ENDP ; std::distance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$advance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@H@std@@YAXAAV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@H@Z
_TEXT	SEGMENT
??$advance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@H@std@@YAXAAV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@H@Z PROC ; std::advance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,int>, COMDAT
; __Where$ = ecx
; __Off$ = edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 640  : 		this->_Myoff += _Off;

  00000	01 51 08	 add	 DWORD PTR [ecx+8], edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 763  : 	}

  00003	c3		 ret	 0
??$advance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@H@std@@YAXAAV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@H@Z ENDP ; std::advance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VMatrix@geom@@V12@@?$allocator@VMatrix@geom@@@std@@QAEXPAVMatrix@geom@@$$QAV23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@VMatrix@geom@@V12@@?$allocator@VMatrix@geom@@@std@@QAEXPAVMatrix@geom@@$$QAV23@@Z PROC ; std::allocator<geom::Matrix>::construct<geom::Matrix,geom::Matrix>, COMDAT
; _this$dead$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR __V0$[ebp]
  0000f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct:
  00017	5f		 pop	 edi
  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??$construct@VMatrix@geom@@V12@@?$allocator@VMatrix@geom@@@std@@QAEXPAVMatrix@geom@@$$QAV23@@Z ENDP ; std::allocator<geom::Matrix>::construct<geom::Matrix,geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VMatrix@geom@@@?$allocator@VMatrix@geom@@@std@@QAEXPAVMatrix@geom@@@Z
_TEXT	SEGMENT
__Ptr$dead$ = 8						; size = 4
??$destroy@VMatrix@geom@@@?$allocator@VMatrix@geom@@@std@@QAEXPAVMatrix@geom@@@Z PROC ; std::allocator<geom::Matrix>::destroy<geom::Matrix>, COMDAT
; _this$dead$ = ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@VMatrix@geom@@@?$allocator@VMatrix@geom@@@std@@QAEXPAVMatrix@geom@@@Z ENDP ; std::allocator<geom::Matrix>::destroy<geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAVMatrix@geom@@@?$allocator@VMatrix@geom@@@std@@QAEXPAPAVMatrix@geom@@@Z
_TEXT	SEGMENT
__Ptr$dead$ = 8						; size = 4
??$destroy@PAVMatrix@geom@@@?$allocator@VMatrix@geom@@@std@@QAEXPAPAVMatrix@geom@@@Z PROC ; std::allocator<geom::Matrix>::destroy<geom::Matrix *>, COMDAT
; _this$dead$ = ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAVMatrix@geom@@@?$allocator@VMatrix@geom@@@std@@QAEXPAPAVMatrix@geom@@@Z ENDP ; std::allocator<geom::Matrix>::destroy<geom::Matrix *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Fill_n@PAPAVMatrix@geom@@IPAV12@@std@@YAPAPAVMatrix@geom@@PAPAV12@IABQAV12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Fill_n@PAPAVMatrix@geom@@IPAV12@@std@@YAPAPAVMatrix@geom@@PAPAV12@IABQAV12@@Z PROC ; std::_Fill_n<geom::Matrix * *,unsigned int,geom::Matrix *>, COMDAT
; __Dest$ = ecx
; __Count$ = edx

; 2677 : 	{	// copy _Val _Count times through [_Dest, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2678 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00003	85 d2		 test	 edx, edx
  00005	74 14		 je	 SHORT $LN9@Fill_n
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __Val$[ebp]
  0000b	eb 03 8d 49 00	 npad	 5
$LL3@Fill_n:

; 2679 : 		*_Dest = _Val;

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	89 01		 mov	 DWORD PTR [ecx], eax
  00014	83 c1 04	 add	 ecx, 4
  00017	4a		 dec	 edx
  00018	75 f6		 jne	 SHORT $LL3@Fill_n
  0001a	5e		 pop	 esi
$LN9@Fill_n:

; 2680 : 	return (_Dest);

  0001b	8b c1		 mov	 eax, ecx

; 2681 : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Fill_n@PAPAVMatrix@geom@@IPAV12@@std@@YAPAPAVMatrix@geom@@PAPAV12@IABQAV12@@Z ENDP ; std::_Fill_n<geom::Matrix * *,unsigned int,geom::Matrix *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Unchecked@?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unchecked@?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Unchecked, COMDAT
; _this$ = ecx

; 598  : 		{	// make an unchecked iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	85 c0		 test	 eax, eax
  00007	75 11		 jne	 SHORT $LN5@Unchecked
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  00009	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 50   : 		_Myoff = _Off;

  0000c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0000f	33 d2		 xor	 edx, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  00011	89 10		 mov	 DWORD PTR [eax], edx

; 50   : 		_Myoff = _Off;

  00013	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 599  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));
; 600  : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN5@Unchecked:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 50   : 		_Myoff = _Off;

  0001f	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00022	89 10		 mov	 DWORD PTR [eax], edx
  00024	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 599  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));
; 600  : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?_Unchecked@?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??E?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++, COMDAT
; _this$ = ecx

; 67   : 		++_Myoff;

  00000	ff 41 04	 inc	 DWORD PTR [ecx+4]

; 212  : 		++*(_Mybase *)this;
; 213  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 214  : 		}

  00005	c3		 ret	 0
??E?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??F?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator--, COMDAT
; _this$ = ecx

; 80   : 		--_Myoff;

  00000	ff 49 04	 dec	 DWORD PTR [ecx+4]

; 225  : 		--*(_Mybase *)this;
; 226  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 227  : 		}

  00005	c3		 ret	 0
??F?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??9?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator!=, COMDAT
; _this$ = ecx

; 132  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : 		return (_Myoff == _Right._Myoff);

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]

; 133  : 		return (!(*this == _Right));

  00009	33 c0		 xor	 eax, eax

; 128  : 		return (_Myoff == _Right._Myoff);

  0000b	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]

; 133  : 		return (!(*this == _Right));

  0000e	0f 95 c0	 setne	 al

; 134  : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??9?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT
; _this$ = ecx

; 197  : 		{	// construct with offset _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdeque$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 50   : 		_Myoff = _Off;

  00008	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 198  : 		}

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??E?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++, COMDAT
; _this$ = ecx

; 67   : 		++_Myoff;

  00000	ff 41 04	 inc	 DWORD PTR [ecx+4]

; 68   : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 69   : 		}

  00005	c3		 ret	 0
??E?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??F?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator--, COMDAT
; _this$ = ecx

; 80   : 		--_Myoff;

  00000	ff 49 04	 dec	 DWORD PTR [ecx+4]

; 81   : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 82   : 		}

  00005	c3		 ret	 0
??F?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??8?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator==, COMDAT
; _this$ = ecx

; 127  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : 		return (_Myoff == _Right._Myoff);

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	33 c0		 xor	 eax, eax
  0000b	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0000e	0f 94 c0	 sete	 al

; 129  : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??8?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT
; _this$ = ecx

; 46   : 	_Deque_unchecked_const_iterator(size_type _Off,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		const _Container_base12 *_Pdeque)
; 48   : 		{	// construct with offset _Off
; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Pdeque$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 50   : 		_Myoff = _Off;

  00008	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 51   : 		}

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ??$?8DU?$char_traits@D@std@@@std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@@std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z PROC ; std::operator==<char,std::char_traits<char> >, COMDAT

; 588  : 	{	// test for istreambuf_iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 589  : 	return (_Left.equal(_Right));

  00003	ff 75 0c	 push	 DWORD PTR __Right$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00009	e8 00 00 00 00	 call	 ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z ; std::istreambuf_iterator<char,std::char_traits<char> >::equal

; 590  : 	}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$?8DU?$char_traits@D@std@@@std@@YA_NABV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z ENDP ; std::operator==<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VVertexUVRGBA@gfxu@@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAAV?$allocator@VVertexUVRGBA@gfxu@@@1@PAVVertexUVRGBA@gfxu@@@Z
_TEXT	SEGMENT
??$destroy@VVertexUVRGBA@gfxu@@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAAV?$allocator@VVertexUVRGBA@gfxu@@@1@PAVVertexUVRGBA@gfxu@@@Z PROC ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::destroy<gfxu::VertexUVRGBA>, COMDAT
; __Al$dead$ = ecx
; __Ptr$dead$ = edx

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);
; 758  : 		}

  00000	c3		 ret	 0
??$destroy@VVertexUVRGBA@gfxu@@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAAV?$allocator@VVertexUVRGBA@gfxu@@@1@PAVVertexUVRGBA@gfxu@@@Z ENDP ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::destroy<gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VVertexUVRGBA@gfxu@@V12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@$$QAV23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@VVertexUVRGBA@gfxu@@V12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@$$QAV23@@Z PROC ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>, COMDAT
; _this$dead$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 3b		 je	 SHORT $LN11@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __V0$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00017	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001a	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001d	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00020	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00023	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00026	89 42 10	 mov	 DWORD PTR [edx+16], eax
  00029	0f b6 41 14	 movzx	 eax, BYTE PTR [ecx+20]
  0002d	88 42 14	 mov	 BYTE PTR [edx+20], al
  00030	0f b6 41 15	 movzx	 eax, BYTE PTR [ecx+21]
  00034	88 42 15	 mov	 BYTE PTR [edx+21], al
  00037	0f b6 41 16	 movzx	 eax, BYTE PTR [ecx+22]
  0003b	88 42 16	 mov	 BYTE PTR [edx+22], al
  0003e	0f b6 41 17	 movzx	 eax, BYTE PTR [ecx+23]
  00042	88 42 17	 mov	 BYTE PTR [edx+23], al
$LN11@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
??$construct@VVertexUVRGBA@gfxu@@V12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QAEXPAVVertexUVRGBA@gfxu@@$$QAV23@@Z ENDP ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??$iter_swap@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@V12@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
__Tmp$1 = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
__Left$ = 8						; size = 8
__Right$ = 16						; size = 8
??$iter_swap@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@V12@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z PROC ; std::iter_swap<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT

; 25   : 	{	// swap *_Left and *_Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00010	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 25   : 	{	// swap *_Left and *_Right

  00013	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00014	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  00017	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0001a	49		 dec	 ecx
  0001b	23 4d 14	 and	 ecx, DWORD PTR __Right$[ebp+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 25   : 	{	// swap *_Left and *_Right

  0001e	56		 push	 esi
  0001f	57		 push	 edi

; 26   : 	swap(*_Left, *_Right);

  00020	8b 1c 88	 mov	 ebx, DWORD PTR [eax+ecx*4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00023	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 47   : 	_Ty _Tmp = _Move(_Left);

  00026	8d 7d b8	 lea	 edi, DWORD PTR __Tmp$1[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00029	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  0002c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0002f	49		 dec	 ecx
  00030	23 4d 0c	 and	 ecx, DWORD PTR __Left$[ebp+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 48   : 	_Left = _Move(_Right);

  00033	53		 push	 ebx

; 26   : 	swap(*_Left, *_Right);

  00034	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 47   : 	_Ty _Tmp = _Move(_Left);

  00037	8b f0		 mov	 esi, eax
  00039	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0003e	f3 a5		 rep movsd

; 48   : 	_Left = _Move(_Right);

  00040	8b c8		 mov	 ecx, eax
  00042	e8 00 00 00 00	 call	 ??4Matrix@geom@@QAEAAV01@ABV01@@Z ; geom::Matrix::operator=

; 49   : 	_Right = _Move(_Tmp);

  00047	8d 45 b8	 lea	 eax, DWORD PTR __Tmp$1[ebp]
  0004a	50		 push	 eax
  0004b	8b cb		 mov	 ecx, ebx
  0004d	e8 00 00 00 00	 call	 ??4Matrix@geom@@QAEAAV01@ABV01@@Z ; geom::Matrix::operator=

; 27   : 	}

  00052	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	33 cd		 xor	 ecx, ebp
  00059	5b		 pop	 ebx
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
??$iter_swap@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@V12@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z ENDP ; std::iter_swap<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Dist_type@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAPAHV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 8
??$_Dist_type@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAPAHV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z PROC ; std::_Dist_type<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT

; 771  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 772  : 	}

  00002	c3		 ret	 0
??$_Dist_type@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAPAHV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z ENDP ; std::_Dist_type<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAPAVMatrix@geom@@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 8
??$_Val_type@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAPAVMatrix@geom@@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z PROC ; std::_Val_type<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT

; 711  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 712  : 	}

  00002	c3		 ret	 0
??$_Val_type@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAPAVMatrix@geom@@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z ENDP ; std::_Val_type<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@HVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PAHPAVMatrix@geom@@@Z
_TEXT	SEGMENT
$T1 = -140						; size = 8
__Tmp$2 = -132						; size = 8
__Tmp$1$ = -128						; size = 4
$T3 = -124						; size = 8
$T4 = -116						; size = 8
$T5 = -108						; size = 8
__Next$1$ = -100					; size = 4
__Next$2$ = -96						; size = 4
__Tmp$6 = -92						; size = 8
__Tmp$7 = -92						; size = 8
__Tmp$8 = -92						; size = 8
__Next1$1$ = -88					; size = 4
__Shift$1$ = -84					; size = 4
__Tmp$2$ = -80						; size = 4
__Count$1$ = -76					; size = 4
__Tmp$9 = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 8
__Mid$ = 16						; size = 8
__Last$ = 24						; size = 8
??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@HVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PAHPAVMatrix@geom@@@Z PROC ; std::_Rotate<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,int,geom::Matrix>, COMDAT
; ___formal$dead$ = ecx
; ___formal$dead$ = edx

; 3395 : 	{	// rotate [_First, _Last), random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));

  00013	8b 55 14	 mov	 edx, DWORD PTR __Mid$[ebp+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3395 : 	{	// rotate [_First, _Last), random-access iterators

  00016	53		 push	 ebx
  00017	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));

  00018	8b 75 0c	 mov	 esi, DWORD PTR __First$[ebp+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3395 : 	{	// rotate [_First, _Last), random-access iterators

  0001b	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));

  0001c	8b 7d 1c	 mov	 edi, DWORD PTR __Last$[ebp+4]
  0001f	8b df		 mov	 ebx, edi
  00021	2b de		 sub	 ebx, esi
  00023	2b d6		 sub	 edx, esi
  00025	8b c3		 mov	 eax, ebx
  00027	89 55 ac	 mov	 DWORD PTR __Shift$1$[ebp], edx
  0002a	89 45 b4	 mov	 DWORD PTR __Count$1$[ebp], eax
  0002d	3b f7		 cmp	 esi, edi
  0002f	76 03		 jbe	 SHORT $LN27@Rotate
  00031	89 5d b4	 mov	 DWORD PTR __Count$1$[ebp], ebx
$LN27@Rotate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3399 : 	for (_Diff _Factor = _Shift; _Factor != 0; )

  00034	8b ca		 mov	 ecx, edx
  00036	85 d2		 test	 edx, edx
  00038	74 17		 je	 SHORT $LN8@Rotate
  0003a	8d 9b 00 00 00
	00		 npad	 6
$LL9@Rotate:

; 3400 : 		{	// find subcycle count as GCD of shift count and length
; 3401 : 		_Diff _Tmp = _Count % _Factor;

  00040	99		 cdq
  00041	f7 f9		 idiv	 ecx

; 3402 : 		_Count = _Factor;

  00043	8b c1		 mov	 eax, ecx

; 3403 : 		_Factor = _Tmp;

  00045	8b ca		 mov	 ecx, edx
  00047	85 d2		 test	 edx, edx
  00049	75 f5		 jne	 SHORT $LL9@Rotate
  0004b	8b 55 ac	 mov	 edx, DWORD PTR __Shift$1$[ebp]
  0004e	89 45 b4	 mov	 DWORD PTR __Count$1$[ebp], eax
$LN8@Rotate:

; 3404 : 		}
; 3405 : 
; 3406 : 	if (_Count < _Last - _First)

  00051	3b c3		 cmp	 eax, ebx
  00053	0f 8d 47 01 00
	00		 jge	 $LN4@Rotate

; 3407 : 		for (; 0 < _Count; --_Count)

  00059	85 c0		 test	 eax, eax
  0005b	0f 8e 3f 01 00
	00		 jle	 $LN4@Rotate
  00061	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
$LL6@Rotate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 93   : 		_Myoff += _Off;

  00064	03 c6		 add	 eax, esi

; 244  : 		_Myiter _Tmp = *this;

  00066	89 75 80	 mov	 DWORD PTR __Tmp$2[ebp+4], esi

; 93   : 		_Myoff += _Off;

  00069	8d 0c 10	 lea	 ecx, DWORD PTR [eax+edx]
  0006c	89 45 80	 mov	 DWORD PTR __Tmp$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3410 : 			_RanIt _Next = _Hole;

  0006f	89 5d 9c	 mov	 DWORD PTR __Next$1$[ebp], ebx
  00072	89 45 a0	 mov	 DWORD PTR __Next$2$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 128  : 		return (_Myoff == _Right._Myoff);

  00075	3b cf		 cmp	 ecx, edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3411 : 			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;

  00077	75 14		 jne	 SHORT $LN12@Rotate
  00079	89 9d 74 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ebx
  0007f	89 b5 78 ff ff
	ff		 mov	 DWORD PTR $T1[ebp+4], esi
  00085	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0008b	eb 0c		 jmp	 SHORT $LN13@Rotate
$LN12@Rotate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 244  : 		_Myiter _Tmp = *this;

  0008d	89 45 a8	 mov	 DWORD PTR __Tmp$8[ebp+4], eax

; 245  : 		return (_Tmp += _Off);

  00090	89 5d 94	 mov	 DWORD PTR $T5[ebp], ebx
  00093	89 4d 98	 mov	 DWORD PTR $T5[ebp+4], ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3411 : 			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;

  00096	8d 45 94	 lea	 eax, DWORD PTR $T5[ebp]
$LN13@Rotate:
  00099	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0009e	89 4d b0	 mov	 DWORD PTR __Tmp$2$[ebp], ecx
  000a1	89 45 a8	 mov	 DWORD PTR __Next1$1$[ebp], eax
$LL3@Rotate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  000a4	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  000a7	49		 dec	 ecx
  000a8	23 c8		 and	 ecx, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  000aa	8b 45 b0	 mov	 eax, DWORD PTR __Tmp$2$[ebp]

; 27   : 	}
; 28   : 
; 29   : 		// TEMPLATE FUNCTION swap
; 30   : template<class _Ty,
; 31   : 	size_t _Size> inline
; 32   : 	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
; 33   : 	{	// exchange arrays stored at _Left and _Right
; 34   : 	if (&_Left != &_Right)
; 35   : 		{	// worth swapping, swap ranges
; 36   : 		_Ty *_First1 = _Left;
; 37   : 		_Ty *_Last1 = _First1 + _Size;
; 38   : 		_Ty *_First2 = _Right;
; 39   : 		for (; _First1 != _Last1; ++_First1, ++_First2)
; 40   : 			_STD iter_swap(_First1, _First2);
; 41   : 		}
; 42   : 	}
; 43   : 
; 44   : template<class _Ty> inline
; 45   : 	void swap(_Ty& _Left, _Ty& _Right)
; 46   : 	{	// exchange values stored at _Left and _Right
; 47   : 	_Ty _Tmp = _Move(_Left);

  000ad	8d 7d b8	 lea	 edi, DWORD PTR __Tmp$9[ebp]

; 26   : 	swap(*_Left, *_Right);

  000b0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000b3	8b 1c 88	 mov	 ebx, DWORD PTR [eax+ecx*4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  000b6	8b 45 9c	 mov	 eax, DWORD PTR __Next$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 48   : 	_Left = _Move(_Right);

  000b9	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  000ba	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  000bd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  000c0	49		 dec	 ecx
  000c1	23 4d a0	 and	 ecx, DWORD PTR __Next$2$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  000c4	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 27   : 	}
; 28   : 
; 29   : 		// TEMPLATE FUNCTION swap
; 30   : template<class _Ty,
; 31   : 	size_t _Size> inline
; 32   : 	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
; 33   : 	{	// exchange arrays stored at _Left and _Right
; 34   : 	if (&_Left != &_Right)
; 35   : 		{	// worth swapping, swap ranges
; 36   : 		_Ty *_First1 = _Left;
; 37   : 		_Ty *_Last1 = _First1 + _Size;
; 38   : 		_Ty *_First2 = _Right;
; 39   : 		for (; _First1 != _Last1; ++_First1, ++_First2)
; 40   : 			_STD iter_swap(_First1, _First2);
; 41   : 		}
; 42   : 	}
; 43   : 
; 44   : template<class _Ty> inline
; 45   : 	void swap(_Ty& _Left, _Ty& _Right)
; 46   : 	{	// exchange values stored at _Left and _Right
; 47   : 	_Ty _Tmp = _Move(_Left);

  000c7	8b f0		 mov	 esi, eax
  000c9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000ce	f3 a5		 rep movsd

; 48   : 	_Left = _Move(_Right);

  000d0	8b c8		 mov	 ecx, eax
  000d2	e8 00 00 00 00	 call	 ??4Matrix@geom@@QAEAAV01@ABV01@@Z ; geom::Matrix::operator=
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 214  : 		data[i] = mat.data[i];

  000d7	8b 45 b8	 mov	 eax, DWORD PTR __Tmp$9[ebp]
  000da	89 03		 mov	 DWORD PTR [ebx], eax
  000dc	8b 45 bc	 mov	 eax, DWORD PTR __Tmp$9[ebp+4]
  000df	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  000e2	8b 45 c0	 mov	 eax, DWORD PTR __Tmp$9[ebp+8]
  000e5	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  000e8	8b 45 c4	 mov	 eax, DWORD PTR __Tmp$9[ebp+12]
  000eb	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
  000ee	8b 45 c8	 mov	 eax, DWORD PTR __Tmp$9[ebp+16]
  000f1	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  000f4	8b 45 cc	 mov	 eax, DWORD PTR __Tmp$9[ebp+20]
  000f7	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  000fa	8b 45 d0	 mov	 eax, DWORD PTR __Tmp$9[ebp+24]
  000fd	89 43 18	 mov	 DWORD PTR [ebx+24], eax
  00100	8b 45 d4	 mov	 eax, DWORD PTR __Tmp$9[ebp+28]
  00103	89 43 1c	 mov	 DWORD PTR [ebx+28], eax
  00106	8b 45 d8	 mov	 eax, DWORD PTR __Tmp$9[ebp+32]
  00109	89 43 20	 mov	 DWORD PTR [ebx+32], eax
  0010c	8b 45 dc	 mov	 eax, DWORD PTR __Tmp$9[ebp+36]
  0010f	89 43 24	 mov	 DWORD PTR [ebx+36], eax
  00112	8b 45 e0	 mov	 eax, DWORD PTR __Tmp$9[ebp+40]
  00115	89 43 28	 mov	 DWORD PTR [ebx+40], eax
  00118	8b 45 e4	 mov	 eax, DWORD PTR __Tmp$9[ebp+44]
  0011b	89 43 2c	 mov	 DWORD PTR [ebx+44], eax
  0011e	8b 45 e8	 mov	 eax, DWORD PTR __Tmp$9[ebp+48]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3417 : 					: _First + (_Shift - (_Last - _Next1));

  00121	8b 55 ac	 mov	 edx, DWORD PTR __Shift$1$[ebp]
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 214  : 		data[i] = mat.data[i];

  00124	89 43 30	 mov	 DWORD PTR [ebx+48], eax
  00127	8b 45 ec	 mov	 eax, DWORD PTR __Tmp$9[ebp+52]
  0012a	89 43 34	 mov	 DWORD PTR [ebx+52], eax
  0012d	8b 45 f0	 mov	 eax, DWORD PTR __Tmp$9[ebp+56]
  00130	89 43 38	 mov	 DWORD PTR [ebx+56], eax
  00133	8b 45 f4	 mov	 eax, DWORD PTR __Tmp$9[ebp+60]
  00136	89 43 3c	 mov	 DWORD PTR [ebx+60], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3415 : 				_Next = _Next1;

  00139	8b 45 b0	 mov	 eax, DWORD PTR __Tmp$2$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));

  0013c	8b 7d 1c	 mov	 edi, DWORD PTR __Last$[ebp+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3417 : 					: _First + (_Shift - (_Last - _Next1));

  0013f	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00142	89 45 9c	 mov	 DWORD PTR __Next$1$[ebp], eax
  00145	8b 45 a8	 mov	 eax, DWORD PTR __Next1$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));

  00148	8b cf		 mov	 ecx, edi
  0014a	2b c8		 sub	 ecx, eax
  0014c	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3417 : 					: _First + (_Shift - (_Last - _Next1));

  0014e	3b d6		 cmp	 edx, esi
  00150	8b 75 0c	 mov	 esi, DWORD PTR __First$[ebp+4]
  00153	89 45 a0	 mov	 DWORD PTR __Next$2$[ebp], eax
  00156	7d 13		 jge	 SHORT $LN14@Rotate
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 245  : 		return (_Tmp += _Off);

  00158	8b 4d b0	 mov	 ecx, DWORD PTR __Tmp$2$[ebp]
  0015b	89 45 a8	 mov	 DWORD PTR __Tmp$6[ebp+4], eax

; 93   : 		_Myoff += _Off;

  0015e	03 c2		 add	 eax, edx

; 245  : 		return (_Tmp += _Off);

  00160	89 45 90	 mov	 DWORD PTR $T4[ebp+4], eax
  00163	89 4d 8c	 mov	 DWORD PTR $T4[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3417 : 					: _First + (_Shift - (_Last - _Next1));

  00166	8d 45 8c	 lea	 eax, DWORD PTR $T4[ebp]
  00169	eb 12		 jmp	 SHORT $LN15@Rotate
$LN14@Rotate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 93   : 		_Myoff += _Off;

  0016b	8b c6		 mov	 eax, esi
  0016d	2b c1		 sub	 eax, ecx
  0016f	03 c2		 add	 eax, edx

; 245  : 		return (_Tmp += _Off);

  00171	89 45 88	 mov	 DWORD PTR $T3[ebp+4], eax
  00174	89 75 a8	 mov	 DWORD PTR __Tmp$7[ebp+4], esi
  00177	89 5d 84	 mov	 DWORD PTR $T3[ebp], ebx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3417 : 					: _First + (_Shift - (_Last - _Next1));

  0017a	8d 45 84	 lea	 eax, DWORD PTR $T3[ebp]
$LN15@Rotate:
  0017d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00182	89 4d b0	 mov	 DWORD PTR __Tmp$2$[ebp], ecx
  00185	89 45 a8	 mov	 DWORD PTR __Next1$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 128  : 		return (_Myoff == _Right._Myoff);

  00188	3b 45 80	 cmp	 eax, DWORD PTR __Tmp$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3418 : 				if (_Next1 == _Hole)

  0018b	0f 85 13 ff ff
	ff		 jne	 $LL3@Rotate

; 3407 : 		for (; 0 < _Count; --_Count)

  00191	8b 45 b4	 mov	 eax, DWORD PTR __Count$1$[ebp]
  00194	48		 dec	 eax
  00195	89 45 b4	 mov	 DWORD PTR __Count$1$[ebp], eax
  00198	85 c0		 test	 eax, eax
  0019a	0f 8f c4 fe ff
	ff		 jg	 $LL6@Rotate
$LN4@Rotate:

; 3419 : 					break;
; 3420 : 				}
; 3421 : 			}
; 3422 : 	}

  001a0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a3	5f		 pop	 edi
  001a4	5e		 pop	 esi
  001a5	33 cd		 xor	 ecx, ebp
  001a7	5b		 pop	 ebx
  001a8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ad	8b e5		 mov	 esp, ebp
  001af	5d		 pop	 ebp
  001b0	c3		 ret	 0
??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@HVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PAHPAVMatrix@geom@@@Z ENDP ; std::_Rotate<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,int,geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Distance2@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@H@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
___formal$ = 32						; size = 1
??$_Distance2@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@H@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z PROC ; std::_Distance2<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,int>, COMDAT
; __Off$ = ecx

; 806  : 	{	// add to _Off distance between random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));

  00003	8b 55 10	 mov	 edx, DWORD PTR __First$[ebp+8]
  00006	8b 45 1c	 mov	 eax, DWORD PTR __Last$[ebp+8]
  00009	2b c2		 sub	 eax, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 815  : 	_Off += _Last - _First;

  0000b	01 01		 add	 DWORD PTR [ecx], eax

; 816  : 	}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Distance2@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@H@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z ENDP ; std::_Distance2<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Advance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@H@std@@YAXAAV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@HUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$_Advance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@H@std@@YAXAAV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@HUrandom_access_iterator_tag@0@@Z PROC ; std::_Advance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,int>, COMDAT
; __Where$ = ecx
; __Off$ = edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 640  : 		this->_Myoff += _Off;

  00000	01 51 08	 add	 DWORD PTR [ecx+8], edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 756  : 	}

  00003	c3		 ret	 0
??$_Advance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@H@std@@YAXAAV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@HUrandom_access_iterator_tag@0@@Z ENDP ; std::_Advance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z PROC ; std::istreambuf_iterator<char,std::char_traits<char> >::equal, COMDAT
; _this$ = ecx

; 537  : 		{	// test for equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 538  : 		if (!_Got)

  00007	80 7f 04 00	 cmp	 BYTE PTR [edi+4], 0
  0000b	75 35		 jne	 SHORT $LN12@equal

; 562  : 				_Meta = _Strbuf->sgetc()))

  0000d	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0000f	85 c9		 test	 ecx, ecx
  00011	74 25		 je	 SHORT $LN10@equal

; 154  : 		}
; 155  : 
; 156  : 	streamsize __CLR_OR_THIS_CALL sgetn(_Elem *_Ptr,
; 157  : 		streamsize _Count)
; 158  : 		{	// get up to _Count characters into array beginning at _Ptr
; 159  : 		return (xsgetn(_Ptr, _Count));
; 160  : 		}
; 161  : 
; 162  : 	int_type __CLR_OR_THIS_CALL snextc()
; 163  : 		{	// point to next character and return it
; 164  : 		return (1 < _Gnavail()
; 165  : 			? _Traits::to_int_type(*_Gnpreinc())
; 166  : 			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
; 167  : 				? _Traits::eof() : sgetc());
; 168  : 		}
; 169  : 
; 170  : 	int_type __CLR_OR_THIS_CALL sputbackc(_Elem _Ch)
; 171  : 		{	// put back _Ch
; 172  : 		return (gptr() != 0 && eback() < gptr()
; 173  : 			&& _Traits::eq(_Ch, gptr()[-1])
; 174  : 			? _Traits::to_int_type(*_Gndec())
; 175  : 			: pbackfail(_Traits::to_int_type(_Ch)));
; 176  : 		}
; 177  : 
; 178  : 	void __CLR_OR_THIS_CALL stossc()
; 179  : 		{	// point past a character
; 180  : 		if (0 < _Gnavail())
; 181  : 			_Gninc();
; 182  : 		else
; 183  : 			uflow();
; 184  : 		}
; 185  : 
; 186  : 	int_type __CLR_OR_THIS_CALL sungetc()
; 187  : 		{	// back up one position
; 188  : 		return (gptr() != 0 && eback() < gptr()
; 189  : 			? _Traits::to_int_type(*_Gndec()) : pbackfail());
; 190  : 		}
; 191  : 
; 192  : 	int_type __CLR_OR_THIS_CALL sputc(_Elem _Ch)
; 193  : 		{	// put a character
; 194  : 		return (0 < _Pnavail()
; 195  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 196  : 			: overflow(_Traits::to_int_type(_Ch)));
; 197  : 		}
; 198  : 
; 199  : 	streamsize __CLR_OR_THIS_CALL sputn(const _Elem *_Ptr,
; 200  : 		streamsize _Count)
; 201  : 		{	// put _Count characters from array beginning at _Ptr
; 202  : 		return (xsputn(_Ptr, _Count));
; 203  : 		}
; 204  : 
; 205  : 	virtual void __CLR_OR_THIS_CALL _Lock()
; 206  : 		{	// set the thread lock (overridden by basic_filebuf)
; 207  : 		}
; 208  : 
; 209  : 	virtual void __CLR_OR_THIS_CALL _Unlock()
; 210  : 		{	// clear the thread lock (overridden by basic_filebuf)
; 211  : 		}
; 212  : 
; 213  : protected:
; 214  : 	_Elem *__CLR_OR_THIS_CALL eback() const
; 215  : 		{	// return beginning of read buffer
; 216  : 		return (*_IGfirst);
; 217  : 		}
; 218  : 
; 219  : 	_Elem *__CLR_OR_THIS_CALL gptr() const
; 220  : 		{	// return current position in read buffer
; 221  : 		return (*_IGnext);
; 222  : 		}
; 223  : 
; 224  : 	_Elem *__CLR_OR_THIS_CALL pbase() const
; 225  : 		{	// return beginning of write buffer
; 226  : 		return (*_IPfirst);
; 227  : 		}
; 228  : 
; 229  : 	_Elem *__CLR_OR_THIS_CALL pptr() const
; 230  : 		{	// return current position in write buffer
; 231  : 		return (*_IPnext);
; 232  : 		}
; 233  : 
; 234  : 	_Elem *__CLR_OR_THIS_CALL egptr() const
; 235  : 		{	// return end of read buffer
; 236  : 		return (*_IGnext + *_IGcount);
; 237  : 		}
; 238  : 
; 239  : 	void __CLR_OR_THIS_CALL gbump(int _Off)
; 240  : 		{	// alter current position in read buffer by _Off
; 241  : 		*_IGcount -= _Off;
; 242  : 		*_IGnext += _Off;
; 243  : 		}
; 244  : 
; 245  : 	void __CLR_OR_THIS_CALL setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
; 246  : 		{	// set pointers for read buffer
; 247  : 		*_IGfirst = _First;
; 248  : 		*_IGnext = _Next;
; 249  : 		*_IGcount = (int)(_Last - _Next);
; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;
; 266  : 		return ((*_IGnext)++);
; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00013	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00016	8b 10		 mov	 edx, DWORD PTR [eax]
  00018	85 d2		 test	 edx, edx
  0001a	74 0d		 je	 SHORT $LN16@equal
  0001c	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 153  : 			? _Traits::to_int_type(*gptr()) : underflow());

  0001f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00022	7e 05		 jle	 SHORT $LN16@equal
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  00024	0f b6 02	 movzx	 eax, BYTE PTR [edx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 153  : 			? _Traits::to_int_type(*gptr()) : underflow());

  00027	eb 05		 jmp	 SHORT $LN17@equal
$LN16@equal:
  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	ff 50 18	 call	 DWORD PTR [eax+24]
$LN17@equal:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  0002e	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 562  : 				_Meta = _Strbuf->sgetc()))

  00031	74 05		 je	 SHORT $LN10@equal

; 564  : 		else
; 565  : 			_Val = traits_type::to_char_type(_Meta);

  00033	88 47 05	 mov	 BYTE PTR [edi+5], al
  00036	eb 06		 jmp	 SHORT $LN9@equal
$LN10@equal:

; 563  : 			_Strbuf = 0;

  00038	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
$LN9@equal:

; 566  : 		_Got = true;

  0003e	c6 47 04 01	 mov	 BYTE PTR [edi+4], 1
$LN12@equal:

; 539  : 			_Peek();
; 540  : 		if (!_Right._Got)

  00042	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00045	80 7e 04 00	 cmp	 BYTE PTR [esi+4], 0
  00049	75 35		 jne	 SHORT $LN35@equal

; 562  : 				_Meta = _Strbuf->sgetc()))

  0004b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004d	85 c9		 test	 ecx, ecx
  0004f	74 25		 je	 SHORT $LN33@equal

; 154  : 		}
; 155  : 
; 156  : 	streamsize __CLR_OR_THIS_CALL sgetn(_Elem *_Ptr,
; 157  : 		streamsize _Count)
; 158  : 		{	// get up to _Count characters into array beginning at _Ptr
; 159  : 		return (xsgetn(_Ptr, _Count));
; 160  : 		}
; 161  : 
; 162  : 	int_type __CLR_OR_THIS_CALL snextc()
; 163  : 		{	// point to next character and return it
; 164  : 		return (1 < _Gnavail()
; 165  : 			? _Traits::to_int_type(*_Gnpreinc())
; 166  : 			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
; 167  : 				? _Traits::eof() : sgetc());
; 168  : 		}
; 169  : 
; 170  : 	int_type __CLR_OR_THIS_CALL sputbackc(_Elem _Ch)
; 171  : 		{	// put back _Ch
; 172  : 		return (gptr() != 0 && eback() < gptr()
; 173  : 			&& _Traits::eq(_Ch, gptr()[-1])
; 174  : 			? _Traits::to_int_type(*_Gndec())
; 175  : 			: pbackfail(_Traits::to_int_type(_Ch)));
; 176  : 		}
; 177  : 
; 178  : 	void __CLR_OR_THIS_CALL stossc()
; 179  : 		{	// point past a character
; 180  : 		if (0 < _Gnavail())
; 181  : 			_Gninc();
; 182  : 		else
; 183  : 			uflow();
; 184  : 		}
; 185  : 
; 186  : 	int_type __CLR_OR_THIS_CALL sungetc()
; 187  : 		{	// back up one position
; 188  : 		return (gptr() != 0 && eback() < gptr()
; 189  : 			? _Traits::to_int_type(*_Gndec()) : pbackfail());
; 190  : 		}
; 191  : 
; 192  : 	int_type __CLR_OR_THIS_CALL sputc(_Elem _Ch)
; 193  : 		{	// put a character
; 194  : 		return (0 < _Pnavail()
; 195  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 196  : 			: overflow(_Traits::to_int_type(_Ch)));
; 197  : 		}
; 198  : 
; 199  : 	streamsize __CLR_OR_THIS_CALL sputn(const _Elem *_Ptr,
; 200  : 		streamsize _Count)
; 201  : 		{	// put _Count characters from array beginning at _Ptr
; 202  : 		return (xsputn(_Ptr, _Count));
; 203  : 		}
; 204  : 
; 205  : 	virtual void __CLR_OR_THIS_CALL _Lock()
; 206  : 		{	// set the thread lock (overridden by basic_filebuf)
; 207  : 		}
; 208  : 
; 209  : 	virtual void __CLR_OR_THIS_CALL _Unlock()
; 210  : 		{	// clear the thread lock (overridden by basic_filebuf)
; 211  : 		}
; 212  : 
; 213  : protected:
; 214  : 	_Elem *__CLR_OR_THIS_CALL eback() const
; 215  : 		{	// return beginning of read buffer
; 216  : 		return (*_IGfirst);
; 217  : 		}
; 218  : 
; 219  : 	_Elem *__CLR_OR_THIS_CALL gptr() const
; 220  : 		{	// return current position in read buffer
; 221  : 		return (*_IGnext);
; 222  : 		}
; 223  : 
; 224  : 	_Elem *__CLR_OR_THIS_CALL pbase() const
; 225  : 		{	// return beginning of write buffer
; 226  : 		return (*_IPfirst);
; 227  : 		}
; 228  : 
; 229  : 	_Elem *__CLR_OR_THIS_CALL pptr() const
; 230  : 		{	// return current position in write buffer
; 231  : 		return (*_IPnext);
; 232  : 		}
; 233  : 
; 234  : 	_Elem *__CLR_OR_THIS_CALL egptr() const
; 235  : 		{	// return end of read buffer
; 236  : 		return (*_IGnext + *_IGcount);
; 237  : 		}
; 238  : 
; 239  : 	void __CLR_OR_THIS_CALL gbump(int _Off)
; 240  : 		{	// alter current position in read buffer by _Off
; 241  : 		*_IGcount -= _Off;
; 242  : 		*_IGnext += _Off;
; 243  : 		}
; 244  : 
; 245  : 	void __CLR_OR_THIS_CALL setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
; 246  : 		{	// set pointers for read buffer
; 247  : 		*_IGfirst = _First;
; 248  : 		*_IGnext = _Next;
; 249  : 		*_IGcount = (int)(_Last - _Next);
; 250  : 		}
; 251  : 
; 252  : 	_Elem *__CLR_OR_THIS_CALL epptr() const
; 253  : 		{	// return end of write buffer
; 254  : 		return (*_IPnext + *_IPcount);
; 255  : 		}
; 256  : 
; 257  : 	_Elem *__CLR_OR_THIS_CALL _Gndec()
; 258  : 		{	// decrement current position in read buffer
; 259  : 		++*_IGcount;
; 260  : 		return (--*_IGnext);
; 261  : 		}
; 262  : 
; 263  : 	_Elem *__CLR_OR_THIS_CALL _Gninc()
; 264  : 		{	// increment current position in read buffer
; 265  : 		--*_IGcount;
; 266  : 		return ((*_IGnext)++);
; 267  : 		}
; 268  : 
; 269  : 	_Elem *__CLR_OR_THIS_CALL _Gnpreinc()
; 270  : 		{	// preincrement current position in read buffer
; 271  : 		--*_IGcount;
; 272  : 		return (++(*_IGnext));
; 273  : 		}
; 274  : 
; 275  : 	streamsize __CLR_OR_THIS_CALL _Gnavail() const
; 276  : 		{	// count number of available elements in read buffer
; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00051	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00054	8b 10		 mov	 edx, DWORD PTR [eax]
  00056	85 d2		 test	 edx, edx
  00058	74 0d		 je	 SHORT $LN39@equal
  0005a	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]

; 153  : 			? _Traits::to_int_type(*gptr()) : underflow());

  0005d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00060	7e 05		 jle	 SHORT $LN39@equal
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 588  : 		return ((unsigned char)_Ch);

  00062	0f b6 02	 movzx	 eax, BYTE PTR [edx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 153  : 			? _Traits::to_int_type(*gptr()) : underflow());

  00065	eb 05		 jmp	 SHORT $LN40@equal
$LN39@equal:
  00067	8b 01		 mov	 eax, DWORD PTR [ecx]
  00069	ff 50 18	 call	 DWORD PTR [eax+24]
$LN40@equal:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 594  : 		return (_Left == _Right);

  0006c	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 562  : 				_Meta = _Strbuf->sgetc()))

  0006f	74 05		 je	 SHORT $LN33@equal

; 564  : 		else
; 565  : 			_Val = traits_type::to_char_type(_Meta);

  00071	88 46 05	 mov	 BYTE PTR [esi+5], al
  00074	eb 06		 jmp	 SHORT $LN32@equal
$LN33@equal:

; 563  : 			_Strbuf = 0;

  00076	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN32@equal:

; 566  : 		_Got = true;

  0007c	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
$LN35@equal:

; 541  : 			_Right._Peek();
; 542  : 		return (_Strbuf == 0 && _Right._Strbuf == 0
; 543  : 			|| _Strbuf != 0 && _Right._Strbuf != 0);

  00080	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00083	75 0d		 jne	 SHORT $LN55@equal
  00085	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00088	74 0d		 je	 SHORT $LN7@equal
$LN6@equal:
  0008a	5f		 pop	 edi
  0008b	32 c0		 xor	 al, al
  0008d	5e		 pop	 esi

; 544  : 		}

  0008e	5d		 pop	 ebp
  0008f	c2 04 00	 ret	 4
$LN55@equal:

; 541  : 			_Right._Peek();
; 542  : 		return (_Strbuf == 0 && _Right._Strbuf == 0
; 543  : 			|| _Strbuf != 0 && _Right._Strbuf != 0);

  00092	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00095	74 f3		 je	 SHORT $LN6@equal
$LN7@equal:
  00097	5f		 pop	 edi
  00098	b0 01		 mov	 al, 1
  0009a	5e		 pop	 esi

; 544  : 		}

  0009b	5d		 pop	 ebp
  0009c	c2 04 00	 ret	 4
?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NABV12@@Z ENDP ; std::istreambuf_iterator<char,std::char_traits<char> >::equal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEHABV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEHABV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-, COMDAT
; _this$ = ecx

; 662  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00009	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000c	2b c2		 sub	 eax, edx

; 663  : 		return (*(_Mybase *)this - _Right);
; 664  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEHABV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEAAVMatrix@geom@@XZ
_TEXT	SEGMENT
??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEAAVMatrix@geom@@XZ PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*, COMDAT
; _this$ = ecx

; 204  : 
; 205  : 	pointer operator->() const
; 206  : 		{	// return pointer to class object
; 207  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 208  : 		}
; 209  : 
; 210  : 	_Myiter& operator++()
; 211  : 		{	// preincrement
; 212  : 		++*(_Mybase *)this;
; 213  : 		return (*this);
; 214  : 		}
; 215  : 
; 216  : 	_Myiter operator++(int)
; 217  : 		{	// postincrement
; 218  : 		_Myiter _Tmp = *this;
; 219  : 		++*this;
; 220  : 		return (_Tmp);
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator--()
; 224  : 		{	// predecrement
; 225  : 		--*(_Mybase *)this;
; 226  : 		return (*this);
; 227  : 		}
; 228  : 
; 229  : 	_Myiter operator--(int)
; 230  : 		{	// postdecrement
; 231  : 		_Myiter _Tmp = *this;
; 232  : 		--*this;
; 233  : 		return (_Tmp);
; 234  : 		}
; 235  : 
; 236  : 	_Myiter& operator+=(difference_type _Off)
; 237  : 		{	// increment by integer
; 238  : 		*(_Mybase *)this += _Off;
; 239  : 		return (*this);
; 240  : 		}
; 241  : 
; 242  : 	_Myiter operator+(difference_type _Off) const
; 243  : 		{	// return this + integer
; 244  : 		_Myiter _Tmp = *this;
; 245  : 		return (_Tmp += _Off);
; 246  : 		}
; 247  : 
; 248  : 	_Myiter& operator-=(difference_type _Off)
; 249  : 		{	// decrement by integer
; 250  : 		return (*this += -_Off);
; 251  : 		}
; 252  : 
; 253  : 	_Myiter operator-(difference_type _Off) const
; 254  : 		{	// return this - integer
; 255  : 		_Myiter _Tmp = *this;
; 256  : 		return (_Tmp -= _Off);
; 257  : 		}
; 258  : 
; 259  : 	difference_type operator-(const _Mybase& _Right) const
; 260  : 		{	// return difference of iterators
; 261  : 		return (*(_Mybase *)this - _Right);
; 262  : 		}
; 263  : 
; 264  : 	reference operator[](difference_type _Off) const
; 265  : 		{	// subscript
; 266  : 		return (*(*this + _Off));
; 267  : 		}
; 268  : 	};
; 269  : 
; 270  : template<class _Mydeque> inline
; 271  : 	_Deque_unchecked_iterator<_Mydeque> operator+(
; 272  : 		typename _Deque_unchecked_iterator<_Mydeque>
; 273  : 			::difference_type _Off,
; 274  : 		_Deque_unchecked_iterator<_Mydeque> _Next)
; 275  : 	{	// add offset to iterator
; 276  : 	return (_Next += _Off);
; 277  : 	}
; 278  : 
; 279  : 		// TEMPLATE CLASS _Deque_const_iterator
; 280  : template<class _Mydeque>
; 281  : 	class _Deque_const_iterator
; 282  : 		: public _Iterator_base12
; 283  : 	{	// iterator for nonmutable deque
; 284  : public:
; 285  : 	typedef _Deque_const_iterator<_Mydeque> _Myiter;
; 286  : 	typedef random_access_iterator_tag iterator_category;
; 287  : 
; 288  : 	typedef typename _Mydeque::value_type value_type;
; 289  : 	typedef typename _Mydeque::size_type size_type;
; 290  : 	typedef typename _Mydeque::difference_type difference_type;
; 291  : 	typedef typename _Mydeque::const_pointer pointer;
; 292  : 	typedef typename _Mydeque::const_reference reference;
; 293  : 
; 294  : 	typedef _Mydeque _Mydeque_t;	// helper for expression evaluator
; 295  : 	enum {_EEN_DS = _DEQUESIZ};	// helper for expression evaluator
; 296  : 
; 297  : 	_Deque_const_iterator()
; 298  : 		{	// construct with null pointer
; 299  : 		_Setcont(0);
; 300  : 		_Myoff = 0;
; 301  : 		}
; 302  : 
; 303  : 	_Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 304  : 		{	// construct with offset _Off in *_Pdeque
; 305  : 		_Setcont((_Mydeque *)_Pdeque);
; 306  : 		_Myoff = _Off;
; 307  : 		}
; 308  : 
; 309  : 	typedef _Deque_unchecked_const_iterator<_Mydeque> _Unchecked_type;
; 310  : 
; 311  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 312  : 		{	// reset from unchecked iterator
; 313  : 		this->_Myoff = _Right._Myoff;
; 314  : 		return (*this);
; 315  : 		}
; 316  : 
; 317  : 	_Unchecked_type _Unchecked() const
; 318  : 		{	// make an unchecked iterator
; 319  : 		return (_Unchecked_type(_Myoff, this->_Getcont()));
; 320  : 		}
; 321  : 
; 322  : 	reference operator*() const
; 323  : 		{	// return designated object
; 324  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 325  : 
; 326  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 327  : 		if (_Mycont == 0
; 328  : 			|| this->_Myoff < _Mycont->_Myoff
; 329  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 330  : 		{	// report error
; 331  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 332  : 		_SCL_SECURE_OUT_OF_RANGE;
; 333  : 		}
; 334  : 
; 335  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 336  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 337  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 338  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 339  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 340  : 
; 341  : 		_Analysis_assume_(_Mycont != 0);
; 342  : 
; 343  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 344  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 345  : 		return (_Mycont->_Map[_Block][_Off]);
; 346  : 		}
; 347  : 
; 348  : 	pointer operator->() const
; 349  : 		{	// return pointer to class object
; 350  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 351  : 		}
; 352  : 
; 353  : 	_Myiter& operator++()
; 354  : 		{	// preincrement
; 355  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 356  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 357  : 		if (_Mycont == 0
; 358  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 359  : 		{	// report error
; 360  : 		_DEBUG_ERROR("deque iterator not incrementable");
; 361  : 		_SCL_SECURE_OUT_OF_RANGE;
; 362  : 		}
; 363  : 
; 364  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 365  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 366  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 367  : 		_SCL_SECURE_VALIDATE_RANGE(
; 368  : 			this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 369  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 370  : 
; 371  : 		++_Myoff;
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 385  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 386  : 		if (_Mycont == 0
; 387  : 			|| this->_Myoff <= _Mycont->_Myoff)
; 388  : 		{	// report error
; 389  : 		_DEBUG_ERROR("deque iterator not decrementable");
; 390  : 		_SCL_SECURE_OUT_OF_RANGE;
; 391  : 		}
; 392  : 
; 393  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 394  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 395  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 396  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff < this->_Myoff);
; 397  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 398  : 
; 399  : 		--_Myoff;
; 400  : 		return (*this);
; 401  : 		}
; 402  : 
; 403  : 	_Myiter operator--(int)
; 404  : 		{	// postdecrement
; 405  : 		_Myiter _Tmp = *this;
; 406  : 		--*this;
; 407  : 		return (_Tmp);
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator+=(difference_type _Off)
; 411  : 		{	// increment by integer
; 412  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 413  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 414  : 		if (_Mycont == 0
; 415  : 			|| this->_Myoff + _Off < _Mycont->_Myoff
; 416  : 			|| _Mycont->_Myoff + _Mycont->_Mysize < this->_Myoff + _Off)
; 417  : 			{	// report error
; 418  : 			_DEBUG_ERROR("deque iterator + offset out of range");
; 419  : 			_SCL_SECURE_OUT_OF_RANGE;
; 420  : 			}
; 421  : 
; 422  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 423  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 424  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 425  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff + _Off
; 426  : 			&& this->_Myoff + _Off <= _Mycont->_Myoff + _Mycont->_Mysize);
; 427  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 428  : 
; 429  : 		_Myoff += _Off;
; 430  : 		return (*this);
; 431  : 		}
; 432  : 
; 433  : 	_Myiter operator+(difference_type _Off) const
; 434  : 		{	// return this + integer
; 435  : 		_Myiter _Tmp = *this;
; 436  : 		return (_Tmp += _Off);
; 437  : 		}
; 438  : 
; 439  : 	_Myiter& operator-=(difference_type _Off)
; 440  : 		{	// decrement by integer
; 441  : 		return (*this += -_Off);
; 442  : 		}
; 443  : 
; 444  : 	_Myiter operator-(difference_type _Off) const
; 445  : 		{	// return this - integer
; 446  : 		_Myiter _Tmp = *this;
; 447  : 		return (_Tmp -= _Off);
; 448  : 		}
; 449  : 
; 450  : 	difference_type operator-(const _Myiter& _Right) const
; 451  : 		{	// return difference of iterators
; 452  : 		_Compat(_Right);
; 453  : 		return (_Right._Myoff <= this->_Myoff
; 454  : 			? this->_Myoff - _Right._Myoff
; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));
; 456  : 		}
; 457  : 
; 458  : 	reference operator[](difference_type _Off) const
; 459  : 		{	// subscript
; 460  : 		return (*(*this + _Off));
; 461  : 		}
; 462  : 
; 463  : 	bool operator==(const _Myiter& _Right) const
; 464  : 		{	// test for iterator equality
; 465  : 		_Compat(_Right);
; 466  : 		return (this->_Myoff == _Right._Myoff);
; 467  : 		}
; 468  : 
; 469  : 	bool operator!=(const _Myiter& _Right) const
; 470  : 		{	// test for iterator inequality
; 471  : 		return (!(*this == _Right));
; 472  : 		}
; 473  : 
; 474  : 	bool operator<(const _Myiter& _Right) const
; 475  : 		{	// test if this < _Right
; 476  : 		_Compat(_Right);
; 477  : 		return (this->_Myoff < _Right._Myoff);
; 478  : 		}
; 479  : 
; 480  : 	bool operator>(const _Myiter& _Right) const
; 481  : 		{	// test if this > _Right
; 482  : 		return (_Right < *this);
; 483  : 		}
; 484  : 
; 485  : 	bool operator<=(const _Myiter& _Right) const
; 486  : 		{	// test if this <= _Right
; 487  : 		return (!(_Right < *this));
; 488  : 		}
; 489  : 
; 490  : 	bool operator>=(const _Myiter& _Right) const
; 491  : 		{	// test if this >= _Right
; 492  : 		return (!(*this < _Right));
; 493  : 		}
; 494  : 
; 495  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 496  : 	void _Compat(const _Myiter& _Right) const
; 497  : 		{	// test for compatible iterator pair
; 498  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 499  : 		if (_Mycont == 0
; 500  : 			|| _Mycont != _Right._Getcont())
; 501  : 			{	// report error
; 502  : 			_DEBUG_ERROR("deque iterators incompatible");
; 503  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 504  : 			}
; 505  : 		}
; 506  : 
; 507  : 	void _Setcont(const _Mydeque *_Pdeque)
; 508  : 		{	// set container pointer
; 509  : 		this->_Adopt(_Pdeque);
; 510  : 		}
; 511  : 
; 512  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 513  : 	void _Compat(const _Myiter& _Right) const
; 514  : 		{	// test for compatible iterator pair
; 515  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 516  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 517  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont == _Right._Getcont());
; 518  : 		}
; 519  : 
; 520  : 	void _Setcont(const _Mydeque *_Pdeque)
; 521  : 		{	// set container pointer
; 522  : 		this->_Adopt(_Pdeque);
; 523  : 		}
; 524  : 
; 525  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 526  : 	void _Compat(const _Myiter&) const
; 527  : 		{	// test for compatible iterator pair
; 528  : 		}
; 529  : 
; 530  : 	void _Setcont(const _Mydeque *_Pdeque)
; 531  : 		{	// set container pointer
; 532  : 		this->_Adopt(_Pdeque);
; 533  : 		}
; 534  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 535  : 
; 536  : 	size_type _Myoff;	// offset of element in deque
; 537  : 	};
; 538  : 
; 539  : template<class _Mydeque> inline
; 540  : 	typename _Deque_const_iterator<_Mydeque>::_Unchecked_type
; 541  : 		_Unchecked(_Deque_const_iterator<_Mydeque> _Iter)
; 542  : 	{	// convert to unchecked
; 543  : 	return (_Iter._Unchecked());
; 544  : 	}
; 545  : 
; 546  : template<class _Mydeque> inline
; 547  : 	_Deque_const_iterator<_Mydeque>&
; 548  : 		_Rechecked(_Deque_const_iterator<_Mydeque>& _Iter,
; 549  : 			typename _Deque_const_iterator<_Mydeque>
; 550  : 				::_Unchecked_type _Right)
; 551  : 	{	// convert to checked
; 552  : 	return (_Iter._Rechecked(_Right));
; 553  : 	}
; 554  : 
; 555  : template<class _Mydeque> inline
; 556  : 	_Deque_const_iterator<_Mydeque> operator+(
; 557  : 		typename _Deque_const_iterator<_Mydeque>::difference_type _Off,
; 558  : 		_Deque_const_iterator<_Mydeque> _Next)
; 559  : 	{	// add offset to iterator
; 560  : 	return (_Next += _Off);
; 561  : 	}
; 562  : 
; 563  : 		// TEMPLATE CLASS _Deque_iterator
; 564  : template<class _Mydeque>
; 565  : 	class _Deque_iterator
; 566  : 		: public _Deque_const_iterator<_Mydeque>
; 567  : 		{	// iterator for mutable deque
; 568  : public:
; 569  : 	typedef _Deque_iterator<_Mydeque> _Myiter;
; 570  : 	typedef _Deque_const_iterator<_Mydeque> _Mybase;
; 571  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Deque_unchecked_type;
; 572  : 	typedef random_access_iterator_tag iterator_category;
; 573  : 
; 574  : 	typedef typename _Mydeque::value_type value_type;
; 575  : 	typedef typename _Mydeque::size_type size_type;
; 576  : 	typedef typename _Mydeque::difference_type difference_type;
; 577  : 	typedef typename _Mydeque::pointer pointer;
; 578  : 	typedef typename _Mydeque::reference reference;
; 579  : 
; 580  : 	_Deque_iterator()
; 581  : 		{	// construct with null deque pointer
; 582  : 		}
; 583  : 
; 584  : 	_Deque_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 585  : 		: _Mybase(_Off, _Pdeque)
; 586  : 		{	// construct with offset _Off in *_Pdeque
; 587  : 		}
; 588  : 
; 589  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Unchecked_type;
; 590  : 
; 591  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 592  : 		{	// reset from unchecked iterator
; 593  : 		this->_Myoff = _Right._Myoff;
; 594  : 		return (*this);
; 595  : 		}
; 596  : 
; 597  : 	_Unchecked_type _Unchecked() const
; 598  : 		{	// make an unchecked iterator
; 599  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));
; 600  : 		}
; 601  : 
; 602  : 	reference operator*() const
; 603  : 		{	// return designated object
; 604  : 		return ((reference)**(_Mybase *)this);
; 605  : 		}
; 606  : 
; 607  : 	pointer operator->() const
; 608  : 		{	// return pointer to class object
; 609  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 610  : 		}
; 611  : 
; 612  : 	_Myiter& operator++()
; 613  : 		{	// preincrement
; 614  : 		++*(_Mybase *)this;
; 615  : 		return (*this);
; 616  : 		}
; 617  : 
; 618  : 	_Myiter operator++(int)
; 619  : 		{	// postincrement
; 620  : 		_Myiter _Tmp = *this;
; 621  : 		++*this;
; 622  : 		return (_Tmp);
; 623  : 		}
; 624  : 
; 625  : 	_Myiter& operator--()
; 626  : 		{	// predecrement
; 627  : 		--*(_Mybase *)this;
; 628  : 		return (*this);
; 629  : 		}
; 630  : 
; 631  : 	_Myiter operator--(int)
; 632  : 		{	// postdecrement
; 633  : 		_Myiter _Tmp = *this;
; 634  : 		--*this;
; 635  : 		return (_Tmp);
; 636  : 		}
; 637  : 
; 638  : 	_Myiter& operator+=(difference_type _Off)
; 639  : 		{	// increment by integer
; 640  : 		this->_Myoff += _Off;
; 641  : 		return (*this);
; 642  : 		}
; 643  : 
; 644  : 	_Myiter operator+(difference_type _Off) const
; 645  : 		{	// return this + integer
; 646  : 		_Myiter _Tmp = *this;
; 647  : 		return (_Tmp += _Off);
; 648  : 		}
; 649  : 
; 650  : 	_Myiter& operator-=(difference_type _Off)
; 651  : 		{	// decrement by integer
; 652  : 		return (*this += -_Off);
; 653  : 		}
; 654  : 
; 655  : 	_Myiter operator-(difference_type _Off) const
; 656  : 		{	// return this - integer
; 657  : 		_Myiter _Tmp = *this;
; 658  : 		return (_Tmp -= _Off);
; 659  : 		}
; 660  : 
; 661  : 	difference_type operator-(const _Mybase& _Right) const
; 662  : 		{	// return difference of iterators
; 663  : 		return (*(_Mybase *)this - _Right);
; 664  : 		}
; 665  : 
; 666  : 	reference operator[](difference_type _Off) const
; 667  : 		{	// subscript
; 668  : 		return (*(*this + _Off));
; 669  : 		}
; 670  : 	};
; 671  : 
; 672  : template<class _Mydeque> inline
; 673  : 	typename _Deque_iterator<_Mydeque>::_Unchecked_type
; 674  : 		_Unchecked(_Deque_iterator<_Mydeque> _Iter)
; 675  : 	{	// convert to unchecked
; 676  : 	return (_Iter._Unchecked());
; 677  : 	}
; 678  : 
; 679  : template<class _Mydeque> inline
; 680  : 	_Deque_iterator<_Mydeque>&
; 681  : 		_Rechecked(_Deque_iterator<_Mydeque>& _Iter,
; 682  : 			typename _Deque_iterator<_Mydeque>
; 683  : 				::_Unchecked_type _Right)
; 684  : 	{	// convert to checked
; 685  : 	return (_Iter._Rechecked(_Right));
; 686  : 	}
; 687  : 
; 688  : template<class _Mydeque> inline
; 689  : 	_Deque_iterator<_Mydeque> operator+(
; 690  : 		typename _Deque_iterator<_Mydeque>::difference_type _Off,
; 691  : 		_Deque_iterator<_Mydeque> _Next)
; 692  : 	{	// add offset to iterator
; 693  : 	return (_Next += _Off);
; 694  : 	}
; 695  : 
; 696  : 		// deque TYPE WRAPPERS
; 697  : template<class _Value_type,
; 698  : 	class _Size_type,
; 699  : 	class _Difference_type,
; 700  : 	class _Pointer,
; 701  : 	class _Const_pointer,
; 702  : 	class _Reference,
; 703  : 	class _Const_reference,
; 704  : 	class _Mapptr_type>
; 705  : 	struct _Deque_iter_types
; 706  : 	{	// wraps types needed by iterators
; 707  : 	typedef _Value_type value_type;
; 708  : 	typedef _Size_type size_type;
; 709  : 	typedef _Difference_type difference_type;
; 710  : 	typedef _Pointer pointer;
; 711  : 	typedef _Const_pointer const_pointer;
; 712  : 	typedef _Reference reference;
; 713  : 	typedef _Const_reference const_reference;
; 714  : 	typedef _Mapptr_type _Mapptr;
; 715  : 	};
; 716  : 
; 717  : template<class _Ty>
; 718  : 	struct _Deque_simple_types
; 719  : 		: public _Simple_types<_Ty>
; 720  : 	{	// wraps types needed by iterators
; 721  : 	typedef _Ty **_Mapptr;
; 722  : 	};
; 723  : 
; 724  : template<class _Ty,
; 725  : 	class _Alloc0>
; 726  : 	struct _Deque_base_types
; 727  : 	{	// types needed for a container base
; 728  : 	typedef _Alloc0 _Alloc;
; 729  : 	typedef _Deque_base_types<_Ty, _Alloc> _Myt;
; 730  : 
; 731  :  #if _HAS_CPP0X
; 732  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 733  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 734  : 
; 735  :  #else /* _HAS_CPP0X */
; 736  : 	typedef typename _Alloc::template rebind<_Ty>::other _Alty;
; 737  :  #endif /* _HAS_CPP0X */
; 738  : 
; 739  : 	typedef typename _Alty::pointer _Tptr;
; 740  : 	typedef typename _Alty::template rebind<_Tptr>::other _Alpty;
; 741  : 	typedef typename _Alpty::pointer _Mapptr;
; 742  : 
; 743  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 744  : 		_Deque_simple_types<typename _Alty::value_type>,
; 745  : 		_Deque_iter_types<typename _Alty::value_type,
; 746  : 			typename _Alty::size_type,
; 747  : 			typename _Alty::difference_type,
; 748  : 			typename _Alty::pointer,
; 749  : 			typename _Alty::const_pointer,
; 750  : 			typename _Alty::reference,
; 751  : 			typename _Alty::const_reference,
; 752  : 			_Mapptr> >::type
; 753  : 		_Val_types;
; 754  : 	};
; 755  : 
; 756  : 		// TEMPLATE CLASS _Deque_val
; 757  : template<class _Val_types>
; 758  : 	class _Deque_val
; 759  : 		: public _Container_base12
; 760  : 	{	// base class for deque to hold data
; 761  : public:
; 762  : 	typedef _Deque_val<_Val_types> _Myt;
; 763  : 
; 764  : 	typedef typename _Val_types::value_type value_type;
; 765  : 	typedef typename _Val_types::size_type size_type;
; 766  : 	typedef typename _Val_types::difference_type difference_type;
; 767  : 	typedef typename _Val_types::pointer pointer;
; 768  : 	typedef typename _Val_types::const_pointer const_pointer;
; 769  : 	typedef typename _Val_types::reference reference;
; 770  : 	typedef typename _Val_types::const_reference const_reference;
; 771  : 	typedef typename _Val_types::_Mapptr _Mapptr;
; 772  : 
; 773  : 	typedef _Deque_iterator<_Myt> iterator;
; 774  : 	typedef _Deque_const_iterator<_Myt> const_iterator;
; 775  : 
; 776  : 	_Deque_val()
; 777  : 		{	// initialize values
; 778  : 		_Map = _Mapptr();
; 779  : 		_Mapsize = 0;
; 780  : 		_Myoff = 0;
; 781  : 		_Mysize = 0;
; 782  : 		}
; 783  : 
; 784  : 	size_type _Getblock(size_type _Off) const
; 785  : 		{	// determine block from offset
; 786  : 			// NB: _Mapsize and _DEQUESIZ are guaranteed to be powers of 2
; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 202  : 		return ((reference)**(_Mybase *)this);

  00005	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 204  : 
; 205  : 	pointer operator->() const
; 206  : 		{	// return pointer to class object
; 207  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 208  : 		}
; 209  : 
; 210  : 	_Myiter& operator++()
; 211  : 		{	// preincrement
; 212  : 		++*(_Mybase *)this;
; 213  : 		return (*this);
; 214  : 		}
; 215  : 
; 216  : 	_Myiter operator++(int)
; 217  : 		{	// postincrement
; 218  : 		_Myiter _Tmp = *this;
; 219  : 		++*this;
; 220  : 		return (_Tmp);
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator--()
; 224  : 		{	// predecrement
; 225  : 		--*(_Mybase *)this;
; 226  : 		return (*this);
; 227  : 		}
; 228  : 
; 229  : 	_Myiter operator--(int)
; 230  : 		{	// postdecrement
; 231  : 		_Myiter _Tmp = *this;
; 232  : 		--*this;
; 233  : 		return (_Tmp);
; 234  : 		}
; 235  : 
; 236  : 	_Myiter& operator+=(difference_type _Off)
; 237  : 		{	// increment by integer
; 238  : 		*(_Mybase *)this += _Off;
; 239  : 		return (*this);
; 240  : 		}
; 241  : 
; 242  : 	_Myiter operator+(difference_type _Off) const
; 243  : 		{	// return this + integer
; 244  : 		_Myiter _Tmp = *this;
; 245  : 		return (_Tmp += _Off);
; 246  : 		}
; 247  : 
; 248  : 	_Myiter& operator-=(difference_type _Off)
; 249  : 		{	// decrement by integer
; 250  : 		return (*this += -_Off);
; 251  : 		}
; 252  : 
; 253  : 	_Myiter operator-(difference_type _Off) const
; 254  : 		{	// return this - integer
; 255  : 		_Myiter _Tmp = *this;
; 256  : 		return (_Tmp -= _Off);
; 257  : 		}
; 258  : 
; 259  : 	difference_type operator-(const _Mybase& _Right) const
; 260  : 		{	// return difference of iterators
; 261  : 		return (*(_Mybase *)this - _Right);
; 262  : 		}
; 263  : 
; 264  : 	reference operator[](difference_type _Off) const
; 265  : 		{	// subscript
; 266  : 		return (*(*this + _Off));
; 267  : 		}
; 268  : 	};
; 269  : 
; 270  : template<class _Mydeque> inline
; 271  : 	_Deque_unchecked_iterator<_Mydeque> operator+(
; 272  : 		typename _Deque_unchecked_iterator<_Mydeque>
; 273  : 			::difference_type _Off,
; 274  : 		_Deque_unchecked_iterator<_Mydeque> _Next)
; 275  : 	{	// add offset to iterator
; 276  : 	return (_Next += _Off);
; 277  : 	}
; 278  : 
; 279  : 		// TEMPLATE CLASS _Deque_const_iterator
; 280  : template<class _Mydeque>
; 281  : 	class _Deque_const_iterator
; 282  : 		: public _Iterator_base12
; 283  : 	{	// iterator for nonmutable deque
; 284  : public:
; 285  : 	typedef _Deque_const_iterator<_Mydeque> _Myiter;
; 286  : 	typedef random_access_iterator_tag iterator_category;
; 287  : 
; 288  : 	typedef typename _Mydeque::value_type value_type;
; 289  : 	typedef typename _Mydeque::size_type size_type;
; 290  : 	typedef typename _Mydeque::difference_type difference_type;
; 291  : 	typedef typename _Mydeque::const_pointer pointer;
; 292  : 	typedef typename _Mydeque::const_reference reference;
; 293  : 
; 294  : 	typedef _Mydeque _Mydeque_t;	// helper for expression evaluator
; 295  : 	enum {_EEN_DS = _DEQUESIZ};	// helper for expression evaluator
; 296  : 
; 297  : 	_Deque_const_iterator()
; 298  : 		{	// construct with null pointer
; 299  : 		_Setcont(0);
; 300  : 		_Myoff = 0;
; 301  : 		}
; 302  : 
; 303  : 	_Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 304  : 		{	// construct with offset _Off in *_Pdeque
; 305  : 		_Setcont((_Mydeque *)_Pdeque);
; 306  : 		_Myoff = _Off;
; 307  : 		}
; 308  : 
; 309  : 	typedef _Deque_unchecked_const_iterator<_Mydeque> _Unchecked_type;
; 310  : 
; 311  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 312  : 		{	// reset from unchecked iterator
; 313  : 		this->_Myoff = _Right._Myoff;
; 314  : 		return (*this);
; 315  : 		}
; 316  : 
; 317  : 	_Unchecked_type _Unchecked() const
; 318  : 		{	// make an unchecked iterator
; 319  : 		return (_Unchecked_type(_Myoff, this->_Getcont()));
; 320  : 		}
; 321  : 
; 322  : 	reference operator*() const
; 323  : 		{	// return designated object
; 324  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 325  : 
; 326  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 327  : 		if (_Mycont == 0
; 328  : 			|| this->_Myoff < _Mycont->_Myoff
; 329  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 330  : 		{	// report error
; 331  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 332  : 		_SCL_SECURE_OUT_OF_RANGE;
; 333  : 		}
; 334  : 
; 335  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 336  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 337  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 338  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 339  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 340  : 
; 341  : 		_Analysis_assume_(_Mycont != 0);
; 342  : 
; 343  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 344  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 345  : 		return (_Mycont->_Map[_Block][_Off]);
; 346  : 		}
; 347  : 
; 348  : 	pointer operator->() const
; 349  : 		{	// return pointer to class object
; 350  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 351  : 		}
; 352  : 
; 353  : 	_Myiter& operator++()
; 354  : 		{	// preincrement
; 355  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 356  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 357  : 		if (_Mycont == 0
; 358  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 359  : 		{	// report error
; 360  : 		_DEBUG_ERROR("deque iterator not incrementable");
; 361  : 		_SCL_SECURE_OUT_OF_RANGE;
; 362  : 		}
; 363  : 
; 364  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 365  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 366  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 367  : 		_SCL_SECURE_VALIDATE_RANGE(
; 368  : 			this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 369  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 370  : 
; 371  : 		++_Myoff;
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 385  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 386  : 		if (_Mycont == 0
; 387  : 			|| this->_Myoff <= _Mycont->_Myoff)
; 388  : 		{	// report error
; 389  : 		_DEBUG_ERROR("deque iterator not decrementable");
; 390  : 		_SCL_SECURE_OUT_OF_RANGE;
; 391  : 		}
; 392  : 
; 393  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 394  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 395  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 396  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff < this->_Myoff);
; 397  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 398  : 
; 399  : 		--_Myoff;
; 400  : 		return (*this);
; 401  : 		}
; 402  : 
; 403  : 	_Myiter operator--(int)
; 404  : 		{	// postdecrement
; 405  : 		_Myiter _Tmp = *this;
; 406  : 		--*this;
; 407  : 		return (_Tmp);
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator+=(difference_type _Off)
; 411  : 		{	// increment by integer
; 412  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 413  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 414  : 		if (_Mycont == 0
; 415  : 			|| this->_Myoff + _Off < _Mycont->_Myoff
; 416  : 			|| _Mycont->_Myoff + _Mycont->_Mysize < this->_Myoff + _Off)
; 417  : 			{	// report error
; 418  : 			_DEBUG_ERROR("deque iterator + offset out of range");
; 419  : 			_SCL_SECURE_OUT_OF_RANGE;
; 420  : 			}
; 421  : 
; 422  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 423  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 424  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 425  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff + _Off
; 426  : 			&& this->_Myoff + _Off <= _Mycont->_Myoff + _Mycont->_Mysize);
; 427  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 428  : 
; 429  : 		_Myoff += _Off;
; 430  : 		return (*this);
; 431  : 		}
; 432  : 
; 433  : 	_Myiter operator+(difference_type _Off) const
; 434  : 		{	// return this + integer
; 435  : 		_Myiter _Tmp = *this;
; 436  : 		return (_Tmp += _Off);
; 437  : 		}
; 438  : 
; 439  : 	_Myiter& operator-=(difference_type _Off)
; 440  : 		{	// decrement by integer
; 441  : 		return (*this += -_Off);
; 442  : 		}
; 443  : 
; 444  : 	_Myiter operator-(difference_type _Off) const
; 445  : 		{	// return this - integer
; 446  : 		_Myiter _Tmp = *this;
; 447  : 		return (_Tmp -= _Off);
; 448  : 		}
; 449  : 
; 450  : 	difference_type operator-(const _Myiter& _Right) const
; 451  : 		{	// return difference of iterators
; 452  : 		_Compat(_Right);
; 453  : 		return (_Right._Myoff <= this->_Myoff
; 454  : 			? this->_Myoff - _Right._Myoff
; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));
; 456  : 		}
; 457  : 
; 458  : 	reference operator[](difference_type _Off) const
; 459  : 		{	// subscript
; 460  : 		return (*(*this + _Off));
; 461  : 		}
; 462  : 
; 463  : 	bool operator==(const _Myiter& _Right) const
; 464  : 		{	// test for iterator equality
; 465  : 		_Compat(_Right);
; 466  : 		return (this->_Myoff == _Right._Myoff);
; 467  : 		}
; 468  : 
; 469  : 	bool operator!=(const _Myiter& _Right) const
; 470  : 		{	// test for iterator inequality
; 471  : 		return (!(*this == _Right));
; 472  : 		}
; 473  : 
; 474  : 	bool operator<(const _Myiter& _Right) const
; 475  : 		{	// test if this < _Right
; 476  : 		_Compat(_Right);
; 477  : 		return (this->_Myoff < _Right._Myoff);
; 478  : 		}
; 479  : 
; 480  : 	bool operator>(const _Myiter& _Right) const
; 481  : 		{	// test if this > _Right
; 482  : 		return (_Right < *this);
; 483  : 		}
; 484  : 
; 485  : 	bool operator<=(const _Myiter& _Right) const
; 486  : 		{	// test if this <= _Right
; 487  : 		return (!(_Right < *this));
; 488  : 		}
; 489  : 
; 490  : 	bool operator>=(const _Myiter& _Right) const
; 491  : 		{	// test if this >= _Right
; 492  : 		return (!(*this < _Right));
; 493  : 		}
; 494  : 
; 495  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 496  : 	void _Compat(const _Myiter& _Right) const
; 497  : 		{	// test for compatible iterator pair
; 498  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 499  : 		if (_Mycont == 0
; 500  : 			|| _Mycont != _Right._Getcont())
; 501  : 			{	// report error
; 502  : 			_DEBUG_ERROR("deque iterators incompatible");
; 503  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 504  : 			}
; 505  : 		}
; 506  : 
; 507  : 	void _Setcont(const _Mydeque *_Pdeque)
; 508  : 		{	// set container pointer
; 509  : 		this->_Adopt(_Pdeque);
; 510  : 		}
; 511  : 
; 512  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 513  : 	void _Compat(const _Myiter& _Right) const
; 514  : 		{	// test for compatible iterator pair
; 515  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 516  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 517  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont == _Right._Getcont());
; 518  : 		}
; 519  : 
; 520  : 	void _Setcont(const _Mydeque *_Pdeque)
; 521  : 		{	// set container pointer
; 522  : 		this->_Adopt(_Pdeque);
; 523  : 		}
; 524  : 
; 525  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 526  : 	void _Compat(const _Myiter&) const
; 527  : 		{	// test for compatible iterator pair
; 528  : 		}
; 529  : 
; 530  : 	void _Setcont(const _Mydeque *_Pdeque)
; 531  : 		{	// set container pointer
; 532  : 		this->_Adopt(_Pdeque);
; 533  : 		}
; 534  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 535  : 
; 536  : 	size_type _Myoff;	// offset of element in deque
; 537  : 	};
; 538  : 
; 539  : template<class _Mydeque> inline
; 540  : 	typename _Deque_const_iterator<_Mydeque>::_Unchecked_type
; 541  : 		_Unchecked(_Deque_const_iterator<_Mydeque> _Iter)
; 542  : 	{	// convert to unchecked
; 543  : 	return (_Iter._Unchecked());
; 544  : 	}
; 545  : 
; 546  : template<class _Mydeque> inline
; 547  : 	_Deque_const_iterator<_Mydeque>&
; 548  : 		_Rechecked(_Deque_const_iterator<_Mydeque>& _Iter,
; 549  : 			typename _Deque_const_iterator<_Mydeque>
; 550  : 				::_Unchecked_type _Right)
; 551  : 	{	// convert to checked
; 552  : 	return (_Iter._Rechecked(_Right));
; 553  : 	}
; 554  : 
; 555  : template<class _Mydeque> inline
; 556  : 	_Deque_const_iterator<_Mydeque> operator+(
; 557  : 		typename _Deque_const_iterator<_Mydeque>::difference_type _Off,
; 558  : 		_Deque_const_iterator<_Mydeque> _Next)
; 559  : 	{	// add offset to iterator
; 560  : 	return (_Next += _Off);
; 561  : 	}
; 562  : 
; 563  : 		// TEMPLATE CLASS _Deque_iterator
; 564  : template<class _Mydeque>
; 565  : 	class _Deque_iterator
; 566  : 		: public _Deque_const_iterator<_Mydeque>
; 567  : 		{	// iterator for mutable deque
; 568  : public:
; 569  : 	typedef _Deque_iterator<_Mydeque> _Myiter;
; 570  : 	typedef _Deque_const_iterator<_Mydeque> _Mybase;
; 571  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Deque_unchecked_type;
; 572  : 	typedef random_access_iterator_tag iterator_category;
; 573  : 
; 574  : 	typedef typename _Mydeque::value_type value_type;
; 575  : 	typedef typename _Mydeque::size_type size_type;
; 576  : 	typedef typename _Mydeque::difference_type difference_type;
; 577  : 	typedef typename _Mydeque::pointer pointer;
; 578  : 	typedef typename _Mydeque::reference reference;
; 579  : 
; 580  : 	_Deque_iterator()
; 581  : 		{	// construct with null deque pointer
; 582  : 		}
; 583  : 
; 584  : 	_Deque_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 585  : 		: _Mybase(_Off, _Pdeque)
; 586  : 		{	// construct with offset _Off in *_Pdeque
; 587  : 		}
; 588  : 
; 589  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Unchecked_type;
; 590  : 
; 591  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 592  : 		{	// reset from unchecked iterator
; 593  : 		this->_Myoff = _Right._Myoff;
; 594  : 		return (*this);
; 595  : 		}
; 596  : 
; 597  : 	_Unchecked_type _Unchecked() const
; 598  : 		{	// make an unchecked iterator
; 599  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));
; 600  : 		}
; 601  : 
; 602  : 	reference operator*() const
; 603  : 		{	// return designated object
; 604  : 		return ((reference)**(_Mybase *)this);
; 605  : 		}
; 606  : 
; 607  : 	pointer operator->() const
; 608  : 		{	// return pointer to class object
; 609  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 610  : 		}
; 611  : 
; 612  : 	_Myiter& operator++()
; 613  : 		{	// preincrement
; 614  : 		++*(_Mybase *)this;
; 615  : 		return (*this);
; 616  : 		}
; 617  : 
; 618  : 	_Myiter operator++(int)
; 619  : 		{	// postincrement
; 620  : 		_Myiter _Tmp = *this;
; 621  : 		++*this;
; 622  : 		return (_Tmp);
; 623  : 		}
; 624  : 
; 625  : 	_Myiter& operator--()
; 626  : 		{	// predecrement
; 627  : 		--*(_Mybase *)this;
; 628  : 		return (*this);
; 629  : 		}
; 630  : 
; 631  : 	_Myiter operator--(int)
; 632  : 		{	// postdecrement
; 633  : 		_Myiter _Tmp = *this;
; 634  : 		--*this;
; 635  : 		return (_Tmp);
; 636  : 		}
; 637  : 
; 638  : 	_Myiter& operator+=(difference_type _Off)
; 639  : 		{	// increment by integer
; 640  : 		this->_Myoff += _Off;
; 641  : 		return (*this);
; 642  : 		}
; 643  : 
; 644  : 	_Myiter operator+(difference_type _Off) const
; 645  : 		{	// return this + integer
; 646  : 		_Myiter _Tmp = *this;
; 647  : 		return (_Tmp += _Off);
; 648  : 		}
; 649  : 
; 650  : 	_Myiter& operator-=(difference_type _Off)
; 651  : 		{	// decrement by integer
; 652  : 		return (*this += -_Off);
; 653  : 		}
; 654  : 
; 655  : 	_Myiter operator-(difference_type _Off) const
; 656  : 		{	// return this - integer
; 657  : 		_Myiter _Tmp = *this;
; 658  : 		return (_Tmp -= _Off);
; 659  : 		}
; 660  : 
; 661  : 	difference_type operator-(const _Mybase& _Right) const
; 662  : 		{	// return difference of iterators
; 663  : 		return (*(_Mybase *)this - _Right);
; 664  : 		}
; 665  : 
; 666  : 	reference operator[](difference_type _Off) const
; 667  : 		{	// subscript
; 668  : 		return (*(*this + _Off));
; 669  : 		}
; 670  : 	};
; 671  : 
; 672  : template<class _Mydeque> inline
; 673  : 	typename _Deque_iterator<_Mydeque>::_Unchecked_type
; 674  : 		_Unchecked(_Deque_iterator<_Mydeque> _Iter)
; 675  : 	{	// convert to unchecked
; 676  : 	return (_Iter._Unchecked());
; 677  : 	}
; 678  : 
; 679  : template<class _Mydeque> inline
; 680  : 	_Deque_iterator<_Mydeque>&
; 681  : 		_Rechecked(_Deque_iterator<_Mydeque>& _Iter,
; 682  : 			typename _Deque_iterator<_Mydeque>
; 683  : 				::_Unchecked_type _Right)
; 684  : 	{	// convert to checked
; 685  : 	return (_Iter._Rechecked(_Right));
; 686  : 	}
; 687  : 
; 688  : template<class _Mydeque> inline
; 689  : 	_Deque_iterator<_Mydeque> operator+(
; 690  : 		typename _Deque_iterator<_Mydeque>::difference_type _Off,
; 691  : 		_Deque_iterator<_Mydeque> _Next)
; 692  : 	{	// add offset to iterator
; 693  : 	return (_Next += _Off);
; 694  : 	}
; 695  : 
; 696  : 		// deque TYPE WRAPPERS
; 697  : template<class _Value_type,
; 698  : 	class _Size_type,
; 699  : 	class _Difference_type,
; 700  : 	class _Pointer,
; 701  : 	class _Const_pointer,
; 702  : 	class _Reference,
; 703  : 	class _Const_reference,
; 704  : 	class _Mapptr_type>
; 705  : 	struct _Deque_iter_types
; 706  : 	{	// wraps types needed by iterators
; 707  : 	typedef _Value_type value_type;
; 708  : 	typedef _Size_type size_type;
; 709  : 	typedef _Difference_type difference_type;
; 710  : 	typedef _Pointer pointer;
; 711  : 	typedef _Const_pointer const_pointer;
; 712  : 	typedef _Reference reference;
; 713  : 	typedef _Const_reference const_reference;
; 714  : 	typedef _Mapptr_type _Mapptr;
; 715  : 	};
; 716  : 
; 717  : template<class _Ty>
; 718  : 	struct _Deque_simple_types
; 719  : 		: public _Simple_types<_Ty>
; 720  : 	{	// wraps types needed by iterators
; 721  : 	typedef _Ty **_Mapptr;
; 722  : 	};
; 723  : 
; 724  : template<class _Ty,
; 725  : 	class _Alloc0>
; 726  : 	struct _Deque_base_types
; 727  : 	{	// types needed for a container base
; 728  : 	typedef _Alloc0 _Alloc;
; 729  : 	typedef _Deque_base_types<_Ty, _Alloc> _Myt;
; 730  : 
; 731  :  #if _HAS_CPP0X
; 732  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 733  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 734  : 
; 735  :  #else /* _HAS_CPP0X */
; 736  : 	typedef typename _Alloc::template rebind<_Ty>::other _Alty;
; 737  :  #endif /* _HAS_CPP0X */
; 738  : 
; 739  : 	typedef typename _Alty::pointer _Tptr;
; 740  : 	typedef typename _Alty::template rebind<_Tptr>::other _Alpty;
; 741  : 	typedef typename _Alpty::pointer _Mapptr;
; 742  : 
; 743  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 744  : 		_Deque_simple_types<typename _Alty::value_type>,
; 745  : 		_Deque_iter_types<typename _Alty::value_type,
; 746  : 			typename _Alty::size_type,
; 747  : 			typename _Alty::difference_type,
; 748  : 			typename _Alty::pointer,
; 749  : 			typename _Alty::const_pointer,
; 750  : 			typename _Alty::reference,
; 751  : 			typename _Alty::const_reference,
; 752  : 			_Mapptr> >::type
; 753  : 		_Val_types;
; 754  : 	};
; 755  : 
; 756  : 		// TEMPLATE CLASS _Deque_val
; 757  : template<class _Val_types>
; 758  : 	class _Deque_val
; 759  : 		: public _Container_base12
; 760  : 	{	// base class for deque to hold data
; 761  : public:
; 762  : 	typedef _Deque_val<_Val_types> _Myt;
; 763  : 
; 764  : 	typedef typename _Val_types::value_type value_type;
; 765  : 	typedef typename _Val_types::size_type size_type;
; 766  : 	typedef typename _Val_types::difference_type difference_type;
; 767  : 	typedef typename _Val_types::pointer pointer;
; 768  : 	typedef typename _Val_types::const_pointer const_pointer;
; 769  : 	typedef typename _Val_types::reference reference;
; 770  : 	typedef typename _Val_types::const_reference const_reference;
; 771  : 	typedef typename _Val_types::_Mapptr _Mapptr;
; 772  : 
; 773  : 	typedef _Deque_iterator<_Myt> iterator;
; 774  : 	typedef _Deque_const_iterator<_Myt> const_iterator;
; 775  : 
; 776  : 	_Deque_val()
; 777  : 		{	// initialize values
; 778  : 		_Map = _Mapptr();
; 779  : 		_Mapsize = 0;
; 780  : 		_Myoff = 0;
; 781  : 		_Mysize = 0;
; 782  : 		}
; 783  : 
; 784  : 	size_type _Getblock(size_type _Off) const
; 785  : 		{	// determine block from offset
; 786  : 			// NB: _Mapsize and _DEQUESIZ are guaranteed to be powers of 2
; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00008	4a		 dec	 edx
  00009	23 51 04	 and	 edx, DWORD PTR [ecx+4]

; 202  : 		return ((reference)**(_Mybase *)this);

  0000c	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 203  : 		}

  0000f	c3		 ret	 0
??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEAAVMatrix@geom@@XZ ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??H?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+, COMDAT
; _this$ = ecx

; 243  : 		{	// return this + integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 244  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]

; 245  : 		return (_Tmp += _Off);

  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 93   : 		_Myoff += _Off;

  0000b	03 4d 0c	 add	 ecx, DWORD PTR __Off$[ebp]

; 245  : 		return (_Tmp += _Off);

  0000e	89 10		 mov	 DWORD PTR [eax], edx
  00010	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 246  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??H?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??G?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEHABV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEHABV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@@Z PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-, COMDAT
; _this$ = ecx

; 260  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00009	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000c	2b c2		 sub	 eax, edx

; 261  : 		return (*(_Mybase *)this - _Right);
; 262  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??G?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEHABV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@@Z ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??Y?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=, COMDAT
; _this$ = ecx

; 237  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 		_Myoff += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	01 41 04	 add	 DWORD PTR [ecx+4], eax

; 238  : 		*(_Mybase *)this += _Off;
; 239  : 		return (*this);

  00009	8b c1		 mov	 eax, ecx

; 240  : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??Y?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEABVMatrix@geom@@XZ
_TEXT	SEGMENT
??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEABVMatrix@geom@@XZ PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*, COMDAT
; _this$ = ecx

; 59   : 
; 60   : 	pointer operator->() const
; 61   : 		{	// return pointer to class object
; 62   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 63   : 		}
; 64   : 
; 65   : 	_Myiter& operator++()
; 66   : 		{	// preincrement
; 67   : 		++_Myoff;
; 68   : 		return (*this);
; 69   : 		}
; 70   : 
; 71   : 	_Myiter operator++(int)
; 72   : 		{	// postincrement
; 73   : 		_Myiter _Tmp = *this;
; 74   : 		++*this;
; 75   : 		return (_Tmp);
; 76   : 		}
; 77   : 
; 78   : 	_Myiter& operator--()
; 79   : 		{	// predecrement
; 80   : 		--_Myoff;
; 81   : 		return (*this);
; 82   : 		}
; 83   : 
; 84   : 	_Myiter operator--(int)
; 85   : 		{	// postdecrement
; 86   : 		_Myiter _Tmp = *this;
; 87   : 		--*this;
; 88   : 		return (_Tmp);
; 89   : 		}
; 90   : 
; 91   : 	_Myiter& operator+=(difference_type _Off)
; 92   : 		{	// increment by integer
; 93   : 		_Myoff += _Off;
; 94   : 		return (*this);
; 95   : 		}
; 96   : 
; 97   : 	_Myiter operator+(difference_type _Off) const
; 98   : 		{	// return this + integer
; 99   : 		_Myiter _Tmp = *this;
; 100  : 		return (_Tmp += _Off);
; 101  : 		}
; 102  : 
; 103  : 	_Myiter& operator-=(difference_type _Off)
; 104  : 		{	// decrement by integer
; 105  : 		return (*this += -_Off);
; 106  : 		}
; 107  : 
; 108  : 	_Myiter operator-(difference_type _Off) const
; 109  : 		{	// return this - integer
; 110  : 		_Myiter _Tmp = *this;
; 111  : 		return (_Tmp -= _Off);
; 112  : 		}
; 113  : 
; 114  : 	difference_type operator-(const _Myiter& _Right) const
; 115  : 		{	// return difference of iterators
; 116  : 		return (_Right._Myoff <= _Myoff
; 117  : 			? _Myoff - _Right._Myoff
; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));
; 119  : 		}
; 120  : 
; 121  : 	reference operator[](difference_type _Off) const
; 122  : 		{	// subscript
; 123  : 		return (*(*this + _Off));
; 124  : 		}
; 125  : 
; 126  : 	bool operator==(const _Myiter& _Right) const
; 127  : 		{	// test for iterator equality
; 128  : 		return (_Myoff == _Right._Myoff);
; 129  : 		}
; 130  : 
; 131  : 	bool operator!=(const _Myiter& _Right) const
; 132  : 		{	// test for iterator inequality
; 133  : 		return (!(*this == _Right));
; 134  : 		}
; 135  : 
; 136  : 	bool operator<(const _Myiter& _Right) const
; 137  : 		{	// test if this < _Right
; 138  : 		return (_Myoff < _Right._Myoff);
; 139  : 		}
; 140  : 
; 141  : 	bool operator>(const _Myiter& _Right) const
; 142  : 		{	// test if this > _Right
; 143  : 		return (_Right < *this);
; 144  : 		}
; 145  : 
; 146  : 	bool operator<=(const _Myiter& _Right) const
; 147  : 		{	// test if this <= _Right
; 148  : 		return (!(_Right < *this));
; 149  : 		}
; 150  : 
; 151  : 	bool operator>=(const _Myiter& _Right) const
; 152  : 		{	// test if this >= _Right
; 153  : 		return (!(*this < _Right));
; 154  : 		}
; 155  : 
; 156  : 	const _Container_base12 *_Getcont() const
; 157  : 		{	// get container pointer
; 158  : 		return (_Mycont);
; 159  : 		}
; 160  : 
; 161  : 	const _Mydeque *_Mycont;	// pointer to deque
; 162  : 	size_type _Myoff;	// offset of element in deque
; 163  : 	};
; 164  : 
; 165  : template<class _Mydeque> inline
; 166  : 	_Deque_unchecked_const_iterator<_Mydeque> operator+(
; 167  : 		typename _Deque_unchecked_const_iterator<_Mydeque>
; 168  : 			::difference_type _Off,
; 169  : 		_Deque_unchecked_const_iterator<_Mydeque> _Next)
; 170  : 	{	// add offset to iterator
; 171  : 	return (_Next += _Off);
; 172  : 	}
; 173  : 
; 174  : 		// TEMPLATE CLASS _Deque_unchecked_iterator
; 175  : template<class _Mydeque>
; 176  : 	class _Deque_unchecked_iterator
; 177  : 		: public _Deque_unchecked_const_iterator<_Mydeque>
; 178  : 	{	// iterator for mutable deque
; 179  : public:
; 180  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Myiter;
; 181  : 	typedef _Deque_unchecked_const_iterator<_Mydeque> _Mybase;
; 182  : 	typedef random_access_iterator_tag iterator_category;
; 183  : 
; 184  : 	typedef typename _Mydeque::value_type value_type;
; 185  : 	typedef typename _Mydeque::size_type size_type;
; 186  : 	typedef typename _Mydeque::difference_type difference_type;
; 187  : 	typedef typename _Mydeque::pointer pointer;
; 188  : 	typedef typename _Mydeque::reference reference;
; 189  : 
; 190  : 	_Deque_unchecked_iterator()
; 191  : 		{	// construct with null pointer
; 192  : 		}
; 193  : 
; 194  : 	_Deque_unchecked_iterator(size_type _Off,
; 195  : 		const _Container_base12 *_Pdeque)
; 196  : 		: _Mybase(_Off, _Pdeque)
; 197  : 		{	// construct with offset _Off
; 198  : 		}
; 199  : 
; 200  : 	reference operator*() const
; 201  : 		{	// return designated object
; 202  : 		return ((reference)**(_Mybase *)this);
; 203  : 		}
; 204  : 
; 205  : 	pointer operator->() const
; 206  : 		{	// return pointer to class object
; 207  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 208  : 		}
; 209  : 
; 210  : 	_Myiter& operator++()
; 211  : 		{	// preincrement
; 212  : 		++*(_Mybase *)this;
; 213  : 		return (*this);
; 214  : 		}
; 215  : 
; 216  : 	_Myiter operator++(int)
; 217  : 		{	// postincrement
; 218  : 		_Myiter _Tmp = *this;
; 219  : 		++*this;
; 220  : 		return (_Tmp);
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator--()
; 224  : 		{	// predecrement
; 225  : 		--*(_Mybase *)this;
; 226  : 		return (*this);
; 227  : 		}
; 228  : 
; 229  : 	_Myiter operator--(int)
; 230  : 		{	// postdecrement
; 231  : 		_Myiter _Tmp = *this;
; 232  : 		--*this;
; 233  : 		return (_Tmp);
; 234  : 		}
; 235  : 
; 236  : 	_Myiter& operator+=(difference_type _Off)
; 237  : 		{	// increment by integer
; 238  : 		*(_Mybase *)this += _Off;
; 239  : 		return (*this);
; 240  : 		}
; 241  : 
; 242  : 	_Myiter operator+(difference_type _Off) const
; 243  : 		{	// return this + integer
; 244  : 		_Myiter _Tmp = *this;
; 245  : 		return (_Tmp += _Off);
; 246  : 		}
; 247  : 
; 248  : 	_Myiter& operator-=(difference_type _Off)
; 249  : 		{	// decrement by integer
; 250  : 		return (*this += -_Off);
; 251  : 		}
; 252  : 
; 253  : 	_Myiter operator-(difference_type _Off) const
; 254  : 		{	// return this - integer
; 255  : 		_Myiter _Tmp = *this;
; 256  : 		return (_Tmp -= _Off);
; 257  : 		}
; 258  : 
; 259  : 	difference_type operator-(const _Mybase& _Right) const
; 260  : 		{	// return difference of iterators
; 261  : 		return (*(_Mybase *)this - _Right);
; 262  : 		}
; 263  : 
; 264  : 	reference operator[](difference_type _Off) const
; 265  : 		{	// subscript
; 266  : 		return (*(*this + _Off));
; 267  : 		}
; 268  : 	};
; 269  : 
; 270  : template<class _Mydeque> inline
; 271  : 	_Deque_unchecked_iterator<_Mydeque> operator+(
; 272  : 		typename _Deque_unchecked_iterator<_Mydeque>
; 273  : 			::difference_type _Off,
; 274  : 		_Deque_unchecked_iterator<_Mydeque> _Next)
; 275  : 	{	// add offset to iterator
; 276  : 	return (_Next += _Off);
; 277  : 	}
; 278  : 
; 279  : 		// TEMPLATE CLASS _Deque_const_iterator
; 280  : template<class _Mydeque>
; 281  : 	class _Deque_const_iterator
; 282  : 		: public _Iterator_base12
; 283  : 	{	// iterator for nonmutable deque
; 284  : public:
; 285  : 	typedef _Deque_const_iterator<_Mydeque> _Myiter;
; 286  : 	typedef random_access_iterator_tag iterator_category;
; 287  : 
; 288  : 	typedef typename _Mydeque::value_type value_type;
; 289  : 	typedef typename _Mydeque::size_type size_type;
; 290  : 	typedef typename _Mydeque::difference_type difference_type;
; 291  : 	typedef typename _Mydeque::const_pointer pointer;
; 292  : 	typedef typename _Mydeque::const_reference reference;
; 293  : 
; 294  : 	typedef _Mydeque _Mydeque_t;	// helper for expression evaluator
; 295  : 	enum {_EEN_DS = _DEQUESIZ};	// helper for expression evaluator
; 296  : 
; 297  : 	_Deque_const_iterator()
; 298  : 		{	// construct with null pointer
; 299  : 		_Setcont(0);
; 300  : 		_Myoff = 0;
; 301  : 		}
; 302  : 
; 303  : 	_Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 304  : 		{	// construct with offset _Off in *_Pdeque
; 305  : 		_Setcont((_Mydeque *)_Pdeque);
; 306  : 		_Myoff = _Off;
; 307  : 		}
; 308  : 
; 309  : 	typedef _Deque_unchecked_const_iterator<_Mydeque> _Unchecked_type;
; 310  : 
; 311  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 312  : 		{	// reset from unchecked iterator
; 313  : 		this->_Myoff = _Right._Myoff;
; 314  : 		return (*this);
; 315  : 		}
; 316  : 
; 317  : 	_Unchecked_type _Unchecked() const
; 318  : 		{	// make an unchecked iterator
; 319  : 		return (_Unchecked_type(_Myoff, this->_Getcont()));
; 320  : 		}
; 321  : 
; 322  : 	reference operator*() const
; 323  : 		{	// return designated object
; 324  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 325  : 
; 326  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 327  : 		if (_Mycont == 0
; 328  : 			|| this->_Myoff < _Mycont->_Myoff
; 329  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 330  : 		{	// report error
; 331  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 332  : 		_SCL_SECURE_OUT_OF_RANGE;
; 333  : 		}
; 334  : 
; 335  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 336  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 337  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 338  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 339  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 340  : 
; 341  : 		_Analysis_assume_(_Mycont != 0);
; 342  : 
; 343  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 344  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 345  : 		return (_Mycont->_Map[_Block][_Off]);
; 346  : 		}
; 347  : 
; 348  : 	pointer operator->() const
; 349  : 		{	// return pointer to class object
; 350  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 351  : 		}
; 352  : 
; 353  : 	_Myiter& operator++()
; 354  : 		{	// preincrement
; 355  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 356  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 357  : 		if (_Mycont == 0
; 358  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 359  : 		{	// report error
; 360  : 		_DEBUG_ERROR("deque iterator not incrementable");
; 361  : 		_SCL_SECURE_OUT_OF_RANGE;
; 362  : 		}
; 363  : 
; 364  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 365  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 366  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 367  : 		_SCL_SECURE_VALIDATE_RANGE(
; 368  : 			this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 369  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 370  : 
; 371  : 		++_Myoff;
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 385  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 386  : 		if (_Mycont == 0
; 387  : 			|| this->_Myoff <= _Mycont->_Myoff)
; 388  : 		{	// report error
; 389  : 		_DEBUG_ERROR("deque iterator not decrementable");
; 390  : 		_SCL_SECURE_OUT_OF_RANGE;
; 391  : 		}
; 392  : 
; 393  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 394  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 395  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 396  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff < this->_Myoff);
; 397  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 398  : 
; 399  : 		--_Myoff;
; 400  : 		return (*this);
; 401  : 		}
; 402  : 
; 403  : 	_Myiter operator--(int)
; 404  : 		{	// postdecrement
; 405  : 		_Myiter _Tmp = *this;
; 406  : 		--*this;
; 407  : 		return (_Tmp);
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator+=(difference_type _Off)
; 411  : 		{	// increment by integer
; 412  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 413  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 414  : 		if (_Mycont == 0
; 415  : 			|| this->_Myoff + _Off < _Mycont->_Myoff
; 416  : 			|| _Mycont->_Myoff + _Mycont->_Mysize < this->_Myoff + _Off)
; 417  : 			{	// report error
; 418  : 			_DEBUG_ERROR("deque iterator + offset out of range");
; 419  : 			_SCL_SECURE_OUT_OF_RANGE;
; 420  : 			}
; 421  : 
; 422  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 423  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 424  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 425  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff + _Off
; 426  : 			&& this->_Myoff + _Off <= _Mycont->_Myoff + _Mycont->_Mysize);
; 427  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 428  : 
; 429  : 		_Myoff += _Off;
; 430  : 		return (*this);
; 431  : 		}
; 432  : 
; 433  : 	_Myiter operator+(difference_type _Off) const
; 434  : 		{	// return this + integer
; 435  : 		_Myiter _Tmp = *this;
; 436  : 		return (_Tmp += _Off);
; 437  : 		}
; 438  : 
; 439  : 	_Myiter& operator-=(difference_type _Off)
; 440  : 		{	// decrement by integer
; 441  : 		return (*this += -_Off);
; 442  : 		}
; 443  : 
; 444  : 	_Myiter operator-(difference_type _Off) const
; 445  : 		{	// return this - integer
; 446  : 		_Myiter _Tmp = *this;
; 447  : 		return (_Tmp -= _Off);
; 448  : 		}
; 449  : 
; 450  : 	difference_type operator-(const _Myiter& _Right) const
; 451  : 		{	// return difference of iterators
; 452  : 		_Compat(_Right);
; 453  : 		return (_Right._Myoff <= this->_Myoff
; 454  : 			? this->_Myoff - _Right._Myoff
; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));
; 456  : 		}
; 457  : 
; 458  : 	reference operator[](difference_type _Off) const
; 459  : 		{	// subscript
; 460  : 		return (*(*this + _Off));
; 461  : 		}
; 462  : 
; 463  : 	bool operator==(const _Myiter& _Right) const
; 464  : 		{	// test for iterator equality
; 465  : 		_Compat(_Right);
; 466  : 		return (this->_Myoff == _Right._Myoff);
; 467  : 		}
; 468  : 
; 469  : 	bool operator!=(const _Myiter& _Right) const
; 470  : 		{	// test for iterator inequality
; 471  : 		return (!(*this == _Right));
; 472  : 		}
; 473  : 
; 474  : 	bool operator<(const _Myiter& _Right) const
; 475  : 		{	// test if this < _Right
; 476  : 		_Compat(_Right);
; 477  : 		return (this->_Myoff < _Right._Myoff);
; 478  : 		}
; 479  : 
; 480  : 	bool operator>(const _Myiter& _Right) const
; 481  : 		{	// test if this > _Right
; 482  : 		return (_Right < *this);
; 483  : 		}
; 484  : 
; 485  : 	bool operator<=(const _Myiter& _Right) const
; 486  : 		{	// test if this <= _Right
; 487  : 		return (!(_Right < *this));
; 488  : 		}
; 489  : 
; 490  : 	bool operator>=(const _Myiter& _Right) const
; 491  : 		{	// test if this >= _Right
; 492  : 		return (!(*this < _Right));
; 493  : 		}
; 494  : 
; 495  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 496  : 	void _Compat(const _Myiter& _Right) const
; 497  : 		{	// test for compatible iterator pair
; 498  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 499  : 		if (_Mycont == 0
; 500  : 			|| _Mycont != _Right._Getcont())
; 501  : 			{	// report error
; 502  : 			_DEBUG_ERROR("deque iterators incompatible");
; 503  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 504  : 			}
; 505  : 		}
; 506  : 
; 507  : 	void _Setcont(const _Mydeque *_Pdeque)
; 508  : 		{	// set container pointer
; 509  : 		this->_Adopt(_Pdeque);
; 510  : 		}
; 511  : 
; 512  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 513  : 	void _Compat(const _Myiter& _Right) const
; 514  : 		{	// test for compatible iterator pair
; 515  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 516  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 517  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont == _Right._Getcont());
; 518  : 		}
; 519  : 
; 520  : 	void _Setcont(const _Mydeque *_Pdeque)
; 521  : 		{	// set container pointer
; 522  : 		this->_Adopt(_Pdeque);
; 523  : 		}
; 524  : 
; 525  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 526  : 	void _Compat(const _Myiter&) const
; 527  : 		{	// test for compatible iterator pair
; 528  : 		}
; 529  : 
; 530  : 	void _Setcont(const _Mydeque *_Pdeque)
; 531  : 		{	// set container pointer
; 532  : 		this->_Adopt(_Pdeque);
; 533  : 		}
; 534  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 535  : 
; 536  : 	size_type _Myoff;	// offset of element in deque
; 537  : 	};
; 538  : 
; 539  : template<class _Mydeque> inline
; 540  : 	typename _Deque_const_iterator<_Mydeque>::_Unchecked_type
; 541  : 		_Unchecked(_Deque_const_iterator<_Mydeque> _Iter)
; 542  : 	{	// convert to unchecked
; 543  : 	return (_Iter._Unchecked());
; 544  : 	}
; 545  : 
; 546  : template<class _Mydeque> inline
; 547  : 	_Deque_const_iterator<_Mydeque>&
; 548  : 		_Rechecked(_Deque_const_iterator<_Mydeque>& _Iter,
; 549  : 			typename _Deque_const_iterator<_Mydeque>
; 550  : 				::_Unchecked_type _Right)
; 551  : 	{	// convert to checked
; 552  : 	return (_Iter._Rechecked(_Right));
; 553  : 	}
; 554  : 
; 555  : template<class _Mydeque> inline
; 556  : 	_Deque_const_iterator<_Mydeque> operator+(
; 557  : 		typename _Deque_const_iterator<_Mydeque>::difference_type _Off,
; 558  : 		_Deque_const_iterator<_Mydeque> _Next)
; 559  : 	{	// add offset to iterator
; 560  : 	return (_Next += _Off);
; 561  : 	}
; 562  : 
; 563  : 		// TEMPLATE CLASS _Deque_iterator
; 564  : template<class _Mydeque>
; 565  : 	class _Deque_iterator
; 566  : 		: public _Deque_const_iterator<_Mydeque>
; 567  : 		{	// iterator for mutable deque
; 568  : public:
; 569  : 	typedef _Deque_iterator<_Mydeque> _Myiter;
; 570  : 	typedef _Deque_const_iterator<_Mydeque> _Mybase;
; 571  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Deque_unchecked_type;
; 572  : 	typedef random_access_iterator_tag iterator_category;
; 573  : 
; 574  : 	typedef typename _Mydeque::value_type value_type;
; 575  : 	typedef typename _Mydeque::size_type size_type;
; 576  : 	typedef typename _Mydeque::difference_type difference_type;
; 577  : 	typedef typename _Mydeque::pointer pointer;
; 578  : 	typedef typename _Mydeque::reference reference;
; 579  : 
; 580  : 	_Deque_iterator()
; 581  : 		{	// construct with null deque pointer
; 582  : 		}
; 583  : 
; 584  : 	_Deque_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 585  : 		: _Mybase(_Off, _Pdeque)
; 586  : 		{	// construct with offset _Off in *_Pdeque
; 587  : 		}
; 588  : 
; 589  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Unchecked_type;
; 590  : 
; 591  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 592  : 		{	// reset from unchecked iterator
; 593  : 		this->_Myoff = _Right._Myoff;
; 594  : 		return (*this);
; 595  : 		}
; 596  : 
; 597  : 	_Unchecked_type _Unchecked() const
; 598  : 		{	// make an unchecked iterator
; 599  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));
; 600  : 		}
; 601  : 
; 602  : 	reference operator*() const
; 603  : 		{	// return designated object
; 604  : 		return ((reference)**(_Mybase *)this);
; 605  : 		}
; 606  : 
; 607  : 	pointer operator->() const
; 608  : 		{	// return pointer to class object
; 609  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 610  : 		}
; 611  : 
; 612  : 	_Myiter& operator++()
; 613  : 		{	// preincrement
; 614  : 		++*(_Mybase *)this;
; 615  : 		return (*this);
; 616  : 		}
; 617  : 
; 618  : 	_Myiter operator++(int)
; 619  : 		{	// postincrement
; 620  : 		_Myiter _Tmp = *this;
; 621  : 		++*this;
; 622  : 		return (_Tmp);
; 623  : 		}
; 624  : 
; 625  : 	_Myiter& operator--()
; 626  : 		{	// predecrement
; 627  : 		--*(_Mybase *)this;
; 628  : 		return (*this);
; 629  : 		}
; 630  : 
; 631  : 	_Myiter operator--(int)
; 632  : 		{	// postdecrement
; 633  : 		_Myiter _Tmp = *this;
; 634  : 		--*this;
; 635  : 		return (_Tmp);
; 636  : 		}
; 637  : 
; 638  : 	_Myiter& operator+=(difference_type _Off)
; 639  : 		{	// increment by integer
; 640  : 		this->_Myoff += _Off;
; 641  : 		return (*this);
; 642  : 		}
; 643  : 
; 644  : 	_Myiter operator+(difference_type _Off) const
; 645  : 		{	// return this + integer
; 646  : 		_Myiter _Tmp = *this;
; 647  : 		return (_Tmp += _Off);
; 648  : 		}
; 649  : 
; 650  : 	_Myiter& operator-=(difference_type _Off)
; 651  : 		{	// decrement by integer
; 652  : 		return (*this += -_Off);
; 653  : 		}
; 654  : 
; 655  : 	_Myiter operator-(difference_type _Off) const
; 656  : 		{	// return this - integer
; 657  : 		_Myiter _Tmp = *this;
; 658  : 		return (_Tmp -= _Off);
; 659  : 		}
; 660  : 
; 661  : 	difference_type operator-(const _Mybase& _Right) const
; 662  : 		{	// return difference of iterators
; 663  : 		return (*(_Mybase *)this - _Right);
; 664  : 		}
; 665  : 
; 666  : 	reference operator[](difference_type _Off) const
; 667  : 		{	// subscript
; 668  : 		return (*(*this + _Off));
; 669  : 		}
; 670  : 	};
; 671  : 
; 672  : template<class _Mydeque> inline
; 673  : 	typename _Deque_iterator<_Mydeque>::_Unchecked_type
; 674  : 		_Unchecked(_Deque_iterator<_Mydeque> _Iter)
; 675  : 	{	// convert to unchecked
; 676  : 	return (_Iter._Unchecked());
; 677  : 	}
; 678  : 
; 679  : template<class _Mydeque> inline
; 680  : 	_Deque_iterator<_Mydeque>&
; 681  : 		_Rechecked(_Deque_iterator<_Mydeque>& _Iter,
; 682  : 			typename _Deque_iterator<_Mydeque>
; 683  : 				::_Unchecked_type _Right)
; 684  : 	{	// convert to checked
; 685  : 	return (_Iter._Rechecked(_Right));
; 686  : 	}
; 687  : 
; 688  : template<class _Mydeque> inline
; 689  : 	_Deque_iterator<_Mydeque> operator+(
; 690  : 		typename _Deque_iterator<_Mydeque>::difference_type _Off,
; 691  : 		_Deque_iterator<_Mydeque> _Next)
; 692  : 	{	// add offset to iterator
; 693  : 	return (_Next += _Off);
; 694  : 	}
; 695  : 
; 696  : 		// deque TYPE WRAPPERS
; 697  : template<class _Value_type,
; 698  : 	class _Size_type,
; 699  : 	class _Difference_type,
; 700  : 	class _Pointer,
; 701  : 	class _Const_pointer,
; 702  : 	class _Reference,
; 703  : 	class _Const_reference,
; 704  : 	class _Mapptr_type>
; 705  : 	struct _Deque_iter_types
; 706  : 	{	// wraps types needed by iterators
; 707  : 	typedef _Value_type value_type;
; 708  : 	typedef _Size_type size_type;
; 709  : 	typedef _Difference_type difference_type;
; 710  : 	typedef _Pointer pointer;
; 711  : 	typedef _Const_pointer const_pointer;
; 712  : 	typedef _Reference reference;
; 713  : 	typedef _Const_reference const_reference;
; 714  : 	typedef _Mapptr_type _Mapptr;
; 715  : 	};
; 716  : 
; 717  : template<class _Ty>
; 718  : 	struct _Deque_simple_types
; 719  : 		: public _Simple_types<_Ty>
; 720  : 	{	// wraps types needed by iterators
; 721  : 	typedef _Ty **_Mapptr;
; 722  : 	};
; 723  : 
; 724  : template<class _Ty,
; 725  : 	class _Alloc0>
; 726  : 	struct _Deque_base_types
; 727  : 	{	// types needed for a container base
; 728  : 	typedef _Alloc0 _Alloc;
; 729  : 	typedef _Deque_base_types<_Ty, _Alloc> _Myt;
; 730  : 
; 731  :  #if _HAS_CPP0X
; 732  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 733  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 734  : 
; 735  :  #else /* _HAS_CPP0X */
; 736  : 	typedef typename _Alloc::template rebind<_Ty>::other _Alty;
; 737  :  #endif /* _HAS_CPP0X */
; 738  : 
; 739  : 	typedef typename _Alty::pointer _Tptr;
; 740  : 	typedef typename _Alty::template rebind<_Tptr>::other _Alpty;
; 741  : 	typedef typename _Alpty::pointer _Mapptr;
; 742  : 
; 743  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 744  : 		_Deque_simple_types<typename _Alty::value_type>,
; 745  : 		_Deque_iter_types<typename _Alty::value_type,
; 746  : 			typename _Alty::size_type,
; 747  : 			typename _Alty::difference_type,
; 748  : 			typename _Alty::pointer,
; 749  : 			typename _Alty::const_pointer,
; 750  : 			typename _Alty::reference,
; 751  : 			typename _Alty::const_reference,
; 752  : 			_Mapptr> >::type
; 753  : 		_Val_types;
; 754  : 	};
; 755  : 
; 756  : 		// TEMPLATE CLASS _Deque_val
; 757  : template<class _Val_types>
; 758  : 	class _Deque_val
; 759  : 		: public _Container_base12
; 760  : 	{	// base class for deque to hold data
; 761  : public:
; 762  : 	typedef _Deque_val<_Val_types> _Myt;
; 763  : 
; 764  : 	typedef typename _Val_types::value_type value_type;
; 765  : 	typedef typename _Val_types::size_type size_type;
; 766  : 	typedef typename _Val_types::difference_type difference_type;
; 767  : 	typedef typename _Val_types::pointer pointer;
; 768  : 	typedef typename _Val_types::const_pointer const_pointer;
; 769  : 	typedef typename _Val_types::reference reference;
; 770  : 	typedef typename _Val_types::const_reference const_reference;
; 771  : 	typedef typename _Val_types::_Mapptr _Mapptr;
; 772  : 
; 773  : 	typedef _Deque_iterator<_Myt> iterator;
; 774  : 	typedef _Deque_const_iterator<_Myt> const_iterator;
; 775  : 
; 776  : 	_Deque_val()
; 777  : 		{	// initialize values
; 778  : 		_Map = _Mapptr();
; 779  : 		_Mapsize = 0;
; 780  : 		_Myoff = 0;
; 781  : 		_Mysize = 0;
; 782  : 		}
; 783  : 
; 784  : 	size_type _Getblock(size_type _Off) const
; 785  : 		{	// determine block from offset
; 786  : 			// NB: _Mapsize and _DEQUESIZ are guaranteed to be powers of 2
; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 55   : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 56   : 		size_type _Off = _Myoff % _DEQUESIZ;
; 57   : 		return (_Mycont->_Map[_Block][_Off]);

  00005	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 59   : 
; 60   : 	pointer operator->() const
; 61   : 		{	// return pointer to class object
; 62   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 63   : 		}
; 64   : 
; 65   : 	_Myiter& operator++()
; 66   : 		{	// preincrement
; 67   : 		++_Myoff;
; 68   : 		return (*this);
; 69   : 		}
; 70   : 
; 71   : 	_Myiter operator++(int)
; 72   : 		{	// postincrement
; 73   : 		_Myiter _Tmp = *this;
; 74   : 		++*this;
; 75   : 		return (_Tmp);
; 76   : 		}
; 77   : 
; 78   : 	_Myiter& operator--()
; 79   : 		{	// predecrement
; 80   : 		--_Myoff;
; 81   : 		return (*this);
; 82   : 		}
; 83   : 
; 84   : 	_Myiter operator--(int)
; 85   : 		{	// postdecrement
; 86   : 		_Myiter _Tmp = *this;
; 87   : 		--*this;
; 88   : 		return (_Tmp);
; 89   : 		}
; 90   : 
; 91   : 	_Myiter& operator+=(difference_type _Off)
; 92   : 		{	// increment by integer
; 93   : 		_Myoff += _Off;
; 94   : 		return (*this);
; 95   : 		}
; 96   : 
; 97   : 	_Myiter operator+(difference_type _Off) const
; 98   : 		{	// return this + integer
; 99   : 		_Myiter _Tmp = *this;
; 100  : 		return (_Tmp += _Off);
; 101  : 		}
; 102  : 
; 103  : 	_Myiter& operator-=(difference_type _Off)
; 104  : 		{	// decrement by integer
; 105  : 		return (*this += -_Off);
; 106  : 		}
; 107  : 
; 108  : 	_Myiter operator-(difference_type _Off) const
; 109  : 		{	// return this - integer
; 110  : 		_Myiter _Tmp = *this;
; 111  : 		return (_Tmp -= _Off);
; 112  : 		}
; 113  : 
; 114  : 	difference_type operator-(const _Myiter& _Right) const
; 115  : 		{	// return difference of iterators
; 116  : 		return (_Right._Myoff <= _Myoff
; 117  : 			? _Myoff - _Right._Myoff
; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));
; 119  : 		}
; 120  : 
; 121  : 	reference operator[](difference_type _Off) const
; 122  : 		{	// subscript
; 123  : 		return (*(*this + _Off));
; 124  : 		}
; 125  : 
; 126  : 	bool operator==(const _Myiter& _Right) const
; 127  : 		{	// test for iterator equality
; 128  : 		return (_Myoff == _Right._Myoff);
; 129  : 		}
; 130  : 
; 131  : 	bool operator!=(const _Myiter& _Right) const
; 132  : 		{	// test for iterator inequality
; 133  : 		return (!(*this == _Right));
; 134  : 		}
; 135  : 
; 136  : 	bool operator<(const _Myiter& _Right) const
; 137  : 		{	// test if this < _Right
; 138  : 		return (_Myoff < _Right._Myoff);
; 139  : 		}
; 140  : 
; 141  : 	bool operator>(const _Myiter& _Right) const
; 142  : 		{	// test if this > _Right
; 143  : 		return (_Right < *this);
; 144  : 		}
; 145  : 
; 146  : 	bool operator<=(const _Myiter& _Right) const
; 147  : 		{	// test if this <= _Right
; 148  : 		return (!(_Right < *this));
; 149  : 		}
; 150  : 
; 151  : 	bool operator>=(const _Myiter& _Right) const
; 152  : 		{	// test if this >= _Right
; 153  : 		return (!(*this < _Right));
; 154  : 		}
; 155  : 
; 156  : 	const _Container_base12 *_Getcont() const
; 157  : 		{	// get container pointer
; 158  : 		return (_Mycont);
; 159  : 		}
; 160  : 
; 161  : 	const _Mydeque *_Mycont;	// pointer to deque
; 162  : 	size_type _Myoff;	// offset of element in deque
; 163  : 	};
; 164  : 
; 165  : template<class _Mydeque> inline
; 166  : 	_Deque_unchecked_const_iterator<_Mydeque> operator+(
; 167  : 		typename _Deque_unchecked_const_iterator<_Mydeque>
; 168  : 			::difference_type _Off,
; 169  : 		_Deque_unchecked_const_iterator<_Mydeque> _Next)
; 170  : 	{	// add offset to iterator
; 171  : 	return (_Next += _Off);
; 172  : 	}
; 173  : 
; 174  : 		// TEMPLATE CLASS _Deque_unchecked_iterator
; 175  : template<class _Mydeque>
; 176  : 	class _Deque_unchecked_iterator
; 177  : 		: public _Deque_unchecked_const_iterator<_Mydeque>
; 178  : 	{	// iterator for mutable deque
; 179  : public:
; 180  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Myiter;
; 181  : 	typedef _Deque_unchecked_const_iterator<_Mydeque> _Mybase;
; 182  : 	typedef random_access_iterator_tag iterator_category;
; 183  : 
; 184  : 	typedef typename _Mydeque::value_type value_type;
; 185  : 	typedef typename _Mydeque::size_type size_type;
; 186  : 	typedef typename _Mydeque::difference_type difference_type;
; 187  : 	typedef typename _Mydeque::pointer pointer;
; 188  : 	typedef typename _Mydeque::reference reference;
; 189  : 
; 190  : 	_Deque_unchecked_iterator()
; 191  : 		{	// construct with null pointer
; 192  : 		}
; 193  : 
; 194  : 	_Deque_unchecked_iterator(size_type _Off,
; 195  : 		const _Container_base12 *_Pdeque)
; 196  : 		: _Mybase(_Off, _Pdeque)
; 197  : 		{	// construct with offset _Off
; 198  : 		}
; 199  : 
; 200  : 	reference operator*() const
; 201  : 		{	// return designated object
; 202  : 		return ((reference)**(_Mybase *)this);
; 203  : 		}
; 204  : 
; 205  : 	pointer operator->() const
; 206  : 		{	// return pointer to class object
; 207  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 208  : 		}
; 209  : 
; 210  : 	_Myiter& operator++()
; 211  : 		{	// preincrement
; 212  : 		++*(_Mybase *)this;
; 213  : 		return (*this);
; 214  : 		}
; 215  : 
; 216  : 	_Myiter operator++(int)
; 217  : 		{	// postincrement
; 218  : 		_Myiter _Tmp = *this;
; 219  : 		++*this;
; 220  : 		return (_Tmp);
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator--()
; 224  : 		{	// predecrement
; 225  : 		--*(_Mybase *)this;
; 226  : 		return (*this);
; 227  : 		}
; 228  : 
; 229  : 	_Myiter operator--(int)
; 230  : 		{	// postdecrement
; 231  : 		_Myiter _Tmp = *this;
; 232  : 		--*this;
; 233  : 		return (_Tmp);
; 234  : 		}
; 235  : 
; 236  : 	_Myiter& operator+=(difference_type _Off)
; 237  : 		{	// increment by integer
; 238  : 		*(_Mybase *)this += _Off;
; 239  : 		return (*this);
; 240  : 		}
; 241  : 
; 242  : 	_Myiter operator+(difference_type _Off) const
; 243  : 		{	// return this + integer
; 244  : 		_Myiter _Tmp = *this;
; 245  : 		return (_Tmp += _Off);
; 246  : 		}
; 247  : 
; 248  : 	_Myiter& operator-=(difference_type _Off)
; 249  : 		{	// decrement by integer
; 250  : 		return (*this += -_Off);
; 251  : 		}
; 252  : 
; 253  : 	_Myiter operator-(difference_type _Off) const
; 254  : 		{	// return this - integer
; 255  : 		_Myiter _Tmp = *this;
; 256  : 		return (_Tmp -= _Off);
; 257  : 		}
; 258  : 
; 259  : 	difference_type operator-(const _Mybase& _Right) const
; 260  : 		{	// return difference of iterators
; 261  : 		return (*(_Mybase *)this - _Right);
; 262  : 		}
; 263  : 
; 264  : 	reference operator[](difference_type _Off) const
; 265  : 		{	// subscript
; 266  : 		return (*(*this + _Off));
; 267  : 		}
; 268  : 	};
; 269  : 
; 270  : template<class _Mydeque> inline
; 271  : 	_Deque_unchecked_iterator<_Mydeque> operator+(
; 272  : 		typename _Deque_unchecked_iterator<_Mydeque>
; 273  : 			::difference_type _Off,
; 274  : 		_Deque_unchecked_iterator<_Mydeque> _Next)
; 275  : 	{	// add offset to iterator
; 276  : 	return (_Next += _Off);
; 277  : 	}
; 278  : 
; 279  : 		// TEMPLATE CLASS _Deque_const_iterator
; 280  : template<class _Mydeque>
; 281  : 	class _Deque_const_iterator
; 282  : 		: public _Iterator_base12
; 283  : 	{	// iterator for nonmutable deque
; 284  : public:
; 285  : 	typedef _Deque_const_iterator<_Mydeque> _Myiter;
; 286  : 	typedef random_access_iterator_tag iterator_category;
; 287  : 
; 288  : 	typedef typename _Mydeque::value_type value_type;
; 289  : 	typedef typename _Mydeque::size_type size_type;
; 290  : 	typedef typename _Mydeque::difference_type difference_type;
; 291  : 	typedef typename _Mydeque::const_pointer pointer;
; 292  : 	typedef typename _Mydeque::const_reference reference;
; 293  : 
; 294  : 	typedef _Mydeque _Mydeque_t;	// helper for expression evaluator
; 295  : 	enum {_EEN_DS = _DEQUESIZ};	// helper for expression evaluator
; 296  : 
; 297  : 	_Deque_const_iterator()
; 298  : 		{	// construct with null pointer
; 299  : 		_Setcont(0);
; 300  : 		_Myoff = 0;
; 301  : 		}
; 302  : 
; 303  : 	_Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 304  : 		{	// construct with offset _Off in *_Pdeque
; 305  : 		_Setcont((_Mydeque *)_Pdeque);
; 306  : 		_Myoff = _Off;
; 307  : 		}
; 308  : 
; 309  : 	typedef _Deque_unchecked_const_iterator<_Mydeque> _Unchecked_type;
; 310  : 
; 311  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 312  : 		{	// reset from unchecked iterator
; 313  : 		this->_Myoff = _Right._Myoff;
; 314  : 		return (*this);
; 315  : 		}
; 316  : 
; 317  : 	_Unchecked_type _Unchecked() const
; 318  : 		{	// make an unchecked iterator
; 319  : 		return (_Unchecked_type(_Myoff, this->_Getcont()));
; 320  : 		}
; 321  : 
; 322  : 	reference operator*() const
; 323  : 		{	// return designated object
; 324  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 325  : 
; 326  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 327  : 		if (_Mycont == 0
; 328  : 			|| this->_Myoff < _Mycont->_Myoff
; 329  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 330  : 		{	// report error
; 331  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 332  : 		_SCL_SECURE_OUT_OF_RANGE;
; 333  : 		}
; 334  : 
; 335  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 336  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 337  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 338  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 339  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 340  : 
; 341  : 		_Analysis_assume_(_Mycont != 0);
; 342  : 
; 343  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 344  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 345  : 		return (_Mycont->_Map[_Block][_Off]);
; 346  : 		}
; 347  : 
; 348  : 	pointer operator->() const
; 349  : 		{	// return pointer to class object
; 350  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 351  : 		}
; 352  : 
; 353  : 	_Myiter& operator++()
; 354  : 		{	// preincrement
; 355  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 356  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 357  : 		if (_Mycont == 0
; 358  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 359  : 		{	// report error
; 360  : 		_DEBUG_ERROR("deque iterator not incrementable");
; 361  : 		_SCL_SECURE_OUT_OF_RANGE;
; 362  : 		}
; 363  : 
; 364  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 365  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 366  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 367  : 		_SCL_SECURE_VALIDATE_RANGE(
; 368  : 			this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 369  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 370  : 
; 371  : 		++_Myoff;
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 385  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 386  : 		if (_Mycont == 0
; 387  : 			|| this->_Myoff <= _Mycont->_Myoff)
; 388  : 		{	// report error
; 389  : 		_DEBUG_ERROR("deque iterator not decrementable");
; 390  : 		_SCL_SECURE_OUT_OF_RANGE;
; 391  : 		}
; 392  : 
; 393  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 394  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 395  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 396  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff < this->_Myoff);
; 397  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 398  : 
; 399  : 		--_Myoff;
; 400  : 		return (*this);
; 401  : 		}
; 402  : 
; 403  : 	_Myiter operator--(int)
; 404  : 		{	// postdecrement
; 405  : 		_Myiter _Tmp = *this;
; 406  : 		--*this;
; 407  : 		return (_Tmp);
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator+=(difference_type _Off)
; 411  : 		{	// increment by integer
; 412  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 413  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 414  : 		if (_Mycont == 0
; 415  : 			|| this->_Myoff + _Off < _Mycont->_Myoff
; 416  : 			|| _Mycont->_Myoff + _Mycont->_Mysize < this->_Myoff + _Off)
; 417  : 			{	// report error
; 418  : 			_DEBUG_ERROR("deque iterator + offset out of range");
; 419  : 			_SCL_SECURE_OUT_OF_RANGE;
; 420  : 			}
; 421  : 
; 422  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 423  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 424  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 425  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff + _Off
; 426  : 			&& this->_Myoff + _Off <= _Mycont->_Myoff + _Mycont->_Mysize);
; 427  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 428  : 
; 429  : 		_Myoff += _Off;
; 430  : 		return (*this);
; 431  : 		}
; 432  : 
; 433  : 	_Myiter operator+(difference_type _Off) const
; 434  : 		{	// return this + integer
; 435  : 		_Myiter _Tmp = *this;
; 436  : 		return (_Tmp += _Off);
; 437  : 		}
; 438  : 
; 439  : 	_Myiter& operator-=(difference_type _Off)
; 440  : 		{	// decrement by integer
; 441  : 		return (*this += -_Off);
; 442  : 		}
; 443  : 
; 444  : 	_Myiter operator-(difference_type _Off) const
; 445  : 		{	// return this - integer
; 446  : 		_Myiter _Tmp = *this;
; 447  : 		return (_Tmp -= _Off);
; 448  : 		}
; 449  : 
; 450  : 	difference_type operator-(const _Myiter& _Right) const
; 451  : 		{	// return difference of iterators
; 452  : 		_Compat(_Right);
; 453  : 		return (_Right._Myoff <= this->_Myoff
; 454  : 			? this->_Myoff - _Right._Myoff
; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));
; 456  : 		}
; 457  : 
; 458  : 	reference operator[](difference_type _Off) const
; 459  : 		{	// subscript
; 460  : 		return (*(*this + _Off));
; 461  : 		}
; 462  : 
; 463  : 	bool operator==(const _Myiter& _Right) const
; 464  : 		{	// test for iterator equality
; 465  : 		_Compat(_Right);
; 466  : 		return (this->_Myoff == _Right._Myoff);
; 467  : 		}
; 468  : 
; 469  : 	bool operator!=(const _Myiter& _Right) const
; 470  : 		{	// test for iterator inequality
; 471  : 		return (!(*this == _Right));
; 472  : 		}
; 473  : 
; 474  : 	bool operator<(const _Myiter& _Right) const
; 475  : 		{	// test if this < _Right
; 476  : 		_Compat(_Right);
; 477  : 		return (this->_Myoff < _Right._Myoff);
; 478  : 		}
; 479  : 
; 480  : 	bool operator>(const _Myiter& _Right) const
; 481  : 		{	// test if this > _Right
; 482  : 		return (_Right < *this);
; 483  : 		}
; 484  : 
; 485  : 	bool operator<=(const _Myiter& _Right) const
; 486  : 		{	// test if this <= _Right
; 487  : 		return (!(_Right < *this));
; 488  : 		}
; 489  : 
; 490  : 	bool operator>=(const _Myiter& _Right) const
; 491  : 		{	// test if this >= _Right
; 492  : 		return (!(*this < _Right));
; 493  : 		}
; 494  : 
; 495  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 496  : 	void _Compat(const _Myiter& _Right) const
; 497  : 		{	// test for compatible iterator pair
; 498  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 499  : 		if (_Mycont == 0
; 500  : 			|| _Mycont != _Right._Getcont())
; 501  : 			{	// report error
; 502  : 			_DEBUG_ERROR("deque iterators incompatible");
; 503  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 504  : 			}
; 505  : 		}
; 506  : 
; 507  : 	void _Setcont(const _Mydeque *_Pdeque)
; 508  : 		{	// set container pointer
; 509  : 		this->_Adopt(_Pdeque);
; 510  : 		}
; 511  : 
; 512  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 513  : 	void _Compat(const _Myiter& _Right) const
; 514  : 		{	// test for compatible iterator pair
; 515  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 516  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 517  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont == _Right._Getcont());
; 518  : 		}
; 519  : 
; 520  : 	void _Setcont(const _Mydeque *_Pdeque)
; 521  : 		{	// set container pointer
; 522  : 		this->_Adopt(_Pdeque);
; 523  : 		}
; 524  : 
; 525  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 526  : 	void _Compat(const _Myiter&) const
; 527  : 		{	// test for compatible iterator pair
; 528  : 		}
; 529  : 
; 530  : 	void _Setcont(const _Mydeque *_Pdeque)
; 531  : 		{	// set container pointer
; 532  : 		this->_Adopt(_Pdeque);
; 533  : 		}
; 534  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 535  : 
; 536  : 	size_type _Myoff;	// offset of element in deque
; 537  : 	};
; 538  : 
; 539  : template<class _Mydeque> inline
; 540  : 	typename _Deque_const_iterator<_Mydeque>::_Unchecked_type
; 541  : 		_Unchecked(_Deque_const_iterator<_Mydeque> _Iter)
; 542  : 	{	// convert to unchecked
; 543  : 	return (_Iter._Unchecked());
; 544  : 	}
; 545  : 
; 546  : template<class _Mydeque> inline
; 547  : 	_Deque_const_iterator<_Mydeque>&
; 548  : 		_Rechecked(_Deque_const_iterator<_Mydeque>& _Iter,
; 549  : 			typename _Deque_const_iterator<_Mydeque>
; 550  : 				::_Unchecked_type _Right)
; 551  : 	{	// convert to checked
; 552  : 	return (_Iter._Rechecked(_Right));
; 553  : 	}
; 554  : 
; 555  : template<class _Mydeque> inline
; 556  : 	_Deque_const_iterator<_Mydeque> operator+(
; 557  : 		typename _Deque_const_iterator<_Mydeque>::difference_type _Off,
; 558  : 		_Deque_const_iterator<_Mydeque> _Next)
; 559  : 	{	// add offset to iterator
; 560  : 	return (_Next += _Off);
; 561  : 	}
; 562  : 
; 563  : 		// TEMPLATE CLASS _Deque_iterator
; 564  : template<class _Mydeque>
; 565  : 	class _Deque_iterator
; 566  : 		: public _Deque_const_iterator<_Mydeque>
; 567  : 		{	// iterator for mutable deque
; 568  : public:
; 569  : 	typedef _Deque_iterator<_Mydeque> _Myiter;
; 570  : 	typedef _Deque_const_iterator<_Mydeque> _Mybase;
; 571  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Deque_unchecked_type;
; 572  : 	typedef random_access_iterator_tag iterator_category;
; 573  : 
; 574  : 	typedef typename _Mydeque::value_type value_type;
; 575  : 	typedef typename _Mydeque::size_type size_type;
; 576  : 	typedef typename _Mydeque::difference_type difference_type;
; 577  : 	typedef typename _Mydeque::pointer pointer;
; 578  : 	typedef typename _Mydeque::reference reference;
; 579  : 
; 580  : 	_Deque_iterator()
; 581  : 		{	// construct with null deque pointer
; 582  : 		}
; 583  : 
; 584  : 	_Deque_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 585  : 		: _Mybase(_Off, _Pdeque)
; 586  : 		{	// construct with offset _Off in *_Pdeque
; 587  : 		}
; 588  : 
; 589  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Unchecked_type;
; 590  : 
; 591  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 592  : 		{	// reset from unchecked iterator
; 593  : 		this->_Myoff = _Right._Myoff;
; 594  : 		return (*this);
; 595  : 		}
; 596  : 
; 597  : 	_Unchecked_type _Unchecked() const
; 598  : 		{	// make an unchecked iterator
; 599  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));
; 600  : 		}
; 601  : 
; 602  : 	reference operator*() const
; 603  : 		{	// return designated object
; 604  : 		return ((reference)**(_Mybase *)this);
; 605  : 		}
; 606  : 
; 607  : 	pointer operator->() const
; 608  : 		{	// return pointer to class object
; 609  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 610  : 		}
; 611  : 
; 612  : 	_Myiter& operator++()
; 613  : 		{	// preincrement
; 614  : 		++*(_Mybase *)this;
; 615  : 		return (*this);
; 616  : 		}
; 617  : 
; 618  : 	_Myiter operator++(int)
; 619  : 		{	// postincrement
; 620  : 		_Myiter _Tmp = *this;
; 621  : 		++*this;
; 622  : 		return (_Tmp);
; 623  : 		}
; 624  : 
; 625  : 	_Myiter& operator--()
; 626  : 		{	// predecrement
; 627  : 		--*(_Mybase *)this;
; 628  : 		return (*this);
; 629  : 		}
; 630  : 
; 631  : 	_Myiter operator--(int)
; 632  : 		{	// postdecrement
; 633  : 		_Myiter _Tmp = *this;
; 634  : 		--*this;
; 635  : 		return (_Tmp);
; 636  : 		}
; 637  : 
; 638  : 	_Myiter& operator+=(difference_type _Off)
; 639  : 		{	// increment by integer
; 640  : 		this->_Myoff += _Off;
; 641  : 		return (*this);
; 642  : 		}
; 643  : 
; 644  : 	_Myiter operator+(difference_type _Off) const
; 645  : 		{	// return this + integer
; 646  : 		_Myiter _Tmp = *this;
; 647  : 		return (_Tmp += _Off);
; 648  : 		}
; 649  : 
; 650  : 	_Myiter& operator-=(difference_type _Off)
; 651  : 		{	// decrement by integer
; 652  : 		return (*this += -_Off);
; 653  : 		}
; 654  : 
; 655  : 	_Myiter operator-(difference_type _Off) const
; 656  : 		{	// return this - integer
; 657  : 		_Myiter _Tmp = *this;
; 658  : 		return (_Tmp -= _Off);
; 659  : 		}
; 660  : 
; 661  : 	difference_type operator-(const _Mybase& _Right) const
; 662  : 		{	// return difference of iterators
; 663  : 		return (*(_Mybase *)this - _Right);
; 664  : 		}
; 665  : 
; 666  : 	reference operator[](difference_type _Off) const
; 667  : 		{	// subscript
; 668  : 		return (*(*this + _Off));
; 669  : 		}
; 670  : 	};
; 671  : 
; 672  : template<class _Mydeque> inline
; 673  : 	typename _Deque_iterator<_Mydeque>::_Unchecked_type
; 674  : 		_Unchecked(_Deque_iterator<_Mydeque> _Iter)
; 675  : 	{	// convert to unchecked
; 676  : 	return (_Iter._Unchecked());
; 677  : 	}
; 678  : 
; 679  : template<class _Mydeque> inline
; 680  : 	_Deque_iterator<_Mydeque>&
; 681  : 		_Rechecked(_Deque_iterator<_Mydeque>& _Iter,
; 682  : 			typename _Deque_iterator<_Mydeque>
; 683  : 				::_Unchecked_type _Right)
; 684  : 	{	// convert to checked
; 685  : 	return (_Iter._Rechecked(_Right));
; 686  : 	}
; 687  : 
; 688  : template<class _Mydeque> inline
; 689  : 	_Deque_iterator<_Mydeque> operator+(
; 690  : 		typename _Deque_iterator<_Mydeque>::difference_type _Off,
; 691  : 		_Deque_iterator<_Mydeque> _Next)
; 692  : 	{	// add offset to iterator
; 693  : 	return (_Next += _Off);
; 694  : 	}
; 695  : 
; 696  : 		// deque TYPE WRAPPERS
; 697  : template<class _Value_type,
; 698  : 	class _Size_type,
; 699  : 	class _Difference_type,
; 700  : 	class _Pointer,
; 701  : 	class _Const_pointer,
; 702  : 	class _Reference,
; 703  : 	class _Const_reference,
; 704  : 	class _Mapptr_type>
; 705  : 	struct _Deque_iter_types
; 706  : 	{	// wraps types needed by iterators
; 707  : 	typedef _Value_type value_type;
; 708  : 	typedef _Size_type size_type;
; 709  : 	typedef _Difference_type difference_type;
; 710  : 	typedef _Pointer pointer;
; 711  : 	typedef _Const_pointer const_pointer;
; 712  : 	typedef _Reference reference;
; 713  : 	typedef _Const_reference const_reference;
; 714  : 	typedef _Mapptr_type _Mapptr;
; 715  : 	};
; 716  : 
; 717  : template<class _Ty>
; 718  : 	struct _Deque_simple_types
; 719  : 		: public _Simple_types<_Ty>
; 720  : 	{	// wraps types needed by iterators
; 721  : 	typedef _Ty **_Mapptr;
; 722  : 	};
; 723  : 
; 724  : template<class _Ty,
; 725  : 	class _Alloc0>
; 726  : 	struct _Deque_base_types
; 727  : 	{	// types needed for a container base
; 728  : 	typedef _Alloc0 _Alloc;
; 729  : 	typedef _Deque_base_types<_Ty, _Alloc> _Myt;
; 730  : 
; 731  :  #if _HAS_CPP0X
; 732  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 733  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 734  : 
; 735  :  #else /* _HAS_CPP0X */
; 736  : 	typedef typename _Alloc::template rebind<_Ty>::other _Alty;
; 737  :  #endif /* _HAS_CPP0X */
; 738  : 
; 739  : 	typedef typename _Alty::pointer _Tptr;
; 740  : 	typedef typename _Alty::template rebind<_Tptr>::other _Alpty;
; 741  : 	typedef typename _Alpty::pointer _Mapptr;
; 742  : 
; 743  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 744  : 		_Deque_simple_types<typename _Alty::value_type>,
; 745  : 		_Deque_iter_types<typename _Alty::value_type,
; 746  : 			typename _Alty::size_type,
; 747  : 			typename _Alty::difference_type,
; 748  : 			typename _Alty::pointer,
; 749  : 			typename _Alty::const_pointer,
; 750  : 			typename _Alty::reference,
; 751  : 			typename _Alty::const_reference,
; 752  : 			_Mapptr> >::type
; 753  : 		_Val_types;
; 754  : 	};
; 755  : 
; 756  : 		// TEMPLATE CLASS _Deque_val
; 757  : template<class _Val_types>
; 758  : 	class _Deque_val
; 759  : 		: public _Container_base12
; 760  : 	{	// base class for deque to hold data
; 761  : public:
; 762  : 	typedef _Deque_val<_Val_types> _Myt;
; 763  : 
; 764  : 	typedef typename _Val_types::value_type value_type;
; 765  : 	typedef typename _Val_types::size_type size_type;
; 766  : 	typedef typename _Val_types::difference_type difference_type;
; 767  : 	typedef typename _Val_types::pointer pointer;
; 768  : 	typedef typename _Val_types::const_pointer const_pointer;
; 769  : 	typedef typename _Val_types::reference reference;
; 770  : 	typedef typename _Val_types::const_reference const_reference;
; 771  : 	typedef typename _Val_types::_Mapptr _Mapptr;
; 772  : 
; 773  : 	typedef _Deque_iterator<_Myt> iterator;
; 774  : 	typedef _Deque_const_iterator<_Myt> const_iterator;
; 775  : 
; 776  : 	_Deque_val()
; 777  : 		{	// initialize values
; 778  : 		_Map = _Mapptr();
; 779  : 		_Mapsize = 0;
; 780  : 		_Myoff = 0;
; 781  : 		_Mysize = 0;
; 782  : 		}
; 783  : 
; 784  : 	size_type _Getblock(size_type _Off) const
; 785  : 		{	// determine block from offset
; 786  : 			// NB: _Mapsize and _DEQUESIZ are guaranteed to be powers of 2
; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00008	4a		 dec	 edx
  00009	23 51 04	 and	 edx, DWORD PTR [ecx+4]

; 55   : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 56   : 		size_type _Off = _Myoff % _DEQUESIZ;
; 57   : 		return (_Mycont->_Map[_Block][_Off]);

  0000c	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 58   : 		}

  0000f	c3		 ret	 0
??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEABVMatrix@geom@@XZ ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??G?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-, COMDAT
; _this$ = ecx

; 115  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 116  : 		return (_Right._Myoff <= _Myoff
; 117  : 			? _Myoff - _Right._Myoff
; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00009	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000c	2b c2		 sub	 eax, edx

; 119  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??G?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??Y?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=, COMDAT
; _this$ = ecx

; 92   : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 93   : 		_Myoff += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	01 41 04	 add	 DWORD PTR [ecx+4], eax

; 94   : 		return (*this);

  00009	8b c1		 mov	 eax, ecx

; 95   : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??Y?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VVertexUVRGBA@gfxu@@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@@Z
_TEXT	SEGMENT
__Ptr$dead$ = 8						; size = 4
??$destroy@VVertexUVRGBA@gfxu@@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@@Z PROC ; std::allocator<gfxu::VertexUVRGBA>::destroy<gfxu::VertexUVRGBA>, COMDAT
; _this$dead$ = ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@VVertexUVRGBA@gfxu@@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@@Z ENDP ; std::allocator<gfxu::VertexUVRGBA>::destroy<gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@VVertexUVRGBA@gfxu@@@std@@YA$$QAVVertexUVRGBA@gfxu@@AAV12@@Z
_TEXT	SEGMENT
??$forward@VVertexUVRGBA@gfxu@@@std@@YA$$QAVVertexUVRGBA@gfxu@@AAV12@@Z PROC ; std::forward<gfxu::VertexUVRGBA>, COMDAT
; __Arg$ = ecx

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1777 : 	}

  00002	c3		 ret	 0
??$forward@VVertexUVRGBA@gfxu@@@std@@YA$$QAVVertexUVRGBA@gfxu@@AAV12@@Z ENDP ; std::forward<gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VVertexUVRGBA@gfxu@@V12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAAV?$allocator@VVertexUVRGBA@gfxu@@@1@PAVVertexUVRGBA@gfxu@@$$QAV34@@Z
_TEXT	SEGMENT
__V0$ = 8						; size = 4
??$construct@VVertexUVRGBA@gfxu@@V12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAAV?$allocator@VVertexUVRGBA@gfxu@@@1@PAVVertexUVRGBA@gfxu@@$$QAV34@@Z PROC ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00003	85 d2		 test	 edx, edx
  00005	74 3b		 je	 SHORT $LN7@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __V0$[ebp]
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	89 02		 mov	 DWORD PTR [edx], eax
  0000e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00011	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00014	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00017	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0001d	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00020	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00023	89 42 10	 mov	 DWORD PTR [edx+16], eax
  00026	0f b6 41 14	 movzx	 eax, BYTE PTR [ecx+20]
  0002a	88 42 14	 mov	 BYTE PTR [edx+20], al
  0002d	0f b6 41 15	 movzx	 eax, BYTE PTR [ecx+21]
  00031	88 42 15	 mov	 BYTE PTR [edx+21], al
  00034	0f b6 41 16	 movzx	 eax, BYTE PTR [ecx+22]
  00038	88 42 16	 mov	 BYTE PTR [edx+22], al
  0003b	0f b6 41 17	 movzx	 eax, BYTE PTR [ecx+23]
  0003f	88 42 17	 mov	 BYTE PTR [edx+23], al
$LN7@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??$construct@VVertexUVRGBA@gfxu@@V12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAAV?$allocator@VVertexUVRGBA@gfxu@@@1@PAVVertexUVRGBA@gfxu@@$$QAV34@@Z ENDP ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??$swap@VMatrix@geom@@@std@@YAXAAVMatrix@geom@@0@Z
_TEXT	SEGMENT
__Tmp$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
??$swap@VMatrix@geom@@@std@@YAXAAVMatrix@geom@@0@Z PROC	; std::swap<geom::Matrix>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 46   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b c1		 mov	 eax, ecx
  00014	57		 push	 edi

; 47   : 	_Ty _Tmp = _Move(_Left);

  00015	8b f0		 mov	 esi, eax
  00017	8b da		 mov	 ebx, edx
  00019	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0001e	8d 7d b8	 lea	 edi, DWORD PTR __Tmp$[ebp]
  00021	f3 a5		 rep movsd

; 48   : 	_Left = _Move(_Right);

  00023	53		 push	 ebx
  00024	8b c8		 mov	 ecx, eax
  00026	e8 00 00 00 00	 call	 ??4Matrix@geom@@QAEAAV01@ABV01@@Z ; geom::Matrix::operator=

; 49   : 	_Right = _Move(_Tmp);

  0002b	8d 45 b8	 lea	 eax, DWORD PTR __Tmp$[ebp]
  0002e	50		 push	 eax
  0002f	8b cb		 mov	 ecx, ebx
  00031	e8 00 00 00 00	 call	 ??4Matrix@geom@@QAEAAV01@ABV01@@Z ; geom::Matrix::operator=

; 50   : 	}

  00036	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	33 cd		 xor	 ecx, ebp
  0003d	5b		 pop	 ebx
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??$swap@VMatrix@geom@@@std@@YAXAAVMatrix@geom@@0@Z ENDP	; std::swap<geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VVertexUVRGBA@gfxu@@V12@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@$$QAV23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@VVertexUVRGBA@gfxu@@V12@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@$$QAV23@@Z PROC ; std::allocator<gfxu::VertexUVRGBA>::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>, COMDAT
; _this$dead$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 3b		 je	 SHORT $LN3@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __V0$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00017	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001a	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001d	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00020	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00023	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00026	89 42 10	 mov	 DWORD PTR [edx+16], eax
  00029	0f b6 41 14	 movzx	 eax, BYTE PTR [ecx+20]
  0002d	88 42 14	 mov	 BYTE PTR [edx+20], al
  00030	0f b6 41 15	 movzx	 eax, BYTE PTR [ecx+21]
  00034	88 42 15	 mov	 BYTE PTR [edx+21], al
  00037	0f b6 41 16	 movzx	 eax, BYTE PTR [ecx+22]
  0003b	88 42 16	 mov	 BYTE PTR [edx+22], al
  0003e	0f b6 41 17	 movzx	 eax, BYTE PTR [ecx+23]
  00042	88 42 17	 mov	 BYTE PTR [edx+23], al
$LN3@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
??$construct@VVertexUVRGBA@gfxu@@V12@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QAEXPAVVertexUVRGBA@gfxu@@$$QAV23@@Z ENDP ; std::allocator<gfxu::VertexUVRGBA>::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$_Move@AAVMatrix@geom@@@std@@YA$$QAVMatrix@geom@@AAV12@@Z
_TEXT	SEGMENT
??$_Move@AAVMatrix@geom@@@std@@YA$$QAVMatrix@geom@@AAV12@@Z PROC ; std::_Move<geom::Matrix &>, COMDAT
; __Arg$ = ecx

; 1799 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1800 : 	}

  00002	c3		 ret	 0
??$_Move@AAVMatrix@geom@@@std@@YA$$QAVMatrix@geom@@AAV12@@Z ENDP ; std::_Move<geom::Matrix &>
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ
_TEXT	SEGMENT
?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ PROC ; std::basic_istream<char,std::char_traits<char> >::_Add_vtordisp1, COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	83 e9 58	 sub	 ecx, 88			; 00000058H
  00006	e9 00 00 00 00	 jmp	 ?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_istream<char,std::char_traits<char> >::_Add_vtordisp1
?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Add_vtordisp1
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEXXZ
_TEXT	SEGMENT
?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEXXZ PROC ; std::basic_istream<char,std::char_traits<char> >::_Add_vtordisp1, COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_istream<char,std::char_traits<char> >::_Add_vtordisp1
?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEXXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Add_vtordisp1
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
END
