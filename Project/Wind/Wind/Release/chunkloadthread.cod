; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

	TITLE	C:\Users\Glenn\Documents\GitHub\Wind\Project\Wind\Wind\chunkloadthread.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?loaderThread@@3HA				; loaderThread
EXTRN	_atexit:PROC
?loaderThread@@3HA DD 01H DUP (?)			; loaderThread
_BSS	ENDS
PUBLIC	?empty@?$queue@V?$shared_ptr@VChunkBase@@@std@@V?$deque@V?$shared_ptr@VChunkBase@@@std@@V?$allocator@V?$shared_ptr@VChunkBase@@@std@@@2@@2@@std@@QBE_NXZ ; std::queue<std::shared_ptr<ChunkBase>,std::deque<std::shared_ptr<ChunkBase>,std::allocator<std::shared_ptr<ChunkBase> > > >::empty
PUBLIC	?requestChunkLoad@@YAXV?$shared_ptr@VChunkBase@@@std@@@Z ; requestChunkLoad
PUBLIC	?tick@ChunkLoadThread@@EAE_NXZ			; ChunkLoadThread::tick
PUBLIC	?noise2@@3VNoiseGenerator2D@Noise@@A		; noise2
PUBLIC	?noise@@3VNoiseGenerator3D@Noise@@A		; noise
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

?noise2@@3VNoiseGenerator2D@Noise@@A DB 018H DUP (?)	; noise2
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

?noise@@3VNoiseGenerator3D@Noise@@A DB 018H DUP (?)	; noise
_BSS	ENDS
_noise$initializer$ DD FLAT:??__Enoise@@YAXXZ
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?tick@ChunkLoadThread@@EAE_NXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?tick@ChunkLoadThread@@EAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?tick@ChunkLoadThread@@EAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?tick@ChunkLoadThread@@EAE_NXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?tick@ChunkLoadThread@@EAE_NXZ$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?requestChunkLoad@@YAXV?$shared_ptr@VChunkBase@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?requestChunkLoad@@YAXV?$shared_ptr@VChunkBase@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?requestChunkLoad@@YAXV?$shared_ptr@VChunkBase@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?requestChunkLoad@@YAXV?$shared_ptr@VChunkBase@@@std@@@Z$0
_noise2$initializer$ DD FLAT:??__Enoise2@@YAXXZ
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
;	COMDAT ??__Enoise@@YAXXZ
text$yc	SEGMENT
??__Enoise@@YAXXZ PROC					; `dynamic initializer for 'noise'', COMDAT

; 5    : Noise::NoiseGenerator3D noise(4, 8, 2.5, 3);

  00000	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@40200000
  00008	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000b	e8 00 00 00 00	 call	 ??0NoiseGenerator3D@Noise@@QAE@HHMI@Z ; Noise::NoiseGenerator3D::NoiseGenerator3D
  00010	68 00 00 00 00	 push	 OFFSET ??__Fnoise@@YAXXZ ; `dynamic atexit destructor for 'noise''
  00015	e8 00 00 00 00	 call	 _atexit
  0001a	59		 pop	 ecx
  0001b	c3		 ret	 0
??__Enoise@@YAXXZ ENDP					; `dynamic initializer for 'noise''
text$yc	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
;	COMDAT ??__Fnoise@@YAXXZ
text$yd	SEGMENT
??__Fnoise@@YAXXZ PROC					; `dynamic atexit destructor for 'noise'', COMDAT

; 117  : 	delete[] noiseMap;

  00000	ff 35 14 00 00
	00		 push	 DWORD PTR ?noise@@3VNoiseGenerator3D@Noise@@A+20
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	c3		 ret	 0
??__Fnoise@@YAXXZ ENDP					; `dynamic atexit destructor for 'noise''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
;	COMDAT ??__Enoise2@@YAXXZ
text$yc	SEGMENT
??__Enoise2@@YAXXZ PROC					; `dynamic initializer for 'noise2'', COMDAT

; 6    : Noise::NoiseGenerator2D noise2(4, 8, 2.5, 2);

  00000	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@40200000
  00008	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000b	e8 00 00 00 00	 call	 ??0NoiseGenerator2D@Noise@@QAE@HHMI@Z ; Noise::NoiseGenerator2D::NoiseGenerator2D
  00010	68 00 00 00 00	 push	 OFFSET ??__Fnoise2@@YAXXZ ; `dynamic atexit destructor for 'noise2''
  00015	e8 00 00 00 00	 call	 _atexit
  0001a	59		 pop	 ecx
  0001b	c3		 ret	 0
??__Enoise2@@YAXXZ ENDP					; `dynamic initializer for 'noise2''
text$yc	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
;	COMDAT ??__Fnoise2@@YAXXZ
text$yd	SEGMENT
??__Fnoise2@@YAXXZ PROC					; `dynamic atexit destructor for 'noise2'', COMDAT

; 36   : 	delete[] noiseMap;

  00000	ff 35 14 00 00
	00		 push	 DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+20
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	59		 pop	 ecx
  0000c	c3		 ret	 0
??__Fnoise2@@YAXXZ ENDP					; `dynamic atexit destructor for 'noise2''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\queue
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\queue
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\queue
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\world.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\memory
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\memory
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\world.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\world.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\world.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\memory
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\memory
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\memory
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\memory
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
;	COMDAT ?tick@ChunkLoadThread@@EAE_NXZ
_TEXT	SEGMENT
_i$1$ = -64						; size = 4
_k$1$ = -64						; size = 4
_j$1$ = -60						; size = 4
_i$1$ = -60						; size = 4
tv905 = -56						; size = 4
$T2 = -56						; size = 4
_k$1$ = -56						; size = 4
$T3 = -52						; size = 4
_y$1$ = -52						; size = 4
_n1$1$ = -48						; size = 4
_chunk$ = -44						; size = 8
_c$4 = -36						; size = 8
$T5 = -28						; size = 12
__$EHRec$ = -12						; size = 12
?tick@ChunkLoadThread@@EAE_NXZ PROC			; ChunkLoadThread::tick, COMDAT
; _this$ = ecx

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?tick@ChunkLoadThread@@EAE_NXZ
  0000d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00013	50		 push	 eax
  00014	83 ec 38	 sub	 esp, 56			; 00000038H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c4		 xor	 eax, esp
  00021	50		 push	 eax
  00022	8d 44 24 48	 lea	 eax, DWORD PTR __$EHRec$[esp+84]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1382 : 		return (this->_Mysize == 0);

  0002c	83 b9 30 04 00
	00 00		 cmp	 DWORD PTR [ecx+1072], 0
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

; 10   : 	if(ChunkLoadThread::loadQueue.empty())

  00033	0f 84 6e 03 00
	00		 je	 $LN217@tick
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\queue

; 135  : 		return (c.front());

  00039	8d b9 20 04 00
	00		 lea	 edi, DWORD PTR [ecx+1056]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1426 : 		return (*begin());

  0003f	8d 44 24 38	 lea	 eax, DWORD PTR $T5[esp+84]
  00043	50		 push	 eax
  00044	8b cf		 mov	 ecx, edi
  00046	e8 00 00 00 00	 call	 ?begin@?$deque@V?$shared_ptr@VChunkBase@@@std@@V?$allocator@V?$shared_ptr@VChunkBase@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@V?$shared_ptr@VChunkBase@@@std@@@std@@@std@@@2@XZ ; std::deque<std::shared_ptr<ChunkBase>,std::allocator<std::shared_ptr<ChunkBase> > >::begin
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	85 c9		 test	 ecx, ecx
  0004f	74 02		 je	 SHORT $LN51@tick
$LN50@tick:
  00051	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN51@tick:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00053	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00056	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00059	8b c6		 mov	 eax, esi
  0005b	d1 e8		 shr	 eax, 1
  0005d	4a		 dec	 edx
  0005e	23 d0		 and	 edx, eax

; 345  : 		return (_Mycont->_Map[_Block][_Off]);

  00060	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00063	83 e6 01	 and	 esi, 1
  00066	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

; 15   : 	std::shared_ptr<ChunkBase> chunk = ChunkLoadThread::loadQueue.front();

  00069	8d 4c 24 28	 lea	 ecx, DWORD PTR _chunk$[esp+84]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 345  : 		return (_Mycont->_Map[_Block][_Off]);

  0006d	8d 04 f0	 lea	 eax, DWORD PTR [eax+esi*8]
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

; 15   : 	std::shared_ptr<ChunkBase> chunk = ChunkLoadThread::loadQueue.front();

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??0?$shared_ptr@VChunkBase@@@std@@QAE@ABV01@@Z ; std::shared_ptr<ChunkBase>::shared_ptr<ChunkBase>
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\queue

; 160  : 		c.pop_front();

  00076	8b cf		 mov	 ecx, edi
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

; 15   : 	std::shared_ptr<ChunkBase> chunk = ChunkLoadThread::loadQueue.front();

  00078	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\queue

; 160  : 		c.pop_front();

  00080	e8 00 00 00 00	 call	 ?pop_front@?$deque@V?$shared_ptr@VChunkBase@@@std@@V?$allocator@V?$shared_ptr@VChunkBase@@@std@@@2@@std@@QAEXXZ ; std::deque<std::shared_ptr<ChunkBase>,std::allocator<std::shared_ptr<ChunkBase> > >::pop_front
  00085	8b 7c 24 28	 mov	 edi, DWORD PTR _chunk$[esp+84]
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

; 18   : 	for(unsigned int i = 0; i < 16; i++)

  00089	33 c9		 xor	 ecx, ecx
  0008b	89 4c 24 18	 mov	 DWORD PTR _i$1$[esp+84], ecx
  0008f	90		 npad	 1
$LL28@tick:

; 19   : 	{
; 20   : 		int x = i + chunk->pos.x * 16;

  00090	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00093	c1 e0 04	 shl	 eax, 4
  00096	03 c1		 add	 eax, ecx
  00098	66 0f 6e c8	 movd	 xmm1, eax
  0009c	0f 5b c9	 cvtdq2ps xmm1, xmm1

; 21   : 		for(unsigned int k = 0; k < 16; k++)

  0009f	33 c9		 xor	 ecx, ecx
  000a1	89 4c 24 14	 mov	 DWORD PTR _k$1$[esp+84], ecx
  000a5	f3 0f 11 4c 24
	1c		 movss	 DWORD PTR tv905[esp+84], xmm1
  000ab	eb 03 8d 49 00	 npad	 5
$LL25@tick:

; 23   : 			int z = k + chunk->pos.z * 16;

  000b0	8b 77 14	 mov	 esi, DWORD PTR [edi+20]
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp

; 41   : 	return getNoise(x, y, smoothness);

  000b3	f3 0f 10 1d 0c
	00 00 00	 movss	 xmm3, DWORD PTR ?noise2@@3VNoiseGenerator2D@Noise@@A+12
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

; 23   : 			int z = k + chunk->pos.z * 16;

  000bb	c1 e6 04	 shl	 esi, 4
  000be	03 f1		 add	 esi, ecx
  000c0	66 0f 6e c6	 movd	 xmm0, esi

; 24   : 			float n1 = 2.0f + noise2.getNoise(x, z);

  000c4	0f 5b c0	 cvtdq2ps xmm0, xmm0
; File c:\users\glenn\documents\github\wind\project\wind\wind\noise.cpp

; 41   : 	return getNoise(x, y, smoothness);

  000c7	0f 28 d0	 movaps	 xmm2, xmm0
  000ca	e8 00 00 00 00	 call	 ?getNoise@NoiseGenerator2D@Noise@@QAEMMMM@Z ; Noise::NoiseGenerator2D::getNoise
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

; 24   : 			float n1 = 2.0f + noise2.getNoise(x, z);

  000cf	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40000000

; 25   : 			for(unsigned int j = 0; j < 16; j++)

  000d7	33 db		 xor	 ebx, ebx
  000d9	f3 0f 11 44 24
	24		 movss	 DWORD PTR _n1$1$[esp+84], xmm0
  000df	90		 npad	 1
$LL22@tick:

; 26   : 			{
; 27   : 				int y = j + chunk->pos.y * 16;

  000e0	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  000e3	c1 e0 04	 shl	 eax, 4
  000e6	03 c3		 add	 eax, ebx
  000e8	89 44 24 20	 mov	 DWORD PTR _y$1$[esp+84], eax

; 28   : 				if(y < -32)

  000ec	83 f8 e0	 cmp	 eax, -32		; ffffffe0H
  000ef	7d 04		 jge	 SHORT $LN19@tick

; 29   : 				{
; 30   : 					chunk->setBlockRaw(i, j, k, 1);

  000f1	6a 01		 push	 1
  000f3	eb 52		 jmp	 SHORT $LN244@tick
$LN19@tick:

; 31   : 				}
; 32   : 				else if(y >= 64)

  000f5	83 f8 40	 cmp	 eax, 64			; 00000040H
  000f8	7d 4b		 jge	 SHORT $LN13@tick

; 33   : 				{
; 34   : 					chunk->setBlockRaw(i, j, k, 0);
; 35   : 				}
; 36   : 				else
; 37   : 				{
; 38   : 					float n2 = noise.getNoise(x, y * 2.0, z, n1);

  000fa	f3 0f 10 4c 24
	1c		 movss	 xmm1, DWORD PTR tv905[esp+84]
  00100	51		 push	 ecx
  00101	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00106	66 0f 6e c0	 movd	 xmm0, eax
  0010a	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0010e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00116	66 0f 5a d0	 cvtpd2ps xmm2, xmm0
  0011a	66 0f 6e c6	 movd	 xmm0, esi
  0011e	0f 5b d8	 cvtdq2ps xmm3, xmm0
  00121	e8 00 00 00 00	 call	 ?getNoise@NoiseGenerator3D@Noise@@QAEMMMMM@Z ; Noise::NoiseGenerator3D::getNoise

; 39   : 					if((y + 32) / 96.0f < n2)

  00126	8b 4c 24 20	 mov	 ecx, DWORD PTR _y$1$[esp+84]
  0012a	8d 41 20	 lea	 eax, DWORD PTR [ecx+32]
  0012d	66 0f 6e c8	 movd	 xmm1, eax
  00131	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00134	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c00000
  0013c	0f 2f c1	 comiss	 xmm0, xmm1
  0013f	76 04		 jbe	 SHORT $LN13@tick

; 40   : 					{
; 41   : 						chunk->setBlockRaw(i, j, k, 1);

  00141	6a 01		 push	 1

; 42   : 					}
; 43   : 					else

  00143	eb 02		 jmp	 SHORT $LN244@tick
$LN13@tick:

; 44   : 					{
; 45   : 						if(y < 0)
; 46   : 						{
; 47   : 							chunk->setBlockRaw(i, j, k, 0);
; 48   : 						}
; 49   : 						else
; 50   : 						{
; 51   : 							chunk->setBlockRaw(i, j, k, 0);

  00145	6a 00		 push	 0
$LN244@tick:
  00147	ff 74 24 18	 push	 DWORD PTR _k$1$[esp+88]
  0014b	8b 07		 mov	 eax, DWORD PTR [edi]
  0014d	53		 push	 ebx
  0014e	ff 74 24 24	 push	 DWORD PTR _i$1$[esp+96]
  00152	8b cf		 mov	 ecx, edi
  00154	ff 50 08	 call	 DWORD PTR [eax+8]
  00157	f3 0f 10 44 24
	24		 movss	 xmm0, DWORD PTR _n1$1$[esp+84]
  0015d	43		 inc	 ebx
  0015e	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00161	0f 82 79 ff ff
	ff		 jb	 $LL22@tick

; 21   : 		for(unsigned int k = 0; k < 16; k++)

  00167	8b 4c 24 14	 mov	 ecx, DWORD PTR _k$1$[esp+84]
  0016b	f3 0f 10 4c 24
	1c		 movss	 xmm1, DWORD PTR tv905[esp+84]
  00171	41		 inc	 ecx
  00172	89 4c 24 14	 mov	 DWORD PTR _k$1$[esp+84], ecx
  00176	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00179	0f 82 31 ff ff
	ff		 jb	 $LL25@tick

; 18   : 	for(unsigned int i = 0; i < 16; i++)

  0017f	8b 4c 24 18	 mov	 ecx, DWORD PTR _i$1$[esp+84]
  00183	41		 inc	 ecx
  00184	89 4c 24 18	 mov	 DWORD PTR _i$1$[esp+84], ecx
  00188	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0018b	0f 82 ff fe ff
	ff		 jb	 $LL28@tick
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex

; 43   : 		_Mtx_lockX(&_Mtx);

  00191	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  00194	56		 push	 esi
  00195	e8 00 00 00 00	 call	 __Mtx_lock
  0019a	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  0019d	85 c0		 test	 eax, eax
  0019f	74 09		 je	 SHORT $LN98@tick

; 33   : 		_Throw_C_error(_Res);

  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  001a7	83 c4 04	 add	 esp, 4
$LN98@tick:

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  001aa	56		 push	 esi
; File c:\users\glenn\documents\github\wind\project\wind\wind\world.cpp

; 85   : 	renderUpdateNeeded = flag;

  001ab	66 c7 47 04 01
	01		 mov	 WORD PTR [edi+4], 257	; 00000101H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  001b1	e8 00 00 00 00	 call	 __Mtx_unlock
  001b6	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  001b9	85 c0		 test	 eax, eax
  001bb	74 09		 je	 SHORT $LN121@tick

; 33   : 		_Throw_C_error(_Res);

  001bd	50		 push	 eax
  001be	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  001c3	83 c4 04	 add	 esp, 4
$LN121@tick:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\memory

; 407  : 		if (_Other_rep)

  001c6	8b 44 24 2c	 mov	 eax, DWORD PTR _chunk$[esp+88]
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

; 63   : 	requestChunkDraw(chunk);

  001ca	83 ec 08	 sub	 esp, 8
  001cd	8b d4		 mov	 edx, esp
  001cf	89 54 24 24	 mov	 DWORD PTR $T2[esp+92], edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\memory

; 282  : 		{	// construct

  001d3	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  001d9	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 407  : 		if (_Other_rep)

  001e0	85 c0		 test	 eax, eax
  001e2	74 0c		 je	 SHORT $LN133@tick

; 108  : 		_MT_INCR(_Ignored, _Uses);

  001e4	83 c0 04	 add	 eax, 4
  001e7	b9 01 00 00 00	 mov	 ecx, 1
  001ec	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
$LN133@tick:

; 408  : 			_Other_rep->_Incref();
; 409  : 		_Reset0(_Other_ptr, _Other_rep);
; 410  : 		}
; 411  : 
; 412  : 	void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep, bool _Throw)
; 413  : 		{	// take _Other_ptr through _Other_rep from weak_ptr if not expired
; 414  : 			// otherwise, leave in default state if !_Throw,
; 415  : 			// otherwise throw exception
; 416  : 		if (_Other_rep && _Other_rep->_Incref_nz())
; 417  : 			_Reset0(_Other_ptr, _Other_rep);
; 418  : 		else if (_Throw)
; 419  : 			_THROW_NCEE(bad_weak_ptr, 0);
; 420  : 		}
; 421  : 
; 422  : 	void _Reset0(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
; 423  : 		{	// release resource and take new resource
; 424  : 		if (_Rep != 0)

  001f0	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  001f3	83 cb ff	 or	 ebx, -1
  001f6	85 f6		 test	 esi, esi
  001f8	74 27		 je	 SHORT $LN141@tick

; 118  : 		if (_MT_DECR(_Ignored, _Uses) == 0)

  001fa	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  001fd	8b cb		 mov	 ecx, ebx
  001ff	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  00203	75 1c		 jne	 SHORT $LN141@tick

; 119  : 			{	// destroy managed resource, decrement weak reference count
; 120  : 			_Destroy();

  00205	8b 06		 mov	 eax, DWORD PTR [esi]
  00207	8b ce		 mov	 ecx, esi
  00209	ff 10		 call	 DWORD PTR [eax]

; 121  : 			_Decwref();
; 122  : 			}
; 123  : 		}
; 124  : 
; 125  : 	void _Decwref()
; 126  : 		{	// decrement weak reference count
; 127  : 		if (_MT_DECR(_Ignored, _Weaks) == 0)

  0020b	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0020e	8b d3		 mov	 edx, ebx
  00210	f0 0f c1 10	 lock	  xadd	 DWORD PTR [eax], edx
  00214	75 07		 jne	 SHORT $LN242@tick

; 128  : 			_Delete_this();

  00216	8b 06		 mov	 eax, DWORD PTR [esi]
  00218	8b ce		 mov	 ecx, esi
  0021a	ff 50 04	 call	 DWORD PTR [eax+4]
$LN242@tick:
  0021d	8b 54 24 24	 mov	 edx, DWORD PTR $T2[esp+92]
$LN141@tick:

; 425  : 			_Rep->_Decref();
; 426  : 		_Rep = _Other_rep;

  00221	8b 44 24 34	 mov	 eax, DWORD PTR _chunk$[esp+96]
  00225	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 427  : 		_Ptr = _Other_ptr;

  00228	89 3a		 mov	 DWORD PTR [edx], edi
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

; 63   : 	requestChunkDraw(chunk);

  0022a	e8 00 00 00 00	 call	 ?requestChunkDraw@@YAXV?$shared_ptr@VChunkBase@@@std@@@Z ; requestChunkDraw
  0022f	83 c4 08	 add	 esp, 8

; 64   : 		
; 65   : 	for(int i = -1; i <= 1; i++)

  00232	83 ca ff	 or	 edx, -1
  00235	89 54 24 14	 mov	 DWORD PTR _i$1$[esp+84], edx
  00239	8d a4 24 00 00
	00 00		 npad	 7
$LL11@tick:

; 66   : 	{
; 67   : 		for(int j = -1; j <= 1; j++)

  00240	83 c9 ff	 or	 ecx, -1
  00243	89 4c 24 18	 mov	 DWORD PTR _j$1$[esp+84], ecx
$LL8@tick:

; 69   : 			for(int k = -1; k <= 1; k++)

  00247	83 c8 ff	 or	 eax, -1
  0024a	89 44 24 1c	 mov	 DWORD PTR _k$1$[esp+84], eax
  0024e	8b ff		 npad	 2
$LL5@tick:

; 70   : 			{
; 71   : 				if(i | j | k)

  00250	0b c1		 or	 eax, ecx
  00252	0b c2		 or	 eax, edx
  00254	0f 84 ed 00 00
	00		 je	 $LN4@tick

; 72   : 				{
; 73   : 					std::shared_ptr<ChunkBase> c = GlobalThread::world.getChunk(i + chunk->pos.x, j + chunk->pos.y, k + chunk->pos.z);

  0025a	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0025d	03 44 24 1c	 add	 eax, DWORD PTR _k$1$[esp+84]
  00261	50		 push	 eax
  00262	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00265	03 c1		 add	 eax, ecx
  00267	50		 push	 eax
  00268	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0026b	03 c2		 add	 eax, edx
  0026d	50		 push	 eax
  0026e	8d 44 24 3c	 lea	 eax, DWORD PTR _c$4[esp+96]
  00272	50		 push	 eax
  00273	b9 00 00 00 00	 mov	 ecx, OFFSET ?world@GlobalThread@@3VWorld@@A ; GlobalThread::world
  00278	e8 00 00 00 00	 call	 ?getChunk@World@@QAE?AV?$shared_ptr@VChunkBase@@@std@@HHH@Z ; World::getChunk
  0027d	c6 44 24 50 01	 mov	 BYTE PTR __$EHRec$[esp+92], 1

; 74   : 					if(!c->isEmpty() && c->isLoaded() && !c->isRenderUpdateNeeded())

  00282	8b 5c 24 30	 mov	 ebx, DWORD PTR _c$4[esp+84]
  00286	8b cb		 mov	 ecx, ebx
  00288	8b 03		 mov	 eax, DWORD PTR [ebx]
  0028a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0028d	ff d0		 call	 eax
  0028f	8b 74 24 34	 mov	 esi, DWORD PTR _c$4[esp+88]
  00293	84 c0		 test	 al, al
  00295	75 79		 jne	 SHORT $LN1@tick
; File c:\users\glenn\documents\github\wind\project\wind\wind\world.cpp

; 65   : 	return loaded;

  00297	8a 43 05	 mov	 al, BYTE PTR [ebx+5]
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

; 74   : 					if(!c->isEmpty() && c->isLoaded() && !c->isRenderUpdateNeeded())

  0029a	84 c0		 test	 al, al
  0029c	74 72		 je	 SHORT $LN1@tick
; File c:\users\glenn\documents\github\wind\project\wind\wind\world.cpp

; 90   : 	return renderUpdateNeeded;

  0029e	8a 43 04	 mov	 al, BYTE PTR [ebx+4]
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

; 74   : 					if(!c->isEmpty() && c->isLoaded() && !c->isRenderUpdateNeeded())

  002a1	84 c0		 test	 al, al
  002a3	75 6b		 jne	 SHORT $LN1@tick

; 77   : 						requestLateChunkDraw(c);

  002a5	83 ec 08	 sub	 esp, 8
  002a8	8b d4		 mov	 edx, esp
; File c:\users\glenn\documents\github\wind\project\wind\wind\world.cpp

; 85   : 	renderUpdateNeeded = flag;

  002aa	c6 43 04 01	 mov	 BYTE PTR [ebx+4], 1
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

; 77   : 						requestLateChunkDraw(c);

  002ae	89 54 24 28	 mov	 DWORD PTR $T3[esp+92], edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\memory

; 282  : 		{	// construct

  002b2	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  002b8	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 407  : 		if (_Other_rep)

  002bf	85 f6		 test	 esi, esi
  002c1	74 0c		 je	 SHORT $LN187@tick

; 108  : 		_MT_INCR(_Ignored, _Uses);

  002c3	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  002c6	b9 01 00 00 00	 mov	 ecx, 1
  002cb	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
$LN187@tick:

; 408  : 			_Other_rep->_Incref();
; 409  : 		_Reset0(_Other_ptr, _Other_rep);
; 410  : 		}
; 411  : 
; 412  : 	void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep, bool _Throw)
; 413  : 		{	// take _Other_ptr through _Other_rep from weak_ptr if not expired
; 414  : 			// otherwise, leave in default state if !_Throw,
; 415  : 			// otherwise throw exception
; 416  : 		if (_Other_rep && _Other_rep->_Incref_nz())
; 417  : 			_Reset0(_Other_ptr, _Other_rep);
; 418  : 		else if (_Throw)
; 419  : 			_THROW_NCEE(bad_weak_ptr, 0);
; 420  : 		}
; 421  : 
; 422  : 	void _Reset0(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
; 423  : 		{	// release resource and take new resource
; 424  : 		if (_Rep != 0)

  002cf	8b 5a 04	 mov	 ebx, DWORD PTR [edx+4]
  002d2	85 db		 test	 ebx, ebx
  002d4	74 29		 je	 SHORT $LN195@tick

; 118  : 		if (_MT_DECR(_Ignored, _Uses) == 0)

  002d6	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  002d9	83 c9 ff	 or	 ecx, -1
  002dc	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  002e0	75 1d		 jne	 SHORT $LN195@tick

; 119  : 			{	// destroy managed resource, decrement weak reference count
; 120  : 			_Destroy();

  002e2	8b 03		 mov	 eax, DWORD PTR [ebx]
  002e4	8b cb		 mov	 ecx, ebx
  002e6	ff 10		 call	 DWORD PTR [eax]

; 121  : 			_Decwref();
; 122  : 			}
; 123  : 		}
; 124  : 
; 125  : 	void _Decwref()
; 126  : 		{	// decrement weak reference count
; 127  : 		if (_MT_DECR(_Ignored, _Weaks) == 0)

  002e8	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  002eb	83 ca ff	 or	 edx, -1
  002ee	f0 0f c1 10	 lock	  xadd	 DWORD PTR [eax], edx
  002f2	75 07		 jne	 SHORT $LN238@tick

; 128  : 			_Delete_this();

  002f4	8b 03		 mov	 eax, DWORD PTR [ebx]
  002f6	8b cb		 mov	 ecx, ebx
  002f8	ff 50 04	 call	 DWORD PTR [eax+4]
$LN238@tick:
  002fb	8b 54 24 28	 mov	 edx, DWORD PTR $T3[esp+92]
$LN195@tick:

; 427  : 		_Ptr = _Other_ptr;

  002ff	8b 44 24 38	 mov	 eax, DWORD PTR _c$4[esp+92]
  00303	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00306	89 02		 mov	 DWORD PTR [edx], eax
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

; 77   : 						requestLateChunkDraw(c);

  00308	e8 00 00 00 00	 call	 ?requestLateChunkDraw@@YAXV?$shared_ptr@VChunkBase@@@std@@@Z ; requestLateChunkDraw
  0030d	83 c4 08	 add	 esp, 8
$LN1@tick:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\memory

; 118  : 		if (_MT_DECR(_Ignored, _Uses) == 0)

  00310	83 cb ff	 or	 ebx, -1
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

; 79   : 				}

  00313	c6 44 24 50 00	 mov	 BYTE PTR __$EHRec$[esp+92], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\memory

; 345  : 		if (_Rep != 0)

  00318	85 f6		 test	 esi, esi
  0031a	74 23		 je	 SHORT $LN241@tick

; 118  : 		if (_MT_DECR(_Ignored, _Uses) == 0)

  0031c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0031f	8b cb		 mov	 ecx, ebx
  00321	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  00325	75 18		 jne	 SHORT $LN241@tick

; 119  : 			{	// destroy managed resource, decrement weak reference count
; 120  : 			_Destroy();

  00327	8b 06		 mov	 eax, DWORD PTR [esi]
  00329	8b ce		 mov	 ecx, esi
  0032b	ff 10		 call	 DWORD PTR [eax]

; 121  : 			_Decwref();
; 122  : 			}
; 123  : 		}
; 124  : 
; 125  : 	void _Decwref()
; 126  : 		{	// decrement weak reference count
; 127  : 		if (_MT_DECR(_Ignored, _Weaks) == 0)

  0032d	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00330	8b d3		 mov	 edx, ebx
  00332	f0 0f c1 10	 lock	  xadd	 DWORD PTR [eax], edx
  00336	75 07		 jne	 SHORT $LN241@tick

; 128  : 			_Delete_this();

  00338	8b 06		 mov	 eax, DWORD PTR [esi]
  0033a	8b ce		 mov	 ecx, esi
  0033c	ff 50 04	 call	 DWORD PTR [eax+4]
$LN241@tick:
  0033f	8b 54 24 14	 mov	 edx, DWORD PTR _i$1$[esp+84]
  00343	8b 4c 24 18	 mov	 ecx, DWORD PTR _j$1$[esp+84]
$LN4@tick:
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

; 69   : 			for(int k = -1; k <= 1; k++)

  00347	8b 44 24 1c	 mov	 eax, DWORD PTR _k$1$[esp+84]
  0034b	40		 inc	 eax
  0034c	89 44 24 1c	 mov	 DWORD PTR _k$1$[esp+84], eax
  00350	83 f8 01	 cmp	 eax, 1
  00353	0f 8e f7 fe ff
	ff		 jle	 $LL5@tick

; 66   : 	{
; 67   : 		for(int j = -1; j <= 1; j++)

  00359	41		 inc	 ecx
  0035a	89 4c 24 18	 mov	 DWORD PTR _j$1$[esp+84], ecx
  0035e	83 f9 01	 cmp	 ecx, 1
  00361	0f 8e e0 fe ff
	ff		 jle	 $LL8@tick

; 64   : 		
; 65   : 	for(int i = -1; i <= 1; i++)

  00367	42		 inc	 edx
  00368	89 54 24 14	 mov	 DWORD PTR _i$1$[esp+84], edx
  0036c	83 fa 01	 cmp	 edx, 1
  0036f	0f 8e cb fe ff
	ff		 jle	 $LL11@tick

; 84   : 	return true;

  00375	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+92], -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\memory

; 345  : 		if (_Rep != 0)

  0037d	8b 74 24 2c	 mov	 esi, DWORD PTR _chunk$[esp+88]
  00381	85 f6		 test	 esi, esi
  00383	74 22		 je	 SHORT $LN217@tick

; 118  : 		if (_MT_DECR(_Ignored, _Uses) == 0)

  00385	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00388	8b cb		 mov	 ecx, ebx
  0038a	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  0038e	75 17		 jne	 SHORT $LN217@tick

; 119  : 			{	// destroy managed resource, decrement weak reference count
; 120  : 			_Destroy();

  00390	8b 06		 mov	 eax, DWORD PTR [esi]
  00392	8b ce		 mov	 ecx, esi
  00394	ff 10		 call	 DWORD PTR [eax]

; 121  : 			_Decwref();
; 122  : 			}
; 123  : 		}
; 124  : 
; 125  : 	void _Decwref()
; 126  : 		{	// decrement weak reference count
; 127  : 		if (_MT_DECR(_Ignored, _Weaks) == 0)

  00396	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00399	f0 0f c1 18	 lock	  xadd	 DWORD PTR [eax], ebx
  0039d	4b		 dec	 ebx
  0039e	75 07		 jne	 SHORT $LN217@tick

; 128  : 			_Delete_this();

  003a0	8b 06		 mov	 eax, DWORD PTR [esi]
  003a2	8b ce		 mov	 ecx, esi
  003a4	ff 50 04	 call	 DWORD PTR [eax+4]
$LN217@tick:
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

; 84   : 	return true;

  003a7	b0 01		 mov	 al, 1

; 85   : }

  003a9	8b 4c 24 48	 mov	 ecx, DWORD PTR __$EHRec$[esp+84]
  003ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003b4	59		 pop	 ecx
  003b5	5f		 pop	 edi
  003b6	5e		 pop	 esi
  003b7	5b		 pop	 ebx
  003b8	8b e5		 mov	 esp, ebp
  003ba	5d		 pop	 ebp
  003bb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?tick@ChunkLoadThread@@EAE_NXZ$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _chunk$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$shared_ptr@VChunkBase@@@std@@QAE@XZ ; std::shared_ptr<ChunkBase>::~shared_ptr<ChunkBase>
__unwindfunclet$?tick@ChunkLoadThread@@EAE_NXZ$2:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR _c$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$shared_ptr@VChunkBase@@@std@@QAE@XZ ; std::shared_ptr<ChunkBase>::~shared_ptr<ChunkBase>
__ehhandler$?tick@ChunkLoadThread@@EAE_NXZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 bc	 lea	 eax, DWORD PTR [edx-68]
  00017	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?tick@ChunkLoadThread@@EAE_NXZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?tick@ChunkLoadThread@@EAE_NXZ ENDP			; ChunkLoadThread::tick
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\queue
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\memory
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp
;	COMDAT ?requestChunkLoad@@YAXV?$shared_ptr@VChunkBase@@@std@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_chunk$ = 8						; size = 8
?requestChunkLoad@@YAXV?$shared_ptr@VChunkBase@@@std@@@Z PROC ; requestChunkLoad, COMDAT

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?requestChunkLoad@@YAXV?$shared_ptr@VChunkBase@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 89   : 	ChunkLoadThread* thread = &chunkLoadThreads[(loaderThread++) % LOAD_THREAD_AMOUNT];

  0002b	ff 05 00 00 00
	00		 inc	 DWORD PTR ?loaderThread@@3HA ; loaderThread
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  00031	68 34 04 00 00	 push	 OFFSET ?chunkLoadThreads@@3PAVChunkLoadThread@@A+1076
  00036	e8 00 00 00 00	 call	 __Mtx_lock
  0003b	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  0003e	85 c0		 test	 eax, eax
  00040	74 09		 je	 SHORT $LN8@requestChu

; 33   : 		_Throw_C_error(_Res);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  00048	83 c4 04	 add	 esp, 4
$LN8@requestChu:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\queue

; 155  : 		c.push_back(_Val);

  0004b	8d 45 08	 lea	 eax, DWORD PTR _chunk$[ebp]
  0004e	50		 push	 eax
  0004f	b9 20 04 00 00	 mov	 ecx, OFFSET ?chunkLoadThreads@@3PAVChunkLoadThread@@A+1056
  00054	e8 00 00 00 00	 call	 ?push_back@?$deque@V?$shared_ptr@VChunkBase@@@std@@V?$allocator@V?$shared_ptr@VChunkBase@@@std@@@2@@std@@QAEXABV?$shared_ptr@VChunkBase@@@2@@Z ; std::deque<std::shared_ptr<ChunkBase>,std::allocator<std::shared_ptr<ChunkBase> > >::push_back
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  00059	68 34 04 00 00	 push	 OFFSET ?chunkLoadThreads@@3PAVChunkLoadThread@@A+1076
  0005e	e8 00 00 00 00	 call	 __Mtx_unlock
  00063	83 c4 04	 add	 esp, 4

; 32   : 	if (_Res != _Thrd_success)

  00066	85 c0		 test	 eax, eax
  00068	74 09		 je	 SHORT $LN17@requestChu

; 33   : 		_Throw_C_error(_Res);

  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  00070	83 c4 04	 add	 esp, 4
$LN17@requestChu:
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

; 94   : }

  00073	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\memory

; 345  : 		if (_Rep != 0)

  0007a	8b 75 0c	 mov	 esi, DWORD PTR _chunk$[ebp+4]
  0007d	85 f6		 test	 esi, esi
  0007f	74 25		 je	 SHORT $LN28@requestChu

; 118  : 		if (_MT_DECR(_Ignored, _Uses) == 0)

  00081	83 cf ff	 or	 edi, -1
  00084	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00087	8b c7		 mov	 eax, edi
  00089	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax
  0008d	75 17		 jne	 SHORT $LN28@requestChu

; 119  : 			{	// destroy managed resource, decrement weak reference count
; 120  : 			_Destroy();

  0008f	8b 06		 mov	 eax, DWORD PTR [esi]
  00091	8b ce		 mov	 ecx, esi
  00093	ff 10		 call	 DWORD PTR [eax]

; 121  : 			_Decwref();
; 122  : 			}
; 123  : 		}
; 124  : 
; 125  : 	void _Decwref()
; 126  : 		{	// decrement weak reference count
; 127  : 		if (_MT_DECR(_Ignored, _Weaks) == 0)

  00095	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00098	f0 0f c1 38	 lock	  xadd	 DWORD PTR [eax], edi
  0009c	4f		 dec	 edi
  0009d	75 07		 jne	 SHORT $LN28@requestChu

; 128  : 			_Delete_this();

  0009f	8b 06		 mov	 eax, DWORD PTR [esi]
  000a1	8b ce		 mov	 ecx, esi
  000a3	ff 50 04	 call	 DWORD PTR [eax+4]
$LN28@requestChu:
; File c:\users\glenn\documents\github\wind\project\wind\wind\chunkloadthread.cpp

  000a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b0	59		 pop	 ecx
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?requestChunkLoad@@YAXV?$shared_ptr@VChunkBase@@@std@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _chunk$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$shared_ptr@VChunkBase@@@std@@QAE@XZ ; std::shared_ptr<ChunkBase>::~shared_ptr<ChunkBase>
__ehhandler$?requestChunkLoad@@YAXV?$shared_ptr@VChunkBase@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?requestChunkLoad@@YAXV?$shared_ptr@VChunkBase@@@std@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?requestChunkLoad@@YAXV?$shared_ptr@VChunkBase@@@std@@@Z ENDP ; requestChunkLoad
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\queue
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\queue
;	COMDAT ?empty@?$queue@V?$shared_ptr@VChunkBase@@@std@@V?$deque@V?$shared_ptr@VChunkBase@@@std@@V?$allocator@V?$shared_ptr@VChunkBase@@@std@@@2@@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$queue@V?$shared_ptr@VChunkBase@@@std@@V?$deque@V?$shared_ptr@VChunkBase@@@std@@V?$allocator@V?$shared_ptr@VChunkBase@@@std@@@2@@2@@std@@QBE_NXZ PROC ; std::queue<std::shared_ptr<ChunkBase>,std::deque<std::shared_ptr<ChunkBase>,std::allocator<std::shared_ptr<ChunkBase> > > >::empty, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1382 : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00005	0f 94 c0	 sete	 al
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\queue

; 126  : 		}

  00008	c3		 ret	 0
?empty@?$queue@V?$shared_ptr@VChunkBase@@@std@@V?$deque@V?$shared_ptr@VChunkBase@@@std@@V?$allocator@V?$shared_ptr@VChunkBase@@@std@@@2@@2@@std@@QBE_NXZ ENDP ; std::queue<std::shared_ptr<ChunkBase>,std::deque<std::shared_ptr<ChunkBase>,std::allocator<std::shared_ptr<ChunkBase> > > >::empty
_TEXT	ENDS
END
