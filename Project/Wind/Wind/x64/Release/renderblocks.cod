; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61030.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ; BlockRenderers::renderOrdinaryBlock
PUBLIC	?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ; BlockRenderers::renderFluidBlock
PUBLIC	?renderInvisibleBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ; BlockRenderers::renderInvisibleBlock
	ALIGN	4

_Tuple_alloc DB	01H DUP (?)
	ALIGN	4

ignore	DB	01H DUP (?)
	ALIGN	4

allocator_arg DB 01H DUP (?)
	ALIGN	4

piecewise_construct DB 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z DD imagerel $LN429
	DD	imagerel $LN429+8475
	DD	imagerel $unwind$?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z DD imagerel $LN105
	DD	imagerel $LN105+62
	DD	imagerel $unwind$?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z DD imagerel $LN105+62
	DD	imagerel $LN105+996
	DD	imagerel $chain$2$?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z DD imagerel $LN105+996
	DD	imagerel $LN105+1020
	DD	imagerel $chain$3$?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z DD 021H
	DD	imagerel $LN105
	DD	imagerel $LN105+62
	DD	imagerel $unwind$?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z DD 061721H
	DD	037817H
	DD	046812H
	DD	0c6405H
	DD	imagerel $LN105
	DD	imagerel $LN105+62
	DD	imagerel $unwind$?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z DD 081501H
	DD	0f7415H
	DD	0e5415H
	DD	0d3415H
	DD	0e0119215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z DD 0195a01H
	DD	05c85aH
	DD	06b854H
	DD	07a84eH
	DD	089848H
	DD	098831H
	DD	0a782cH
	DD	0b6828H
	DD	0203424H
	DD	0180124H
	DD	0e01bf01dH
	DD	0c017d019H
	DD	060147015H
	DD	05013H
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
;	COMDAT ?renderInvisibleBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
_TEXT	SEGMENT
world$ = 8
x$ = 16
y$ = 24
z$ = 32
block$ = 40
vStream$ = 48
?renderInvisibleBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z PROC ; BlockRenderers::renderInvisibleBlock, COMDAT

; 398  : 	return true;

  00000	b0 01		 mov	 al, 1

; 399  : }

  00002	c3		 ret	 0
?renderInvisibleBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ENDP ; BlockRenderers::renderInvisibleBlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
;	COMDAT ?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
_TEXT	SEGMENT
world$ = 96
x$ = 104
y$ = 112
z$ = 120
block$ = 128
vStream$ = 136
?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z PROC ; BlockRenderers::renderFluidBlock, COMDAT

; 402  : {

$LN105:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 403  : 	Block* b = world->getBlock(x, y + 1, z);

  00015	45 8d 70 01	 lea	 r14d, DWORD PTR [r8+1]
  00019	41 8b d9	 mov	 ebx, r9d
  0001c	8b fa		 mov	 edi, edx
  0001e	45 8b c6	 mov	 r8d, r14d
  00021	48 8b e9	 mov	 rbp, rcx
  00024	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock

; 404  : 	if(b != block)

  00029	48 3b 84 24 80
	00 00 00	 cmp	 rax, QWORD PTR block$[rsp]
  00031	0f 84 ad 03 00
	00		 je	 $LN103@renderFlui

; 407  : 		if(!b->solidFace(world, x, y + 1, z, Relatives::D))

  00037	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?D@Relatives@@3PEAVBlockFace@@EA ; Relatives::D
  0003e	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 156  : 	vertex.r = r;

  00043	48 8b b4 24 88
	00 00 00	 mov	 rsi, QWORD PTR vStream$[rsp]
  0004b	0f 29 74 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm6
  00050	0f 29 7c 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm7
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 407  : 		if(!b->solidFace(world, x, y + 1, z, Relatives::D))

  00055	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 156  : 	vertex.r = r;

  0005a	c7 46 40 10 40
	e0 7f		 mov	 DWORD PTR [rsi+64], 2145402896 ; 7fe04010H
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 407  : 		if(!b->solidFace(world, x, y + 1, z, Relatives::D))

  00061	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00064	45 8b ce	 mov	 r9d, r14d
  00067	44 8b c7	 mov	 r8d, edi
  0006a	48 8b d5	 mov	 rdx, rbp
  0006d	48 8b c8	 mov	 rcx, rax
  00070	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  00074	41 ff 52 08	 call	 QWORD PTR [r10+8]
  00078	33 ed		 xor	 ebp, ebp
  0007a	f3 0f 10 35 00
	00 00 00	 movss	 xmm6, DWORD PTR __real@3f800000
  00082	0f 57 ff	 xorps	 xmm7, xmm7
  00085	84 c0		 test	 al, al
  00087	0f 85 a4 01 00
	00		 jne	 $LN53@renderFlui
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 108  : 	vertex.x = x + translation.x;

  0008d	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [rsi+32]

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00092	48 8d 56 2c	 lea	 rdx, QWORD PTR [rsi+44]
  00096	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0009a	f3 0f 58 c7	 addss	 xmm0, xmm7

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  0009e	48 89 6e 38	 mov	 QWORD PTR [rsi+56], rbp

; 108  : 	vertex.x = x + translation.x;

  000a2	f3 0f 11 46 2c	 movss	 DWORD PTR [rsi+44], xmm0

; 109  : 	vertex.y = y + translation.y;

  000a7	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  000ac	f3 0f 58 c6	 addss	 xmm0, xmm6
  000b0	f3 0f 11 46 30	 movss	 DWORD PTR [rsi+48], xmm0

; 110  : 	vertex.z = z + translation.z;

  000b5	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  000ba	f3 0f 58 c7	 addss	 xmm0, xmm7
  000be	f3 0f 11 46 34	 movss	 DWORD PTR [rsi+52], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  000c3	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  000c8	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [rsi+32]

; 109  : 	vertex.y = y + translation.y;

  000cd	f3 0f 10 4e 24	 movss	 xmm1, DWORD PTR [rsi+36]

; 113  : 
; 114  : 	vs++;

  000d2	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 111  : 
; 112  : 	vertices.push_back(vertex);

  000d8	48 8d 56 2c	 lea	 rdx, QWORD PTR [rsi+44]
  000dc	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  000e0	f3 0f 58 c6	 addss	 xmm0, xmm6
  000e4	f3 0f 58 ce	 addss	 xmm1, xmm6

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  000e8	48 c7 46 38 00
	00 80 3f	 mov	 QWORD PTR [rsi+56], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  000f0	f3 0f 11 46 2c	 movss	 DWORD PTR [rsi+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  000f5	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  000fa	f3 0f 11 4e 30	 movss	 DWORD PTR [rsi+48], xmm1
  000ff	f3 0f 58 c7	 addss	 xmm0, xmm7
  00103	f3 0f 11 46 34	 movss	 DWORD PTR [rsi+52], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00108	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  0010d	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [rsi+32]

; 110  : 	vertex.z = z + translation.z;

  00112	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]

; 113  : 
; 114  : 	vs++;

  00117	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0011d	48 8d 56 2c	 lea	 rdx, QWORD PTR [rsi+44]
  00121	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00125	f3 0f 58 c7	 addss	 xmm0, xmm7
  00129	f3 0f 58 ce	 addss	 xmm1, xmm6

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  0012d	89 6e 38	 mov	 DWORD PTR [rsi+56], ebp

; 164  : 	vertex.v = v;

  00130	c7 46 3c 00 00
	80 3f		 mov	 DWORD PTR [rsi+60], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  00137	f3 0f 11 46 2c	 movss	 DWORD PTR [rsi+44], xmm0

; 109  : 	vertex.y = y + translation.y;

  0013c	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]

; 110  : 	vertex.z = z + translation.z;

  00141	f3 0f 11 4e 34	 movss	 DWORD PTR [rsi+52], xmm1
  00146	f3 0f 58 c6	 addss	 xmm0, xmm6
  0014a	f3 0f 11 46 30	 movss	 DWORD PTR [rsi+48], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0014f	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  00154	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [rsi+32]

; 109  : 	vertex.y = y + translation.y;

  00159	f3 0f 10 4e 24	 movss	 xmm1, DWORD PTR [rsi+36]

; 113  : 
; 114  : 	vs++;

  0015e	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00164	48 8d 56 2c	 lea	 rdx, QWORD PTR [rsi+44]
  00168	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0016c	f3 0f 58 c6	 addss	 xmm0, xmm6
  00170	f3 0f 58 ce	 addss	 xmm1, xmm6

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00174	48 c7 46 38 00
	00 80 3f	 mov	 QWORD PTR [rsi+56], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  0017c	f3 0f 11 46 2c	 movss	 DWORD PTR [rsi+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  00181	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  00186	f3 0f 11 4e 30	 movss	 DWORD PTR [rsi+48], xmm1
  0018b	f3 0f 58 c7	 addss	 xmm0, xmm7
  0018f	f3 0f 11 46 34	 movss	 DWORD PTR [rsi+52], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00194	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  00199	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [rsi+32]

; 109  : 	vertex.y = y + translation.y;

  0019e	f3 0f 10 4e 24	 movss	 xmm1, DWORD PTR [rsi+36]

; 113  : 
; 114  : 	vs++;

  001a3	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 111  : 
; 112  : 	vertices.push_back(vertex);

  001a9	48 8d 56 2c	 lea	 rdx, QWORD PTR [rsi+44]
  001ad	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  001b1	f3 0f 58 c6	 addss	 xmm0, xmm6
  001b5	f3 0f 58 ce	 addss	 xmm1, xmm6

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  001b9	c7 46 38 00 00
	80 3f		 mov	 DWORD PTR [rsi+56], 1065353216 ; 3f800000H

; 164  : 	vertex.v = v;

  001c0	c7 46 3c 00 00
	80 3f		 mov	 DWORD PTR [rsi+60], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  001c7	f3 0f 11 46 2c	 movss	 DWORD PTR [rsi+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  001cc	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  001d1	f3 0f 11 4e 30	 movss	 DWORD PTR [rsi+48], xmm1
  001d6	f3 0f 58 c6	 addss	 xmm0, xmm6
  001da	f3 0f 11 46 34	 movss	 DWORD PTR [rsi+52], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  001df	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  001e4	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [rsi+32]

; 113  : 
; 114  : 	vs++;

  001e9	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  001ef	89 6e 38	 mov	 DWORD PTR [rsi+56], ebp

; 164  : 	vertex.v = v;

  001f2	c7 46 3c 00 00
	80 3f		 mov	 DWORD PTR [rsi+60], 1065353216 ; 3f800000H

; 110  : 	vertex.z = z + translation.z;

  001f9	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  001fe	f3 0f 58 c7	 addss	 xmm0, xmm7
  00202	f3 0f 11 46 2c	 movss	 DWORD PTR [rsi+44], xmm0
  00207	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  0020c	f3 0f 58 c6	 addss	 xmm0, xmm6
  00210	f3 0f 11 46 30	 movss	 DWORD PTR [rsi+48], xmm0
  00215	f3 0f 58 ce	 addss	 xmm1, xmm6

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00219	48 8d 56 2c	 lea	 rdx, QWORD PTR [rsi+44]
  0021d	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00221	f3 0f 11 4e 34	 movss	 DWORD PTR [rsi+52], xmm1
  00226	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0022b	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
$LN53@renderFlui:

; 108  : 	vertex.x = x + translation.x;

  00231	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [rsi+32]

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00236	48 8d 56 2c	 lea	 rdx, QWORD PTR [rsi+44]
  0023a	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0023e	f3 0f 58 c7	 addss	 xmm0, xmm7

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00242	48 89 6e 38	 mov	 QWORD PTR [rsi+56], rbp

; 108  : 	vertex.x = x + translation.x;

  00246	f3 0f 11 46 2c	 movss	 DWORD PTR [rsi+44], xmm0

; 109  : 	vertex.y = y + translation.y;

  0024b	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00250	f3 0f 58 c6	 addss	 xmm0, xmm6
  00254	f3 0f 11 46 30	 movss	 DWORD PTR [rsi+48], xmm0

; 110  : 	vertex.z = z + translation.z;

  00259	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  0025e	f3 0f 58 c6	 addss	 xmm0, xmm6
  00262	f3 0f 11 46 34	 movss	 DWORD PTR [rsi+52], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00267	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  0026c	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [rsi+32]

; 109  : 	vertex.y = y + translation.y;

  00271	f3 0f 10 4e 24	 movss	 xmm1, DWORD PTR [rsi+36]

; 113  : 
; 114  : 	vs++;

  00276	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0027c	48 8d 56 2c	 lea	 rdx, QWORD PTR [rsi+44]
  00280	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00284	f3 0f 58 c6	 addss	 xmm0, xmm6
  00288	f3 0f 58 ce	 addss	 xmm1, xmm6

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  0028c	48 c7 46 38 00
	00 80 3f	 mov	 QWORD PTR [rsi+56], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  00294	f3 0f 11 46 2c	 movss	 DWORD PTR [rsi+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  00299	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  0029e	f3 0f 11 4e 30	 movss	 DWORD PTR [rsi+48], xmm1
  002a3	f3 0f 58 c6	 addss	 xmm0, xmm6
  002a7	f3 0f 11 46 34	 movss	 DWORD PTR [rsi+52], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  002ac	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  002b1	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [rsi+32]

; 110  : 	vertex.z = z + translation.z;

  002b6	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]

; 113  : 
; 114  : 	vs++;

  002bb	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 111  : 
; 112  : 	vertices.push_back(vertex);

  002c1	48 8d 56 2c	 lea	 rdx, QWORD PTR [rsi+44]
  002c5	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  002c9	f3 0f 58 c7	 addss	 xmm0, xmm7
  002cd	f3 0f 58 cf	 addss	 xmm1, xmm7

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  002d1	89 6e 38	 mov	 DWORD PTR [rsi+56], ebp

; 164  : 	vertex.v = v;

  002d4	c7 46 3c 00 00
	80 3f		 mov	 DWORD PTR [rsi+60], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  002db	f3 0f 11 46 2c	 movss	 DWORD PTR [rsi+44], xmm0

; 109  : 	vertex.y = y + translation.y;

  002e0	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]

; 110  : 	vertex.z = z + translation.z;

  002e5	f3 0f 11 4e 34	 movss	 DWORD PTR [rsi+52], xmm1
  002ea	f3 0f 58 c6	 addss	 xmm0, xmm6
  002ee	f3 0f 11 46 30	 movss	 DWORD PTR [rsi+48], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  002f3	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  002f8	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [rsi+32]

; 109  : 	vertex.y = y + translation.y;

  002fd	f3 0f 10 4e 24	 movss	 xmm1, DWORD PTR [rsi+36]

; 113  : 
; 114  : 	vs++;

  00302	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00308	48 8d 56 2c	 lea	 rdx, QWORD PTR [rsi+44]
  0030c	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00310	f3 0f 58 c6	 addss	 xmm0, xmm6
  00314	f3 0f 58 ce	 addss	 xmm1, xmm6

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00318	48 c7 46 38 00
	00 80 3f	 mov	 QWORD PTR [rsi+56], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  00320	f3 0f 11 46 2c	 movss	 DWORD PTR [rsi+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  00325	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  0032a	f3 0f 11 4e 30	 movss	 DWORD PTR [rsi+48], xmm1
  0032f	f3 0f 58 c6	 addss	 xmm0, xmm6
  00333	f3 0f 11 46 34	 movss	 DWORD PTR [rsi+52], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00338	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  0033d	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [rsi+32]

; 109  : 	vertex.y = y + translation.y;

  00342	f3 0f 10 4e 24	 movss	 xmm1, DWORD PTR [rsi+36]

; 113  : 
; 114  : 	vs++;

  00347	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0034d	48 8d 56 2c	 lea	 rdx, QWORD PTR [rsi+44]
  00351	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00355	f3 0f 58 c6	 addss	 xmm0, xmm6
  00359	f3 0f 58 ce	 addss	 xmm1, xmm6

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  0035d	c7 46 38 00 00
	80 3f		 mov	 DWORD PTR [rsi+56], 1065353216 ; 3f800000H

; 164  : 	vertex.v = v;

  00364	c7 46 3c 00 00
	80 3f		 mov	 DWORD PTR [rsi+60], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  0036b	f3 0f 11 46 2c	 movss	 DWORD PTR [rsi+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  00370	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  00375	f3 0f 11 4e 30	 movss	 DWORD PTR [rsi+48], xmm1
  0037a	f3 0f 58 c7	 addss	 xmm0, xmm7
  0037e	f3 0f 11 46 34	 movss	 DWORD PTR [rsi+52], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00383	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  00388	f3 0f 10 46 20	 movss	 xmm0, DWORD PTR [rsi+32]

; 113  : 
; 114  : 	vs++;

  0038d	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00393	89 6e 38	 mov	 DWORD PTR [rsi+56], ebp

; 164  : 	vertex.v = v;

  00396	c7 46 3c 00 00
	80 3f		 mov	 DWORD PTR [rsi+60], 1065353216 ; 3f800000H

; 110  : 	vertex.z = z + translation.z;

  0039d	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  003a2	f3 0f 58 c7	 addss	 xmm0, xmm7
  003a6	f3 0f 11 46 2c	 movss	 DWORD PTR [rsi+44], xmm0
  003ab	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  003b0	f3 0f 58 c6	 addss	 xmm0, xmm6
  003b4	f3 0f 11 46 30	 movss	 DWORD PTR [rsi+48], xmm0
  003b9	f3 0f 58 cf	 addss	 xmm1, xmm7

; 111  : 
; 112  : 	vertices.push_back(vertex);

  003bd	48 8d 56 2c	 lea	 rdx, QWORD PTR [rsi+44]
  003c1	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  003c5	f3 0f 11 4e 34	 movss	 DWORD PTR [rsi+52], xmm1
  003ca	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  003cf	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
  003d5	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
  003da	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]
  003df	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
$LN103@renderFlui:
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 426  : }

  003e4	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  003e9	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  003ee	48 8b 7c 24 78	 mov	 rdi, QWORD PTR [rsp+120]
  003f3	b0 01		 mov	 al, 1
  003f5	48 83 c4 50	 add	 rsp, 80			; 00000050H
  003f9	41 5e		 pop	 r14
  003fb	c3		 ret	 0
?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ENDP ; BlockRenderers::renderFluidBlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
;	COMDAT ?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
_TEXT	SEGMENT
i3$1$ = 48
i2$1$ = 48
tv5612 = 48
tv5600 = 48
i2$1$ = 48
i1$1$ = 52
tv5611 = 52
tv5610 = 52
tv5605 = 52
tv5599 = 52
i2$1$ = 56
tv5604 = 56
tv5603 = 56
tv5602 = 56
i3$1$ = 56
i1$1$ = 60
tv5613 = 60
tv5609 = 60
tv5601 = 60
i1$1$ = 60
i2$1$ = 60
tv5598 = 64
i3$1$ = 64
i4$1$ = 68
i4$1$ = 68
i3$1$ = 68
tv5608 = 68
tv5607 = 68
i3$1$ = 68
world$ = 256
i1$1$ = 264
x$ = 264
i2$1$ = 272
y$ = 272
i3$1$ = 280
z$ = 280
block$ = 288
vStream$ = 296
?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z PROC ; BlockRenderers::renderOrdinaryBlock, COMDAT

; 8    : {

$LN429:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	44 89 48 20	 mov	 DWORD PTR [rax+32], r9d
  0000b	44 89 40 18	 mov	 DWORD PTR [rax+24], r8d
  0000f	89 50 10	 mov	 DWORD PTR [rax+16], edx
  00012	55		 push	 rbp
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	41 54		 push	 r12
  00017	41 55		 push	 r13
  00019	41 56		 push	 r14
  0001b	41 57		 push	 r15
  0001d	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00024	0f 29 70 b8	 movaps	 XMMWORD PTR [rax-72], xmm6
  00028	0f 29 78 a8	 movaps	 XMMWORD PTR [rax-88], xmm7
  0002c	44 0f 29 40 98	 movaps	 XMMWORD PTR [rax-104], xmm8

; 9    : 	if(!world->getBlock(x, y, z - 1)->solidFace(world, x, y, z - 1, Relatives::N))

  00031	45 8d 69 ff	 lea	 r13d, DWORD PTR [r9-1]
  00035	41 8b e9	 mov	 ebp, r9d
  00038	41 8b f0	 mov	 esi, r8d
  0003b	45 8b cd	 mov	 r9d, r13d
  0003e	8b da		 mov	 ebx, edx
  00040	4c 8b f1	 mov	 r14, rcx
  00043	44 0f 29 48 88	 movaps	 XMMWORD PTR [rax-120], xmm9
  00048	44 0f 29 54 24
	70		 movaps	 XMMWORD PTR [rsp+112], xmm10
  0004e	44 0f 29 5c 24
	60		 movaps	 XMMWORD PTR [rsp+96], xmm11
  00054	44 0f 29 64 24
	50		 movaps	 XMMWORD PTR [rsp+80], xmm12
  0005a	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0005f	4c 8b 15 00 00
	00 00		 mov	 r10, QWORD PTR ?N@Relatives@@3PEAVBlockFace@@EA ; Relatives::N
  00066	44 8b ce	 mov	 r9d, esi
  00069	4c 8b 18	 mov	 r11, QWORD PTR [rax]
  0006c	4c 89 54 24 28	 mov	 QWORD PTR [rsp+40], r10
  00071	44 8b c3	 mov	 r8d, ebx
  00074	49 8b d6	 mov	 rdx, r14
  00077	48 8b c8	 mov	 rcx, rax
  0007a	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  0007f	41 ff 53 08	 call	 QWORD PTR [r11+8]
  00083	4c 8b bc 24 28
	01 00 00	 mov	 r15, QWORD PTR vStream$[rsp]
  0008b	f3 44 0f 10 1d
	00 00 00 00	 movss	 xmm11, DWORD PTR __real@3dcccccd
  00094	f3 44 0f 10 0d
	00 00 00 00	 movss	 xmm9, DWORD PTR __real@3f800000
  0009d	f3 44 0f 10 25
	00 00 00 00	 movss	 xmm12, DWORD PTR __real@437f0000
  000a6	45 0f 57 d2	 xorps	 xmm10, xmm10
  000aa	84 c0		 test	 al, al
  000ac	0f 85 23 05 00
	00		 jne	 $LN115@renderOrdi

; 10   : 	{
; 11   : 		int i1 = 0;
; 12   : 		int i2 = 0;
; 13   : 		int i3 = 0;

  000b2	33 c0		 xor	 eax, eax

; 14   : 		int i4 = 0;
; 15   : 
; 16   : 		if(world->getBlock(x - 1, y, z - 1)->solidEdge(world, x - 1, y, z - 1, Relatives::EN))

  000b4	45 8b cd	 mov	 r9d, r13d
  000b7	44 8b c6	 mov	 r8d, esi
  000ba	89 44 24 38	 mov	 DWORD PTR i3$1$[rsp], eax
  000be	8d 43 ff	 lea	 eax, DWORD PTR [rbx-1]
  000c1	49 8b ce	 mov	 rcx, r14
  000c4	8b d0		 mov	 edx, eax
  000c6	33 ed		 xor	 ebp, ebp
  000c8	45 33 e4	 xor	 r12d, r12d
  000cb	33 ff		 xor	 edi, edi
  000cd	89 44 24 3c	 mov	 DWORD PTR tv5613[rsp], eax
  000d1	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  000d6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::EN
  000dd	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  000e0	44 8d 43 ff	 lea	 r8d, DWORD PTR [rbx-1]
  000e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e9	44 8b ce	 mov	 r9d, esi
  000ec	49 8b d6	 mov	 rdx, r14
  000ef	48 8b c8	 mov	 rcx, rax
  000f2	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  000f7	41 ff 52 10	 call	 QWORD PTR [r10+16]
  000fb	84 c0		 test	 al, al
  000fd	74 07		 je	 SHORT $LN53@renderOrdi

; 17   : 		{
; 18   : 			i1++;

  000ff	bd 01 00 00 00	 mov	 ebp, 1

; 19   : 			i4++;

  00104	8b fd		 mov	 edi, ebp
$LN53@renderOrdi:

; 20   : 		}
; 21   : 
; 22   : 		if(world->getBlock(x, y - 1, z - 1)->solidEdge(world, x, y - 1, z - 1, Relatives::UN))

  00106	8d 46 ff	 lea	 eax, DWORD PTR [rsi-1]
  00109	45 8b cd	 mov	 r9d, r13d
  0010c	8b d3		 mov	 edx, ebx
  0010e	44 8b c0	 mov	 r8d, eax
  00111	49 8b ce	 mov	 rcx, r14
  00114	89 44 24 44	 mov	 DWORD PTR tv5608[rsp], eax
  00118	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0011d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?UN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::UN
  00124	44 8d 4e ff	 lea	 r9d, DWORD PTR [rsi-1]
  00128	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  0012b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00130	44 8b c3	 mov	 r8d, ebx
  00133	49 8b d6	 mov	 rdx, r14
  00136	48 8b c8	 mov	 rcx, rax
  00139	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  0013e	41 ff 52 10	 call	 QWORD PTR [r10+16]
  00142	84 c0		 test	 al, al
  00144	74 08		 je	 SHORT $LN52@renderOrdi

; 23   : 		{
; 24   : 			i1++;

  00146	ff c5		 inc	 ebp

; 25   : 			i2++;

  00148	41 bc 01 00 00
	00		 mov	 r12d, 1
$LN52@renderOrdi:

; 26   : 		}
; 27   : 
; 28   : 		if(world->getBlock(x + 1, y, z - 1)->solidEdge(world, x + 1, y, z - 1, Relatives::WN))

  0014e	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  00151	45 8b cd	 mov	 r9d, r13d
  00154	44 8b c6	 mov	 r8d, esi
  00157	8b d0		 mov	 edx, eax
  00159	49 8b ce	 mov	 rcx, r14
  0015c	89 44 24 34	 mov	 DWORD PTR tv5605[rsp], eax
  00160	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00165	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WN
  0016c	44 8d 43 01	 lea	 r8d, DWORD PTR [rbx+1]
  00170	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00173	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00178	44 8b ce	 mov	 r9d, esi
  0017b	49 8b d6	 mov	 rdx, r14
  0017e	48 8b c8	 mov	 rcx, rax
  00181	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  00186	41 ff 52 10	 call	 QWORD PTR [r10+16]
  0018a	84 c0		 test	 al, al
  0018c	74 0b		 je	 SHORT $LN51@renderOrdi

; 29   : 		{
; 30   : 			i2++;

  0018e	41 ff c4	 inc	 r12d

; 31   : 			i3++;

  00191	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR i3$1$[rsp], 1
$LN51@renderOrdi:

; 32   : 		}
; 33   : 
; 34   : 		if(world->getBlock(x, y + 1, z - 1)->solidEdge(world, x, y + 1, z - 1, Relatives::DN))

  00199	ff c6		 inc	 esi
  0019b	45 8b cd	 mov	 r9d, r13d
  0019e	8b d3		 mov	 edx, ebx
  001a0	44 8b c6	 mov	 r8d, esi
  001a3	49 8b ce	 mov	 rcx, r14
  001a6	89 74 24 30	 mov	 DWORD PTR tv5600[rsp], esi
  001aa	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  001af	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?DN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::DN
  001b6	44 8b ce	 mov	 r9d, esi
  001b9	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  001bc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c1	44 8b c3	 mov	 r8d, ebx
  001c4	49 8b d6	 mov	 rdx, r14
  001c7	48 8b c8	 mov	 rcx, rax
  001ca	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  001cf	41 ff 52 10	 call	 QWORD PTR [r10+16]

; 35   : 		{
; 36   : 			i3++;

  001d3	8b 5c 24 38	 mov	 ebx, DWORD PTR i3$1$[rsp]
  001d7	84 c0		 test	 al, al
  001d9	74 04		 je	 SHORT $LN50@renderOrdi
  001db	ff c3		 inc	 ebx

; 37   : 			i4++;

  001dd	ff c7		 inc	 edi
$LN50@renderOrdi:

; 38   : 		}
; 39   : 
; 40   : 		if(i1 < 2 && world->getBlock(x - 1, y - 1, z - 1)->solidCorner(world, x - 1, y - 1, z - 1, Relatives::EUN))

  001df	8b 74 24 44	 mov	 esi, DWORD PTR tv5608[rsp]
  001e3	83 fd 02	 cmp	 ebp, 2
  001e6	7d 3e		 jge	 SHORT $LN49@renderOrdi
  001e8	8b 54 24 3c	 mov	 edx, DWORD PTR tv5613[rsp]
  001ec	45 8b cd	 mov	 r9d, r13d
  001ef	44 8b c6	 mov	 r8d, esi
  001f2	49 8b ce	 mov	 rcx, r14
  001f5	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  001fa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EUN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EUN
  00201	44 8b 44 24 3c	 mov	 r8d, DWORD PTR tv5613[rsp]
  00206	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00209	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0020e	44 8b ce	 mov	 r9d, esi
  00211	49 8b d6	 mov	 rdx, r14
  00214	48 8b c8	 mov	 rcx, rax
  00217	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  0021c	41 ff 52 18	 call	 QWORD PTR [r10+24]
  00220	84 c0		 test	 al, al
  00222	74 02		 je	 SHORT $LN49@renderOrdi

; 41   : 		{
; 42   : 			i1++;

  00224	ff c5		 inc	 ebp
$LN49@renderOrdi:

; 43   : 		}
; 44   : 
; 45   : 		if(i2 < 2 && world->getBlock(x + 1, y - 1, z - 1)->solidCorner(world, x + 1, y - 1, z - 1, Relatives::WUN))

  00226	41 83 fc 02	 cmp	 r12d, 2
  0022a	7d 43		 jge	 SHORT $LN427@renderOrdi
  0022c	8b 54 24 34	 mov	 edx, DWORD PTR tv5605[rsp]
  00230	45 8b cd	 mov	 r9d, r13d
  00233	44 8b c6	 mov	 r8d, esi
  00236	49 8b ce	 mov	 rcx, r14
  00239	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0023e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WUN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WUN
  00245	44 8b ce	 mov	 r9d, esi
  00248	8b 74 24 34	 mov	 esi, DWORD PTR tv5605[rsp]
  0024c	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  0024f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00254	44 8b c6	 mov	 r8d, esi
  00257	49 8b d6	 mov	 rdx, r14
  0025a	48 8b c8	 mov	 rcx, rax
  0025d	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  00262	41 ff 52 18	 call	 QWORD PTR [r10+24]
  00266	84 c0		 test	 al, al
  00268	74 09		 je	 SHORT $LN48@renderOrdi

; 46   : 		{
; 47   : 			i2++;

  0026a	41 ff c4	 inc	 r12d
  0026d	eb 04		 jmp	 SHORT $LN48@renderOrdi
$LN427@renderOrdi:
  0026f	8b 74 24 34	 mov	 esi, DWORD PTR tv5605[rsp]
$LN48@renderOrdi:

; 48   : 		}
; 49   : 								
; 50   : 		if(i3 < 2 && world->getBlock(x + 1, y + 1, z - 1)->solidCorner(world, x + 1, y + 1, z - 1, Relatives::WDN))

  00273	83 fb 02	 cmp	 ebx, 2
  00276	7d 3e		 jge	 SHORT $LN47@renderOrdi
  00278	44 8b 44 24 30	 mov	 r8d, DWORD PTR tv5600[rsp]
  0027d	45 8b cd	 mov	 r9d, r13d
  00280	8b d6		 mov	 edx, esi
  00282	49 8b ce	 mov	 rcx, r14
  00285	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0028a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WDN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WDN
  00291	44 8b 4c 24 30	 mov	 r9d, DWORD PTR tv5600[rsp]
  00296	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00299	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0029e	44 8b c6	 mov	 r8d, esi
  002a1	49 8b d6	 mov	 rdx, r14
  002a4	48 8b c8	 mov	 rcx, rax
  002a7	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  002ac	41 ff 52 18	 call	 QWORD PTR [r10+24]
  002b0	84 c0		 test	 al, al
  002b2	74 02		 je	 SHORT $LN47@renderOrdi

; 51   : 		{
; 52   : 			i3++;

  002b4	ff c3		 inc	 ebx
$LN47@renderOrdi:

; 53   : 		}
; 54   : 								
; 55   : 		if(i4 < 2 && world->getBlock(x - 1, y + 1, z - 1)->solidCorner(world, x - 1, y + 1, z - 1, Relatives::EDN))

  002b6	83 ff 02	 cmp	 edi, 2
  002b9	7d 42		 jge	 SHORT $LN46@renderOrdi
  002bb	44 8b 44 24 30	 mov	 r8d, DWORD PTR tv5600[rsp]
  002c0	8b 54 24 3c	 mov	 edx, DWORD PTR tv5613[rsp]
  002c4	45 8b cd	 mov	 r9d, r13d
  002c7	49 8b ce	 mov	 rcx, r14
  002ca	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  002cf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EDN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EDN
  002d6	44 8b 4c 24 30	 mov	 r9d, DWORD PTR tv5600[rsp]
  002db	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  002de	44 8b 44 24 3c	 mov	 r8d, DWORD PTR tv5613[rsp]
  002e3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e8	49 8b d6	 mov	 rdx, r14
  002eb	48 8b c8	 mov	 rcx, rax
  002ee	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  002f3	41 ff 52 18	 call	 QWORD PTR [r10+24]
  002f7	84 c0		 test	 al, al
  002f9	74 02		 je	 SHORT $LN46@renderOrdi

; 56   : 		{
; 57   : 			i4++;

  002fb	ff c7		 inc	 edi
$LN46@renderOrdi:
  002fd	66 0f 6e c5	 movd	 xmm0, ebp
  00301	66 41 0f 6e cc	 movd	 xmm1, r12d

; 60   : 		float f1 = 1.0F - i1 * 0.1f;

  00306	41 0f 28 d1	 movaps	 xmm2, xmm9
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 112  : 	vertices.push_back(vertex);

  0030a	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  0030e	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00312	45 33 e4	 xor	 r12d, r12d

; 159  : 	vertex.a = a;

  00315	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  0031a	4d 89 67 38	 mov	 QWORD PTR [r15+56], r12
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 60   : 		float f1 = 1.0F - i1 * 0.1f;

  0031e	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 61   : 		float f2 = 1.0F - i2 * 0.1f;

  00321	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00324	f3 41 0f 59 c3	 mulss	 xmm0, xmm11
  00329	f3 41 0f 59 cb	 mulss	 xmm1, xmm11
  0032e	f3 0f 5c d0	 subss	 xmm2, xmm0
  00332	66 0f 6e c3	 movd	 xmm0, ebx

; 62   : 		float f3 = 1.0F - i3 * 0.1f;

  00336	45 0f 28 c1	 movaps	 xmm8, xmm9
  0033a	41 0f 28 f1	 movaps	 xmm6, xmm9
  0033e	f3 0f 5c f1	 subss	 xmm6, xmm1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  00342	f3 41 0f 59 d4	 mulss	 xmm2, xmm12
  00347	f3 48 0f 2c c2	 cvttss2si rax, xmm2
  0034c	66 0f 6e cf	 movd	 xmm1, edi
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 63   : 		float f4 = 1.0F - i4 * 0.1f;

  00350	41 0f 28 f9	 movaps	 xmm7, xmm9
  00354	0f 5b c0	 cvtdq2ps xmm0, xmm0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 156  : 	vertex.r = r;

  00357	41 88 47 40	 mov	 BYTE PTR [r15+64], al

; 157  : 	vertex.g = g;

  0035b	41 88 47 41	 mov	 BYTE PTR [r15+65], al

; 158  : 	vertex.b = b;

  0035f	41 88 47 42	 mov	 BYTE PTR [r15+66], al
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 62   : 		float f3 = 1.0F - i3 * 0.1f;

  00363	f3 41 0f 59 c3	 mulss	 xmm0, xmm11

; 63   : 		float f4 = 1.0F - i4 * 0.1f;

  00368	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0036b	f3 44 0f 5c c0	 subss	 xmm8, xmm0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 108  : 	vertex.x = x + translation.x;

  00370	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 63   : 		float f4 = 1.0F - i4 * 0.1f;

  00376	f3 41 0f 59 cb	 mulss	 xmm1, xmm11
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 108  : 	vertex.x = x + translation.x;

  0037b	f3 41 0f 58 c2	 addss	 xmm0, xmm10
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 63   : 		float f4 = 1.0F - i4 * 0.1f;

  00380	f3 0f 5c f9	 subss	 xmm7, xmm1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 108  : 	vertex.x = x + translation.x;

  00384	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 109  : 	vertex.y = y + translation.y;

  0038a	f3 41 0f 10 47
	24		 movss	 xmm0, DWORD PTR [r15+36]
  00390	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  00395	f3 41 0f 11 47
	30		 movss	 DWORD PTR [r15+48], xmm0

; 110  : 	vertex.z = z + translation.z;

  0039b	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  003a1	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  003a6	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  003ac	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  003b1	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  003b7	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 113  : 
; 114  : 	vs++;

  003bd	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  003c3	f3 41 0f 59 f4	 mulss	 xmm6, xmm12

; 112  : 	vertices.push_back(vertex);

  003c8	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  003cc	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  003d0	49 c7 47 38 00
	00 80 3f	 mov	 QWORD PTR [r15+56], 1065353216 ; 3f800000H

; 159  : 	vertex.a = a;

  003d8	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 108  : 	vertex.x = x + translation.x;

  003dd	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 70   : {}

  003e2	f3 48 0f 2c de	 cvttss2si rbx, xmm6

; 109  : 	vertex.y = y + translation.y;

  003e7	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 156  : 	vertex.r = r;

  003ec	41 88 5f 40	 mov	 BYTE PTR [r15+64], bl

; 157  : 	vertex.g = g;

  003f0	41 88 5f 41	 mov	 BYTE PTR [r15+65], bl

; 158  : 	vertex.b = b;

  003f4	41 88 5f 42	 mov	 BYTE PTR [r15+66], bl

; 108  : 	vertex.x = x + translation.x;

  003f8	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  003fe	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  00404	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1
  0040a	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  0040f	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  00415	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  0041a	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 110  : 	vertex.z = z + translation.z;

  00420	f3 41 0f 10 4f
	28		 movss	 xmm1, DWORD PTR [r15+40]

; 113  : 
; 114  : 	vs++;

  00426	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  0042c	f3 41 0f 59 fc	 mulss	 xmm7, xmm12

; 112  : 	vertices.push_back(vertex);

  00431	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  00435	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00439	45 89 67 38	 mov	 DWORD PTR [r15+56], r12d

; 164  : 	vertex.v = v;

  0043d	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  00445	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 70   : {}

  0044a	f3 48 0f 2c ff	 cvttss2si rdi, xmm7

; 110  : 	vertex.z = z + translation.z;

  0044f	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 159  : 	vertex.a = a;

  00454	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH
  00459	41 88 7f 40	 mov	 BYTE PTR [r15+64], dil
  0045d	41 88 7f 41	 mov	 BYTE PTR [r15+65], dil

; 108  : 	vertex.x = x + translation.x;

  00461	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 109  : 	vertex.y = y + translation.y;

  00467	f3 41 0f 10 47
	24		 movss	 xmm0, DWORD PTR [r15+36]

; 110  : 	vertex.z = z + translation.z;

  0046d	f3 41 0f 11 4f
	34		 movss	 DWORD PTR [r15+52], xmm1

; 158  : 	vertex.b = b;

  00473	41 88 7f 42	 mov	 BYTE PTR [r15+66], dil

; 109  : 	vertex.y = y + translation.y;

  00477	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  0047c	f3 41 0f 11 47
	30		 movss	 DWORD PTR [r15+48], xmm0

; 112  : 	vertices.push_back(vertex);

  00482	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  00487	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  0048d	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 113  : 
; 114  : 	vs++;

  00493	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 112  : 	vertices.push_back(vertex);

  00499	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  0049d	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  004a1	49 c7 47 38 00
	00 80 3f	 mov	 QWORD PTR [r15+56], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  004a9	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 109  : 	vertex.y = y + translation.y;

  004ae	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 156  : 	vertex.r = r;

  004b3	41 88 5f 40	 mov	 BYTE PTR [r15+64], bl

; 157  : 	vertex.g = g;

  004b7	41 88 5f 41	 mov	 BYTE PTR [r15+65], bl

; 158  : 	vertex.b = b;

  004bb	41 88 5f 42	 mov	 BYTE PTR [r15+66], bl

; 108  : 	vertex.x = x + translation.x;

  004bf	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  004c5	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  004cb	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1

; 159  : 	vertex.a = a;

  004d1	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 110  : 	vertex.z = z + translation.z;

  004d6	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  004db	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  004e1	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  004e6	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 113  : 
; 114  : 	vs++;

  004ec	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 112  : 	vertices.push_back(vertex);

  004f2	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  004f6	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 70   : {}

  004fa	f3 45 0f 59 c4	 mulss	 xmm8, xmm12

; 109  : 	vertex.y = y + translation.y;

  004ff	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]
  00505	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 70   : {}

  0050a	f3 49 0f 2c c0	 cvttss2si rax, xmm8

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  0050f	41 c7 47 38 00
	00 80 3f	 mov	 DWORD PTR [r15+56], 1065353216 ; 3f800000H

; 164  : 	vertex.v = v;

  00517	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 159  : 	vertex.a = a;

  0051f	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH
  00524	41 88 47 40	 mov	 BYTE PTR [r15+64], al
  00528	41 88 47 41	 mov	 BYTE PTR [r15+65], al
  0052c	41 88 47 42	 mov	 BYTE PTR [r15+66], al

; 108  : 	vertex.x = x + translation.x;

  00530	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  00536	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  0053c	f3 41 0f 58 c9	 addss	 xmm1, xmm9
  00541	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  00546	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1
  0054c	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  00552	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  00557	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 110  : 	vertex.z = z + translation.z;

  0055d	f3 41 0f 10 4f
	28		 movss	 xmm1, DWORD PTR [r15+40]

; 113  : 
; 114  : 	vs++;

  00563	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 112  : 	vertices.push_back(vertex);

  00569	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  0056d	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]
  00571	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  00576	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  0057b	45 89 67 38	 mov	 DWORD PTR [r15+56], r12d

; 164  : 	vertex.v = v;

  0057f	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 156  : 	vertex.r = r;

  00587	41 88 7f 40	 mov	 BYTE PTR [r15+64], dil

; 108  : 	vertex.x = x + translation.x;

  0058b	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 109  : 	vertex.y = y + translation.y;

  00591	f3 41 0f 10 47
	24		 movss	 xmm0, DWORD PTR [r15+36]

; 110  : 	vertex.z = z + translation.z;

  00597	f3 41 0f 11 4f
	34		 movss	 DWORD PTR [r15+52], xmm1

; 157  : 	vertex.g = g;

  0059d	41 88 7f 41	 mov	 BYTE PTR [r15+65], dil

; 158  : 	vertex.b = b;

  005a1	41 88 7f 42	 mov	 BYTE PTR [r15+66], dil

; 159  : 	vertex.a = a;

  005a5	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 109  : 	vertex.y = y + translation.y;

  005aa	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  005af	f3 41 0f 11 47
	30		 movss	 DWORD PTR [r15+48], xmm0

; 112  : 	vertices.push_back(vertex);

  005b5	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  005ba	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
  005c0	8b 9c 24 08 01
	00 00		 mov	 ebx, DWORD PTR x$[rsp]
  005c7	8b b4 24 10 01
	00 00		 mov	 esi, DWORD PTR y$[rsp]
  005ce	8b ac 24 18 01
	00 00		 mov	 ebp, DWORD PTR z$[rsp]
$LN115@renderOrdi:
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 73   : 	if(!world->getBlock(x, y, z + 1)->solidFace(world, x, y, z + 1, Relatives::S))

  005d5	44 8d 65 01	 lea	 r12d, DWORD PTR [rbp+1]
  005d9	44 8b c6	 mov	 r8d, esi
  005dc	8b d3		 mov	 edx, ebx
  005de	45 8b cc	 mov	 r9d, r12d
  005e1	49 8b ce	 mov	 rcx, r14
  005e4	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  005e9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?S@Relatives@@3PEAVBlockFace@@EA ; Relatives::S
  005f0	44 8b ce	 mov	 r9d, esi
  005f3	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  005f6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005fb	44 8b c3	 mov	 r8d, ebx
  005fe	49 8b d6	 mov	 rdx, r14
  00601	48 8b c8	 mov	 rcx, rax
  00604	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  00609	41 ff 52 08	 call	 QWORD PTR [r10+8]
  0060d	84 c0		 test	 al, al
  0060f	0f 85 31 05 00
	00		 jne	 $LN175@renderOrdi

; 74   : 	{
; 75   : 		int i1 = 0;
; 76   : 		int i2 = 0;

  00615	33 c0		 xor	 eax, eax

; 77   : 		int i3 = 0;

  00617	33 c9		 xor	 ecx, ecx

; 78   : 		int i4 = 0;
; 79   : 
; 80   : 		if(world->getBlock(x - 1, y, z + 1)->solidEdge(world, x - 1, y, z + 1, Relatives::ES))

  00619	45 8b cc	 mov	 r9d, r12d
  0061c	89 44 24 3c	 mov	 DWORD PTR i2$1$[rsp], eax
  00620	8d 43 ff	 lea	 eax, DWORD PTR [rbx-1]
  00623	89 4c 24 40	 mov	 DWORD PTR i3$1$[rsp], ecx
  00627	44 8b c6	 mov	 r8d, esi
  0062a	49 8b ce	 mov	 rcx, r14
  0062d	8b d0		 mov	 edx, eax
  0062f	33 ed		 xor	 ebp, ebp
  00631	33 ff		 xor	 edi, edi
  00633	89 44 24 30	 mov	 DWORD PTR tv5612[rsp], eax
  00637	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0063c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?ES@Relatives@@3PEAVBlockEdge@@EA ; Relatives::ES
  00643	44 8d 43 ff	 lea	 r8d, DWORD PTR [rbx-1]
  00647	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  0064a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0064f	44 8b ce	 mov	 r9d, esi
  00652	49 8b d6	 mov	 rdx, r14
  00655	48 8b c8	 mov	 rcx, rax
  00658	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  0065d	41 ff 52 10	 call	 QWORD PTR [r10+16]
  00661	84 c0		 test	 al, al
  00663	74 07		 je	 SHORT $LN44@renderOrdi

; 81   : 		{
; 82   : 			i1++;

  00665	bd 01 00 00 00	 mov	 ebp, 1

; 83   : 			i4++;

  0066a	8b fd		 mov	 edi, ebp
$LN44@renderOrdi:

; 84   : 		}
; 85   : 
; 86   : 		if(world->getBlock(x, y - 1, z + 1)->solidEdge(world, x, y - 1, z + 1, Relatives::US))

  0066c	8d 46 ff	 lea	 eax, DWORD PTR [rsi-1]
  0066f	45 8b cc	 mov	 r9d, r12d
  00672	8b d3		 mov	 edx, ebx
  00674	44 8b c0	 mov	 r8d, eax
  00677	49 8b ce	 mov	 rcx, r14
  0067a	89 44 24 44	 mov	 DWORD PTR tv5607[rsp], eax
  0067e	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00683	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?US@Relatives@@3PEAVBlockEdge@@EA ; Relatives::US
  0068a	44 8d 4e ff	 lea	 r9d, DWORD PTR [rsi-1]
  0068e	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00691	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00696	44 8b c3	 mov	 r8d, ebx
  00699	49 8b d6	 mov	 rdx, r14
  0069c	48 8b c8	 mov	 rcx, rax
  0069f	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  006a4	41 ff 52 10	 call	 QWORD PTR [r10+16]
  006a8	84 c0		 test	 al, al
  006aa	74 0a		 je	 SHORT $LN43@renderOrdi

; 87   : 		{
; 88   : 			i1++;

  006ac	ff c5		 inc	 ebp

; 89   : 			i2++;

  006ae	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR i2$1$[rsp], 1
$LN43@renderOrdi:

; 90   : 		}
; 91   : 
; 92   : 		if(world->getBlock(x + 1, y, z + 1)->solidEdge(world, x + 1, y, z + 1, Relatives::WS))

  006b6	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  006b9	45 8b cc	 mov	 r9d, r12d
  006bc	44 8b c6	 mov	 r8d, esi
  006bf	8b d0		 mov	 edx, eax
  006c1	49 8b ce	 mov	 rcx, r14
  006c4	89 44 24 38	 mov	 DWORD PTR tv5604[rsp], eax
  006c8	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  006cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WS@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WS
  006d4	44 8d 43 01	 lea	 r8d, DWORD PTR [rbx+1]
  006d8	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  006db	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006e0	44 8b ce	 mov	 r9d, esi
  006e3	49 8b d6	 mov	 rdx, r14
  006e6	48 8b c8	 mov	 rcx, rax
  006e9	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  006ee	41 ff 52 10	 call	 QWORD PTR [r10+16]
  006f2	84 c0		 test	 al, al
  006f4	74 0c		 je	 SHORT $LN42@renderOrdi

; 93   : 		{
; 94   : 			i2++;

  006f6	ff 44 24 3c	 inc	 DWORD PTR i2$1$[rsp]

; 95   : 			i3++;

  006fa	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR i3$1$[rsp], 1
$LN42@renderOrdi:

; 96   : 		}
; 97   : 
; 98   : 		if(world->getBlock(x, y + 1, z + 1)->solidEdge(world, x, y + 1, z + 1, Relatives::DS))

  00702	ff c6		 inc	 esi
  00704	45 8b cc	 mov	 r9d, r12d
  00707	8b d3		 mov	 edx, ebx
  00709	44 8b c6	 mov	 r8d, esi
  0070c	49 8b ce	 mov	 rcx, r14
  0070f	89 74 24 34	 mov	 DWORD PTR tv5599[rsp], esi
  00713	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00718	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?DS@Relatives@@3PEAVBlockEdge@@EA ; Relatives::DS
  0071f	44 8b ce	 mov	 r9d, esi
  00722	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00725	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0072a	44 8b c3	 mov	 r8d, ebx
  0072d	49 8b d6	 mov	 rdx, r14
  00730	48 8b c8	 mov	 rcx, rax
  00733	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  00738	41 ff 52 10	 call	 QWORD PTR [r10+16]

; 99   : 		{
; 100  : 			i3++;

  0073c	8b 74 24 40	 mov	 esi, DWORD PTR i3$1$[rsp]
  00740	84 c0		 test	 al, al
  00742	74 04		 je	 SHORT $LN41@renderOrdi
  00744	ff c6		 inc	 esi

; 101  : 			i4++;

  00746	ff c7		 inc	 edi
$LN41@renderOrdi:

; 102  : 		}
; 103  : 
; 104  : 		if(i1 < 2 && world->getBlock(x - 1, y - 1, z + 1)->solidCorner(world, x - 1, y - 1, z + 1, Relatives::EUS))

  00748	83 fd 02	 cmp	 ebp, 2
  0074b	7d 42		 jge	 SHORT $LN40@renderOrdi
  0074d	44 8b 44 24 44	 mov	 r8d, DWORD PTR tv5607[rsp]
  00752	8b 54 24 30	 mov	 edx, DWORD PTR tv5612[rsp]
  00756	45 8b cc	 mov	 r9d, r12d
  00759	49 8b ce	 mov	 rcx, r14
  0075c	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00761	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EUS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EUS
  00768	44 8b 4c 24 44	 mov	 r9d, DWORD PTR tv5607[rsp]
  0076d	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00770	44 8b 44 24 30	 mov	 r8d, DWORD PTR tv5612[rsp]
  00775	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0077a	49 8b d6	 mov	 rdx, r14
  0077d	48 8b c8	 mov	 rcx, rax
  00780	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  00785	41 ff 52 18	 call	 QWORD PTR [r10+24]
  00789	84 c0		 test	 al, al
  0078b	74 02		 je	 SHORT $LN40@renderOrdi

; 105  : 		{
; 106  : 			i1++;

  0078d	ff c5		 inc	 ebp
$LN40@renderOrdi:

; 107  : 		}
; 108  : 
; 109  : 		if(i2 < 2 && world->getBlock(x + 1, y - 1, z + 1)->solidCorner(world, x + 1, y - 1, z + 1, Relatives::WUS))

  0078f	8b 5c 24 3c	 mov	 ebx, DWORD PTR i2$1$[rsp]
  00793	83 fb 02	 cmp	 ebx, 2
  00796	7d 42		 jge	 SHORT $LN39@renderOrdi
  00798	44 8b 44 24 44	 mov	 r8d, DWORD PTR tv5607[rsp]
  0079d	8b 54 24 38	 mov	 edx, DWORD PTR tv5604[rsp]
  007a1	45 8b cc	 mov	 r9d, r12d
  007a4	49 8b ce	 mov	 rcx, r14
  007a7	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  007ac	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WUS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WUS
  007b3	44 8b 4c 24 44	 mov	 r9d, DWORD PTR tv5607[rsp]
  007b8	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  007bb	44 8b 44 24 38	 mov	 r8d, DWORD PTR tv5604[rsp]
  007c0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007c5	49 8b d6	 mov	 rdx, r14
  007c8	48 8b c8	 mov	 rcx, rax
  007cb	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  007d0	41 ff 52 18	 call	 QWORD PTR [r10+24]
  007d4	84 c0		 test	 al, al
  007d6	74 02		 je	 SHORT $LN39@renderOrdi

; 110  : 		{
; 111  : 			i2++;

  007d8	ff c3		 inc	 ebx
$LN39@renderOrdi:

; 112  : 		}
; 113  : 								
; 114  : 		if(i3 < 2 && world->getBlock(x + 1, y + 1, z + 1)->solidCorner(world, x + 1, y + 1, z + 1, Relatives::WDS))

  007da	83 fe 02	 cmp	 esi, 2
  007dd	7d 42		 jge	 SHORT $LN38@renderOrdi
  007df	44 8b 44 24 34	 mov	 r8d, DWORD PTR tv5599[rsp]
  007e4	8b 54 24 38	 mov	 edx, DWORD PTR tv5604[rsp]
  007e8	45 8b cc	 mov	 r9d, r12d
  007eb	49 8b ce	 mov	 rcx, r14
  007ee	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  007f3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WDS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WDS
  007fa	44 8b 4c 24 34	 mov	 r9d, DWORD PTR tv5599[rsp]
  007ff	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00802	44 8b 44 24 38	 mov	 r8d, DWORD PTR tv5604[rsp]
  00807	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0080c	49 8b d6	 mov	 rdx, r14
  0080f	48 8b c8	 mov	 rcx, rax
  00812	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  00817	41 ff 52 18	 call	 QWORD PTR [r10+24]
  0081b	84 c0		 test	 al, al
  0081d	74 02		 je	 SHORT $LN38@renderOrdi

; 115  : 		{
; 116  : 			i3++;

  0081f	ff c6		 inc	 esi
$LN38@renderOrdi:

; 117  : 		}
; 118  : 								
; 119  : 		if(i4 < 2 && world->getBlock(x - 1, y + 1, z + 1)->solidCorner(world, x - 1, y + 1, z + 1, Relatives::EDS))

  00821	83 ff 02	 cmp	 edi, 2
  00824	7d 42		 jge	 SHORT $LN37@renderOrdi
  00826	44 8b 44 24 34	 mov	 r8d, DWORD PTR tv5599[rsp]
  0082b	8b 54 24 30	 mov	 edx, DWORD PTR tv5612[rsp]
  0082f	45 8b cc	 mov	 r9d, r12d
  00832	49 8b ce	 mov	 rcx, r14
  00835	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0083a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EDS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EDS
  00841	44 8b 4c 24 34	 mov	 r9d, DWORD PTR tv5599[rsp]
  00846	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00849	44 8b 44 24 30	 mov	 r8d, DWORD PTR tv5612[rsp]
  0084e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00853	49 8b d6	 mov	 rdx, r14
  00856	48 8b c8	 mov	 rcx, rax
  00859	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  0085e	41 ff 52 18	 call	 QWORD PTR [r10+24]
  00862	84 c0		 test	 al, al
  00864	74 02		 je	 SHORT $LN37@renderOrdi

; 120  : 		{
; 121  : 			i4++;

  00866	ff c7		 inc	 edi
$LN37@renderOrdi:
  00868	66 0f 6e c5	 movd	 xmm0, ebp
  0086c	66 0f 6e cb	 movd	 xmm1, ebx

; 124  : 		float f1 = 1.0F - i1 * 0.1f;

  00870	41 0f 28 f9	 movaps	 xmm7, xmm9
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 112  : 	vertices.push_back(vertex);

  00874	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  00878	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  0087c	41 c7 47 38 00
	00 80 3f	 mov	 DWORD PTR [r15+56], 1065353216 ; 3f800000H

; 164  : 	vertex.v = v;

  00884	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 159  : 	vertex.a = a;

  0088c	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 124  : 		float f1 = 1.0F - i1 * 0.1f;

  00891	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 125  : 		float f2 = 1.0F - i2 * 0.1f;

  00894	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00897	f3 41 0f 59 c3	 mulss	 xmm0, xmm11
  0089c	f3 41 0f 59 cb	 mulss	 xmm1, xmm11
  008a1	f3 0f 5c f8	 subss	 xmm7, xmm0
  008a5	66 0f 6e c6	 movd	 xmm0, esi
  008a9	45 0f 28 c1	 movaps	 xmm8, xmm9

; 126  : 		float f3 = 1.0F - i3 * 0.1f;

  008ad	41 0f 28 f1	 movaps	 xmm6, xmm9
  008b1	f3 44 0f 5c c1	 subss	 xmm8, xmm1
  008b6	0f 5b c0	 cvtdq2ps xmm0, xmm0
  008b9	66 0f 6e cf	 movd	 xmm1, edi
  008bd	f3 41 0f 59 c3	 mulss	 xmm0, xmm11
  008c2	f3 0f 5c f0	 subss	 xmm6, xmm0

; 127  : 		float f4 = 1.0F - i4 * 0.1f;

  008c6	41 0f 28 c1	 movaps	 xmm0, xmm9
  008ca	0f 5b c9	 cvtdq2ps xmm1, xmm1
  008cd	f3 41 0f 59 cb	 mulss	 xmm1, xmm11
  008d2	f3 0f 5c c1	 subss	 xmm0, xmm1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  008d6	f3 41 0f 59 c4	 mulss	 xmm0, xmm12
  008db	f3 48 0f 2c c0	 cvttss2si rax, xmm0

; 108  : 	vertex.x = x + translation.x;

  008e0	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]
  008e6	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 156  : 	vertex.r = r;

  008eb	41 88 47 40	 mov	 BYTE PTR [r15+64], al

; 157  : 	vertex.g = g;

  008ef	41 88 47 41	 mov	 BYTE PTR [r15+65], al

; 158  : 	vertex.b = b;

  008f3	41 88 47 42	 mov	 BYTE PTR [r15+66], al

; 108  : 	vertex.x = x + translation.x;

  008f7	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 109  : 	vertex.y = y + translation.y;

  008fd	f3 41 0f 10 47
	24		 movss	 xmm0, DWORD PTR [r15+36]
  00903	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00908	f3 41 0f 11 47
	30		 movss	 DWORD PTR [r15+48], xmm0

; 110  : 	vertex.z = z + translation.z;

  0090e	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  00914	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00919	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  0091f	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  00924	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  0092a	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 113  : 
; 114  : 	vs++;

  00930	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  00936	f3 41 0f 59 f4	 mulss	 xmm6, xmm12

; 112  : 	vertices.push_back(vertex);

  0093b	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  0093f	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00943	41 c7 47 38 00
	00 00 00	 mov	 DWORD PTR [r15+56], 0

; 164  : 	vertex.v = v;

  0094b	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  00953	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 70   : {}

  00958	f3 48 0f 2c de	 cvttss2si rbx, xmm6

; 109  : 	vertex.y = y + translation.y;

  0095d	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 159  : 	vertex.a = a;

  00962	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH
  00967	41 88 5f 40	 mov	 BYTE PTR [r15+64], bl
  0096b	41 88 5f 41	 mov	 BYTE PTR [r15+65], bl

; 108  : 	vertex.x = x + translation.x;

  0096f	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  00975	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  0097b	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1

; 158  : 	vertex.b = b;

  00981	41 88 5f 42	 mov	 BYTE PTR [r15+66], bl

; 110  : 	vertex.z = z + translation.z;

  00985	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  0098a	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  00990	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  00995	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  0099b	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 113  : 
; 114  : 	vs++;

  009a1	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  009a7	f3 41 0f 59 fc	 mulss	 xmm7, xmm12

; 112  : 	vertices.push_back(vertex);

  009ac	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  009b0	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  009b4	49 c7 47 38 00
	00 80 3f	 mov	 QWORD PTR [r15+56], 1065353216 ; 3f800000H

; 159  : 	vertex.a = a;

  009bc	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 108  : 	vertex.x = x + translation.x;

  009c1	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 70   : {}

  009c6	f3 48 0f 2c ff	 cvttss2si rdi, xmm7

; 109  : 	vertex.y = y + translation.y;

  009cb	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 156  : 	vertex.r = r;

  009d0	41 88 7f 40	 mov	 BYTE PTR [r15+64], dil

; 157  : 	vertex.g = g;

  009d4	41 88 7f 41	 mov	 BYTE PTR [r15+65], dil

; 158  : 	vertex.b = b;

  009d8	41 88 7f 42	 mov	 BYTE PTR [r15+66], dil

; 108  : 	vertex.x = x + translation.x;

  009dc	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  009e2	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  009e8	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1
  009ee	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  009f3	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  009f9	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  009fe	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  00a04	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 113  : 
; 114  : 	vs++;

  00a0a	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 112  : 	vertices.push_back(vertex);

  00a10	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  00a14	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00a18	41 c7 47 38 00
	00 00 00	 mov	 DWORD PTR [r15+56], 0

; 108  : 	vertex.x = x + translation.x;

  00a20	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 109  : 	vertex.y = y + translation.y;

  00a25	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 164  : 	vertex.v = v;

  00a2a	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 156  : 	vertex.r = r;

  00a32	41 88 5f 40	 mov	 BYTE PTR [r15+64], bl

; 157  : 	vertex.g = g;

  00a36	41 88 5f 41	 mov	 BYTE PTR [r15+65], bl

; 108  : 	vertex.x = x + translation.x;

  00a3a	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  00a40	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  00a46	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1

; 158  : 	vertex.b = b;

  00a4c	41 88 5f 42	 mov	 BYTE PTR [r15+66], bl

; 159  : 	vertex.a = a;

  00a50	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 110  : 	vertex.z = z + translation.z;

  00a55	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00a5a	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  00a60	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00a65	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 108  : 	vertex.x = x + translation.x;

  00a6b	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  00a71	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 70   : {}

  00a77	f3 45 0f 59 c4	 mulss	 xmm8, xmm12

; 112  : 	vertices.push_back(vertex);

  00a7c	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  00a80	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00a84	33 db		 xor	 ebx, ebx

; 108  : 	vertex.x = x + translation.x;

  00a86	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 70   : {}

  00a8b	f3 49 0f 2c c0	 cvttss2si rax, xmm8

; 109  : 	vertex.y = y + translation.y;

  00a90	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00a95	49 89 5f 38	 mov	 QWORD PTR [r15+56], rbx

; 156  : 	vertex.r = r;

  00a99	41 88 47 40	 mov	 BYTE PTR [r15+64], al

; 157  : 	vertex.g = g;

  00a9d	41 88 47 41	 mov	 BYTE PTR [r15+65], al

; 158  : 	vertex.b = b;

  00aa1	41 88 47 42	 mov	 BYTE PTR [r15+66], al

; 159  : 	vertex.a = a;

  00aa5	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 108  : 	vertex.x = x + translation.x;

  00aaa	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  00ab0	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  00ab6	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1
  00abc	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00ac1	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  00ac7	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  00acc	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  00ad2	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 113  : 
; 114  : 	vs++;

  00ad8	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 112  : 	vertices.push_back(vertex);

  00ade	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  00ae2	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]
  00ae6	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  00aeb	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00af0	49 c7 47 38 00
	00 80 3f	 mov	 QWORD PTR [r15+56], 1065353216 ; 3f800000H

; 156  : 	vertex.r = r;

  00af8	41 88 7f 40	 mov	 BYTE PTR [r15+64], dil

; 157  : 	vertex.g = g;

  00afc	41 88 7f 41	 mov	 BYTE PTR [r15+65], dil

; 108  : 	vertex.x = x + translation.x;

  00b00	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  00b06	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  00b0c	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1

; 158  : 	vertex.b = b;

  00b12	41 88 7f 42	 mov	 BYTE PTR [r15+66], dil

; 159  : 	vertex.a = a;

  00b16	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 110  : 	vertex.z = z + translation.z;

  00b1b	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00b20	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  00b26	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00b2b	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
  00b31	8b 9c 24 08 01
	00 00		 mov	 ebx, DWORD PTR x$[rsp]
  00b38	8b b4 24 10 01
	00 00		 mov	 esi, DWORD PTR y$[rsp]
  00b3f	8b ac 24 18 01
	00 00		 mov	 ebp, DWORD PTR z$[rsp]
$LN175@renderOrdi:
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 137  : 	if(!world->getBlock(x, y - 1, z)->solidFace(world, x, y - 1, z, Relatives::U))

  00b46	8d 7e ff	 lea	 edi, DWORD PTR [rsi-1]
  00b49	44 8b cd	 mov	 r9d, ebp
  00b4c	8b d3		 mov	 edx, ebx
  00b4e	44 8b c7	 mov	 r8d, edi
  00b51	49 8b ce	 mov	 rcx, r14
  00b54	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00b59	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?U@Relatives@@3PEAVBlockFace@@EA ; Relatives::U
  00b60	44 8b cf	 mov	 r9d, edi
  00b63	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00b66	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b6b	44 8b c3	 mov	 r8d, ebx
  00b6e	49 8b d6	 mov	 rdx, r14
  00b71	48 8b c8	 mov	 rcx, rax
  00b74	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  00b78	41 ff 52 08	 call	 QWORD PTR [r10+8]
  00b7c	84 c0		 test	 al, al
  00b7e	0f 85 1e 05 00
	00		 jne	 $LN235@renderOrdi

; 138  : 	{
; 139  : 		int i1 = 0;

  00b84	33 c9		 xor	 ecx, ecx

; 140  : 		int i2 = 0;
; 141  : 		int i3 = 0;
; 142  : 		int i4 = 0;
; 143  : 
; 144  : 		if(world->getBlock(x - 1, y - 1, z)->solidEdge(world, x - 1, y - 1, z, Relatives::EU))

  00b86	8d 43 ff	 lea	 eax, DWORD PTR [rbx-1]
  00b89	44 8b cd	 mov	 r9d, ebp
  00b8c	89 4c 24 3c	 mov	 DWORD PTR i1$1$[rsp], ecx
  00b90	89 4c 24 30	 mov	 DWORD PTR i2$1$[rsp], ecx
  00b94	89 4c 24 44	 mov	 DWORD PTR i3$1$[rsp], ecx
  00b98	8b f1		 mov	 esi, ecx
  00b9a	8b d0		 mov	 edx, eax
  00b9c	44 8b c7	 mov	 r8d, edi
  00b9f	49 8b ce	 mov	 rcx, r14
  00ba2	89 44 24 34	 mov	 DWORD PTR tv5611[rsp], eax
  00ba6	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00bab	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EU@Relatives@@3PEAVBlockEdge@@EA ; Relatives::EU
  00bb2	44 8d 43 ff	 lea	 r8d, DWORD PTR [rbx-1]
  00bb6	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00bb9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00bbe	44 8b cf	 mov	 r9d, edi
  00bc1	49 8b d6	 mov	 rdx, r14
  00bc4	48 8b c8	 mov	 rcx, rax
  00bc7	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  00bcb	41 ff 52 10	 call	 QWORD PTR [r10+16]
  00bcf	84 c0		 test	 al, al
  00bd1	74 0d		 je	 SHORT $LN35@renderOrdi

; 145  : 		{
; 146  : 			i1++;

  00bd3	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR i1$1$[rsp], 1

; 147  : 			i4++;

  00bdb	be 01 00 00 00	 mov	 esi, 1
$LN35@renderOrdi:

; 148  : 		}
; 149  : 
; 150  : 		if(world->getBlock(x, y - 1, z - 1)->solidEdge(world, x, y - 1, z - 1, Relatives::UN))

  00be0	45 8b cd	 mov	 r9d, r13d
  00be3	44 8b c7	 mov	 r8d, edi
  00be6	8b d3		 mov	 edx, ebx
  00be8	49 8b ce	 mov	 rcx, r14
  00beb	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00bf0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?UN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::UN
  00bf7	44 8b cf	 mov	 r9d, edi
  00bfa	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00bfd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c02	44 8b c3	 mov	 r8d, ebx
  00c05	49 8b d6	 mov	 rdx, r14
  00c08	48 8b c8	 mov	 rcx, rax
  00c0b	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  00c10	41 ff 52 10	 call	 QWORD PTR [r10+16]
  00c14	84 c0		 test	 al, al
  00c16	74 0c		 je	 SHORT $LN34@renderOrdi

; 151  : 		{
; 152  : 			i1++;

  00c18	ff 44 24 3c	 inc	 DWORD PTR i1$1$[rsp]

; 153  : 			i2++;

  00c1c	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR i2$1$[rsp], 1
$LN34@renderOrdi:

; 154  : 		}
; 155  : 
; 156  : 		if(world->getBlock(x + 1, y - 1, z)->solidEdge(world, x + 1, y - 1, z, Relatives::WU))

  00c24	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  00c27	44 8b cd	 mov	 r9d, ebp
  00c2a	44 8b c7	 mov	 r8d, edi
  00c2d	8b d0		 mov	 edx, eax
  00c2f	49 8b ce	 mov	 rcx, r14
  00c32	89 44 24 38	 mov	 DWORD PTR tv5603[rsp], eax
  00c36	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00c3b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WU@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WU
  00c42	44 8d 43 01	 lea	 r8d, DWORD PTR [rbx+1]
  00c46	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00c49	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c4e	44 8b cf	 mov	 r9d, edi
  00c51	49 8b d6	 mov	 rdx, r14
  00c54	48 8b c8	 mov	 rcx, rax
  00c57	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  00c5b	41 ff 52 10	 call	 QWORD PTR [r10+16]
  00c5f	84 c0		 test	 al, al
  00c61	74 0b		 je	 SHORT $LN421@renderOrdi

; 157  : 		{
; 158  : 			i2++;

  00c63	ff 44 24 30	 inc	 DWORD PTR i2$1$[rsp]

; 159  : 			i3++;

  00c67	bd 01 00 00 00	 mov	 ebp, 1
  00c6c	eb 04		 jmp	 SHORT $LN33@renderOrdi
$LN421@renderOrdi:
  00c6e	8b 6c 24 44	 mov	 ebp, DWORD PTR i3$1$[rsp]
$LN33@renderOrdi:

; 160  : 		}
; 161  : 
; 162  : 		if(world->getBlock(x, y - 1, z + 1)->solidEdge(world, x, y - 1, z + 1, Relatives::US))

  00c72	45 8b cc	 mov	 r9d, r12d
  00c75	44 8b c7	 mov	 r8d, edi
  00c78	8b d3		 mov	 edx, ebx
  00c7a	49 8b ce	 mov	 rcx, r14
  00c7d	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00c82	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?US@Relatives@@3PEAVBlockEdge@@EA ; Relatives::US
  00c89	44 8b cf	 mov	 r9d, edi
  00c8c	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00c8f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c94	44 8b c3	 mov	 r8d, ebx
  00c97	49 8b d6	 mov	 rdx, r14
  00c9a	48 8b c8	 mov	 rcx, rax
  00c9d	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  00ca2	41 ff 52 10	 call	 QWORD PTR [r10+16]
  00ca6	84 c0		 test	 al, al
  00ca8	74 04		 je	 SHORT $LN32@renderOrdi

; 163  : 		{
; 164  : 			i3++;

  00caa	ff c5		 inc	 ebp

; 165  : 			i4++;

  00cac	ff c6		 inc	 esi
$LN32@renderOrdi:

; 166  : 		}
; 167  : 
; 168  : 		if(i1 < 2 && world->getBlock(x - 1, y - 1, z - 1)->solidCorner(world, x - 1, y - 1, z - 1, Relatives::EUN))

  00cae	8b 5c 24 3c	 mov	 ebx, DWORD PTR i1$1$[rsp]
  00cb2	83 fb 02	 cmp	 ebx, 2
  00cb5	7d 3e		 jge	 SHORT $LN31@renderOrdi
  00cb7	8b 54 24 34	 mov	 edx, DWORD PTR tv5611[rsp]
  00cbb	45 8b cd	 mov	 r9d, r13d
  00cbe	44 8b c7	 mov	 r8d, edi
  00cc1	49 8b ce	 mov	 rcx, r14
  00cc4	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00cc9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EUN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EUN
  00cd0	44 8b 44 24 34	 mov	 r8d, DWORD PTR tv5611[rsp]
  00cd5	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00cd8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00cdd	44 8b cf	 mov	 r9d, edi
  00ce0	49 8b d6	 mov	 rdx, r14
  00ce3	48 8b c8	 mov	 rcx, rax
  00ce6	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  00ceb	41 ff 52 18	 call	 QWORD PTR [r10+24]
  00cef	84 c0		 test	 al, al
  00cf1	74 02		 je	 SHORT $LN31@renderOrdi

; 169  : 		{
; 170  : 			i1++;

  00cf3	ff c3		 inc	 ebx
$LN31@renderOrdi:

; 171  : 		}
; 172  : 
; 173  : 		if(i2 < 2 && world->getBlock(x + 1, y - 1, z - 1)->solidCorner(world, x + 1, y - 1, z - 1, Relatives::WUN))

  00cf5	83 7c 24 30 02	 cmp	 DWORD PTR i2$1$[rsp], 2
  00cfa	7d 40		 jge	 SHORT $LN30@renderOrdi
  00cfc	8b 54 24 38	 mov	 edx, DWORD PTR tv5603[rsp]
  00d00	45 8b cd	 mov	 r9d, r13d
  00d03	44 8b c7	 mov	 r8d, edi
  00d06	49 8b ce	 mov	 rcx, r14
  00d09	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00d0e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WUN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WUN
  00d15	44 8b 44 24 38	 mov	 r8d, DWORD PTR tv5603[rsp]
  00d1a	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00d1d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00d22	44 8b cf	 mov	 r9d, edi
  00d25	49 8b d6	 mov	 rdx, r14
  00d28	48 8b c8	 mov	 rcx, rax
  00d2b	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  00d30	41 ff 52 18	 call	 QWORD PTR [r10+24]
  00d34	84 c0		 test	 al, al
  00d36	74 04		 je	 SHORT $LN30@renderOrdi

; 174  : 		{
; 175  : 			i2++;

  00d38	ff 44 24 30	 inc	 DWORD PTR i2$1$[rsp]
$LN30@renderOrdi:

; 176  : 		}
; 177  : 								
; 178  : 		if(i3 < 2 && world->getBlock(x + 1, y - 1, z + 1)->solidCorner(world, x + 1, y - 1, z + 1, Relatives::WUS))

  00d3c	83 fd 02	 cmp	 ebp, 2
  00d3f	7d 3e		 jge	 SHORT $LN29@renderOrdi
  00d41	8b 54 24 38	 mov	 edx, DWORD PTR tv5603[rsp]
  00d45	45 8b cc	 mov	 r9d, r12d
  00d48	44 8b c7	 mov	 r8d, edi
  00d4b	49 8b ce	 mov	 rcx, r14
  00d4e	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00d53	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WUS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WUS
  00d5a	44 8b 44 24 38	 mov	 r8d, DWORD PTR tv5603[rsp]
  00d5f	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00d62	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00d67	44 8b cf	 mov	 r9d, edi
  00d6a	49 8b d6	 mov	 rdx, r14
  00d6d	48 8b c8	 mov	 rcx, rax
  00d70	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  00d75	41 ff 52 18	 call	 QWORD PTR [r10+24]
  00d79	84 c0		 test	 al, al
  00d7b	74 02		 je	 SHORT $LN29@renderOrdi

; 179  : 		{
; 180  : 			i3++;

  00d7d	ff c5		 inc	 ebp
$LN29@renderOrdi:

; 181  : 		}
; 182  : 								
; 183  : 		if(i4 < 2 && world->getBlock(x - 1, y - 1, z + 1)->solidCorner(world, x - 1, y - 1, z + 1, Relatives::EUS))

  00d7f	83 fe 02	 cmp	 esi, 2
  00d82	7d 3e		 jge	 SHORT $LN28@renderOrdi
  00d84	8b 54 24 34	 mov	 edx, DWORD PTR tv5611[rsp]
  00d88	45 8b cc	 mov	 r9d, r12d
  00d8b	44 8b c7	 mov	 r8d, edi
  00d8e	49 8b ce	 mov	 rcx, r14
  00d91	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00d96	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EUS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EUS
  00d9d	44 8b 44 24 34	 mov	 r8d, DWORD PTR tv5611[rsp]
  00da2	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00da5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00daa	44 8b cf	 mov	 r9d, edi
  00dad	49 8b d6	 mov	 rdx, r14
  00db0	48 8b c8	 mov	 rcx, rax
  00db3	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  00db8	41 ff 52 18	 call	 QWORD PTR [r10+24]
  00dbc	84 c0		 test	 al, al
  00dbe	74 02		 je	 SHORT $LN28@renderOrdi

; 184  : 		{
; 185  : 			i4++;

  00dc0	ff c6		 inc	 esi
$LN28@renderOrdi:
  00dc2	66 0f 6e 4c 24
	30		 movd	 xmm1, DWORD PTR i2$1$[rsp]
  00dc8	66 0f 6e c3	 movd	 xmm0, ebx

; 186  : 		}
; 187  : 
; 188  : 		float f1 = 1.0F - i1 * 0.1f;

  00dcc	41 0f 28 f9	 movaps	 xmm7, xmm9
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 112  : 	vertices.push_back(vertex);

  00dd0	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  00dd4	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00dd8	33 ff		 xor	 edi, edi

; 159  : 	vertex.a = a;

  00dda	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00ddf	49 89 7f 38	 mov	 QWORD PTR [r15+56], rdi
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 189  : 		float f2 = 1.0F - i2 * 0.1f;

  00de3	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00de6	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00de9	f3 41 0f 59 cb	 mulss	 xmm1, xmm11
  00dee	45 0f 28 c1	 movaps	 xmm8, xmm9

; 190  : 		float f3 = 1.0F - i3 * 0.1f;

  00df2	41 0f 28 f1	 movaps	 xmm6, xmm9
  00df6	f3 41 0f 59 c3	 mulss	 xmm0, xmm11
  00dfb	f3 44 0f 5c c1	 subss	 xmm8, xmm1
  00e00	66 0f 6e ce	 movd	 xmm1, esi
  00e04	f3 0f 5c f8	 subss	 xmm7, xmm0
  00e08	66 0f 6e c5	 movd	 xmm0, ebp

; 191  : 		float f4 = 1.0F - i4 * 0.1f;

  00e0c	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00e0f	f3 41 0f 59 cb	 mulss	 xmm1, xmm11
  00e14	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00e17	f3 41 0f 59 c3	 mulss	 xmm0, xmm11
  00e1c	f3 0f 5c f0	 subss	 xmm6, xmm0
  00e20	41 0f 28 c1	 movaps	 xmm0, xmm9
  00e24	f3 0f 5c c1	 subss	 xmm0, xmm1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  00e28	f3 41 0f 59 c4	 mulss	 xmm0, xmm12
  00e2d	f3 48 0f 2c c0	 cvttss2si rax, xmm0

; 108  : 	vertex.x = x + translation.x;

  00e32	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]
  00e38	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 156  : 	vertex.r = r;

  00e3d	41 88 47 40	 mov	 BYTE PTR [r15+64], al

; 157  : 	vertex.g = g;

  00e41	41 88 47 41	 mov	 BYTE PTR [r15+65], al

; 158  : 	vertex.b = b;

  00e45	41 88 47 42	 mov	 BYTE PTR [r15+66], al

; 108  : 	vertex.x = x + translation.x;

  00e49	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 109  : 	vertex.y = y + translation.y;

  00e4f	f3 41 0f 10 47
	24		 movss	 xmm0, DWORD PTR [r15+36]
  00e55	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  00e5a	f3 41 0f 11 47
	30		 movss	 DWORD PTR [r15+48], xmm0

; 110  : 	vertex.z = z + translation.z;

  00e60	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  00e66	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00e6b	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  00e71	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  00e76	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  00e7c	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 113  : 
; 114  : 	vs++;

  00e82	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  00e88	f3 41 0f 59 f4	 mulss	 xmm6, xmm12

; 112  : 	vertices.push_back(vertex);

  00e8d	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  00e91	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00e95	49 c7 47 38 00
	00 80 3f	 mov	 QWORD PTR [r15+56], 1065353216 ; 3f800000H

; 159  : 	vertex.a = a;

  00e9d	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 108  : 	vertex.x = x + translation.x;

  00ea2	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 70   : {}

  00ea7	f3 48 0f 2c de	 cvttss2si rbx, xmm6

; 109  : 	vertex.y = y + translation.y;

  00eac	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 156  : 	vertex.r = r;

  00eb1	41 88 5f 40	 mov	 BYTE PTR [r15+64], bl

; 157  : 	vertex.g = g;

  00eb5	41 88 5f 41	 mov	 BYTE PTR [r15+65], bl

; 158  : 	vertex.b = b;

  00eb9	41 88 5f 42	 mov	 BYTE PTR [r15+66], bl

; 108  : 	vertex.x = x + translation.x;

  00ebd	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  00ec3	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  00ec9	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1
  00ecf	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00ed4	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  00eda	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  00edf	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  00ee5	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 113  : 
; 114  : 	vs++;

  00eeb	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  00ef1	f3 41 0f 59 fc	 mulss	 xmm7, xmm12

; 112  : 	vertices.push_back(vertex);

  00ef6	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  00efa	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00efe	41 c7 47 38 00
	00 00 00	 mov	 DWORD PTR [r15+56], 0

; 164  : 	vertex.v = v;

  00f06	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  00f0e	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 70   : {}

  00f13	f3 48 0f 2c ff	 cvttss2si rdi, xmm7

; 109  : 	vertex.y = y + translation.y;

  00f18	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 159  : 	vertex.a = a;

  00f1d	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH
  00f22	41 88 7f 40	 mov	 BYTE PTR [r15+64], dil
  00f26	41 88 7f 41	 mov	 BYTE PTR [r15+65], dil

; 108  : 	vertex.x = x + translation.x;

  00f2a	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  00f30	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  00f36	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1

; 158  : 	vertex.b = b;

  00f3c	41 88 7f 42	 mov	 BYTE PTR [r15+66], dil

; 110  : 	vertex.z = z + translation.z;

  00f40	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  00f45	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  00f4b	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  00f50	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  00f56	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 113  : 
; 114  : 	vs++;

  00f5c	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 112  : 	vertices.push_back(vertex);

  00f62	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  00f66	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00f6a	49 c7 47 38 00
	00 80 3f	 mov	 QWORD PTR [r15+56], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  00f72	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 109  : 	vertex.y = y + translation.y;

  00f77	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 156  : 	vertex.r = r;

  00f7c	41 88 5f 40	 mov	 BYTE PTR [r15+64], bl

; 157  : 	vertex.g = g;

  00f80	41 88 5f 41	 mov	 BYTE PTR [r15+65], bl

; 158  : 	vertex.b = b;

  00f84	41 88 5f 42	 mov	 BYTE PTR [r15+66], bl

; 108  : 	vertex.x = x + translation.x;

  00f88	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  00f8e	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  00f94	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1

; 159  : 	vertex.a = a;

  00f9a	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 110  : 	vertex.z = z + translation.z;

  00f9f	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00fa4	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  00faa	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  00faf	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 113  : 
; 114  : 	vs++;

  00fb5	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 112  : 	vertices.push_back(vertex);

  00fbb	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  00fbf	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 70   : {}

  00fc3	f3 45 0f 59 c4	 mulss	 xmm8, xmm12

; 109  : 	vertex.y = y + translation.y;

  00fc8	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]
  00fce	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 70   : {}

  00fd3	f3 49 0f 2c c0	 cvttss2si rax, xmm8

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00fd8	41 c7 47 38 00
	00 80 3f	 mov	 DWORD PTR [r15+56], 1065353216 ; 3f800000H

; 164  : 	vertex.v = v;

  00fe0	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 159  : 	vertex.a = a;

  00fe8	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH
  00fed	41 88 47 40	 mov	 BYTE PTR [r15+64], al
  00ff1	41 88 47 41	 mov	 BYTE PTR [r15+65], al
  00ff5	41 88 47 42	 mov	 BYTE PTR [r15+66], al

; 108  : 	vertex.x = x + translation.x;

  00ff9	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  00fff	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  01005	f3 41 0f 58 ca	 addss	 xmm1, xmm10
  0100a	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  0100f	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1
  01015	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  0101b	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  01020	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  01026	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 113  : 
; 114  : 	vs++;

  0102c	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 112  : 	vertices.push_back(vertex);

  01032	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  01036	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]
  0103a	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  0103f	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  01044	41 c7 47 38 00
	00 00 00	 mov	 DWORD PTR [r15+56], 0

; 164  : 	vertex.v = v;

  0104c	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 156  : 	vertex.r = r;

  01054	41 88 7f 40	 mov	 BYTE PTR [r15+64], dil

; 108  : 	vertex.x = x + translation.x;

  01058	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  0105e	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  01064	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1

; 157  : 	vertex.g = g;

  0106a	41 88 7f 41	 mov	 BYTE PTR [r15+65], dil

; 158  : 	vertex.b = b;

  0106e	41 88 7f 42	 mov	 BYTE PTR [r15+66], dil

; 159  : 	vertex.a = a;

  01072	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 110  : 	vertex.z = z + translation.z;

  01077	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  0107c	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  01082	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01087	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
  0108d	8b 9c 24 08 01
	00 00		 mov	 ebx, DWORD PTR x$[rsp]
  01094	8b b4 24 10 01
	00 00		 mov	 esi, DWORD PTR y$[rsp]
  0109b	8b ac 24 18 01
	00 00		 mov	 ebp, DWORD PTR z$[rsp]
$LN235@renderOrdi:
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 201  : 	if(!world->getBlock(x, y + 1, z)->solidFace(world, x, y, z, Relatives::D))

  010a2	8d 7e 01	 lea	 edi, DWORD PTR [rsi+1]
  010a5	44 8b cd	 mov	 r9d, ebp
  010a8	8b d3		 mov	 edx, ebx
  010aa	44 8b c7	 mov	 r8d, edi
  010ad	49 8b ce	 mov	 rcx, r14
  010b0	89 7c 24 40	 mov	 DWORD PTR tv5598[rsp], edi
  010b4	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  010b9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?D@Relatives@@3PEAVBlockFace@@EA ; Relatives::D
  010c0	44 8b ce	 mov	 r9d, esi
  010c3	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  010c6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  010cb	44 8b c3	 mov	 r8d, ebx
  010ce	49 8b d6	 mov	 rdx, r14
  010d1	48 8b c8	 mov	 rcx, rax
  010d4	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  010d8	41 ff 52 08	 call	 QWORD PTR [r10+8]
  010dc	84 c0		 test	 al, al
  010de	0f 85 22 05 00
	00		 jne	 $LN295@renderOrdi

; 202  : 	{
; 203  : 		int i1 = 0;

  010e4	33 c9		 xor	 ecx, ecx

; 204  : 		int i2 = 0;
; 205  : 		int i3 = 0;
; 206  : 		int i4 = 0;
; 207  : 
; 208  : 		if(world->getBlock(x - 1, y + 1, z)->solidEdge(world, x - 1, y + 1, z, Relatives::ED))

  010e6	8d 43 ff	 lea	 eax, DWORD PTR [rbx-1]
  010e9	44 8b cd	 mov	 r9d, ebp
  010ec	89 4c 24 3c	 mov	 DWORD PTR i1$1$[rsp], ecx
  010f0	89 4c 24 30	 mov	 DWORD PTR i2$1$[rsp], ecx
  010f4	89 4c 24 44	 mov	 DWORD PTR i3$1$[rsp], ecx
  010f8	8b f1		 mov	 esi, ecx
  010fa	8b d0		 mov	 edx, eax
  010fc	44 8b c7	 mov	 r8d, edi
  010ff	49 8b ce	 mov	 rcx, r14
  01102	89 44 24 34	 mov	 DWORD PTR tv5610[rsp], eax
  01106	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0110b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?ED@Relatives@@3PEAVBlockEdge@@EA ; Relatives::ED
  01112	44 8d 43 ff	 lea	 r8d, DWORD PTR [rbx-1]
  01116	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01119	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0111e	44 8b cf	 mov	 r9d, edi
  01121	49 8b d6	 mov	 rdx, r14
  01124	48 8b c8	 mov	 rcx, rax
  01127	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  0112b	41 ff 52 10	 call	 QWORD PTR [r10+16]
  0112f	84 c0		 test	 al, al
  01131	74 0d		 je	 SHORT $LN26@renderOrdi

; 209  : 		{
; 210  : 			i1++;

  01133	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR i1$1$[rsp], 1

; 211  : 			i4++;

  0113b	be 01 00 00 00	 mov	 esi, 1
$LN26@renderOrdi:

; 212  : 		}
; 213  : 
; 214  : 		if(world->getBlock(x, y + 1, z - 1)->solidEdge(world, x, y + 1, z - 1, Relatives::DN))

  01140	45 8b cd	 mov	 r9d, r13d
  01143	44 8b c7	 mov	 r8d, edi
  01146	8b d3		 mov	 edx, ebx
  01148	49 8b ce	 mov	 rcx, r14
  0114b	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01150	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?DN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::DN
  01157	44 8b cf	 mov	 r9d, edi
  0115a	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  0115d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01162	44 8b c3	 mov	 r8d, ebx
  01165	49 8b d6	 mov	 rdx, r14
  01168	48 8b c8	 mov	 rcx, rax
  0116b	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  01170	41 ff 52 10	 call	 QWORD PTR [r10+16]
  01174	84 c0		 test	 al, al
  01176	74 0c		 je	 SHORT $LN25@renderOrdi

; 215  : 		{
; 216  : 			i1++;

  01178	ff 44 24 3c	 inc	 DWORD PTR i1$1$[rsp]

; 217  : 			i2++;

  0117c	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR i2$1$[rsp], 1
$LN25@renderOrdi:

; 218  : 		}
; 219  : 
; 220  : 		if(world->getBlock(x + 1, y + 1, z)->solidEdge(world, x + 1, y + 1, z, Relatives::WD))

  01184	8d 43 01	 lea	 eax, DWORD PTR [rbx+1]
  01187	44 8b cd	 mov	 r9d, ebp
  0118a	44 8b c7	 mov	 r8d, edi
  0118d	8b d0		 mov	 edx, eax
  0118f	49 8b ce	 mov	 rcx, r14
  01192	89 44 24 38	 mov	 DWORD PTR tv5602[rsp], eax
  01196	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0119b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WD@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WD
  011a2	44 8d 43 01	 lea	 r8d, DWORD PTR [rbx+1]
  011a6	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  011a9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  011ae	44 8b cf	 mov	 r9d, edi
  011b1	49 8b d6	 mov	 rdx, r14
  011b4	48 8b c8	 mov	 rcx, rax
  011b7	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  011bb	41 ff 52 10	 call	 QWORD PTR [r10+16]
  011bf	84 c0		 test	 al, al
  011c1	74 0b		 je	 SHORT $LN423@renderOrdi

; 221  : 		{
; 222  : 			i2++;

  011c3	ff 44 24 30	 inc	 DWORD PTR i2$1$[rsp]

; 223  : 			i3++;

  011c7	bd 01 00 00 00	 mov	 ebp, 1
  011cc	eb 04		 jmp	 SHORT $LN24@renderOrdi
$LN423@renderOrdi:
  011ce	8b 6c 24 44	 mov	 ebp, DWORD PTR i3$1$[rsp]
$LN24@renderOrdi:

; 224  : 		}
; 225  : 
; 226  : 		if(world->getBlock(x, y + 1, z + 1)->solidEdge(world, x, y + 1, z + 1, Relatives::DS))

  011d2	45 8b cc	 mov	 r9d, r12d
  011d5	44 8b c7	 mov	 r8d, edi
  011d8	8b d3		 mov	 edx, ebx
  011da	49 8b ce	 mov	 rcx, r14
  011dd	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  011e2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?DS@Relatives@@3PEAVBlockEdge@@EA ; Relatives::DS
  011e9	44 8b cf	 mov	 r9d, edi
  011ec	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  011ef	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  011f4	44 8b c3	 mov	 r8d, ebx
  011f7	49 8b d6	 mov	 rdx, r14
  011fa	48 8b c8	 mov	 rcx, rax
  011fd	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  01202	41 ff 52 10	 call	 QWORD PTR [r10+16]
  01206	84 c0		 test	 al, al
  01208	74 04		 je	 SHORT $LN23@renderOrdi

; 227  : 		{
; 228  : 			i3++;

  0120a	ff c5		 inc	 ebp

; 229  : 			i4++;

  0120c	ff c6		 inc	 esi
$LN23@renderOrdi:

; 230  : 		}
; 231  : 
; 232  : 		if(i1 < 2 && world->getBlock(x - 1, y + 1, z - 1)->solidCorner(world, x - 1, y + 1, z - 1, Relatives::EDN))

  0120e	8b 5c 24 3c	 mov	 ebx, DWORD PTR i1$1$[rsp]
  01212	83 fb 02	 cmp	 ebx, 2
  01215	7d 3e		 jge	 SHORT $LN22@renderOrdi
  01217	8b 54 24 34	 mov	 edx, DWORD PTR tv5610[rsp]
  0121b	45 8b cd	 mov	 r9d, r13d
  0121e	44 8b c7	 mov	 r8d, edi
  01221	49 8b ce	 mov	 rcx, r14
  01224	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01229	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EDN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EDN
  01230	44 8b 44 24 34	 mov	 r8d, DWORD PTR tv5610[rsp]
  01235	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01238	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0123d	44 8b cf	 mov	 r9d, edi
  01240	49 8b d6	 mov	 rdx, r14
  01243	48 8b c8	 mov	 rcx, rax
  01246	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  0124b	41 ff 52 18	 call	 QWORD PTR [r10+24]
  0124f	84 c0		 test	 al, al
  01251	74 02		 je	 SHORT $LN22@renderOrdi

; 233  : 		{
; 234  : 			i1++;

  01253	ff c3		 inc	 ebx
$LN22@renderOrdi:

; 235  : 		}
; 236  : 
; 237  : 		if(i2 < 2 && world->getBlock(x + 1, y + 1, z - 1)->solidCorner(world, x + 1, y + 1, z - 1, Relatives::WDN))

  01255	83 7c 24 30 02	 cmp	 DWORD PTR i2$1$[rsp], 2
  0125a	7d 40		 jge	 SHORT $LN21@renderOrdi
  0125c	8b 54 24 38	 mov	 edx, DWORD PTR tv5602[rsp]
  01260	45 8b cd	 mov	 r9d, r13d
  01263	44 8b c7	 mov	 r8d, edi
  01266	49 8b ce	 mov	 rcx, r14
  01269	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0126e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WDN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WDN
  01275	44 8b 44 24 38	 mov	 r8d, DWORD PTR tv5602[rsp]
  0127a	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  0127d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01282	44 8b cf	 mov	 r9d, edi
  01285	49 8b d6	 mov	 rdx, r14
  01288	48 8b c8	 mov	 rcx, rax
  0128b	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  01290	41 ff 52 18	 call	 QWORD PTR [r10+24]
  01294	84 c0		 test	 al, al
  01296	74 04		 je	 SHORT $LN21@renderOrdi

; 238  : 		{
; 239  : 			i2++;

  01298	ff 44 24 30	 inc	 DWORD PTR i2$1$[rsp]
$LN21@renderOrdi:

; 240  : 		}
; 241  : 								
; 242  : 		if(i3 < 2 && world->getBlock(x + 1, y + 1, z + 1)->solidCorner(world, x + 1, y + 1, z + 1, Relatives::WDS))

  0129c	83 fd 02	 cmp	 ebp, 2
  0129f	7d 3e		 jge	 SHORT $LN20@renderOrdi
  012a1	8b 54 24 38	 mov	 edx, DWORD PTR tv5602[rsp]
  012a5	45 8b cc	 mov	 r9d, r12d
  012a8	44 8b c7	 mov	 r8d, edi
  012ab	49 8b ce	 mov	 rcx, r14
  012ae	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  012b3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WDS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WDS
  012ba	44 8b 44 24 38	 mov	 r8d, DWORD PTR tv5602[rsp]
  012bf	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  012c2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  012c7	44 8b cf	 mov	 r9d, edi
  012ca	49 8b d6	 mov	 rdx, r14
  012cd	48 8b c8	 mov	 rcx, rax
  012d0	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  012d5	41 ff 52 18	 call	 QWORD PTR [r10+24]
  012d9	84 c0		 test	 al, al
  012db	74 02		 je	 SHORT $LN20@renderOrdi

; 243  : 		{
; 244  : 			i3++;

  012dd	ff c5		 inc	 ebp
$LN20@renderOrdi:

; 245  : 		}
; 246  : 								
; 247  : 		if(i4 < 2 && world->getBlock(x - 1, y + 1, z + 1)->solidCorner(world, x - 1, y + 1, z + 1, Relatives::EDS))

  012df	83 fe 02	 cmp	 esi, 2
  012e2	7d 3e		 jge	 SHORT $LN19@renderOrdi
  012e4	8b 54 24 34	 mov	 edx, DWORD PTR tv5610[rsp]
  012e8	45 8b cc	 mov	 r9d, r12d
  012eb	44 8b c7	 mov	 r8d, edi
  012ee	49 8b ce	 mov	 rcx, r14
  012f1	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  012f6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EDS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EDS
  012fd	44 8b 44 24 34	 mov	 r8d, DWORD PTR tv5610[rsp]
  01302	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01305	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0130a	44 8b cf	 mov	 r9d, edi
  0130d	49 8b d6	 mov	 rdx, r14
  01310	48 8b c8	 mov	 rcx, rax
  01313	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  01318	41 ff 52 18	 call	 QWORD PTR [r10+24]
  0131c	84 c0		 test	 al, al
  0131e	74 02		 je	 SHORT $LN19@renderOrdi

; 248  : 		{
; 249  : 			i4++;

  01320	ff c6		 inc	 esi
$LN19@renderOrdi:
  01322	66 0f 6e 4c 24
	30		 movd	 xmm1, DWORD PTR i2$1$[rsp]
  01328	66 0f 6e c3	 movd	 xmm0, ebx

; 250  : 		}
; 251  : 
; 252  : 		float f1 = 1.0F - i1 * 0.1f;

  0132c	41 0f 28 d1	 movaps	 xmm2, xmm9
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 112  : 	vertices.push_back(vertex);

  01330	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  01334	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  01338	33 ff		 xor	 edi, edi

; 159  : 	vertex.a = a;

  0133a	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  0133f	49 89 7f 38	 mov	 QWORD PTR [r15+56], rdi
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 253  : 		float f2 = 1.0F - i2 * 0.1f;

  01343	0f 5b c9	 cvtdq2ps xmm1, xmm1
  01346	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01349	f3 41 0f 59 cb	 mulss	 xmm1, xmm11

; 254  : 		float f3 = 1.0F - i3 * 0.1f;

  0134e	45 0f 28 c1	 movaps	 xmm8, xmm9
  01352	41 0f 28 f1	 movaps	 xmm6, xmm9

; 255  : 		float f4 = 1.0F - i4 * 0.1f;

  01356	41 0f 28 f9	 movaps	 xmm7, xmm9
  0135a	f3 41 0f 59 c3	 mulss	 xmm0, xmm11
  0135f	f3 0f 5c f1	 subss	 xmm6, xmm1
  01363	f3 0f 5c d0	 subss	 xmm2, xmm0
  01367	66 0f 6e c5	 movd	 xmm0, ebp
  0136b	66 0f 6e ce	 movd	 xmm1, esi
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  0136f	f3 41 0f 59 d4	 mulss	 xmm2, xmm12
  01374	f3 48 0f 2c c2	 cvttss2si rax, xmm2
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 254  : 		float f3 = 1.0F - i3 * 0.1f;

  01379	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 255  : 		float f4 = 1.0F - i4 * 0.1f;

  0137c	0f 5b c9	 cvtdq2ps xmm1, xmm1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 156  : 	vertex.r = r;

  0137f	41 88 47 40	 mov	 BYTE PTR [r15+64], al

; 157  : 	vertex.g = g;

  01383	41 88 47 41	 mov	 BYTE PTR [r15+65], al

; 158  : 	vertex.b = b;

  01387	41 88 47 42	 mov	 BYTE PTR [r15+66], al
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 254  : 		float f3 = 1.0F - i3 * 0.1f;

  0138b	f3 41 0f 59 c3	 mulss	 xmm0, xmm11

; 255  : 		float f4 = 1.0F - i4 * 0.1f;

  01390	f3 41 0f 59 cb	 mulss	 xmm1, xmm11
  01395	f3 44 0f 5c c0	 subss	 xmm8, xmm0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 108  : 	vertex.x = x + translation.x;

  0139a	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 255  : 		float f4 = 1.0F - i4 * 0.1f;

  013a0	f3 0f 5c f9	 subss	 xmm7, xmm1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 108  : 	vertex.x = x + translation.x;

  013a4	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  013a9	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 109  : 	vertex.y = y + translation.y;

  013af	f3 41 0f 10 47
	24		 movss	 xmm0, DWORD PTR [r15+36]
  013b5	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  013ba	f3 41 0f 11 47
	30		 movss	 DWORD PTR [r15+48], xmm0

; 110  : 	vertex.z = z + translation.z;

  013c0	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  013c6	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  013cb	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  013d1	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  013d6	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  013dc	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 113  : 
; 114  : 	vs++;

  013e2	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  013e8	f3 41 0f 59 f4	 mulss	 xmm6, xmm12

; 112  : 	vertices.push_back(vertex);

  013ed	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  013f1	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  013f5	49 c7 47 38 00
	00 80 3f	 mov	 QWORD PTR [r15+56], 1065353216 ; 3f800000H

; 159  : 	vertex.a = a;

  013fd	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 108  : 	vertex.x = x + translation.x;

  01402	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 70   : {}

  01407	f3 48 0f 2c de	 cvttss2si rbx, xmm6

; 109  : 	vertex.y = y + translation.y;

  0140c	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 156  : 	vertex.r = r;

  01411	41 88 5f 40	 mov	 BYTE PTR [r15+64], bl

; 157  : 	vertex.g = g;

  01415	41 88 5f 41	 mov	 BYTE PTR [r15+65], bl

; 158  : 	vertex.b = b;

  01419	41 88 5f 42	 mov	 BYTE PTR [r15+66], bl

; 108  : 	vertex.x = x + translation.x;

  0141d	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  01423	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  01429	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1
  0142f	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  01434	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  0143a	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  0143f	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 110  : 	vertex.z = z + translation.z;

  01445	f3 41 0f 10 4f
	28		 movss	 xmm1, DWORD PTR [r15+40]

; 113  : 
; 114  : 	vs++;

  0144b	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  01451	f3 41 0f 59 fc	 mulss	 xmm7, xmm12

; 112  : 	vertices.push_back(vertex);

  01456	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  0145a	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  0145e	41 c7 47 38 00
	00 00 00	 mov	 DWORD PTR [r15+56], 0

; 164  : 	vertex.v = v;

  01466	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  0146e	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 70   : {}

  01473	f3 48 0f 2c ff	 cvttss2si rdi, xmm7

; 110  : 	vertex.z = z + translation.z;

  01478	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 159  : 	vertex.a = a;

  0147d	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH
  01482	41 88 7f 40	 mov	 BYTE PTR [r15+64], dil
  01486	41 88 7f 41	 mov	 BYTE PTR [r15+65], dil

; 108  : 	vertex.x = x + translation.x;

  0148a	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 109  : 	vertex.y = y + translation.y;

  01490	f3 41 0f 10 47
	24		 movss	 xmm0, DWORD PTR [r15+36]

; 110  : 	vertex.z = z + translation.z;

  01496	f3 41 0f 11 4f
	34		 movss	 DWORD PTR [r15+52], xmm1

; 158  : 	vertex.b = b;

  0149c	41 88 7f 42	 mov	 BYTE PTR [r15+66], dil

; 109  : 	vertex.y = y + translation.y;

  014a0	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  014a5	f3 41 0f 11 47
	30		 movss	 DWORD PTR [r15+48], xmm0

; 112  : 	vertices.push_back(vertex);

  014ab	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  014b0	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  014b6	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 113  : 
; 114  : 	vs++;

  014bc	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 112  : 	vertices.push_back(vertex);

  014c2	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  014c6	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  014ca	49 c7 47 38 00
	00 80 3f	 mov	 QWORD PTR [r15+56], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  014d2	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 109  : 	vertex.y = y + translation.y;

  014d7	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 156  : 	vertex.r = r;

  014dc	41 88 5f 40	 mov	 BYTE PTR [r15+64], bl

; 157  : 	vertex.g = g;

  014e0	41 88 5f 41	 mov	 BYTE PTR [r15+65], bl

; 158  : 	vertex.b = b;

  014e4	41 88 5f 42	 mov	 BYTE PTR [r15+66], bl

; 108  : 	vertex.x = x + translation.x;

  014e8	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  014ee	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  014f4	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1

; 159  : 	vertex.a = a;

  014fa	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 110  : 	vertex.z = z + translation.z;

  014ff	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  01504	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  0150a	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  0150f	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 113  : 
; 114  : 	vs++;

  01515	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 112  : 	vertices.push_back(vertex);

  0151b	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  0151f	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 70   : {}

  01523	f3 45 0f 59 c4	 mulss	 xmm8, xmm12

; 109  : 	vertex.y = y + translation.y;

  01528	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]
  0152e	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 70   : {}

  01533	f3 49 0f 2c c0	 cvttss2si rax, xmm8

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  01538	41 c7 47 38 00
	00 80 3f	 mov	 DWORD PTR [r15+56], 1065353216 ; 3f800000H

; 164  : 	vertex.v = v;

  01540	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 159  : 	vertex.a = a;

  01548	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH
  0154d	41 88 47 40	 mov	 BYTE PTR [r15+64], al
  01551	41 88 47 41	 mov	 BYTE PTR [r15+65], al
  01555	41 88 47 42	 mov	 BYTE PTR [r15+66], al

; 108  : 	vertex.x = x + translation.x;

  01559	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  0155f	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  01565	f3 41 0f 58 c9	 addss	 xmm1, xmm9
  0156a	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  0156f	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1
  01575	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  0157b	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  01580	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 110  : 	vertex.z = z + translation.z;

  01586	f3 41 0f 10 4f
	28		 movss	 xmm1, DWORD PTR [r15+40]

; 113  : 
; 114  : 	vs++;

  0158c	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 112  : 	vertices.push_back(vertex);

  01592	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  01596	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]
  0159a	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  0159f	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  015a4	41 c7 47 38 00
	00 00 00	 mov	 DWORD PTR [r15+56], 0

; 164  : 	vertex.v = v;

  015ac	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 156  : 	vertex.r = r;

  015b4	41 88 7f 40	 mov	 BYTE PTR [r15+64], dil

; 108  : 	vertex.x = x + translation.x;

  015b8	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 109  : 	vertex.y = y + translation.y;

  015be	f3 41 0f 10 47
	24		 movss	 xmm0, DWORD PTR [r15+36]

; 110  : 	vertex.z = z + translation.z;

  015c4	f3 41 0f 11 4f
	34		 movss	 DWORD PTR [r15+52], xmm1

; 157  : 	vertex.g = g;

  015ca	41 88 7f 41	 mov	 BYTE PTR [r15+65], dil

; 158  : 	vertex.b = b;

  015ce	41 88 7f 42	 mov	 BYTE PTR [r15+66], dil

; 159  : 	vertex.a = a;

  015d2	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 109  : 	vertex.y = y + translation.y;

  015d7	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  015dc	f3 41 0f 11 47
	30		 movss	 DWORD PTR [r15+48], xmm0

; 112  : 	vertices.push_back(vertex);

  015e2	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  015e7	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
  015ed	8b 9c 24 08 01
	00 00		 mov	 ebx, DWORD PTR x$[rsp]
  015f4	8b 7c 24 40	 mov	 edi, DWORD PTR tv5598[rsp]
  015f8	8b b4 24 10 01
	00 00		 mov	 esi, DWORD PTR y$[rsp]
  015ff	8b ac 24 18 01
	00 00		 mov	 ebp, DWORD PTR z$[rsp]
$LN295@renderOrdi:
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 265  : 	if(!world->getBlock(x - 1, y, z)->solidFace(world, x - 1, y, z, Relatives::E))

  01606	8d 43 ff	 lea	 eax, DWORD PTR [rbx-1]
  01609	44 8b cd	 mov	 r9d, ebp
  0160c	44 8b c6	 mov	 r8d, esi
  0160f	8b d0		 mov	 edx, eax
  01611	49 8b ce	 mov	 rcx, r14
  01614	89 44 24 3c	 mov	 DWORD PTR tv5609[rsp], eax
  01618	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0161d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?E@Relatives@@3PEAVBlockFace@@EA ; Relatives::E
  01624	44 8d 43 ff	 lea	 r8d, DWORD PTR [rbx-1]
  01628	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  0162b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01630	44 8b ce	 mov	 r9d, esi
  01633	49 8b d6	 mov	 rdx, r14
  01636	48 8b c8	 mov	 rcx, rax
  01639	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  0163d	41 ff 52 08	 call	 QWORD PTR [r10+8]
  01641	84 c0		 test	 al, al
  01643	0f 85 1f 05 00
	00		 jne	 $LN355@renderOrdi

; 266  : 	{
; 267  : 		int i1 = 0;
; 268  : 		int i2 = 0;
; 269  : 		int i3 = 0;
; 270  : 		int i4 = 0;
; 271  : 
; 272  : 		if(world->getBlock(x - 1, y - 1, z)->solidEdge(world, x - 1, y - 1, z, Relatives::EU))

  01649	8b 54 24 3c	 mov	 edx, DWORD PTR tv5609[rsp]
  0164d	33 c0		 xor	 eax, eax
  0164f	8d 5e ff	 lea	 ebx, DWORD PTR [rsi-1]
  01652	44 8b cd	 mov	 r9d, ebp
  01655	49 8b ce	 mov	 rcx, r14
  01658	44 8b c3	 mov	 r8d, ebx
  0165b	89 44 24 34	 mov	 DWORD PTR i1$1$[rsp], eax
  0165f	89 44 24 38	 mov	 DWORD PTR i2$1$[rsp], eax
  01663	89 44 24 30	 mov	 DWORD PTR i3$1$[rsp], eax
  01667	89 44 24 44	 mov	 DWORD PTR i4$1$[rsp], eax
  0166b	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01670	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EU@Relatives@@3PEAVBlockEdge@@EA ; Relatives::EU
  01677	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  0167a	44 8b 44 24 3c	 mov	 r8d, DWORD PTR tv5609[rsp]
  0167f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01684	44 8b cb	 mov	 r9d, ebx
  01687	49 8b d6	 mov	 rdx, r14
  0168a	48 8b c8	 mov	 rcx, rax
  0168d	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  01691	41 ff 52 10	 call	 QWORD PTR [r10+16]
  01695	84 c0		 test	 al, al
  01697	74 10		 je	 SHORT $LN17@renderOrdi

; 273  : 		{
; 274  : 			i1++;

  01699	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR i1$1$[rsp], 1

; 275  : 			i4++;

  016a1	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR i4$1$[rsp], 1
$LN17@renderOrdi:

; 276  : 		}
; 277  : 
; 278  : 		if(world->getBlock(x - 1, y, z - 1)->solidEdge(world, x - 1, y, z - 1, Relatives::EN))

  016a9	8b 54 24 3c	 mov	 edx, DWORD PTR tv5609[rsp]
  016ad	45 8b cd	 mov	 r9d, r13d
  016b0	44 8b c6	 mov	 r8d, esi
  016b3	49 8b ce	 mov	 rcx, r14
  016b6	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  016bb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::EN
  016c2	44 8b 44 24 3c	 mov	 r8d, DWORD PTR tv5609[rsp]
  016c7	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  016ca	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  016cf	44 8b ce	 mov	 r9d, esi
  016d2	49 8b d6	 mov	 rdx, r14
  016d5	48 8b c8	 mov	 rcx, rax
  016d8	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  016dd	41 ff 52 10	 call	 QWORD PTR [r10+16]
  016e1	84 c0		 test	 al, al
  016e3	74 0c		 je	 SHORT $LN16@renderOrdi

; 279  : 		{
; 280  : 			i1++;

  016e5	ff 44 24 34	 inc	 DWORD PTR i1$1$[rsp]

; 281  : 			i2++;

  016e9	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR i2$1$[rsp], 1
$LN16@renderOrdi:

; 282  : 		}
; 283  : 
; 284  : 		if(world->getBlock(x - 1, y + 1, z)->solidEdge(world, x - 1, y + 1, z, Relatives::ED))

  016f1	8b 54 24 3c	 mov	 edx, DWORD PTR tv5609[rsp]
  016f5	44 8b cd	 mov	 r9d, ebp
  016f8	44 8b c7	 mov	 r8d, edi
  016fb	49 8b ce	 mov	 rcx, r14
  016fe	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01703	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?ED@Relatives@@3PEAVBlockEdge@@EA ; Relatives::ED
  0170a	44 8b cf	 mov	 r9d, edi
  0170d	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01710	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01715	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  01719	8b 6c 24 3c	 mov	 ebp, DWORD PTR tv5609[rsp]
  0171d	49 8b d6	 mov	 rdx, r14
  01720	48 8b c8	 mov	 rcx, rax
  01723	44 8b c5	 mov	 r8d, ebp
  01726	41 ff 52 10	 call	 QWORD PTR [r10+16]
  0172a	84 c0		 test	 al, al
  0172c	74 0c		 je	 SHORT $LN15@renderOrdi

; 285  : 		{
; 286  : 			i2++;

  0172e	ff 44 24 38	 inc	 DWORD PTR i2$1$[rsp]

; 287  : 			i3++;

  01732	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR i3$1$[rsp], 1
$LN15@renderOrdi:

; 288  : 		}
; 289  : 
; 290  : 		if(world->getBlock(x - 1, y, z + 1)->solidEdge(world, x - 1, y, z + 1, Relatives::ES))

  0173a	45 8b cc	 mov	 r9d, r12d
  0173d	44 8b c6	 mov	 r8d, esi
  01740	8b d5		 mov	 edx, ebp
  01742	49 8b ce	 mov	 rcx, r14
  01745	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0174a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?ES@Relatives@@3PEAVBlockEdge@@EA ; Relatives::ES
  01751	44 8b ce	 mov	 r9d, esi
  01754	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01757	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0175c	44 8b c5	 mov	 r8d, ebp
  0175f	49 8b d6	 mov	 rdx, r14
  01762	48 8b c8	 mov	 rcx, rax
  01765	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  0176a	41 ff 52 10	 call	 QWORD PTR [r10+16]

; 291  : 		{
; 292  : 			i3++;
; 293  : 			i4++;

  0176e	8b 74 24 44	 mov	 esi, DWORD PTR i4$1$[rsp]
  01772	84 c0		 test	 al, al
  01774	74 06		 je	 SHORT $LN14@renderOrdi
  01776	ff 44 24 30	 inc	 DWORD PTR i3$1$[rsp]
  0177a	ff c6		 inc	 esi
$LN14@renderOrdi:

; 294  : 		}
; 295  : 
; 296  : 		if(i1 < 2 && world->getBlock(x - 1, y - 1, z - 1)->solidCorner(world, x - 1, y - 1, z - 1, Relatives::EUN))

  0177c	83 7c 24 34 02	 cmp	 DWORD PTR i1$1$[rsp], 2
  01781	7d 3c		 jge	 SHORT $LN13@renderOrdi
  01783	45 8b cd	 mov	 r9d, r13d
  01786	44 8b c3	 mov	 r8d, ebx
  01789	8b d5		 mov	 edx, ebp
  0178b	49 8b ce	 mov	 rcx, r14
  0178e	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01793	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EUN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EUN
  0179a	44 8b cb	 mov	 r9d, ebx
  0179d	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  017a0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  017a5	44 8b c5	 mov	 r8d, ebp
  017a8	49 8b d6	 mov	 rdx, r14
  017ab	48 8b c8	 mov	 rcx, rax
  017ae	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  017b3	41 ff 52 18	 call	 QWORD PTR [r10+24]
  017b7	84 c0		 test	 al, al
  017b9	74 04		 je	 SHORT $LN13@renderOrdi

; 297  : 		{
; 298  : 			i1++;

  017bb	ff 44 24 34	 inc	 DWORD PTR i1$1$[rsp]
$LN13@renderOrdi:

; 299  : 		}
; 300  : 
; 301  : 		if(i2 < 2 && world->getBlock(x - 1, y + 1, z - 1)->solidCorner(world, x - 1, y + 1, z - 1, Relatives::EDN))

  017bf	83 7c 24 38 02	 cmp	 DWORD PTR i2$1$[rsp], 2
  017c4	7d 3c		 jge	 SHORT $LN12@renderOrdi
  017c6	45 8b cd	 mov	 r9d, r13d
  017c9	44 8b c7	 mov	 r8d, edi
  017cc	8b d5		 mov	 edx, ebp
  017ce	49 8b ce	 mov	 rcx, r14
  017d1	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  017d6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EDN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EDN
  017dd	44 8b cf	 mov	 r9d, edi
  017e0	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  017e3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  017e8	44 8b c5	 mov	 r8d, ebp
  017eb	49 8b d6	 mov	 rdx, r14
  017ee	48 8b c8	 mov	 rcx, rax
  017f1	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  017f6	41 ff 52 18	 call	 QWORD PTR [r10+24]
  017fa	84 c0		 test	 al, al
  017fc	74 04		 je	 SHORT $LN12@renderOrdi

; 302  : 		{
; 303  : 			i2++;

  017fe	ff 44 24 38	 inc	 DWORD PTR i2$1$[rsp]
$LN12@renderOrdi:

; 304  : 		}
; 305  : 								
; 306  : 		if(i3 < 2 && world->getBlock(x - 1, y + 1, z + 1)->solidCorner(world, x - 1, y + 1, z + 1, Relatives::EDS))

  01802	83 7c 24 30 02	 cmp	 DWORD PTR i3$1$[rsp], 2
  01807	7d 40		 jge	 SHORT $LN425@renderOrdi
  01809	45 8b cc	 mov	 r9d, r12d
  0180c	44 8b c7	 mov	 r8d, edi
  0180f	8b d5		 mov	 edx, ebp
  01811	49 8b ce	 mov	 rcx, r14
  01814	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01819	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EDS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EDS
  01820	44 8b cf	 mov	 r9d, edi
  01823	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01826	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0182b	44 8b c5	 mov	 r8d, ebp
  0182e	49 8b d6	 mov	 rdx, r14
  01831	48 8b c8	 mov	 rcx, rax
  01834	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  01839	41 ff 52 18	 call	 QWORD PTR [r10+24]

; 307  : 		{
; 308  : 			i3++;

  0183d	8b 7c 24 30	 mov	 edi, DWORD PTR i3$1$[rsp]
  01841	84 c0		 test	 al, al
  01843	74 08		 je	 SHORT $LN11@renderOrdi
  01845	ff c7		 inc	 edi
  01847	eb 04		 jmp	 SHORT $LN11@renderOrdi
$LN425@renderOrdi:
  01849	8b 7c 24 30	 mov	 edi, DWORD PTR i3$1$[rsp]
$LN11@renderOrdi:

; 309  : 		}
; 310  : 								
; 311  : 		if(i4 < 2 && world->getBlock(x - 1, y - 1, z + 1)->solidCorner(world, x - 1, y - 1, z + 1, Relatives::EUS))

  0184d	83 fe 02	 cmp	 esi, 2
  01850	7d 3a		 jge	 SHORT $LN10@renderOrdi
  01852	45 8b cc	 mov	 r9d, r12d
  01855	44 8b c3	 mov	 r8d, ebx
  01858	8b d5		 mov	 edx, ebp
  0185a	49 8b ce	 mov	 rcx, r14
  0185d	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01862	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EUS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EUS
  01869	44 8b cb	 mov	 r9d, ebx
  0186c	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  0186f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01874	44 8b c5	 mov	 r8d, ebp
  01877	49 8b d6	 mov	 rdx, r14
  0187a	48 8b c8	 mov	 rcx, rax
  0187d	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  01882	41 ff 52 18	 call	 QWORD PTR [r10+24]
  01886	84 c0		 test	 al, al
  01888	74 02		 je	 SHORT $LN10@renderOrdi

; 312  : 		{
; 313  : 			i4++;

  0188a	ff c6		 inc	 esi
$LN10@renderOrdi:
  0188c	66 0f 6e 44 24
	34		 movd	 xmm0, DWORD PTR i1$1$[rsp]
  01892	66 0f 6e 4c 24
	38		 movd	 xmm1, DWORD PTR i2$1$[rsp]

; 316  : 		float f1 = 1.0F - i1 * 0.1f;

  01898	41 0f 28 d1	 movaps	 xmm2, xmm9
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 112  : 	vertices.push_back(vertex);

  0189c	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  018a0	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  018a4	49 c7 47 38 00
	00 80 3f	 mov	 QWORD PTR [r15+56], 1065353216 ; 3f800000H

; 159  : 	vertex.a = a;

  018ac	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 316  : 		float f1 = 1.0F - i1 * 0.1f;

  018b1	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 317  : 		float f2 = 1.0F - i2 * 0.1f;

  018b4	0f 5b c9	 cvtdq2ps xmm1, xmm1

; 318  : 		float f3 = 1.0F - i3 * 0.1f;

  018b7	45 0f 28 c1	 movaps	 xmm8, xmm9
  018bb	41 0f 28 f1	 movaps	 xmm6, xmm9

; 319  : 		float f4 = 1.0F - i4 * 0.1f;

  018bf	41 0f 28 f9	 movaps	 xmm7, xmm9
  018c3	f3 41 0f 59 c3	 mulss	 xmm0, xmm11
  018c8	f3 41 0f 59 cb	 mulss	 xmm1, xmm11
  018cd	f3 0f 5c d0	 subss	 xmm2, xmm0
  018d1	f3 0f 5c f1	 subss	 xmm6, xmm1
  018d5	66 0f 6e c7	 movd	 xmm0, edi
  018d9	66 0f 6e ce	 movd	 xmm1, esi
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  018dd	f3 41 0f 59 d4	 mulss	 xmm2, xmm12
  018e2	f3 48 0f 2c c2	 cvttss2si rax, xmm2
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 318  : 		float f3 = 1.0F - i3 * 0.1f;

  018e7	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 319  : 		float f4 = 1.0F - i4 * 0.1f;

  018ea	0f 5b c9	 cvtdq2ps xmm1, xmm1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 156  : 	vertex.r = r;

  018ed	41 88 47 40	 mov	 BYTE PTR [r15+64], al

; 157  : 	vertex.g = g;

  018f1	41 88 47 41	 mov	 BYTE PTR [r15+65], al

; 158  : 	vertex.b = b;

  018f5	41 88 47 42	 mov	 BYTE PTR [r15+66], al
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 318  : 		float f3 = 1.0F - i3 * 0.1f;

  018f9	f3 41 0f 59 c3	 mulss	 xmm0, xmm11

; 319  : 		float f4 = 1.0F - i4 * 0.1f;

  018fe	f3 41 0f 59 cb	 mulss	 xmm1, xmm11
  01903	f3 44 0f 5c c0	 subss	 xmm8, xmm0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 108  : 	vertex.x = x + translation.x;

  01908	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 319  : 		float f4 = 1.0F - i4 * 0.1f;

  0190e	f3 0f 5c f9	 subss	 xmm7, xmm1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 108  : 	vertex.x = x + translation.x;

  01912	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  01917	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 109  : 	vertex.y = y + translation.y;

  0191d	f3 41 0f 10 47
	24		 movss	 xmm0, DWORD PTR [r15+36]
  01923	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  01928	f3 41 0f 11 47
	30		 movss	 DWORD PTR [r15+48], xmm0

; 110  : 	vertex.z = z + translation.z;

  0192e	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  01934	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  01939	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  0193f	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  01944	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 110  : 	vertex.z = z + translation.z;

  0194a	f3 41 0f 10 4f
	28		 movss	 xmm1, DWORD PTR [r15+40]

; 113  : 
; 114  : 	vs++;

  01950	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  01956	f3 41 0f 59 f4	 mulss	 xmm6, xmm12

; 112  : 	vertices.push_back(vertex);

  0195b	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  0195f	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  01963	41 c7 47 38 00
	00 80 3f	 mov	 DWORD PTR [r15+56], 1065353216 ; 3f800000H

; 164  : 	vertex.v = v;

  0196b	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  01973	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 70   : {}

  01978	f3 48 0f 2c de	 cvttss2si rbx, xmm6

; 110  : 	vertex.z = z + translation.z;

  0197d	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 159  : 	vertex.a = a;

  01982	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH
  01987	41 88 5f 40	 mov	 BYTE PTR [r15+64], bl
  0198b	41 88 5f 41	 mov	 BYTE PTR [r15+65], bl

; 108  : 	vertex.x = x + translation.x;

  0198f	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 109  : 	vertex.y = y + translation.y;

  01995	f3 41 0f 10 47
	24		 movss	 xmm0, DWORD PTR [r15+36]

; 110  : 	vertex.z = z + translation.z;

  0199b	f3 41 0f 11 4f
	34		 movss	 DWORD PTR [r15+52], xmm1

; 158  : 	vertex.b = b;

  019a1	41 88 5f 42	 mov	 BYTE PTR [r15+66], bl

; 109  : 	vertex.y = y + translation.y;

  019a5	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  019aa	f3 41 0f 11 47
	30		 movss	 DWORD PTR [r15+48], xmm0

; 112  : 	vertices.push_back(vertex);

  019b0	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  019b5	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  019bb	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 113  : 
; 114  : 	vs++;

  019c1	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  019c7	33 c0		 xor	 eax, eax

; 70   : {}

  019c9	f3 41 0f 59 fc	 mulss	 xmm7, xmm12

; 112  : 	vertices.push_back(vertex);

  019ce	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  019d2	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 159  : 	vertex.a = a;

  019d6	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 108  : 	vertex.x = x + translation.x;

  019db	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 70   : {}

  019e0	f3 48 0f 2c ff	 cvttss2si rdi, xmm7

; 109  : 	vertex.y = y + translation.y;

  019e5	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  019ea	49 89 47 38	 mov	 QWORD PTR [r15+56], rax

; 156  : 	vertex.r = r;

  019ee	41 88 7f 40	 mov	 BYTE PTR [r15+64], dil

; 157  : 	vertex.g = g;

  019f2	41 88 7f 41	 mov	 BYTE PTR [r15+65], dil

; 108  : 	vertex.x = x + translation.x;

  019f6	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  019fc	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  01a02	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1

; 158  : 	vertex.b = b;

  01a08	41 88 7f 42	 mov	 BYTE PTR [r15+66], dil

; 110  : 	vertex.z = z + translation.z;

  01a0c	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  01a11	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  01a17	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  01a1c	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 110  : 	vertex.z = z + translation.z;

  01a22	f3 41 0f 10 4f
	28		 movss	 xmm1, DWORD PTR [r15+40]

; 113  : 
; 114  : 	vs++;

  01a28	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 112  : 	vertices.push_back(vertex);

  01a2e	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  01a32	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  01a36	41 c7 47 38 00
	00 80 3f	 mov	 DWORD PTR [r15+56], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  01a3e	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 110  : 	vertex.z = z + translation.z;

  01a43	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 164  : 	vertex.v = v;

  01a48	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 156  : 	vertex.r = r;

  01a50	41 88 5f 40	 mov	 BYTE PTR [r15+64], bl

; 157  : 	vertex.g = g;

  01a54	41 88 5f 41	 mov	 BYTE PTR [r15+65], bl

; 108  : 	vertex.x = x + translation.x;

  01a58	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 109  : 	vertex.y = y + translation.y;

  01a5e	f3 41 0f 10 47
	24		 movss	 xmm0, DWORD PTR [r15+36]

; 110  : 	vertex.z = z + translation.z;

  01a64	f3 41 0f 11 4f
	34		 movss	 DWORD PTR [r15+52], xmm1

; 158  : 	vertex.b = b;

  01a6a	41 88 5f 42	 mov	 BYTE PTR [r15+66], bl

; 159  : 	vertex.a = a;

  01a6e	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 109  : 	vertex.y = y + translation.y;

  01a73	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  01a78	f3 41 0f 11 47
	30		 movss	 DWORD PTR [r15+48], xmm0

; 112  : 	vertices.push_back(vertex);

  01a7e	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01a83	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 108  : 	vertex.x = x + translation.x;

  01a89	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 110  : 	vertex.z = z + translation.z;

  01a8f	f3 41 0f 10 4f
	28		 movss	 xmm1, DWORD PTR [r15+40]

; 70   : {}

  01a95	f3 45 0f 59 c4	 mulss	 xmm8, xmm12

; 112  : 	vertices.push_back(vertex);

  01a9a	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  01a9e	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  01aa2	33 db		 xor	 ebx, ebx

; 108  : 	vertex.x = x + translation.x;

  01aa4	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 70   : {}

  01aa9	f3 49 0f 2c c0	 cvttss2si rax, xmm8

; 110  : 	vertex.z = z + translation.z;

  01aae	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 164  : 	vertex.v = v;

  01ab3	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 159  : 	vertex.a = a;

  01abb	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  01ac0	41 89 5f 38	 mov	 DWORD PTR [r15+56], ebx

; 156  : 	vertex.r = r;

  01ac4	41 88 47 40	 mov	 BYTE PTR [r15+64], al

; 157  : 	vertex.g = g;

  01ac8	41 88 47 41	 mov	 BYTE PTR [r15+65], al

; 158  : 	vertex.b = b;

  01acc	41 88 47 42	 mov	 BYTE PTR [r15+66], al

; 108  : 	vertex.x = x + translation.x;

  01ad0	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 109  : 	vertex.y = y + translation.y;

  01ad6	f3 41 0f 10 47
	24		 movss	 xmm0, DWORD PTR [r15+36]

; 110  : 	vertex.z = z + translation.z;

  01adc	f3 41 0f 11 4f
	34		 movss	 DWORD PTR [r15+52], xmm1
  01ae2	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  01ae7	f3 41 0f 11 47
	30		 movss	 DWORD PTR [r15+48], xmm0

; 112  : 	vertices.push_back(vertex);

  01aed	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01af2	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 108  : 	vertex.x = x + translation.x;

  01af8	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  01afe	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 112  : 	vertices.push_back(vertex);

  01b04	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  01b08	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  01b0c	49 89 5f 38	 mov	 QWORD PTR [r15+56], rbx

; 108  : 	vertex.x = x + translation.x;

  01b10	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 109  : 	vertex.y = y + translation.y;

  01b15	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 156  : 	vertex.r = r;

  01b1a	41 88 7f 40	 mov	 BYTE PTR [r15+64], dil

; 157  : 	vertex.g = g;

  01b1e	41 88 7f 41	 mov	 BYTE PTR [r15+65], dil

; 158  : 	vertex.b = b;

  01b22	41 88 7f 42	 mov	 BYTE PTR [r15+66], dil

; 108  : 	vertex.x = x + translation.x;

  01b26	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  01b2c	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  01b32	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1

; 159  : 	vertex.a = a;

  01b38	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 110  : 	vertex.z = z + translation.z;

  01b3d	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  01b42	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  01b48	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01b4d	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
  01b53	8b 9c 24 08 01
	00 00		 mov	 ebx, DWORD PTR x$[rsp]
  01b5a	8b b4 24 10 01
	00 00		 mov	 esi, DWORD PTR y$[rsp]
  01b61	8b ac 24 18 01
	00 00		 mov	 ebp, DWORD PTR z$[rsp]
$LN355@renderOrdi:
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 329  : 	if(!world->getBlock(x + 1, y, z)->solidFace(world, x, y, z, Relatives::W))

  01b68	8d 7b 01	 lea	 edi, DWORD PTR [rbx+1]
  01b6b	44 8b cd	 mov	 r9d, ebp
  01b6e	44 8b c6	 mov	 r8d, esi
  01b71	8b d7		 mov	 edx, edi
  01b73	49 8b ce	 mov	 rcx, r14
  01b76	89 7c 24 3c	 mov	 DWORD PTR tv5601[rsp], edi
  01b7a	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01b7f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?W@Relatives@@3PEAVBlockFace@@EA ; Relatives::W
  01b86	44 8b ce	 mov	 r9d, esi
  01b89	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01b8c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01b91	44 8b c3	 mov	 r8d, ebx
  01b94	49 8b d6	 mov	 rdx, r14
  01b97	48 8b c8	 mov	 rcx, rax
  01b9a	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  01b9e	41 ff 52 08	 call	 QWORD PTR [r10+8]
  01ba2	84 c0		 test	 al, al
  01ba4	0f 85 31 05 00
	00		 jne	 $LN417@renderOrdi

; 330  : 	{
; 331  : 		int i1 = 0;

  01baa	33 c9		 xor	 ecx, ecx

; 332  : 		int i2 = 0;
; 333  : 		int i3 = 0;
; 334  : 		int i4 = 0;
; 335  : 
; 336  : 		if(world->getBlock(x + 1, y - 1, z)->solidEdge(world, x + 1, y - 1, z, Relatives::WU))

  01bac	8d 5e ff	 lea	 ebx, DWORD PTR [rsi-1]
  01baf	44 8b cd	 mov	 r9d, ebp
  01bb2	89 8c 24 08 01
	00 00		 mov	 DWORD PTR i1$1$[rsp], ecx
  01bb9	89 8c 24 10 01
	00 00		 mov	 DWORD PTR i2$1$[rsp], ecx
  01bc0	89 8c 24 18 01
	00 00		 mov	 DWORD PTR i3$1$[rsp], ecx
  01bc7	89 4c 24 44	 mov	 DWORD PTR i4$1$[rsp], ecx
  01bcb	44 8b c3	 mov	 r8d, ebx
  01bce	8b d7		 mov	 edx, edi
  01bd0	49 8b ce	 mov	 rcx, r14
  01bd3	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01bd8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WU@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WU
  01bdf	44 8b cb	 mov	 r9d, ebx
  01be2	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01be5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01bea	44 8b c7	 mov	 r8d, edi
  01bed	49 8b d6	 mov	 rdx, r14
  01bf0	48 8b c8	 mov	 rcx, rax
  01bf3	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  01bf7	41 ff 52 10	 call	 QWORD PTR [r10+16]
  01bfb	84 c0		 test	 al, al
  01bfd	74 13		 je	 SHORT $LN8@renderOrdi

; 337  : 		{
; 338  : 			i1++;

  01bff	c7 84 24 08 01
	00 00 01 00 00
	00		 mov	 DWORD PTR i1$1$[rsp], 1

; 339  : 			i4++;

  01c0a	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR i4$1$[rsp], 1
$LN8@renderOrdi:

; 340  : 		}
; 341  : 
; 342  : 		if(world->getBlock(x + 1, y, z - 1)->solidEdge(world, x + 1, y, z - 1, Relatives::WN))

  01c12	45 8b cd	 mov	 r9d, r13d
  01c15	44 8b c6	 mov	 r8d, esi
  01c18	8b d7		 mov	 edx, edi
  01c1a	49 8b ce	 mov	 rcx, r14
  01c1d	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01c22	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WN
  01c29	44 8b ce	 mov	 r9d, esi
  01c2c	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01c2f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01c34	44 8b c7	 mov	 r8d, edi
  01c37	49 8b d6	 mov	 rdx, r14
  01c3a	48 8b c8	 mov	 rcx, rax
  01c3d	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  01c42	41 ff 52 10	 call	 QWORD PTR [r10+16]
  01c46	84 c0		 test	 al, al
  01c48	74 12		 je	 SHORT $LN7@renderOrdi

; 343  : 		{
; 344  : 			i1++;

  01c4a	ff 84 24 08 01
	00 00		 inc	 DWORD PTR i1$1$[rsp]

; 345  : 			i2++;

  01c51	c7 84 24 10 01
	00 00 01 00 00
	00		 mov	 DWORD PTR i2$1$[rsp], 1
$LN7@renderOrdi:

; 346  : 		}
; 347  : 
; 348  : 		if(world->getBlock(x + 1, y + 1, z)->solidEdge(world, x + 1, y + 1, z, Relatives::WD))

  01c5c	8b 7c 24 40	 mov	 edi, DWORD PTR tv5598[rsp]
  01c60	8b 54 24 3c	 mov	 edx, DWORD PTR tv5601[rsp]
  01c64	44 8b cd	 mov	 r9d, ebp
  01c67	44 8b c7	 mov	 r8d, edi
  01c6a	49 8b ce	 mov	 rcx, r14
  01c6d	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01c72	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WD@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WD
  01c79	44 8b cf	 mov	 r9d, edi
  01c7c	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01c7f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01c84	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  01c88	8b 6c 24 3c	 mov	 ebp, DWORD PTR tv5601[rsp]
  01c8c	49 8b d6	 mov	 rdx, r14
  01c8f	48 8b c8	 mov	 rcx, rax
  01c92	44 8b c5	 mov	 r8d, ebp
  01c95	41 ff 52 10	 call	 QWORD PTR [r10+16]
  01c99	84 c0		 test	 al, al
  01c9b	74 12		 je	 SHORT $LN6@renderOrdi

; 349  : 		{
; 350  : 			i2++;

  01c9d	ff 84 24 10 01
	00 00		 inc	 DWORD PTR i2$1$[rsp]

; 351  : 			i3++;

  01ca4	c7 84 24 18 01
	00 00 01 00 00
	00		 mov	 DWORD PTR i3$1$[rsp], 1
$LN6@renderOrdi:

; 352  : 		}
; 353  : 
; 354  : 		if(world->getBlock(x + 1, y, z + 1)->solidEdge(world, x + 1, y, z + 1, Relatives::WS))

  01caf	45 8b cc	 mov	 r9d, r12d
  01cb2	44 8b c6	 mov	 r8d, esi
  01cb5	8b d5		 mov	 edx, ebp
  01cb7	49 8b ce	 mov	 rcx, r14
  01cba	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01cbf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WS@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WS
  01cc6	44 8b ce	 mov	 r9d, esi
  01cc9	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01ccc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01cd1	44 8b c5	 mov	 r8d, ebp
  01cd4	49 8b d6	 mov	 rdx, r14
  01cd7	48 8b c8	 mov	 rcx, rax
  01cda	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  01cdf	41 ff 52 10	 call	 QWORD PTR [r10+16]

; 355  : 		{
; 356  : 			i3++;
; 357  : 			i4++;

  01ce3	8b 74 24 44	 mov	 esi, DWORD PTR i4$1$[rsp]
  01ce7	84 c0		 test	 al, al
  01ce9	74 09		 je	 SHORT $LN5@renderOrdi
  01ceb	ff 84 24 18 01
	00 00		 inc	 DWORD PTR i3$1$[rsp]
  01cf2	ff c6		 inc	 esi
$LN5@renderOrdi:

; 358  : 		}
; 359  : 
; 360  : 		if(i1 < 2 && world->getBlock(x + 1, y - 1, z - 1)->solidCorner(world, x + 1, y - 1, z - 1, Relatives::WUN))

  01cf4	83 bc 24 08 01
	00 00 02	 cmp	 DWORD PTR i1$1$[rsp], 2
  01cfc	7d 3f		 jge	 SHORT $LN4@renderOrdi
  01cfe	45 8b cd	 mov	 r9d, r13d
  01d01	44 8b c3	 mov	 r8d, ebx
  01d04	8b d5		 mov	 edx, ebp
  01d06	49 8b ce	 mov	 rcx, r14
  01d09	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01d0e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WUN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WUN
  01d15	44 8b cb	 mov	 r9d, ebx
  01d18	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01d1b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01d20	44 8b c5	 mov	 r8d, ebp
  01d23	49 8b d6	 mov	 rdx, r14
  01d26	48 8b c8	 mov	 rcx, rax
  01d29	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  01d2e	41 ff 52 18	 call	 QWORD PTR [r10+24]
  01d32	84 c0		 test	 al, al
  01d34	74 07		 je	 SHORT $LN4@renderOrdi

; 361  : 		{
; 362  : 			i1++;

  01d36	ff 84 24 08 01
	00 00		 inc	 DWORD PTR i1$1$[rsp]
$LN4@renderOrdi:

; 363  : 		}
; 364  : 
; 365  : 		if(i2 < 2 && world->getBlock(x + 1, y + 1, z - 1)->solidCorner(world, x + 1, y + 1, z - 1, Relatives::WDN))

  01d3d	83 bc 24 10 01
	00 00 02	 cmp	 DWORD PTR i2$1$[rsp], 2
  01d45	7d 3f		 jge	 SHORT $LN3@renderOrdi
  01d47	45 8b cd	 mov	 r9d, r13d
  01d4a	44 8b c7	 mov	 r8d, edi
  01d4d	8b d5		 mov	 edx, ebp
  01d4f	49 8b ce	 mov	 rcx, r14
  01d52	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01d57	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WDN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WDN
  01d5e	44 8b cf	 mov	 r9d, edi
  01d61	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01d64	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01d69	44 8b c5	 mov	 r8d, ebp
  01d6c	49 8b d6	 mov	 rdx, r14
  01d6f	48 8b c8	 mov	 rcx, rax
  01d72	44 89 6c 24 20	 mov	 DWORD PTR [rsp+32], r13d
  01d77	41 ff 52 18	 call	 QWORD PTR [r10+24]
  01d7b	84 c0		 test	 al, al
  01d7d	74 07		 je	 SHORT $LN3@renderOrdi

; 366  : 		{
; 367  : 			i2++;

  01d7f	ff 84 24 10 01
	00 00		 inc	 DWORD PTR i2$1$[rsp]
$LN3@renderOrdi:

; 368  : 		}
; 369  : 								
; 370  : 		if(i3 < 2 && world->getBlock(x + 1, y + 1, z + 1)->solidCorner(world, x + 1, y + 1, z + 1, Relatives::WDS))

  01d86	44 8b ac 24 18
	01 00 00	 mov	 r13d, DWORD PTR i3$1$[rsp]
  01d8e	41 83 fd 02	 cmp	 r13d, 2
  01d92	7d 3b		 jge	 SHORT $LN2@renderOrdi
  01d94	45 8b cc	 mov	 r9d, r12d
  01d97	44 8b c7	 mov	 r8d, edi
  01d9a	8b d5		 mov	 edx, ebp
  01d9c	49 8b ce	 mov	 rcx, r14
  01d9f	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01da4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WDS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WDS
  01dab	44 8b cf	 mov	 r9d, edi
  01dae	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01db1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01db6	44 8b c5	 mov	 r8d, ebp
  01db9	49 8b d6	 mov	 rdx, r14
  01dbc	48 8b c8	 mov	 rcx, rax
  01dbf	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  01dc4	41 ff 52 18	 call	 QWORD PTR [r10+24]
  01dc8	84 c0		 test	 al, al
  01dca	74 03		 je	 SHORT $LN2@renderOrdi

; 371  : 		{
; 372  : 			i3++;

  01dcc	41 ff c5	 inc	 r13d
$LN2@renderOrdi:

; 373  : 		}
; 374  : 								
; 375  : 		if(i4 < 2 && world->getBlock(x + 1, y - 1, z + 1)->solidCorner(world, x + 1, y - 1, z + 1, Relatives::WUS))

  01dcf	83 fe 02	 cmp	 esi, 2
  01dd2	7d 3a		 jge	 SHORT $LN1@renderOrdi
  01dd4	45 8b cc	 mov	 r9d, r12d
  01dd7	44 8b c3	 mov	 r8d, ebx
  01dda	8b d5		 mov	 edx, ebp
  01ddc	49 8b ce	 mov	 rcx, r14
  01ddf	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01de4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WUS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WUS
  01deb	44 8b cb	 mov	 r9d, ebx
  01dee	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01df1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01df6	44 8b c5	 mov	 r8d, ebp
  01df9	49 8b d6	 mov	 rdx, r14
  01dfc	48 8b c8	 mov	 rcx, rax
  01dff	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  01e04	41 ff 52 18	 call	 QWORD PTR [r10+24]
  01e08	84 c0		 test	 al, al
  01e0a	74 02		 je	 SHORT $LN1@renderOrdi

; 376  : 		{
; 377  : 			i4++;

  01e0c	ff c6		 inc	 esi
$LN1@renderOrdi:
  01e0e	66 0f 6e 84 24
	08 01 00 00	 movd	 xmm0, DWORD PTR i1$1$[rsp]
  01e17	66 0f 6e 8c 24
	10 01 00 00	 movd	 xmm1, DWORD PTR i2$1$[rsp]

; 380  : 		float f1 = 1.0F - i1 * 0.1f;

  01e20	41 0f 28 f9	 movaps	 xmm7, xmm9
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 112  : 	vertices.push_back(vertex);

  01e24	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  01e28	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  01e2c	49 c7 47 38 00
	00 80 3f	 mov	 QWORD PTR [r15+56], 1065353216 ; 3f800000H

; 164  : 	vertex.v = v;

  01e34	45 33 f6	 xor	 r14d, r14d

; 159  : 	vertex.a = a;

  01e37	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 380  : 		float f1 = 1.0F - i1 * 0.1f;

  01e3c	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 381  : 		float f2 = 1.0F - i2 * 0.1f;

  01e3f	0f 5b c9	 cvtdq2ps xmm1, xmm1
  01e42	45 0f 28 c1	 movaps	 xmm8, xmm9

; 382  : 		float f3 = 1.0F - i3 * 0.1f;

  01e46	41 0f 28 f1	 movaps	 xmm6, xmm9
  01e4a	f3 41 0f 59 c3	 mulss	 xmm0, xmm11
  01e4f	f3 41 0f 59 cb	 mulss	 xmm1, xmm11
  01e54	f3 0f 5c f8	 subss	 xmm7, xmm0
  01e58	f3 44 0f 5c c1	 subss	 xmm8, xmm1
  01e5d	66 41 0f 6e c5	 movd	 xmm0, r13d
  01e62	66 0f 6e ce	 movd	 xmm1, esi
  01e66	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 383  : 		float f4 = 1.0F - i4 * 0.1f;

  01e69	0f 5b c9	 cvtdq2ps xmm1, xmm1
  01e6c	f3 41 0f 59 c3	 mulss	 xmm0, xmm11
  01e71	f3 41 0f 59 cb	 mulss	 xmm1, xmm11
  01e76	f3 0f 5c f0	 subss	 xmm6, xmm0
  01e7a	41 0f 28 c1	 movaps	 xmm0, xmm9
  01e7e	f3 0f 5c c1	 subss	 xmm0, xmm1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  01e82	f3 41 0f 59 c4	 mulss	 xmm0, xmm12
  01e87	f3 48 0f 2c c0	 cvttss2si rax, xmm0

; 108  : 	vertex.x = x + translation.x;

  01e8c	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]
  01e92	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 156  : 	vertex.r = r;

  01e97	41 88 47 40	 mov	 BYTE PTR [r15+64], al

; 157  : 	vertex.g = g;

  01e9b	41 88 47 41	 mov	 BYTE PTR [r15+65], al

; 158  : 	vertex.b = b;

  01e9f	41 88 47 42	 mov	 BYTE PTR [r15+66], al

; 108  : 	vertex.x = x + translation.x;

  01ea3	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 109  : 	vertex.y = y + translation.y;

  01ea9	f3 41 0f 10 47
	24		 movss	 xmm0, DWORD PTR [r15+36]
  01eaf	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  01eb4	f3 41 0f 11 47
	30		 movss	 DWORD PTR [r15+48], xmm0

; 110  : 	vertex.z = z + translation.z;

  01eba	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  01ec0	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  01ec5	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  01ecb	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  01ed0	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  01ed6	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 113  : 
; 114  : 	vs++;

  01edc	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  01ee2	f3 41 0f 59 f4	 mulss	 xmm6, xmm12

; 112  : 	vertices.push_back(vertex);

  01ee7	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  01eeb	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  01eef	41 c7 47 38 00
	00 80 3f	 mov	 DWORD PTR [r15+56], 1065353216 ; 3f800000H

; 164  : 	vertex.v = v;

  01ef7	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  01eff	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 70   : {}

  01f04	f3 48 0f 2c de	 cvttss2si rbx, xmm6

; 109  : 	vertex.y = y + translation.y;

  01f09	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 159  : 	vertex.a = a;

  01f0e	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH
  01f13	41 88 5f 40	 mov	 BYTE PTR [r15+64], bl
  01f17	41 88 5f 41	 mov	 BYTE PTR [r15+65], bl

; 108  : 	vertex.x = x + translation.x;

  01f1b	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  01f21	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  01f27	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1

; 158  : 	vertex.b = b;

  01f2d	41 88 5f 42	 mov	 BYTE PTR [r15+66], bl

; 110  : 	vertex.z = z + translation.z;

  01f31	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  01f36	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  01f3c	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  01f41	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  01f47	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 113  : 
; 114  : 	vs++;

  01f4d	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  01f53	f3 41 0f 59 fc	 mulss	 xmm7, xmm12

; 112  : 	vertices.push_back(vertex);

  01f58	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  01f5c	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  01f60	4d 89 77 38	 mov	 QWORD PTR [r15+56], r14

; 159  : 	vertex.a = a;

  01f64	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 108  : 	vertex.x = x + translation.x;

  01f69	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 70   : {}

  01f6e	f3 48 0f 2c ff	 cvttss2si rdi, xmm7

; 109  : 	vertex.y = y + translation.y;

  01f73	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 156  : 	vertex.r = r;

  01f78	41 88 7f 40	 mov	 BYTE PTR [r15+64], dil

; 157  : 	vertex.g = g;

  01f7c	41 88 7f 41	 mov	 BYTE PTR [r15+65], dil

; 158  : 	vertex.b = b;

  01f80	41 88 7f 42	 mov	 BYTE PTR [r15+66], dil

; 108  : 	vertex.x = x + translation.x;

  01f84	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  01f8a	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  01f90	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1
  01f96	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  01f9b	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  01fa1	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  01fa6	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  01fac	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 113  : 
; 114  : 	vs++;

  01fb2	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 112  : 	vertices.push_back(vertex);

  01fb8	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  01fbc	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  01fc0	41 c7 47 38 00
	00 80 3f	 mov	 DWORD PTR [r15+56], 1065353216 ; 3f800000H

; 108  : 	vertex.x = x + translation.x;

  01fc8	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 109  : 	vertex.y = y + translation.y;

  01fcd	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 164  : 	vertex.v = v;

  01fd2	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 156  : 	vertex.r = r;

  01fda	41 88 5f 40	 mov	 BYTE PTR [r15+64], bl

; 157  : 	vertex.g = g;

  01fde	41 88 5f 41	 mov	 BYTE PTR [r15+65], bl

; 108  : 	vertex.x = x + translation.x;

  01fe2	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  01fe8	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  01fee	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1

; 158  : 	vertex.b = b;

  01ff4	41 88 5f 42	 mov	 BYTE PTR [r15+66], bl

; 159  : 	vertex.a = a;

  01ff8	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 110  : 	vertex.z = z + translation.z;

  01ffd	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  02002	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  02008	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0200d	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 108  : 	vertex.x = x + translation.x;

  02013	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  02019	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 70   : {}

  0201f	f3 45 0f 59 c4	 mulss	 xmm8, xmm12

; 112  : 	vertices.push_back(vertex);

  02024	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  02028	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  0202c	45 89 77 38	 mov	 DWORD PTR [r15+56], r14d

; 108  : 	vertex.x = x + translation.x;

  02030	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 70   : {}

  02035	f3 49 0f 2c c0	 cvttss2si rax, xmm8

; 109  : 	vertex.y = y + translation.y;

  0203a	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 164  : 	vertex.v = v;

  0203f	41 c7 47 3c 00
	00 80 3f	 mov	 DWORD PTR [r15+60], 1065353216 ; 3f800000H

; 159  : 	vertex.a = a;

  02047	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH
  0204c	41 88 47 40	 mov	 BYTE PTR [r15+64], al

; 108  : 	vertex.x = x + translation.x;

  02050	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  02056	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  0205c	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1

; 157  : 	vertex.g = g;

  02062	41 88 47 41	 mov	 BYTE PTR [r15+65], al

; 158  : 	vertex.b = b;

  02066	41 88 47 42	 mov	 BYTE PTR [r15+66], al

; 110  : 	vertex.z = z + translation.z;

  0206a	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  0206f	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  02075	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 108  : 	vertex.x = x + translation.x;

  0207a	f3 41 0f 10 47
	20		 movss	 xmm0, DWORD PTR [r15+32]

; 109  : 	vertex.y = y + translation.y;

  02080	f3 41 0f 10 4f
	24		 movss	 xmm1, DWORD PTR [r15+36]

; 113  : 
; 114  : 	vs++;

  02086	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 112  : 	vertices.push_back(vertex);

  0208c	49 8d 57 2c	 lea	 rdx, QWORD PTR [r15+44]
  02090	49 8d 4f 08	 lea	 rcx, QWORD PTR [r15+8]
  02094	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  02099	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  0209e	4d 89 77 38	 mov	 QWORD PTR [r15+56], r14

; 156  : 	vertex.r = r;

  020a2	41 88 7f 40	 mov	 BYTE PTR [r15+64], dil

; 157  : 	vertex.g = g;

  020a6	41 88 7f 41	 mov	 BYTE PTR [r15+65], dil

; 108  : 	vertex.x = x + translation.x;

  020aa	f3 41 0f 11 47
	2c		 movss	 DWORD PTR [r15+44], xmm0

; 110  : 	vertex.z = z + translation.z;

  020b0	f3 41 0f 10 47
	28		 movss	 xmm0, DWORD PTR [r15+40]
  020b6	f3 41 0f 11 4f
	30		 movss	 DWORD PTR [r15+48], xmm1

; 158  : 	vertex.b = b;

  020bc	41 88 7f 42	 mov	 BYTE PTR [r15+66], dil

; 159  : 	vertex.a = a;

  020c0	41 c6 47 43 ff	 mov	 BYTE PTR [r15+67], 255	; 000000ffH

; 110  : 	vertex.z = z + translation.z;

  020c5	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  020ca	f3 41 0f 11 47
	34		 movss	 DWORD PTR [r15+52], xmm0

; 112  : 	vertices.push_back(vertex);

  020d0	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  020d5	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
$LN417@renderOrdi:
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 394  : }

  020db	4c 8d 9c 24 c0
	00 00 00	 lea	 r11, QWORD PTR [rsp+192]
  020e3	b0 01		 mov	 al, 1
  020e5	49 8b 5b 40	 mov	 rbx, QWORD PTR [r11+64]
  020e9	41 0f 28 73 f0	 movaps	 xmm6, XMMWORD PTR [r11-16]
  020ee	41 0f 28 7b e0	 movaps	 xmm7, XMMWORD PTR [r11-32]
  020f3	45 0f 28 43 d0	 movaps	 xmm8, XMMWORD PTR [r11-48]
  020f8	45 0f 28 4b c0	 movaps	 xmm9, XMMWORD PTR [r11-64]
  020fd	45 0f 28 53 b0	 movaps	 xmm10, XMMWORD PTR [r11-80]
  02102	45 0f 28 5b a0	 movaps	 xmm11, XMMWORD PTR [r11-96]
  02107	45 0f 28 63 90	 movaps	 xmm12, XMMWORD PTR [r11-112]
  0210c	49 8b e3	 mov	 rsp, r11
  0210f	41 5f		 pop	 r15
  02111	41 5e		 pop	 r14
  02113	41 5d		 pop	 r13
  02115	41 5c		 pop	 r12
  02117	5f		 pop	 rdi
  02118	5e		 pop	 rsi
  02119	5d		 pop	 rbp
  0211a	c3		 ret	 0
?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ENDP ; BlockRenderers::renderOrdinaryBlock
_TEXT	ENDS
END
