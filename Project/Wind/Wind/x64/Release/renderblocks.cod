; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61030.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ; BlockRenderers::renderOrdinaryBlock
PUBLIC	?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ; BlockRenderers::renderFluidBlock
PUBLIC	?renderInvisibleBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ; BlockRenderers::renderInvisibleBlock
	ALIGN	4

_Tuple_alloc DB	01H DUP (?)
	ALIGN	4

ignore	DB	01H DUP (?)
	ALIGN	4

allocator_arg DB 01H DUP (?)
	ALIGN	4

piecewise_construct DB 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z DD imagerel $LN536
	DD	imagerel $LN536+95
	DD	imagerel $unwind$?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z DD imagerel $LN536+95
	DD	imagerel $LN536+10772
	DD	imagerel $chain$2$?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z DD imagerel $LN536+10772
	DD	imagerel $LN536+12246
	DD	imagerel $chain$3$?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z DD imagerel $LN458
	DD	imagerel $LN458+6197
	DD	imagerel $unwind$?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
;	COMDAT xdata
xdata	SEGMENT
$unwind$?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z DD 0103501H
	DD	037835H
	DD	046830H
	DD	012641cH
	DD	011541cH
	DD	010341cH
	DD	0f018921cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z DD 021H
	DD	imagerel $LN536
	DD	imagerel $LN536+95
	DD	imagerel $unwind$?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z DD 061521H
	DD	0cb815H
	DD	0da80dH
	DD	0f8805H
	DD	imagerel $LN536
	DD	imagerel $LN536+95
	DD	imagerel $unwind$?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z DD 0175f01H
	DD	09e85fH
	DD	0ad857H
	DD	0bc84fH
	DD	0e9835H
	DD	0107830H
	DD	011682cH
	DD	02c3428H
	DD	0240128H
	DD	0e01bf01dH
	DD	0c017d019H
	DD	060147015H
	DD	05013H
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
;	COMDAT ?renderInvisibleBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
_TEXT	SEGMENT
world$ = 8
x$ = 16
y$ = 24
z$ = 32
block$ = 40
vStream$ = 48
?renderInvisibleBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z PROC ; BlockRenderers::renderInvisibleBlock, COMDAT

; 483  : 	return true;

  00000	b0 01		 mov	 al, 1

; 484  : }

  00002	c3		 ret	 0
?renderInvisibleBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ENDP ; BlockRenderers::renderInvisibleBlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
;	COMDAT ?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
_TEXT	SEGMENT
world$ = 128
x$ = 136
y$ = 144
z$ = 152
block$ = 160
vStream$ = 168
?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z PROC ; BlockRenderers::renderFluidBlock, COMDAT

; 487  : {

$LN458:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 50	 sub	 rsp, 80			; 00000050H
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 156  : 	vertex.r = r;

  0001c	48 8b b4 24 a8
	00 00 00	 mov	 rsi, QWORD PTR vStream$[rsp]
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 490  : 	Block* b = world->getBlock(x, y, z - 1);

  00024	41 8d 59 ff	 lea	 ebx, DWORD PTR [r9-1]
  00028	45 8b f1	 mov	 r14d, r9d
  0002b	0f 29 74 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm6
  00030	0f 29 7c 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm7
  00035	44 8b cb	 mov	 r9d, ebx
  00038	45 8b f8	 mov	 r15d, r8d
  0003b	44 8b ea	 mov	 r13d, edx
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 156  : 	vertex.r = r;

  0003e	c7 46 4c ff ff
	ff 7f		 mov	 DWORD PTR [rsi+76], 2147483647 ; 7fffffffH
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 487  : {

  00045	48 8b e9	 mov	 rbp, rcx

; 490  : 	Block* b = world->getBlock(x, y, z - 1);

  00048	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock

; 491  : 	if(b != block && !b->solidFace(world, x, y, z - 1, Relatives::N))

  0004d	f3 0f 10 35 00
	00 00 00	 movss	 xmm6, DWORD PTR __real@3f800000
  00055	0f 57 ff	 xorps	 xmm7, xmm7
  00058	4c 8b a4 24 a0
	00 00 00	 mov	 r12, QWORD PTR block$[rsp]
  00060	49 3b c4	 cmp	 rax, r12
  00063	0f 84 d8 03 00
	00		 je	 $LN83@renderFlui
  00069	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?N@Relatives@@3PEAVBlockFace@@EA ; Relatives::N
  00070	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00073	45 8b cf	 mov	 r9d, r15d
  00076	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0007b	45 8b c5	 mov	 r8d, r13d
  0007e	48 8b d5	 mov	 rdx, rbp
  00081	48 8b c8	 mov	 rcx, rax
  00084	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  00088	41 ff 52 18	 call	 QWORD PTR [r10+24]
  0008c	84 c0		 test	 al, al
  0008e	0f 85 ad 03 00
	00		 jne	 $LN83@renderFlui

; 492  : 	{
; 493  : 		vStream->setIcon(block->getIcon(world, x, y, z, Relatives::S));

  00094	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?S@Relatives@@3PEAVBlockFace@@EA ; Relatives::S
  0009b	4d 8b 14 24	 mov	 r10, QWORD PTR [r12]
  0009f	45 8b cf	 mov	 r9d, r15d
  000a2	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a7	45 8b c5	 mov	 r8d, r13d
  000aa	48 8b d5	 mov	 rdx, rbp
  000ad	49 8b cc	 mov	 rcx, r12
  000b0	44 89 74 24 20	 mov	 DWORD PTR [rsp+32], r14d
  000b5	41 ff 52 08	 call	 QWORD PTR [r10+8]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 127  : 	setUV(v.u, v.v);

  000b9	48 8b ce	 mov	 rcx, rsi

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	if(icon != nullptr)
; 164  : 	{
; 165  : 		vertex.u = icon->u(u);
; 166  : 		vertex.v = icon->v(v);
; 167  : 	}
; 168  : 	else
; 169  : 	{
; 170  : 		vertex.u = u;
; 171  : 		vertex.v = v;
; 172  : 	}
; 173  : }
; 174  : 
; 175  : void VertexStream::setTranslation(float x, float y, float z)
; 176  : {
; 177  : 	translation = Vertex(x, y, z);
; 178  : }
; 179  : void VertexStream::setTranslation(Vertex vertex)
; 180  : {
; 181  : 	translation = vertex;
; 182  : }
; 183  : 
; 184  : void VertexStream::setIcon(TiledTexture::Icon* icon)
; 185  : {
; 186  : 	this->icon = icon;

  000bc	48 89 46 30	 mov	 QWORD PTR [rsi+48], rax

; 127  : 	setUV(v.u, v.v);

  000c0	0f 28 d7	 movaps	 xmm2, xmm7
  000c3	0f 28 cf	 movaps	 xmm1, xmm7
  000c6	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  000cb	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  000cf	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  000d3	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  000d8	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  000dd	f3 0f 58 c7	 addss	 xmm0, xmm7
  000e1	f3 0f 58 ef	 addss	 xmm5, xmm7
  000e5	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  000ea	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  000ef	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  000f4	f3 0f 58 c7	 addss	 xmm0, xmm7
  000f8	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  000fd	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00102	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00108	0f 28 d7	 movaps	 xmm2, xmm7
  0010b	0f 28 ce	 movaps	 xmm1, xmm6
  0010e	48 8b ce	 mov	 rcx, rsi
  00111	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00116	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  0011a	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0011e	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00123	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00128	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  0012d	f3 0f 58 ee	 addss	 xmm5, xmm6
  00131	f3 0f 58 c7	 addss	 xmm0, xmm7
  00135	f3 0f 58 cf	 addss	 xmm1, xmm7
  00139	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  0013e	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00143	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00148	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0014d	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00153	0f 28 d6	 movaps	 xmm2, xmm6
  00156	0f 28 cf	 movaps	 xmm1, xmm7
  00159	48 8b ce	 mov	 rcx, rsi
  0015c	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00161	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00165	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00169	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  0016e	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00173	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00178	f3 0f 58 ef	 addss	 xmm5, xmm7
  0017c	f3 0f 58 c6	 addss	 xmm0, xmm6
  00180	f3 0f 58 cf	 addss	 xmm1, xmm7
  00184	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00189	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  0018e	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00193	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00198	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  0019e	0f 28 d7	 movaps	 xmm2, xmm7
  001a1	0f 28 ce	 movaps	 xmm1, xmm6
  001a4	48 8b ce	 mov	 rcx, rsi
  001a7	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  001ac	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  001b0	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  001b4	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  001b9	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  001be	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  001c3	f3 0f 58 ee	 addss	 xmm5, xmm6
  001c7	f3 0f 58 c7	 addss	 xmm0, xmm7
  001cb	f3 0f 58 cf	 addss	 xmm1, xmm7
  001cf	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  001d4	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  001d9	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  001de	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  001e3	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  001e9	0f 28 d6	 movaps	 xmm2, xmm6
  001ec	0f 28 ce	 movaps	 xmm1, xmm6
  001ef	48 8b ce	 mov	 rcx, rsi
  001f2	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 108  : 	vertex.x = x + translation.x;

  001f7	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]

; 109  : 	vertex.y = y + translation.y;

  001fc	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00201	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00205	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00209	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  0020e	f3 0f 58 ee	 addss	 xmm5, xmm6
  00212	f3 0f 58 c6	 addss	 xmm0, xmm6
  00216	f3 0f 58 cf	 addss	 xmm1, xmm7
  0021a	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  0021f	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00224	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00229	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0022e	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00234	0f 28 d6	 movaps	 xmm2, xmm6
  00237	0f 28 cf	 movaps	 xmm1, xmm7
  0023a	48 8b ce	 mov	 rcx, rsi
  0023d	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00242	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00246	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0024a	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  0024f	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00254	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00259	f3 0f 58 ef	 addss	 xmm5, xmm7
  0025d	f3 0f 58 c6	 addss	 xmm0, xmm6
  00261	f3 0f 58 cf	 addss	 xmm1, xmm7
  00265	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  0026a	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  0026f	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00274	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00279	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  0027f	0f 28 d6	 movaps	 xmm2, xmm6
  00282	0f 28 ce	 movaps	 xmm1, xmm6
  00285	48 8b ce	 mov	 rcx, rsi
  00288	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  0028d	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00291	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00295	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  0029a	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  0029f	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  002a4	f3 0f 58 ef	 addss	 xmm5, xmm7
  002a8	f3 0f 58 c6	 addss	 xmm0, xmm6
  002ac	f3 0f 58 cf	 addss	 xmm1, xmm7
  002b0	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  002b5	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  002ba	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  002bf	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  002c4	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  002ca	0f 28 d6	 movaps	 xmm2, xmm6
  002cd	0f 28 cf	 movaps	 xmm1, xmm7
  002d0	48 8b ce	 mov	 rcx, rsi
  002d3	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  002d8	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  002dc	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  002e0	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  002e5	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  002ea	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  002ef	f3 0f 58 ee	 addss	 xmm5, xmm6
  002f3	f3 0f 58 c6	 addss	 xmm0, xmm6
  002f7	f3 0f 58 cf	 addss	 xmm1, xmm7
  002fb	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00300	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00305	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  0030a	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0030f	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00315	0f 28 d7	 movaps	 xmm2, xmm7
  00318	0f 28 ce	 movaps	 xmm1, xmm6
  0031b	48 8b ce	 mov	 rcx, rsi
  0031e	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00323	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00327	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0032b	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00330	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00335	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  0033a	f3 0f 58 ef	 addss	 xmm5, xmm7
  0033e	f3 0f 58 c7	 addss	 xmm0, xmm7
  00342	f3 0f 58 cf	 addss	 xmm1, xmm7
  00346	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  0034b	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00350	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00355	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0035a	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00360	0f 28 d6	 movaps	 xmm2, xmm6
  00363	0f 28 cf	 movaps	 xmm1, xmm7
  00366	48 8b ce	 mov	 rcx, rsi
  00369	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  0036e	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00372	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00376	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  0037b	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00380	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00385	f3 0f 58 ee	 addss	 xmm5, xmm6
  00389	f3 0f 58 c6	 addss	 xmm0, xmm6
  0038d	f3 0f 58 cf	 addss	 xmm1, xmm7
  00391	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00396	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  0039b	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  003a0	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  003a5	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  003ab	0f 28 d7	 movaps	 xmm2, xmm7
  003ae	0f 28 cf	 movaps	 xmm1, xmm7
  003b1	48 8b ce	 mov	 rcx, rsi
  003b4	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  003b9	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  003bd	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  003c1	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  003c6	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  003cb	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  003d0	f3 0f 58 ee	 addss	 xmm5, xmm6
  003d4	f3 0f 58 c7	 addss	 xmm0, xmm7
  003d8	f3 0f 58 cf	 addss	 xmm1, xmm7
  003dc	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  003e1	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  003e6	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  003eb	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  003f0	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  003f6	0f 28 d7	 movaps	 xmm2, xmm7
  003f9	0f 28 ce	 movaps	 xmm1, xmm6
  003fc	48 8b ce	 mov	 rcx, rsi
  003ff	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00404	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00408	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0040c	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00411	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00416	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  0041b	f3 0f 58 ef	 addss	 xmm5, xmm7
  0041f	f3 0f 58 c7	 addss	 xmm0, xmm7
  00423	f3 0f 58 cf	 addss	 xmm1, xmm7
  00427	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  0042c	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00431	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00436	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0043b	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
$LN83@renderFlui:
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 510  : 	b = world->getBlock(x, y, z + 1);

  00441	41 8d 5e 01	 lea	 ebx, DWORD PTR [r14+1]
  00445	45 8b c7	 mov	 r8d, r15d
  00448	41 8b d5	 mov	 edx, r13d
  0044b	44 8b cb	 mov	 r9d, ebx
  0044e	48 8b cd	 mov	 rcx, rbp
  00451	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock

; 511  : 	if(b != block && !b->solidFace(world, x, y, z + 1, Relatives::S))

  00456	49 3b c4	 cmp	 rax, r12
  00459	0f 84 d8 03 00
	00		 je	 $LN157@renderFlui
  0045f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?S@Relatives@@3PEAVBlockFace@@EA ; Relatives::S
  00466	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00469	45 8b cf	 mov	 r9d, r15d
  0046c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00471	45 8b c5	 mov	 r8d, r13d
  00474	48 8b d5	 mov	 rdx, rbp
  00477	48 8b c8	 mov	 rcx, rax
  0047a	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  0047e	41 ff 52 18	 call	 QWORD PTR [r10+24]
  00482	84 c0		 test	 al, al
  00484	0f 85 ad 03 00
	00		 jne	 $LN157@renderFlui

; 512  : 	{
; 513  : 		vStream->setIcon(block->getIcon(world, x, y, z, Relatives::N));

  0048a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?N@Relatives@@3PEAVBlockFace@@EA ; Relatives::N
  00491	4d 8b 14 24	 mov	 r10, QWORD PTR [r12]
  00495	45 8b cf	 mov	 r9d, r15d
  00498	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0049d	45 8b c5	 mov	 r8d, r13d
  004a0	48 8b d5	 mov	 rdx, rbp
  004a3	49 8b cc	 mov	 rcx, r12
  004a6	44 89 74 24 20	 mov	 DWORD PTR [rsp+32], r14d
  004ab	41 ff 52 08	 call	 QWORD PTR [r10+8]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 127  : 	setUV(v.u, v.v);

  004af	48 8b ce	 mov	 rcx, rsi

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	if(icon != nullptr)
; 164  : 	{
; 165  : 		vertex.u = icon->u(u);
; 166  : 		vertex.v = icon->v(v);
; 167  : 	}
; 168  : 	else
; 169  : 	{
; 170  : 		vertex.u = u;
; 171  : 		vertex.v = v;
; 172  : 	}
; 173  : }
; 174  : 
; 175  : void VertexStream::setTranslation(float x, float y, float z)
; 176  : {
; 177  : 	translation = Vertex(x, y, z);
; 178  : }
; 179  : void VertexStream::setTranslation(Vertex vertex)
; 180  : {
; 181  : 	translation = vertex;
; 182  : }
; 183  : 
; 184  : void VertexStream::setIcon(TiledTexture::Icon* icon)
; 185  : {
; 186  : 	this->icon = icon;

  004b2	48 89 46 30	 mov	 QWORD PTR [rsi+48], rax

; 127  : 	setUV(v.u, v.v);

  004b6	0f 28 d7	 movaps	 xmm2, xmm7
  004b9	0f 28 cf	 movaps	 xmm1, xmm7
  004bc	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  004c1	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  004c5	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  004c9	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  004ce	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  004d3	f3 0f 58 c7	 addss	 xmm0, xmm7
  004d7	f3 0f 58 ef	 addss	 xmm5, xmm7
  004db	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  004e0	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  004e5	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  004ea	f3 0f 58 c6	 addss	 xmm0, xmm6
  004ee	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  004f3	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  004f8	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  004fe	0f 28 d7	 movaps	 xmm2, xmm7
  00501	0f 28 ce	 movaps	 xmm1, xmm6
  00504	48 8b ce	 mov	 rcx, rsi
  00507	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  0050c	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00510	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00514	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00519	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  0051e	f3 0f 58 c7	 addss	 xmm0, xmm7
  00522	f3 0f 58 ee	 addss	 xmm5, xmm6
  00526	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  0052b	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  00530	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00535	f3 0f 58 c6	 addss	 xmm0, xmm6
  00539	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  0053e	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00543	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00549	0f 28 d6	 movaps	 xmm2, xmm6
  0054c	0f 28 cf	 movaps	 xmm1, xmm7
  0054f	48 8b ce	 mov	 rcx, rsi
  00552	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00557	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  0055b	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0055f	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00564	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00569	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  0056e	f3 0f 58 ef	 addss	 xmm5, xmm7
  00572	f3 0f 58 c6	 addss	 xmm0, xmm6
  00576	f3 0f 58 ce	 addss	 xmm1, xmm6
  0057a	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  0057f	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00584	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00589	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0058e	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00594	0f 28 d7	 movaps	 xmm2, xmm7
  00597	0f 28 ce	 movaps	 xmm1, xmm6
  0059a	48 8b ce	 mov	 rcx, rsi
  0059d	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  005a2	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  005a6	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  005aa	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  005af	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  005b4	f3 0f 58 c7	 addss	 xmm0, xmm7
  005b8	f3 0f 58 ee	 addss	 xmm5, xmm6
  005bc	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  005c1	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  005c6	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  005cb	f3 0f 58 c6	 addss	 xmm0, xmm6
  005cf	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  005d4	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  005d9	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  005df	0f 28 d6	 movaps	 xmm2, xmm6
  005e2	0f 28 ce	 movaps	 xmm1, xmm6
  005e5	48 8b ce	 mov	 rcx, rsi
  005e8	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 108  : 	vertex.x = x + translation.x;

  005ed	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]

; 109  : 	vertex.y = y + translation.y;

  005f2	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  005f7	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  005fb	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  005ff	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00604	f3 0f 58 ee	 addss	 xmm5, xmm6
  00608	f3 0f 58 c6	 addss	 xmm0, xmm6
  0060c	f3 0f 58 ce	 addss	 xmm1, xmm6
  00610	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00615	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  0061a	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  0061f	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00624	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  0062a	0f 28 d6	 movaps	 xmm2, xmm6
  0062d	0f 28 cf	 movaps	 xmm1, xmm7
  00630	48 8b ce	 mov	 rcx, rsi
  00633	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00638	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  0063c	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00640	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00645	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  0064a	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  0064f	f3 0f 58 ef	 addss	 xmm5, xmm7
  00653	f3 0f 58 c6	 addss	 xmm0, xmm6
  00657	f3 0f 58 ce	 addss	 xmm1, xmm6
  0065b	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00660	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00665	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  0066a	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0066f	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00675	0f 28 d6	 movaps	 xmm2, xmm6
  00678	0f 28 ce	 movaps	 xmm1, xmm6
  0067b	48 8b ce	 mov	 rcx, rsi
  0067e	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00683	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00687	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0068b	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00690	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00695	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  0069a	f3 0f 58 ef	 addss	 xmm5, xmm7
  0069e	f3 0f 58 c6	 addss	 xmm0, xmm6
  006a2	f3 0f 58 ce	 addss	 xmm1, xmm6
  006a6	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  006ab	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  006b0	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  006b5	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  006ba	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  006c0	0f 28 d6	 movaps	 xmm2, xmm6
  006c3	0f 28 cf	 movaps	 xmm1, xmm7
  006c6	48 8b ce	 mov	 rcx, rsi
  006c9	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  006ce	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  006d2	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  006d6	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  006db	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  006e0	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  006e5	f3 0f 58 ee	 addss	 xmm5, xmm6
  006e9	f3 0f 58 c6	 addss	 xmm0, xmm6
  006ed	f3 0f 58 ce	 addss	 xmm1, xmm6
  006f1	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  006f6	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  006fb	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00700	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00705	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  0070b	0f 28 d7	 movaps	 xmm2, xmm7
  0070e	0f 28 ce	 movaps	 xmm1, xmm6
  00711	48 8b ce	 mov	 rcx, rsi
  00714	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00719	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  0071d	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00721	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00726	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  0072b	f3 0f 58 c7	 addss	 xmm0, xmm7
  0072f	f3 0f 58 ef	 addss	 xmm5, xmm7
  00733	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00738	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  0073d	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00742	f3 0f 58 c6	 addss	 xmm0, xmm6
  00746	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  0074b	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00750	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00756	0f 28 d6	 movaps	 xmm2, xmm6
  00759	0f 28 cf	 movaps	 xmm1, xmm7
  0075c	48 8b ce	 mov	 rcx, rsi
  0075f	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00764	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00768	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0076c	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00771	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00776	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  0077b	f3 0f 58 ee	 addss	 xmm5, xmm6
  0077f	f3 0f 58 c6	 addss	 xmm0, xmm6
  00783	f3 0f 58 ce	 addss	 xmm1, xmm6
  00787	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  0078c	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00791	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00796	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0079b	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  007a1	0f 28 d7	 movaps	 xmm2, xmm7
  007a4	0f 28 cf	 movaps	 xmm1, xmm7
  007a7	48 8b ce	 mov	 rcx, rsi
  007aa	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  007af	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  007b3	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  007b7	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  007bc	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  007c1	f3 0f 58 c7	 addss	 xmm0, xmm7
  007c5	f3 0f 58 ee	 addss	 xmm5, xmm6
  007c9	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  007ce	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  007d3	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  007d8	f3 0f 58 c6	 addss	 xmm0, xmm6
  007dc	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  007e1	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  007e6	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  007ec	0f 28 d7	 movaps	 xmm2, xmm7
  007ef	0f 28 ce	 movaps	 xmm1, xmm6
  007f2	48 8b ce	 mov	 rcx, rsi
  007f5	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  007fa	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  007fe	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00802	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00807	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  0080c	f3 0f 58 c7	 addss	 xmm0, xmm7
  00810	f3 0f 58 ef	 addss	 xmm5, xmm7
  00814	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00819	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  0081e	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00823	f3 0f 58 c6	 addss	 xmm0, xmm6
  00827	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  0082c	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00831	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
$LN157@renderFlui:
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 530  : 	b = world->getBlock(x, y - 1, z);

  00837	45 8d 47 ff	 lea	 r8d, DWORD PTR [r15-1]
  0083b	45 8b ce	 mov	 r9d, r14d
  0083e	41 8b d5	 mov	 edx, r13d
  00841	48 8b cd	 mov	 rcx, rbp
  00844	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock

; 531  : 	if(b != block && !b->solidFace(world, x, y - 1, z, Relatives::U))

  00849	49 3b c4	 cmp	 rax, r12
  0084c	0f 84 da 03 00
	00		 je	 $LN231@renderFlui
  00852	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?U@Relatives@@3PEAVBlockFace@@EA ; Relatives::U
  00859	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  0085c	45 8d 4f ff	 lea	 r9d, DWORD PTR [r15-1]
  00860	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00865	45 8b c5	 mov	 r8d, r13d
  00868	48 8b d5	 mov	 rdx, rbp
  0086b	48 8b c8	 mov	 rcx, rax
  0086e	44 89 74 24 20	 mov	 DWORD PTR [rsp+32], r14d
  00873	41 ff 52 18	 call	 QWORD PTR [r10+24]
  00877	84 c0		 test	 al, al
  00879	0f 85 ad 03 00
	00		 jne	 $LN231@renderFlui

; 532  : 	{
; 533  : 		vStream->setIcon(block->getIcon(world, x, y, z, Relatives::D));

  0087f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?D@Relatives@@3PEAVBlockFace@@EA ; Relatives::D
  00886	4d 8b 14 24	 mov	 r10, QWORD PTR [r12]
  0088a	45 8b cf	 mov	 r9d, r15d
  0088d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00892	45 8b c5	 mov	 r8d, r13d
  00895	48 8b d5	 mov	 rdx, rbp
  00898	49 8b cc	 mov	 rcx, r12
  0089b	44 89 74 24 20	 mov	 DWORD PTR [rsp+32], r14d
  008a0	41 ff 52 08	 call	 QWORD PTR [r10+8]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 127  : 	setUV(v.u, v.v);

  008a4	48 8b ce	 mov	 rcx, rsi

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	if(icon != nullptr)
; 164  : 	{
; 165  : 		vertex.u = icon->u(u);
; 166  : 		vertex.v = icon->v(v);
; 167  : 	}
; 168  : 	else
; 169  : 	{
; 170  : 		vertex.u = u;
; 171  : 		vertex.v = v;
; 172  : 	}
; 173  : }
; 174  : 
; 175  : void VertexStream::setTranslation(float x, float y, float z)
; 176  : {
; 177  : 	translation = Vertex(x, y, z);
; 178  : }
; 179  : void VertexStream::setTranslation(Vertex vertex)
; 180  : {
; 181  : 	translation = vertex;
; 182  : }
; 183  : 
; 184  : void VertexStream::setIcon(TiledTexture::Icon* icon)
; 185  : {
; 186  : 	this->icon = icon;

  008a7	48 89 46 30	 mov	 QWORD PTR [rsi+48], rax

; 127  : 	setUV(v.u, v.v);

  008ab	0f 28 d7	 movaps	 xmm2, xmm7
  008ae	0f 28 cf	 movaps	 xmm1, xmm7
  008b1	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  008b6	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  008ba	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  008be	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  008c3	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  008c8	f3 0f 58 c7	 addss	 xmm0, xmm7
  008cc	f3 0f 58 ef	 addss	 xmm5, xmm7
  008d0	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  008d5	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  008da	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  008df	f3 0f 58 c7	 addss	 xmm0, xmm7
  008e3	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  008e8	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  008ed	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  008f3	0f 28 d7	 movaps	 xmm2, xmm7
  008f6	0f 28 ce	 movaps	 xmm1, xmm6
  008f9	48 8b ce	 mov	 rcx, rsi
  008fc	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00901	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00905	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00909	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  0090e	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00913	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00918	f3 0f 58 ee	 addss	 xmm5, xmm6
  0091c	f3 0f 58 c7	 addss	 xmm0, xmm7
  00920	f3 0f 58 cf	 addss	 xmm1, xmm7
  00924	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00929	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  0092e	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00933	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00938	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  0093e	0f 28 d6	 movaps	 xmm2, xmm6
  00941	0f 28 cf	 movaps	 xmm1, xmm7
  00944	48 8b ce	 mov	 rcx, rsi
  00947	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  0094c	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00950	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00954	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00959	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  0095e	f3 0f 58 c7	 addss	 xmm0, xmm7
  00962	f3 0f 58 ef	 addss	 xmm5, xmm7
  00966	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  0096b	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  00970	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00975	f3 0f 58 c6	 addss	 xmm0, xmm6
  00979	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  0097e	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00983	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00989	0f 28 d7	 movaps	 xmm2, xmm7
  0098c	0f 28 ce	 movaps	 xmm1, xmm6
  0098f	48 8b ce	 mov	 rcx, rsi
  00992	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00997	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  0099b	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0099f	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  009a4	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  009a9	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  009ae	f3 0f 58 ee	 addss	 xmm5, xmm6
  009b2	f3 0f 58 c7	 addss	 xmm0, xmm7
  009b6	f3 0f 58 cf	 addss	 xmm1, xmm7
  009ba	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  009bf	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  009c4	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  009c9	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  009ce	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  009d4	0f 28 d6	 movaps	 xmm2, xmm6
  009d7	0f 28 ce	 movaps	 xmm1, xmm6
  009da	48 8b ce	 mov	 rcx, rsi
  009dd	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 109  : 	vertex.y = y + translation.y;

  009e2	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  009e7	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  009ec	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  009f0	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  009f4	f3 0f 58 c7	 addss	 xmm0, xmm7
  009f8	f3 0f 58 ee	 addss	 xmm5, xmm6
  009fc	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00a01	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  00a06	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00a0b	f3 0f 58 c6	 addss	 xmm0, xmm6
  00a0f	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  00a14	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00a19	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00a1f	0f 28 d6	 movaps	 xmm2, xmm6
  00a22	0f 28 cf	 movaps	 xmm1, xmm7
  00a25	48 8b ce	 mov	 rcx, rsi
  00a28	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00a2d	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00a31	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00a35	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00a3a	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00a3f	f3 0f 58 c7	 addss	 xmm0, xmm7
  00a43	f3 0f 58 ef	 addss	 xmm5, xmm7
  00a47	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00a4c	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  00a51	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00a56	f3 0f 58 c6	 addss	 xmm0, xmm6
  00a5a	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  00a5f	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00a64	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00a6a	0f 28 d7	 movaps	 xmm2, xmm7
  00a6d	0f 28 cf	 movaps	 xmm1, xmm7
  00a70	48 8b ce	 mov	 rcx, rsi
  00a73	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00a78	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00a7c	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00a80	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00a85	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00a8a	f3 0f 58 c7	 addss	 xmm0, xmm7
  00a8e	f3 0f 58 ef	 addss	 xmm5, xmm7
  00a92	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00a97	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  00a9c	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00aa1	f3 0f 58 c6	 addss	 xmm0, xmm6
  00aa5	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  00aaa	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00aaf	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00ab5	0f 28 d7	 movaps	 xmm2, xmm7
  00ab8	0f 28 ce	 movaps	 xmm1, xmm6
  00abb	48 8b ce	 mov	 rcx, rsi
  00abe	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00ac3	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00ac7	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00acb	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00ad0	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00ad5	f3 0f 58 c7	 addss	 xmm0, xmm7
  00ad9	f3 0f 58 ee	 addss	 xmm5, xmm6
  00add	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00ae2	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  00ae7	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00aec	f3 0f 58 c6	 addss	 xmm0, xmm6
  00af0	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  00af5	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00afa	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00b00	0f 28 d6	 movaps	 xmm2, xmm6
  00b03	0f 28 cf	 movaps	 xmm1, xmm7
  00b06	48 8b ce	 mov	 rcx, rsi
  00b09	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00b0e	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00b12	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00b16	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00b1b	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00b20	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00b25	f3 0f 58 ef	 addss	 xmm5, xmm7
  00b29	f3 0f 58 c7	 addss	 xmm0, xmm7
  00b2d	f3 0f 58 cf	 addss	 xmm1, xmm7
  00b31	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00b36	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00b3b	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00b40	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00b45	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00b4b	0f 28 d7	 movaps	 xmm2, xmm7
  00b4e	0f 28 ce	 movaps	 xmm1, xmm6
  00b51	48 8b ce	 mov	 rcx, rsi
  00b54	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00b59	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00b5d	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00b61	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00b66	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00b6b	f3 0f 58 c7	 addss	 xmm0, xmm7
  00b6f	f3 0f 58 ee	 addss	 xmm5, xmm6
  00b73	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00b78	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  00b7d	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00b82	f3 0f 58 c6	 addss	 xmm0, xmm6
  00b86	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  00b8b	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00b90	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00b96	0f 28 d6	 movaps	 xmm2, xmm6
  00b99	0f 28 ce	 movaps	 xmm1, xmm6
  00b9c	48 8b ce	 mov	 rcx, rsi
  00b9f	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00ba4	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00ba8	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00bac	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00bb1	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00bb6	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00bbb	f3 0f 58 ee	 addss	 xmm5, xmm6
  00bbf	f3 0f 58 c7	 addss	 xmm0, xmm7
  00bc3	f3 0f 58 cf	 addss	 xmm1, xmm7
  00bc7	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00bcc	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00bd1	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00bd6	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00bdb	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00be1	0f 28 d6	 movaps	 xmm2, xmm6
  00be4	0f 28 cf	 movaps	 xmm1, xmm7
  00be7	48 8b ce	 mov	 rcx, rsi
  00bea	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00bef	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00bf3	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00bf7	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00bfc	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00c01	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00c06	f3 0f 58 ef	 addss	 xmm5, xmm7
  00c0a	f3 0f 58 c7	 addss	 xmm0, xmm7
  00c0e	f3 0f 58 cf	 addss	 xmm1, xmm7
  00c12	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00c17	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00c1c	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00c21	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00c26	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
$LN231@renderFlui:
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 550  : 	b = world->getBlock(x, y + 1, z);

  00c2c	45 8d 47 01	 lea	 r8d, DWORD PTR [r15+1]
  00c30	45 8b ce	 mov	 r9d, r14d
  00c33	41 8b d5	 mov	 edx, r13d
  00c36	48 8b cd	 mov	 rcx, rbp
  00c39	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock

; 551  : 	if(b != block && !b->solidFace(world, x, y + 1, z, Relatives::D))

  00c3e	49 3b c4	 cmp	 rax, r12
  00c41	0f 84 da 03 00
	00		 je	 $LN305@renderFlui
  00c47	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?D@Relatives@@3PEAVBlockFace@@EA ; Relatives::D
  00c4e	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00c51	45 8d 4f 01	 lea	 r9d, DWORD PTR [r15+1]
  00c55	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c5a	45 8b c5	 mov	 r8d, r13d
  00c5d	48 8b d5	 mov	 rdx, rbp
  00c60	48 8b c8	 mov	 rcx, rax
  00c63	44 89 74 24 20	 mov	 DWORD PTR [rsp+32], r14d
  00c68	41 ff 52 18	 call	 QWORD PTR [r10+24]
  00c6c	84 c0		 test	 al, al
  00c6e	0f 85 ad 03 00
	00		 jne	 $LN305@renderFlui

; 552  : 	{
; 553  : 		vStream->setIcon(block->getIcon(world, x, y, z, Relatives::U));

  00c74	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?U@Relatives@@3PEAVBlockFace@@EA ; Relatives::U
  00c7b	4d 8b 14 24	 mov	 r10, QWORD PTR [r12]
  00c7f	45 8b cf	 mov	 r9d, r15d
  00c82	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00c87	45 8b c5	 mov	 r8d, r13d
  00c8a	48 8b d5	 mov	 rdx, rbp
  00c8d	49 8b cc	 mov	 rcx, r12
  00c90	44 89 74 24 20	 mov	 DWORD PTR [rsp+32], r14d
  00c95	41 ff 52 08	 call	 QWORD PTR [r10+8]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 127  : 	setUV(v.u, v.v);

  00c99	48 8b ce	 mov	 rcx, rsi

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	if(icon != nullptr)
; 164  : 	{
; 165  : 		vertex.u = icon->u(u);
; 166  : 		vertex.v = icon->v(v);
; 167  : 	}
; 168  : 	else
; 169  : 	{
; 170  : 		vertex.u = u;
; 171  : 		vertex.v = v;
; 172  : 	}
; 173  : }
; 174  : 
; 175  : void VertexStream::setTranslation(float x, float y, float z)
; 176  : {
; 177  : 	translation = Vertex(x, y, z);
; 178  : }
; 179  : void VertexStream::setTranslation(Vertex vertex)
; 180  : {
; 181  : 	translation = vertex;
; 182  : }
; 183  : 
; 184  : void VertexStream::setIcon(TiledTexture::Icon* icon)
; 185  : {
; 186  : 	this->icon = icon;

  00c9c	48 89 46 30	 mov	 QWORD PTR [rsi+48], rax

; 127  : 	setUV(v.u, v.v);

  00ca0	0f 28 d7	 movaps	 xmm2, xmm7
  00ca3	0f 28 cf	 movaps	 xmm1, xmm7
  00ca6	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00cab	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00caf	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00cb3	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00cb8	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00cbd	f3 0f 58 c6	 addss	 xmm0, xmm6
  00cc1	f3 0f 58 ef	 addss	 xmm5, xmm7
  00cc5	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00cca	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  00ccf	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00cd4	f3 0f 58 c7	 addss	 xmm0, xmm7
  00cd8	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  00cdd	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00ce2	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00ce8	0f 28 d7	 movaps	 xmm2, xmm7
  00ceb	0f 28 ce	 movaps	 xmm1, xmm6
  00cee	48 8b ce	 mov	 rcx, rsi
  00cf1	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00cf6	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00cfa	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00cfe	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00d03	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00d08	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00d0d	f3 0f 58 ee	 addss	 xmm5, xmm6
  00d11	f3 0f 58 c6	 addss	 xmm0, xmm6
  00d15	f3 0f 58 cf	 addss	 xmm1, xmm7
  00d19	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00d1e	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00d23	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00d28	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00d2d	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00d33	0f 28 d6	 movaps	 xmm2, xmm6
  00d36	0f 28 cf	 movaps	 xmm1, xmm7
  00d39	48 8b ce	 mov	 rcx, rsi
  00d3c	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00d41	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00d45	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00d49	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00d4e	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00d53	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00d58	f3 0f 58 ef	 addss	 xmm5, xmm7
  00d5c	f3 0f 58 c6	 addss	 xmm0, xmm6
  00d60	f3 0f 58 ce	 addss	 xmm1, xmm6
  00d64	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00d69	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00d6e	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00d73	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00d78	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00d7e	0f 28 d7	 movaps	 xmm2, xmm7
  00d81	0f 28 ce	 movaps	 xmm1, xmm6
  00d84	48 8b ce	 mov	 rcx, rsi
  00d87	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00d8c	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00d90	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00d94	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00d99	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00d9e	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00da3	f3 0f 58 ee	 addss	 xmm5, xmm6
  00da7	f3 0f 58 c6	 addss	 xmm0, xmm6
  00dab	f3 0f 58 cf	 addss	 xmm1, xmm7
  00daf	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00db4	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00db9	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00dbe	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00dc3	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00dc9	0f 28 d6	 movaps	 xmm2, xmm6
  00dcc	0f 28 ce	 movaps	 xmm1, xmm6
  00dcf	48 8b ce	 mov	 rcx, rsi
  00dd2	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 108  : 	vertex.x = x + translation.x;

  00dd7	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]

; 109  : 	vertex.y = y + translation.y;

  00ddc	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00de1	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00de5	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00de9	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00dee	f3 0f 58 ee	 addss	 xmm5, xmm6
  00df2	f3 0f 58 c6	 addss	 xmm0, xmm6
  00df6	f3 0f 58 ce	 addss	 xmm1, xmm6
  00dfa	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00dff	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00e04	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00e09	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00e0e	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00e14	0f 28 d6	 movaps	 xmm2, xmm6
  00e17	0f 28 cf	 movaps	 xmm1, xmm7
  00e1a	48 8b ce	 mov	 rcx, rsi
  00e1d	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00e22	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00e26	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00e2a	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00e2f	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00e34	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00e39	f3 0f 58 ef	 addss	 xmm5, xmm7
  00e3d	f3 0f 58 c6	 addss	 xmm0, xmm6
  00e41	f3 0f 58 ce	 addss	 xmm1, xmm6
  00e45	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00e4a	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00e4f	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00e54	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00e59	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00e5f	0f 28 d7	 movaps	 xmm2, xmm7
  00e62	0f 28 cf	 movaps	 xmm1, xmm7
  00e65	48 8b ce	 mov	 rcx, rsi
  00e68	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00e6d	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00e71	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00e75	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00e7a	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00e7f	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00e84	f3 0f 58 ef	 addss	 xmm5, xmm7
  00e88	f3 0f 58 c6	 addss	 xmm0, xmm6
  00e8c	f3 0f 58 ce	 addss	 xmm1, xmm6
  00e90	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00e95	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00e9a	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00e9f	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00ea4	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00eaa	0f 28 d7	 movaps	 xmm2, xmm7
  00ead	0f 28 ce	 movaps	 xmm1, xmm6
  00eb0	48 8b ce	 mov	 rcx, rsi
  00eb3	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00eb8	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00ebc	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00ec0	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00ec5	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00eca	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00ecf	f3 0f 58 ee	 addss	 xmm5, xmm6
  00ed3	f3 0f 58 c6	 addss	 xmm0, xmm6
  00ed7	f3 0f 58 ce	 addss	 xmm1, xmm6
  00edb	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00ee0	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00ee5	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00eea	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00eef	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00ef5	0f 28 d6	 movaps	 xmm2, xmm6
  00ef8	0f 28 cf	 movaps	 xmm1, xmm7
  00efb	48 8b ce	 mov	 rcx, rsi
  00efe	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00f03	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00f07	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00f0b	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00f10	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00f15	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00f1a	f3 0f 58 ef	 addss	 xmm5, xmm7
  00f1e	f3 0f 58 c6	 addss	 xmm0, xmm6
  00f22	f3 0f 58 cf	 addss	 xmm1, xmm7
  00f26	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00f2b	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00f30	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00f35	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00f3a	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00f40	0f 28 d7	 movaps	 xmm2, xmm7
  00f43	0f 28 ce	 movaps	 xmm1, xmm6
  00f46	48 8b ce	 mov	 rcx, rsi
  00f49	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00f4e	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00f52	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00f56	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00f5b	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00f60	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00f65	f3 0f 58 ee	 addss	 xmm5, xmm6
  00f69	f3 0f 58 c6	 addss	 xmm0, xmm6
  00f6d	f3 0f 58 ce	 addss	 xmm1, xmm6
  00f71	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00f76	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00f7b	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00f80	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00f85	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00f8b	0f 28 d6	 movaps	 xmm2, xmm6
  00f8e	0f 28 ce	 movaps	 xmm1, xmm6
  00f91	48 8b ce	 mov	 rcx, rsi
  00f94	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00f99	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00f9d	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00fa1	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00fa6	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00fab	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00fb0	f3 0f 58 ee	 addss	 xmm5, xmm6
  00fb4	f3 0f 58 c6	 addss	 xmm0, xmm6
  00fb8	f3 0f 58 cf	 addss	 xmm1, xmm7
  00fbc	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  00fc1	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  00fc6	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  00fcb	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00fd0	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  00fd6	0f 28 d6	 movaps	 xmm2, xmm6
  00fd9	0f 28 cf	 movaps	 xmm1, xmm7
  00fdc	48 8b ce	 mov	 rcx, rsi
  00fdf	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00fe4	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  00fe8	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  00fec	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  00ff1	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  00ff6	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  00ffb	f3 0f 58 ef	 addss	 xmm5, xmm7
  00fff	f3 0f 58 c6	 addss	 xmm0, xmm6
  01003	f3 0f 58 cf	 addss	 xmm1, xmm7
  01007	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  0100c	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  01011	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  01016	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0101b	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
$LN305@renderFlui:
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 570  : 	b = world->getBlock(x - 1, y, z);

  01021	41 8d 55 ff	 lea	 edx, DWORD PTR [r13-1]
  01025	45 8b ce	 mov	 r9d, r14d
  01028	45 8b c7	 mov	 r8d, r15d
  0102b	48 8b cd	 mov	 rcx, rbp
  0102e	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock

; 571  : 	if(b != block && !b->solidFace(world, x - 1, y, z, Relatives::E))

  01033	49 3b c4	 cmp	 rax, r12
  01036	0f 84 da 03 00
	00		 je	 $LN379@renderFlui
  0103c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?E@Relatives@@3PEAVBlockFace@@EA ; Relatives::E
  01043	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01046	45 8d 45 ff	 lea	 r8d, DWORD PTR [r13-1]
  0104a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0104f	45 8b cf	 mov	 r9d, r15d
  01052	48 8b d5	 mov	 rdx, rbp
  01055	48 8b c8	 mov	 rcx, rax
  01058	44 89 74 24 20	 mov	 DWORD PTR [rsp+32], r14d
  0105d	41 ff 52 18	 call	 QWORD PTR [r10+24]
  01061	84 c0		 test	 al, al
  01063	0f 85 ad 03 00
	00		 jne	 $LN379@renderFlui

; 572  : 	{
; 573  : 		vStream->setIcon(block->getIcon(world, x, y, z, Relatives::W));

  01069	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?W@Relatives@@3PEAVBlockFace@@EA ; Relatives::W
  01070	4d 8b 14 24	 mov	 r10, QWORD PTR [r12]
  01074	45 8b cf	 mov	 r9d, r15d
  01077	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0107c	45 8b c5	 mov	 r8d, r13d
  0107f	48 8b d5	 mov	 rdx, rbp
  01082	49 8b cc	 mov	 rcx, r12
  01085	44 89 74 24 20	 mov	 DWORD PTR [rsp+32], r14d
  0108a	41 ff 52 08	 call	 QWORD PTR [r10+8]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 127  : 	setUV(v.u, v.v);

  0108e	48 8b ce	 mov	 rcx, rsi

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	if(icon != nullptr)
; 164  : 	{
; 165  : 		vertex.u = icon->u(u);
; 166  : 		vertex.v = icon->v(v);
; 167  : 	}
; 168  : 	else
; 169  : 	{
; 170  : 		vertex.u = u;
; 171  : 		vertex.v = v;
; 172  : 	}
; 173  : }
; 174  : 
; 175  : void VertexStream::setTranslation(float x, float y, float z)
; 176  : {
; 177  : 	translation = Vertex(x, y, z);
; 178  : }
; 179  : void VertexStream::setTranslation(Vertex vertex)
; 180  : {
; 181  : 	translation = vertex;
; 182  : }
; 183  : 
; 184  : void VertexStream::setIcon(TiledTexture::Icon* icon)
; 185  : {
; 186  : 	this->icon = icon;

  01091	48 89 46 30	 mov	 QWORD PTR [rsi+48], rax

; 127  : 	setUV(v.u, v.v);

  01095	0f 28 d7	 movaps	 xmm2, xmm7
  01098	0f 28 ce	 movaps	 xmm1, xmm6
  0109b	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  010a0	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  010a4	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  010a8	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  010ad	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  010b2	f3 0f 58 c7	 addss	 xmm0, xmm7
  010b6	f3 0f 58 ef	 addss	 xmm5, xmm7
  010ba	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  010bf	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  010c4	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  010c9	f3 0f 58 c7	 addss	 xmm0, xmm7
  010cd	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  010d2	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  010d7	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  010dd	0f 28 d6	 movaps	 xmm2, xmm6
  010e0	0f 28 ce	 movaps	 xmm1, xmm6
  010e3	48 8b ce	 mov	 rcx, rsi
  010e6	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  010eb	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  010ef	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  010f3	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  010f8	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  010fd	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  01102	f3 0f 58 ef	 addss	 xmm5, xmm7
  01106	f3 0f 58 c6	 addss	 xmm0, xmm6
  0110a	f3 0f 58 cf	 addss	 xmm1, xmm7
  0110e	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  01113	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  01118	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  0111d	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01122	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  01128	0f 28 d7	 movaps	 xmm2, xmm7
  0112b	0f 28 cf	 movaps	 xmm1, xmm7
  0112e	48 8b ce	 mov	 rcx, rsi
  01131	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  01136	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  0113a	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0113e	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  01143	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  01148	f3 0f 58 c7	 addss	 xmm0, xmm7
  0114c	f3 0f 58 ef	 addss	 xmm5, xmm7
  01150	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  01155	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  0115a	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  0115f	f3 0f 58 c6	 addss	 xmm0, xmm6
  01163	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  01168	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0116d	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  01173	0f 28 d6	 movaps	 xmm2, xmm6
  01176	0f 28 ce	 movaps	 xmm1, xmm6
  01179	48 8b ce	 mov	 rcx, rsi
  0117c	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  01181	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  01185	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  01189	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  0118e	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  01193	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  01198	f3 0f 58 ef	 addss	 xmm5, xmm7
  0119c	f3 0f 58 c6	 addss	 xmm0, xmm6
  011a0	f3 0f 58 cf	 addss	 xmm1, xmm7
  011a4	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  011a9	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  011ae	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  011b3	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  011b8	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  011be	0f 28 d6	 movaps	 xmm2, xmm6
  011c1	0f 28 cf	 movaps	 xmm1, xmm7
  011c4	48 8b ce	 mov	 rcx, rsi
  011c7	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 108  : 	vertex.x = x + translation.x;

  011cc	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]

; 109  : 	vertex.y = y + translation.y;

  011d1	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  011d6	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  011da	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  011de	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  011e3	f3 0f 58 ef	 addss	 xmm5, xmm7
  011e7	f3 0f 58 c6	 addss	 xmm0, xmm6
  011eb	f3 0f 58 ce	 addss	 xmm1, xmm6
  011ef	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  011f4	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  011f9	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  011fe	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01203	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  01209	0f 28 d7	 movaps	 xmm2, xmm7
  0120c	0f 28 cf	 movaps	 xmm1, xmm7
  0120f	48 8b ce	 mov	 rcx, rsi
  01212	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  01217	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  0121b	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0121f	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  01224	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  01229	f3 0f 58 c7	 addss	 xmm0, xmm7
  0122d	f3 0f 58 ef	 addss	 xmm5, xmm7
  01231	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  01236	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  0123b	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  01240	f3 0f 58 c6	 addss	 xmm0, xmm6
  01244	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  01249	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0124e	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  01254	0f 28 d7	 movaps	 xmm2, xmm7
  01257	0f 28 ce	 movaps	 xmm1, xmm6
  0125a	48 8b ce	 mov	 rcx, rsi
  0125d	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  01262	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  01266	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0126a	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  0126f	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  01274	f3 0f 58 c7	 addss	 xmm0, xmm7
  01278	f3 0f 58 ef	 addss	 xmm5, xmm7
  0127c	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  01281	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  01286	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  0128b	f3 0f 58 c6	 addss	 xmm0, xmm6
  0128f	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  01294	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01299	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  0129f	0f 28 d6	 movaps	 xmm2, xmm6
  012a2	0f 28 ce	 movaps	 xmm1, xmm6
  012a5	48 8b ce	 mov	 rcx, rsi
  012a8	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  012ad	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  012b1	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  012b5	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  012ba	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  012bf	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  012c4	f3 0f 58 ef	 addss	 xmm5, xmm7
  012c8	f3 0f 58 c6	 addss	 xmm0, xmm6
  012cc	f3 0f 58 ce	 addss	 xmm1, xmm6
  012d0	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  012d5	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  012da	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  012df	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  012e4	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  012ea	0f 28 d7	 movaps	 xmm2, xmm7
  012ed	0f 28 cf	 movaps	 xmm1, xmm7
  012f0	48 8b ce	 mov	 rcx, rsi
  012f3	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  012f8	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  012fc	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  01300	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  01305	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  0130a	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  0130f	f3 0f 58 ef	 addss	 xmm5, xmm7
  01313	f3 0f 58 c7	 addss	 xmm0, xmm7
  01317	f3 0f 58 cf	 addss	 xmm1, xmm7
  0131b	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  01320	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  01325	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  0132a	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0132f	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  01335	0f 28 d6	 movaps	 xmm2, xmm6
  01338	0f 28 ce	 movaps	 xmm1, xmm6
  0133b	48 8b ce	 mov	 rcx, rsi
  0133e	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  01343	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  01347	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0134b	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  01350	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  01355	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  0135a	f3 0f 58 ef	 addss	 xmm5, xmm7
  0135e	f3 0f 58 c6	 addss	 xmm0, xmm6
  01362	f3 0f 58 ce	 addss	 xmm1, xmm6
  01366	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  0136b	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  01370	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  01375	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0137a	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  01380	0f 28 d6	 movaps	 xmm2, xmm6
  01383	0f 28 cf	 movaps	 xmm1, xmm7
  01386	48 8b ce	 mov	 rcx, rsi
  01389	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  0138e	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  01392	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  01396	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  0139b	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  013a0	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  013a5	f3 0f 58 ef	 addss	 xmm5, xmm7
  013a9	f3 0f 58 c6	 addss	 xmm0, xmm6
  013ad	f3 0f 58 cf	 addss	 xmm1, xmm7
  013b1	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  013b6	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  013bb	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  013c0	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  013c5	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  013cb	0f 28 d7	 movaps	 xmm2, xmm7
  013ce	0f 28 cf	 movaps	 xmm1, xmm7
  013d1	48 8b ce	 mov	 rcx, rsi
  013d4	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  013d9	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  013dd	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  013e1	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  013e6	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  013eb	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  013f0	f3 0f 58 ef	 addss	 xmm5, xmm7
  013f4	f3 0f 58 c7	 addss	 xmm0, xmm7
  013f8	f3 0f 58 cf	 addss	 xmm1, xmm7
  013fc	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  01401	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  01406	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  0140b	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01410	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
$LN379@renderFlui:
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 590  : 	b = world->getBlock(x + 1, y, z);

  01416	41 8d 55 01	 lea	 edx, DWORD PTR [r13+1]
  0141a	45 8b ce	 mov	 r9d, r14d
  0141d	45 8b c7	 mov	 r8d, r15d
  01420	48 8b cd	 mov	 rcx, rbp
  01423	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock

; 591  : 	if(b != block && !b->solidFace(world, x + 1, y, z, Relatives::W))

  01428	49 3b c4	 cmp	 rax, r12
  0142b	0f 84 da 03 00
	00		 je	 $LN455@renderFlui
  01431	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?W@Relatives@@3PEAVBlockFace@@EA ; Relatives::W
  01438	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  0143b	45 8d 45 01	 lea	 r8d, DWORD PTR [r13+1]
  0143f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01444	45 8b cf	 mov	 r9d, r15d
  01447	48 8b d5	 mov	 rdx, rbp
  0144a	48 8b c8	 mov	 rcx, rax
  0144d	44 89 74 24 20	 mov	 DWORD PTR [rsp+32], r14d
  01452	41 ff 52 18	 call	 QWORD PTR [r10+24]
  01456	84 c0		 test	 al, al
  01458	0f 85 ad 03 00
	00		 jne	 $LN455@renderFlui

; 592  : 	{
; 593  : 		vStream->setIcon(block->getIcon(world, x, y, z, Relatives::E));

  0145e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?E@Relatives@@3PEAVBlockFace@@EA ; Relatives::E
  01465	4d 8b 14 24	 mov	 r10, QWORD PTR [r12]
  01469	45 8b cf	 mov	 r9d, r15d
  0146c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  01471	45 8b c5	 mov	 r8d, r13d
  01474	48 8b d5	 mov	 rdx, rbp
  01477	49 8b cc	 mov	 rcx, r12
  0147a	44 89 74 24 20	 mov	 DWORD PTR [rsp+32], r14d
  0147f	41 ff 52 08	 call	 QWORD PTR [r10+8]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 127  : 	setUV(v.u, v.v);

  01483	48 8b ce	 mov	 rcx, rsi

; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	if(icon != nullptr)
; 164  : 	{
; 165  : 		vertex.u = icon->u(u);
; 166  : 		vertex.v = icon->v(v);
; 167  : 	}
; 168  : 	else
; 169  : 	{
; 170  : 		vertex.u = u;
; 171  : 		vertex.v = v;
; 172  : 	}
; 173  : }
; 174  : 
; 175  : void VertexStream::setTranslation(float x, float y, float z)
; 176  : {
; 177  : 	translation = Vertex(x, y, z);
; 178  : }
; 179  : void VertexStream::setTranslation(Vertex vertex)
; 180  : {
; 181  : 	translation = vertex;
; 182  : }
; 183  : 
; 184  : void VertexStream::setIcon(TiledTexture::Icon* icon)
; 185  : {
; 186  : 	this->icon = icon;

  01486	48 89 46 30	 mov	 QWORD PTR [rsi+48], rax

; 127  : 	setUV(v.u, v.v);

  0148a	0f 28 d7	 movaps	 xmm2, xmm7
  0148d	0f 28 ce	 movaps	 xmm1, xmm6
  01490	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  01495	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  01499	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0149d	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  014a2	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  014a7	f3 0f 58 c7	 addss	 xmm0, xmm7
  014ab	f3 0f 58 ee	 addss	 xmm5, xmm6
  014af	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  014b4	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  014b9	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  014be	f3 0f 58 c7	 addss	 xmm0, xmm7
  014c2	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  014c7	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  014cc	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  014d2	0f 28 d6	 movaps	 xmm2, xmm6
  014d5	0f 28 ce	 movaps	 xmm1, xmm6
  014d8	48 8b ce	 mov	 rcx, rsi
  014db	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  014e0	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  014e4	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  014e8	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  014ed	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  014f2	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  014f7	f3 0f 58 ee	 addss	 xmm5, xmm6
  014fb	f3 0f 58 c6	 addss	 xmm0, xmm6
  014ff	f3 0f 58 cf	 addss	 xmm1, xmm7
  01503	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  01508	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  0150d	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  01512	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01517	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  0151d	0f 28 d7	 movaps	 xmm2, xmm7
  01520	0f 28 cf	 movaps	 xmm1, xmm7
  01523	48 8b ce	 mov	 rcx, rsi
  01526	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  0152b	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  0152f	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  01533	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  01538	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  0153d	f3 0f 58 c7	 addss	 xmm0, xmm7
  01541	f3 0f 58 ee	 addss	 xmm5, xmm6
  01545	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  0154a	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  0154f	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  01554	f3 0f 58 c6	 addss	 xmm0, xmm6
  01558	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  0155d	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01562	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  01568	0f 28 d6	 movaps	 xmm2, xmm6
  0156b	0f 28 ce	 movaps	 xmm1, xmm6
  0156e	48 8b ce	 mov	 rcx, rsi
  01571	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  01576	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  0157a	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0157e	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  01583	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  01588	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  0158d	f3 0f 58 ee	 addss	 xmm5, xmm6
  01591	f3 0f 58 c6	 addss	 xmm0, xmm6
  01595	f3 0f 58 cf	 addss	 xmm1, xmm7
  01599	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  0159e	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  015a3	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  015a8	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  015ad	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  015b3	0f 28 d6	 movaps	 xmm2, xmm6
  015b6	0f 28 cf	 movaps	 xmm1, xmm7
  015b9	48 8b ce	 mov	 rcx, rsi
  015bc	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 108  : 	vertex.x = x + translation.x;

  015c1	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]

; 109  : 	vertex.y = y + translation.y;

  015c6	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  015cb	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  015cf	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  015d3	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  015d8	f3 0f 58 ee	 addss	 xmm5, xmm6
  015dc	f3 0f 58 c6	 addss	 xmm0, xmm6
  015e0	f3 0f 58 ce	 addss	 xmm1, xmm6
  015e4	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  015e9	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  015ee	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  015f3	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  015f8	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  015fe	0f 28 d7	 movaps	 xmm2, xmm7
  01601	0f 28 cf	 movaps	 xmm1, xmm7
  01604	48 8b ce	 mov	 rcx, rsi
  01607	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  0160c	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  01610	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  01614	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  01619	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  0161e	f3 0f 58 c7	 addss	 xmm0, xmm7
  01622	f3 0f 58 ee	 addss	 xmm5, xmm6
  01626	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  0162b	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  01630	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  01635	f3 0f 58 c6	 addss	 xmm0, xmm6
  01639	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  0163e	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01643	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  01649	0f 28 d7	 movaps	 xmm2, xmm7
  0164c	0f 28 ce	 movaps	 xmm1, xmm6
  0164f	48 8b ce	 mov	 rcx, rsi
  01652	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  01657	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  0165b	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0165f	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  01664	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  01669	f3 0f 58 c7	 addss	 xmm0, xmm7
  0166d	f3 0f 58 ee	 addss	 xmm5, xmm6
  01671	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  01676	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [rsi+40]
  0167b	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  01680	f3 0f 58 c6	 addss	 xmm0, xmm6
  01684	f3 0f 11 46 40	 movss	 DWORD PTR [rsi+64], xmm0
  01689	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0168e	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  01694	0f 28 d6	 movaps	 xmm2, xmm6
  01697	0f 28 ce	 movaps	 xmm1, xmm6
  0169a	48 8b ce	 mov	 rcx, rsi
  0169d	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  016a2	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  016a6	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  016aa	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  016af	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  016b4	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  016b9	f3 0f 58 ee	 addss	 xmm5, xmm6
  016bd	f3 0f 58 c6	 addss	 xmm0, xmm6
  016c1	f3 0f 58 ce	 addss	 xmm1, xmm6
  016c5	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  016ca	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  016cf	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  016d4	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  016d9	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  016df	0f 28 d7	 movaps	 xmm2, xmm7
  016e2	0f 28 cf	 movaps	 xmm1, xmm7
  016e5	48 8b ce	 mov	 rcx, rsi
  016e8	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  016ed	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  016f1	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  016f5	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  016fa	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  016ff	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  01704	f3 0f 58 ee	 addss	 xmm5, xmm6
  01708	f3 0f 58 c7	 addss	 xmm0, xmm7
  0170c	f3 0f 58 cf	 addss	 xmm1, xmm7
  01710	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  01715	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  0171a	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  0171f	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01724	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  0172a	0f 28 d6	 movaps	 xmm2, xmm6
  0172d	0f 28 ce	 movaps	 xmm1, xmm6
  01730	48 8b ce	 mov	 rcx, rsi
  01733	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  01738	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  0173c	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  01740	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  01745	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  0174a	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  0174f	f3 0f 58 ee	 addss	 xmm5, xmm6
  01753	f3 0f 58 c6	 addss	 xmm0, xmm6
  01757	f3 0f 58 ce	 addss	 xmm1, xmm6
  0175b	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  01760	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  01765	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  0176a	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0176f	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  01775	0f 28 d6	 movaps	 xmm2, xmm6
  01778	0f 28 cf	 movaps	 xmm1, xmm7
  0177b	48 8b ce	 mov	 rcx, rsi
  0177e	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  01783	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  01787	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  0178b	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  01790	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  01795	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  0179a	f3 0f 58 ee	 addss	 xmm5, xmm6
  0179e	f3 0f 58 c6	 addss	 xmm0, xmm6
  017a2	f3 0f 58 cf	 addss	 xmm1, xmm7
  017a6	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  017ab	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  017b0	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  017b5	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  017ba	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 127  : 	setUV(v.u, v.v);

  017c0	0f 28 d7	 movaps	 xmm2, xmm7
  017c3	0f 28 cf	 movaps	 xmm1, xmm7
  017c6	48 8b ce	 mov	 rcx, rsi
  017c9	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  017ce	48 8d 56 38	 lea	 rdx, QWORD PTR [rsi+56]
  017d2	48 8d 4e 08	 lea	 rcx, QWORD PTR [rsi+8]
  017d6	f3 0f 10 6e 20	 movss	 xmm5, DWORD PTR [rsi+32]
  017db	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [rsi+36]
  017e0	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [rsi+40]
  017e5	f3 0f 58 ee	 addss	 xmm5, xmm6
  017e9	f3 0f 58 c7	 addss	 xmm0, xmm7
  017ed	f3 0f 58 cf	 addss	 xmm1, xmm7
  017f1	f3 0f 11 6e 38	 movss	 DWORD PTR [rsi+56], xmm5
  017f6	f3 0f 11 46 3c	 movss	 DWORD PTR [rsi+60], xmm0
  017fb	f3 0f 11 4e 40	 movss	 DWORD PTR [rsi+64], xmm1
  01800	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01805	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
$LN455@renderFlui:
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 611  : }

  0180b	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]
  01810	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
  01815	4c 8d 5c 24 50	 lea	 r11, QWORD PTR [rsp+80]
  0181a	b0 01		 mov	 al, 1
  0181c	49 8b 5b 30	 mov	 rbx, QWORD PTR [r11+48]
  01820	49 8b 6b 38	 mov	 rbp, QWORD PTR [r11+56]
  01824	49 8b 73 40	 mov	 rsi, QWORD PTR [r11+64]
  01828	49 8b e3	 mov	 rsp, r11
  0182b	41 5f		 pop	 r15
  0182d	41 5e		 pop	 r14
  0182f	41 5d		 pop	 r13
  01831	41 5c		 pop	 r12
  01833	5f		 pop	 rdi
  01834	c3		 ret	 0
?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ENDP ; BlockRenderers::renderFluidBlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp
;	COMDAT ?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z
_TEXT	SEGMENT
i2$1$ = 48
i2$1$ = 48
i2$1$ = 48
tv7167 = 48
tv7155 = 48
i3$1$ = 52
i3$1$ = 52
i2$1$ = 52
tv7165 = 52
tv7159 = 52
i1$1$ = 56
i4$1$ = 56
tv7160 = 56
tv7158 = 56
tv7154 = 56
i4$1$ = 60
i1$1$ = 60
i2$1$ = 60
tv7168 = 60
tv7157 = 60
i4$1$ = 64
i4$1$ = 64
i3$1$ = 64
tv7163 = 64
tv7153 = 64
i3$1$ = 68
tv7166 = 68
tv7164 = 68
tv7162 = 68
$T1 = 72
$T2 = 72
$T3 = 72
$T4 = 72
$T5 = 72
$T6 = 72
$T7 = 72
$T8 = 72
center$9 = 72
i3$1$ = 96
tv7097 = 96
i1$1$ = 100
tv7161 = 100
i1$1$ = 104
center$10 = 112
$T11 = 112
world$ = 352
tv7156 = 360
x$ = 360
i2$1$ = 368
y$ = 368
i3$1$ = 376
z$ = 376
block$ = 384
vStream$ = 392
?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z PROC ; BlockRenderers::renderOrdinaryBlock, COMDAT

; 8    : {

$LN536:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00007	44 89 48 20	 mov	 DWORD PTR [rax+32], r9d
  0000b	44 89 40 18	 mov	 DWORD PTR [rax+24], r8d
  0000f	89 50 10	 mov	 DWORD PTR [rax+16], edx
  00012	55		 push	 rbp
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	41 54		 push	 r12
  00017	41 55		 push	 r13
  00019	41 56		 push	 r14
  0001b	41 57		 push	 r15
  0001d	48 8d 68 a8	 lea	 rbp, QWORD PTR [rax-88]
  00021	48 81 ec 20 01
	00 00		 sub	 rsp, 288		; 00000120H
  00028	0f 29 70 b8	 movaps	 XMMWORD PTR [rax-72], xmm6
  0002c	0f 29 78 a8	 movaps	 XMMWORD PTR [rax-88], xmm7
  00030	44 0f 29 48 88	 movaps	 XMMWORD PTR [rax-120], xmm9

; 9    : 	if(!world->getBlock(x, y, z - 1)->solidFace(world, x, y, z - 1, Relatives::N))

  00035	41 8d 59 ff	 lea	 ebx, DWORD PTR [r9-1]
  00039	45 8b f9	 mov	 r15d, r9d
  0003c	45 8b f0	 mov	 r14d, r8d
  0003f	44 8b cb	 mov	 r9d, ebx
  00042	8b f2		 mov	 esi, edx
  00044	4c 8b e1	 mov	 r12, rcx
  00047	44 0f 29 a0 58
	ff ff ff	 movaps	 XMMWORD PTR [rax-168], xmm12
  0004f	44 0f 29 a8 48
	ff ff ff	 movaps	 XMMWORD PTR [rax-184], xmm13
  00057	44 0f 29 b0 38
	ff ff ff	 movaps	 XMMWORD PTR [rax-200], xmm14
  0005f	44 0f 29 40 98	 movaps	 XMMWORD PTR [rax-104], xmm8
  00064	44 0f 29 90 78
	ff ff ff	 movaps	 XMMWORD PTR [rax-136], xmm10
  0006c	44 0f 29 98 68
	ff ff ff	 movaps	 XMMWORD PTR [rax-152], xmm11
  00074	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00079	4c 8b 15 00 00
	00 00		 mov	 r10, QWORD PTR ?N@Relatives@@3PEAVBlockFace@@EA ; Relatives::N
  00080	45 8b ce	 mov	 r9d, r14d
  00083	4c 8b 18	 mov	 r11, QWORD PTR [rax]
  00086	4c 89 54 24 28	 mov	 QWORD PTR [rsp+40], r10
  0008b	44 8b c6	 mov	 r8d, esi
  0008e	49 8b d4	 mov	 rdx, r12
  00091	48 8b c8	 mov	 rcx, rax
  00094	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  00098	41 ff 53 18	 call	 QWORD PTR [r11+24]
  0009c	4c 8b ad 88 00
	00 00		 mov	 r13, QWORD PTR vStream$[rbp-256]
  000a3	33 ff		 xor	 edi, edi
  000a5	f3 44 0f 10 2d
	00 00 00 00	 movss	 xmm13, DWORD PTR __real@3e19999a
  000ae	f3 44 0f 10 0d
	00 00 00 00	 movss	 xmm9, DWORD PTR __real@3f800000
  000b7	f3 44 0f 10 35
	00 00 00 00	 movss	 xmm14, DWORD PTR __real@3e800000
  000c0	45 0f 57 d2	 xorps	 xmm10, xmm10
  000c4	89 7c 24 68	 mov	 DWORD PTR i1$1$[rsp], edi
  000c8	f3 44 0f 10 25
	00 00 00 00	 movss	 xmm12, DWORD PTR __real@437f0000
  000d1	f3 44 0f 10 1d
	00 00 00 00	 movss	 xmm11, DWORD PTR __real@3f000000
  000da	84 c0		 test	 al, al
  000dc	0f 85 f8 07 00
	00		 jne	 $LN147@renderOrdi

; 10   : 	{
; 11   : 		vStream->setIcon(block->getIcon(world, x, y, z, Relatives::S));

  000e2	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR block$[rbp-256]
  000e9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?S@Relatives@@3PEAVBlockFace@@EA ; Relatives::S
  000f0	45 8b ce	 mov	 r9d, r14d
  000f3	4c 8b 11	 mov	 r10, QWORD PTR [rcx]
  000f6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000fb	44 8b c6	 mov	 r8d, esi
  000fe	49 8b d4	 mov	 rdx, r12
  00101	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  00106	41 ff 52 08	 call	 QWORD PTR [r10+8]

; 18   : 		if(world->getBlock(x - 1, y, z - 1)->solidEdge(world, x - 1, y, z - 1, Relatives::EN))

  0010a	44 8b cb	 mov	 r9d, ebx
  0010d	45 8b c6	 mov	 r8d, r14d
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 186  : 	this->icon = icon;

  00110	49 89 45 30	 mov	 QWORD PTR [r13+48], rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 18   : 		if(world->getBlock(x - 1, y, z - 1)->solidEdge(world, x - 1, y, z - 1, Relatives::EN))

  00114	8d 46 ff	 lea	 eax, DWORD PTR [rsi-1]
  00117	49 8b cc	 mov	 rcx, r12
  0011a	8b d0		 mov	 edx, eax
  0011c	44 8b ff	 mov	 r15d, edi
  0011f	89 7c 24 34	 mov	 DWORD PTR i2$1$[rsp], edi
  00123	89 7c 24 60	 mov	 DWORD PTR i3$1$[rsp], edi
  00127	89 44 24 3c	 mov	 DWORD PTR tv7168[rsp], eax
  0012b	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00130	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::EN
  00137	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  0013a	44 8d 46 ff	 lea	 r8d, DWORD PTR [rsi-1]
  0013e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00143	45 8b ce	 mov	 r9d, r14d
  00146	49 8b d4	 mov	 rdx, r12
  00149	48 8b c8	 mov	 rcx, rax
  0014c	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  00150	41 ff 52 20	 call	 QWORD PTR [r10+32]
  00154	84 c0		 test	 al, al
  00156	74 08		 je	 SHORT $LN53@renderOrdi

; 19   : 		{
; 20   : 			i1++;
; 21   : 			i4++;

  00158	bf 01 00 00 00	 mov	 edi, 1
  0015d	44 8b ff	 mov	 r15d, edi
$LN53@renderOrdi:

; 22   : 		}
; 23   : 
; 24   : 		if(world->getBlock(x, y - 1, z - 1)->solidEdge(world, x, y - 1, z - 1, Relatives::UN))

  00160	41 8d 46 ff	 lea	 eax, DWORD PTR [r14-1]
  00164	44 8b cb	 mov	 r9d, ebx
  00167	8b d6		 mov	 edx, esi
  00169	44 8b c0	 mov	 r8d, eax
  0016c	49 8b cc	 mov	 rcx, r12
  0016f	89 44 24 40	 mov	 DWORD PTR tv7163[rsp], eax
  00173	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00178	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?UN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::UN
  0017f	45 8d 4e ff	 lea	 r9d, DWORD PTR [r14-1]
  00183	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00186	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0018b	44 8b c6	 mov	 r8d, esi
  0018e	49 8b d4	 mov	 rdx, r12
  00191	48 8b c8	 mov	 rcx, rax
  00194	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  00198	41 ff 52 20	 call	 QWORD PTR [r10+32]
  0019c	84 c0		 test	 al, al
  0019e	74 0b		 je	 SHORT $LN52@renderOrdi

; 25   : 		{
; 26   : 			i1++;

  001a0	41 ff c7	 inc	 r15d

; 27   : 			i2++;

  001a3	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR i2$1$[rsp], 1
$LN52@renderOrdi:

; 28   : 		}
; 29   : 
; 30   : 		if(world->getBlock(x + 1, y, z - 1)->solidEdge(world, x + 1, y, z - 1, Relatives::WN))

  001ab	8d 46 01	 lea	 eax, DWORD PTR [rsi+1]
  001ae	44 8b cb	 mov	 r9d, ebx
  001b1	45 8b c6	 mov	 r8d, r14d
  001b4	8b d0		 mov	 edx, eax
  001b6	49 8b cc	 mov	 rcx, r12
  001b9	89 44 24 38	 mov	 DWORD PTR tv7160[rsp], eax
  001bd	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  001c2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WN
  001c9	44 8d 46 01	 lea	 r8d, DWORD PTR [rsi+1]
  001cd	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  001d0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001d5	45 8b ce	 mov	 r9d, r14d
  001d8	49 8b d4	 mov	 rdx, r12
  001db	48 8b c8	 mov	 rcx, rax
  001de	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  001e2	41 ff 52 20	 call	 QWORD PTR [r10+32]
  001e6	84 c0		 test	 al, al
  001e8	74 0c		 je	 SHORT $LN51@renderOrdi

; 31   : 		{
; 32   : 			i2++;

  001ea	ff 44 24 34	 inc	 DWORD PTR i2$1$[rsp]

; 33   : 			i3++;

  001ee	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR i3$1$[rsp], 1
$LN51@renderOrdi:

; 34   : 		}
; 35   : 
; 36   : 		if(world->getBlock(x, y + 1, z - 1)->solidEdge(world, x, y + 1, z - 1, Relatives::DN))

  001f6	41 ff c6	 inc	 r14d
  001f9	44 8b cb	 mov	 r9d, ebx
  001fc	8b d6		 mov	 edx, esi
  001fe	45 8b c6	 mov	 r8d, r14d
  00201	49 8b cc	 mov	 rcx, r12
  00204	44 89 74 24 30	 mov	 DWORD PTR tv7155[rsp], r14d
  00209	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0020e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?DN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::DN
  00215	45 8b ce	 mov	 r9d, r14d
  00218	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  0021b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00220	44 8b c6	 mov	 r8d, esi
  00223	49 8b d4	 mov	 rdx, r12
  00226	48 8b c8	 mov	 rcx, rax
  00229	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  0022d	41 ff 52 20	 call	 QWORD PTR [r10+32]

; 37   : 		{
; 38   : 			i3++;

  00231	44 8b 74 24 60	 mov	 r14d, DWORD PTR i3$1$[rsp]
  00236	84 c0		 test	 al, al
  00238	74 05		 je	 SHORT $LN50@renderOrdi
  0023a	41 ff c6	 inc	 r14d

; 39   : 			i4++;

  0023d	ff c7		 inc	 edi
$LN50@renderOrdi:

; 40   : 		}
; 41   : 
; 42   : 		if(i1 < 2 && world->getBlock(x - 1, y - 1, z - 1)->solidCorner(world, x - 1, y - 1, z - 1, Relatives::EUN))

  0023f	41 83 ff 02	 cmp	 r15d, 2
  00243	7d 42		 jge	 SHORT $LN49@renderOrdi
  00245	44 8b 44 24 40	 mov	 r8d, DWORD PTR tv7163[rsp]
  0024a	8b 54 24 3c	 mov	 edx, DWORD PTR tv7168[rsp]
  0024e	44 8b cb	 mov	 r9d, ebx
  00251	49 8b cc	 mov	 rcx, r12
  00254	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00259	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EUN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EUN
  00260	44 8b 4c 24 40	 mov	 r9d, DWORD PTR tv7163[rsp]
  00265	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00268	44 8b 44 24 3c	 mov	 r8d, DWORD PTR tv7168[rsp]
  0026d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00272	49 8b d4	 mov	 rdx, r12
  00275	48 8b c8	 mov	 rcx, rax
  00278	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  0027c	41 ff 52 28	 call	 QWORD PTR [r10+40]
  00280	84 c0		 test	 al, al
  00282	74 03		 je	 SHORT $LN49@renderOrdi

; 43   : 		{
; 44   : 			i1++;

  00284	41 ff c7	 inc	 r15d
$LN49@renderOrdi:

; 45   : 		}
; 46   : 
; 47   : 		if(i2 < 2 && world->getBlock(x + 1, y - 1, z - 1)->solidCorner(world, x + 1, y - 1, z - 1, Relatives::WUN))

  00287	8b 74 24 34	 mov	 esi, DWORD PTR i2$1$[rsp]
  0028b	83 fe 02	 cmp	 esi, 2
  0028e	7d 41		 jge	 SHORT $LN48@renderOrdi
  00290	44 8b 44 24 40	 mov	 r8d, DWORD PTR tv7163[rsp]
  00295	8b 54 24 38	 mov	 edx, DWORD PTR tv7160[rsp]
  00299	44 8b cb	 mov	 r9d, ebx
  0029c	49 8b cc	 mov	 rcx, r12
  0029f	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  002a4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WUN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WUN
  002ab	44 8b 4c 24 40	 mov	 r9d, DWORD PTR tv7163[rsp]
  002b0	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  002b3	44 8b 44 24 38	 mov	 r8d, DWORD PTR tv7160[rsp]
  002b8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002bd	49 8b d4	 mov	 rdx, r12
  002c0	48 8b c8	 mov	 rcx, rax
  002c3	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  002c7	41 ff 52 28	 call	 QWORD PTR [r10+40]
  002cb	84 c0		 test	 al, al
  002cd	74 02		 je	 SHORT $LN48@renderOrdi

; 48   : 		{
; 49   : 			i2++;

  002cf	ff c6		 inc	 esi
$LN48@renderOrdi:

; 50   : 		}
; 51   : 								
; 52   : 		if(i3 < 2 && world->getBlock(x + 1, y + 1, z - 1)->solidCorner(world, x + 1, y + 1, z - 1, Relatives::WDN))

  002d1	41 83 fe 02	 cmp	 r14d, 2
  002d5	7d 42		 jge	 SHORT $LN47@renderOrdi
  002d7	44 8b 44 24 30	 mov	 r8d, DWORD PTR tv7155[rsp]
  002dc	8b 54 24 38	 mov	 edx, DWORD PTR tv7160[rsp]
  002e0	44 8b cb	 mov	 r9d, ebx
  002e3	49 8b cc	 mov	 rcx, r12
  002e6	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  002eb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WDN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WDN
  002f2	44 8b 4c 24 30	 mov	 r9d, DWORD PTR tv7155[rsp]
  002f7	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  002fa	44 8b 44 24 38	 mov	 r8d, DWORD PTR tv7160[rsp]
  002ff	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00304	49 8b d4	 mov	 rdx, r12
  00307	48 8b c8	 mov	 rcx, rax
  0030a	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  0030e	41 ff 52 28	 call	 QWORD PTR [r10+40]
  00312	84 c0		 test	 al, al
  00314	74 03		 je	 SHORT $LN47@renderOrdi

; 53   : 		{
; 54   : 			i3++;

  00316	41 ff c6	 inc	 r14d
$LN47@renderOrdi:

; 55   : 		}
; 56   : 								
; 57   : 		if(i4 < 2 && world->getBlock(x - 1, y + 1, z - 1)->solidCorner(world, x - 1, y + 1, z - 1, Relatives::EDN))

  00319	83 ff 02	 cmp	 edi, 2
  0031c	7d 41		 jge	 SHORT $LN46@renderOrdi
  0031e	44 8b 44 24 30	 mov	 r8d, DWORD PTR tv7155[rsp]
  00323	8b 54 24 3c	 mov	 edx, DWORD PTR tv7168[rsp]
  00327	44 8b cb	 mov	 r9d, ebx
  0032a	49 8b cc	 mov	 rcx, r12
  0032d	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00332	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EDN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EDN
  00339	44 8b 4c 24 30	 mov	 r9d, DWORD PTR tv7155[rsp]
  0033e	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00341	44 8b 44 24 3c	 mov	 r8d, DWORD PTR tv7168[rsp]
  00346	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0034b	49 8b d4	 mov	 rdx, r12
  0034e	48 8b c8	 mov	 rcx, rax
  00351	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  00355	41 ff 52 28	 call	 QWORD PTR [r10+40]
  00359	84 c0		 test	 al, al
  0035b	74 02		 je	 SHORT $LN46@renderOrdi

; 58   : 		{
; 59   : 			i4++;

  0035d	ff c7		 inc	 edi
$LN46@renderOrdi:
  0035f	66 41 0f 6e c7	 movd	 xmm0, r15d

; 62   : 		float f1 = 1.0F - i1 * 0.15f;

  00364	41 0f 28 d1	 movaps	 xmm2, xmm9
  00368	66 0f 6e ce	 movd	 xmm1, esi
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 137  : 	setUV(v.u, v.v);

  0036c	49 8b cd	 mov	 rcx, r13
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 62   : 		float f1 = 1.0F - i1 * 0.15f;

  0036f	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 63   : 		float f2 = 1.0F - i2 * 0.15f;

  00372	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00375	f3 41 0f 59 c5	 mulss	 xmm0, xmm13
  0037a	f3 41 0f 59 cd	 mulss	 xmm1, xmm13
  0037f	f3 0f 5c d0	 subss	 xmm2, xmm0
  00383	66 41 0f 6e c6	 movd	 xmm0, r14d
  00388	41 0f 28 f1	 movaps	 xmm6, xmm9

; 64   : 		float f3 = 1.0F - i3 * 0.15f;

  0038c	41 0f 28 f9	 movaps	 xmm7, xmm9
  00390	f3 0f 5c f1	 subss	 xmm6, xmm1
  00394	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00397	66 0f 6e cf	 movd	 xmm1, edi

; 65   : 		float f4 = 1.0F - i4 * 0.15f;

  0039b	45 0f 28 c1	 movaps	 xmm8, xmm9
  0039f	f3 41 0f 59 c5	 mulss	 xmm0, xmm13
  003a4	f3 0f 5c f8	 subss	 xmm7, xmm0
  003a8	0f 5b c9	 cvtdq2ps xmm1, xmm1

; 67   : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  003ab	0f 28 c6	 movaps	 xmm0, xmm6
  003ae	f3 0f 58 c2	 addss	 xmm0, xmm2
  003b2	f3 41 0f 59 cd	 mulss	 xmm1, xmm13
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  003b7	f3 41 0f 59 d4	 mulss	 xmm2, xmm12
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 67   : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  003bc	f3 0f 58 c7	 addss	 xmm0, xmm7
  003c0	f3 44 0f 5c c1	 subss	 xmm8, xmm1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  003c5	f3 48 0f 2c fa	 cvttss2si rdi, xmm2

; 137  : 	setUV(v.u, v.v);

  003ca	41 0f 28 d2	 movaps	 xmm2, xmm10
  003ce	41 0f 28 ca	 movaps	 xmm1, xmm10
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 67   : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  003d2	f3 41 0f 58 c0	 addss	 xmm0, xmm8
  003d7	f3 41 0f 59 c6	 mulss	 xmm0, xmm14
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  003dc	f3 41 0f 59 c4	 mulss	 xmm0, xmm12
  003e1	f3 4c 0f 2c f8	 cvttss2si r15, xmm0

; 137  : 	setUV(v.u, v.v);

  003e6	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  003eb	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 111  : 
; 112  : 	vertices.push_back(vertex);

  003f1	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  003f5	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  003f9	41 88 7d 4c	 mov	 BYTE PTR [r13+76], dil

; 157  : 	vertex.g = g;

  003fd	41 88 7d 4d	 mov	 BYTE PTR [r13+77], dil

; 158  : 	vertex.b = b;

  00401	41 88 7d 4e	 mov	 BYTE PTR [r13+78], dil

; 159  : 	vertex.a = a;

  00405	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  0040a	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  0040f	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 109  : 	vertex.y = y + translation.y;

  00415	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]
  0041b	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  00420	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0

; 110  : 	vertex.z = z + translation.z;

  00426	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  0042c	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  00431	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00437	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0043c	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  00442	f3 41 0f 59 f4	 mulss	 xmm6, xmm12

; 137  : 	setUV(v.u, v.v);

  00447	41 0f 28 d2	 movaps	 xmm2, xmm10
  0044b	41 0f 28 c9	 movaps	 xmm1, xmm9
  0044f	49 8b cd	 mov	 rcx, r13

; 70   : {}

  00452	f3 48 0f 2c de	 cvttss2si rbx, xmm6

; 137  : 	setUV(v.u, v.v);

  00457	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0045c	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  00460	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  00466	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  0046c	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  00470	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  00474	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00478	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 109  : 	vertex.y = y + translation.y;

  0047d	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 158  : 	vertex.b = b;

  00482	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  00486	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  0048b	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  00491	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  00497	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  0049d	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  004a2	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  004a8	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  004ad	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  004b3	41 0f 28 d3	 movaps	 xmm2, xmm11
  004b7	41 0f 28 cb	 movaps	 xmm1, xmm11
  004bb	49 8b cd	 mov	 rcx, r13
  004be	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  004c3	45 88 7d 4c	 mov	 BYTE PTR [r13+76], r15b

; 157  : 	vertex.g = g;

  004c7	45 88 7d 4d	 mov	 BYTE PTR [r13+77], r15b

; 158  : 	vertex.b = b;

  004cb	45 88 7d 4e	 mov	 BYTE PTR [r13+78], r15b

; 159  : 	vertex.a = a;

  004cf	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  004d4	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 109  : 	vertex.y = y + translation.y;

  004da	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]

; 111  : 
; 112  : 	vertices.push_back(vertex);

  004e0	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  004e4	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  004e8	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  004ed	f3 41 0f 58 cb	 addss	 xmm1, xmm11
  004f2	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0
  004f8	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  004fe	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  00504	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  00509	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0
  0050f	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00514	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  0051a	41 0f 28 d2	 movaps	 xmm2, xmm10
  0051e	41 0f 28 c9	 movaps	 xmm1, xmm9
  00522	49 8b cd	 mov	 rcx, r13
  00525	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0052a	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  0052e	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  00532	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  00538	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  0053e	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00543	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  00548	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  0054c	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 158  : 	vertex.b = b;

  00550	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  00554	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00559	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  0055f	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  00565	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  0056b	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  00570	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00576	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0057b	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  00581	f3 41 0f 59 fc	 mulss	 xmm7, xmm12

; 137  : 	setUV(v.u, v.v);

  00586	41 0f 28 d1	 movaps	 xmm2, xmm9
  0058a	41 0f 28 c9	 movaps	 xmm1, xmm9
  0058e	49 8b cd	 mov	 rcx, r13

; 70   : {}

  00591	f3 48 0f 2c df	 cvttss2si rbx, xmm7

; 137  : 	setUV(v.u, v.v);

  00596	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0059b	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  0059f	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  005a5	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  005ab	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  005af	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  005b3	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  005b7	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 109  : 	vertex.y = y + translation.y;

  005bc	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 158  : 	vertex.b = b;

  005c1	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  005c5	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  005ca	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  005d0	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  005d6	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  005dc	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  005e1	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  005e7	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  005ec	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  005f2	41 0f 28 d3	 movaps	 xmm2, xmm11
  005f6	41 0f 28 cb	 movaps	 xmm1, xmm11
  005fa	49 8b cd	 mov	 rcx, r13
  005fd	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00602	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  00606	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  0060a	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  00610	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  00616	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  0061b	f3 41 0f 58 cb	 addss	 xmm1, xmm11

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  00620	45 88 7d 4c	 mov	 BYTE PTR [r13+76], r15b

; 157  : 	vertex.g = g;

  00624	45 88 7d 4d	 mov	 BYTE PTR [r13+77], r15b

; 158  : 	vertex.b = b;

  00628	45 88 7d 4e	 mov	 BYTE PTR [r13+78], r15b

; 159  : 	vertex.a = a;

  0062c	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00631	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  00637	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  0063d	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  00643	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  00648	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0064e	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00653	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  00659	41 0f 28 d1	 movaps	 xmm2, xmm9
  0065d	41 0f 28 c9	 movaps	 xmm1, xmm9
  00661	49 8b cd	 mov	 rcx, r13
  00664	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00669	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 109  : 	vertex.y = y + translation.y;

  0066f	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00675	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  00679	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  0067d	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00681	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 109  : 	vertex.y = y + translation.y;

  00686	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 157  : 	vertex.g = g;

  0068b	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 158  : 	vertex.b = b;

  0068f	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  00693	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00698	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  0069e	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  006a4	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  006aa	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  006af	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  006b5	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  006ba	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  006c0	f3 45 0f 59 c4	 mulss	 xmm8, xmm12

; 137  : 	setUV(v.u, v.v);

  006c5	41 0f 28 d1	 movaps	 xmm2, xmm9
  006c9	41 0f 28 ca	 movaps	 xmm1, xmm10
  006cd	49 8b cd	 mov	 rcx, r13

; 70   : {}

  006d0	f3 49 0f 2c d8	 cvttss2si rbx, xmm8

; 137  : 	setUV(v.u, v.v);

  006d5	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  006da	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  006de	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  006e4	f3 41 0f 10 4d
	28		 movss	 xmm1, DWORD PTR [r13+40]
  006ea	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  006ee	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  006f2	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  006f6	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 110  : 	vertex.z = z + translation.z;

  006fb	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 158  : 	vertex.b = b;

  00700	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  00704	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00709	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 109  : 	vertex.y = y + translation.y;

  0070f	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]

; 110  : 	vertex.z = z + translation.z;

  00715	f3 41 0f 11 4d
	40		 movss	 DWORD PTR [r13+64], xmm1
  0071b	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00720	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00726	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0072b	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  00731	41 0f 28 d3	 movaps	 xmm2, xmm11
  00735	41 0f 28 cb	 movaps	 xmm1, xmm11
  00739	49 8b cd	 mov	 rcx, r13
  0073c	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00741	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  00745	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  00749	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  0074f	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  00755	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  0075a	f3 41 0f 58 cb	 addss	 xmm1, xmm11

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  0075f	45 88 7d 4c	 mov	 BYTE PTR [r13+76], r15b

; 157  : 	vertex.g = g;

  00763	45 88 7d 4d	 mov	 BYTE PTR [r13+77], r15b

; 158  : 	vertex.b = b;

  00767	45 88 7d 4e	 mov	 BYTE PTR [r13+78], r15b

; 159  : 	vertex.a = a;

  0076b	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00770	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  00776	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  0077c	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  00782	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  00787	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0078d	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00792	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  00798	41 0f 28 d1	 movaps	 xmm2, xmm9
  0079c	41 0f 28 ca	 movaps	 xmm1, xmm10
  007a0	49 8b cd	 mov	 rcx, r13
  007a3	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  007a8	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  007ac	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  007b0	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 110  : 	vertex.z = z + translation.z;

  007b6	f3 41 0f 10 4d
	28		 movss	 xmm1, DWORD PTR [r13+40]
  007bc	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  007c1	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 158  : 	vertex.b = b;

  007c6	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  007ca	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 111  : 
; 112  : 	vertices.push_back(vertex);

  007cf	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  007d3	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  007d7	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0
  007dd	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]
  007e3	f3 41 0f 11 4d
	40		 movss	 DWORD PTR [r13+64], xmm1
  007e9	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  007ee	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0
  007f4	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  007f9	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  007ff	41 0f 28 d2	 movaps	 xmm2, xmm10
  00803	41 0f 28 ca	 movaps	 xmm1, xmm10
  00807	49 8b cd	 mov	 rcx, r13
  0080a	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0080f	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  00813	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  00817	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  0081d	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  00823	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  00828	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  0082d	41 88 7d 4c	 mov	 BYTE PTR [r13+76], dil

; 157  : 	vertex.g = g;

  00831	41 88 7d 4d	 mov	 BYTE PTR [r13+77], dil

; 158  : 	vertex.b = b;

  00835	41 88 7d 4e	 mov	 BYTE PTR [r13+78], dil

; 159  : 	vertex.a = a;

  00839	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  0083e	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  00844	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  0084a	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  00850	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  00855	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0085b	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00860	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  00866	41 0f 28 d3	 movaps	 xmm2, xmm11
  0086a	41 0f 28 cb	 movaps	 xmm1, xmm11
  0086e	49 8b cd	 mov	 rcx, r13
  00871	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00876	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  0087a	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  0087e	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  00884	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  0088a	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  0088f	f3 41 0f 58 cb	 addss	 xmm1, xmm11

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  00894	45 88 7d 4c	 mov	 BYTE PTR [r13+76], r15b

; 157  : 	vertex.g = g;

  00898	45 88 7d 4d	 mov	 BYTE PTR [r13+77], r15b

; 158  : 	vertex.b = b;

  0089c	45 88 7d 4e	 mov	 BYTE PTR [r13+78], r15b

; 159  : 	vertex.a = a;

  008a0	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  008a5	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  008ab	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  008b1	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  008b7	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  008bc	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  008c2	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  008c7	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
  008cd	8b 75 68	 mov	 esi, DWORD PTR x$[rbp-256]
  008d0	44 8b 75 70	 mov	 r14d, DWORD PTR y$[rbp-256]
  008d4	44 8b 7d 78	 mov	 r15d, DWORD PTR z$[rbp-256]
  008d8	33 ff		 xor	 edi, edi
$LN147@renderOrdi:
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 87   : 	if(!world->getBlock(x, y, z + 1)->solidFace(world, x, y, z + 1, Relatives::S))

  008da	41 8d 5f 01	 lea	 ebx, DWORD PTR [r15+1]
  008de	45 8b c6	 mov	 r8d, r14d
  008e1	8b d6		 mov	 edx, esi
  008e3	44 8b cb	 mov	 r9d, ebx
  008e6	49 8b cc	 mov	 rcx, r12
  008e9	89 5c 24 60	 mov	 DWORD PTR tv7097[rsp], ebx
  008ed	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  008f2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?S@Relatives@@3PEAVBlockFace@@EA ; Relatives::S
  008f9	45 8b ce	 mov	 r9d, r14d
  008fc	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  008ff	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00904	44 8b c6	 mov	 r8d, esi
  00907	49 8b d4	 mov	 rdx, r12
  0090a	48 8b c8	 mov	 rcx, rax
  0090d	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  00911	41 ff 52 18	 call	 QWORD PTR [r10+24]
  00915	84 c0		 test	 al, al
  00917	0f 85 fa 07 00
	00		 jne	 $LN239@renderOrdi

; 88   : 	{
; 89   : 		vStream->setIcon(block->getIcon(world, x, y, z, Relatives::N));

  0091d	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR block$[rbp-256]
  00924	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?N@Relatives@@3PEAVBlockFace@@EA ; Relatives::N
  0092b	45 8b ce	 mov	 r9d, r14d
  0092e	4c 8b 11	 mov	 r10, QWORD PTR [rcx]
  00931	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00936	44 8b c6	 mov	 r8d, esi
  00939	49 8b d4	 mov	 rdx, r12
  0093c	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  00941	41 ff 52 08	 call	 QWORD PTR [r10+8]

; 96   : 		if(world->getBlock(x - 1, y, z + 1)->solidEdge(world, x - 1, y, z + 1, Relatives::ES))

  00945	44 8b cb	 mov	 r9d, ebx
  00948	45 8b c6	 mov	 r8d, r14d
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 186  : 	this->icon = icon;

  0094b	49 89 45 30	 mov	 QWORD PTR [r13+48], rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 96   : 		if(world->getBlock(x - 1, y, z + 1)->solidEdge(world, x - 1, y, z + 1, Relatives::ES))

  0094f	8d 46 ff	 lea	 eax, DWORD PTR [rsi-1]
  00952	49 8b cc	 mov	 rcx, r12
  00955	8b d0		 mov	 edx, eax
  00957	44 8b ff	 mov	 r15d, edi
  0095a	89 7c 24 3c	 mov	 DWORD PTR i2$1$[rsp], edi
  0095e	89 7c 24 40	 mov	 DWORD PTR i3$1$[rsp], edi
  00962	89 44 24 30	 mov	 DWORD PTR tv7167[rsp], eax
  00966	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0096b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?ES@Relatives@@3PEAVBlockEdge@@EA ; Relatives::ES
  00972	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00975	44 8d 46 ff	 lea	 r8d, DWORD PTR [rsi-1]
  00979	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0097e	45 8b ce	 mov	 r9d, r14d
  00981	49 8b d4	 mov	 rdx, r12
  00984	48 8b c8	 mov	 rcx, rax
  00987	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  0098b	41 ff 52 20	 call	 QWORD PTR [r10+32]
  0098f	84 c0		 test	 al, al
  00991	74 08		 je	 SHORT $LN44@renderOrdi

; 97   : 		{
; 98   : 			i1++;
; 99   : 			i4++;

  00993	bf 01 00 00 00	 mov	 edi, 1
  00998	44 8b ff	 mov	 r15d, edi
$LN44@renderOrdi:

; 100  : 		}
; 101  : 
; 102  : 		if(world->getBlock(x, y - 1, z + 1)->solidEdge(world, x, y - 1, z + 1, Relatives::US))

  0099b	41 8d 46 ff	 lea	 eax, DWORD PTR [r14-1]
  0099f	44 8b cb	 mov	 r9d, ebx
  009a2	8b d6		 mov	 edx, esi
  009a4	44 8b c0	 mov	 r8d, eax
  009a7	49 8b cc	 mov	 rcx, r12
  009aa	89 44 24 44	 mov	 DWORD PTR tv7162[rsp], eax
  009ae	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  009b3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?US@Relatives@@3PEAVBlockEdge@@EA ; Relatives::US
  009ba	45 8d 4e ff	 lea	 r9d, DWORD PTR [r14-1]
  009be	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  009c1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009c6	44 8b c6	 mov	 r8d, esi
  009c9	49 8b d4	 mov	 rdx, r12
  009cc	48 8b c8	 mov	 rcx, rax
  009cf	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  009d3	41 ff 52 20	 call	 QWORD PTR [r10+32]
  009d7	84 c0		 test	 al, al
  009d9	74 0b		 je	 SHORT $LN43@renderOrdi

; 103  : 		{
; 104  : 			i1++;

  009db	41 ff c7	 inc	 r15d

; 105  : 			i2++;

  009de	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR i2$1$[rsp], 1
$LN43@renderOrdi:

; 106  : 		}
; 107  : 
; 108  : 		if(world->getBlock(x + 1, y, z + 1)->solidEdge(world, x + 1, y, z + 1, Relatives::WS))

  009e6	8d 46 01	 lea	 eax, DWORD PTR [rsi+1]
  009e9	44 8b cb	 mov	 r9d, ebx
  009ec	45 8b c6	 mov	 r8d, r14d
  009ef	8b d0		 mov	 edx, eax
  009f1	49 8b cc	 mov	 rcx, r12
  009f4	89 44 24 34	 mov	 DWORD PTR tv7159[rsp], eax
  009f8	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  009fd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WS@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WS
  00a04	44 8d 46 01	 lea	 r8d, DWORD PTR [rsi+1]
  00a08	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00a0b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a10	45 8b ce	 mov	 r9d, r14d
  00a13	49 8b d4	 mov	 rdx, r12
  00a16	48 8b c8	 mov	 rcx, rax
  00a19	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  00a1d	41 ff 52 20	 call	 QWORD PTR [r10+32]
  00a21	84 c0		 test	 al, al
  00a23	74 0c		 je	 SHORT $LN42@renderOrdi

; 109  : 		{
; 110  : 			i2++;

  00a25	ff 44 24 3c	 inc	 DWORD PTR i2$1$[rsp]

; 111  : 			i3++;

  00a29	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR i3$1$[rsp], 1
$LN42@renderOrdi:

; 112  : 		}
; 113  : 
; 114  : 		if(world->getBlock(x, y + 1, z + 1)->solidEdge(world, x, y + 1, z + 1, Relatives::DS))

  00a31	41 ff c6	 inc	 r14d
  00a34	44 8b cb	 mov	 r9d, ebx
  00a37	8b d6		 mov	 edx, esi
  00a39	45 8b c6	 mov	 r8d, r14d
  00a3c	49 8b cc	 mov	 rcx, r12
  00a3f	44 89 74 24 38	 mov	 DWORD PTR tv7154[rsp], r14d
  00a44	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00a49	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?DS@Relatives@@3PEAVBlockEdge@@EA ; Relatives::DS
  00a50	45 8b ce	 mov	 r9d, r14d
  00a53	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00a56	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a5b	44 8b c6	 mov	 r8d, esi
  00a5e	49 8b d4	 mov	 rdx, r12
  00a61	48 8b c8	 mov	 rcx, rax
  00a64	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  00a68	41 ff 52 20	 call	 QWORD PTR [r10+32]

; 115  : 		{
; 116  : 			i3++;

  00a6c	44 8b 74 24 40	 mov	 r14d, DWORD PTR i3$1$[rsp]
  00a71	84 c0		 test	 al, al
  00a73	74 05		 je	 SHORT $LN41@renderOrdi
  00a75	41 ff c6	 inc	 r14d

; 117  : 			i4++;

  00a78	ff c7		 inc	 edi
$LN41@renderOrdi:

; 118  : 		}
; 119  : 
; 120  : 		if(i1 < 2 && world->getBlock(x - 1, y - 1, z + 1)->solidCorner(world, x - 1, y - 1, z + 1, Relatives::EUS))

  00a7a	41 83 ff 02	 cmp	 r15d, 2
  00a7e	7d 42		 jge	 SHORT $LN40@renderOrdi
  00a80	44 8b 44 24 44	 mov	 r8d, DWORD PTR tv7162[rsp]
  00a85	8b 54 24 30	 mov	 edx, DWORD PTR tv7167[rsp]
  00a89	44 8b cb	 mov	 r9d, ebx
  00a8c	49 8b cc	 mov	 rcx, r12
  00a8f	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00a94	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EUS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EUS
  00a9b	44 8b 4c 24 44	 mov	 r9d, DWORD PTR tv7162[rsp]
  00aa0	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00aa3	44 8b 44 24 30	 mov	 r8d, DWORD PTR tv7167[rsp]
  00aa8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00aad	49 8b d4	 mov	 rdx, r12
  00ab0	48 8b c8	 mov	 rcx, rax
  00ab3	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  00ab7	41 ff 52 28	 call	 QWORD PTR [r10+40]
  00abb	84 c0		 test	 al, al
  00abd	74 03		 je	 SHORT $LN40@renderOrdi

; 121  : 		{
; 122  : 			i1++;

  00abf	41 ff c7	 inc	 r15d
$LN40@renderOrdi:

; 123  : 		}
; 124  : 
; 125  : 		if(i2 < 2 && world->getBlock(x + 1, y - 1, z + 1)->solidCorner(world, x + 1, y - 1, z + 1, Relatives::WUS))

  00ac2	8b 74 24 3c	 mov	 esi, DWORD PTR i2$1$[rsp]
  00ac6	83 fe 02	 cmp	 esi, 2
  00ac9	7d 41		 jge	 SHORT $LN39@renderOrdi
  00acb	44 8b 44 24 44	 mov	 r8d, DWORD PTR tv7162[rsp]
  00ad0	8b 54 24 34	 mov	 edx, DWORD PTR tv7159[rsp]
  00ad4	44 8b cb	 mov	 r9d, ebx
  00ad7	49 8b cc	 mov	 rcx, r12
  00ada	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00adf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WUS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WUS
  00ae6	44 8b 4c 24 44	 mov	 r9d, DWORD PTR tv7162[rsp]
  00aeb	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00aee	44 8b 44 24 34	 mov	 r8d, DWORD PTR tv7159[rsp]
  00af3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00af8	49 8b d4	 mov	 rdx, r12
  00afb	48 8b c8	 mov	 rcx, rax
  00afe	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  00b02	41 ff 52 28	 call	 QWORD PTR [r10+40]
  00b06	84 c0		 test	 al, al
  00b08	74 02		 je	 SHORT $LN39@renderOrdi

; 126  : 		{
; 127  : 			i2++;

  00b0a	ff c6		 inc	 esi
$LN39@renderOrdi:

; 128  : 		}
; 129  : 								
; 130  : 		if(i3 < 2 && world->getBlock(x + 1, y + 1, z + 1)->solidCorner(world, x + 1, y + 1, z + 1, Relatives::WDS))

  00b0c	41 83 fe 02	 cmp	 r14d, 2
  00b10	7d 42		 jge	 SHORT $LN38@renderOrdi
  00b12	44 8b 44 24 38	 mov	 r8d, DWORD PTR tv7154[rsp]
  00b17	8b 54 24 34	 mov	 edx, DWORD PTR tv7159[rsp]
  00b1b	44 8b cb	 mov	 r9d, ebx
  00b1e	49 8b cc	 mov	 rcx, r12
  00b21	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00b26	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WDS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WDS
  00b2d	44 8b 4c 24 38	 mov	 r9d, DWORD PTR tv7154[rsp]
  00b32	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00b35	44 8b 44 24 34	 mov	 r8d, DWORD PTR tv7159[rsp]
  00b3a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b3f	49 8b d4	 mov	 rdx, r12
  00b42	48 8b c8	 mov	 rcx, rax
  00b45	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  00b49	41 ff 52 28	 call	 QWORD PTR [r10+40]
  00b4d	84 c0		 test	 al, al
  00b4f	74 03		 je	 SHORT $LN38@renderOrdi

; 131  : 		{
; 132  : 			i3++;

  00b51	41 ff c6	 inc	 r14d
$LN38@renderOrdi:

; 133  : 		}
; 134  : 								
; 135  : 		if(i4 < 2 && world->getBlock(x - 1, y + 1, z + 1)->solidCorner(world, x - 1, y + 1, z + 1, Relatives::EDS))

  00b54	83 ff 02	 cmp	 edi, 2
  00b57	7d 41		 jge	 SHORT $LN37@renderOrdi
  00b59	44 8b 44 24 38	 mov	 r8d, DWORD PTR tv7154[rsp]
  00b5e	8b 54 24 30	 mov	 edx, DWORD PTR tv7167[rsp]
  00b62	44 8b cb	 mov	 r9d, ebx
  00b65	49 8b cc	 mov	 rcx, r12
  00b68	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  00b6d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EDS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EDS
  00b74	44 8b 4c 24 38	 mov	 r9d, DWORD PTR tv7154[rsp]
  00b79	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  00b7c	44 8b 44 24 30	 mov	 r8d, DWORD PTR tv7167[rsp]
  00b81	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b86	49 8b d4	 mov	 rdx, r12
  00b89	48 8b c8	 mov	 rcx, rax
  00b8c	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  00b90	41 ff 52 28	 call	 QWORD PTR [r10+40]
  00b94	84 c0		 test	 al, al
  00b96	74 02		 je	 SHORT $LN37@renderOrdi

; 136  : 		{
; 137  : 			i4++;

  00b98	ff c7		 inc	 edi
$LN37@renderOrdi:
  00b9a	66 41 0f 6e c7	 movd	 xmm0, r15d

; 140  : 		float f1 = 1.0F - i1 * 0.15f;

  00b9f	41 0f 28 d1	 movaps	 xmm2, xmm9
  00ba3	66 0f 6e ce	 movd	 xmm1, esi
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 137  : 	setUV(v.u, v.v);

  00ba7	49 8b cd	 mov	 rcx, r13
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 140  : 		float f1 = 1.0F - i1 * 0.15f;

  00baa	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 141  : 		float f2 = 1.0F - i2 * 0.15f;

  00bad	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00bb0	f3 41 0f 59 c5	 mulss	 xmm0, xmm13
  00bb5	f3 41 0f 59 cd	 mulss	 xmm1, xmm13
  00bba	f3 0f 5c d0	 subss	 xmm2, xmm0
  00bbe	66 41 0f 6e c6	 movd	 xmm0, r14d
  00bc3	45 0f 28 c1	 movaps	 xmm8, xmm9

; 142  : 		float f3 = 1.0F - i3 * 0.15f;

  00bc7	41 0f 28 f9	 movaps	 xmm7, xmm9
  00bcb	f3 44 0f 5c c1	 subss	 xmm8, xmm1
  00bd0	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00bd3	66 0f 6e cf	 movd	 xmm1, edi

; 143  : 		float f4 = 1.0F - i4 * 0.15f;

  00bd7	41 0f 28 f1	 movaps	 xmm6, xmm9
  00bdb	f3 41 0f 59 c5	 mulss	 xmm0, xmm13
  00be0	f3 0f 5c f8	 subss	 xmm7, xmm0
  00be4	0f 5b c9	 cvtdq2ps xmm1, xmm1

; 145  : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  00be7	41 0f 28 c0	 movaps	 xmm0, xmm8
  00beb	f3 0f 58 c2	 addss	 xmm0, xmm2
  00bef	f3 41 0f 59 cd	 mulss	 xmm1, xmm13
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  00bf4	f3 41 0f 59 d4	 mulss	 xmm2, xmm12
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 145  : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  00bf9	f3 0f 58 c7	 addss	 xmm0, xmm7
  00bfd	f3 0f 5c f1	 subss	 xmm6, xmm1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  00c01	f3 48 0f 2c fa	 cvttss2si rdi, xmm2

; 137  : 	setUV(v.u, v.v);

  00c06	41 0f 28 d2	 movaps	 xmm2, xmm10
  00c0a	41 0f 28 c9	 movaps	 xmm1, xmm9
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 145  : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  00c0e	f3 0f 58 c6	 addss	 xmm0, xmm6
  00c12	f3 41 0f 59 c6	 mulss	 xmm0, xmm14
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  00c17	f3 41 0f 59 c4	 mulss	 xmm0, xmm12
  00c1c	f3 4c 0f 2c f8	 cvttss2si r15, xmm0

; 137  : 	setUV(v.u, v.v);

  00c21	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00c26	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00c2c	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  00c30	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  00c34	41 88 7d 4c	 mov	 BYTE PTR [r13+76], dil

; 157  : 	vertex.g = g;

  00c38	41 88 7d 4d	 mov	 BYTE PTR [r13+77], dil

; 158  : 	vertex.b = b;

  00c3c	41 88 7d 4e	 mov	 BYTE PTR [r13+78], dil

; 159  : 	vertex.a = a;

  00c40	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00c45	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  00c4a	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 109  : 	vertex.y = y + translation.y;

  00c50	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]
  00c56	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  00c5b	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0

; 110  : 	vertex.z = z + translation.z;

  00c61	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  00c67	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00c6c	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00c72	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00c77	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  00c7d	f3 41 0f 59 f4	 mulss	 xmm6, xmm12

; 137  : 	setUV(v.u, v.v);

  00c82	41 0f 28 d1	 movaps	 xmm2, xmm9
  00c86	41 0f 28 c9	 movaps	 xmm1, xmm9
  00c8a	49 8b cd	 mov	 rcx, r13

; 70   : {}

  00c8d	f3 48 0f 2c de	 cvttss2si rbx, xmm6

; 137  : 	setUV(v.u, v.v);

  00c92	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00c97	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  00c9b	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  00ca1	f3 41 0f 10 4d
	28		 movss	 xmm1, DWORD PTR [r13+40]
  00ca7	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  00cab	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  00caf	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00cb3	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 110  : 	vertex.z = z + translation.z;

  00cb8	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 158  : 	vertex.b = b;

  00cbd	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  00cc1	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00cc6	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 109  : 	vertex.y = y + translation.y;

  00ccc	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]

; 110  : 	vertex.z = z + translation.z;

  00cd2	f3 41 0f 11 4d
	40		 movss	 DWORD PTR [r13+64], xmm1
  00cd8	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00cdd	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00ce3	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00ce8	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  00cee	41 0f 28 d3	 movaps	 xmm2, xmm11
  00cf2	41 0f 28 cb	 movaps	 xmm1, xmm11
  00cf6	49 8b cd	 mov	 rcx, r13
  00cf9	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  00cfe	45 88 7d 4c	 mov	 BYTE PTR [r13+76], r15b

; 157  : 	vertex.g = g;

  00d02	45 88 7d 4d	 mov	 BYTE PTR [r13+77], r15b

; 158  : 	vertex.b = b;

  00d06	45 88 7d 4e	 mov	 BYTE PTR [r13+78], r15b

; 159  : 	vertex.a = a;

  00d0a	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00d0f	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 109  : 	vertex.y = y + translation.y;

  00d15	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00d1b	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  00d1f	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  00d23	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  00d28	f3 41 0f 58 cb	 addss	 xmm1, xmm11
  00d2d	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0
  00d33	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  00d39	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  00d3f	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00d44	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0
  00d4a	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00d4f	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  00d55	41 0f 28 d1	 movaps	 xmm2, xmm9
  00d59	41 0f 28 c9	 movaps	 xmm1, xmm9
  00d5d	49 8b cd	 mov	 rcx, r13
  00d60	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00d65	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  00d69	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  00d6d	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  00d73	f3 41 0f 10 4d
	28		 movss	 xmm1, DWORD PTR [r13+40]
  00d79	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  00d7e	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  00d83	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  00d87	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 158  : 	vertex.b = b;

  00d8b	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  00d8f	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00d94	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 109  : 	vertex.y = y + translation.y;

  00d9a	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]

; 110  : 	vertex.z = z + translation.z;

  00da0	f3 41 0f 11 4d
	40		 movss	 DWORD PTR [r13+64], xmm1
  00da6	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00dab	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00db1	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00db6	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  00dbc	f3 41 0f 59 fc	 mulss	 xmm7, xmm12

; 137  : 	setUV(v.u, v.v);

  00dc1	41 0f 28 d1	 movaps	 xmm2, xmm9
  00dc5	41 0f 28 ca	 movaps	 xmm1, xmm10
  00dc9	49 8b cd	 mov	 rcx, r13

; 70   : {}

  00dcc	f3 48 0f 2c df	 cvttss2si rbx, xmm7

; 137  : 	setUV(v.u, v.v);

  00dd1	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00dd6	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  00dda	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  00de0	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  00de6	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  00dea	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  00dee	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00df2	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 109  : 	vertex.y = y + translation.y;

  00df7	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 158  : 	vertex.b = b;

  00dfc	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  00e00	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00e05	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  00e0b	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  00e11	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  00e17	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00e1c	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00e22	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00e27	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  00e2d	41 0f 28 d3	 movaps	 xmm2, xmm11
  00e31	41 0f 28 cb	 movaps	 xmm1, xmm11
  00e35	49 8b cd	 mov	 rcx, r13
  00e38	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00e3d	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  00e41	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  00e45	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  00e4b	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  00e51	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  00e56	f3 41 0f 58 cb	 addss	 xmm1, xmm11

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  00e5b	45 88 7d 4c	 mov	 BYTE PTR [r13+76], r15b

; 157  : 	vertex.g = g;

  00e5f	45 88 7d 4d	 mov	 BYTE PTR [r13+77], r15b

; 158  : 	vertex.b = b;

  00e63	45 88 7d 4e	 mov	 BYTE PTR [r13+78], r15b

; 159  : 	vertex.a = a;

  00e67	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00e6c	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  00e72	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  00e78	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  00e7e	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00e83	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00e89	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00e8e	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  00e94	41 0f 28 d1	 movaps	 xmm2, xmm9
  00e98	41 0f 28 ca	 movaps	 xmm1, xmm10
  00e9c	49 8b cd	 mov	 rcx, r13
  00e9f	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00ea4	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 109  : 	vertex.y = y + translation.y;

  00eaa	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00eb0	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  00eb4	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  00eb8	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00ebc	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 109  : 	vertex.y = y + translation.y;

  00ec1	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 157  : 	vertex.g = g;

  00ec6	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 158  : 	vertex.b = b;

  00eca	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  00ece	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00ed3	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  00ed9	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  00edf	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  00ee5	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00eea	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00ef0	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00ef5	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  00efb	f3 45 0f 59 c4	 mulss	 xmm8, xmm12

; 137  : 	setUV(v.u, v.v);

  00f00	41 0f 28 d2	 movaps	 xmm2, xmm10
  00f04	41 0f 28 ca	 movaps	 xmm1, xmm10
  00f08	49 8b cd	 mov	 rcx, r13

; 70   : {}

  00f0b	f3 49 0f 2c d8	 cvttss2si rbx, xmm8

; 137  : 	setUV(v.u, v.v);

  00f10	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00f15	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  00f19	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  00f1f	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  00f25	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  00f29	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  00f2d	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00f31	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 109  : 	vertex.y = y + translation.y;

  00f36	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 158  : 	vertex.b = b;

  00f3b	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  00f3f	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00f44	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  00f4a	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  00f50	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  00f56	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00f5b	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00f61	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00f66	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  00f6c	41 0f 28 d3	 movaps	 xmm2, xmm11
  00f70	41 0f 28 cb	 movaps	 xmm1, xmm11
  00f74	49 8b cd	 mov	 rcx, r13
  00f77	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00f7c	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  00f80	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  00f84	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  00f8a	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  00f90	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  00f95	f3 41 0f 58 cb	 addss	 xmm1, xmm11

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  00f9a	45 88 7d 4c	 mov	 BYTE PTR [r13+76], r15b

; 157  : 	vertex.g = g;

  00f9e	45 88 7d 4d	 mov	 BYTE PTR [r13+77], r15b

; 158  : 	vertex.b = b;

  00fa2	45 88 7d 4e	 mov	 BYTE PTR [r13+78], r15b

; 159  : 	vertex.a = a;

  00fa6	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00fab	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  00fb1	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  00fb7	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  00fbd	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00fc2	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00fc8	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00fcd	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  00fd3	41 0f 28 d2	 movaps	 xmm2, xmm10
  00fd7	41 0f 28 ca	 movaps	 xmm1, xmm10
  00fdb	49 8b cd	 mov	 rcx, r13
  00fde	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  00fe3	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  00fe7	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  00feb	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 109  : 	vertex.y = y + translation.y;

  00ff1	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  00ff7	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  00ffc	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 158  : 	vertex.b = b;

  01001	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  01005	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0100a	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  0100e	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  01012	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0
  01018	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  0101e	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  01024	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  01029	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0
  0102f	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01034	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  0103a	41 0f 28 d2	 movaps	 xmm2, xmm10
  0103e	41 0f 28 c9	 movaps	 xmm1, xmm9
  01042	49 8b cd	 mov	 rcx, r13
  01045	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0104a	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  0104e	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  01052	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  01058	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  0105e	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  01063	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  01068	41 88 7d 4c	 mov	 BYTE PTR [r13+76], dil

; 157  : 	vertex.g = g;

  0106c	41 88 7d 4d	 mov	 BYTE PTR [r13+77], dil

; 158  : 	vertex.b = b;

  01070	41 88 7d 4e	 mov	 BYTE PTR [r13+78], dil

; 159  : 	vertex.a = a;

  01074	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01079	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  0107f	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  01085	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  0108b	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  01090	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01096	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0109b	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  010a1	41 0f 28 d3	 movaps	 xmm2, xmm11
  010a5	41 0f 28 cb	 movaps	 xmm1, xmm11
  010a9	49 8b cd	 mov	 rcx, r13
  010ac	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  010b1	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  010b5	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  010b9	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  010bf	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  010c5	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  010ca	f3 41 0f 58 cb	 addss	 xmm1, xmm11

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  010cf	45 88 7d 4c	 mov	 BYTE PTR [r13+76], r15b

; 157  : 	vertex.g = g;

  010d3	45 88 7d 4d	 mov	 BYTE PTR [r13+77], r15b

; 158  : 	vertex.b = b;

  010d7	45 88 7d 4e	 mov	 BYTE PTR [r13+78], r15b

; 159  : 	vertex.a = a;

  010db	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  010e0	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  010e6	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  010ec	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  010f2	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  010f7	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  010fd	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01102	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
  01108	8b 5c 24 60	 mov	 ebx, DWORD PTR tv7097[rsp]
  0110c	8b 75 68	 mov	 esi, DWORD PTR x$[rbp-256]
  0110f	44 8b 75 70	 mov	 r14d, DWORD PTR y$[rbp-256]
  01113	44 8b 7d 78	 mov	 r15d, DWORD PTR z$[rbp-256]
$LN239@renderOrdi:
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 165  : 	if(!world->getBlock(x, y - 1, z)->solidFace(world, x, y - 1, z, Relatives::U))

  01117	41 8d 7e ff	 lea	 edi, DWORD PTR [r14-1]
  0111b	45 8b cf	 mov	 r9d, r15d
  0111e	8b d6		 mov	 edx, esi
  01120	44 8b c7	 mov	 r8d, edi
  01123	49 8b cc	 mov	 rcx, r12
  01126	89 7c 24 64	 mov	 DWORD PTR tv7161[rsp], edi
  0112a	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0112f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?U@Relatives@@3PEAVBlockFace@@EA ; Relatives::U
  01136	44 8b cf	 mov	 r9d, edi
  01139	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  0113c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01141	44 8b c6	 mov	 r8d, esi
  01144	49 8b d4	 mov	 rdx, r12
  01147	48 8b c8	 mov	 rcx, rax
  0114a	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  0114f	41 ff 52 18	 call	 QWORD PTR [r10+24]
  01153	84 c0		 test	 al, al
  01155	0f 85 0a 08 00
	00		 jne	 $LN331@renderOrdi

; 166  : 	{
; 167  : 		vStream->setIcon(block->getIcon(world, x, y, z, Relatives::D));

  0115b	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR block$[rbp-256]
  01162	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?D@Relatives@@3PEAVBlockFace@@EA ; Relatives::D
  01169	45 8b ce	 mov	 r9d, r14d
  0116c	4c 8b 11	 mov	 r10, QWORD PTR [rcx]
  0116f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  01174	44 8b c6	 mov	 r8d, esi
  01177	49 8b d4	 mov	 rdx, r12
  0117a	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  0117f	41 ff 52 08	 call	 QWORD PTR [r10+8]

; 168  : 
; 169  : 		int i1 = 0;

  01183	45 33 f6	 xor	 r14d, r14d

; 174  : 		if(world->getBlock(x - 1, y - 1, z)->solidEdge(world, x - 1, y - 1, z, Relatives::EU))

  01186	8d 7e ff	 lea	 edi, DWORD PTR [rsi-1]
  01189	44 89 74 24 3c	 mov	 DWORD PTR i1$1$[rsp], r14d
  0118e	44 89 74 24 30	 mov	 DWORD PTR i2$1$[rsp], r14d
  01193	44 89 74 24 34	 mov	 DWORD PTR i3$1$[rsp], r14d
  01198	44 89 74 24 40	 mov	 DWORD PTR i4$1$[rsp], r14d
  0119d	44 8b 74 24 64	 mov	 r14d, DWORD PTR tv7161[rsp]
  011a2	45 8b cf	 mov	 r9d, r15d
  011a5	8b d7		 mov	 edx, edi
  011a7	49 8b cc	 mov	 rcx, r12
  011aa	45 8b c6	 mov	 r8d, r14d
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 186  : 	this->icon = icon;

  011ad	49 89 45 30	 mov	 QWORD PTR [r13+48], rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 174  : 		if(world->getBlock(x - 1, y - 1, z)->solidEdge(world, x - 1, y - 1, z, Relatives::EU))

  011b1	89 7c 24 44	 mov	 DWORD PTR tv7166[rsp], edi
  011b5	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  011ba	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EU@Relatives@@3PEAVBlockEdge@@EA ; Relatives::EU
  011c1	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  011c4	45 8b ce	 mov	 r9d, r14d
  011c7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  011cc	44 8b c7	 mov	 r8d, edi
  011cf	49 8b d4	 mov	 rdx, r12
  011d2	48 8b c8	 mov	 rcx, rax
  011d5	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  011da	41 ff 52 20	 call	 QWORD PTR [r10+32]
  011de	84 c0		 test	 al, al
  011e0	74 10		 je	 SHORT $LN35@renderOrdi

; 175  : 		{
; 176  : 			i1++;

  011e2	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR i1$1$[rsp], 1

; 177  : 			i4++;

  011ea	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR i4$1$[rsp], 1
$LN35@renderOrdi:

; 178  : 		}
; 179  : 
; 180  : 		if(world->getBlock(x, y - 1, z - 1)->solidEdge(world, x, y - 1, z - 1, Relatives::UN))

  011f2	41 8d 7f ff	 lea	 edi, DWORD PTR [r15-1]
  011f6	45 8b c6	 mov	 r8d, r14d
  011f9	8b d6		 mov	 edx, esi
  011fb	44 8b cf	 mov	 r9d, edi
  011fe	49 8b cc	 mov	 rcx, r12
  01201	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01206	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?UN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::UN
  0120d	45 8b ce	 mov	 r9d, r14d
  01210	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01213	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01218	44 8b c6	 mov	 r8d, esi
  0121b	49 8b d4	 mov	 rdx, r12
  0121e	48 8b c8	 mov	 rcx, rax
  01221	89 7c 24 20	 mov	 DWORD PTR [rsp+32], edi
  01225	41 ff 52 20	 call	 QWORD PTR [r10+32]
  01229	84 c0		 test	 al, al
  0122b	74 0c		 je	 SHORT $LN34@renderOrdi

; 181  : 		{
; 182  : 			i1++;

  0122d	ff 44 24 3c	 inc	 DWORD PTR i1$1$[rsp]

; 183  : 			i2++;

  01231	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR i2$1$[rsp], 1
$LN34@renderOrdi:

; 184  : 		}
; 185  : 
; 186  : 		if(world->getBlock(x + 1, y - 1, z)->solidEdge(world, x + 1, y - 1, z, Relatives::WU))

  01239	8d 46 01	 lea	 eax, DWORD PTR [rsi+1]
  0123c	45 8b cf	 mov	 r9d, r15d
  0123f	45 8b c6	 mov	 r8d, r14d
  01242	8b d0		 mov	 edx, eax
  01244	49 8b cc	 mov	 rcx, r12
  01247	89 44 24 38	 mov	 DWORD PTR tv7158[rsp], eax
  0124b	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01250	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WU@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WU
  01257	44 8d 46 01	 lea	 r8d, DWORD PTR [rsi+1]
  0125b	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  0125e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01263	45 8b ce	 mov	 r9d, r14d
  01266	49 8b d4	 mov	 rdx, r12
  01269	48 8b c8	 mov	 rcx, rax
  0126c	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  01271	41 ff 52 20	 call	 QWORD PTR [r10+32]
  01275	84 c0		 test	 al, al
  01277	74 11		 je	 SHORT $LN534@renderOrdi

; 187  : 		{
; 188  : 			i2++;

  01279	ff 44 24 30	 inc	 DWORD PTR i2$1$[rsp]

; 189  : 			i3++;

  0127d	41 bf 01 00 00
	00		 mov	 r15d, 1
  01283	44 89 7c 24 34	 mov	 DWORD PTR i3$1$[rsp], r15d
  01288	eb 05		 jmp	 SHORT $LN33@renderOrdi
$LN534@renderOrdi:
  0128a	44 8b 7c 24 34	 mov	 r15d, DWORD PTR i3$1$[rsp]
$LN33@renderOrdi:

; 190  : 		}
; 191  : 
; 192  : 		if(world->getBlock(x, y - 1, z + 1)->solidEdge(world, x, y - 1, z + 1, Relatives::US))

  0128f	44 8b cb	 mov	 r9d, ebx
  01292	45 8b c6	 mov	 r8d, r14d
  01295	8b d6		 mov	 edx, esi
  01297	49 8b cc	 mov	 rcx, r12
  0129a	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0129f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?US@Relatives@@3PEAVBlockEdge@@EA ; Relatives::US
  012a6	45 8b ce	 mov	 r9d, r14d
  012a9	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  012ac	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  012b1	44 8b c6	 mov	 r8d, esi
  012b4	49 8b d4	 mov	 rdx, r12
  012b7	48 8b c8	 mov	 rcx, rax
  012ba	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  012be	41 ff 52 20	 call	 QWORD PTR [r10+32]

; 193  : 		{
; 194  : 			i3++;
; 195  : 			i4++;

  012c2	8b 74 24 40	 mov	 esi, DWORD PTR i4$1$[rsp]
  012c6	84 c0		 test	 al, al
  012c8	74 0a		 je	 SHORT $LN32@renderOrdi
  012ca	41 ff c7	 inc	 r15d
  012cd	ff c6		 inc	 esi
  012cf	44 89 7c 24 34	 mov	 DWORD PTR i3$1$[rsp], r15d
$LN32@renderOrdi:

; 196  : 		}
; 197  : 
; 198  : 		if(i1 < 2 && world->getBlock(x - 1, y - 1, z - 1)->solidCorner(world, x - 1, y - 1, z - 1, Relatives::EUN))

  012d4	44 8b 7c 24 3c	 mov	 r15d, DWORD PTR i1$1$[rsp]
  012d9	41 83 ff 02	 cmp	 r15d, 2
  012dd	7d 3e		 jge	 SHORT $LN31@renderOrdi
  012df	8b 54 24 44	 mov	 edx, DWORD PTR tv7166[rsp]
  012e3	44 8b cf	 mov	 r9d, edi
  012e6	45 8b c6	 mov	 r8d, r14d
  012e9	49 8b cc	 mov	 rcx, r12
  012ec	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  012f1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EUN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EUN
  012f8	44 8b 44 24 44	 mov	 r8d, DWORD PTR tv7166[rsp]
  012fd	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01300	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01305	45 8b ce	 mov	 r9d, r14d
  01308	49 8b d4	 mov	 rdx, r12
  0130b	48 8b c8	 mov	 rcx, rax
  0130e	89 7c 24 20	 mov	 DWORD PTR [rsp+32], edi
  01312	41 ff 52 28	 call	 QWORD PTR [r10+40]
  01316	84 c0		 test	 al, al
  01318	74 03		 je	 SHORT $LN31@renderOrdi

; 199  : 		{
; 200  : 			i1++;

  0131a	41 ff c7	 inc	 r15d
$LN31@renderOrdi:

; 201  : 		}
; 202  : 
; 203  : 		if(i2 < 2 && world->getBlock(x + 1, y - 1, z - 1)->solidCorner(world, x + 1, y - 1, z - 1, Relatives::WUN))

  0131d	83 7c 24 30 02	 cmp	 DWORD PTR i2$1$[rsp], 2
  01322	7d 3f		 jge	 SHORT $LN30@renderOrdi
  01324	8b 54 24 38	 mov	 edx, DWORD PTR tv7158[rsp]
  01328	44 8b cf	 mov	 r9d, edi
  0132b	45 8b c6	 mov	 r8d, r14d
  0132e	49 8b cc	 mov	 rcx, r12
  01331	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01336	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WUN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WUN
  0133d	44 8b 44 24 38	 mov	 r8d, DWORD PTR tv7158[rsp]
  01342	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01345	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0134a	45 8b ce	 mov	 r9d, r14d
  0134d	49 8b d4	 mov	 rdx, r12
  01350	48 8b c8	 mov	 rcx, rax
  01353	89 7c 24 20	 mov	 DWORD PTR [rsp+32], edi
  01357	41 ff 52 28	 call	 QWORD PTR [r10+40]
  0135b	84 c0		 test	 al, al
  0135d	74 04		 je	 SHORT $LN30@renderOrdi

; 204  : 		{
; 205  : 			i2++;

  0135f	ff 44 24 30	 inc	 DWORD PTR i2$1$[rsp]
$LN30@renderOrdi:

; 206  : 		}
; 207  : 								
; 208  : 		if(i3 < 2 && world->getBlock(x + 1, y - 1, z + 1)->solidCorner(world, x + 1, y - 1, z + 1, Relatives::WUS))

  01363	8b 7c 24 34	 mov	 edi, DWORD PTR i3$1$[rsp]
  01367	83 ff 02	 cmp	 edi, 2
  0136a	7d 3d		 jge	 SHORT $LN29@renderOrdi
  0136c	8b 54 24 38	 mov	 edx, DWORD PTR tv7158[rsp]
  01370	44 8b cb	 mov	 r9d, ebx
  01373	45 8b c6	 mov	 r8d, r14d
  01376	49 8b cc	 mov	 rcx, r12
  01379	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0137e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WUS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WUS
  01385	44 8b 44 24 38	 mov	 r8d, DWORD PTR tv7158[rsp]
  0138a	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  0138d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01392	45 8b ce	 mov	 r9d, r14d
  01395	49 8b d4	 mov	 rdx, r12
  01398	48 8b c8	 mov	 rcx, rax
  0139b	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  0139f	41 ff 52 28	 call	 QWORD PTR [r10+40]
  013a3	84 c0		 test	 al, al
  013a5	74 02		 je	 SHORT $LN29@renderOrdi

; 209  : 		{
; 210  : 			i3++;

  013a7	ff c7		 inc	 edi
$LN29@renderOrdi:

; 211  : 		}
; 212  : 								
; 213  : 		if(i4 < 2 && world->getBlock(x - 1, y - 1, z + 1)->solidCorner(world, x - 1, y - 1, z + 1, Relatives::EUS))

  013a9	83 fe 02	 cmp	 esi, 2
  013ac	7d 3d		 jge	 SHORT $LN28@renderOrdi
  013ae	8b 54 24 44	 mov	 edx, DWORD PTR tv7166[rsp]
  013b2	44 8b cb	 mov	 r9d, ebx
  013b5	45 8b c6	 mov	 r8d, r14d
  013b8	49 8b cc	 mov	 rcx, r12
  013bb	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  013c0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EUS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EUS
  013c7	44 8b 44 24 44	 mov	 r8d, DWORD PTR tv7166[rsp]
  013cc	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  013cf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  013d4	45 8b ce	 mov	 r9d, r14d
  013d7	49 8b d4	 mov	 rdx, r12
  013da	48 8b c8	 mov	 rcx, rax
  013dd	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  013e1	41 ff 52 28	 call	 QWORD PTR [r10+40]
  013e5	84 c0		 test	 al, al
  013e7	74 02		 je	 SHORT $LN28@renderOrdi

; 214  : 		{
; 215  : 			i4++;

  013e9	ff c6		 inc	 esi
$LN28@renderOrdi:
  013eb	66 0f 6e 4c 24
	30		 movd	 xmm1, DWORD PTR i2$1$[rsp]
  013f1	66 41 0f 6e c7	 movd	 xmm0, r15d

; 216  : 		}
; 217  : 
; 218  : 		float f1 = 1.0F - i1 * 0.15f;

  013f6	41 0f 28 d1	 movaps	 xmm2, xmm9
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 137  : 	setUV(v.u, v.v);

  013fa	49 8b cd	 mov	 rcx, r13
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 219  : 		float f2 = 1.0F - i2 * 0.15f;

  013fd	0f 5b c9	 cvtdq2ps xmm1, xmm1
  01400	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01403	f3 41 0f 59 cd	 mulss	 xmm1, xmm13
  01408	45 0f 28 c1	 movaps	 xmm8, xmm9

; 220  : 		float f3 = 1.0F - i3 * 0.15f;

  0140c	41 0f 28 f9	 movaps	 xmm7, xmm9

; 221  : 		float f4 = 1.0F - i4 * 0.15f;

  01410	41 0f 28 f1	 movaps	 xmm6, xmm9
  01414	f3 41 0f 59 c5	 mulss	 xmm0, xmm13
  01419	f3 44 0f 5c c1	 subss	 xmm8, xmm1
  0141e	f3 0f 5c d0	 subss	 xmm2, xmm0
  01422	66 0f 6e c7	 movd	 xmm0, edi
  01426	66 0f 6e ce	 movd	 xmm1, esi
  0142a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0142d	0f 5b c9	 cvtdq2ps xmm1, xmm1
  01430	f3 41 0f 59 c5	 mulss	 xmm0, xmm13
  01435	f3 41 0f 59 cd	 mulss	 xmm1, xmm13
  0143a	f3 0f 5c f8	 subss	 xmm7, xmm0
  0143e	f3 0f 5c f1	 subss	 xmm6, xmm1

; 223  : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  01442	41 0f 28 c0	 movaps	 xmm0, xmm8
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 137  : 	setUV(v.u, v.v);

  01446	41 0f 28 ca	 movaps	 xmm1, xmm10
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 223  : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  0144a	f3 0f 58 c2	 addss	 xmm0, xmm2
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  0144e	f3 41 0f 59 d4	 mulss	 xmm2, xmm12
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 223  : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  01453	f3 0f 58 c7	 addss	 xmm0, xmm7
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  01457	f3 48 0f 2c fa	 cvttss2si rdi, xmm2

; 137  : 	setUV(v.u, v.v);

  0145c	41 0f 28 d1	 movaps	 xmm2, xmm9
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 223  : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  01460	f3 0f 58 c6	 addss	 xmm0, xmm6
  01464	f3 41 0f 59 c6	 mulss	 xmm0, xmm14
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  01469	f3 41 0f 59 c4	 mulss	 xmm0, xmm12
  0146e	f3 4c 0f 2c f8	 cvttss2si r15, xmm0

; 137  : 	setUV(v.u, v.v);

  01473	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01478	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0147e	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  01482	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  01486	41 88 7d 4c	 mov	 BYTE PTR [r13+76], dil

; 157  : 	vertex.g = g;

  0148a	41 88 7d 4d	 mov	 BYTE PTR [r13+77], dil

; 158  : 	vertex.b = b;

  0148e	41 88 7d 4e	 mov	 BYTE PTR [r13+78], dil

; 159  : 	vertex.a = a;

  01492	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01497	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  0149c	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 109  : 	vertex.y = y + translation.y;

  014a2	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]
  014a8	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  014ad	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0

; 110  : 	vertex.z = z + translation.z;

  014b3	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  014b9	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  014be	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  014c4	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  014c9	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  014cf	f3 41 0f 59 f4	 mulss	 xmm6, xmm12

; 137  : 	setUV(v.u, v.v);

  014d4	41 0f 28 d2	 movaps	 xmm2, xmm10
  014d8	41 0f 28 ca	 movaps	 xmm1, xmm10
  014dc	49 8b cd	 mov	 rcx, r13

; 70   : {}

  014df	f3 48 0f 2c de	 cvttss2si rbx, xmm6

; 137  : 	setUV(v.u, v.v);

  014e4	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  014e9	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  014ed	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  014f3	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  014f9	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  014fd	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  01501	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01505	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 109  : 	vertex.y = y + translation.y;

  0150a	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 158  : 	vertex.b = b;

  0150f	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  01513	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01518	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  0151e	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  01524	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  0152a	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  0152f	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01535	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0153a	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  01540	41 0f 28 d3	 movaps	 xmm2, xmm11
  01544	41 0f 28 cb	 movaps	 xmm1, xmm11
  01548	49 8b cd	 mov	 rcx, r13
  0154b	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  01550	45 88 7d 4c	 mov	 BYTE PTR [r13+76], r15b

; 157  : 	vertex.g = g;

  01554	45 88 7d 4d	 mov	 BYTE PTR [r13+77], r15b

; 158  : 	vertex.b = b;

  01558	45 88 7d 4e	 mov	 BYTE PTR [r13+78], r15b

; 159  : 	vertex.a = a;

  0155c	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01561	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 109  : 	vertex.y = y + translation.y;

  01567	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0156d	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  01571	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  01575	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  0157a	f3 41 0f 58 ca	 addss	 xmm1, xmm10
  0157f	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0
  01585	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  0158b	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  01591	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  01596	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0
  0159c	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  015a1	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  015a7	41 0f 28 d2	 movaps	 xmm2, xmm10
  015ab	41 0f 28 ca	 movaps	 xmm1, xmm10
  015af	49 8b cd	 mov	 rcx, r13
  015b2	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  015b7	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  015bb	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  015bf	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  015c5	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  015cb	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  015d0	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  015d5	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  015d9	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 158  : 	vertex.b = b;

  015dd	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  015e1	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  015e6	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  015ec	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  015f2	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  015f8	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  015fd	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01603	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01608	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  0160e	f3 41 0f 59 fc	 mulss	 xmm7, xmm12

; 137  : 	setUV(v.u, v.v);

  01613	41 0f 28 d2	 movaps	 xmm2, xmm10
  01617	41 0f 28 c9	 movaps	 xmm1, xmm9
  0161b	49 8b cd	 mov	 rcx, r13

; 70   : {}

  0161e	f3 48 0f 2c df	 cvttss2si rbx, xmm7

; 137  : 	setUV(v.u, v.v);

  01623	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01628	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  0162c	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  01632	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  01638	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  0163c	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  01640	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01644	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 109  : 	vertex.y = y + translation.y;

  01649	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 158  : 	vertex.b = b;

  0164e	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  01652	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01657	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  0165d	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  01663	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  01669	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  0166e	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01674	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01679	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  0167f	41 0f 28 d3	 movaps	 xmm2, xmm11
  01683	41 0f 28 cb	 movaps	 xmm1, xmm11
  01687	49 8b cd	 mov	 rcx, r13
  0168a	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0168f	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  01693	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  01697	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  0169d	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  016a3	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  016a8	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  016ad	45 88 7d 4c	 mov	 BYTE PTR [r13+76], r15b

; 157  : 	vertex.g = g;

  016b1	45 88 7d 4d	 mov	 BYTE PTR [r13+77], r15b

; 158  : 	vertex.b = b;

  016b5	45 88 7d 4e	 mov	 BYTE PTR [r13+78], r15b

; 159  : 	vertex.a = a;

  016b9	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  016be	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  016c4	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  016ca	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  016d0	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  016d5	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  016db	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  016e0	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  016e6	41 0f 28 d2	 movaps	 xmm2, xmm10
  016ea	41 0f 28 c9	 movaps	 xmm1, xmm9
  016ee	49 8b cd	 mov	 rcx, r13
  016f1	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  016f6	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 109  : 	vertex.y = y + translation.y;

  016fc	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01702	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  01706	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  0170a	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  0170e	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 109  : 	vertex.y = y + translation.y;

  01713	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 157  : 	vertex.g = g;

  01718	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 158  : 	vertex.b = b;

  0171c	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  01720	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01725	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  0172b	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  01731	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  01737	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  0173c	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01742	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01747	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  0174d	f3 45 0f 59 c4	 mulss	 xmm8, xmm12

; 137  : 	setUV(v.u, v.v);

  01752	41 0f 28 d1	 movaps	 xmm2, xmm9
  01756	41 0f 28 c9	 movaps	 xmm1, xmm9
  0175a	49 8b cd	 mov	 rcx, r13

; 70   : {}

  0175d	f3 49 0f 2c d8	 cvttss2si rbx, xmm8

; 137  : 	setUV(v.u, v.v);

  01762	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01767	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  0176b	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  01771	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  01777	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  0177b	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  0177f	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01783	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 109  : 	vertex.y = y + translation.y;

  01788	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 158  : 	vertex.b = b;

  0178d	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  01791	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01796	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  0179c	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  017a2	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  017a8	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  017ad	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  017b3	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  017b8	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  017be	41 0f 28 d3	 movaps	 xmm2, xmm11
  017c2	41 0f 28 cb	 movaps	 xmm1, xmm11
  017c6	49 8b cd	 mov	 rcx, r13
  017c9	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  017ce	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  017d2	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  017d6	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  017dc	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  017e2	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  017e7	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  017ec	45 88 7d 4c	 mov	 BYTE PTR [r13+76], r15b

; 157  : 	vertex.g = g;

  017f0	45 88 7d 4d	 mov	 BYTE PTR [r13+77], r15b

; 158  : 	vertex.b = b;

  017f4	45 88 7d 4e	 mov	 BYTE PTR [r13+78], r15b

; 159  : 	vertex.a = a;

  017f8	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  017fd	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  01803	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  01809	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  0180f	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  01814	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0181a	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0181f	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  01825	41 0f 28 d1	 movaps	 xmm2, xmm9
  01829	41 0f 28 c9	 movaps	 xmm1, xmm9
  0182d	49 8b cd	 mov	 rcx, r13
  01830	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  01835	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  01839	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  0183d	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 109  : 	vertex.y = y + translation.y;

  01843	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  01849	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  0184e	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 158  : 	vertex.b = b;

  01853	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  01857	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0185c	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  01860	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  01864	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0
  0186a	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  01870	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  01876	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  0187b	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0
  01881	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01886	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  0188c	41 0f 28 d1	 movaps	 xmm2, xmm9
  01890	41 0f 28 ca	 movaps	 xmm1, xmm10
  01894	49 8b cd	 mov	 rcx, r13
  01897	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0189c	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  018a0	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  018a4	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  018aa	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  018b0	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  018b5	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  018ba	41 88 7d 4c	 mov	 BYTE PTR [r13+76], dil

; 157  : 	vertex.g = g;

  018be	41 88 7d 4d	 mov	 BYTE PTR [r13+77], dil

; 158  : 	vertex.b = b;

  018c2	41 88 7d 4e	 mov	 BYTE PTR [r13+78], dil

; 159  : 	vertex.a = a;

  018c6	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  018cb	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  018d1	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  018d7	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  018dd	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  018e2	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  018e8	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  018ed	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  018f3	41 0f 28 d3	 movaps	 xmm2, xmm11
  018f7	41 0f 28 cb	 movaps	 xmm1, xmm11
  018fb	49 8b cd	 mov	 rcx, r13
  018fe	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01903	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  01907	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  0190b	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  01911	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  01917	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  0191c	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  01921	45 88 7d 4c	 mov	 BYTE PTR [r13+76], r15b

; 157  : 	vertex.g = g;

  01925	45 88 7d 4d	 mov	 BYTE PTR [r13+77], r15b

; 158  : 	vertex.b = b;

  01929	45 88 7d 4e	 mov	 BYTE PTR [r13+78], r15b

; 159  : 	vertex.a = a;

  0192d	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01932	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  01938	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  0193e	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  01944	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  01949	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0194f	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01954	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
  0195a	8b 75 68	 mov	 esi, DWORD PTR x$[rbp-256]
  0195d	44 8b 75 70	 mov	 r14d, DWORD PTR y$[rbp-256]
  01961	44 8b 7d 78	 mov	 r15d, DWORD PTR z$[rbp-256]
$LN331@renderOrdi:
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 243  : 	if(!world->getBlock(x, y + 1, z)->solidFace(world, x, y, z, Relatives::D))

  01965	41 8d 5e 01	 lea	 ebx, DWORD PTR [r14+1]
  01969	45 8b cf	 mov	 r9d, r15d
  0196c	8b d6		 mov	 edx, esi
  0196e	44 8b c3	 mov	 r8d, ebx
  01971	49 8b cc	 mov	 rcx, r12
  01974	89 5c 24 40	 mov	 DWORD PTR tv7153[rsp], ebx
  01978	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0197d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?D@Relatives@@3PEAVBlockFace@@EA ; Relatives::D
  01984	45 8b ce	 mov	 r9d, r14d
  01987	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  0198a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0198f	44 8b c6	 mov	 r8d, esi
  01992	49 8b d4	 mov	 rdx, r12
  01995	48 8b c8	 mov	 rcx, rax
  01998	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  0199d	41 ff 52 18	 call	 QWORD PTR [r10+24]
  019a1	84 c0		 test	 al, al
  019a3	0f 85 17 08 00
	00		 jne	 $LN423@renderOrdi

; 244  : 	{
; 245  : 		vStream->setIcon(block->getIcon(world, x, y, z, Relatives::U));

  019a9	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR block$[rbp-256]
  019b0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?U@Relatives@@3PEAVBlockFace@@EA ; Relatives::U
  019b7	45 8b ce	 mov	 r9d, r14d
  019ba	4c 8b 11	 mov	 r10, QWORD PTR [rcx]
  019bd	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  019c2	44 8b c6	 mov	 r8d, esi
  019c5	49 8b d4	 mov	 rdx, r12
  019c8	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  019cd	41 ff 52 08	 call	 QWORD PTR [r10+8]

; 248  : 		int i2 = 0;
; 249  : 		int i3 = 0;
; 250  : 		int i4 = 0;
; 251  : 
; 252  : 		if(world->getBlock(x - 1, y + 1, z)->solidEdge(world, x - 1, y + 1, z, Relatives::ED))

  019d1	44 8b 74 24 40	 mov	 r14d, DWORD PTR tv7153[rsp]
  019d6	8d 7e ff	 lea	 edi, DWORD PTR [rsi-1]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 186  : 	this->icon = icon;

  019d9	49 89 45 30	 mov	 QWORD PTR [r13+48], rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 247  : 		int i1 = 0;

  019dd	33 c0		 xor	 eax, eax

; 248  : 		int i2 = 0;
; 249  : 		int i3 = 0;
; 250  : 		int i4 = 0;
; 251  : 
; 252  : 		if(world->getBlock(x - 1, y + 1, z)->solidEdge(world, x - 1, y + 1, z, Relatives::ED))

  019df	45 8b cf	 mov	 r9d, r15d
  019e2	45 8b c6	 mov	 r8d, r14d
  019e5	8b d7		 mov	 edx, edi
  019e7	49 8b cc	 mov	 rcx, r12
  019ea	8b d8		 mov	 ebx, eax
  019ec	89 44 24 64	 mov	 DWORD PTR i1$1$[rsp], eax
  019f0	89 44 24 30	 mov	 DWORD PTR i2$1$[rsp], eax
  019f4	89 44 24 44	 mov	 DWORD PTR i3$1$[rsp], eax
  019f8	89 44 24 38	 mov	 DWORD PTR i4$1$[rsp], eax
  019fc	89 7c 24 34	 mov	 DWORD PTR tv7165[rsp], edi
  01a00	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01a05	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?ED@Relatives@@3PEAVBlockEdge@@EA ; Relatives::ED
  01a0c	45 8b ce	 mov	 r9d, r14d
  01a0f	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01a12	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01a17	44 8b c7	 mov	 r8d, edi
  01a1a	49 8b d4	 mov	 rdx, r12
  01a1d	48 8b c8	 mov	 rcx, rax
  01a20	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  01a25	41 ff 52 20	 call	 QWORD PTR [r10+32]
  01a29	84 c0		 test	 al, al
  01a2b	74 0d		 je	 SHORT $LN26@renderOrdi

; 253  : 		{
; 254  : 			i1++;

  01a2d	bb 01 00 00 00	 mov	 ebx, 1
  01a32	89 5c 24 64	 mov	 DWORD PTR i1$1$[rsp], ebx

; 255  : 			i4++;

  01a36	89 5c 24 38	 mov	 DWORD PTR i4$1$[rsp], ebx
$LN26@renderOrdi:

; 256  : 		}
; 257  : 
; 258  : 		if(world->getBlock(x, y + 1, z - 1)->solidEdge(world, x, y + 1, z - 1, Relatives::DN))

  01a3a	41 8d 7f ff	 lea	 edi, DWORD PTR [r15-1]
  01a3e	45 8b c6	 mov	 r8d, r14d
  01a41	8b d6		 mov	 edx, esi
  01a43	44 8b cf	 mov	 r9d, edi
  01a46	49 8b cc	 mov	 rcx, r12
  01a49	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01a4e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?DN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::DN
  01a55	45 8b ce	 mov	 r9d, r14d
  01a58	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01a5b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01a60	44 8b c6	 mov	 r8d, esi
  01a63	49 8b d4	 mov	 rdx, r12
  01a66	48 8b c8	 mov	 rcx, rax
  01a69	89 7c 24 20	 mov	 DWORD PTR [rsp+32], edi
  01a6d	41 ff 52 20	 call	 QWORD PTR [r10+32]
  01a71	84 c0		 test	 al, al
  01a73	74 11		 je	 SHORT $LN533@renderOrdi

; 259  : 		{
; 260  : 			i1++;

  01a75	ff c3		 inc	 ebx
  01a77	89 5c 24 64	 mov	 DWORD PTR i1$1$[rsp], ebx

; 261  : 			i2++;

  01a7b	bb 01 00 00 00	 mov	 ebx, 1
  01a80	89 5c 24 30	 mov	 DWORD PTR i2$1$[rsp], ebx
  01a84	eb 04		 jmp	 SHORT $LN25@renderOrdi
$LN533@renderOrdi:
  01a86	8b 5c 24 30	 mov	 ebx, DWORD PTR i2$1$[rsp]
$LN25@renderOrdi:

; 262  : 		}
; 263  : 
; 264  : 		if(world->getBlock(x + 1, y + 1, z)->solidEdge(world, x + 1, y + 1, z, Relatives::WD))

  01a8a	8d 46 01	 lea	 eax, DWORD PTR [rsi+1]
  01a8d	45 8b cf	 mov	 r9d, r15d
  01a90	45 8b c6	 mov	 r8d, r14d
  01a93	8b d0		 mov	 edx, eax
  01a95	49 8b cc	 mov	 rcx, r12
  01a98	89 44 24 3c	 mov	 DWORD PTR tv7157[rsp], eax
  01a9c	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01aa1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WD@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WD
  01aa8	44 8d 46 01	 lea	 r8d, DWORD PTR [rsi+1]
  01aac	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01aaf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01ab4	45 8b ce	 mov	 r9d, r14d
  01ab7	49 8b d4	 mov	 rdx, r12
  01aba	48 8b c8	 mov	 rcx, rax
  01abd	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  01ac2	41 ff 52 20	 call	 QWORD PTR [r10+32]
  01ac6	84 c0		 test	 al, al
  01ac8	74 13		 je	 SHORT $LN532@renderOrdi

; 265  : 		{
; 266  : 			i2++;

  01aca	ff c3		 inc	 ebx

; 267  : 			i3++;

  01acc	41 bf 01 00 00
	00		 mov	 r15d, 1
  01ad2	89 5c 24 30	 mov	 DWORD PTR i2$1$[rsp], ebx
  01ad6	44 89 7c 24 44	 mov	 DWORD PTR i3$1$[rsp], r15d
  01adb	eb 05		 jmp	 SHORT $LN24@renderOrdi
$LN532@renderOrdi:
  01add	44 8b 7c 24 44	 mov	 r15d, DWORD PTR i3$1$[rsp]
$LN24@renderOrdi:

; 268  : 		}
; 269  : 
; 270  : 		if(world->getBlock(x, y + 1, z + 1)->solidEdge(world, x, y + 1, z + 1, Relatives::DS))

  01ae2	8b 5c 24 60	 mov	 ebx, DWORD PTR tv7097[rsp]
  01ae6	45 8b c6	 mov	 r8d, r14d
  01ae9	8b d6		 mov	 edx, esi
  01aeb	44 8b cb	 mov	 r9d, ebx
  01aee	49 8b cc	 mov	 rcx, r12
  01af1	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01af6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?DS@Relatives@@3PEAVBlockEdge@@EA ; Relatives::DS
  01afd	45 8b ce	 mov	 r9d, r14d
  01b00	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01b03	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01b08	44 8b c6	 mov	 r8d, esi
  01b0b	49 8b d4	 mov	 rdx, r12
  01b0e	48 8b c8	 mov	 rcx, rax
  01b11	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  01b15	41 ff 52 20	 call	 QWORD PTR [r10+32]

; 271  : 		{
; 272  : 			i3++;
; 273  : 			i4++;

  01b19	8b 74 24 38	 mov	 esi, DWORD PTR i4$1$[rsp]
  01b1d	84 c0		 test	 al, al
  01b1f	74 0a		 je	 SHORT $LN23@renderOrdi
  01b21	41 ff c7	 inc	 r15d
  01b24	ff c6		 inc	 esi
  01b26	44 89 7c 24 44	 mov	 DWORD PTR i3$1$[rsp], r15d
$LN23@renderOrdi:

; 274  : 		}
; 275  : 
; 276  : 		if(i1 < 2 && world->getBlock(x - 1, y + 1, z - 1)->solidCorner(world, x - 1, y + 1, z - 1, Relatives::EDN))

  01b2b	44 8b 7c 24 64	 mov	 r15d, DWORD PTR i1$1$[rsp]
  01b30	41 83 ff 02	 cmp	 r15d, 2
  01b34	7d 3e		 jge	 SHORT $LN22@renderOrdi
  01b36	8b 54 24 34	 mov	 edx, DWORD PTR tv7165[rsp]
  01b3a	44 8b cf	 mov	 r9d, edi
  01b3d	45 8b c6	 mov	 r8d, r14d
  01b40	49 8b cc	 mov	 rcx, r12
  01b43	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01b48	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EDN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EDN
  01b4f	44 8b 44 24 34	 mov	 r8d, DWORD PTR tv7165[rsp]
  01b54	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01b57	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01b5c	45 8b ce	 mov	 r9d, r14d
  01b5f	49 8b d4	 mov	 rdx, r12
  01b62	48 8b c8	 mov	 rcx, rax
  01b65	89 7c 24 20	 mov	 DWORD PTR [rsp+32], edi
  01b69	41 ff 52 28	 call	 QWORD PTR [r10+40]
  01b6d	84 c0		 test	 al, al
  01b6f	74 03		 je	 SHORT $LN22@renderOrdi

; 277  : 		{
; 278  : 			i1++;

  01b71	41 ff c7	 inc	 r15d
$LN22@renderOrdi:

; 279  : 		}
; 280  : 
; 281  : 		if(i2 < 2 && world->getBlock(x + 1, y + 1, z - 1)->solidCorner(world, x + 1, y + 1, z - 1, Relatives::WDN))

  01b74	83 7c 24 30 02	 cmp	 DWORD PTR i2$1$[rsp], 2
  01b79	7d 3f		 jge	 SHORT $LN21@renderOrdi
  01b7b	8b 54 24 3c	 mov	 edx, DWORD PTR tv7157[rsp]
  01b7f	44 8b cf	 mov	 r9d, edi
  01b82	45 8b c6	 mov	 r8d, r14d
  01b85	49 8b cc	 mov	 rcx, r12
  01b88	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01b8d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WDN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WDN
  01b94	44 8b 44 24 3c	 mov	 r8d, DWORD PTR tv7157[rsp]
  01b99	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01b9c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01ba1	45 8b ce	 mov	 r9d, r14d
  01ba4	49 8b d4	 mov	 rdx, r12
  01ba7	48 8b c8	 mov	 rcx, rax
  01baa	89 7c 24 20	 mov	 DWORD PTR [rsp+32], edi
  01bae	41 ff 52 28	 call	 QWORD PTR [r10+40]
  01bb2	84 c0		 test	 al, al
  01bb4	74 04		 je	 SHORT $LN21@renderOrdi

; 282  : 		{
; 283  : 			i2++;

  01bb6	ff 44 24 30	 inc	 DWORD PTR i2$1$[rsp]
$LN21@renderOrdi:

; 284  : 		}
; 285  : 								
; 286  : 		if(i3 < 2 && world->getBlock(x + 1, y + 1, z + 1)->solidCorner(world, x + 1, y + 1, z + 1, Relatives::WDS))

  01bba	8b 7c 24 44	 mov	 edi, DWORD PTR i3$1$[rsp]
  01bbe	83 ff 02	 cmp	 edi, 2
  01bc1	7d 3d		 jge	 SHORT $LN20@renderOrdi
  01bc3	8b 54 24 3c	 mov	 edx, DWORD PTR tv7157[rsp]
  01bc7	44 8b cb	 mov	 r9d, ebx
  01bca	45 8b c6	 mov	 r8d, r14d
  01bcd	49 8b cc	 mov	 rcx, r12
  01bd0	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01bd5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WDS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WDS
  01bdc	44 8b 44 24 3c	 mov	 r8d, DWORD PTR tv7157[rsp]
  01be1	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01be4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01be9	45 8b ce	 mov	 r9d, r14d
  01bec	49 8b d4	 mov	 rdx, r12
  01bef	48 8b c8	 mov	 rcx, rax
  01bf2	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  01bf6	41 ff 52 28	 call	 QWORD PTR [r10+40]
  01bfa	84 c0		 test	 al, al
  01bfc	74 02		 je	 SHORT $LN20@renderOrdi

; 287  : 		{
; 288  : 			i3++;

  01bfe	ff c7		 inc	 edi
$LN20@renderOrdi:

; 289  : 		}
; 290  : 								
; 291  : 		if(i4 < 2 && world->getBlock(x - 1, y + 1, z + 1)->solidCorner(world, x - 1, y + 1, z + 1, Relatives::EDS))

  01c00	83 fe 02	 cmp	 esi, 2
  01c03	7d 3d		 jge	 SHORT $LN19@renderOrdi
  01c05	8b 54 24 34	 mov	 edx, DWORD PTR tv7165[rsp]
  01c09	44 8b cb	 mov	 r9d, ebx
  01c0c	45 8b c6	 mov	 r8d, r14d
  01c0f	49 8b cc	 mov	 rcx, r12
  01c12	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  01c17	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EDS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EDS
  01c1e	44 8b 44 24 34	 mov	 r8d, DWORD PTR tv7165[rsp]
  01c23	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  01c26	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01c2b	45 8b ce	 mov	 r9d, r14d
  01c2e	49 8b d4	 mov	 rdx, r12
  01c31	48 8b c8	 mov	 rcx, rax
  01c34	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  01c38	41 ff 52 28	 call	 QWORD PTR [r10+40]
  01c3c	84 c0		 test	 al, al
  01c3e	74 02		 je	 SHORT $LN19@renderOrdi

; 292  : 		{
; 293  : 			i4++;

  01c40	ff c6		 inc	 esi
$LN19@renderOrdi:
  01c42	66 0f 6e 4c 24
	30		 movd	 xmm1, DWORD PTR i2$1$[rsp]
  01c48	66 41 0f 6e c7	 movd	 xmm0, r15d

; 294  : 		}
; 295  : 
; 296  : 		float f1 = 1.0F - i1 * 0.15f;

  01c4d	41 0f 28 d1	 movaps	 xmm2, xmm9
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 137  : 	setUV(v.u, v.v);

  01c51	49 8b cd	 mov	 rcx, r13
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 297  : 		float f2 = 1.0F - i2 * 0.15f;

  01c54	0f 5b c9	 cvtdq2ps xmm1, xmm1
  01c57	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01c5a	f3 41 0f 59 cd	 mulss	 xmm1, xmm13
  01c5f	41 0f 28 f1	 movaps	 xmm6, xmm9

; 298  : 		float f3 = 1.0F - i3 * 0.15f;

  01c63	41 0f 28 f9	 movaps	 xmm7, xmm9

; 299  : 		float f4 = 1.0F - i4 * 0.15f;

  01c67	45 0f 28 c1	 movaps	 xmm8, xmm9
  01c6b	f3 41 0f 59 c5	 mulss	 xmm0, xmm13
  01c70	f3 0f 5c f1	 subss	 xmm6, xmm1
  01c74	f3 0f 5c d0	 subss	 xmm2, xmm0
  01c78	66 0f 6e c7	 movd	 xmm0, edi
  01c7c	66 0f 6e ce	 movd	 xmm1, esi
  01c80	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01c83	0f 5b c9	 cvtdq2ps xmm1, xmm1
  01c86	f3 41 0f 59 c5	 mulss	 xmm0, xmm13
  01c8b	f3 41 0f 59 cd	 mulss	 xmm1, xmm13
  01c90	f3 0f 5c f8	 subss	 xmm7, xmm0
  01c94	f3 44 0f 5c c1	 subss	 xmm8, xmm1

; 301  : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  01c99	0f 28 c6	 movaps	 xmm0, xmm6
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 137  : 	setUV(v.u, v.v);

  01c9c	41 0f 28 ca	 movaps	 xmm1, xmm10
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 301  : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  01ca0	f3 0f 58 c2	 addss	 xmm0, xmm2
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  01ca4	f3 41 0f 59 d4	 mulss	 xmm2, xmm12
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 301  : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  01ca9	f3 0f 58 c7	 addss	 xmm0, xmm7
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  01cad	f3 48 0f 2c fa	 cvttss2si rdi, xmm2

; 137  : 	setUV(v.u, v.v);

  01cb2	41 0f 28 d2	 movaps	 xmm2, xmm10
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 301  : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  01cb6	f3 41 0f 58 c0	 addss	 xmm0, xmm8
  01cbb	f3 41 0f 59 c6	 mulss	 xmm0, xmm14
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  01cc0	f3 41 0f 59 c4	 mulss	 xmm0, xmm12
  01cc5	f3 4c 0f 2c f8	 cvttss2si r15, xmm0

; 137  : 	setUV(v.u, v.v);

  01cca	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01ccf	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01cd5	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  01cd9	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  01cdd	41 88 7d 4c	 mov	 BYTE PTR [r13+76], dil

; 157  : 	vertex.g = g;

  01ce1	41 88 7d 4d	 mov	 BYTE PTR [r13+77], dil

; 158  : 	vertex.b = b;

  01ce5	41 88 7d 4e	 mov	 BYTE PTR [r13+78], dil

; 159  : 	vertex.a = a;

  01ce9	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01cee	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  01cf3	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 109  : 	vertex.y = y + translation.y;

  01cf9	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]
  01cff	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  01d04	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0

; 110  : 	vertex.z = z + translation.z;

  01d0a	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  01d10	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  01d15	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01d1b	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01d20	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  01d26	f3 41 0f 59 f4	 mulss	 xmm6, xmm12

; 137  : 	setUV(v.u, v.v);

  01d2b	41 0f 28 d2	 movaps	 xmm2, xmm10
  01d2f	41 0f 28 c9	 movaps	 xmm1, xmm9
  01d33	49 8b cd	 mov	 rcx, r13

; 70   : {}

  01d36	f3 48 0f 2c de	 cvttss2si rbx, xmm6

; 137  : 	setUV(v.u, v.v);

  01d3b	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01d40	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  01d44	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  01d4a	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  01d50	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  01d54	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  01d58	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01d5c	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 109  : 	vertex.y = y + translation.y;

  01d61	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 158  : 	vertex.b = b;

  01d66	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  01d6a	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01d6f	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  01d75	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  01d7b	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  01d81	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  01d86	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01d8c	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01d91	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  01d97	41 0f 28 d3	 movaps	 xmm2, xmm11
  01d9b	41 0f 28 cb	 movaps	 xmm1, xmm11
  01d9f	49 8b cd	 mov	 rcx, r13
  01da2	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  01da7	45 88 7d 4c	 mov	 BYTE PTR [r13+76], r15b

; 157  : 	vertex.g = g;

  01dab	45 88 7d 4d	 mov	 BYTE PTR [r13+77], r15b

; 158  : 	vertex.b = b;

  01daf	45 88 7d 4e	 mov	 BYTE PTR [r13+78], r15b

; 159  : 	vertex.a = a;

  01db3	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01db8	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 109  : 	vertex.y = y + translation.y;

  01dbe	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01dc4	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  01dc8	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  01dcc	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  01dd1	f3 41 0f 58 c9	 addss	 xmm1, xmm9
  01dd6	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0
  01ddc	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  01de2	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  01de8	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  01ded	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0
  01df3	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01df8	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  01dfe	41 0f 28 d2	 movaps	 xmm2, xmm10
  01e02	41 0f 28 c9	 movaps	 xmm1, xmm9
  01e06	49 8b cd	 mov	 rcx, r13
  01e09	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01e0e	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  01e12	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  01e16	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  01e1c	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  01e22	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  01e27	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  01e2c	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  01e30	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 158  : 	vertex.b = b;

  01e34	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  01e38	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01e3d	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  01e43	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  01e49	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  01e4f	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  01e54	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01e5a	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01e5f	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  01e65	f3 41 0f 59 fc	 mulss	 xmm7, xmm12

; 137  : 	setUV(v.u, v.v);

  01e6a	41 0f 28 d1	 movaps	 xmm2, xmm9
  01e6e	41 0f 28 c9	 movaps	 xmm1, xmm9
  01e72	49 8b cd	 mov	 rcx, r13

; 70   : {}

  01e75	f3 48 0f 2c df	 cvttss2si rbx, xmm7

; 137  : 	setUV(v.u, v.v);

  01e7a	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01e7f	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  01e83	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  01e89	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  01e8f	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  01e93	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  01e97	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01e9b	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 109  : 	vertex.y = y + translation.y;

  01ea0	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 158  : 	vertex.b = b;

  01ea5	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  01ea9	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01eae	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  01eb4	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  01eba	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  01ec0	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  01ec5	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01ecb	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01ed0	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  01ed6	41 0f 28 d3	 movaps	 xmm2, xmm11
  01eda	41 0f 28 cb	 movaps	 xmm1, xmm11
  01ede	49 8b cd	 mov	 rcx, r13
  01ee1	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01ee6	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  01eea	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  01eee	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  01ef4	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  01efa	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  01eff	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  01f04	45 88 7d 4c	 mov	 BYTE PTR [r13+76], r15b

; 157  : 	vertex.g = g;

  01f08	45 88 7d 4d	 mov	 BYTE PTR [r13+77], r15b

; 158  : 	vertex.b = b;

  01f0c	45 88 7d 4e	 mov	 BYTE PTR [r13+78], r15b

; 159  : 	vertex.a = a;

  01f10	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01f15	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  01f1b	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  01f21	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  01f27	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  01f2c	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01f32	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01f37	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  01f3d	41 0f 28 d1	 movaps	 xmm2, xmm9
  01f41	41 0f 28 c9	 movaps	 xmm1, xmm9
  01f45	49 8b cd	 mov	 rcx, r13
  01f48	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01f4d	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 109  : 	vertex.y = y + translation.y;

  01f53	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01f59	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  01f5d	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  01f61	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01f65	f3 41 0f 58 c1	 addss	 xmm0, xmm9

; 109  : 	vertex.y = y + translation.y;

  01f6a	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 157  : 	vertex.g = g;

  01f6f	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 158  : 	vertex.b = b;

  01f73	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  01f77	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01f7c	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  01f82	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  01f88	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  01f8e	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  01f93	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01f99	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  01f9e	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  01fa4	f3 45 0f 59 c4	 mulss	 xmm8, xmm12

; 137  : 	setUV(v.u, v.v);

  01fa9	41 0f 28 d1	 movaps	 xmm2, xmm9
  01fad	41 0f 28 ca	 movaps	 xmm1, xmm10
  01fb1	49 8b cd	 mov	 rcx, r13

; 70   : {}

  01fb4	f3 49 0f 2c d8	 cvttss2si rbx, xmm8

; 137  : 	setUV(v.u, v.v);

  01fb9	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  01fbe	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  01fc2	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  01fc8	f3 41 0f 10 4d
	28		 movss	 xmm1, DWORD PTR [r13+40]
  01fce	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  01fd2	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  01fd6	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01fda	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 110  : 	vertex.z = z + translation.z;

  01fdf	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 158  : 	vertex.b = b;

  01fe4	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  01fe8	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  01fed	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 109  : 	vertex.y = y + translation.y;

  01ff3	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]

; 110  : 	vertex.z = z + translation.z;

  01ff9	f3 41 0f 11 4d
	40		 movss	 DWORD PTR [r13+64], xmm1
  01fff	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  02004	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0200a	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0200f	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  02015	41 0f 28 d3	 movaps	 xmm2, xmm11
  02019	41 0f 28 cb	 movaps	 xmm1, xmm11
  0201d	49 8b cd	 mov	 rcx, r13
  02020	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  02025	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  02029	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  0202d	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  02033	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  02039	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  0203e	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  02043	45 88 7d 4c	 mov	 BYTE PTR [r13+76], r15b

; 157  : 	vertex.g = g;

  02047	45 88 7d 4d	 mov	 BYTE PTR [r13+77], r15b

; 158  : 	vertex.b = b;

  0204b	45 88 7d 4e	 mov	 BYTE PTR [r13+78], r15b

; 159  : 	vertex.a = a;

  0204f	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  02054	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  0205a	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  02060	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  02066	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  0206b	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  02071	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  02076	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  0207c	41 0f 28 d1	 movaps	 xmm2, xmm9
  02080	41 0f 28 ca	 movaps	 xmm1, xmm10
  02084	49 8b cd	 mov	 rcx, r13
  02087	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  0208c	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  02090	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  02094	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 110  : 	vertex.z = z + translation.z;

  0209a	f3 41 0f 10 4d
	28		 movss	 xmm1, DWORD PTR [r13+40]
  020a0	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  020a5	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 158  : 	vertex.b = b;

  020aa	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  020ae	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 111  : 
; 112  : 	vertices.push_back(vertex);

  020b3	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  020b7	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  020bb	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0
  020c1	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]
  020c7	f3 41 0f 11 4d
	40		 movss	 DWORD PTR [r13+64], xmm1
  020cd	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  020d2	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0
  020d8	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  020dd	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  020e3	41 0f 28 d2	 movaps	 xmm2, xmm10
  020e7	41 0f 28 ca	 movaps	 xmm1, xmm10
  020eb	49 8b cd	 mov	 rcx, r13
  020ee	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  020f3	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  020f7	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  020fb	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  02101	f3 41 0f 10 4d
	28		 movss	 xmm1, DWORD PTR [r13+40]
  02107	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  0210c	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  02111	41 88 7d 4c	 mov	 BYTE PTR [r13+76], dil

; 157  : 	vertex.g = g;

  02115	41 88 7d 4d	 mov	 BYTE PTR [r13+77], dil

; 158  : 	vertex.b = b;

  02119	41 88 7d 4e	 mov	 BYTE PTR [r13+78], dil

; 159  : 	vertex.a = a;

  0211d	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  02122	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 109  : 	vertex.y = y + translation.y;

  02128	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]

; 110  : 	vertex.z = z + translation.z;

  0212e	f3 41 0f 11 4d
	40		 movss	 DWORD PTR [r13+64], xmm1
  02134	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  02139	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0213f	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  02144	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  0214a	41 0f 28 d3	 movaps	 xmm2, xmm11
  0214e	41 0f 28 cb	 movaps	 xmm1, xmm11
  02152	49 8b cd	 mov	 rcx, r13
  02155	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0215a	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  0215e	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  02162	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  02168	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  0216e	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  02173	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  02178	45 88 7d 4c	 mov	 BYTE PTR [r13+76], r15b

; 157  : 	vertex.g = g;

  0217c	45 88 7d 4d	 mov	 BYTE PTR [r13+77], r15b

; 158  : 	vertex.b = b;

  02180	45 88 7d 4e	 mov	 BYTE PTR [r13+78], r15b

; 159  : 	vertex.a = a;

  02184	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  02189	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  0218f	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  02195	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  0219b	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  021a0	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  021a6	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  021ab	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
  021b1	8b 75 68	 mov	 esi, DWORD PTR x$[rbp-256]
  021b4	44 8b 75 70	 mov	 r14d, DWORD PTR y$[rbp-256]
  021b8	44 8b 7d 78	 mov	 r15d, DWORD PTR z$[rbp-256]
  021bc	8b 5c 24 40	 mov	 ebx, DWORD PTR tv7153[rsp]
$LN423@renderOrdi:
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 321  : 	if(!world->getBlock(x - 1, y, z)->solidFace(world, x - 1, y, z, Relatives::E))

  021c0	8d 7e ff	 lea	 edi, DWORD PTR [rsi-1]
  021c3	45 8b cf	 mov	 r9d, r15d
  021c6	45 8b c6	 mov	 r8d, r14d
  021c9	8b d7		 mov	 edx, edi
  021cb	49 8b cc	 mov	 rcx, r12
  021ce	89 7c 24 44	 mov	 DWORD PTR tv7164[rsp], edi
  021d2	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  021d7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?E@Relatives@@3PEAVBlockFace@@EA ; Relatives::E
  021de	45 8b ce	 mov	 r9d, r14d
  021e1	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  021e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  021e9	44 8b c7	 mov	 r8d, edi
  021ec	49 8b d4	 mov	 rdx, r12
  021ef	48 8b c8	 mov	 rcx, rax
  021f2	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  021f7	41 ff 52 18	 call	 QWORD PTR [r10+24]
  021fb	84 c0		 test	 al, al
  021fd	0f 85 b4 07 00
	00		 jne	 $LN18@renderOrdi

; 322  : 	{
; 323  : 		vStream->setIcon(block->getIcon(world, x, y, z, Relatives::W));

  02203	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR block$[rbp-256]
  0220a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?W@Relatives@@3PEAVBlockFace@@EA ; Relatives::W
  02211	45 8b ce	 mov	 r9d, r14d
  02214	4c 8b 11	 mov	 r10, QWORD PTR [rcx]
  02217	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0221c	44 8b c6	 mov	 r8d, esi
  0221f	49 8b d4	 mov	 rdx, r12
  02222	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  02227	41 ff 52 08	 call	 QWORD PTR [r10+8]

; 326  : 		int i2 = 0;
; 327  : 		int i3 = 0;
; 328  : 		int i4 = 0;
; 329  : 
; 330  : 		if(world->getBlock(x - 1, y - 1, z)->solidEdge(world, x - 1, y - 1, z, Relatives::EU))

  0222b	41 8d 76 ff	 lea	 esi, DWORD PTR [r14-1]
  0222f	45 8b cf	 mov	 r9d, r15d
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 186  : 	this->icon = icon;

  02232	49 89 45 30	 mov	 QWORD PTR [r13+48], rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 325  : 		int i1 = 0;

  02236	33 c0		 xor	 eax, eax

; 326  : 		int i2 = 0;
; 327  : 		int i3 = 0;
; 328  : 		int i4 = 0;
; 329  : 
; 330  : 		if(world->getBlock(x - 1, y - 1, z)->solidEdge(world, x - 1, y - 1, z, Relatives::EU))

  02238	8b d7		 mov	 edx, edi
  0223a	44 8b c6	 mov	 r8d, esi
  0223d	49 8b cc	 mov	 rcx, r12
  02240	89 44 24 38	 mov	 DWORD PTR i1$1$[rsp], eax
  02244	89 44 24 30	 mov	 DWORD PTR i2$1$[rsp], eax
  02248	89 44 24 34	 mov	 DWORD PTR i3$1$[rsp], eax
  0224c	89 44 24 3c	 mov	 DWORD PTR i4$1$[rsp], eax
  02250	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  02255	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EU@Relatives@@3PEAVBlockEdge@@EA ; Relatives::EU
  0225c	44 8b ce	 mov	 r9d, esi
  0225f	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  02262	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02267	44 8b c7	 mov	 r8d, edi
  0226a	49 8b d4	 mov	 rdx, r12
  0226d	48 8b c8	 mov	 rcx, rax
  02270	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  02275	41 ff 52 20	 call	 QWORD PTR [r10+32]
  02279	84 c0		 test	 al, al
  0227b	74 10		 je	 SHORT $LN17@renderOrdi

; 331  : 		{
; 332  : 			i1++;

  0227d	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR i1$1$[rsp], 1

; 333  : 			i4++;

  02285	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR i4$1$[rsp], 1
$LN17@renderOrdi:

; 334  : 		}
; 335  : 
; 336  : 		if(world->getBlock(x - 1, y, z - 1)->solidEdge(world, x - 1, y, z - 1, Relatives::EN))

  0228d	8b 54 24 44	 mov	 edx, DWORD PTR tv7164[rsp]
  02291	41 8d 7f ff	 lea	 edi, DWORD PTR [r15-1]
  02295	45 8b c6	 mov	 r8d, r14d
  02298	44 8b cf	 mov	 r9d, edi
  0229b	49 8b cc	 mov	 rcx, r12
  0229e	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  022a3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::EN
  022aa	44 8b 44 24 44	 mov	 r8d, DWORD PTR tv7164[rsp]
  022af	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  022b2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  022b7	45 8b ce	 mov	 r9d, r14d
  022ba	49 8b d4	 mov	 rdx, r12
  022bd	48 8b c8	 mov	 rcx, rax
  022c0	89 7c 24 20	 mov	 DWORD PTR [rsp+32], edi
  022c4	41 ff 52 20	 call	 QWORD PTR [r10+32]
  022c8	84 c0		 test	 al, al
  022ca	74 0c		 je	 SHORT $LN16@renderOrdi

; 337  : 		{
; 338  : 			i1++;

  022cc	ff 44 24 38	 inc	 DWORD PTR i1$1$[rsp]

; 339  : 			i2++;

  022d0	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR i2$1$[rsp], 1
$LN16@renderOrdi:

; 340  : 		}
; 341  : 
; 342  : 		if(world->getBlock(x - 1, y + 1, z)->solidEdge(world, x - 1, y + 1, z, Relatives::ED))

  022d8	8b 54 24 44	 mov	 edx, DWORD PTR tv7164[rsp]
  022dc	45 8b cf	 mov	 r9d, r15d
  022df	44 8b c3	 mov	 r8d, ebx
  022e2	49 8b cc	 mov	 rcx, r12
  022e5	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  022ea	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?ED@Relatives@@3PEAVBlockEdge@@EA ; Relatives::ED
  022f1	44 8b cb	 mov	 r9d, ebx
  022f4	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  022f7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  022fc	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  02301	44 8b 7c 24 44	 mov	 r15d, DWORD PTR tv7164[rsp]
  02306	49 8b d4	 mov	 rdx, r12
  02309	48 8b c8	 mov	 rcx, rax
  0230c	45 8b c7	 mov	 r8d, r15d
  0230f	41 ff 52 20	 call	 QWORD PTR [r10+32]
  02313	84 c0		 test	 al, al
  02315	74 0c		 je	 SHORT $LN15@renderOrdi

; 343  : 		{
; 344  : 			i2++;

  02317	ff 44 24 30	 inc	 DWORD PTR i2$1$[rsp]

; 345  : 			i3++;

  0231b	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR i3$1$[rsp], 1
$LN15@renderOrdi:

; 346  : 		}
; 347  : 
; 348  : 		if(world->getBlock(x - 1, y, z + 1)->solidEdge(world, x - 1, y, z + 1, Relatives::ES))

  02323	8b 5c 24 60	 mov	 ebx, DWORD PTR tv7097[rsp]
  02327	45 8b c6	 mov	 r8d, r14d
  0232a	41 8b d7	 mov	 edx, r15d
  0232d	44 8b cb	 mov	 r9d, ebx
  02330	49 8b cc	 mov	 rcx, r12
  02333	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  02338	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?ES@Relatives@@3PEAVBlockEdge@@EA ; Relatives::ES
  0233f	45 8b ce	 mov	 r9d, r14d
  02342	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  02345	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0234a	45 8b c7	 mov	 r8d, r15d
  0234d	49 8b d4	 mov	 rdx, r12
  02350	48 8b c8	 mov	 rcx, rax
  02353	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  02357	41 ff 52 20	 call	 QWORD PTR [r10+32]
  0235b	84 c0		 test	 al, al
  0235d	74 08		 je	 SHORT $LN14@renderOrdi

; 349  : 		{
; 350  : 			i3++;

  0235f	ff 44 24 34	 inc	 DWORD PTR i3$1$[rsp]

; 351  : 			i4++;

  02363	ff 44 24 3c	 inc	 DWORD PTR i4$1$[rsp]
$LN14@renderOrdi:

; 352  : 		}
; 353  : 
; 354  : 		if(i1 < 2 && world->getBlock(x - 1, y - 1, z - 1)->solidCorner(world, x - 1, y - 1, z - 1, Relatives::EUN))

  02367	44 8b 74 24 38	 mov	 r14d, DWORD PTR i1$1$[rsp]
  0236c	41 83 fe 02	 cmp	 r14d, 2
  02370	7d 40		 jge	 SHORT $LN13@renderOrdi
  02372	44 8b cf	 mov	 r9d, edi
  02375	44 8b c6	 mov	 r8d, esi
  02378	41 8b d7	 mov	 edx, r15d
  0237b	49 8b cc	 mov	 rcx, r12
  0237e	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  02383	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EUN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EUN
  0238a	44 8b ce	 mov	 r9d, esi
  0238d	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  02390	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02395	45 8b c7	 mov	 r8d, r15d
  02398	49 8b d4	 mov	 rdx, r12
  0239b	48 8b c8	 mov	 rcx, rax
  0239e	89 7c 24 20	 mov	 DWORD PTR [rsp+32], edi
  023a2	41 ff 52 28	 call	 QWORD PTR [r10+40]
  023a6	84 c0		 test	 al, al
  023a8	74 08		 je	 SHORT $LN13@renderOrdi

; 355  : 		{
; 356  : 			i1++;

  023aa	41 ff c6	 inc	 r14d
  023ad	44 89 74 24 38	 mov	 DWORD PTR i1$1$[rsp], r14d
$LN13@renderOrdi:

; 357  : 		}
; 358  : 
; 359  : 		if(i2 < 2 && world->getBlock(x - 1, y + 1, z - 1)->solidCorner(world, x - 1, y + 1, z - 1, Relatives::EDN))

  023b2	83 7c 24 30 02	 cmp	 DWORD PTR i2$1$[rsp], 2
  023b7	44 8b 74 24 40	 mov	 r14d, DWORD PTR tv7153[rsp]
  023bc	7d 3c		 jge	 SHORT $LN12@renderOrdi
  023be	44 8b cf	 mov	 r9d, edi
  023c1	45 8b c6	 mov	 r8d, r14d
  023c4	41 8b d7	 mov	 edx, r15d
  023c7	49 8b cc	 mov	 rcx, r12
  023ca	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  023cf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EDN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EDN
  023d6	45 8b ce	 mov	 r9d, r14d
  023d9	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  023dc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  023e1	45 8b c7	 mov	 r8d, r15d
  023e4	49 8b d4	 mov	 rdx, r12
  023e7	48 8b c8	 mov	 rcx, rax
  023ea	89 7c 24 20	 mov	 DWORD PTR [rsp+32], edi
  023ee	41 ff 52 28	 call	 QWORD PTR [r10+40]
  023f2	84 c0		 test	 al, al
  023f4	74 04		 je	 SHORT $LN12@renderOrdi

; 360  : 		{
; 361  : 			i2++;

  023f6	ff 44 24 30	 inc	 DWORD PTR i2$1$[rsp]
$LN12@renderOrdi:

; 362  : 		}
; 363  : 								
; 364  : 		if(i3 < 2 && world->getBlock(x - 1, y + 1, z + 1)->solidCorner(world, x - 1, y + 1, z + 1, Relatives::EDS))

  023fa	8b 7c 24 34	 mov	 edi, DWORD PTR i3$1$[rsp]
  023fe	83 ff 02	 cmp	 edi, 2
  02401	7d 3e		 jge	 SHORT $LN11@renderOrdi
  02403	44 8b cb	 mov	 r9d, ebx
  02406	45 8b c6	 mov	 r8d, r14d
  02409	41 8b d7	 mov	 edx, r15d
  0240c	49 8b cc	 mov	 rcx, r12
  0240f	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  02414	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EDS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EDS
  0241b	45 8b ce	 mov	 r9d, r14d
  0241e	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  02421	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02426	45 8b c7	 mov	 r8d, r15d
  02429	49 8b d4	 mov	 rdx, r12
  0242c	48 8b c8	 mov	 rcx, rax
  0242f	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  02433	41 ff 52 28	 call	 QWORD PTR [r10+40]
  02437	84 c0		 test	 al, al
  02439	74 06		 je	 SHORT $LN11@renderOrdi

; 365  : 		{
; 366  : 			i3++;

  0243b	ff c7		 inc	 edi
  0243d	89 7c 24 34	 mov	 DWORD PTR i3$1$[rsp], edi
$LN11@renderOrdi:

; 367  : 		}
; 368  : 								
; 369  : 		if(i4 < 2 && world->getBlock(x - 1, y - 1, z + 1)->solidCorner(world, x - 1, y - 1, z + 1, Relatives::EUS))

  02441	8b 7c 24 3c	 mov	 edi, DWORD PTR i4$1$[rsp]
  02445	83 ff 02	 cmp	 edi, 2
  02448	7d 3a		 jge	 SHORT $LN10@renderOrdi
  0244a	44 8b cb	 mov	 r9d, ebx
  0244d	44 8b c6	 mov	 r8d, esi
  02450	41 8b d7	 mov	 edx, r15d
  02453	49 8b cc	 mov	 rcx, r12
  02456	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  0245b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EUS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EUS
  02462	44 8b ce	 mov	 r9d, esi
  02465	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  02468	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0246d	45 8b c7	 mov	 r8d, r15d
  02470	49 8b d4	 mov	 rdx, r12
  02473	48 8b c8	 mov	 rcx, rax
  02476	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  0247a	41 ff 52 28	 call	 QWORD PTR [r10+40]
  0247e	84 c0		 test	 al, al
  02480	74 02		 je	 SHORT $LN10@renderOrdi

; 370  : 		{
; 371  : 			i4++;

  02482	ff c7		 inc	 edi
$LN10@renderOrdi:

; 374  : 		float f1 = 1.0F - i1 * 0.15f;

  02484	8b 4c 24 38	 mov	 ecx, DWORD PTR i1$1$[rsp]
  02488	66 0f 6e 4c 24
	30		 movd	 xmm1, DWORD PTR i2$1$[rsp]
  0248e	41 0f 28 d1	 movaps	 xmm2, xmm9
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02492	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR center$9[rsp], 0
  0249a	c7 44 24 4c 00
	00 00 3f	 mov	 DWORD PTR center$9[rsp+4], 1056964608 ; 3f000000H
  024a2	c7 44 24 50 00
	00 00 3f	 mov	 DWORD PTR center$9[rsp+8], 1056964608 ; 3f000000H
  024aa	66 0f 6e c1	 movd	 xmm0, ecx
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 375  : 		float f2 = 1.0F - i2 * 0.15f;

  024ae	41 0f 28 f1	 movaps	 xmm6, xmm9

; 376  : 		float f3 = 1.0F - i3 * 0.15f;

  024b2	41 0f 28 f9	 movaps	 xmm7, xmm9
  024b6	0f 5b c9	 cvtdq2ps xmm1, xmm1
  024b9	8b 4c 24 34	 mov	 ecx, DWORD PTR i3$1$[rsp]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  024bd	c7 44 24 54 00
	00 00 3f	 mov	 DWORD PTR center$9[rsp+12], 1056964608 ; 3f000000H
  024c5	c7 44 24 58 00
	00 00 3f	 mov	 DWORD PTR center$9[rsp+16], 1056964608 ; 3f000000H
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 375  : 		float f2 = 1.0F - i2 * 0.15f;

  024cd	f3 41 0f 59 cd	 mulss	 xmm1, xmm13
  024d2	f3 0f 5c f1	 subss	 xmm6, xmm1
  024d6	0f 5b c0	 cvtdq2ps xmm0, xmm0
  024d9	66 0f 6e cf	 movd	 xmm1, edi

; 377  : 		float f4 = 1.0F - i4 * 0.15f;

  024dd	45 0f 28 c1	 movaps	 xmm8, xmm9
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  024e1	c6 44 24 5f ff	 mov	 BYTE PTR center$9[rsp+23], 255 ; 000000ffH
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 374  : 		float f1 = 1.0F - i1 * 0.15f;

  024e6	f3 41 0f 59 c5	 mulss	 xmm0, xmm13
  024eb	f3 0f 5c d0	 subss	 xmm2, xmm0
  024ef	66 0f 6e c1	 movd	 xmm0, ecx

; 377  : 		float f4 = 1.0F - i4 * 0.15f;

  024f3	0f 5b c9	 cvtdq2ps xmm1, xmm1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 137  : 	setUV(v.u, v.v);

  024f6	49 8b cd	 mov	 rcx, r13
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 377  : 		float f4 = 1.0F - i4 * 0.15f;

  024f9	f3 41 0f 59 cd	 mulss	 xmm1, xmm13
  024fe	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02501	f3 44 0f 5c c1	 subss	 xmm8, xmm1
  02506	f3 41 0f 59 c5	 mulss	 xmm0, xmm13
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 137  : 	setUV(v.u, v.v);

  0250b	41 0f 28 c9	 movaps	 xmm1, xmm9
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 376  : 		float f3 = 1.0F - i3 * 0.15f;

  0250f	f3 0f 5c f8	 subss	 xmm7, xmm0

; 379  : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  02513	0f 28 c6	 movaps	 xmm0, xmm6
  02516	f3 0f 58 c2	 addss	 xmm0, xmm2
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  0251a	f3 41 0f 59 d4	 mulss	 xmm2, xmm12
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 379  : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  0251f	f3 0f 58 c7	 addss	 xmm0, xmm7
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02523	f3 4c 0f 2c fa	 cvttss2si r15, xmm2

; 137  : 	setUV(v.u, v.v);

  02528	41 0f 28 d2	 movaps	 xmm2, xmm10
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 379  : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  0252c	f3 41 0f 58 c0	 addss	 xmm0, xmm8
  02531	f3 41 0f 59 c6	 mulss	 xmm0, xmm14
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02536	f3 41 0f 59 c4	 mulss	 xmm0, xmm12
  0253b	f3 48 0f 2c f0	 cvttss2si rsi, xmm0
  02540	40 88 74 24 5c	 mov	 BYTE PTR center$9[rsp+20], sil
  02545	40 88 74 24 5d	 mov	 BYTE PTR center$9[rsp+21], sil
  0254a	40 88 74 24 5e	 mov	 BYTE PTR center$9[rsp+22], sil

; 137  : 	setUV(v.u, v.v);

  0254f	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  02554	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  02558	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  0255c	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  02562	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  02567	45 88 7d 4c	 mov	 BYTE PTR [r13+76], r15b

; 157  : 	vertex.g = g;

  0256b	45 88 7d 4d	 mov	 BYTE PTR [r13+77], r15b

; 158  : 	vertex.b = b;

  0256f	45 88 7d 4e	 mov	 BYTE PTR [r13+78], r15b

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  02573	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 109  : 	vertex.y = y + translation.y;

  02579	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]
  0257f	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 159  : 	vertex.a = a;

  02584	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 109  : 	vertex.y = y + translation.y;

  02589	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0

; 110  : 	vertex.z = z + translation.z;

  0258f	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  02595	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  0259a	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  025a0	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  025a5	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  025ab	f3 41 0f 59 f4	 mulss	 xmm6, xmm12

; 137  : 	setUV(v.u, v.v);

  025b0	41 0f 28 d1	 movaps	 xmm2, xmm9
  025b4	41 0f 28 c9	 movaps	 xmm1, xmm9
  025b8	49 8b cd	 mov	 rcx, r13

; 70   : {}

  025bb	f3 48 0f 2c de	 cvttss2si rbx, xmm6

; 137  : 	setUV(v.u, v.v);

  025c0	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  025c5	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  025c9	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 110  : 	vertex.z = z + translation.z;

  025cf	f3 41 0f 10 4d
	28		 movss	 xmm1, DWORD PTR [r13+40]

; 157  : 	vertex.g = g;

  025d5	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 158  : 	vertex.b = b;

  025d9	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  025dd	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  025e2	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 110  : 	vertex.z = z + translation.z;

  025e7	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 111  : 
; 112  : 	vertices.push_back(vertex);

  025ec	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  025f0	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0
  025f6	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]
  025fc	f3 41 0f 11 4d
	40		 movss	 DWORD PTR [r13+64], xmm1
  02602	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  02607	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0
  0260d	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  02611	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  02616	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  0261c	49 8b cd	 mov	 rcx, r13
  0261f	41 0f 28 d3	 movaps	 xmm2, xmm11
  02623	41 0f 28 cb	 movaps	 xmm1, xmm11
  02627	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0262c	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  02630	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  02634	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  0263a	f3 41 0f 10 4d
	28		 movss	 xmm1, DWORD PTR [r13+40]
  02640	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  02645	f3 41 0f 58 cb	 addss	 xmm1, xmm11

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  0264a	41 88 75 4c	 mov	 BYTE PTR [r13+76], sil

; 157  : 	vertex.g = g;

  0264e	41 88 75 4d	 mov	 BYTE PTR [r13+77], sil

; 158  : 	vertex.b = b;

  02652	41 88 75 4e	 mov	 BYTE PTR [r13+78], sil

; 159  : 	vertex.a = a;

  02656	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  0265b	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 109  : 	vertex.y = y + translation.y;

  02661	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]

; 110  : 	vertex.z = z + translation.z;

  02667	f3 41 0f 11 4d
	40		 movss	 DWORD PTR [r13+64], xmm1
  0266d	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  02672	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  02678	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0267d	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  02683	41 0f 28 d1	 movaps	 xmm2, xmm9
  02687	41 0f 28 c9	 movaps	 xmm1, xmm9
  0268b	49 8b cd	 mov	 rcx, r13
  0268e	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  02693	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  02697	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  0269b	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  026a1	f3 41 0f 10 4d
	28		 movss	 xmm1, DWORD PTR [r13+40]
  026a7	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  026ac	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  026b1	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  026b5	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 158  : 	vertex.b = b;

  026b9	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  026bd	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  026c2	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 109  : 	vertex.y = y + translation.y;

  026c8	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]

; 110  : 	vertex.z = z + translation.z;

  026ce	f3 41 0f 11 4d
	40		 movss	 DWORD PTR [r13+64], xmm1
  026d4	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  026d9	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  026df	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  026e4	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  026ea	f3 41 0f 59 fc	 mulss	 xmm7, xmm12

; 137  : 	setUV(v.u, v.v);

  026ef	41 0f 28 d1	 movaps	 xmm2, xmm9
  026f3	41 0f 28 ca	 movaps	 xmm1, xmm10
  026f7	49 8b cd	 mov	 rcx, r13

; 70   : {}

  026fa	f3 48 0f 2c df	 cvttss2si rbx, xmm7

; 137  : 	setUV(v.u, v.v);

  026ff	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  02704	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  02708	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  0270e	f3 41 0f 10 4d
	28		 movss	 xmm1, DWORD PTR [r13+40]
  02714	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  02718	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  0271c	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  02720	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 110  : 	vertex.z = z + translation.z;

  02725	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 158  : 	vertex.b = b;

  0272a	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  0272e	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  02733	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 109  : 	vertex.y = y + translation.y;

  02739	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]

; 110  : 	vertex.z = z + translation.z;

  0273f	f3 41 0f 11 4d
	40		 movss	 DWORD PTR [r13+64], xmm1
  02745	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  0274a	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  02750	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  02755	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  0275b	41 0f 28 d3	 movaps	 xmm2, xmm11
  0275f	41 0f 28 cb	 movaps	 xmm1, xmm11
  02763	49 8b cd	 mov	 rcx, r13
  02766	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  0276b	41 88 75 4c	 mov	 BYTE PTR [r13+76], sil

; 157  : 	vertex.g = g;

  0276f	41 88 75 4d	 mov	 BYTE PTR [r13+77], sil

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  02773	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  02779	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 158  : 	vertex.b = b;

  0277e	41 88 75 4e	 mov	 BYTE PTR [r13+78], sil

; 159  : 	vertex.a = a;

  02782	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  02787	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 109  : 	vertex.y = y + translation.y;

  0278d	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]
  02793	f3 41 0f 58 c3	 addss	 xmm0, xmm11

; 110  : 	vertex.z = z + translation.z;

  02798	f3 41 0f 10 4d
	28		 movss	 xmm1, DWORD PTR [r13+40]

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0279e	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  027a2	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  027a6	f3 41 0f 58 cb	 addss	 xmm1, xmm11
  027ab	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0
  027b1	f3 41 0f 11 4d
	40		 movss	 DWORD PTR [r13+64], xmm1
  027b7	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  027bc	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  027c2	41 0f 28 d1	 movaps	 xmm2, xmm9
  027c6	41 0f 28 ca	 movaps	 xmm1, xmm10
  027ca	49 8b cd	 mov	 rcx, r13
  027cd	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  027d2	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  027d6	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  027da	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  027e0	f3 41 0f 10 4d
	28		 movss	 xmm1, DWORD PTR [r13+40]
  027e6	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  027eb	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  027f0	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  027f4	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 158  : 	vertex.b = b;

  027f8	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  027fc	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  02801	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 109  : 	vertex.y = y + translation.y;

  02807	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]

; 110  : 	vertex.z = z + translation.z;

  0280d	f3 41 0f 11 4d
	40		 movss	 DWORD PTR [r13+64], xmm1
  02813	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  02818	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0281e	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  02823	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 70   : {}

  02829	f3 45 0f 59 c4	 mulss	 xmm8, xmm12

; 137  : 	setUV(v.u, v.v);

  0282e	41 0f 28 d2	 movaps	 xmm2, xmm10
  02832	41 0f 28 ca	 movaps	 xmm1, xmm10
  02836	49 8b cd	 mov	 rcx, r13

; 70   : {}

  02839	f3 49 0f 2c d8	 cvttss2si rbx, xmm8

; 137  : 	setUV(v.u, v.v);

  0283e	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  02843	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  02847	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  0284d	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]
  02853	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  02857	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  0285b	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  0285f	f3 41 0f 58 c2	 addss	 xmm0, xmm10

; 109  : 	vertex.y = y + translation.y;

  02864	f3 41 0f 58 ca	 addss	 xmm1, xmm10

; 158  : 	vertex.b = b;

  02869	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  0286d	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  02872	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 110  : 	vertex.z = z + translation.z;

  02878	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  0287e	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  02884	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  02889	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0288f	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  02894	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  0289a	41 0f 28 d3	 movaps	 xmm2, xmm11
  0289e	41 0f 28 cb	 movaps	 xmm1, xmm11
  028a2	49 8b cd	 mov	 rcx, r13
  028a5	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 111  : 
; 112  : 	vertices.push_back(vertex);

  028aa	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  028ae	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  028b2	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]
  028b8	f3 41 0f 10 4d
	28		 movss	 xmm1, DWORD PTR [r13+40]
  028be	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  028c3	f3 41 0f 58 cb	 addss	 xmm1, xmm11

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  028c8	41 88 75 4c	 mov	 BYTE PTR [r13+76], sil

; 157  : 	vertex.g = g;

  028cc	41 88 75 4d	 mov	 BYTE PTR [r13+77], sil

; 158  : 	vertex.b = b;

  028d0	41 88 75 4e	 mov	 BYTE PTR [r13+78], sil

; 159  : 	vertex.a = a;

  028d4	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  028d9	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0

; 109  : 	vertex.y = y + translation.y;

  028df	f3 41 0f 10 45
	24		 movss	 xmm0, DWORD PTR [r13+36]

; 110  : 	vertex.z = z + translation.z;

  028e5	f3 41 0f 11 4d
	40		 movss	 DWORD PTR [r13+64], xmm1
  028eb	f3 41 0f 58 c3	 addss	 xmm0, xmm11
  028f0	f3 41 0f 11 45
	3c		 movss	 DWORD PTR [r13+60], xmm0

; 111  : 
; 112  : 	vertices.push_back(vertex);

  028f6	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  028fb	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 137  : 	setUV(v.u, v.v);

  02901	41 0f 28 d2	 movaps	 xmm2, xmm10
  02905	41 0f 28 ca	 movaps	 xmm1, xmm10
  02909	49 8b cd	 mov	 rcx, r13
  0290c	e8 00 00 00 00	 call	 ?setUV@VertexStream@gfxu@@QEAAXMM@Z ; gfxu::VertexStream::setUV

; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  02911	41 88 5d 4c	 mov	 BYTE PTR [r13+76], bl

; 157  : 	vertex.g = g;

  02915	41 88 5d 4d	 mov	 BYTE PTR [r13+77], bl

; 158  : 	vertex.b = b;

  02919	41 88 5d 4e	 mov	 BYTE PTR [r13+78], bl

; 159  : 	vertex.a = a;

  0291d	41 c6 45 4f ff	 mov	 BYTE PTR [r13+79], 255	; 000000ffH

; 71   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 72   : 	: x(x), y(y), z(z), u(u), v(v), r(r), g(g), b(b), a(a)
; 73   : {}
; 74   : VertexUVRGBA::VertexUVRGBA(const Vertex& v)
; 75   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(255), g(255), b(255), a(255)
; 76   : {}
; 77   : VertexUVRGBA::VertexUVRGBA(const VertexUV& v)
; 78   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(255), g(255), b(255), a(255)
; 79   : {}
; 80   : VertexUVRGBA::VertexUVRGBA(const VertexRGBA& v)
; 81   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f), r(v.r), g(v.g), b(v.b), a(v.a)
; 82   : {}
; 83   : VertexUVRGBA::VertexUVRGBA(const VertexUVRGBA& v)
; 84   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v), r(v.r), g(v.g), b(v.b), a(v.a)
; 85   : {}
; 86   : 
; 87   : 
; 88   : 
; 89   : VertexStream::VertexStream()
; 90   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 91   : {
; 92   : 
; 93   : }
; 94   : VertexStream::VertexStream(int size)
; 95   : 	: vertices(vector<VertexUVRGBA>()), vertex(), ready(false), uploaded(false), released(false)
; 96   : {
; 97   : 	vertices.reserve(size);
; 98   : }
; 99   : VertexStream::~VertexStream()
; 100  : {
; 101  : 	if(isUploaded())
; 102  : 	{
; 103  : 		renderThread.taskList.put(Tasks::TaskVBOVAOSet(vbo, vao));
; 104  : 	}
; 105  : }
; 106  : void VertexStream::put(float x, float y, float z)
; 107  : {
; 108  : 	vertex.x = x + translation.x;

  02922	f3 41 0f 10 45
	20		 movss	 xmm0, DWORD PTR [r13+32]

; 109  : 	vertex.y = y + translation.y;

  02928	f3 41 0f 10 4d
	24		 movss	 xmm1, DWORD PTR [r13+36]

; 111  : 
; 112  : 	vertices.push_back(vertex);

  0292e	49 8d 55 38	 lea	 rdx, QWORD PTR [r13+56]
  02932	49 8d 4d 08	 lea	 rcx, QWORD PTR [r13+8]
  02936	f3 41 0f 58 c2	 addss	 xmm0, xmm10
  0293b	f3 41 0f 58 ca	 addss	 xmm1, xmm10
  02940	f3 41 0f 11 45
	38		 movss	 DWORD PTR [r13+56], xmm0
  02946	f3 41 0f 10 45
	28		 movss	 xmm0, DWORD PTR [r13+40]
  0294c	f3 41 0f 11 4d
	3c		 movss	 DWORD PTR [r13+60], xmm1
  02952	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  02957	f3 41 0f 11 45
	40		 movss	 DWORD PTR [r13+64], xmm0
  0295d	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  02962	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 395  : 		vStream->put(gfxu::VertexUVRGBA(0.0f, 0.0f, 0.0f, 1.0f, 0.0f, f1, f1, f1, 1.0f));

  02968	48 8d 54 24 70	 lea	 rdx, QWORD PTR $T11[rsp]
  0296d	49 8b cd	 mov	 rcx, r13
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02970	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR $T11[rsp], 0
  02979	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR $T11[rsp+8], 0
  02981	48 c7 44 24 7c
	00 00 80 3f	 mov	 QWORD PTR $T11[rsp+12], 1065353216 ; 3f800000H
  0298a	44 88 7d 84	 mov	 BYTE PTR $T11[rbp-236], r15b
  0298e	44 88 7d 85	 mov	 BYTE PTR $T11[rbp-235], r15b
  02992	44 88 7d 86	 mov	 BYTE PTR $T11[rbp-234], r15b
  02996	c6 45 87 ff	 mov	 BYTE PTR $T11[rbp-233], 255 ; 000000ffH
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 395  : 		vStream->put(gfxu::VertexUVRGBA(0.0f, 0.0f, 0.0f, 1.0f, 0.0f, f1, f1, f1, 1.0f));

  0299a	e8 00 00 00 00	 call	 ?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z ; gfxu::VertexStream::put

; 396  : 		vStream->put(center);

  0299f	48 8d 54 24 48	 lea	 rdx, QWORD PTR center$9[rsp]
  029a4	49 8b cd	 mov	 rcx, r13
  029a7	e8 00 00 00 00	 call	 ?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z ; gfxu::VertexStream::put
  029ac	8b 75 68	 mov	 esi, DWORD PTR x$[rbp-256]
  029af	44 8b 75 70	 mov	 r14d, DWORD PTR y$[rbp-256]
  029b3	44 8b 7d 78	 mov	 r15d, DWORD PTR z$[rbp-256]
$LN18@renderOrdi:

; 397  : 	}
; 398  : 
; 399  : 	if(!world->getBlock(x + 1, y, z)->solidFace(world, x, y, z, Relatives::W))

  029b7	8d 7e 01	 lea	 edi, DWORD PTR [rsi+1]
  029ba	45 8b cf	 mov	 r9d, r15d
  029bd	45 8b c6	 mov	 r8d, r14d
  029c0	8b d7		 mov	 edx, edi
  029c2	49 8b cc	 mov	 rcx, r12
  029c5	89 7d 68	 mov	 DWORD PTR tv7156[rbp-256], edi
  029c8	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  029cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?W@Relatives@@3PEAVBlockFace@@EA ; Relatives::W
  029d4	45 8b ce	 mov	 r9d, r14d
  029d7	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  029da	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  029df	44 8b c6	 mov	 r8d, esi
  029e2	49 8b d4	 mov	 rdx, r12
  029e5	48 8b c8	 mov	 rcx, rax
  029e8	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  029ed	41 ff 52 18	 call	 QWORD PTR [r10+24]
  029f1	44 0f 28 9c 24
	c0 00 00 00	 movaps	 xmm11, XMMWORD PTR [rsp+192]
  029fa	44 0f 28 94 24
	d0 00 00 00	 movaps	 xmm10, XMMWORD PTR [rsp+208]
  02a03	44 0f 28 84 24
	f0 00 00 00	 movaps	 xmm8, XMMWORD PTR [rsp+240]
  02a0c	84 c0		 test	 al, al
  02a0e	0f 85 84 05 00
	00		 jne	 $LN525@renderOrdi

; 400  : 	{
; 401  : 		TiledTexture::Icon* i = block->getIcon(world, x, y, z, Relatives::S);

  02a14	48 8b 9d 80 00
	00 00		 mov	 rbx, QWORD PTR block$[rbp-256]
  02a1b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?S@Relatives@@3PEAVBlockFace@@EA ; Relatives::S
  02a22	45 8b ce	 mov	 r9d, r14d
  02a25	4c 8b 13	 mov	 r10, QWORD PTR [rbx]
  02a28	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  02a2d	44 8b c6	 mov	 r8d, esi
  02a30	49 8b d4	 mov	 rdx, r12
  02a33	48 8b cb	 mov	 rcx, rbx
  02a36	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  02a3b	41 ff 52 08	 call	 QWORD PTR [r10+8]

; 402  : 		vStream->setIcon(block->getIcon(world, x, y, z, Relatives::E));

  02a3f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?E@Relatives@@3PEAVBlockFace@@EA ; Relatives::E
  02a46	4c 8b 13	 mov	 r10, QWORD PTR [rbx]
  02a49	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  02a4e	45 8b ce	 mov	 r9d, r14d
  02a51	44 8b c6	 mov	 r8d, esi
  02a54	49 8b d4	 mov	 rdx, r12
  02a57	48 8b cb	 mov	 rcx, rbx
  02a5a	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  02a5f	41 ff 52 08	 call	 QWORD PTR [r10+8]

; 405  : 		int i2 = 0;

  02a63	33 db		 xor	 ebx, ebx

; 408  : 
; 409  : 		if(world->getBlock(x + 1, y - 1, z)->solidEdge(world, x + 1, y - 1, z, Relatives::WU))

  02a65	41 8d 76 ff	 lea	 esi, DWORD PTR [r14-1]
  02a69	45 8b cf	 mov	 r9d, r15d
  02a6c	8b d7		 mov	 edx, edi
  02a6e	49 8b cc	 mov	 rcx, r12
  02a71	44 8b c6	 mov	 r8d, esi
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 186  : 	this->icon = icon;

  02a74	49 89 45 30	 mov	 QWORD PTR [r13+48], rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 405  : 		int i2 = 0;

  02a78	89 5d 70	 mov	 DWORD PTR i2$1$[rbp-256], ebx

; 406  : 		int i3 = 0;

  02a7b	89 5d 78	 mov	 DWORD PTR i3$1$[rbp-256], ebx

; 407  : 		int i4 = 0;

  02a7e	89 5c 24 40	 mov	 DWORD PTR i4$1$[rsp], ebx

; 408  : 
; 409  : 		if(world->getBlock(x + 1, y - 1, z)->solidEdge(world, x + 1, y - 1, z, Relatives::WU))

  02a82	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  02a87	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WU@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WU
  02a8e	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  02a91	44 8b ce	 mov	 r9d, esi
  02a94	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02a99	44 8b c7	 mov	 r8d, edi
  02a9c	49 8b d4	 mov	 rdx, r12
  02a9f	48 8b c8	 mov	 rcx, rax
  02aa2	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  02aa7	41 ff 52 20	 call	 QWORD PTR [r10+32]
  02aab	84 c0		 test	 al, al
  02aad	74 0d		 je	 SHORT $LN8@renderOrdi

; 410  : 		{
; 411  : 			i1++;

  02aaf	bb 01 00 00 00	 mov	 ebx, 1
  02ab4	89 5c 24 68	 mov	 DWORD PTR i1$1$[rsp], ebx

; 412  : 			i4++;

  02ab8	89 5c 24 40	 mov	 DWORD PTR i4$1$[rsp], ebx
$LN8@renderOrdi:

; 413  : 		}
; 414  : 
; 415  : 		if(world->getBlock(x + 1, y, z - 1)->solidEdge(world, x + 1, y, z - 1, Relatives::WN))

  02abc	8b 55 68	 mov	 edx, DWORD PTR tv7156[rbp-256]
  02abf	41 8d 7f ff	 lea	 edi, DWORD PTR [r15-1]
  02ac3	45 8b c6	 mov	 r8d, r14d
  02ac6	44 8b cf	 mov	 r9d, edi
  02ac9	49 8b cc	 mov	 rcx, r12
  02acc	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  02ad1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WN
  02ad8	44 8b 45 68	 mov	 r8d, DWORD PTR tv7156[rbp-256]
  02adc	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  02adf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02ae4	45 8b ce	 mov	 r9d, r14d
  02ae7	49 8b d4	 mov	 rdx, r12
  02aea	48 8b c8	 mov	 rcx, rax
  02aed	89 7c 24 20	 mov	 DWORD PTR [rsp+32], edi
  02af1	41 ff 52 20	 call	 QWORD PTR [r10+32]
  02af5	84 c0		 test	 al, al
  02af7	74 0d		 je	 SHORT $LN7@renderOrdi

; 416  : 		{
; 417  : 			i1++;

  02af9	ff c3		 inc	 ebx

; 418  : 			i2++;

  02afb	c7 45 70 01 00
	00 00		 mov	 DWORD PTR i2$1$[rbp-256], 1
  02b02	89 5c 24 68	 mov	 DWORD PTR i1$1$[rsp], ebx
$LN7@renderOrdi:

; 419  : 		}
; 420  : 
; 421  : 		if(world->getBlock(x + 1, y + 1, z)->solidEdge(world, x + 1, y + 1, z, Relatives::WD))

  02b06	8b 55 68	 mov	 edx, DWORD PTR tv7156[rbp-256]
  02b09	45 8d 46 01	 lea	 r8d, DWORD PTR [r14+1]
  02b0d	45 8b cf	 mov	 r9d, r15d
  02b10	49 8b cc	 mov	 rcx, r12
  02b13	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  02b18	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WD@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WD
  02b1f	44 8b 45 68	 mov	 r8d, DWORD PTR tv7156[rbp-256]
  02b23	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  02b26	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02b2b	44 89 7c 24 20	 mov	 DWORD PTR [rsp+32], r15d
  02b30	45 8d 7e 01	 lea	 r15d, DWORD PTR [r14+1]
  02b34	49 8b d4	 mov	 rdx, r12
  02b37	48 8b c8	 mov	 rcx, rax
  02b3a	45 8b cf	 mov	 r9d, r15d
  02b3d	41 ff 52 20	 call	 QWORD PTR [r10+32]
  02b41	84 c0		 test	 al, al
  02b43	74 0a		 je	 SHORT $LN6@renderOrdi

; 422  : 		{
; 423  : 			i2++;

  02b45	ff 45 70	 inc	 DWORD PTR i2$1$[rbp-256]

; 424  : 			i3++;

  02b48	c7 45 78 01 00
	00 00		 mov	 DWORD PTR i3$1$[rbp-256], 1
$LN6@renderOrdi:

; 425  : 		}
; 426  : 
; 427  : 		if(world->getBlock(x + 1, y, z + 1)->solidEdge(world, x + 1, y, z + 1, Relatives::WS))

  02b4f	8b 5c 24 60	 mov	 ebx, DWORD PTR tv7097[rsp]
  02b53	8b 55 68	 mov	 edx, DWORD PTR tv7156[rbp-256]
  02b56	45 8b c6	 mov	 r8d, r14d
  02b59	44 8b cb	 mov	 r9d, ebx
  02b5c	49 8b cc	 mov	 rcx, r12
  02b5f	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  02b64	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WS@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WS
  02b6b	44 8b 45 68	 mov	 r8d, DWORD PTR tv7156[rbp-256]
  02b6f	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  02b72	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02b77	45 8b ce	 mov	 r9d, r14d
  02b7a	49 8b d4	 mov	 rdx, r12
  02b7d	48 8b c8	 mov	 rcx, rax
  02b80	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  02b84	41 ff 52 20	 call	 QWORD PTR [r10+32]
  02b88	84 c0		 test	 al, al
  02b8a	74 07		 je	 SHORT $LN5@renderOrdi

; 428  : 		{
; 429  : 			i3++;

  02b8c	ff 45 78	 inc	 DWORD PTR i3$1$[rbp-256]

; 430  : 			i4++;

  02b8f	ff 44 24 40	 inc	 DWORD PTR i4$1$[rsp]
$LN5@renderOrdi:

; 431  : 		}
; 432  : 
; 433  : 		if(i1 < 2 && world->getBlock(x + 1, y - 1, z - 1)->solidCorner(world, x + 1, y - 1, z - 1, Relatives::WUN))

  02b93	44 8b 74 24 68	 mov	 r14d, DWORD PTR i1$1$[rsp]
  02b98	41 83 fe 02	 cmp	 r14d, 2
  02b9c	7d 3c		 jge	 SHORT $LN4@renderOrdi
  02b9e	8b 55 68	 mov	 edx, DWORD PTR tv7156[rbp-256]
  02ba1	44 8b cf	 mov	 r9d, edi
  02ba4	44 8b c6	 mov	 r8d, esi
  02ba7	49 8b cc	 mov	 rcx, r12
  02baa	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  02baf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WUN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WUN
  02bb6	44 8b 45 68	 mov	 r8d, DWORD PTR tv7156[rbp-256]
  02bba	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  02bbd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02bc2	44 8b ce	 mov	 r9d, esi
  02bc5	49 8b d4	 mov	 rdx, r12
  02bc8	48 8b c8	 mov	 rcx, rax
  02bcb	89 7c 24 20	 mov	 DWORD PTR [rsp+32], edi
  02bcf	41 ff 52 28	 call	 QWORD PTR [r10+40]
  02bd3	84 c0		 test	 al, al
  02bd5	74 03		 je	 SHORT $LN4@renderOrdi

; 434  : 		{
; 435  : 			i1++;

  02bd7	41 ff c6	 inc	 r14d
$LN4@renderOrdi:

; 436  : 		}
; 437  : 
; 438  : 		if(i2 < 2 && world->getBlock(x + 1, y + 1, z - 1)->solidCorner(world, x + 1, y + 1, z - 1, Relatives::WDN))

  02bda	83 7d 70 02	 cmp	 DWORD PTR i2$1$[rbp-256], 2
  02bde	7d 40		 jge	 SHORT $LN527@renderOrdi
  02be0	8b 55 68	 mov	 edx, DWORD PTR tv7156[rbp-256]
  02be3	44 8b cf	 mov	 r9d, edi
  02be6	45 8b c7	 mov	 r8d, r15d
  02be9	49 8b cc	 mov	 rcx, r12
  02bec	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  02bf1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WDN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WDN
  02bf8	45 8b cf	 mov	 r9d, r15d
  02bfb	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  02bfe	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02c03	89 7c 24 20	 mov	 DWORD PTR [rsp+32], edi
  02c07	8b 7d 68	 mov	 edi, DWORD PTR tv7156[rbp-256]
  02c0a	49 8b d4	 mov	 rdx, r12
  02c0d	48 8b c8	 mov	 rcx, rax
  02c10	44 8b c7	 mov	 r8d, edi
  02c13	41 ff 52 28	 call	 QWORD PTR [r10+40]
  02c17	84 c0		 test	 al, al
  02c19	74 08		 je	 SHORT $LN3@renderOrdi

; 439  : 		{
; 440  : 			i2++;

  02c1b	ff 45 70	 inc	 DWORD PTR i2$1$[rbp-256]
  02c1e	eb 03		 jmp	 SHORT $LN3@renderOrdi
$LN527@renderOrdi:
  02c20	8b 7d 68	 mov	 edi, DWORD PTR tv7156[rbp-256]
$LN3@renderOrdi:

; 441  : 		}
; 442  : 								
; 443  : 		if(i3 < 2 && world->getBlock(x + 1, y + 1, z + 1)->solidCorner(world, x + 1, y + 1, z + 1, Relatives::WDS))

  02c23	83 7d 78 02	 cmp	 DWORD PTR i3$1$[rbp-256], 2
  02c27	7d 3a		 jge	 SHORT $LN2@renderOrdi
  02c29	44 8b cb	 mov	 r9d, ebx
  02c2c	45 8b c7	 mov	 r8d, r15d
  02c2f	8b d7		 mov	 edx, edi
  02c31	49 8b cc	 mov	 rcx, r12
  02c34	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  02c39	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WDS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WDS
  02c40	45 8b cf	 mov	 r9d, r15d
  02c43	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  02c46	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02c4b	44 8b c7	 mov	 r8d, edi
  02c4e	49 8b d4	 mov	 rdx, r12
  02c51	48 8b c8	 mov	 rcx, rax
  02c54	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  02c58	41 ff 52 28	 call	 QWORD PTR [r10+40]
  02c5c	84 c0		 test	 al, al
  02c5e	74 03		 je	 SHORT $LN2@renderOrdi

; 444  : 		{
; 445  : 			i3++;

  02c60	ff 45 78	 inc	 DWORD PTR i3$1$[rbp-256]
$LN2@renderOrdi:

; 446  : 		}
; 447  : 								
; 448  : 		if(i4 < 2 && world->getBlock(x + 1, y - 1, z + 1)->solidCorner(world, x + 1, y - 1, z + 1, Relatives::WUS))

  02c63	44 8b 7c 24 40	 mov	 r15d, DWORD PTR i4$1$[rsp]
  02c68	41 83 ff 02	 cmp	 r15d, 2
  02c6c	7d 3a		 jge	 SHORT $LN1@renderOrdi
  02c6e	44 8b cb	 mov	 r9d, ebx
  02c71	44 8b c6	 mov	 r8d, esi
  02c74	8b d7		 mov	 edx, edi
  02c76	49 8b cc	 mov	 rcx, r12
  02c79	e8 00 00 00 00	 call	 ?getBlock@World@@QEAAPEAVBlock@@HHH@Z ; World::getBlock
  02c7e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WUS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WUS
  02c85	44 8b ce	 mov	 r9d, esi
  02c88	4c 8b 10	 mov	 r10, QWORD PTR [rax]
  02c8b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02c90	44 8b c7	 mov	 r8d, edi
  02c93	49 8b d4	 mov	 rdx, r12
  02c96	48 8b c8	 mov	 rcx, rax
  02c99	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  02c9d	41 ff 52 28	 call	 QWORD PTR [r10+40]
  02ca1	84 c0		 test	 al, al
  02ca3	74 03		 je	 SHORT $LN1@renderOrdi

; 449  : 		{
; 450  : 			i4++;

  02ca5	41 ff c7	 inc	 r15d
$LN1@renderOrdi:
  02ca8	66 0f 6e 4d 70	 movd	 xmm1, DWORD PTR i2$1$[rbp-256]

; 453  : 		float f1 = 1.0F - i1 * 0.15f;

  02cad	41 0f 28 d1	 movaps	 xmm2, xmm9

; 454  : 		float f2 = 1.0F - i2 * 0.15f;

  02cb1	41 0f 28 f9	 movaps	 xmm7, xmm9

; 461  : 		vStream->put(gfxu::VertexUVRGBA(1.0f, 0.0f, 0.0f, 0.0f, 0.0f, f1, f1, f1, 1.0f));

  02cb5	48 8d 54 24 48	 lea	 rdx, QWORD PTR $T8[rsp]
  02cba	49 8b cd	 mov	 rcx, r13
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02cbd	c7 44 24 70 00
	00 80 3f	 mov	 DWORD PTR center$10[rsp], 1065353216 ; 3f800000H
  02cc5	c7 44 24 74 00
	00 00 3f	 mov	 DWORD PTR center$10[rsp+4], 1056964608 ; 3f000000H
  02ccd	c7 44 24 78 00
	00 00 3f	 mov	 DWORD PTR center$10[rsp+8], 1056964608 ; 3f000000H
  02cd5	c7 44 24 7c 00
	00 00 3f	 mov	 DWORD PTR center$10[rsp+12], 1056964608 ; 3f000000H
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 454  : 		float f2 = 1.0F - i2 * 0.15f;

  02cdd	0f 5b c9	 cvtdq2ps xmm1, xmm1
  02ce0	66 41 0f 6e c6	 movd	 xmm0, r14d

; 455  : 		float f3 = 1.0F - i3 * 0.15f;

  02ce5	41 0f 28 f1	 movaps	 xmm6, xmm9
  02ce9	f3 41 0f 59 cd	 mulss	 xmm1, xmm13
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02cee	c7 45 80 00 00
	00 3f		 mov	 DWORD PTR center$10[rbp-240], 1056964608 ; 3f000000H
  02cf5	c6 45 87 ff	 mov	 BYTE PTR center$10[rbp-233], 255 ; 000000ffH
  02cf9	48 c7 44 24 48
	00 00 80 3f	 mov	 QWORD PTR $T8[rsp], 1065353216 ; 3f800000H
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 454  : 		float f2 = 1.0F - i2 * 0.15f;

  02d02	f3 0f 5c f9	 subss	 xmm7, xmm1
  02d06	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02d09	66 41 0f 6e cf	 movd	 xmm1, r15d
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02d0e	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR $T8[rsp+8], 0
  02d17	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR $T8[rsp+16], 0
  02d1f	c6 44 24 5f ff	 mov	 BYTE PTR $T8[rsp+23], 255 ; 000000ffH
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 453  : 		float f1 = 1.0F - i1 * 0.15f;

  02d24	f3 41 0f 59 c5	 mulss	 xmm0, xmm13
  02d29	f3 0f 5c d0	 subss	 xmm2, xmm0
  02d2d	66 0f 6e 45 78	 movd	 xmm0, DWORD PTR i3$1$[rbp-256]

; 456  : 		float f4 = 1.0F - i4 * 0.15f;

  02d32	0f 5b c9	 cvtdq2ps xmm1, xmm1
  02d35	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02d38	f3 41 0f 59 cd	 mulss	 xmm1, xmm13
  02d3d	f3 44 0f 5c c9	 subss	 xmm9, xmm1
  02d42	f3 41 0f 59 c5	 mulss	 xmm0, xmm13
  02d47	f3 0f 5c f0	 subss	 xmm6, xmm0

; 458  : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  02d4b	0f 28 c7	 movaps	 xmm0, xmm7
  02d4e	f3 0f 58 c2	 addss	 xmm0, xmm2
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02d52	f3 41 0f 59 d4	 mulss	 xmm2, xmm12
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 458  : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  02d57	f3 0f 58 c6	 addss	 xmm0, xmm6
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02d5b	f3 48 0f 2c fa	 cvttss2si rdi, xmm2
  02d60	40 88 7c 24 5c	 mov	 BYTE PTR $T8[rsp+20], dil
  02d65	40 88 7c 24 5d	 mov	 BYTE PTR $T8[rsp+21], dil
  02d6a	40 88 7c 24 5e	 mov	 BYTE PTR $T8[rsp+22], dil
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 458  : 		float avg = (f1 + f2 + f3 + f4) / 4.0f;

  02d6f	f3 41 0f 58 c1	 addss	 xmm0, xmm9
  02d74	f3 41 0f 59 c6	 mulss	 xmm0, xmm14
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02d79	f3 41 0f 59 c4	 mulss	 xmm0, xmm12
  02d7e	f3 48 0f 2c c0	 cvttss2si rax, xmm0
  02d83	88 45 84	 mov	 BYTE PTR center$10[rbp-236], al
  02d86	88 45 85	 mov	 BYTE PTR center$10[rbp-235], al
  02d89	88 45 86	 mov	 BYTE PTR center$10[rbp-234], al
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 461  : 		vStream->put(gfxu::VertexUVRGBA(1.0f, 0.0f, 0.0f, 0.0f, 0.0f, f1, f1, f1, 1.0f));

  02d8c	e8 00 00 00 00	 call	 ?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z ; gfxu::VertexStream::put

; 462  : 		vStream->put(gfxu::VertexUVRGBA(1.0f, 0.0f, 1.0f, 1.0f, 0.0f, f4, f4, f4, 1.0f));

  02d91	48 8d 54 24 48	 lea	 rdx, QWORD PTR $T7[rsp]
  02d96	49 8b cd	 mov	 rcx, r13
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02d99	f3 45 0f 59 cc	 mulss	 xmm9, xmm12
  02d9e	48 c7 44 24 48
	00 00 80 3f	 mov	 QWORD PTR $T7[rsp], 1065353216 ; 3f800000H
  02da7	c7 44 24 50 00
	00 80 3f	 mov	 DWORD PTR $T7[rsp+8], 1065353216 ; 3f800000H
  02daf	48 c7 44 24 54
	00 00 80 3f	 mov	 QWORD PTR $T7[rsp+12], 1065353216 ; 3f800000H
  02db8	f3 49 0f 2c d9	 cvttss2si rbx, xmm9
  02dbd	88 5c 24 5c	 mov	 BYTE PTR $T7[rsp+20], bl
  02dc1	88 5c 24 5d	 mov	 BYTE PTR $T7[rsp+21], bl
  02dc5	88 5c 24 5e	 mov	 BYTE PTR $T7[rsp+22], bl
  02dc9	c6 44 24 5f ff	 mov	 BYTE PTR $T7[rsp+23], 255 ; 000000ffH
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 462  : 		vStream->put(gfxu::VertexUVRGBA(1.0f, 0.0f, 1.0f, 1.0f, 0.0f, f4, f4, f4, 1.0f));

  02dce	e8 00 00 00 00	 call	 ?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z ; gfxu::VertexStream::put

; 463  : 		vStream->put(center);

  02dd3	48 8d 54 24 70	 lea	 rdx, QWORD PTR center$10[rsp]
  02dd8	49 8b cd	 mov	 rcx, r13
  02ddb	e8 00 00 00 00	 call	 ?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z ; gfxu::VertexStream::put

; 465  : 		vStream->put(gfxu::VertexUVRGBA(1.0f, 0.0f, 1.0f, 1.0f, 0.0f, f4, f4, f4, 1.0f));

  02de0	48 8d 54 24 48	 lea	 rdx, QWORD PTR $T6[rsp]
  02de5	49 8b cd	 mov	 rcx, r13
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02de8	48 c7 44 24 48
	00 00 80 3f	 mov	 QWORD PTR $T6[rsp], 1065353216 ; 3f800000H
  02df1	c7 44 24 50 00
	00 80 3f	 mov	 DWORD PTR $T6[rsp+8], 1065353216 ; 3f800000H
  02df9	48 c7 44 24 54
	00 00 80 3f	 mov	 QWORD PTR $T6[rsp+12], 1065353216 ; 3f800000H
  02e02	88 5c 24 5c	 mov	 BYTE PTR $T6[rsp+20], bl
  02e06	88 5c 24 5d	 mov	 BYTE PTR $T6[rsp+21], bl
  02e0a	88 5c 24 5e	 mov	 BYTE PTR $T6[rsp+22], bl
  02e0e	c6 44 24 5f ff	 mov	 BYTE PTR $T6[rsp+23], 255 ; 000000ffH
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 465  : 		vStream->put(gfxu::VertexUVRGBA(1.0f, 0.0f, 1.0f, 1.0f, 0.0f, f4, f4, f4, 1.0f));

  02e13	e8 00 00 00 00	 call	 ?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z ; gfxu::VertexStream::put
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02e18	c7 44 24 48 00
	00 80 3f	 mov	 DWORD PTR $T5[rsp], 1065353216 ; 3f800000H
  02e20	f3 41 0f 59 f4	 mulss	 xmm6, xmm12
  02e25	c7 44 24 4c 00
	00 80 3f	 mov	 DWORD PTR $T5[rsp+4], 1065353216 ; 3f800000H
  02e2d	c7 44 24 50 00
	00 80 3f	 mov	 DWORD PTR $T5[rsp+8], 1065353216 ; 3f800000H
  02e35	c7 44 24 54 00
	00 80 3f	 mov	 DWORD PTR $T5[rsp+12], 1065353216 ; 3f800000H
  02e3d	f3 48 0f 2c de	 cvttss2si rbx, xmm6
  02e42	88 5c 24 5c	 mov	 BYTE PTR $T5[rsp+20], bl
  02e46	88 5c 24 5d	 mov	 BYTE PTR $T5[rsp+21], bl
  02e4a	c7 44 24 58 00
	00 80 3f	 mov	 DWORD PTR $T5[rsp+16], 1065353216 ; 3f800000H
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 466  : 		vStream->put(gfxu::VertexUVRGBA(1.0f, 1.0f, 1.0f, 1.0f, 1.0f, f3, f3, f3, 1.0f));

  02e52	48 8d 54 24 48	 lea	 rdx, QWORD PTR $T5[rsp]
  02e57	49 8b cd	 mov	 rcx, r13
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02e5a	88 5c 24 5e	 mov	 BYTE PTR $T5[rsp+22], bl
  02e5e	c6 44 24 5f ff	 mov	 BYTE PTR $T5[rsp+23], 255 ; 000000ffH
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 466  : 		vStream->put(gfxu::VertexUVRGBA(1.0f, 1.0f, 1.0f, 1.0f, 1.0f, f3, f3, f3, 1.0f));

  02e63	e8 00 00 00 00	 call	 ?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z ; gfxu::VertexStream::put

; 467  : 		vStream->put(center);

  02e68	48 8d 54 24 70	 lea	 rdx, QWORD PTR center$10[rsp]
  02e6d	49 8b cd	 mov	 rcx, r13
  02e70	e8 00 00 00 00	 call	 ?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z ; gfxu::VertexStream::put

; 469  : 		vStream->put(gfxu::VertexUVRGBA(1.0f, 1.0f, 1.0f, 1.0f, 1.0f, f3, f3, f3, 1.0f));

  02e75	48 8d 54 24 48	 lea	 rdx, QWORD PTR $T4[rsp]
  02e7a	49 8b cd	 mov	 rcx, r13
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02e7d	c7 44 24 48 00
	00 80 3f	 mov	 DWORD PTR $T4[rsp], 1065353216 ; 3f800000H
  02e85	c7 44 24 4c 00
	00 80 3f	 mov	 DWORD PTR $T4[rsp+4], 1065353216 ; 3f800000H
  02e8d	c7 44 24 50 00
	00 80 3f	 mov	 DWORD PTR $T4[rsp+8], 1065353216 ; 3f800000H
  02e95	c7 44 24 54 00
	00 80 3f	 mov	 DWORD PTR $T4[rsp+12], 1065353216 ; 3f800000H
  02e9d	c7 44 24 58 00
	00 80 3f	 mov	 DWORD PTR $T4[rsp+16], 1065353216 ; 3f800000H
  02ea5	88 5c 24 5c	 mov	 BYTE PTR $T4[rsp+20], bl
  02ea9	88 5c 24 5d	 mov	 BYTE PTR $T4[rsp+21], bl
  02ead	88 5c 24 5e	 mov	 BYTE PTR $T4[rsp+22], bl
  02eb1	c6 44 24 5f ff	 mov	 BYTE PTR $T4[rsp+23], 255 ; 000000ffH
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 469  : 		vStream->put(gfxu::VertexUVRGBA(1.0f, 1.0f, 1.0f, 1.0f, 1.0f, f3, f3, f3, 1.0f));

  02eb6	e8 00 00 00 00	 call	 ?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z ; gfxu::VertexStream::put

; 470  : 		vStream->put(gfxu::VertexUVRGBA(1.0f, 1.0f, 0.0f, 0.0f, 1.0f, f2, f2, f2, 1.0f));

  02ebb	48 8d 54 24 48	 lea	 rdx, QWORD PTR $T3[rsp]
  02ec0	49 8b cd	 mov	 rcx, r13
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02ec3	f3 41 0f 59 fc	 mulss	 xmm7, xmm12
  02ec8	c7 44 24 48 00
	00 80 3f	 mov	 DWORD PTR $T3[rsp], 1065353216 ; 3f800000H
  02ed0	48 c7 44 24 4c
	00 00 80 3f	 mov	 QWORD PTR $T3[rsp+4], 1065353216 ; 3f800000H
  02ed9	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR $T3[rsp+12], 0
  02ee1	f3 48 0f 2c df	 cvttss2si rbx, xmm7
  02ee6	c7 44 24 58 00
	00 80 3f	 mov	 DWORD PTR $T3[rsp+16], 1065353216 ; 3f800000H
  02eee	c6 44 24 5f ff	 mov	 BYTE PTR $T3[rsp+23], 255 ; 000000ffH
  02ef3	88 5c 24 5c	 mov	 BYTE PTR $T3[rsp+20], bl
  02ef7	88 5c 24 5d	 mov	 BYTE PTR $T3[rsp+21], bl
  02efb	88 5c 24 5e	 mov	 BYTE PTR $T3[rsp+22], bl
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 470  : 		vStream->put(gfxu::VertexUVRGBA(1.0f, 1.0f, 0.0f, 0.0f, 1.0f, f2, f2, f2, 1.0f));

  02eff	e8 00 00 00 00	 call	 ?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z ; gfxu::VertexStream::put

; 471  : 		vStream->put(center);

  02f04	48 8d 54 24 70	 lea	 rdx, QWORD PTR center$10[rsp]
  02f09	49 8b cd	 mov	 rcx, r13
  02f0c	e8 00 00 00 00	 call	 ?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z ; gfxu::VertexStream::put

; 473  : 		vStream->put(gfxu::VertexUVRGBA(1.0f, 1.0f, 0.0f, 0.0f, 1.0f, f2, f2, f2, 1.0f));

  02f11	48 8d 54 24 48	 lea	 rdx, QWORD PTR $T2[rsp]
  02f16	49 8b cd	 mov	 rcx, r13
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02f19	c7 44 24 48 00
	00 80 3f	 mov	 DWORD PTR $T2[rsp], 1065353216 ; 3f800000H
  02f21	48 c7 44 24 4c
	00 00 80 3f	 mov	 QWORD PTR $T2[rsp+4], 1065353216 ; 3f800000H
  02f2a	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR $T2[rsp+12], 0
  02f32	c7 44 24 58 00
	00 80 3f	 mov	 DWORD PTR $T2[rsp+16], 1065353216 ; 3f800000H
  02f3a	88 5c 24 5c	 mov	 BYTE PTR $T2[rsp+20], bl
  02f3e	88 5c 24 5d	 mov	 BYTE PTR $T2[rsp+21], bl
  02f42	88 5c 24 5e	 mov	 BYTE PTR $T2[rsp+22], bl
  02f46	c6 44 24 5f ff	 mov	 BYTE PTR $T2[rsp+23], 255 ; 000000ffH
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 473  : 		vStream->put(gfxu::VertexUVRGBA(1.0f, 1.0f, 0.0f, 0.0f, 1.0f, f2, f2, f2, 1.0f));

  02f4b	e8 00 00 00 00	 call	 ?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z ; gfxu::VertexStream::put

; 474  : 		vStream->put(gfxu::VertexUVRGBA(1.0f, 0.0f, 0.0f, 0.0f, 0.0f, f1, f1, f1, 1.0f));

  02f50	48 8d 54 24 48	 lea	 rdx, QWORD PTR $T1[rsp]
  02f55	49 8b cd	 mov	 rcx, r13
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 70   : {}

  02f58	48 c7 44 24 48
	00 00 80 3f	 mov	 QWORD PTR $T1[rsp], 1065353216 ; 3f800000H
  02f61	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR $T1[rsp+8], 0
  02f6a	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR $T1[rsp+16], 0
  02f72	40 88 7c 24 5c	 mov	 BYTE PTR $T1[rsp+20], dil
  02f77	40 88 7c 24 5d	 mov	 BYTE PTR $T1[rsp+21], dil
  02f7c	40 88 7c 24 5e	 mov	 BYTE PTR $T1[rsp+22], dil
  02f81	c6 44 24 5f ff	 mov	 BYTE PTR $T1[rsp+23], 255 ; 000000ffH
; File c:\users\glenn\documents\github\wind\project\wind\wind\renderblocks.cpp

; 474  : 		vStream->put(gfxu::VertexUVRGBA(1.0f, 0.0f, 0.0f, 0.0f, 0.0f, f1, f1, f1, 1.0f));

  02f86	e8 00 00 00 00	 call	 ?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z ; gfxu::VertexStream::put

; 475  : 		vStream->put(center);

  02f8b	48 8d 54 24 70	 lea	 rdx, QWORD PTR center$10[rsp]
  02f90	49 8b cd	 mov	 rcx, r13
  02f93	e8 00 00 00 00	 call	 ?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z ; gfxu::VertexStream::put
$LN525@renderOrdi:

; 476  : 	}
; 477  : 
; 478  : 	return true;
; 479  : }

  02f98	4c 8d 9c 24 20
	01 00 00	 lea	 r11, QWORD PTR [rsp+288]
  02fa0	b0 01		 mov	 al, 1
  02fa2	49 8b 5b 40	 mov	 rbx, QWORD PTR [r11+64]
  02fa6	41 0f 28 73 f0	 movaps	 xmm6, XMMWORD PTR [r11-16]
  02fab	41 0f 28 7b e0	 movaps	 xmm7, XMMWORD PTR [r11-32]
  02fb0	45 0f 28 4b c0	 movaps	 xmm9, XMMWORD PTR [r11-64]
  02fb5	45 0f 28 63 90	 movaps	 xmm12, XMMWORD PTR [r11-112]
  02fba	45 0f 28 6b 80	 movaps	 xmm13, XMMWORD PTR [r11-128]
  02fbf	45 0f 28 b3 70
	ff ff ff	 movaps	 xmm14, XMMWORD PTR [r11-144]
  02fc7	49 8b e3	 mov	 rsp, r11
  02fca	41 5f		 pop	 r15
  02fcc	41 5e		 pop	 r14
  02fce	41 5d		 pop	 r13
  02fd0	41 5c		 pop	 r12
  02fd2	5f		 pop	 rdi
  02fd3	5e		 pop	 rsi
  02fd4	5d		 pop	 rbp
  02fd5	c3		 ret	 0
?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ENDP ; BlockRenderers::renderOrdinaryBlock
_TEXT	ENDS
END
